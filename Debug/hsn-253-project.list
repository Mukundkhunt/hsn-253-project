
hsn-253-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3b0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  0800b470  0800b470  0000c470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb8c  0800bb8c  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bb8c  0800bb8c  0000cb8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb94  0800bb94  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb94  0800bb94  0000cb94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb98  0800bb98  0000cb98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bb9c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  200001d4  0800bd70  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  0800bd70  0000d500  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f5a  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270e  00000000  00000000  0001f156  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  00021868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bde  00000000  00000000  00022790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d91  00000000  00000000  0002336e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001371e  00000000  00000000  0003d0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f30e  00000000  00000000  0005081d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000efb2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a20  00000000  00000000  000efb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000f4590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d4 	.word	0x200001d4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b454 	.word	0x0800b454

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001d8 	.word	0x200001d8
 8000100:	0800b454 	.word	0x0800b454

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f002 f937 	bl	80026ac <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f002 f87b 	bl	8002544 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f002 f929 	bl	80026ac <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f002 f91f 	bl	80026ac <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f002 f8a5 	bl	80025cc <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f002 f89b 	bl	80025cc <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fcaf 	bl	8000e10 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fc37 	bl	8000d30 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fca1 	bl	8000e10 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc97 	bl	8000e10 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fc45 	bl	8000d80 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc3b 	bl	8000d80 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	0008      	movs	r0, r1
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	@ (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	@ (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f81e 	bl	8000588 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_f2uiz>:
 8000558:	219e      	movs	r1, #158	@ 0x9e
 800055a:	b510      	push	{r4, lr}
 800055c:	05c9      	lsls	r1, r1, #23
 800055e:	1c04      	adds	r4, r0, #0
 8000560:	f7ff ffd0 	bl	8000504 <__aeabi_fcmpge>
 8000564:	2800      	cmp	r0, #0
 8000566:	d103      	bne.n	8000570 <__aeabi_f2uiz+0x18>
 8000568:	1c20      	adds	r0, r4, #0
 800056a:	f001 f857 	bl	800161c <__aeabi_f2iz>
 800056e:	bd10      	pop	{r4, pc}
 8000570:	219e      	movs	r1, #158	@ 0x9e
 8000572:	1c20      	adds	r0, r4, #0
 8000574:	05c9      	lsls	r1, r1, #23
 8000576:	f000 fded 	bl	8001154 <__aeabi_fsub>
 800057a:	f001 f84f 	bl	800161c <__aeabi_f2iz>
 800057e:	2380      	movs	r3, #128	@ 0x80
 8000580:	061b      	lsls	r3, r3, #24
 8000582:	469c      	mov	ip, r3
 8000584:	4460      	add	r0, ip
 8000586:	e7f2      	b.n	800056e <__aeabi_f2uiz+0x16>

08000588 <__udivmoddi4>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	4657      	mov	r7, sl
 800058c:	464e      	mov	r6, r9
 800058e:	4645      	mov	r5, r8
 8000590:	46de      	mov	lr, fp
 8000592:	b5e0      	push	{r5, r6, r7, lr}
 8000594:	0004      	movs	r4, r0
 8000596:	000d      	movs	r5, r1
 8000598:	4692      	mov	sl, r2
 800059a:	4699      	mov	r9, r3
 800059c:	b083      	sub	sp, #12
 800059e:	428b      	cmp	r3, r1
 80005a0:	d830      	bhi.n	8000604 <__udivmoddi4+0x7c>
 80005a2:	d02d      	beq.n	8000600 <__udivmoddi4+0x78>
 80005a4:	4649      	mov	r1, r9
 80005a6:	4650      	mov	r0, sl
 80005a8:	f003 f8ac 	bl	8003704 <__clzdi2>
 80005ac:	0029      	movs	r1, r5
 80005ae:	0006      	movs	r6, r0
 80005b0:	0020      	movs	r0, r4
 80005b2:	f003 f8a7 	bl	8003704 <__clzdi2>
 80005b6:	1a33      	subs	r3, r6, r0
 80005b8:	4698      	mov	r8, r3
 80005ba:	3b20      	subs	r3, #32
 80005bc:	d434      	bmi.n	8000628 <__udivmoddi4+0xa0>
 80005be:	469b      	mov	fp, r3
 80005c0:	4653      	mov	r3, sl
 80005c2:	465a      	mov	r2, fp
 80005c4:	4093      	lsls	r3, r2
 80005c6:	4642      	mov	r2, r8
 80005c8:	001f      	movs	r7, r3
 80005ca:	4653      	mov	r3, sl
 80005cc:	4093      	lsls	r3, r2
 80005ce:	001e      	movs	r6, r3
 80005d0:	42af      	cmp	r7, r5
 80005d2:	d83b      	bhi.n	800064c <__udivmoddi4+0xc4>
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d100      	bne.n	80005da <__udivmoddi4+0x52>
 80005d8:	e079      	b.n	80006ce <__udivmoddi4+0x146>
 80005da:	465b      	mov	r3, fp
 80005dc:	1ba4      	subs	r4, r4, r6
 80005de:	41bd      	sbcs	r5, r7
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	da00      	bge.n	80005e6 <__udivmoddi4+0x5e>
 80005e4:	e076      	b.n	80006d4 <__udivmoddi4+0x14c>
 80005e6:	2200      	movs	r2, #0
 80005e8:	2300      	movs	r3, #0
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	465a      	mov	r2, fp
 80005f2:	4093      	lsls	r3, r2
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	4642      	mov	r2, r8
 80005fa:	4093      	lsls	r3, r2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	e029      	b.n	8000654 <__udivmoddi4+0xcc>
 8000600:	4282      	cmp	r2, r0
 8000602:	d9cf      	bls.n	80005a4 <__udivmoddi4+0x1c>
 8000604:	2200      	movs	r2, #0
 8000606:	2300      	movs	r3, #0
 8000608:	9200      	str	r2, [sp, #0]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <__udivmoddi4+0x8e>
 8000612:	601c      	str	r4, [r3, #0]
 8000614:	605d      	str	r5, [r3, #4]
 8000616:	9800      	ldr	r0, [sp, #0]
 8000618:	9901      	ldr	r1, [sp, #4]
 800061a:	b003      	add	sp, #12
 800061c:	bcf0      	pop	{r4, r5, r6, r7}
 800061e:	46bb      	mov	fp, r7
 8000620:	46b2      	mov	sl, r6
 8000622:	46a9      	mov	r9, r5
 8000624:	46a0      	mov	r8, r4
 8000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000628:	4642      	mov	r2, r8
 800062a:	469b      	mov	fp, r3
 800062c:	2320      	movs	r3, #32
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	4652      	mov	r2, sl
 8000632:	40da      	lsrs	r2, r3
 8000634:	4641      	mov	r1, r8
 8000636:	0013      	movs	r3, r2
 8000638:	464a      	mov	r2, r9
 800063a:	408a      	lsls	r2, r1
 800063c:	0017      	movs	r7, r2
 800063e:	4642      	mov	r2, r8
 8000640:	431f      	orrs	r7, r3
 8000642:	4653      	mov	r3, sl
 8000644:	4093      	lsls	r3, r2
 8000646:	001e      	movs	r6, r3
 8000648:	42af      	cmp	r7, r5
 800064a:	d9c3      	bls.n	80005d4 <__udivmoddi4+0x4c>
 800064c:	2200      	movs	r2, #0
 800064e:	2300      	movs	r3, #0
 8000650:	9200      	str	r2, [sp, #0]
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	4643      	mov	r3, r8
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0d8      	beq.n	800060c <__udivmoddi4+0x84>
 800065a:	07fb      	lsls	r3, r7, #31
 800065c:	0872      	lsrs	r2, r6, #1
 800065e:	431a      	orrs	r2, r3
 8000660:	4646      	mov	r6, r8
 8000662:	087b      	lsrs	r3, r7, #1
 8000664:	e00e      	b.n	8000684 <__udivmoddi4+0xfc>
 8000666:	42ab      	cmp	r3, r5
 8000668:	d101      	bne.n	800066e <__udivmoddi4+0xe6>
 800066a:	42a2      	cmp	r2, r4
 800066c:	d80c      	bhi.n	8000688 <__udivmoddi4+0x100>
 800066e:	1aa4      	subs	r4, r4, r2
 8000670:	419d      	sbcs	r5, r3
 8000672:	2001      	movs	r0, #1
 8000674:	1924      	adds	r4, r4, r4
 8000676:	416d      	adcs	r5, r5
 8000678:	2100      	movs	r1, #0
 800067a:	3e01      	subs	r6, #1
 800067c:	1824      	adds	r4, r4, r0
 800067e:	414d      	adcs	r5, r1
 8000680:	2e00      	cmp	r6, #0
 8000682:	d006      	beq.n	8000692 <__udivmoddi4+0x10a>
 8000684:	42ab      	cmp	r3, r5
 8000686:	d9ee      	bls.n	8000666 <__udivmoddi4+0xde>
 8000688:	3e01      	subs	r6, #1
 800068a:	1924      	adds	r4, r4, r4
 800068c:	416d      	adcs	r5, r5
 800068e:	2e00      	cmp	r6, #0
 8000690:	d1f8      	bne.n	8000684 <__udivmoddi4+0xfc>
 8000692:	9800      	ldr	r0, [sp, #0]
 8000694:	9901      	ldr	r1, [sp, #4]
 8000696:	465b      	mov	r3, fp
 8000698:	1900      	adds	r0, r0, r4
 800069a:	4169      	adcs	r1, r5
 800069c:	2b00      	cmp	r3, #0
 800069e:	db24      	blt.n	80006ea <__udivmoddi4+0x162>
 80006a0:	002b      	movs	r3, r5
 80006a2:	465a      	mov	r2, fp
 80006a4:	4644      	mov	r4, r8
 80006a6:	40d3      	lsrs	r3, r2
 80006a8:	002a      	movs	r2, r5
 80006aa:	40e2      	lsrs	r2, r4
 80006ac:	001c      	movs	r4, r3
 80006ae:	465b      	mov	r3, fp
 80006b0:	0015      	movs	r5, r2
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db2a      	blt.n	800070c <__udivmoddi4+0x184>
 80006b6:	0026      	movs	r6, r4
 80006b8:	409e      	lsls	r6, r3
 80006ba:	0033      	movs	r3, r6
 80006bc:	0026      	movs	r6, r4
 80006be:	4647      	mov	r7, r8
 80006c0:	40be      	lsls	r6, r7
 80006c2:	0032      	movs	r2, r6
 80006c4:	1a80      	subs	r0, r0, r2
 80006c6:	4199      	sbcs	r1, r3
 80006c8:	9000      	str	r0, [sp, #0]
 80006ca:	9101      	str	r1, [sp, #4]
 80006cc:	e79e      	b.n	800060c <__udivmoddi4+0x84>
 80006ce:	42a3      	cmp	r3, r4
 80006d0:	d8bc      	bhi.n	800064c <__udivmoddi4+0xc4>
 80006d2:	e782      	b.n	80005da <__udivmoddi4+0x52>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2320      	movs	r3, #32
 80006d8:	2100      	movs	r1, #0
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	2200      	movs	r2, #0
 80006de:	9100      	str	r1, [sp, #0]
 80006e0:	9201      	str	r2, [sp, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	40da      	lsrs	r2, r3
 80006e6:	9201      	str	r2, [sp, #4]
 80006e8:	e785      	b.n	80005f6 <__udivmoddi4+0x6e>
 80006ea:	4642      	mov	r2, r8
 80006ec:	2320      	movs	r3, #32
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	002a      	movs	r2, r5
 80006f2:	4646      	mov	r6, r8
 80006f4:	409a      	lsls	r2, r3
 80006f6:	0023      	movs	r3, r4
 80006f8:	40f3      	lsrs	r3, r6
 80006fa:	4644      	mov	r4, r8
 80006fc:	4313      	orrs	r3, r2
 80006fe:	002a      	movs	r2, r5
 8000700:	40e2      	lsrs	r2, r4
 8000702:	001c      	movs	r4, r3
 8000704:	465b      	mov	r3, fp
 8000706:	0015      	movs	r5, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	dad4      	bge.n	80006b6 <__udivmoddi4+0x12e>
 800070c:	4642      	mov	r2, r8
 800070e:	002f      	movs	r7, r5
 8000710:	2320      	movs	r3, #32
 8000712:	0026      	movs	r6, r4
 8000714:	4097      	lsls	r7, r2
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	40de      	lsrs	r6, r3
 800071a:	003b      	movs	r3, r7
 800071c:	4333      	orrs	r3, r6
 800071e:	e7cd      	b.n	80006bc <__udivmoddi4+0x134>

08000720 <__aeabi_fadd>:
 8000720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000722:	024b      	lsls	r3, r1, #9
 8000724:	0a5a      	lsrs	r2, r3, #9
 8000726:	4694      	mov	ip, r2
 8000728:	004a      	lsls	r2, r1, #1
 800072a:	0fc9      	lsrs	r1, r1, #31
 800072c:	46ce      	mov	lr, r9
 800072e:	4647      	mov	r7, r8
 8000730:	4689      	mov	r9, r1
 8000732:	0045      	lsls	r5, r0, #1
 8000734:	0246      	lsls	r6, r0, #9
 8000736:	0e2d      	lsrs	r5, r5, #24
 8000738:	0e12      	lsrs	r2, r2, #24
 800073a:	b580      	push	{r7, lr}
 800073c:	0999      	lsrs	r1, r3, #6
 800073e:	0a77      	lsrs	r7, r6, #9
 8000740:	0fc4      	lsrs	r4, r0, #31
 8000742:	09b6      	lsrs	r6, r6, #6
 8000744:	1aab      	subs	r3, r5, r2
 8000746:	454c      	cmp	r4, r9
 8000748:	d020      	beq.n	800078c <__aeabi_fadd+0x6c>
 800074a:	2b00      	cmp	r3, #0
 800074c:	dd0c      	ble.n	8000768 <__aeabi_fadd+0x48>
 800074e:	2a00      	cmp	r2, #0
 8000750:	d134      	bne.n	80007bc <__aeabi_fadd+0x9c>
 8000752:	2900      	cmp	r1, #0
 8000754:	d02a      	beq.n	80007ac <__aeabi_fadd+0x8c>
 8000756:	1e5a      	subs	r2, r3, #1
 8000758:	2b01      	cmp	r3, #1
 800075a:	d100      	bne.n	800075e <__aeabi_fadd+0x3e>
 800075c:	e08f      	b.n	800087e <__aeabi_fadd+0x15e>
 800075e:	2bff      	cmp	r3, #255	@ 0xff
 8000760:	d100      	bne.n	8000764 <__aeabi_fadd+0x44>
 8000762:	e0cd      	b.n	8000900 <__aeabi_fadd+0x1e0>
 8000764:	0013      	movs	r3, r2
 8000766:	e02f      	b.n	80007c8 <__aeabi_fadd+0xa8>
 8000768:	2b00      	cmp	r3, #0
 800076a:	d060      	beq.n	800082e <__aeabi_fadd+0x10e>
 800076c:	1b53      	subs	r3, r2, r5
 800076e:	2d00      	cmp	r5, #0
 8000770:	d000      	beq.n	8000774 <__aeabi_fadd+0x54>
 8000772:	e0ee      	b.n	8000952 <__aeabi_fadd+0x232>
 8000774:	2e00      	cmp	r6, #0
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x5a>
 8000778:	e13e      	b.n	80009f8 <__aeabi_fadd+0x2d8>
 800077a:	1e5c      	subs	r4, r3, #1
 800077c:	2b01      	cmp	r3, #1
 800077e:	d100      	bne.n	8000782 <__aeabi_fadd+0x62>
 8000780:	e16b      	b.n	8000a5a <__aeabi_fadd+0x33a>
 8000782:	2bff      	cmp	r3, #255	@ 0xff
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x68>
 8000786:	e0b9      	b.n	80008fc <__aeabi_fadd+0x1dc>
 8000788:	0023      	movs	r3, r4
 800078a:	e0e7      	b.n	800095c <__aeabi_fadd+0x23c>
 800078c:	2b00      	cmp	r3, #0
 800078e:	dc00      	bgt.n	8000792 <__aeabi_fadd+0x72>
 8000790:	e0a4      	b.n	80008dc <__aeabi_fadd+0x1bc>
 8000792:	2a00      	cmp	r2, #0
 8000794:	d069      	beq.n	800086a <__aeabi_fadd+0x14a>
 8000796:	2dff      	cmp	r5, #255	@ 0xff
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x7c>
 800079a:	e0b1      	b.n	8000900 <__aeabi_fadd+0x1e0>
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	04d2      	lsls	r2, r2, #19
 80007a0:	4311      	orrs	r1, r2
 80007a2:	2b1b      	cmp	r3, #27
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_fadd+0x88>
 80007a6:	e0e9      	b.n	800097c <__aeabi_fadd+0x25c>
 80007a8:	002b      	movs	r3, r5
 80007aa:	3605      	adds	r6, #5
 80007ac:	08f7      	lsrs	r7, r6, #3
 80007ae:	2bff      	cmp	r3, #255	@ 0xff
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x94>
 80007b2:	e0a5      	b.n	8000900 <__aeabi_fadd+0x1e0>
 80007b4:	027a      	lsls	r2, r7, #9
 80007b6:	0a52      	lsrs	r2, r2, #9
 80007b8:	b2d8      	uxtb	r0, r3
 80007ba:	e030      	b.n	800081e <__aeabi_fadd+0xfe>
 80007bc:	2dff      	cmp	r5, #255	@ 0xff
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0xa2>
 80007c0:	e09e      	b.n	8000900 <__aeabi_fadd+0x1e0>
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	04d2      	lsls	r2, r2, #19
 80007c6:	4311      	orrs	r1, r2
 80007c8:	2001      	movs	r0, #1
 80007ca:	2b1b      	cmp	r3, #27
 80007cc:	dc08      	bgt.n	80007e0 <__aeabi_fadd+0xc0>
 80007ce:	0008      	movs	r0, r1
 80007d0:	2220      	movs	r2, #32
 80007d2:	40d8      	lsrs	r0, r3
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	4099      	lsls	r1, r3
 80007d8:	000b      	movs	r3, r1
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	4193      	sbcs	r3, r2
 80007de:	4318      	orrs	r0, r3
 80007e0:	1a36      	subs	r6, r6, r0
 80007e2:	0173      	lsls	r3, r6, #5
 80007e4:	d400      	bmi.n	80007e8 <__aeabi_fadd+0xc8>
 80007e6:	e071      	b.n	80008cc <__aeabi_fadd+0x1ac>
 80007e8:	01b6      	lsls	r6, r6, #6
 80007ea:	09b7      	lsrs	r7, r6, #6
 80007ec:	0038      	movs	r0, r7
 80007ee:	f002 ff6b 	bl	80036c8 <__clzsi2>
 80007f2:	003b      	movs	r3, r7
 80007f4:	3805      	subs	r0, #5
 80007f6:	4083      	lsls	r3, r0
 80007f8:	4285      	cmp	r5, r0
 80007fa:	dd4d      	ble.n	8000898 <__aeabi_fadd+0x178>
 80007fc:	4eb4      	ldr	r6, [pc, #720]	@ (8000ad0 <__aeabi_fadd+0x3b0>)
 80007fe:	1a2d      	subs	r5, r5, r0
 8000800:	401e      	ands	r6, r3
 8000802:	075a      	lsls	r2, r3, #29
 8000804:	d068      	beq.n	80008d8 <__aeabi_fadd+0x1b8>
 8000806:	220f      	movs	r2, #15
 8000808:	4013      	ands	r3, r2
 800080a:	2b04      	cmp	r3, #4
 800080c:	d064      	beq.n	80008d8 <__aeabi_fadd+0x1b8>
 800080e:	3604      	adds	r6, #4
 8000810:	0173      	lsls	r3, r6, #5
 8000812:	d561      	bpl.n	80008d8 <__aeabi_fadd+0x1b8>
 8000814:	1c68      	adds	r0, r5, #1
 8000816:	2dfe      	cmp	r5, #254	@ 0xfe
 8000818:	d154      	bne.n	80008c4 <__aeabi_fadd+0x1a4>
 800081a:	20ff      	movs	r0, #255	@ 0xff
 800081c:	2200      	movs	r2, #0
 800081e:	05c0      	lsls	r0, r0, #23
 8000820:	4310      	orrs	r0, r2
 8000822:	07e4      	lsls	r4, r4, #31
 8000824:	4320      	orrs	r0, r4
 8000826:	bcc0      	pop	{r6, r7}
 8000828:	46b9      	mov	r9, r7
 800082a:	46b0      	mov	r8, r6
 800082c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800082e:	22fe      	movs	r2, #254	@ 0xfe
 8000830:	4690      	mov	r8, r2
 8000832:	1c68      	adds	r0, r5, #1
 8000834:	0002      	movs	r2, r0
 8000836:	4640      	mov	r0, r8
 8000838:	4210      	tst	r0, r2
 800083a:	d16b      	bne.n	8000914 <__aeabi_fadd+0x1f4>
 800083c:	2d00      	cmp	r5, #0
 800083e:	d000      	beq.n	8000842 <__aeabi_fadd+0x122>
 8000840:	e0dd      	b.n	80009fe <__aeabi_fadd+0x2de>
 8000842:	2e00      	cmp	r6, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0x128>
 8000846:	e102      	b.n	8000a4e <__aeabi_fadd+0x32e>
 8000848:	2900      	cmp	r1, #0
 800084a:	d0b3      	beq.n	80007b4 <__aeabi_fadd+0x94>
 800084c:	2280      	movs	r2, #128	@ 0x80
 800084e:	1a77      	subs	r7, r6, r1
 8000850:	04d2      	lsls	r2, r2, #19
 8000852:	4217      	tst	r7, r2
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x138>
 8000856:	e136      	b.n	8000ac6 <__aeabi_fadd+0x3a6>
 8000858:	464c      	mov	r4, r9
 800085a:	1b8e      	subs	r6, r1, r6
 800085c:	d061      	beq.n	8000922 <__aeabi_fadd+0x202>
 800085e:	2001      	movs	r0, #1
 8000860:	4216      	tst	r6, r2
 8000862:	d130      	bne.n	80008c6 <__aeabi_fadd+0x1a6>
 8000864:	2300      	movs	r3, #0
 8000866:	08f7      	lsrs	r7, r6, #3
 8000868:	e7a4      	b.n	80007b4 <__aeabi_fadd+0x94>
 800086a:	2900      	cmp	r1, #0
 800086c:	d09e      	beq.n	80007ac <__aeabi_fadd+0x8c>
 800086e:	1e5a      	subs	r2, r3, #1
 8000870:	2b01      	cmp	r3, #1
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x156>
 8000874:	e0ca      	b.n	8000a0c <__aeabi_fadd+0x2ec>
 8000876:	2bff      	cmp	r3, #255	@ 0xff
 8000878:	d042      	beq.n	8000900 <__aeabi_fadd+0x1e0>
 800087a:	0013      	movs	r3, r2
 800087c:	e791      	b.n	80007a2 <__aeabi_fadd+0x82>
 800087e:	1a71      	subs	r1, r6, r1
 8000880:	014b      	lsls	r3, r1, #5
 8000882:	d400      	bmi.n	8000886 <__aeabi_fadd+0x166>
 8000884:	e0d1      	b.n	8000a2a <__aeabi_fadd+0x30a>
 8000886:	018f      	lsls	r7, r1, #6
 8000888:	09bf      	lsrs	r7, r7, #6
 800088a:	0038      	movs	r0, r7
 800088c:	f002 ff1c 	bl	80036c8 <__clzsi2>
 8000890:	003b      	movs	r3, r7
 8000892:	3805      	subs	r0, #5
 8000894:	4083      	lsls	r3, r0
 8000896:	2501      	movs	r5, #1
 8000898:	2220      	movs	r2, #32
 800089a:	1b40      	subs	r0, r0, r5
 800089c:	3001      	adds	r0, #1
 800089e:	1a12      	subs	r2, r2, r0
 80008a0:	001e      	movs	r6, r3
 80008a2:	4093      	lsls	r3, r2
 80008a4:	40c6      	lsrs	r6, r0
 80008a6:	1e5a      	subs	r2, r3, #1
 80008a8:	4193      	sbcs	r3, r2
 80008aa:	431e      	orrs	r6, r3
 80008ac:	d039      	beq.n	8000922 <__aeabi_fadd+0x202>
 80008ae:	0773      	lsls	r3, r6, #29
 80008b0:	d100      	bne.n	80008b4 <__aeabi_fadd+0x194>
 80008b2:	e11b      	b.n	8000aec <__aeabi_fadd+0x3cc>
 80008b4:	230f      	movs	r3, #15
 80008b6:	2500      	movs	r5, #0
 80008b8:	4033      	ands	r3, r6
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d1a7      	bne.n	800080e <__aeabi_fadd+0xee>
 80008be:	2001      	movs	r0, #1
 80008c0:	0172      	lsls	r2, r6, #5
 80008c2:	d57c      	bpl.n	80009be <__aeabi_fadd+0x29e>
 80008c4:	b2c0      	uxtb	r0, r0
 80008c6:	01b2      	lsls	r2, r6, #6
 80008c8:	0a52      	lsrs	r2, r2, #9
 80008ca:	e7a8      	b.n	800081e <__aeabi_fadd+0xfe>
 80008cc:	0773      	lsls	r3, r6, #29
 80008ce:	d003      	beq.n	80008d8 <__aeabi_fadd+0x1b8>
 80008d0:	230f      	movs	r3, #15
 80008d2:	4033      	ands	r3, r6
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d19a      	bne.n	800080e <__aeabi_fadd+0xee>
 80008d8:	002b      	movs	r3, r5
 80008da:	e767      	b.n	80007ac <__aeabi_fadd+0x8c>
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d023      	beq.n	8000928 <__aeabi_fadd+0x208>
 80008e0:	1b53      	subs	r3, r2, r5
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d17b      	bne.n	80009de <__aeabi_fadd+0x2be>
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x1cc>
 80008ea:	e086      	b.n	80009fa <__aeabi_fadd+0x2da>
 80008ec:	1e5d      	subs	r5, r3, #1
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fadd+0x1d4>
 80008f2:	e08b      	b.n	8000a0c <__aeabi_fadd+0x2ec>
 80008f4:	2bff      	cmp	r3, #255	@ 0xff
 80008f6:	d002      	beq.n	80008fe <__aeabi_fadd+0x1de>
 80008f8:	002b      	movs	r3, r5
 80008fa:	e075      	b.n	80009e8 <__aeabi_fadd+0x2c8>
 80008fc:	464c      	mov	r4, r9
 80008fe:	4667      	mov	r7, ip
 8000900:	2f00      	cmp	r7, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x1e6>
 8000904:	e789      	b.n	800081a <__aeabi_fadd+0xfa>
 8000906:	2280      	movs	r2, #128	@ 0x80
 8000908:	03d2      	lsls	r2, r2, #15
 800090a:	433a      	orrs	r2, r7
 800090c:	0252      	lsls	r2, r2, #9
 800090e:	20ff      	movs	r0, #255	@ 0xff
 8000910:	0a52      	lsrs	r2, r2, #9
 8000912:	e784      	b.n	800081e <__aeabi_fadd+0xfe>
 8000914:	1a77      	subs	r7, r6, r1
 8000916:	017b      	lsls	r3, r7, #5
 8000918:	d46b      	bmi.n	80009f2 <__aeabi_fadd+0x2d2>
 800091a:	2f00      	cmp	r7, #0
 800091c:	d000      	beq.n	8000920 <__aeabi_fadd+0x200>
 800091e:	e765      	b.n	80007ec <__aeabi_fadd+0xcc>
 8000920:	2400      	movs	r4, #0
 8000922:	2000      	movs	r0, #0
 8000924:	2200      	movs	r2, #0
 8000926:	e77a      	b.n	800081e <__aeabi_fadd+0xfe>
 8000928:	22fe      	movs	r2, #254	@ 0xfe
 800092a:	1c6b      	adds	r3, r5, #1
 800092c:	421a      	tst	r2, r3
 800092e:	d149      	bne.n	80009c4 <__aeabi_fadd+0x2a4>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d000      	beq.n	8000936 <__aeabi_fadd+0x216>
 8000934:	e09f      	b.n	8000a76 <__aeabi_fadd+0x356>
 8000936:	2e00      	cmp	r6, #0
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x21c>
 800093a:	e0ba      	b.n	8000ab2 <__aeabi_fadd+0x392>
 800093c:	2900      	cmp	r1, #0
 800093e:	d100      	bne.n	8000942 <__aeabi_fadd+0x222>
 8000940:	e0cf      	b.n	8000ae2 <__aeabi_fadd+0x3c2>
 8000942:	1872      	adds	r2, r6, r1
 8000944:	0153      	lsls	r3, r2, #5
 8000946:	d400      	bmi.n	800094a <__aeabi_fadd+0x22a>
 8000948:	e0cd      	b.n	8000ae6 <__aeabi_fadd+0x3c6>
 800094a:	0192      	lsls	r2, r2, #6
 800094c:	2001      	movs	r0, #1
 800094e:	0a52      	lsrs	r2, r2, #9
 8000950:	e765      	b.n	800081e <__aeabi_fadd+0xfe>
 8000952:	2aff      	cmp	r2, #255	@ 0xff
 8000954:	d0d2      	beq.n	80008fc <__aeabi_fadd+0x1dc>
 8000956:	2080      	movs	r0, #128	@ 0x80
 8000958:	04c0      	lsls	r0, r0, #19
 800095a:	4306      	orrs	r6, r0
 800095c:	2001      	movs	r0, #1
 800095e:	2b1b      	cmp	r3, #27
 8000960:	dc08      	bgt.n	8000974 <__aeabi_fadd+0x254>
 8000962:	0030      	movs	r0, r6
 8000964:	2420      	movs	r4, #32
 8000966:	40d8      	lsrs	r0, r3
 8000968:	1ae3      	subs	r3, r4, r3
 800096a:	409e      	lsls	r6, r3
 800096c:	0033      	movs	r3, r6
 800096e:	1e5c      	subs	r4, r3, #1
 8000970:	41a3      	sbcs	r3, r4
 8000972:	4318      	orrs	r0, r3
 8000974:	464c      	mov	r4, r9
 8000976:	0015      	movs	r5, r2
 8000978:	1a0e      	subs	r6, r1, r0
 800097a:	e732      	b.n	80007e2 <__aeabi_fadd+0xc2>
 800097c:	0008      	movs	r0, r1
 800097e:	2220      	movs	r2, #32
 8000980:	40d8      	lsrs	r0, r3
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	4099      	lsls	r1, r3
 8000986:	000b      	movs	r3, r1
 8000988:	1e5a      	subs	r2, r3, #1
 800098a:	4193      	sbcs	r3, r2
 800098c:	4303      	orrs	r3, r0
 800098e:	18f6      	adds	r6, r6, r3
 8000990:	0173      	lsls	r3, r6, #5
 8000992:	d59b      	bpl.n	80008cc <__aeabi_fadd+0x1ac>
 8000994:	3501      	adds	r5, #1
 8000996:	2dff      	cmp	r5, #255	@ 0xff
 8000998:	d100      	bne.n	800099c <__aeabi_fadd+0x27c>
 800099a:	e73e      	b.n	800081a <__aeabi_fadd+0xfa>
 800099c:	2301      	movs	r3, #1
 800099e:	494d      	ldr	r1, [pc, #308]	@ (8000ad4 <__aeabi_fadd+0x3b4>)
 80009a0:	0872      	lsrs	r2, r6, #1
 80009a2:	4033      	ands	r3, r6
 80009a4:	400a      	ands	r2, r1
 80009a6:	431a      	orrs	r2, r3
 80009a8:	0016      	movs	r6, r2
 80009aa:	0753      	lsls	r3, r2, #29
 80009ac:	d004      	beq.n	80009b8 <__aeabi_fadd+0x298>
 80009ae:	230f      	movs	r3, #15
 80009b0:	4013      	ands	r3, r2
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d000      	beq.n	80009b8 <__aeabi_fadd+0x298>
 80009b6:	e72a      	b.n	800080e <__aeabi_fadd+0xee>
 80009b8:	0173      	lsls	r3, r6, #5
 80009ba:	d500      	bpl.n	80009be <__aeabi_fadd+0x29e>
 80009bc:	e72a      	b.n	8000814 <__aeabi_fadd+0xf4>
 80009be:	002b      	movs	r3, r5
 80009c0:	08f7      	lsrs	r7, r6, #3
 80009c2:	e6f7      	b.n	80007b4 <__aeabi_fadd+0x94>
 80009c4:	2bff      	cmp	r3, #255	@ 0xff
 80009c6:	d100      	bne.n	80009ca <__aeabi_fadd+0x2aa>
 80009c8:	e727      	b.n	800081a <__aeabi_fadd+0xfa>
 80009ca:	1871      	adds	r1, r6, r1
 80009cc:	0849      	lsrs	r1, r1, #1
 80009ce:	074a      	lsls	r2, r1, #29
 80009d0:	d02f      	beq.n	8000a32 <__aeabi_fadd+0x312>
 80009d2:	220f      	movs	r2, #15
 80009d4:	400a      	ands	r2, r1
 80009d6:	2a04      	cmp	r2, #4
 80009d8:	d02b      	beq.n	8000a32 <__aeabi_fadd+0x312>
 80009da:	1d0e      	adds	r6, r1, #4
 80009dc:	e6e6      	b.n	80007ac <__aeabi_fadd+0x8c>
 80009de:	2aff      	cmp	r2, #255	@ 0xff
 80009e0:	d08d      	beq.n	80008fe <__aeabi_fadd+0x1de>
 80009e2:	2080      	movs	r0, #128	@ 0x80
 80009e4:	04c0      	lsls	r0, r0, #19
 80009e6:	4306      	orrs	r6, r0
 80009e8:	2b1b      	cmp	r3, #27
 80009ea:	dd24      	ble.n	8000a36 <__aeabi_fadd+0x316>
 80009ec:	0013      	movs	r3, r2
 80009ee:	1d4e      	adds	r6, r1, #5
 80009f0:	e6dc      	b.n	80007ac <__aeabi_fadd+0x8c>
 80009f2:	464c      	mov	r4, r9
 80009f4:	1b8f      	subs	r7, r1, r6
 80009f6:	e6f9      	b.n	80007ec <__aeabi_fadd+0xcc>
 80009f8:	464c      	mov	r4, r9
 80009fa:	000e      	movs	r6, r1
 80009fc:	e6d6      	b.n	80007ac <__aeabi_fadd+0x8c>
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d149      	bne.n	8000a96 <__aeabi_fadd+0x376>
 8000a02:	2900      	cmp	r1, #0
 8000a04:	d068      	beq.n	8000ad8 <__aeabi_fadd+0x3b8>
 8000a06:	4667      	mov	r7, ip
 8000a08:	464c      	mov	r4, r9
 8000a0a:	e77c      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a0c:	1870      	adds	r0, r6, r1
 8000a0e:	0143      	lsls	r3, r0, #5
 8000a10:	d574      	bpl.n	8000afc <__aeabi_fadd+0x3dc>
 8000a12:	4930      	ldr	r1, [pc, #192]	@ (8000ad4 <__aeabi_fadd+0x3b4>)
 8000a14:	0840      	lsrs	r0, r0, #1
 8000a16:	4001      	ands	r1, r0
 8000a18:	0743      	lsls	r3, r0, #29
 8000a1a:	d009      	beq.n	8000a30 <__aeabi_fadd+0x310>
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	4003      	ands	r3, r0
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d005      	beq.n	8000a30 <__aeabi_fadd+0x310>
 8000a24:	2302      	movs	r3, #2
 8000a26:	1d0e      	adds	r6, r1, #4
 8000a28:	e6c0      	b.n	80007ac <__aeabi_fadd+0x8c>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	08cf      	lsrs	r7, r1, #3
 8000a2e:	e6c1      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000a30:	2302      	movs	r3, #2
 8000a32:	08cf      	lsrs	r7, r1, #3
 8000a34:	e6be      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000a36:	2520      	movs	r5, #32
 8000a38:	0030      	movs	r0, r6
 8000a3a:	40d8      	lsrs	r0, r3
 8000a3c:	1aeb      	subs	r3, r5, r3
 8000a3e:	409e      	lsls	r6, r3
 8000a40:	0033      	movs	r3, r6
 8000a42:	1e5d      	subs	r5, r3, #1
 8000a44:	41ab      	sbcs	r3, r5
 8000a46:	4303      	orrs	r3, r0
 8000a48:	0015      	movs	r5, r2
 8000a4a:	185e      	adds	r6, r3, r1
 8000a4c:	e7a0      	b.n	8000990 <__aeabi_fadd+0x270>
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x334>
 8000a52:	e765      	b.n	8000920 <__aeabi_fadd+0x200>
 8000a54:	464c      	mov	r4, r9
 8000a56:	4667      	mov	r7, ip
 8000a58:	e6ac      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000a5a:	1b8f      	subs	r7, r1, r6
 8000a5c:	017b      	lsls	r3, r7, #5
 8000a5e:	d52e      	bpl.n	8000abe <__aeabi_fadd+0x39e>
 8000a60:	01bf      	lsls	r7, r7, #6
 8000a62:	09bf      	lsrs	r7, r7, #6
 8000a64:	0038      	movs	r0, r7
 8000a66:	f002 fe2f 	bl	80036c8 <__clzsi2>
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	3805      	subs	r0, #5
 8000a6e:	4083      	lsls	r3, r0
 8000a70:	464c      	mov	r4, r9
 8000a72:	3501      	adds	r5, #1
 8000a74:	e710      	b.n	8000898 <__aeabi_fadd+0x178>
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fadd+0x35c>
 8000a7a:	e740      	b.n	80008fe <__aeabi_fadd+0x1de>
 8000a7c:	2900      	cmp	r1, #0
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fadd+0x362>
 8000a80:	e741      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a82:	2380      	movs	r3, #128	@ 0x80
 8000a84:	03db      	lsls	r3, r3, #15
 8000a86:	429f      	cmp	r7, r3
 8000a88:	d200      	bcs.n	8000a8c <__aeabi_fadd+0x36c>
 8000a8a:	e73c      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a8c:	459c      	cmp	ip, r3
 8000a8e:	d300      	bcc.n	8000a92 <__aeabi_fadd+0x372>
 8000a90:	e739      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a92:	4667      	mov	r7, ip
 8000a94:	e737      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a96:	2900      	cmp	r1, #0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fadd+0x37c>
 8000a9a:	e734      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a9c:	2380      	movs	r3, #128	@ 0x80
 8000a9e:	03db      	lsls	r3, r3, #15
 8000aa0:	429f      	cmp	r7, r3
 8000aa2:	d200      	bcs.n	8000aa6 <__aeabi_fadd+0x386>
 8000aa4:	e72f      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000aa6:	459c      	cmp	ip, r3
 8000aa8:	d300      	bcc.n	8000aac <__aeabi_fadd+0x38c>
 8000aaa:	e72c      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000aac:	464c      	mov	r4, r9
 8000aae:	4667      	mov	r7, ip
 8000ab0:	e729      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_fadd+0x398>
 8000ab6:	e734      	b.n	8000922 <__aeabi_fadd+0x202>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	08cf      	lsrs	r7, r1, #3
 8000abc:	e67a      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000abe:	464c      	mov	r4, r9
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	08ff      	lsrs	r7, r7, #3
 8000ac4:	e676      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000ac6:	2f00      	cmp	r7, #0
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fadd+0x3ac>
 8000aca:	e729      	b.n	8000920 <__aeabi_fadd+0x200>
 8000acc:	08ff      	lsrs	r7, r7, #3
 8000ace:	e671      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000ad0:	fbffffff 	.word	0xfbffffff
 8000ad4:	7dffffff 	.word	0x7dffffff
 8000ad8:	2280      	movs	r2, #128	@ 0x80
 8000ada:	2400      	movs	r4, #0
 8000adc:	20ff      	movs	r0, #255	@ 0xff
 8000ade:	03d2      	lsls	r2, r2, #15
 8000ae0:	e69d      	b.n	800081e <__aeabi_fadd+0xfe>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e666      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	08d7      	lsrs	r7, r2, #3
 8000aea:	e663      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000aec:	2001      	movs	r0, #1
 8000aee:	0172      	lsls	r2, r6, #5
 8000af0:	d500      	bpl.n	8000af4 <__aeabi_fadd+0x3d4>
 8000af2:	e6e7      	b.n	80008c4 <__aeabi_fadd+0x1a4>
 8000af4:	0031      	movs	r1, r6
 8000af6:	2300      	movs	r3, #0
 8000af8:	08cf      	lsrs	r7, r1, #3
 8000afa:	e65b      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000afc:	2301      	movs	r3, #1
 8000afe:	08c7      	lsrs	r7, r0, #3
 8000b00:	e658      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000b02:	46c0      	nop			@ (mov r8, r8)

08000b04 <__aeabi_fdiv>:
 8000b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b06:	4646      	mov	r6, r8
 8000b08:	464f      	mov	r7, r9
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	0245      	lsls	r5, r0, #9
 8000b0e:	b5c0      	push	{r6, r7, lr}
 8000b10:	0fc3      	lsrs	r3, r0, #31
 8000b12:	0047      	lsls	r7, r0, #1
 8000b14:	4698      	mov	r8, r3
 8000b16:	1c0e      	adds	r6, r1, #0
 8000b18:	0a6d      	lsrs	r5, r5, #9
 8000b1a:	0e3f      	lsrs	r7, r7, #24
 8000b1c:	d05b      	beq.n	8000bd6 <__aeabi_fdiv+0xd2>
 8000b1e:	2fff      	cmp	r7, #255	@ 0xff
 8000b20:	d021      	beq.n	8000b66 <__aeabi_fdiv+0x62>
 8000b22:	2380      	movs	r3, #128	@ 0x80
 8000b24:	00ed      	lsls	r5, r5, #3
 8000b26:	04db      	lsls	r3, r3, #19
 8000b28:	431d      	orrs	r5, r3
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	469a      	mov	sl, r3
 8000b30:	3f7f      	subs	r7, #127	@ 0x7f
 8000b32:	0274      	lsls	r4, r6, #9
 8000b34:	0073      	lsls	r3, r6, #1
 8000b36:	0a64      	lsrs	r4, r4, #9
 8000b38:	0e1b      	lsrs	r3, r3, #24
 8000b3a:	0ff6      	lsrs	r6, r6, #31
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d020      	beq.n	8000b82 <__aeabi_fdiv+0x7e>
 8000b40:	2bff      	cmp	r3, #255	@ 0xff
 8000b42:	d043      	beq.n	8000bcc <__aeabi_fdiv+0xc8>
 8000b44:	2280      	movs	r2, #128	@ 0x80
 8000b46:	2000      	movs	r0, #0
 8000b48:	00e4      	lsls	r4, r4, #3
 8000b4a:	04d2      	lsls	r2, r2, #19
 8000b4c:	4314      	orrs	r4, r2
 8000b4e:	3b7f      	subs	r3, #127	@ 0x7f
 8000b50:	4642      	mov	r2, r8
 8000b52:	1aff      	subs	r7, r7, r3
 8000b54:	464b      	mov	r3, r9
 8000b56:	4072      	eors	r2, r6
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d900      	bls.n	8000b5e <__aeabi_fdiv+0x5a>
 8000b5c:	e09d      	b.n	8000c9a <__aeabi_fdiv+0x196>
 8000b5e:	4971      	ldr	r1, [pc, #452]	@ (8000d24 <__aeabi_fdiv+0x220>)
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	58cb      	ldr	r3, [r1, r3]
 8000b64:	469f      	mov	pc, r3
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d15a      	bne.n	8000c20 <__aeabi_fdiv+0x11c>
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	4699      	mov	r9, r3
 8000b6e:	3b06      	subs	r3, #6
 8000b70:	0274      	lsls	r4, r6, #9
 8000b72:	469a      	mov	sl, r3
 8000b74:	0073      	lsls	r3, r6, #1
 8000b76:	27ff      	movs	r7, #255	@ 0xff
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	0e1b      	lsrs	r3, r3, #24
 8000b7c:	0ff6      	lsrs	r6, r6, #31
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1de      	bne.n	8000b40 <__aeabi_fdiv+0x3c>
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d13b      	bne.n	8000bfe <__aeabi_fdiv+0xfa>
 8000b86:	2301      	movs	r3, #1
 8000b88:	4642      	mov	r2, r8
 8000b8a:	4649      	mov	r1, r9
 8000b8c:	4072      	eors	r2, r6
 8000b8e:	4319      	orrs	r1, r3
 8000b90:	290e      	cmp	r1, #14
 8000b92:	d818      	bhi.n	8000bc6 <__aeabi_fdiv+0xc2>
 8000b94:	4864      	ldr	r0, [pc, #400]	@ (8000d28 <__aeabi_fdiv+0x224>)
 8000b96:	0089      	lsls	r1, r1, #2
 8000b98:	5841      	ldr	r1, [r0, r1]
 8000b9a:	468f      	mov	pc, r1
 8000b9c:	4653      	mov	r3, sl
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_fdiv+0xa0>
 8000ba2:	e0b8      	b.n	8000d16 <__aeabi_fdiv+0x212>
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d06e      	beq.n	8000c86 <__aeabi_fdiv+0x182>
 8000ba8:	4642      	mov	r2, r8
 8000baa:	002c      	movs	r4, r5
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d140      	bne.n	8000c32 <__aeabi_fdiv+0x12e>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	2400      	movs	r4, #0
 8000bb4:	05c0      	lsls	r0, r0, #23
 8000bb6:	4320      	orrs	r0, r4
 8000bb8:	07d2      	lsls	r2, r2, #31
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	bce0      	pop	{r5, r6, r7}
 8000bbe:	46ba      	mov	sl, r7
 8000bc0:	46b1      	mov	r9, r6
 8000bc2:	46a8      	mov	r8, r5
 8000bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc6:	20ff      	movs	r0, #255	@ 0xff
 8000bc8:	2400      	movs	r4, #0
 8000bca:	e7f3      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000bcc:	2c00      	cmp	r4, #0
 8000bce:	d120      	bne.n	8000c12 <__aeabi_fdiv+0x10e>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	3fff      	subs	r7, #255	@ 0xff
 8000bd4:	e7d8      	b.n	8000b88 <__aeabi_fdiv+0x84>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d105      	bne.n	8000be6 <__aeabi_fdiv+0xe2>
 8000bda:	2304      	movs	r3, #4
 8000bdc:	4699      	mov	r9, r3
 8000bde:	3b03      	subs	r3, #3
 8000be0:	2700      	movs	r7, #0
 8000be2:	469a      	mov	sl, r3
 8000be4:	e7a5      	b.n	8000b32 <__aeabi_fdiv+0x2e>
 8000be6:	0028      	movs	r0, r5
 8000be8:	f002 fd6e 	bl	80036c8 <__clzsi2>
 8000bec:	2776      	movs	r7, #118	@ 0x76
 8000bee:	1f43      	subs	r3, r0, #5
 8000bf0:	409d      	lsls	r5, r3
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	427f      	negs	r7, r7
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	1a3f      	subs	r7, r7, r0
 8000bfc:	e799      	b.n	8000b32 <__aeabi_fdiv+0x2e>
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f002 fd62 	bl	80036c8 <__clzsi2>
 8000c04:	1f43      	subs	r3, r0, #5
 8000c06:	409c      	lsls	r4, r3
 8000c08:	2376      	movs	r3, #118	@ 0x76
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	1a1b      	subs	r3, r3, r0
 8000c0e:	2000      	movs	r0, #0
 8000c10:	e79e      	b.n	8000b50 <__aeabi_fdiv+0x4c>
 8000c12:	2303      	movs	r3, #3
 8000c14:	464a      	mov	r2, r9
 8000c16:	431a      	orrs	r2, r3
 8000c18:	4691      	mov	r9, r2
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	33fc      	adds	r3, #252	@ 0xfc
 8000c1e:	e797      	b.n	8000b50 <__aeabi_fdiv+0x4c>
 8000c20:	230c      	movs	r3, #12
 8000c22:	4699      	mov	r9, r3
 8000c24:	3b09      	subs	r3, #9
 8000c26:	27ff      	movs	r7, #255	@ 0xff
 8000c28:	469a      	mov	sl, r3
 8000c2a:	e782      	b.n	8000b32 <__aeabi_fdiv+0x2e>
 8000c2c:	2803      	cmp	r0, #3
 8000c2e:	d02c      	beq.n	8000c8a <__aeabi_fdiv+0x186>
 8000c30:	0032      	movs	r2, r6
 8000c32:	0038      	movs	r0, r7
 8000c34:	307f      	adds	r0, #127	@ 0x7f
 8000c36:	2800      	cmp	r0, #0
 8000c38:	dd47      	ble.n	8000cca <__aeabi_fdiv+0x1c6>
 8000c3a:	0763      	lsls	r3, r4, #29
 8000c3c:	d004      	beq.n	8000c48 <__aeabi_fdiv+0x144>
 8000c3e:	230f      	movs	r3, #15
 8000c40:	4023      	ands	r3, r4
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d000      	beq.n	8000c48 <__aeabi_fdiv+0x144>
 8000c46:	3404      	adds	r4, #4
 8000c48:	0123      	lsls	r3, r4, #4
 8000c4a:	d503      	bpl.n	8000c54 <__aeabi_fdiv+0x150>
 8000c4c:	0038      	movs	r0, r7
 8000c4e:	4b37      	ldr	r3, [pc, #220]	@ (8000d2c <__aeabi_fdiv+0x228>)
 8000c50:	3080      	adds	r0, #128	@ 0x80
 8000c52:	401c      	ands	r4, r3
 8000c54:	28fe      	cmp	r0, #254	@ 0xfe
 8000c56:	dcb6      	bgt.n	8000bc6 <__aeabi_fdiv+0xc2>
 8000c58:	01a4      	lsls	r4, r4, #6
 8000c5a:	0a64      	lsrs	r4, r4, #9
 8000c5c:	b2c0      	uxtb	r0, r0
 8000c5e:	e7a9      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000c60:	2480      	movs	r4, #128	@ 0x80
 8000c62:	2200      	movs	r2, #0
 8000c64:	20ff      	movs	r0, #255	@ 0xff
 8000c66:	03e4      	lsls	r4, r4, #15
 8000c68:	e7a4      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000c6a:	2380      	movs	r3, #128	@ 0x80
 8000c6c:	03db      	lsls	r3, r3, #15
 8000c6e:	421d      	tst	r5, r3
 8000c70:	d001      	beq.n	8000c76 <__aeabi_fdiv+0x172>
 8000c72:	421c      	tst	r4, r3
 8000c74:	d00b      	beq.n	8000c8e <__aeabi_fdiv+0x18a>
 8000c76:	2480      	movs	r4, #128	@ 0x80
 8000c78:	03e4      	lsls	r4, r4, #15
 8000c7a:	432c      	orrs	r4, r5
 8000c7c:	0264      	lsls	r4, r4, #9
 8000c7e:	4642      	mov	r2, r8
 8000c80:	20ff      	movs	r0, #255	@ 0xff
 8000c82:	0a64      	lsrs	r4, r4, #9
 8000c84:	e796      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000c86:	4646      	mov	r6, r8
 8000c88:	002c      	movs	r4, r5
 8000c8a:	2380      	movs	r3, #128	@ 0x80
 8000c8c:	03db      	lsls	r3, r3, #15
 8000c8e:	431c      	orrs	r4, r3
 8000c90:	0264      	lsls	r4, r4, #9
 8000c92:	0032      	movs	r2, r6
 8000c94:	20ff      	movs	r0, #255	@ 0xff
 8000c96:	0a64      	lsrs	r4, r4, #9
 8000c98:	e78c      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000c9a:	016d      	lsls	r5, r5, #5
 8000c9c:	0160      	lsls	r0, r4, #5
 8000c9e:	4285      	cmp	r5, r0
 8000ca0:	d22d      	bcs.n	8000cfe <__aeabi_fdiv+0x1fa>
 8000ca2:	231b      	movs	r3, #27
 8000ca4:	2400      	movs	r4, #0
 8000ca6:	3f01      	subs	r7, #1
 8000ca8:	2601      	movs	r6, #1
 8000caa:	0029      	movs	r1, r5
 8000cac:	0064      	lsls	r4, r4, #1
 8000cae:	006d      	lsls	r5, r5, #1
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	db01      	blt.n	8000cb8 <__aeabi_fdiv+0x1b4>
 8000cb4:	4285      	cmp	r5, r0
 8000cb6:	d301      	bcc.n	8000cbc <__aeabi_fdiv+0x1b8>
 8000cb8:	1a2d      	subs	r5, r5, r0
 8000cba:	4334      	orrs	r4, r6
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f3      	bne.n	8000caa <__aeabi_fdiv+0x1a6>
 8000cc2:	1e6b      	subs	r3, r5, #1
 8000cc4:	419d      	sbcs	r5, r3
 8000cc6:	432c      	orrs	r4, r5
 8000cc8:	e7b3      	b.n	8000c32 <__aeabi_fdiv+0x12e>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	1a1b      	subs	r3, r3, r0
 8000cce:	2b1b      	cmp	r3, #27
 8000cd0:	dd00      	ble.n	8000cd4 <__aeabi_fdiv+0x1d0>
 8000cd2:	e76d      	b.n	8000bb0 <__aeabi_fdiv+0xac>
 8000cd4:	0021      	movs	r1, r4
 8000cd6:	379e      	adds	r7, #158	@ 0x9e
 8000cd8:	40d9      	lsrs	r1, r3
 8000cda:	40bc      	lsls	r4, r7
 8000cdc:	000b      	movs	r3, r1
 8000cde:	1e61      	subs	r1, r4, #1
 8000ce0:	418c      	sbcs	r4, r1
 8000ce2:	4323      	orrs	r3, r4
 8000ce4:	0759      	lsls	r1, r3, #29
 8000ce6:	d004      	beq.n	8000cf2 <__aeabi_fdiv+0x1ee>
 8000ce8:	210f      	movs	r1, #15
 8000cea:	4019      	ands	r1, r3
 8000cec:	2904      	cmp	r1, #4
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_fdiv+0x1ee>
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	0159      	lsls	r1, r3, #5
 8000cf4:	d413      	bmi.n	8000d1e <__aeabi_fdiv+0x21a>
 8000cf6:	019b      	lsls	r3, r3, #6
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	0a5c      	lsrs	r4, r3, #9
 8000cfc:	e75a      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000cfe:	231a      	movs	r3, #26
 8000d00:	2401      	movs	r4, #1
 8000d02:	1a2d      	subs	r5, r5, r0
 8000d04:	e7d0      	b.n	8000ca8 <__aeabi_fdiv+0x1a4>
 8000d06:	1e98      	subs	r0, r3, #2
 8000d08:	4243      	negs	r3, r0
 8000d0a:	4158      	adcs	r0, r3
 8000d0c:	4240      	negs	r0, r0
 8000d0e:	0032      	movs	r2, r6
 8000d10:	2400      	movs	r4, #0
 8000d12:	b2c0      	uxtb	r0, r0
 8000d14:	e74e      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000d16:	4642      	mov	r2, r8
 8000d18:	20ff      	movs	r0, #255	@ 0xff
 8000d1a:	2400      	movs	r4, #0
 8000d1c:	e74a      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000d1e:	2001      	movs	r0, #1
 8000d20:	2400      	movs	r4, #0
 8000d22:	e747      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000d24:	0800b6d4 	.word	0x0800b6d4
 8000d28:	0800b714 	.word	0x0800b714
 8000d2c:	f7ffffff 	.word	0xf7ffffff

08000d30 <__eqsf2>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	0042      	lsls	r2, r0, #1
 8000d34:	024e      	lsls	r6, r1, #9
 8000d36:	004c      	lsls	r4, r1, #1
 8000d38:	0245      	lsls	r5, r0, #9
 8000d3a:	0a6d      	lsrs	r5, r5, #9
 8000d3c:	0e12      	lsrs	r2, r2, #24
 8000d3e:	0fc3      	lsrs	r3, r0, #31
 8000d40:	0a76      	lsrs	r6, r6, #9
 8000d42:	0e24      	lsrs	r4, r4, #24
 8000d44:	0fc9      	lsrs	r1, r1, #31
 8000d46:	2aff      	cmp	r2, #255	@ 0xff
 8000d48:	d010      	beq.n	8000d6c <__eqsf2+0x3c>
 8000d4a:	2cff      	cmp	r4, #255	@ 0xff
 8000d4c:	d00c      	beq.n	8000d68 <__eqsf2+0x38>
 8000d4e:	2001      	movs	r0, #1
 8000d50:	42a2      	cmp	r2, r4
 8000d52:	d10a      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d54:	42b5      	cmp	r5, r6
 8000d56:	d108      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d00f      	beq.n	8000d7c <__eqsf2+0x4c>
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	d104      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d60:	0028      	movs	r0, r5
 8000d62:	1e43      	subs	r3, r0, #1
 8000d64:	4198      	sbcs	r0, r3
 8000d66:	e000      	b.n	8000d6a <__eqsf2+0x3a>
 8000d68:	2001      	movs	r0, #1
 8000d6a:	bd70      	pop	{r4, r5, r6, pc}
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	2cff      	cmp	r4, #255	@ 0xff
 8000d70:	d1fb      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d72:	4335      	orrs	r5, r6
 8000d74:	d1f9      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d76:	404b      	eors	r3, r1
 8000d78:	0018      	movs	r0, r3
 8000d7a:	e7f6      	b.n	8000d6a <__eqsf2+0x3a>
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	e7f4      	b.n	8000d6a <__eqsf2+0x3a>

08000d80 <__gesf2>:
 8000d80:	b530      	push	{r4, r5, lr}
 8000d82:	0042      	lsls	r2, r0, #1
 8000d84:	0244      	lsls	r4, r0, #9
 8000d86:	024d      	lsls	r5, r1, #9
 8000d88:	0fc3      	lsrs	r3, r0, #31
 8000d8a:	0048      	lsls	r0, r1, #1
 8000d8c:	0a64      	lsrs	r4, r4, #9
 8000d8e:	0e12      	lsrs	r2, r2, #24
 8000d90:	0a6d      	lsrs	r5, r5, #9
 8000d92:	0e00      	lsrs	r0, r0, #24
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2aff      	cmp	r2, #255	@ 0xff
 8000d98:	d018      	beq.n	8000dcc <__gesf2+0x4c>
 8000d9a:	28ff      	cmp	r0, #255	@ 0xff
 8000d9c:	d00a      	beq.n	8000db4 <__gesf2+0x34>
 8000d9e:	2a00      	cmp	r2, #0
 8000da0:	d11e      	bne.n	8000de0 <__gesf2+0x60>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d10a      	bne.n	8000dbc <__gesf2+0x3c>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d029      	beq.n	8000dfe <__gesf2+0x7e>
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d12d      	bne.n	8000e0a <__gesf2+0x8a>
 8000dae:	0048      	lsls	r0, r1, #1
 8000db0:	3801      	subs	r0, #1
 8000db2:	bd30      	pop	{r4, r5, pc}
 8000db4:	2d00      	cmp	r5, #0
 8000db6:	d125      	bne.n	8000e04 <__gesf2+0x84>
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	d101      	bne.n	8000dc0 <__gesf2+0x40>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d0f6      	beq.n	8000dae <__gesf2+0x2e>
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d019      	beq.n	8000df8 <__gesf2+0x78>
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	4318      	orrs	r0, r3
 8000dca:	e7f2      	b.n	8000db2 <__gesf2+0x32>
 8000dcc:	2c00      	cmp	r4, #0
 8000dce:	d119      	bne.n	8000e04 <__gesf2+0x84>
 8000dd0:	28ff      	cmp	r0, #255	@ 0xff
 8000dd2:	d1f7      	bne.n	8000dc4 <__gesf2+0x44>
 8000dd4:	2d00      	cmp	r5, #0
 8000dd6:	d115      	bne.n	8000e04 <__gesf2+0x84>
 8000dd8:	2000      	movs	r0, #0
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d1f2      	bne.n	8000dc4 <__gesf2+0x44>
 8000dde:	e7e8      	b.n	8000db2 <__gesf2+0x32>
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d0ef      	beq.n	8000dc4 <__gesf2+0x44>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1ed      	bne.n	8000dc4 <__gesf2+0x44>
 8000de8:	4282      	cmp	r2, r0
 8000dea:	dceb      	bgt.n	8000dc4 <__gesf2+0x44>
 8000dec:	db04      	blt.n	8000df8 <__gesf2+0x78>
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	d8e8      	bhi.n	8000dc4 <__gesf2+0x44>
 8000df2:	2000      	movs	r0, #0
 8000df4:	42ac      	cmp	r4, r5
 8000df6:	d2dc      	bcs.n	8000db2 <__gesf2+0x32>
 8000df8:	0058      	lsls	r0, r3, #1
 8000dfa:	3801      	subs	r0, #1
 8000dfc:	e7d9      	b.n	8000db2 <__gesf2+0x32>
 8000dfe:	2c00      	cmp	r4, #0
 8000e00:	d0d7      	beq.n	8000db2 <__gesf2+0x32>
 8000e02:	e7df      	b.n	8000dc4 <__gesf2+0x44>
 8000e04:	2002      	movs	r0, #2
 8000e06:	4240      	negs	r0, r0
 8000e08:	e7d3      	b.n	8000db2 <__gesf2+0x32>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d1da      	bne.n	8000dc4 <__gesf2+0x44>
 8000e0e:	e7ee      	b.n	8000dee <__gesf2+0x6e>

08000e10 <__lesf2>:
 8000e10:	b530      	push	{r4, r5, lr}
 8000e12:	0042      	lsls	r2, r0, #1
 8000e14:	0244      	lsls	r4, r0, #9
 8000e16:	024d      	lsls	r5, r1, #9
 8000e18:	0fc3      	lsrs	r3, r0, #31
 8000e1a:	0048      	lsls	r0, r1, #1
 8000e1c:	0a64      	lsrs	r4, r4, #9
 8000e1e:	0e12      	lsrs	r2, r2, #24
 8000e20:	0a6d      	lsrs	r5, r5, #9
 8000e22:	0e00      	lsrs	r0, r0, #24
 8000e24:	0fc9      	lsrs	r1, r1, #31
 8000e26:	2aff      	cmp	r2, #255	@ 0xff
 8000e28:	d017      	beq.n	8000e5a <__lesf2+0x4a>
 8000e2a:	28ff      	cmp	r0, #255	@ 0xff
 8000e2c:	d00a      	beq.n	8000e44 <__lesf2+0x34>
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	d11b      	bne.n	8000e6a <__lesf2+0x5a>
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d10a      	bne.n	8000e4c <__lesf2+0x3c>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d01d      	beq.n	8000e76 <__lesf2+0x66>
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	d12d      	bne.n	8000e9a <__lesf2+0x8a>
 8000e3e:	0048      	lsls	r0, r1, #1
 8000e40:	3801      	subs	r0, #1
 8000e42:	e011      	b.n	8000e68 <__lesf2+0x58>
 8000e44:	2d00      	cmp	r5, #0
 8000e46:	d10e      	bne.n	8000e66 <__lesf2+0x56>
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d101      	bne.n	8000e50 <__lesf2+0x40>
 8000e4c:	2c00      	cmp	r4, #0
 8000e4e:	d0f6      	beq.n	8000e3e <__lesf2+0x2e>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d10c      	bne.n	8000e6e <__lesf2+0x5e>
 8000e54:	0058      	lsls	r0, r3, #1
 8000e56:	3801      	subs	r0, #1
 8000e58:	e006      	b.n	8000e68 <__lesf2+0x58>
 8000e5a:	2c00      	cmp	r4, #0
 8000e5c:	d103      	bne.n	8000e66 <__lesf2+0x56>
 8000e5e:	28ff      	cmp	r0, #255	@ 0xff
 8000e60:	d105      	bne.n	8000e6e <__lesf2+0x5e>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d015      	beq.n	8000e92 <__lesf2+0x82>
 8000e66:	2002      	movs	r0, #2
 8000e68:	bd30      	pop	{r4, r5, pc}
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d106      	bne.n	8000e7c <__lesf2+0x6c>
 8000e6e:	2001      	movs	r0, #1
 8000e70:	425b      	negs	r3, r3
 8000e72:	4318      	orrs	r0, r3
 8000e74:	e7f8      	b.n	8000e68 <__lesf2+0x58>
 8000e76:	2c00      	cmp	r4, #0
 8000e78:	d0f6      	beq.n	8000e68 <__lesf2+0x58>
 8000e7a:	e7f8      	b.n	8000e6e <__lesf2+0x5e>
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d1f6      	bne.n	8000e6e <__lesf2+0x5e>
 8000e80:	4282      	cmp	r2, r0
 8000e82:	dcf4      	bgt.n	8000e6e <__lesf2+0x5e>
 8000e84:	dbe6      	blt.n	8000e54 <__lesf2+0x44>
 8000e86:	42ac      	cmp	r4, r5
 8000e88:	d8f1      	bhi.n	8000e6e <__lesf2+0x5e>
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	42ac      	cmp	r4, r5
 8000e8e:	d2eb      	bcs.n	8000e68 <__lesf2+0x58>
 8000e90:	e7e0      	b.n	8000e54 <__lesf2+0x44>
 8000e92:	2000      	movs	r0, #0
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d1ea      	bne.n	8000e6e <__lesf2+0x5e>
 8000e98:	e7e6      	b.n	8000e68 <__lesf2+0x58>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d1e7      	bne.n	8000e6e <__lesf2+0x5e>
 8000e9e:	e7f2      	b.n	8000e86 <__lesf2+0x76>

08000ea0 <__aeabi_fmul>:
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	464f      	mov	r7, r9
 8000ea4:	4646      	mov	r6, r8
 8000ea6:	46d6      	mov	lr, sl
 8000ea8:	0044      	lsls	r4, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	0246      	lsls	r6, r0, #9
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0a76      	lsrs	r6, r6, #9
 8000eb2:	0e24      	lsrs	r4, r4, #24
 8000eb4:	0fc5      	lsrs	r5, r0, #31
 8000eb6:	2c00      	cmp	r4, #0
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_fmul+0x1c>
 8000eba:	e0da      	b.n	8001072 <__aeabi_fmul+0x1d2>
 8000ebc:	2cff      	cmp	r4, #255	@ 0xff
 8000ebe:	d074      	beq.n	8000faa <__aeabi_fmul+0x10a>
 8000ec0:	2380      	movs	r3, #128	@ 0x80
 8000ec2:	00f6      	lsls	r6, r6, #3
 8000ec4:	04db      	lsls	r3, r3, #19
 8000ec6:	431e      	orrs	r6, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4699      	mov	r9, r3
 8000ecc:	469a      	mov	sl, r3
 8000ece:	3c7f      	subs	r4, #127	@ 0x7f
 8000ed0:	027b      	lsls	r3, r7, #9
 8000ed2:	0a5b      	lsrs	r3, r3, #9
 8000ed4:	4698      	mov	r8, r3
 8000ed6:	007b      	lsls	r3, r7, #1
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d074      	beq.n	8000fca <__aeabi_fmul+0x12a>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fmul+0x46>
 8000ee4:	e08e      	b.n	8001004 <__aeabi_fmul+0x164>
 8000ee6:	4642      	mov	r2, r8
 8000ee8:	2180      	movs	r1, #128	@ 0x80
 8000eea:	00d2      	lsls	r2, r2, #3
 8000eec:	04c9      	lsls	r1, r1, #19
 8000eee:	4311      	orrs	r1, r2
 8000ef0:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef2:	002a      	movs	r2, r5
 8000ef4:	18e4      	adds	r4, r4, r3
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	407a      	eors	r2, r7
 8000efa:	4688      	mov	r8, r1
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	2b0a      	cmp	r3, #10
 8000f00:	dc75      	bgt.n	8000fee <__aeabi_fmul+0x14e>
 8000f02:	464b      	mov	r3, r9
 8000f04:	2000      	movs	r0, #0
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	dd0f      	ble.n	8000f2a <__aeabi_fmul+0x8a>
 8000f0a:	4649      	mov	r1, r9
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	408b      	lsls	r3, r1
 8000f10:	21a6      	movs	r1, #166	@ 0xa6
 8000f12:	00c9      	lsls	r1, r1, #3
 8000f14:	420b      	tst	r3, r1
 8000f16:	d169      	bne.n	8000fec <__aeabi_fmul+0x14c>
 8000f18:	2190      	movs	r1, #144	@ 0x90
 8000f1a:	0089      	lsls	r1, r1, #2
 8000f1c:	420b      	tst	r3, r1
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fmul+0x82>
 8000f20:	e100      	b.n	8001124 <__aeabi_fmul+0x284>
 8000f22:	2188      	movs	r1, #136	@ 0x88
 8000f24:	4219      	tst	r1, r3
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fmul+0x8a>
 8000f28:	e0f5      	b.n	8001116 <__aeabi_fmul+0x276>
 8000f2a:	4641      	mov	r1, r8
 8000f2c:	0409      	lsls	r1, r1, #16
 8000f2e:	0c09      	lsrs	r1, r1, #16
 8000f30:	4643      	mov	r3, r8
 8000f32:	0008      	movs	r0, r1
 8000f34:	0c35      	lsrs	r5, r6, #16
 8000f36:	0436      	lsls	r6, r6, #16
 8000f38:	0c1b      	lsrs	r3, r3, #16
 8000f3a:	0c36      	lsrs	r6, r6, #16
 8000f3c:	4370      	muls	r0, r6
 8000f3e:	4369      	muls	r1, r5
 8000f40:	435e      	muls	r6, r3
 8000f42:	435d      	muls	r5, r3
 8000f44:	1876      	adds	r6, r6, r1
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	199b      	adds	r3, r3, r6
 8000f4a:	4299      	cmp	r1, r3
 8000f4c:	d903      	bls.n	8000f56 <__aeabi_fmul+0xb6>
 8000f4e:	2180      	movs	r1, #128	@ 0x80
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	468c      	mov	ip, r1
 8000f54:	4465      	add	r5, ip
 8000f56:	0400      	lsls	r0, r0, #16
 8000f58:	0419      	lsls	r1, r3, #16
 8000f5a:	0c00      	lsrs	r0, r0, #16
 8000f5c:	1809      	adds	r1, r1, r0
 8000f5e:	018e      	lsls	r6, r1, #6
 8000f60:	1e70      	subs	r0, r6, #1
 8000f62:	4186      	sbcs	r6, r0
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	0e89      	lsrs	r1, r1, #26
 8000f68:	195b      	adds	r3, r3, r5
 8000f6a:	430e      	orrs	r6, r1
 8000f6c:	019b      	lsls	r3, r3, #6
 8000f6e:	431e      	orrs	r6, r3
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	d46c      	bmi.n	800104e <__aeabi_fmul+0x1ae>
 8000f74:	0023      	movs	r3, r4
 8000f76:	337f      	adds	r3, #127	@ 0x7f
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	dc00      	bgt.n	8000f7e <__aeabi_fmul+0xde>
 8000f7c:	e0b1      	b.n	80010e2 <__aeabi_fmul+0x242>
 8000f7e:	0015      	movs	r5, r2
 8000f80:	0771      	lsls	r1, r6, #29
 8000f82:	d00b      	beq.n	8000f9c <__aeabi_fmul+0xfc>
 8000f84:	200f      	movs	r0, #15
 8000f86:	0021      	movs	r1, r4
 8000f88:	4030      	ands	r0, r6
 8000f8a:	2804      	cmp	r0, #4
 8000f8c:	d006      	beq.n	8000f9c <__aeabi_fmul+0xfc>
 8000f8e:	3604      	adds	r6, #4
 8000f90:	0132      	lsls	r2, r6, #4
 8000f92:	d503      	bpl.n	8000f9c <__aeabi_fmul+0xfc>
 8000f94:	4b6e      	ldr	r3, [pc, #440]	@ (8001150 <__aeabi_fmul+0x2b0>)
 8000f96:	401e      	ands	r6, r3
 8000f98:	000b      	movs	r3, r1
 8000f9a:	3380      	adds	r3, #128	@ 0x80
 8000f9c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f9e:	dd00      	ble.n	8000fa2 <__aeabi_fmul+0x102>
 8000fa0:	e0bd      	b.n	800111e <__aeabi_fmul+0x27e>
 8000fa2:	01b2      	lsls	r2, r6, #6
 8000fa4:	0a52      	lsrs	r2, r2, #9
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	e048      	b.n	800103c <__aeabi_fmul+0x19c>
 8000faa:	2e00      	cmp	r6, #0
 8000fac:	d000      	beq.n	8000fb0 <__aeabi_fmul+0x110>
 8000fae:	e092      	b.n	80010d6 <__aeabi_fmul+0x236>
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	4699      	mov	r9, r3
 8000fb4:	3b06      	subs	r3, #6
 8000fb6:	469a      	mov	sl, r3
 8000fb8:	027b      	lsls	r3, r7, #9
 8000fba:	0a5b      	lsrs	r3, r3, #9
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	007b      	lsls	r3, r7, #1
 8000fc0:	24ff      	movs	r4, #255	@ 0xff
 8000fc2:	0e1b      	lsrs	r3, r3, #24
 8000fc4:	0fff      	lsrs	r7, r7, #31
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d18a      	bne.n	8000ee0 <__aeabi_fmul+0x40>
 8000fca:	4642      	mov	r2, r8
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d164      	bne.n	800109a <__aeabi_fmul+0x1fa>
 8000fd0:	4649      	mov	r1, r9
 8000fd2:	3201      	adds	r2, #1
 8000fd4:	4311      	orrs	r1, r2
 8000fd6:	4689      	mov	r9, r1
 8000fd8:	290a      	cmp	r1, #10
 8000fda:	dc08      	bgt.n	8000fee <__aeabi_fmul+0x14e>
 8000fdc:	407d      	eors	r5, r7
 8000fde:	2001      	movs	r0, #1
 8000fe0:	b2ea      	uxtb	r2, r5
 8000fe2:	2902      	cmp	r1, #2
 8000fe4:	dc91      	bgt.n	8000f0a <__aeabi_fmul+0x6a>
 8000fe6:	0015      	movs	r5, r2
 8000fe8:	2200      	movs	r2, #0
 8000fea:	e027      	b.n	800103c <__aeabi_fmul+0x19c>
 8000fec:	0015      	movs	r5, r2
 8000fee:	4653      	mov	r3, sl
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_fmul+0x156>
 8000ff4:	e093      	b.n	800111e <__aeabi_fmul+0x27e>
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d01a      	beq.n	8001030 <__aeabi_fmul+0x190>
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d12c      	bne.n	8001058 <__aeabi_fmul+0x1b8>
 8000ffe:	2300      	movs	r3, #0
 8001000:	2200      	movs	r2, #0
 8001002:	e01b      	b.n	800103c <__aeabi_fmul+0x19c>
 8001004:	4643      	mov	r3, r8
 8001006:	34ff      	adds	r4, #255	@ 0xff
 8001008:	2b00      	cmp	r3, #0
 800100a:	d055      	beq.n	80010b8 <__aeabi_fmul+0x218>
 800100c:	2103      	movs	r1, #3
 800100e:	464b      	mov	r3, r9
 8001010:	430b      	orrs	r3, r1
 8001012:	0019      	movs	r1, r3
 8001014:	2b0a      	cmp	r3, #10
 8001016:	dc00      	bgt.n	800101a <__aeabi_fmul+0x17a>
 8001018:	e092      	b.n	8001140 <__aeabi_fmul+0x2a0>
 800101a:	2b0f      	cmp	r3, #15
 800101c:	d000      	beq.n	8001020 <__aeabi_fmul+0x180>
 800101e:	e08c      	b.n	800113a <__aeabi_fmul+0x29a>
 8001020:	2280      	movs	r2, #128	@ 0x80
 8001022:	03d2      	lsls	r2, r2, #15
 8001024:	4216      	tst	r6, r2
 8001026:	d003      	beq.n	8001030 <__aeabi_fmul+0x190>
 8001028:	4643      	mov	r3, r8
 800102a:	4213      	tst	r3, r2
 800102c:	d100      	bne.n	8001030 <__aeabi_fmul+0x190>
 800102e:	e07d      	b.n	800112c <__aeabi_fmul+0x28c>
 8001030:	2280      	movs	r2, #128	@ 0x80
 8001032:	03d2      	lsls	r2, r2, #15
 8001034:	4332      	orrs	r2, r6
 8001036:	0252      	lsls	r2, r2, #9
 8001038:	0a52      	lsrs	r2, r2, #9
 800103a:	23ff      	movs	r3, #255	@ 0xff
 800103c:	05d8      	lsls	r0, r3, #23
 800103e:	07ed      	lsls	r5, r5, #31
 8001040:	4310      	orrs	r0, r2
 8001042:	4328      	orrs	r0, r5
 8001044:	bce0      	pop	{r5, r6, r7}
 8001046:	46ba      	mov	sl, r7
 8001048:	46b1      	mov	r9, r6
 800104a:	46a8      	mov	r8, r5
 800104c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800104e:	2301      	movs	r3, #1
 8001050:	0015      	movs	r5, r2
 8001052:	0871      	lsrs	r1, r6, #1
 8001054:	401e      	ands	r6, r3
 8001056:	430e      	orrs	r6, r1
 8001058:	0023      	movs	r3, r4
 800105a:	3380      	adds	r3, #128	@ 0x80
 800105c:	1c61      	adds	r1, r4, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	dd41      	ble.n	80010e6 <__aeabi_fmul+0x246>
 8001062:	0772      	lsls	r2, r6, #29
 8001064:	d094      	beq.n	8000f90 <__aeabi_fmul+0xf0>
 8001066:	220f      	movs	r2, #15
 8001068:	4032      	ands	r2, r6
 800106a:	2a04      	cmp	r2, #4
 800106c:	d000      	beq.n	8001070 <__aeabi_fmul+0x1d0>
 800106e:	e78e      	b.n	8000f8e <__aeabi_fmul+0xee>
 8001070:	e78e      	b.n	8000f90 <__aeabi_fmul+0xf0>
 8001072:	2e00      	cmp	r6, #0
 8001074:	d105      	bne.n	8001082 <__aeabi_fmul+0x1e2>
 8001076:	2304      	movs	r3, #4
 8001078:	4699      	mov	r9, r3
 800107a:	3b03      	subs	r3, #3
 800107c:	2400      	movs	r4, #0
 800107e:	469a      	mov	sl, r3
 8001080:	e726      	b.n	8000ed0 <__aeabi_fmul+0x30>
 8001082:	0030      	movs	r0, r6
 8001084:	f002 fb20 	bl	80036c8 <__clzsi2>
 8001088:	2476      	movs	r4, #118	@ 0x76
 800108a:	1f43      	subs	r3, r0, #5
 800108c:	409e      	lsls	r6, r3
 800108e:	2300      	movs	r3, #0
 8001090:	4264      	negs	r4, r4
 8001092:	4699      	mov	r9, r3
 8001094:	469a      	mov	sl, r3
 8001096:	1a24      	subs	r4, r4, r0
 8001098:	e71a      	b.n	8000ed0 <__aeabi_fmul+0x30>
 800109a:	4640      	mov	r0, r8
 800109c:	f002 fb14 	bl	80036c8 <__clzsi2>
 80010a0:	464b      	mov	r3, r9
 80010a2:	1a24      	subs	r4, r4, r0
 80010a4:	3c76      	subs	r4, #118	@ 0x76
 80010a6:	2b0a      	cmp	r3, #10
 80010a8:	dca1      	bgt.n	8000fee <__aeabi_fmul+0x14e>
 80010aa:	4643      	mov	r3, r8
 80010ac:	3805      	subs	r0, #5
 80010ae:	4083      	lsls	r3, r0
 80010b0:	407d      	eors	r5, r7
 80010b2:	4698      	mov	r8, r3
 80010b4:	b2ea      	uxtb	r2, r5
 80010b6:	e724      	b.n	8000f02 <__aeabi_fmul+0x62>
 80010b8:	464a      	mov	r2, r9
 80010ba:	3302      	adds	r3, #2
 80010bc:	4313      	orrs	r3, r2
 80010be:	002a      	movs	r2, r5
 80010c0:	407a      	eors	r2, r7
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	2b0a      	cmp	r3, #10
 80010c6:	dc92      	bgt.n	8000fee <__aeabi_fmul+0x14e>
 80010c8:	4649      	mov	r1, r9
 80010ca:	0015      	movs	r5, r2
 80010cc:	2900      	cmp	r1, #0
 80010ce:	d026      	beq.n	800111e <__aeabi_fmul+0x27e>
 80010d0:	4699      	mov	r9, r3
 80010d2:	2002      	movs	r0, #2
 80010d4:	e719      	b.n	8000f0a <__aeabi_fmul+0x6a>
 80010d6:	230c      	movs	r3, #12
 80010d8:	4699      	mov	r9, r3
 80010da:	3b09      	subs	r3, #9
 80010dc:	24ff      	movs	r4, #255	@ 0xff
 80010de:	469a      	mov	sl, r3
 80010e0:	e6f6      	b.n	8000ed0 <__aeabi_fmul+0x30>
 80010e2:	0015      	movs	r5, r2
 80010e4:	0021      	movs	r1, r4
 80010e6:	2201      	movs	r2, #1
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b1b      	cmp	r3, #27
 80010ec:	dd00      	ble.n	80010f0 <__aeabi_fmul+0x250>
 80010ee:	e786      	b.n	8000ffe <__aeabi_fmul+0x15e>
 80010f0:	319e      	adds	r1, #158	@ 0x9e
 80010f2:	0032      	movs	r2, r6
 80010f4:	408e      	lsls	r6, r1
 80010f6:	40da      	lsrs	r2, r3
 80010f8:	1e73      	subs	r3, r6, #1
 80010fa:	419e      	sbcs	r6, r3
 80010fc:	4332      	orrs	r2, r6
 80010fe:	0753      	lsls	r3, r2, #29
 8001100:	d004      	beq.n	800110c <__aeabi_fmul+0x26c>
 8001102:	230f      	movs	r3, #15
 8001104:	4013      	ands	r3, r2
 8001106:	2b04      	cmp	r3, #4
 8001108:	d000      	beq.n	800110c <__aeabi_fmul+0x26c>
 800110a:	3204      	adds	r2, #4
 800110c:	0153      	lsls	r3, r2, #5
 800110e:	d510      	bpl.n	8001132 <__aeabi_fmul+0x292>
 8001110:	2301      	movs	r3, #1
 8001112:	2200      	movs	r2, #0
 8001114:	e792      	b.n	800103c <__aeabi_fmul+0x19c>
 8001116:	003d      	movs	r5, r7
 8001118:	4646      	mov	r6, r8
 800111a:	4682      	mov	sl, r0
 800111c:	e767      	b.n	8000fee <__aeabi_fmul+0x14e>
 800111e:	23ff      	movs	r3, #255	@ 0xff
 8001120:	2200      	movs	r2, #0
 8001122:	e78b      	b.n	800103c <__aeabi_fmul+0x19c>
 8001124:	2280      	movs	r2, #128	@ 0x80
 8001126:	2500      	movs	r5, #0
 8001128:	03d2      	lsls	r2, r2, #15
 800112a:	e786      	b.n	800103a <__aeabi_fmul+0x19a>
 800112c:	003d      	movs	r5, r7
 800112e:	431a      	orrs	r2, r3
 8001130:	e783      	b.n	800103a <__aeabi_fmul+0x19a>
 8001132:	0192      	lsls	r2, r2, #6
 8001134:	2300      	movs	r3, #0
 8001136:	0a52      	lsrs	r2, r2, #9
 8001138:	e780      	b.n	800103c <__aeabi_fmul+0x19c>
 800113a:	003d      	movs	r5, r7
 800113c:	4646      	mov	r6, r8
 800113e:	e777      	b.n	8001030 <__aeabi_fmul+0x190>
 8001140:	002a      	movs	r2, r5
 8001142:	2301      	movs	r3, #1
 8001144:	407a      	eors	r2, r7
 8001146:	408b      	lsls	r3, r1
 8001148:	2003      	movs	r0, #3
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	e6e9      	b.n	8000f22 <__aeabi_fmul+0x82>
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	f7ffffff 	.word	0xf7ffffff

08001154 <__aeabi_fsub>:
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001156:	4647      	mov	r7, r8
 8001158:	46ce      	mov	lr, r9
 800115a:	0243      	lsls	r3, r0, #9
 800115c:	b580      	push	{r7, lr}
 800115e:	0a5f      	lsrs	r7, r3, #9
 8001160:	099b      	lsrs	r3, r3, #6
 8001162:	0045      	lsls	r5, r0, #1
 8001164:	004a      	lsls	r2, r1, #1
 8001166:	469c      	mov	ip, r3
 8001168:	024b      	lsls	r3, r1, #9
 800116a:	0fc4      	lsrs	r4, r0, #31
 800116c:	0fce      	lsrs	r6, r1, #31
 800116e:	0e2d      	lsrs	r5, r5, #24
 8001170:	0a58      	lsrs	r0, r3, #9
 8001172:	0e12      	lsrs	r2, r2, #24
 8001174:	0999      	lsrs	r1, r3, #6
 8001176:	2aff      	cmp	r2, #255	@ 0xff
 8001178:	d06b      	beq.n	8001252 <__aeabi_fsub+0xfe>
 800117a:	2301      	movs	r3, #1
 800117c:	405e      	eors	r6, r3
 800117e:	1aab      	subs	r3, r5, r2
 8001180:	42b4      	cmp	r4, r6
 8001182:	d04b      	beq.n	800121c <__aeabi_fsub+0xc8>
 8001184:	2b00      	cmp	r3, #0
 8001186:	dc00      	bgt.n	800118a <__aeabi_fsub+0x36>
 8001188:	e0ff      	b.n	800138a <__aeabi_fsub+0x236>
 800118a:	2a00      	cmp	r2, #0
 800118c:	d100      	bne.n	8001190 <__aeabi_fsub+0x3c>
 800118e:	e088      	b.n	80012a2 <__aeabi_fsub+0x14e>
 8001190:	2dff      	cmp	r5, #255	@ 0xff
 8001192:	d100      	bne.n	8001196 <__aeabi_fsub+0x42>
 8001194:	e0ef      	b.n	8001376 <__aeabi_fsub+0x222>
 8001196:	2280      	movs	r2, #128	@ 0x80
 8001198:	04d2      	lsls	r2, r2, #19
 800119a:	4311      	orrs	r1, r2
 800119c:	2001      	movs	r0, #1
 800119e:	2b1b      	cmp	r3, #27
 80011a0:	dc08      	bgt.n	80011b4 <__aeabi_fsub+0x60>
 80011a2:	0008      	movs	r0, r1
 80011a4:	2220      	movs	r2, #32
 80011a6:	40d8      	lsrs	r0, r3
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	4099      	lsls	r1, r3
 80011ac:	000b      	movs	r3, r1
 80011ae:	1e5a      	subs	r2, r3, #1
 80011b0:	4193      	sbcs	r3, r2
 80011b2:	4318      	orrs	r0, r3
 80011b4:	4663      	mov	r3, ip
 80011b6:	1a1b      	subs	r3, r3, r0
 80011b8:	469c      	mov	ip, r3
 80011ba:	4663      	mov	r3, ip
 80011bc:	015b      	lsls	r3, r3, #5
 80011be:	d400      	bmi.n	80011c2 <__aeabi_fsub+0x6e>
 80011c0:	e0cd      	b.n	800135e <__aeabi_fsub+0x20a>
 80011c2:	4663      	mov	r3, ip
 80011c4:	019f      	lsls	r7, r3, #6
 80011c6:	09bf      	lsrs	r7, r7, #6
 80011c8:	0038      	movs	r0, r7
 80011ca:	f002 fa7d 	bl	80036c8 <__clzsi2>
 80011ce:	003b      	movs	r3, r7
 80011d0:	3805      	subs	r0, #5
 80011d2:	4083      	lsls	r3, r0
 80011d4:	4285      	cmp	r5, r0
 80011d6:	dc00      	bgt.n	80011da <__aeabi_fsub+0x86>
 80011d8:	e0a2      	b.n	8001320 <__aeabi_fsub+0x1cc>
 80011da:	4ab7      	ldr	r2, [pc, #732]	@ (80014b8 <__aeabi_fsub+0x364>)
 80011dc:	1a2d      	subs	r5, r5, r0
 80011de:	401a      	ands	r2, r3
 80011e0:	4694      	mov	ip, r2
 80011e2:	075a      	lsls	r2, r3, #29
 80011e4:	d100      	bne.n	80011e8 <__aeabi_fsub+0x94>
 80011e6:	e0c3      	b.n	8001370 <__aeabi_fsub+0x21c>
 80011e8:	220f      	movs	r2, #15
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d100      	bne.n	80011f2 <__aeabi_fsub+0x9e>
 80011f0:	e0be      	b.n	8001370 <__aeabi_fsub+0x21c>
 80011f2:	2304      	movs	r3, #4
 80011f4:	4698      	mov	r8, r3
 80011f6:	44c4      	add	ip, r8
 80011f8:	4663      	mov	r3, ip
 80011fa:	015b      	lsls	r3, r3, #5
 80011fc:	d400      	bmi.n	8001200 <__aeabi_fsub+0xac>
 80011fe:	e0b7      	b.n	8001370 <__aeabi_fsub+0x21c>
 8001200:	1c68      	adds	r0, r5, #1
 8001202:	2dfe      	cmp	r5, #254	@ 0xfe
 8001204:	d000      	beq.n	8001208 <__aeabi_fsub+0xb4>
 8001206:	e0a5      	b.n	8001354 <__aeabi_fsub+0x200>
 8001208:	20ff      	movs	r0, #255	@ 0xff
 800120a:	2200      	movs	r2, #0
 800120c:	05c0      	lsls	r0, r0, #23
 800120e:	4310      	orrs	r0, r2
 8001210:	07e4      	lsls	r4, r4, #31
 8001212:	4320      	orrs	r0, r4
 8001214:	bcc0      	pop	{r6, r7}
 8001216:	46b9      	mov	r9, r7
 8001218:	46b0      	mov	r8, r6
 800121a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800121c:	2b00      	cmp	r3, #0
 800121e:	dc00      	bgt.n	8001222 <__aeabi_fsub+0xce>
 8001220:	e1eb      	b.n	80015fa <__aeabi_fsub+0x4a6>
 8001222:	2a00      	cmp	r2, #0
 8001224:	d046      	beq.n	80012b4 <__aeabi_fsub+0x160>
 8001226:	2dff      	cmp	r5, #255	@ 0xff
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0xd8>
 800122a:	e0a4      	b.n	8001376 <__aeabi_fsub+0x222>
 800122c:	2280      	movs	r2, #128	@ 0x80
 800122e:	04d2      	lsls	r2, r2, #19
 8001230:	4311      	orrs	r1, r2
 8001232:	2b1b      	cmp	r3, #27
 8001234:	dc00      	bgt.n	8001238 <__aeabi_fsub+0xe4>
 8001236:	e0fb      	b.n	8001430 <__aeabi_fsub+0x2dc>
 8001238:	2305      	movs	r3, #5
 800123a:	4698      	mov	r8, r3
 800123c:	002b      	movs	r3, r5
 800123e:	44c4      	add	ip, r8
 8001240:	4662      	mov	r2, ip
 8001242:	08d7      	lsrs	r7, r2, #3
 8001244:	2bff      	cmp	r3, #255	@ 0xff
 8001246:	d100      	bne.n	800124a <__aeabi_fsub+0xf6>
 8001248:	e095      	b.n	8001376 <__aeabi_fsub+0x222>
 800124a:	027a      	lsls	r2, r7, #9
 800124c:	0a52      	lsrs	r2, r2, #9
 800124e:	b2d8      	uxtb	r0, r3
 8001250:	e7dc      	b.n	800120c <__aeabi_fsub+0xb8>
 8001252:	002b      	movs	r3, r5
 8001254:	3bff      	subs	r3, #255	@ 0xff
 8001256:	4699      	mov	r9, r3
 8001258:	2900      	cmp	r1, #0
 800125a:	d118      	bne.n	800128e <__aeabi_fsub+0x13a>
 800125c:	2301      	movs	r3, #1
 800125e:	405e      	eors	r6, r3
 8001260:	42b4      	cmp	r4, r6
 8001262:	d100      	bne.n	8001266 <__aeabi_fsub+0x112>
 8001264:	e0ca      	b.n	80013fc <__aeabi_fsub+0x2a8>
 8001266:	464b      	mov	r3, r9
 8001268:	2b00      	cmp	r3, #0
 800126a:	d02d      	beq.n	80012c8 <__aeabi_fsub+0x174>
 800126c:	2d00      	cmp	r5, #0
 800126e:	d000      	beq.n	8001272 <__aeabi_fsub+0x11e>
 8001270:	e13c      	b.n	80014ec <__aeabi_fsub+0x398>
 8001272:	23ff      	movs	r3, #255	@ 0xff
 8001274:	4664      	mov	r4, ip
 8001276:	2c00      	cmp	r4, #0
 8001278:	d100      	bne.n	800127c <__aeabi_fsub+0x128>
 800127a:	e15f      	b.n	800153c <__aeabi_fsub+0x3e8>
 800127c:	1e5d      	subs	r5, r3, #1
 800127e:	2b01      	cmp	r3, #1
 8001280:	d100      	bne.n	8001284 <__aeabi_fsub+0x130>
 8001282:	e174      	b.n	800156e <__aeabi_fsub+0x41a>
 8001284:	0034      	movs	r4, r6
 8001286:	2bff      	cmp	r3, #255	@ 0xff
 8001288:	d074      	beq.n	8001374 <__aeabi_fsub+0x220>
 800128a:	002b      	movs	r3, r5
 800128c:	e103      	b.n	8001496 <__aeabi_fsub+0x342>
 800128e:	42b4      	cmp	r4, r6
 8001290:	d100      	bne.n	8001294 <__aeabi_fsub+0x140>
 8001292:	e09c      	b.n	80013ce <__aeabi_fsub+0x27a>
 8001294:	2b00      	cmp	r3, #0
 8001296:	d017      	beq.n	80012c8 <__aeabi_fsub+0x174>
 8001298:	2d00      	cmp	r5, #0
 800129a:	d0ea      	beq.n	8001272 <__aeabi_fsub+0x11e>
 800129c:	0007      	movs	r7, r0
 800129e:	0034      	movs	r4, r6
 80012a0:	e06c      	b.n	800137c <__aeabi_fsub+0x228>
 80012a2:	2900      	cmp	r1, #0
 80012a4:	d0cc      	beq.n	8001240 <__aeabi_fsub+0xec>
 80012a6:	1e5a      	subs	r2, r3, #1
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d02b      	beq.n	8001304 <__aeabi_fsub+0x1b0>
 80012ac:	2bff      	cmp	r3, #255	@ 0xff
 80012ae:	d062      	beq.n	8001376 <__aeabi_fsub+0x222>
 80012b0:	0013      	movs	r3, r2
 80012b2:	e773      	b.n	800119c <__aeabi_fsub+0x48>
 80012b4:	2900      	cmp	r1, #0
 80012b6:	d0c3      	beq.n	8001240 <__aeabi_fsub+0xec>
 80012b8:	1e5a      	subs	r2, r3, #1
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d100      	bne.n	80012c0 <__aeabi_fsub+0x16c>
 80012be:	e11e      	b.n	80014fe <__aeabi_fsub+0x3aa>
 80012c0:	2bff      	cmp	r3, #255	@ 0xff
 80012c2:	d058      	beq.n	8001376 <__aeabi_fsub+0x222>
 80012c4:	0013      	movs	r3, r2
 80012c6:	e7b4      	b.n	8001232 <__aeabi_fsub+0xde>
 80012c8:	22fe      	movs	r2, #254	@ 0xfe
 80012ca:	1c6b      	adds	r3, r5, #1
 80012cc:	421a      	tst	r2, r3
 80012ce:	d10d      	bne.n	80012ec <__aeabi_fsub+0x198>
 80012d0:	2d00      	cmp	r5, #0
 80012d2:	d060      	beq.n	8001396 <__aeabi_fsub+0x242>
 80012d4:	4663      	mov	r3, ip
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d000      	beq.n	80012dc <__aeabi_fsub+0x188>
 80012da:	e120      	b.n	800151e <__aeabi_fsub+0x3ca>
 80012dc:	2900      	cmp	r1, #0
 80012de:	d000      	beq.n	80012e2 <__aeabi_fsub+0x18e>
 80012e0:	e128      	b.n	8001534 <__aeabi_fsub+0x3e0>
 80012e2:	2280      	movs	r2, #128	@ 0x80
 80012e4:	2400      	movs	r4, #0
 80012e6:	20ff      	movs	r0, #255	@ 0xff
 80012e8:	03d2      	lsls	r2, r2, #15
 80012ea:	e78f      	b.n	800120c <__aeabi_fsub+0xb8>
 80012ec:	4663      	mov	r3, ip
 80012ee:	1a5f      	subs	r7, r3, r1
 80012f0:	017b      	lsls	r3, r7, #5
 80012f2:	d500      	bpl.n	80012f6 <__aeabi_fsub+0x1a2>
 80012f4:	e0fe      	b.n	80014f4 <__aeabi_fsub+0x3a0>
 80012f6:	2f00      	cmp	r7, #0
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0x1a8>
 80012fa:	e765      	b.n	80011c8 <__aeabi_fsub+0x74>
 80012fc:	2400      	movs	r4, #0
 80012fe:	2000      	movs	r0, #0
 8001300:	2200      	movs	r2, #0
 8001302:	e783      	b.n	800120c <__aeabi_fsub+0xb8>
 8001304:	4663      	mov	r3, ip
 8001306:	1a59      	subs	r1, r3, r1
 8001308:	014b      	lsls	r3, r1, #5
 800130a:	d400      	bmi.n	800130e <__aeabi_fsub+0x1ba>
 800130c:	e119      	b.n	8001542 <__aeabi_fsub+0x3ee>
 800130e:	018f      	lsls	r7, r1, #6
 8001310:	09bf      	lsrs	r7, r7, #6
 8001312:	0038      	movs	r0, r7
 8001314:	f002 f9d8 	bl	80036c8 <__clzsi2>
 8001318:	003b      	movs	r3, r7
 800131a:	3805      	subs	r0, #5
 800131c:	4083      	lsls	r3, r0
 800131e:	2501      	movs	r5, #1
 8001320:	2220      	movs	r2, #32
 8001322:	1b40      	subs	r0, r0, r5
 8001324:	3001      	adds	r0, #1
 8001326:	1a12      	subs	r2, r2, r0
 8001328:	0019      	movs	r1, r3
 800132a:	4093      	lsls	r3, r2
 800132c:	40c1      	lsrs	r1, r0
 800132e:	1e5a      	subs	r2, r3, #1
 8001330:	4193      	sbcs	r3, r2
 8001332:	4319      	orrs	r1, r3
 8001334:	468c      	mov	ip, r1
 8001336:	1e0b      	subs	r3, r1, #0
 8001338:	d0e1      	beq.n	80012fe <__aeabi_fsub+0x1aa>
 800133a:	075b      	lsls	r3, r3, #29
 800133c:	d100      	bne.n	8001340 <__aeabi_fsub+0x1ec>
 800133e:	e152      	b.n	80015e6 <__aeabi_fsub+0x492>
 8001340:	230f      	movs	r3, #15
 8001342:	2500      	movs	r5, #0
 8001344:	400b      	ands	r3, r1
 8001346:	2b04      	cmp	r3, #4
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x1f8>
 800134a:	e752      	b.n	80011f2 <__aeabi_fsub+0x9e>
 800134c:	2001      	movs	r0, #1
 800134e:	014a      	lsls	r2, r1, #5
 8001350:	d400      	bmi.n	8001354 <__aeabi_fsub+0x200>
 8001352:	e092      	b.n	800147a <__aeabi_fsub+0x326>
 8001354:	b2c0      	uxtb	r0, r0
 8001356:	4663      	mov	r3, ip
 8001358:	019a      	lsls	r2, r3, #6
 800135a:	0a52      	lsrs	r2, r2, #9
 800135c:	e756      	b.n	800120c <__aeabi_fsub+0xb8>
 800135e:	4663      	mov	r3, ip
 8001360:	075b      	lsls	r3, r3, #29
 8001362:	d005      	beq.n	8001370 <__aeabi_fsub+0x21c>
 8001364:	230f      	movs	r3, #15
 8001366:	4662      	mov	r2, ip
 8001368:	4013      	ands	r3, r2
 800136a:	2b04      	cmp	r3, #4
 800136c:	d000      	beq.n	8001370 <__aeabi_fsub+0x21c>
 800136e:	e740      	b.n	80011f2 <__aeabi_fsub+0x9e>
 8001370:	002b      	movs	r3, r5
 8001372:	e765      	b.n	8001240 <__aeabi_fsub+0xec>
 8001374:	0007      	movs	r7, r0
 8001376:	2f00      	cmp	r7, #0
 8001378:	d100      	bne.n	800137c <__aeabi_fsub+0x228>
 800137a:	e745      	b.n	8001208 <__aeabi_fsub+0xb4>
 800137c:	2280      	movs	r2, #128	@ 0x80
 800137e:	03d2      	lsls	r2, r2, #15
 8001380:	433a      	orrs	r2, r7
 8001382:	0252      	lsls	r2, r2, #9
 8001384:	20ff      	movs	r0, #255	@ 0xff
 8001386:	0a52      	lsrs	r2, r2, #9
 8001388:	e740      	b.n	800120c <__aeabi_fsub+0xb8>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d179      	bne.n	8001482 <__aeabi_fsub+0x32e>
 800138e:	22fe      	movs	r2, #254	@ 0xfe
 8001390:	1c6b      	adds	r3, r5, #1
 8001392:	421a      	tst	r2, r3
 8001394:	d1aa      	bne.n	80012ec <__aeabi_fsub+0x198>
 8001396:	4663      	mov	r3, ip
 8001398:	2b00      	cmp	r3, #0
 800139a:	d100      	bne.n	800139e <__aeabi_fsub+0x24a>
 800139c:	e0f5      	b.n	800158a <__aeabi_fsub+0x436>
 800139e:	2900      	cmp	r1, #0
 80013a0:	d100      	bne.n	80013a4 <__aeabi_fsub+0x250>
 80013a2:	e0d1      	b.n	8001548 <__aeabi_fsub+0x3f4>
 80013a4:	1a5f      	subs	r7, r3, r1
 80013a6:	2380      	movs	r3, #128	@ 0x80
 80013a8:	04db      	lsls	r3, r3, #19
 80013aa:	421f      	tst	r7, r3
 80013ac:	d100      	bne.n	80013b0 <__aeabi_fsub+0x25c>
 80013ae:	e10e      	b.n	80015ce <__aeabi_fsub+0x47a>
 80013b0:	4662      	mov	r2, ip
 80013b2:	2401      	movs	r4, #1
 80013b4:	1a8a      	subs	r2, r1, r2
 80013b6:	4694      	mov	ip, r2
 80013b8:	2000      	movs	r0, #0
 80013ba:	4034      	ands	r4, r6
 80013bc:	2a00      	cmp	r2, #0
 80013be:	d100      	bne.n	80013c2 <__aeabi_fsub+0x26e>
 80013c0:	e724      	b.n	800120c <__aeabi_fsub+0xb8>
 80013c2:	2001      	movs	r0, #1
 80013c4:	421a      	tst	r2, r3
 80013c6:	d1c6      	bne.n	8001356 <__aeabi_fsub+0x202>
 80013c8:	2300      	movs	r3, #0
 80013ca:	08d7      	lsrs	r7, r2, #3
 80013cc:	e73d      	b.n	800124a <__aeabi_fsub+0xf6>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d017      	beq.n	8001402 <__aeabi_fsub+0x2ae>
 80013d2:	2d00      	cmp	r5, #0
 80013d4:	d000      	beq.n	80013d8 <__aeabi_fsub+0x284>
 80013d6:	e0af      	b.n	8001538 <__aeabi_fsub+0x3e4>
 80013d8:	23ff      	movs	r3, #255	@ 0xff
 80013da:	4665      	mov	r5, ip
 80013dc:	2d00      	cmp	r5, #0
 80013de:	d100      	bne.n	80013e2 <__aeabi_fsub+0x28e>
 80013e0:	e0ad      	b.n	800153e <__aeabi_fsub+0x3ea>
 80013e2:	1e5e      	subs	r6, r3, #1
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0x296>
 80013e8:	e089      	b.n	80014fe <__aeabi_fsub+0x3aa>
 80013ea:	2bff      	cmp	r3, #255	@ 0xff
 80013ec:	d0c2      	beq.n	8001374 <__aeabi_fsub+0x220>
 80013ee:	2e1b      	cmp	r6, #27
 80013f0:	dc00      	bgt.n	80013f4 <__aeabi_fsub+0x2a0>
 80013f2:	e0ab      	b.n	800154c <__aeabi_fsub+0x3f8>
 80013f4:	1d4b      	adds	r3, r1, #5
 80013f6:	469c      	mov	ip, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	e721      	b.n	8001240 <__aeabi_fsub+0xec>
 80013fc:	464b      	mov	r3, r9
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d170      	bne.n	80014e4 <__aeabi_fsub+0x390>
 8001402:	22fe      	movs	r2, #254	@ 0xfe
 8001404:	1c6b      	adds	r3, r5, #1
 8001406:	421a      	tst	r2, r3
 8001408:	d15e      	bne.n	80014c8 <__aeabi_fsub+0x374>
 800140a:	2d00      	cmp	r5, #0
 800140c:	d000      	beq.n	8001410 <__aeabi_fsub+0x2bc>
 800140e:	e0c3      	b.n	8001598 <__aeabi_fsub+0x444>
 8001410:	4663      	mov	r3, ip
 8001412:	2b00      	cmp	r3, #0
 8001414:	d100      	bne.n	8001418 <__aeabi_fsub+0x2c4>
 8001416:	e0d0      	b.n	80015ba <__aeabi_fsub+0x466>
 8001418:	2900      	cmp	r1, #0
 800141a:	d100      	bne.n	800141e <__aeabi_fsub+0x2ca>
 800141c:	e094      	b.n	8001548 <__aeabi_fsub+0x3f4>
 800141e:	000a      	movs	r2, r1
 8001420:	4462      	add	r2, ip
 8001422:	0153      	lsls	r3, r2, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x2d4>
 8001426:	e0d8      	b.n	80015da <__aeabi_fsub+0x486>
 8001428:	0192      	lsls	r2, r2, #6
 800142a:	2001      	movs	r0, #1
 800142c:	0a52      	lsrs	r2, r2, #9
 800142e:	e6ed      	b.n	800120c <__aeabi_fsub+0xb8>
 8001430:	0008      	movs	r0, r1
 8001432:	2220      	movs	r2, #32
 8001434:	40d8      	lsrs	r0, r3
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	4099      	lsls	r1, r3
 800143a:	000b      	movs	r3, r1
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	4193      	sbcs	r3, r2
 8001440:	4303      	orrs	r3, r0
 8001442:	449c      	add	ip, r3
 8001444:	4663      	mov	r3, ip
 8001446:	015b      	lsls	r3, r3, #5
 8001448:	d589      	bpl.n	800135e <__aeabi_fsub+0x20a>
 800144a:	3501      	adds	r5, #1
 800144c:	2dff      	cmp	r5, #255	@ 0xff
 800144e:	d100      	bne.n	8001452 <__aeabi_fsub+0x2fe>
 8001450:	e6da      	b.n	8001208 <__aeabi_fsub+0xb4>
 8001452:	4662      	mov	r2, ip
 8001454:	2301      	movs	r3, #1
 8001456:	4919      	ldr	r1, [pc, #100]	@ (80014bc <__aeabi_fsub+0x368>)
 8001458:	4013      	ands	r3, r2
 800145a:	0852      	lsrs	r2, r2, #1
 800145c:	400a      	ands	r2, r1
 800145e:	431a      	orrs	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	4694      	mov	ip, r2
 8001464:	075b      	lsls	r3, r3, #29
 8001466:	d004      	beq.n	8001472 <__aeabi_fsub+0x31e>
 8001468:	230f      	movs	r3, #15
 800146a:	4013      	ands	r3, r2
 800146c:	2b04      	cmp	r3, #4
 800146e:	d000      	beq.n	8001472 <__aeabi_fsub+0x31e>
 8001470:	e6bf      	b.n	80011f2 <__aeabi_fsub+0x9e>
 8001472:	4663      	mov	r3, ip
 8001474:	015b      	lsls	r3, r3, #5
 8001476:	d500      	bpl.n	800147a <__aeabi_fsub+0x326>
 8001478:	e6c2      	b.n	8001200 <__aeabi_fsub+0xac>
 800147a:	4663      	mov	r3, ip
 800147c:	08df      	lsrs	r7, r3, #3
 800147e:	002b      	movs	r3, r5
 8001480:	e6e3      	b.n	800124a <__aeabi_fsub+0xf6>
 8001482:	1b53      	subs	r3, r2, r5
 8001484:	2d00      	cmp	r5, #0
 8001486:	d100      	bne.n	800148a <__aeabi_fsub+0x336>
 8001488:	e6f4      	b.n	8001274 <__aeabi_fsub+0x120>
 800148a:	2080      	movs	r0, #128	@ 0x80
 800148c:	4664      	mov	r4, ip
 800148e:	04c0      	lsls	r0, r0, #19
 8001490:	4304      	orrs	r4, r0
 8001492:	46a4      	mov	ip, r4
 8001494:	0034      	movs	r4, r6
 8001496:	2001      	movs	r0, #1
 8001498:	2b1b      	cmp	r3, #27
 800149a:	dc09      	bgt.n	80014b0 <__aeabi_fsub+0x35c>
 800149c:	2520      	movs	r5, #32
 800149e:	4660      	mov	r0, ip
 80014a0:	40d8      	lsrs	r0, r3
 80014a2:	1aeb      	subs	r3, r5, r3
 80014a4:	4665      	mov	r5, ip
 80014a6:	409d      	lsls	r5, r3
 80014a8:	002b      	movs	r3, r5
 80014aa:	1e5d      	subs	r5, r3, #1
 80014ac:	41ab      	sbcs	r3, r5
 80014ae:	4318      	orrs	r0, r3
 80014b0:	1a0b      	subs	r3, r1, r0
 80014b2:	469c      	mov	ip, r3
 80014b4:	0015      	movs	r5, r2
 80014b6:	e680      	b.n	80011ba <__aeabi_fsub+0x66>
 80014b8:	fbffffff 	.word	0xfbffffff
 80014bc:	7dffffff 	.word	0x7dffffff
 80014c0:	22fe      	movs	r2, #254	@ 0xfe
 80014c2:	1c6b      	adds	r3, r5, #1
 80014c4:	4213      	tst	r3, r2
 80014c6:	d0a3      	beq.n	8001410 <__aeabi_fsub+0x2bc>
 80014c8:	2bff      	cmp	r3, #255	@ 0xff
 80014ca:	d100      	bne.n	80014ce <__aeabi_fsub+0x37a>
 80014cc:	e69c      	b.n	8001208 <__aeabi_fsub+0xb4>
 80014ce:	4461      	add	r1, ip
 80014d0:	0849      	lsrs	r1, r1, #1
 80014d2:	074a      	lsls	r2, r1, #29
 80014d4:	d049      	beq.n	800156a <__aeabi_fsub+0x416>
 80014d6:	220f      	movs	r2, #15
 80014d8:	400a      	ands	r2, r1
 80014da:	2a04      	cmp	r2, #4
 80014dc:	d045      	beq.n	800156a <__aeabi_fsub+0x416>
 80014de:	1d0a      	adds	r2, r1, #4
 80014e0:	4694      	mov	ip, r2
 80014e2:	e6ad      	b.n	8001240 <__aeabi_fsub+0xec>
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d100      	bne.n	80014ea <__aeabi_fsub+0x396>
 80014e8:	e776      	b.n	80013d8 <__aeabi_fsub+0x284>
 80014ea:	e68d      	b.n	8001208 <__aeabi_fsub+0xb4>
 80014ec:	0034      	movs	r4, r6
 80014ee:	20ff      	movs	r0, #255	@ 0xff
 80014f0:	2200      	movs	r2, #0
 80014f2:	e68b      	b.n	800120c <__aeabi_fsub+0xb8>
 80014f4:	4663      	mov	r3, ip
 80014f6:	2401      	movs	r4, #1
 80014f8:	1acf      	subs	r7, r1, r3
 80014fa:	4034      	ands	r4, r6
 80014fc:	e664      	b.n	80011c8 <__aeabi_fsub+0x74>
 80014fe:	4461      	add	r1, ip
 8001500:	014b      	lsls	r3, r1, #5
 8001502:	d56d      	bpl.n	80015e0 <__aeabi_fsub+0x48c>
 8001504:	0848      	lsrs	r0, r1, #1
 8001506:	4944      	ldr	r1, [pc, #272]	@ (8001618 <__aeabi_fsub+0x4c4>)
 8001508:	4001      	ands	r1, r0
 800150a:	0743      	lsls	r3, r0, #29
 800150c:	d02c      	beq.n	8001568 <__aeabi_fsub+0x414>
 800150e:	230f      	movs	r3, #15
 8001510:	4003      	ands	r3, r0
 8001512:	2b04      	cmp	r3, #4
 8001514:	d028      	beq.n	8001568 <__aeabi_fsub+0x414>
 8001516:	1d0b      	adds	r3, r1, #4
 8001518:	469c      	mov	ip, r3
 800151a:	2302      	movs	r3, #2
 800151c:	e690      	b.n	8001240 <__aeabi_fsub+0xec>
 800151e:	2900      	cmp	r1, #0
 8001520:	d100      	bne.n	8001524 <__aeabi_fsub+0x3d0>
 8001522:	e72b      	b.n	800137c <__aeabi_fsub+0x228>
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	03db      	lsls	r3, r3, #15
 8001528:	429f      	cmp	r7, r3
 800152a:	d200      	bcs.n	800152e <__aeabi_fsub+0x3da>
 800152c:	e726      	b.n	800137c <__aeabi_fsub+0x228>
 800152e:	4298      	cmp	r0, r3
 8001530:	d300      	bcc.n	8001534 <__aeabi_fsub+0x3e0>
 8001532:	e723      	b.n	800137c <__aeabi_fsub+0x228>
 8001534:	2401      	movs	r4, #1
 8001536:	4034      	ands	r4, r6
 8001538:	0007      	movs	r7, r0
 800153a:	e71f      	b.n	800137c <__aeabi_fsub+0x228>
 800153c:	0034      	movs	r4, r6
 800153e:	468c      	mov	ip, r1
 8001540:	e67e      	b.n	8001240 <__aeabi_fsub+0xec>
 8001542:	2301      	movs	r3, #1
 8001544:	08cf      	lsrs	r7, r1, #3
 8001546:	e680      	b.n	800124a <__aeabi_fsub+0xf6>
 8001548:	2300      	movs	r3, #0
 800154a:	e67e      	b.n	800124a <__aeabi_fsub+0xf6>
 800154c:	2020      	movs	r0, #32
 800154e:	4665      	mov	r5, ip
 8001550:	1b80      	subs	r0, r0, r6
 8001552:	4085      	lsls	r5, r0
 8001554:	4663      	mov	r3, ip
 8001556:	0028      	movs	r0, r5
 8001558:	40f3      	lsrs	r3, r6
 800155a:	1e45      	subs	r5, r0, #1
 800155c:	41a8      	sbcs	r0, r5
 800155e:	4303      	orrs	r3, r0
 8001560:	469c      	mov	ip, r3
 8001562:	0015      	movs	r5, r2
 8001564:	448c      	add	ip, r1
 8001566:	e76d      	b.n	8001444 <__aeabi_fsub+0x2f0>
 8001568:	2302      	movs	r3, #2
 800156a:	08cf      	lsrs	r7, r1, #3
 800156c:	e66d      	b.n	800124a <__aeabi_fsub+0xf6>
 800156e:	1b0f      	subs	r7, r1, r4
 8001570:	017b      	lsls	r3, r7, #5
 8001572:	d528      	bpl.n	80015c6 <__aeabi_fsub+0x472>
 8001574:	01bf      	lsls	r7, r7, #6
 8001576:	09bf      	lsrs	r7, r7, #6
 8001578:	0038      	movs	r0, r7
 800157a:	f002 f8a5 	bl	80036c8 <__clzsi2>
 800157e:	003b      	movs	r3, r7
 8001580:	3805      	subs	r0, #5
 8001582:	4083      	lsls	r3, r0
 8001584:	0034      	movs	r4, r6
 8001586:	2501      	movs	r5, #1
 8001588:	e6ca      	b.n	8001320 <__aeabi_fsub+0x1cc>
 800158a:	2900      	cmp	r1, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_fsub+0x43c>
 800158e:	e6b5      	b.n	80012fc <__aeabi_fsub+0x1a8>
 8001590:	2401      	movs	r4, #1
 8001592:	0007      	movs	r7, r0
 8001594:	4034      	ands	r4, r6
 8001596:	e658      	b.n	800124a <__aeabi_fsub+0xf6>
 8001598:	4663      	mov	r3, ip
 800159a:	2b00      	cmp	r3, #0
 800159c:	d100      	bne.n	80015a0 <__aeabi_fsub+0x44c>
 800159e:	e6e9      	b.n	8001374 <__aeabi_fsub+0x220>
 80015a0:	2900      	cmp	r1, #0
 80015a2:	d100      	bne.n	80015a6 <__aeabi_fsub+0x452>
 80015a4:	e6ea      	b.n	800137c <__aeabi_fsub+0x228>
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	03db      	lsls	r3, r3, #15
 80015aa:	429f      	cmp	r7, r3
 80015ac:	d200      	bcs.n	80015b0 <__aeabi_fsub+0x45c>
 80015ae:	e6e5      	b.n	800137c <__aeabi_fsub+0x228>
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d300      	bcc.n	80015b6 <__aeabi_fsub+0x462>
 80015b4:	e6e2      	b.n	800137c <__aeabi_fsub+0x228>
 80015b6:	0007      	movs	r7, r0
 80015b8:	e6e0      	b.n	800137c <__aeabi_fsub+0x228>
 80015ba:	2900      	cmp	r1, #0
 80015bc:	d100      	bne.n	80015c0 <__aeabi_fsub+0x46c>
 80015be:	e69e      	b.n	80012fe <__aeabi_fsub+0x1aa>
 80015c0:	2300      	movs	r3, #0
 80015c2:	08cf      	lsrs	r7, r1, #3
 80015c4:	e641      	b.n	800124a <__aeabi_fsub+0xf6>
 80015c6:	0034      	movs	r4, r6
 80015c8:	2301      	movs	r3, #1
 80015ca:	08ff      	lsrs	r7, r7, #3
 80015cc:	e63d      	b.n	800124a <__aeabi_fsub+0xf6>
 80015ce:	2f00      	cmp	r7, #0
 80015d0:	d100      	bne.n	80015d4 <__aeabi_fsub+0x480>
 80015d2:	e693      	b.n	80012fc <__aeabi_fsub+0x1a8>
 80015d4:	2300      	movs	r3, #0
 80015d6:	08ff      	lsrs	r7, r7, #3
 80015d8:	e637      	b.n	800124a <__aeabi_fsub+0xf6>
 80015da:	2300      	movs	r3, #0
 80015dc:	08d7      	lsrs	r7, r2, #3
 80015de:	e634      	b.n	800124a <__aeabi_fsub+0xf6>
 80015e0:	2301      	movs	r3, #1
 80015e2:	08cf      	lsrs	r7, r1, #3
 80015e4:	e631      	b.n	800124a <__aeabi_fsub+0xf6>
 80015e6:	2280      	movs	r2, #128	@ 0x80
 80015e8:	000b      	movs	r3, r1
 80015ea:	04d2      	lsls	r2, r2, #19
 80015ec:	2001      	movs	r0, #1
 80015ee:	4013      	ands	r3, r2
 80015f0:	4211      	tst	r1, r2
 80015f2:	d000      	beq.n	80015f6 <__aeabi_fsub+0x4a2>
 80015f4:	e6ae      	b.n	8001354 <__aeabi_fsub+0x200>
 80015f6:	08cf      	lsrs	r7, r1, #3
 80015f8:	e627      	b.n	800124a <__aeabi_fsub+0xf6>
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d100      	bne.n	8001600 <__aeabi_fsub+0x4ac>
 80015fe:	e75f      	b.n	80014c0 <__aeabi_fsub+0x36c>
 8001600:	1b56      	subs	r6, r2, r5
 8001602:	2d00      	cmp	r5, #0
 8001604:	d101      	bne.n	800160a <__aeabi_fsub+0x4b6>
 8001606:	0033      	movs	r3, r6
 8001608:	e6e7      	b.n	80013da <__aeabi_fsub+0x286>
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	4660      	mov	r0, ip
 800160e:	04db      	lsls	r3, r3, #19
 8001610:	4318      	orrs	r0, r3
 8001612:	4684      	mov	ip, r0
 8001614:	e6eb      	b.n	80013ee <__aeabi_fsub+0x29a>
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	7dffffff 	.word	0x7dffffff

0800161c <__aeabi_f2iz>:
 800161c:	0241      	lsls	r1, r0, #9
 800161e:	0042      	lsls	r2, r0, #1
 8001620:	0fc3      	lsrs	r3, r0, #31
 8001622:	0a49      	lsrs	r1, r1, #9
 8001624:	2000      	movs	r0, #0
 8001626:	0e12      	lsrs	r2, r2, #24
 8001628:	2a7e      	cmp	r2, #126	@ 0x7e
 800162a:	dd03      	ble.n	8001634 <__aeabi_f2iz+0x18>
 800162c:	2a9d      	cmp	r2, #157	@ 0x9d
 800162e:	dd02      	ble.n	8001636 <__aeabi_f2iz+0x1a>
 8001630:	4a09      	ldr	r2, [pc, #36]	@ (8001658 <__aeabi_f2iz+0x3c>)
 8001632:	1898      	adds	r0, r3, r2
 8001634:	4770      	bx	lr
 8001636:	2080      	movs	r0, #128	@ 0x80
 8001638:	0400      	lsls	r0, r0, #16
 800163a:	4301      	orrs	r1, r0
 800163c:	2a95      	cmp	r2, #149	@ 0x95
 800163e:	dc07      	bgt.n	8001650 <__aeabi_f2iz+0x34>
 8001640:	2096      	movs	r0, #150	@ 0x96
 8001642:	1a82      	subs	r2, r0, r2
 8001644:	40d1      	lsrs	r1, r2
 8001646:	4248      	negs	r0, r1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f3      	bne.n	8001634 <__aeabi_f2iz+0x18>
 800164c:	0008      	movs	r0, r1
 800164e:	e7f1      	b.n	8001634 <__aeabi_f2iz+0x18>
 8001650:	3a96      	subs	r2, #150	@ 0x96
 8001652:	4091      	lsls	r1, r2
 8001654:	e7f7      	b.n	8001646 <__aeabi_f2iz+0x2a>
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	7fffffff 	.word	0x7fffffff

0800165c <__aeabi_i2f>:
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	2800      	cmp	r0, #0
 8001660:	d012      	beq.n	8001688 <__aeabi_i2f+0x2c>
 8001662:	17c3      	asrs	r3, r0, #31
 8001664:	18c5      	adds	r5, r0, r3
 8001666:	405d      	eors	r5, r3
 8001668:	0fc4      	lsrs	r4, r0, #31
 800166a:	0028      	movs	r0, r5
 800166c:	f002 f82c 	bl	80036c8 <__clzsi2>
 8001670:	239e      	movs	r3, #158	@ 0x9e
 8001672:	1a1b      	subs	r3, r3, r0
 8001674:	2b96      	cmp	r3, #150	@ 0x96
 8001676:	dc0f      	bgt.n	8001698 <__aeabi_i2f+0x3c>
 8001678:	2808      	cmp	r0, #8
 800167a:	d038      	beq.n	80016ee <__aeabi_i2f+0x92>
 800167c:	3808      	subs	r0, #8
 800167e:	4085      	lsls	r5, r0
 8001680:	026d      	lsls	r5, r5, #9
 8001682:	0a6d      	lsrs	r5, r5, #9
 8001684:	b2d8      	uxtb	r0, r3
 8001686:	e002      	b.n	800168e <__aeabi_i2f+0x32>
 8001688:	2400      	movs	r4, #0
 800168a:	2000      	movs	r0, #0
 800168c:	2500      	movs	r5, #0
 800168e:	05c0      	lsls	r0, r0, #23
 8001690:	4328      	orrs	r0, r5
 8001692:	07e4      	lsls	r4, r4, #31
 8001694:	4320      	orrs	r0, r4
 8001696:	bd70      	pop	{r4, r5, r6, pc}
 8001698:	2b99      	cmp	r3, #153	@ 0x99
 800169a:	dc14      	bgt.n	80016c6 <__aeabi_i2f+0x6a>
 800169c:	1f42      	subs	r2, r0, #5
 800169e:	4095      	lsls	r5, r2
 80016a0:	002a      	movs	r2, r5
 80016a2:	4915      	ldr	r1, [pc, #84]	@ (80016f8 <__aeabi_i2f+0x9c>)
 80016a4:	4011      	ands	r1, r2
 80016a6:	0755      	lsls	r5, r2, #29
 80016a8:	d01c      	beq.n	80016e4 <__aeabi_i2f+0x88>
 80016aa:	250f      	movs	r5, #15
 80016ac:	402a      	ands	r2, r5
 80016ae:	2a04      	cmp	r2, #4
 80016b0:	d018      	beq.n	80016e4 <__aeabi_i2f+0x88>
 80016b2:	3104      	adds	r1, #4
 80016b4:	08ca      	lsrs	r2, r1, #3
 80016b6:	0149      	lsls	r1, r1, #5
 80016b8:	d515      	bpl.n	80016e6 <__aeabi_i2f+0x8a>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	0252      	lsls	r2, r2, #9
 80016be:	1a18      	subs	r0, r3, r0
 80016c0:	0a55      	lsrs	r5, r2, #9
 80016c2:	b2c0      	uxtb	r0, r0
 80016c4:	e7e3      	b.n	800168e <__aeabi_i2f+0x32>
 80016c6:	2205      	movs	r2, #5
 80016c8:	0029      	movs	r1, r5
 80016ca:	1a12      	subs	r2, r2, r0
 80016cc:	40d1      	lsrs	r1, r2
 80016ce:	0002      	movs	r2, r0
 80016d0:	321b      	adds	r2, #27
 80016d2:	4095      	lsls	r5, r2
 80016d4:	002a      	movs	r2, r5
 80016d6:	1e55      	subs	r5, r2, #1
 80016d8:	41aa      	sbcs	r2, r5
 80016da:	430a      	orrs	r2, r1
 80016dc:	4906      	ldr	r1, [pc, #24]	@ (80016f8 <__aeabi_i2f+0x9c>)
 80016de:	4011      	ands	r1, r2
 80016e0:	0755      	lsls	r5, r2, #29
 80016e2:	d1e2      	bne.n	80016aa <__aeabi_i2f+0x4e>
 80016e4:	08ca      	lsrs	r2, r1, #3
 80016e6:	0252      	lsls	r2, r2, #9
 80016e8:	0a55      	lsrs	r5, r2, #9
 80016ea:	b2d8      	uxtb	r0, r3
 80016ec:	e7cf      	b.n	800168e <__aeabi_i2f+0x32>
 80016ee:	026d      	lsls	r5, r5, #9
 80016f0:	0a6d      	lsrs	r5, r5, #9
 80016f2:	308e      	adds	r0, #142	@ 0x8e
 80016f4:	e7cb      	b.n	800168e <__aeabi_i2f+0x32>
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	fbffffff 	.word	0xfbffffff

080016fc <__aeabi_ui2f>:
 80016fc:	b510      	push	{r4, lr}
 80016fe:	1e04      	subs	r4, r0, #0
 8001700:	d00d      	beq.n	800171e <__aeabi_ui2f+0x22>
 8001702:	f001 ffe1 	bl	80036c8 <__clzsi2>
 8001706:	239e      	movs	r3, #158	@ 0x9e
 8001708:	1a1b      	subs	r3, r3, r0
 800170a:	2b96      	cmp	r3, #150	@ 0x96
 800170c:	dc0c      	bgt.n	8001728 <__aeabi_ui2f+0x2c>
 800170e:	2808      	cmp	r0, #8
 8001710:	d034      	beq.n	800177c <__aeabi_ui2f+0x80>
 8001712:	3808      	subs	r0, #8
 8001714:	4084      	lsls	r4, r0
 8001716:	0264      	lsls	r4, r4, #9
 8001718:	0a64      	lsrs	r4, r4, #9
 800171a:	b2d8      	uxtb	r0, r3
 800171c:	e001      	b.n	8001722 <__aeabi_ui2f+0x26>
 800171e:	2000      	movs	r0, #0
 8001720:	2400      	movs	r4, #0
 8001722:	05c0      	lsls	r0, r0, #23
 8001724:	4320      	orrs	r0, r4
 8001726:	bd10      	pop	{r4, pc}
 8001728:	2b99      	cmp	r3, #153	@ 0x99
 800172a:	dc13      	bgt.n	8001754 <__aeabi_ui2f+0x58>
 800172c:	1f42      	subs	r2, r0, #5
 800172e:	4094      	lsls	r4, r2
 8001730:	4a14      	ldr	r2, [pc, #80]	@ (8001784 <__aeabi_ui2f+0x88>)
 8001732:	4022      	ands	r2, r4
 8001734:	0761      	lsls	r1, r4, #29
 8001736:	d01c      	beq.n	8001772 <__aeabi_ui2f+0x76>
 8001738:	210f      	movs	r1, #15
 800173a:	4021      	ands	r1, r4
 800173c:	2904      	cmp	r1, #4
 800173e:	d018      	beq.n	8001772 <__aeabi_ui2f+0x76>
 8001740:	3204      	adds	r2, #4
 8001742:	08d4      	lsrs	r4, r2, #3
 8001744:	0152      	lsls	r2, r2, #5
 8001746:	d515      	bpl.n	8001774 <__aeabi_ui2f+0x78>
 8001748:	239f      	movs	r3, #159	@ 0x9f
 800174a:	0264      	lsls	r4, r4, #9
 800174c:	1a18      	subs	r0, r3, r0
 800174e:	0a64      	lsrs	r4, r4, #9
 8001750:	b2c0      	uxtb	r0, r0
 8001752:	e7e6      	b.n	8001722 <__aeabi_ui2f+0x26>
 8001754:	0002      	movs	r2, r0
 8001756:	0021      	movs	r1, r4
 8001758:	321b      	adds	r2, #27
 800175a:	4091      	lsls	r1, r2
 800175c:	000a      	movs	r2, r1
 800175e:	1e51      	subs	r1, r2, #1
 8001760:	418a      	sbcs	r2, r1
 8001762:	2105      	movs	r1, #5
 8001764:	1a09      	subs	r1, r1, r0
 8001766:	40cc      	lsrs	r4, r1
 8001768:	4314      	orrs	r4, r2
 800176a:	4a06      	ldr	r2, [pc, #24]	@ (8001784 <__aeabi_ui2f+0x88>)
 800176c:	4022      	ands	r2, r4
 800176e:	0761      	lsls	r1, r4, #29
 8001770:	d1e2      	bne.n	8001738 <__aeabi_ui2f+0x3c>
 8001772:	08d4      	lsrs	r4, r2, #3
 8001774:	0264      	lsls	r4, r4, #9
 8001776:	0a64      	lsrs	r4, r4, #9
 8001778:	b2d8      	uxtb	r0, r3
 800177a:	e7d2      	b.n	8001722 <__aeabi_ui2f+0x26>
 800177c:	0264      	lsls	r4, r4, #9
 800177e:	0a64      	lsrs	r4, r4, #9
 8001780:	308e      	adds	r0, #142	@ 0x8e
 8001782:	e7ce      	b.n	8001722 <__aeabi_ui2f+0x26>
 8001784:	fbffffff 	.word	0xfbffffff

08001788 <__aeabi_dadd>:
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	464f      	mov	r7, r9
 800178c:	4646      	mov	r6, r8
 800178e:	46d6      	mov	lr, sl
 8001790:	b5c0      	push	{r6, r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	9000      	str	r0, [sp, #0]
 8001796:	9101      	str	r1, [sp, #4]
 8001798:	030e      	lsls	r6, r1, #12
 800179a:	004c      	lsls	r4, r1, #1
 800179c:	0fcd      	lsrs	r5, r1, #31
 800179e:	0a71      	lsrs	r1, r6, #9
 80017a0:	9e00      	ldr	r6, [sp, #0]
 80017a2:	005f      	lsls	r7, r3, #1
 80017a4:	0f76      	lsrs	r6, r6, #29
 80017a6:	430e      	orrs	r6, r1
 80017a8:	9900      	ldr	r1, [sp, #0]
 80017aa:	9200      	str	r2, [sp, #0]
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	00c9      	lsls	r1, r1, #3
 80017b0:	4689      	mov	r9, r1
 80017b2:	0319      	lsls	r1, r3, #12
 80017b4:	0d7b      	lsrs	r3, r7, #21
 80017b6:	4698      	mov	r8, r3
 80017b8:	9b01      	ldr	r3, [sp, #4]
 80017ba:	0a49      	lsrs	r1, r1, #9
 80017bc:	0fdb      	lsrs	r3, r3, #31
 80017be:	469c      	mov	ip, r3
 80017c0:	9b00      	ldr	r3, [sp, #0]
 80017c2:	9a00      	ldr	r2, [sp, #0]
 80017c4:	0f5b      	lsrs	r3, r3, #29
 80017c6:	430b      	orrs	r3, r1
 80017c8:	4641      	mov	r1, r8
 80017ca:	0d64      	lsrs	r4, r4, #21
 80017cc:	00d2      	lsls	r2, r2, #3
 80017ce:	1a61      	subs	r1, r4, r1
 80017d0:	4565      	cmp	r5, ip
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dadd+0x4e>
 80017d4:	e0a6      	b.n	8001924 <__aeabi_dadd+0x19c>
 80017d6:	2900      	cmp	r1, #0
 80017d8:	dd72      	ble.n	80018c0 <__aeabi_dadd+0x138>
 80017da:	4647      	mov	r7, r8
 80017dc:	2f00      	cmp	r7, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dadd+0x5a>
 80017e0:	e0dd      	b.n	800199e <__aeabi_dadd+0x216>
 80017e2:	4fcc      	ldr	r7, [pc, #816]	@ (8001b14 <__aeabi_dadd+0x38c>)
 80017e4:	42bc      	cmp	r4, r7
 80017e6:	d100      	bne.n	80017ea <__aeabi_dadd+0x62>
 80017e8:	e19a      	b.n	8001b20 <__aeabi_dadd+0x398>
 80017ea:	2701      	movs	r7, #1
 80017ec:	2938      	cmp	r1, #56	@ 0x38
 80017ee:	dc17      	bgt.n	8001820 <__aeabi_dadd+0x98>
 80017f0:	2780      	movs	r7, #128	@ 0x80
 80017f2:	043f      	lsls	r7, r7, #16
 80017f4:	433b      	orrs	r3, r7
 80017f6:	291f      	cmp	r1, #31
 80017f8:	dd00      	ble.n	80017fc <__aeabi_dadd+0x74>
 80017fa:	e1dd      	b.n	8001bb8 <__aeabi_dadd+0x430>
 80017fc:	2720      	movs	r7, #32
 80017fe:	1a78      	subs	r0, r7, r1
 8001800:	001f      	movs	r7, r3
 8001802:	4087      	lsls	r7, r0
 8001804:	46ba      	mov	sl, r7
 8001806:	0017      	movs	r7, r2
 8001808:	40cf      	lsrs	r7, r1
 800180a:	4684      	mov	ip, r0
 800180c:	0038      	movs	r0, r7
 800180e:	4657      	mov	r7, sl
 8001810:	4307      	orrs	r7, r0
 8001812:	4660      	mov	r0, ip
 8001814:	4082      	lsls	r2, r0
 8001816:	40cb      	lsrs	r3, r1
 8001818:	1e50      	subs	r0, r2, #1
 800181a:	4182      	sbcs	r2, r0
 800181c:	1af6      	subs	r6, r6, r3
 800181e:	4317      	orrs	r7, r2
 8001820:	464b      	mov	r3, r9
 8001822:	1bdf      	subs	r7, r3, r7
 8001824:	45b9      	cmp	r9, r7
 8001826:	4180      	sbcs	r0, r0
 8001828:	4240      	negs	r0, r0
 800182a:	1a36      	subs	r6, r6, r0
 800182c:	0233      	lsls	r3, r6, #8
 800182e:	d400      	bmi.n	8001832 <__aeabi_dadd+0xaa>
 8001830:	e0ff      	b.n	8001a32 <__aeabi_dadd+0x2aa>
 8001832:	0276      	lsls	r6, r6, #9
 8001834:	0a76      	lsrs	r6, r6, #9
 8001836:	2e00      	cmp	r6, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0xb4>
 800183a:	e13c      	b.n	8001ab6 <__aeabi_dadd+0x32e>
 800183c:	0030      	movs	r0, r6
 800183e:	f001 ff43 	bl	80036c8 <__clzsi2>
 8001842:	0003      	movs	r3, r0
 8001844:	3b08      	subs	r3, #8
 8001846:	2120      	movs	r1, #32
 8001848:	0038      	movs	r0, r7
 800184a:	1aca      	subs	r2, r1, r3
 800184c:	40d0      	lsrs	r0, r2
 800184e:	409e      	lsls	r6, r3
 8001850:	0002      	movs	r2, r0
 8001852:	409f      	lsls	r7, r3
 8001854:	4332      	orrs	r2, r6
 8001856:	429c      	cmp	r4, r3
 8001858:	dd00      	ble.n	800185c <__aeabi_dadd+0xd4>
 800185a:	e1a6      	b.n	8001baa <__aeabi_dadd+0x422>
 800185c:	1b18      	subs	r0, r3, r4
 800185e:	3001      	adds	r0, #1
 8001860:	1a09      	subs	r1, r1, r0
 8001862:	003e      	movs	r6, r7
 8001864:	408f      	lsls	r7, r1
 8001866:	40c6      	lsrs	r6, r0
 8001868:	1e7b      	subs	r3, r7, #1
 800186a:	419f      	sbcs	r7, r3
 800186c:	0013      	movs	r3, r2
 800186e:	408b      	lsls	r3, r1
 8001870:	4337      	orrs	r7, r6
 8001872:	431f      	orrs	r7, r3
 8001874:	40c2      	lsrs	r2, r0
 8001876:	003b      	movs	r3, r7
 8001878:	0016      	movs	r6, r2
 800187a:	2400      	movs	r4, #0
 800187c:	4313      	orrs	r3, r2
 800187e:	d100      	bne.n	8001882 <__aeabi_dadd+0xfa>
 8001880:	e1df      	b.n	8001c42 <__aeabi_dadd+0x4ba>
 8001882:	077b      	lsls	r3, r7, #29
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x100>
 8001886:	e332      	b.n	8001eee <__aeabi_dadd+0x766>
 8001888:	230f      	movs	r3, #15
 800188a:	003a      	movs	r2, r7
 800188c:	403b      	ands	r3, r7
 800188e:	2b04      	cmp	r3, #4
 8001890:	d004      	beq.n	800189c <__aeabi_dadd+0x114>
 8001892:	1d3a      	adds	r2, r7, #4
 8001894:	42ba      	cmp	r2, r7
 8001896:	41bf      	sbcs	r7, r7
 8001898:	427f      	negs	r7, r7
 800189a:	19f6      	adds	r6, r6, r7
 800189c:	0233      	lsls	r3, r6, #8
 800189e:	d400      	bmi.n	80018a2 <__aeabi_dadd+0x11a>
 80018a0:	e323      	b.n	8001eea <__aeabi_dadd+0x762>
 80018a2:	4b9c      	ldr	r3, [pc, #624]	@ (8001b14 <__aeabi_dadd+0x38c>)
 80018a4:	3401      	adds	r4, #1
 80018a6:	429c      	cmp	r4, r3
 80018a8:	d100      	bne.n	80018ac <__aeabi_dadd+0x124>
 80018aa:	e0b4      	b.n	8001a16 <__aeabi_dadd+0x28e>
 80018ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001b18 <__aeabi_dadd+0x390>)
 80018ae:	0564      	lsls	r4, r4, #21
 80018b0:	401e      	ands	r6, r3
 80018b2:	0d64      	lsrs	r4, r4, #21
 80018b4:	0777      	lsls	r7, r6, #29
 80018b6:	08d2      	lsrs	r2, r2, #3
 80018b8:	0276      	lsls	r6, r6, #9
 80018ba:	4317      	orrs	r7, r2
 80018bc:	0b36      	lsrs	r6, r6, #12
 80018be:	e0ac      	b.n	8001a1a <__aeabi_dadd+0x292>
 80018c0:	2900      	cmp	r1, #0
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x13e>
 80018c4:	e07e      	b.n	80019c4 <__aeabi_dadd+0x23c>
 80018c6:	4641      	mov	r1, r8
 80018c8:	1b09      	subs	r1, r1, r4
 80018ca:	2c00      	cmp	r4, #0
 80018cc:	d000      	beq.n	80018d0 <__aeabi_dadd+0x148>
 80018ce:	e160      	b.n	8001b92 <__aeabi_dadd+0x40a>
 80018d0:	0034      	movs	r4, r6
 80018d2:	4648      	mov	r0, r9
 80018d4:	4304      	orrs	r4, r0
 80018d6:	d100      	bne.n	80018da <__aeabi_dadd+0x152>
 80018d8:	e1c9      	b.n	8001c6e <__aeabi_dadd+0x4e6>
 80018da:	1e4c      	subs	r4, r1, #1
 80018dc:	2901      	cmp	r1, #1
 80018de:	d100      	bne.n	80018e2 <__aeabi_dadd+0x15a>
 80018e0:	e22e      	b.n	8001d40 <__aeabi_dadd+0x5b8>
 80018e2:	4d8c      	ldr	r5, [pc, #560]	@ (8001b14 <__aeabi_dadd+0x38c>)
 80018e4:	42a9      	cmp	r1, r5
 80018e6:	d100      	bne.n	80018ea <__aeabi_dadd+0x162>
 80018e8:	e224      	b.n	8001d34 <__aeabi_dadd+0x5ac>
 80018ea:	2701      	movs	r7, #1
 80018ec:	2c38      	cmp	r4, #56	@ 0x38
 80018ee:	dc11      	bgt.n	8001914 <__aeabi_dadd+0x18c>
 80018f0:	0021      	movs	r1, r4
 80018f2:	291f      	cmp	r1, #31
 80018f4:	dd00      	ble.n	80018f8 <__aeabi_dadd+0x170>
 80018f6:	e20b      	b.n	8001d10 <__aeabi_dadd+0x588>
 80018f8:	2420      	movs	r4, #32
 80018fa:	0037      	movs	r7, r6
 80018fc:	4648      	mov	r0, r9
 80018fe:	1a64      	subs	r4, r4, r1
 8001900:	40a7      	lsls	r7, r4
 8001902:	40c8      	lsrs	r0, r1
 8001904:	4307      	orrs	r7, r0
 8001906:	4648      	mov	r0, r9
 8001908:	40a0      	lsls	r0, r4
 800190a:	40ce      	lsrs	r6, r1
 800190c:	1e44      	subs	r4, r0, #1
 800190e:	41a0      	sbcs	r0, r4
 8001910:	1b9b      	subs	r3, r3, r6
 8001912:	4307      	orrs	r7, r0
 8001914:	1bd7      	subs	r7, r2, r7
 8001916:	42ba      	cmp	r2, r7
 8001918:	4192      	sbcs	r2, r2
 800191a:	4252      	negs	r2, r2
 800191c:	4665      	mov	r5, ip
 800191e:	4644      	mov	r4, r8
 8001920:	1a9e      	subs	r6, r3, r2
 8001922:	e783      	b.n	800182c <__aeabi_dadd+0xa4>
 8001924:	2900      	cmp	r1, #0
 8001926:	dc00      	bgt.n	800192a <__aeabi_dadd+0x1a2>
 8001928:	e09c      	b.n	8001a64 <__aeabi_dadd+0x2dc>
 800192a:	4647      	mov	r7, r8
 800192c:	2f00      	cmp	r7, #0
 800192e:	d167      	bne.n	8001a00 <__aeabi_dadd+0x278>
 8001930:	001f      	movs	r7, r3
 8001932:	4317      	orrs	r7, r2
 8001934:	d100      	bne.n	8001938 <__aeabi_dadd+0x1b0>
 8001936:	e0e4      	b.n	8001b02 <__aeabi_dadd+0x37a>
 8001938:	1e48      	subs	r0, r1, #1
 800193a:	2901      	cmp	r1, #1
 800193c:	d100      	bne.n	8001940 <__aeabi_dadd+0x1b8>
 800193e:	e19b      	b.n	8001c78 <__aeabi_dadd+0x4f0>
 8001940:	4f74      	ldr	r7, [pc, #464]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001942:	42b9      	cmp	r1, r7
 8001944:	d100      	bne.n	8001948 <__aeabi_dadd+0x1c0>
 8001946:	e0eb      	b.n	8001b20 <__aeabi_dadd+0x398>
 8001948:	2701      	movs	r7, #1
 800194a:	0001      	movs	r1, r0
 800194c:	2838      	cmp	r0, #56	@ 0x38
 800194e:	dc11      	bgt.n	8001974 <__aeabi_dadd+0x1ec>
 8001950:	291f      	cmp	r1, #31
 8001952:	dd00      	ble.n	8001956 <__aeabi_dadd+0x1ce>
 8001954:	e1c7      	b.n	8001ce6 <__aeabi_dadd+0x55e>
 8001956:	2720      	movs	r7, #32
 8001958:	1a78      	subs	r0, r7, r1
 800195a:	001f      	movs	r7, r3
 800195c:	4684      	mov	ip, r0
 800195e:	4087      	lsls	r7, r0
 8001960:	0010      	movs	r0, r2
 8001962:	40c8      	lsrs	r0, r1
 8001964:	4307      	orrs	r7, r0
 8001966:	4660      	mov	r0, ip
 8001968:	4082      	lsls	r2, r0
 800196a:	40cb      	lsrs	r3, r1
 800196c:	1e50      	subs	r0, r2, #1
 800196e:	4182      	sbcs	r2, r0
 8001970:	18f6      	adds	r6, r6, r3
 8001972:	4317      	orrs	r7, r2
 8001974:	444f      	add	r7, r9
 8001976:	454f      	cmp	r7, r9
 8001978:	4180      	sbcs	r0, r0
 800197a:	4240      	negs	r0, r0
 800197c:	1836      	adds	r6, r6, r0
 800197e:	0233      	lsls	r3, r6, #8
 8001980:	d557      	bpl.n	8001a32 <__aeabi_dadd+0x2aa>
 8001982:	4b64      	ldr	r3, [pc, #400]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001984:	3401      	adds	r4, #1
 8001986:	429c      	cmp	r4, r3
 8001988:	d045      	beq.n	8001a16 <__aeabi_dadd+0x28e>
 800198a:	2101      	movs	r1, #1
 800198c:	4b62      	ldr	r3, [pc, #392]	@ (8001b18 <__aeabi_dadd+0x390>)
 800198e:	087a      	lsrs	r2, r7, #1
 8001990:	401e      	ands	r6, r3
 8001992:	4039      	ands	r1, r7
 8001994:	430a      	orrs	r2, r1
 8001996:	07f7      	lsls	r7, r6, #31
 8001998:	4317      	orrs	r7, r2
 800199a:	0876      	lsrs	r6, r6, #1
 800199c:	e771      	b.n	8001882 <__aeabi_dadd+0xfa>
 800199e:	001f      	movs	r7, r3
 80019a0:	4317      	orrs	r7, r2
 80019a2:	d100      	bne.n	80019a6 <__aeabi_dadd+0x21e>
 80019a4:	e0ad      	b.n	8001b02 <__aeabi_dadd+0x37a>
 80019a6:	1e4f      	subs	r7, r1, #1
 80019a8:	46bc      	mov	ip, r7
 80019aa:	2901      	cmp	r1, #1
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dadd+0x228>
 80019ae:	e182      	b.n	8001cb6 <__aeabi_dadd+0x52e>
 80019b0:	4f58      	ldr	r7, [pc, #352]	@ (8001b14 <__aeabi_dadd+0x38c>)
 80019b2:	42b9      	cmp	r1, r7
 80019b4:	d100      	bne.n	80019b8 <__aeabi_dadd+0x230>
 80019b6:	e190      	b.n	8001cda <__aeabi_dadd+0x552>
 80019b8:	4661      	mov	r1, ip
 80019ba:	2701      	movs	r7, #1
 80019bc:	2938      	cmp	r1, #56	@ 0x38
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dadd+0x23a>
 80019c0:	e72e      	b.n	8001820 <__aeabi_dadd+0x98>
 80019c2:	e718      	b.n	80017f6 <__aeabi_dadd+0x6e>
 80019c4:	4f55      	ldr	r7, [pc, #340]	@ (8001b1c <__aeabi_dadd+0x394>)
 80019c6:	1c61      	adds	r1, r4, #1
 80019c8:	4239      	tst	r1, r7
 80019ca:	d000      	beq.n	80019ce <__aeabi_dadd+0x246>
 80019cc:	e0d0      	b.n	8001b70 <__aeabi_dadd+0x3e8>
 80019ce:	0031      	movs	r1, r6
 80019d0:	4648      	mov	r0, r9
 80019d2:	001f      	movs	r7, r3
 80019d4:	4301      	orrs	r1, r0
 80019d6:	4317      	orrs	r7, r2
 80019d8:	2c00      	cmp	r4, #0
 80019da:	d000      	beq.n	80019de <__aeabi_dadd+0x256>
 80019dc:	e13d      	b.n	8001c5a <__aeabi_dadd+0x4d2>
 80019de:	2900      	cmp	r1, #0
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dadd+0x25c>
 80019e2:	e1bc      	b.n	8001d5e <__aeabi_dadd+0x5d6>
 80019e4:	2f00      	cmp	r7, #0
 80019e6:	d000      	beq.n	80019ea <__aeabi_dadd+0x262>
 80019e8:	e1bf      	b.n	8001d6a <__aeabi_dadd+0x5e2>
 80019ea:	464b      	mov	r3, r9
 80019ec:	2100      	movs	r1, #0
 80019ee:	08d8      	lsrs	r0, r3, #3
 80019f0:	0777      	lsls	r7, r6, #29
 80019f2:	4307      	orrs	r7, r0
 80019f4:	08f0      	lsrs	r0, r6, #3
 80019f6:	0306      	lsls	r6, r0, #12
 80019f8:	054c      	lsls	r4, r1, #21
 80019fa:	0b36      	lsrs	r6, r6, #12
 80019fc:	0d64      	lsrs	r4, r4, #21
 80019fe:	e00c      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001a00:	4f44      	ldr	r7, [pc, #272]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001a02:	42bc      	cmp	r4, r7
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0x280>
 8001a06:	e08b      	b.n	8001b20 <__aeabi_dadd+0x398>
 8001a08:	2701      	movs	r7, #1
 8001a0a:	2938      	cmp	r1, #56	@ 0x38
 8001a0c:	dcb2      	bgt.n	8001974 <__aeabi_dadd+0x1ec>
 8001a0e:	2780      	movs	r7, #128	@ 0x80
 8001a10:	043f      	lsls	r7, r7, #16
 8001a12:	433b      	orrs	r3, r7
 8001a14:	e79c      	b.n	8001950 <__aeabi_dadd+0x1c8>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2700      	movs	r7, #0
 8001a1a:	0524      	lsls	r4, r4, #20
 8001a1c:	4334      	orrs	r4, r6
 8001a1e:	07ed      	lsls	r5, r5, #31
 8001a20:	432c      	orrs	r4, r5
 8001a22:	0038      	movs	r0, r7
 8001a24:	0021      	movs	r1, r4
 8001a26:	b002      	add	sp, #8
 8001a28:	bce0      	pop	{r5, r6, r7}
 8001a2a:	46ba      	mov	sl, r7
 8001a2c:	46b1      	mov	r9, r6
 8001a2e:	46a8      	mov	r8, r5
 8001a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a32:	077b      	lsls	r3, r7, #29
 8001a34:	d004      	beq.n	8001a40 <__aeabi_dadd+0x2b8>
 8001a36:	230f      	movs	r3, #15
 8001a38:	403b      	ands	r3, r7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d000      	beq.n	8001a40 <__aeabi_dadd+0x2b8>
 8001a3e:	e728      	b.n	8001892 <__aeabi_dadd+0x10a>
 8001a40:	08f8      	lsrs	r0, r7, #3
 8001a42:	4b34      	ldr	r3, [pc, #208]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001a44:	0777      	lsls	r7, r6, #29
 8001a46:	4307      	orrs	r7, r0
 8001a48:	08f0      	lsrs	r0, r6, #3
 8001a4a:	429c      	cmp	r4, r3
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_dadd+0x2c8>
 8001a4e:	e24a      	b.n	8001ee6 <__aeabi_dadd+0x75e>
 8001a50:	003b      	movs	r3, r7
 8001a52:	4303      	orrs	r3, r0
 8001a54:	d059      	beq.n	8001b0a <__aeabi_dadd+0x382>
 8001a56:	2680      	movs	r6, #128	@ 0x80
 8001a58:	0336      	lsls	r6, r6, #12
 8001a5a:	4306      	orrs	r6, r0
 8001a5c:	0336      	lsls	r6, r6, #12
 8001a5e:	4c2d      	ldr	r4, [pc, #180]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001a60:	0b36      	lsrs	r6, r6, #12
 8001a62:	e7da      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001a64:	2900      	cmp	r1, #0
 8001a66:	d061      	beq.n	8001b2c <__aeabi_dadd+0x3a4>
 8001a68:	4641      	mov	r1, r8
 8001a6a:	1b09      	subs	r1, r1, r4
 8001a6c:	2c00      	cmp	r4, #0
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dadd+0x2ea>
 8001a70:	e0b9      	b.n	8001be6 <__aeabi_dadd+0x45e>
 8001a72:	4c28      	ldr	r4, [pc, #160]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001a74:	45a0      	cmp	r8, r4
 8001a76:	d100      	bne.n	8001a7a <__aeabi_dadd+0x2f2>
 8001a78:	e1a5      	b.n	8001dc6 <__aeabi_dadd+0x63e>
 8001a7a:	2701      	movs	r7, #1
 8001a7c:	2938      	cmp	r1, #56	@ 0x38
 8001a7e:	dc13      	bgt.n	8001aa8 <__aeabi_dadd+0x320>
 8001a80:	2480      	movs	r4, #128	@ 0x80
 8001a82:	0424      	lsls	r4, r4, #16
 8001a84:	4326      	orrs	r6, r4
 8001a86:	291f      	cmp	r1, #31
 8001a88:	dd00      	ble.n	8001a8c <__aeabi_dadd+0x304>
 8001a8a:	e1c8      	b.n	8001e1e <__aeabi_dadd+0x696>
 8001a8c:	2420      	movs	r4, #32
 8001a8e:	0037      	movs	r7, r6
 8001a90:	4648      	mov	r0, r9
 8001a92:	1a64      	subs	r4, r4, r1
 8001a94:	40a7      	lsls	r7, r4
 8001a96:	40c8      	lsrs	r0, r1
 8001a98:	4307      	orrs	r7, r0
 8001a9a:	4648      	mov	r0, r9
 8001a9c:	40a0      	lsls	r0, r4
 8001a9e:	40ce      	lsrs	r6, r1
 8001aa0:	1e44      	subs	r4, r0, #1
 8001aa2:	41a0      	sbcs	r0, r4
 8001aa4:	199b      	adds	r3, r3, r6
 8001aa6:	4307      	orrs	r7, r0
 8001aa8:	18bf      	adds	r7, r7, r2
 8001aaa:	4297      	cmp	r7, r2
 8001aac:	4192      	sbcs	r2, r2
 8001aae:	4252      	negs	r2, r2
 8001ab0:	4644      	mov	r4, r8
 8001ab2:	18d6      	adds	r6, r2, r3
 8001ab4:	e763      	b.n	800197e <__aeabi_dadd+0x1f6>
 8001ab6:	0038      	movs	r0, r7
 8001ab8:	f001 fe06 	bl	80036c8 <__clzsi2>
 8001abc:	0003      	movs	r3, r0
 8001abe:	3318      	adds	r3, #24
 8001ac0:	2b1f      	cmp	r3, #31
 8001ac2:	dc00      	bgt.n	8001ac6 <__aeabi_dadd+0x33e>
 8001ac4:	e6bf      	b.n	8001846 <__aeabi_dadd+0xbe>
 8001ac6:	003a      	movs	r2, r7
 8001ac8:	3808      	subs	r0, #8
 8001aca:	4082      	lsls	r2, r0
 8001acc:	429c      	cmp	r4, r3
 8001ace:	dd00      	ble.n	8001ad2 <__aeabi_dadd+0x34a>
 8001ad0:	e083      	b.n	8001bda <__aeabi_dadd+0x452>
 8001ad2:	1b1b      	subs	r3, r3, r4
 8001ad4:	1c58      	adds	r0, r3, #1
 8001ad6:	281f      	cmp	r0, #31
 8001ad8:	dc00      	bgt.n	8001adc <__aeabi_dadd+0x354>
 8001ada:	e1b4      	b.n	8001e46 <__aeabi_dadd+0x6be>
 8001adc:	0017      	movs	r7, r2
 8001ade:	3b1f      	subs	r3, #31
 8001ae0:	40df      	lsrs	r7, r3
 8001ae2:	2820      	cmp	r0, #32
 8001ae4:	d005      	beq.n	8001af2 <__aeabi_dadd+0x36a>
 8001ae6:	2340      	movs	r3, #64	@ 0x40
 8001ae8:	1a1b      	subs	r3, r3, r0
 8001aea:	409a      	lsls	r2, r3
 8001aec:	1e53      	subs	r3, r2, #1
 8001aee:	419a      	sbcs	r2, r3
 8001af0:	4317      	orrs	r7, r2
 8001af2:	2400      	movs	r4, #0
 8001af4:	2f00      	cmp	r7, #0
 8001af6:	d00a      	beq.n	8001b0e <__aeabi_dadd+0x386>
 8001af8:	077b      	lsls	r3, r7, #29
 8001afa:	d000      	beq.n	8001afe <__aeabi_dadd+0x376>
 8001afc:	e6c4      	b.n	8001888 <__aeabi_dadd+0x100>
 8001afe:	0026      	movs	r6, r4
 8001b00:	e79e      	b.n	8001a40 <__aeabi_dadd+0x2b8>
 8001b02:	464b      	mov	r3, r9
 8001b04:	000c      	movs	r4, r1
 8001b06:	08d8      	lsrs	r0, r3, #3
 8001b08:	e79b      	b.n	8001a42 <__aeabi_dadd+0x2ba>
 8001b0a:	2700      	movs	r7, #0
 8001b0c:	4c01      	ldr	r4, [pc, #4]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001b0e:	2600      	movs	r6, #0
 8001b10:	e783      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	000007ff 	.word	0x000007ff
 8001b18:	ff7fffff 	.word	0xff7fffff
 8001b1c:	000007fe 	.word	0x000007fe
 8001b20:	464b      	mov	r3, r9
 8001b22:	0777      	lsls	r7, r6, #29
 8001b24:	08d8      	lsrs	r0, r3, #3
 8001b26:	4307      	orrs	r7, r0
 8001b28:	08f0      	lsrs	r0, r6, #3
 8001b2a:	e791      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001b2c:	4fcd      	ldr	r7, [pc, #820]	@ (8001e64 <__aeabi_dadd+0x6dc>)
 8001b2e:	1c61      	adds	r1, r4, #1
 8001b30:	4239      	tst	r1, r7
 8001b32:	d16b      	bne.n	8001c0c <__aeabi_dadd+0x484>
 8001b34:	0031      	movs	r1, r6
 8001b36:	4648      	mov	r0, r9
 8001b38:	4301      	orrs	r1, r0
 8001b3a:	2c00      	cmp	r4, #0
 8001b3c:	d000      	beq.n	8001b40 <__aeabi_dadd+0x3b8>
 8001b3e:	e14b      	b.n	8001dd8 <__aeabi_dadd+0x650>
 8001b40:	001f      	movs	r7, r3
 8001b42:	4317      	orrs	r7, r2
 8001b44:	2900      	cmp	r1, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dadd+0x3c2>
 8001b48:	e181      	b.n	8001e4e <__aeabi_dadd+0x6c6>
 8001b4a:	2f00      	cmp	r7, #0
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_dadd+0x3c8>
 8001b4e:	e74c      	b.n	80019ea <__aeabi_dadd+0x262>
 8001b50:	444a      	add	r2, r9
 8001b52:	454a      	cmp	r2, r9
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	18f6      	adds	r6, r6, r3
 8001b58:	4240      	negs	r0, r0
 8001b5a:	1836      	adds	r6, r6, r0
 8001b5c:	0233      	lsls	r3, r6, #8
 8001b5e:	d500      	bpl.n	8001b62 <__aeabi_dadd+0x3da>
 8001b60:	e1b0      	b.n	8001ec4 <__aeabi_dadd+0x73c>
 8001b62:	0017      	movs	r7, r2
 8001b64:	4691      	mov	r9, r2
 8001b66:	4337      	orrs	r7, r6
 8001b68:	d000      	beq.n	8001b6c <__aeabi_dadd+0x3e4>
 8001b6a:	e73e      	b.n	80019ea <__aeabi_dadd+0x262>
 8001b6c:	2600      	movs	r6, #0
 8001b6e:	e754      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001b70:	4649      	mov	r1, r9
 8001b72:	1a89      	subs	r1, r1, r2
 8001b74:	4688      	mov	r8, r1
 8001b76:	45c1      	cmp	r9, r8
 8001b78:	41bf      	sbcs	r7, r7
 8001b7a:	1af1      	subs	r1, r6, r3
 8001b7c:	427f      	negs	r7, r7
 8001b7e:	1bc9      	subs	r1, r1, r7
 8001b80:	020f      	lsls	r7, r1, #8
 8001b82:	d461      	bmi.n	8001c48 <__aeabi_dadd+0x4c0>
 8001b84:	4647      	mov	r7, r8
 8001b86:	430f      	orrs	r7, r1
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dadd+0x404>
 8001b8a:	e0bd      	b.n	8001d08 <__aeabi_dadd+0x580>
 8001b8c:	000e      	movs	r6, r1
 8001b8e:	4647      	mov	r7, r8
 8001b90:	e651      	b.n	8001836 <__aeabi_dadd+0xae>
 8001b92:	4cb5      	ldr	r4, [pc, #724]	@ (8001e68 <__aeabi_dadd+0x6e0>)
 8001b94:	45a0      	cmp	r8, r4
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x412>
 8001b98:	e100      	b.n	8001d9c <__aeabi_dadd+0x614>
 8001b9a:	2701      	movs	r7, #1
 8001b9c:	2938      	cmp	r1, #56	@ 0x38
 8001b9e:	dd00      	ble.n	8001ba2 <__aeabi_dadd+0x41a>
 8001ba0:	e6b8      	b.n	8001914 <__aeabi_dadd+0x18c>
 8001ba2:	2480      	movs	r4, #128	@ 0x80
 8001ba4:	0424      	lsls	r4, r4, #16
 8001ba6:	4326      	orrs	r6, r4
 8001ba8:	e6a3      	b.n	80018f2 <__aeabi_dadd+0x16a>
 8001baa:	4eb0      	ldr	r6, [pc, #704]	@ (8001e6c <__aeabi_dadd+0x6e4>)
 8001bac:	1ae4      	subs	r4, r4, r3
 8001bae:	4016      	ands	r6, r2
 8001bb0:	077b      	lsls	r3, r7, #29
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x42e>
 8001bb4:	e73f      	b.n	8001a36 <__aeabi_dadd+0x2ae>
 8001bb6:	e743      	b.n	8001a40 <__aeabi_dadd+0x2b8>
 8001bb8:	000f      	movs	r7, r1
 8001bba:	0018      	movs	r0, r3
 8001bbc:	3f20      	subs	r7, #32
 8001bbe:	40f8      	lsrs	r0, r7
 8001bc0:	4684      	mov	ip, r0
 8001bc2:	2920      	cmp	r1, #32
 8001bc4:	d003      	beq.n	8001bce <__aeabi_dadd+0x446>
 8001bc6:	2740      	movs	r7, #64	@ 0x40
 8001bc8:	1a79      	subs	r1, r7, r1
 8001bca:	408b      	lsls	r3, r1
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	1e53      	subs	r3, r2, #1
 8001bd0:	419a      	sbcs	r2, r3
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	0017      	movs	r7, r2
 8001bd6:	431f      	orrs	r7, r3
 8001bd8:	e622      	b.n	8001820 <__aeabi_dadd+0x98>
 8001bda:	48a4      	ldr	r0, [pc, #656]	@ (8001e6c <__aeabi_dadd+0x6e4>)
 8001bdc:	1ae1      	subs	r1, r4, r3
 8001bde:	4010      	ands	r0, r2
 8001be0:	0747      	lsls	r7, r0, #29
 8001be2:	08c0      	lsrs	r0, r0, #3
 8001be4:	e707      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001be6:	0034      	movs	r4, r6
 8001be8:	4648      	mov	r0, r9
 8001bea:	4304      	orrs	r4, r0
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_dadd+0x468>
 8001bee:	e0fa      	b.n	8001de6 <__aeabi_dadd+0x65e>
 8001bf0:	1e4c      	subs	r4, r1, #1
 8001bf2:	2901      	cmp	r1, #1
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dadd+0x470>
 8001bf6:	e0d7      	b.n	8001da8 <__aeabi_dadd+0x620>
 8001bf8:	4f9b      	ldr	r7, [pc, #620]	@ (8001e68 <__aeabi_dadd+0x6e0>)
 8001bfa:	42b9      	cmp	r1, r7
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dadd+0x478>
 8001bfe:	e0e2      	b.n	8001dc6 <__aeabi_dadd+0x63e>
 8001c00:	2701      	movs	r7, #1
 8001c02:	2c38      	cmp	r4, #56	@ 0x38
 8001c04:	dd00      	ble.n	8001c08 <__aeabi_dadd+0x480>
 8001c06:	e74f      	b.n	8001aa8 <__aeabi_dadd+0x320>
 8001c08:	0021      	movs	r1, r4
 8001c0a:	e73c      	b.n	8001a86 <__aeabi_dadd+0x2fe>
 8001c0c:	4c96      	ldr	r4, [pc, #600]	@ (8001e68 <__aeabi_dadd+0x6e0>)
 8001c0e:	42a1      	cmp	r1, r4
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dadd+0x48c>
 8001c12:	e0dd      	b.n	8001dd0 <__aeabi_dadd+0x648>
 8001c14:	444a      	add	r2, r9
 8001c16:	454a      	cmp	r2, r9
 8001c18:	4180      	sbcs	r0, r0
 8001c1a:	18f3      	adds	r3, r6, r3
 8001c1c:	4240      	negs	r0, r0
 8001c1e:	1818      	adds	r0, r3, r0
 8001c20:	07c7      	lsls	r7, r0, #31
 8001c22:	0852      	lsrs	r2, r2, #1
 8001c24:	4317      	orrs	r7, r2
 8001c26:	0846      	lsrs	r6, r0, #1
 8001c28:	0752      	lsls	r2, r2, #29
 8001c2a:	d005      	beq.n	8001c38 <__aeabi_dadd+0x4b0>
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	000c      	movs	r4, r1
 8001c30:	403a      	ands	r2, r7
 8001c32:	2a04      	cmp	r2, #4
 8001c34:	d000      	beq.n	8001c38 <__aeabi_dadd+0x4b0>
 8001c36:	e62c      	b.n	8001892 <__aeabi_dadd+0x10a>
 8001c38:	0776      	lsls	r6, r6, #29
 8001c3a:	08ff      	lsrs	r7, r7, #3
 8001c3c:	4337      	orrs	r7, r6
 8001c3e:	0900      	lsrs	r0, r0, #4
 8001c40:	e6d9      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001c42:	2700      	movs	r7, #0
 8001c44:	2600      	movs	r6, #0
 8001c46:	e6e8      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001c48:	4649      	mov	r1, r9
 8001c4a:	1a57      	subs	r7, r2, r1
 8001c4c:	42ba      	cmp	r2, r7
 8001c4e:	4192      	sbcs	r2, r2
 8001c50:	1b9e      	subs	r6, r3, r6
 8001c52:	4252      	negs	r2, r2
 8001c54:	4665      	mov	r5, ip
 8001c56:	1ab6      	subs	r6, r6, r2
 8001c58:	e5ed      	b.n	8001836 <__aeabi_dadd+0xae>
 8001c5a:	2900      	cmp	r1, #0
 8001c5c:	d000      	beq.n	8001c60 <__aeabi_dadd+0x4d8>
 8001c5e:	e0c6      	b.n	8001dee <__aeabi_dadd+0x666>
 8001c60:	2f00      	cmp	r7, #0
 8001c62:	d167      	bne.n	8001d34 <__aeabi_dadd+0x5ac>
 8001c64:	2680      	movs	r6, #128	@ 0x80
 8001c66:	2500      	movs	r5, #0
 8001c68:	4c7f      	ldr	r4, [pc, #508]	@ (8001e68 <__aeabi_dadd+0x6e0>)
 8001c6a:	0336      	lsls	r6, r6, #12
 8001c6c:	e6d5      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001c6e:	4665      	mov	r5, ip
 8001c70:	000c      	movs	r4, r1
 8001c72:	001e      	movs	r6, r3
 8001c74:	08d0      	lsrs	r0, r2, #3
 8001c76:	e6e4      	b.n	8001a42 <__aeabi_dadd+0x2ba>
 8001c78:	444a      	add	r2, r9
 8001c7a:	454a      	cmp	r2, r9
 8001c7c:	4180      	sbcs	r0, r0
 8001c7e:	18f3      	adds	r3, r6, r3
 8001c80:	4240      	negs	r0, r0
 8001c82:	1818      	adds	r0, r3, r0
 8001c84:	0011      	movs	r1, r2
 8001c86:	0203      	lsls	r3, r0, #8
 8001c88:	d400      	bmi.n	8001c8c <__aeabi_dadd+0x504>
 8001c8a:	e096      	b.n	8001dba <__aeabi_dadd+0x632>
 8001c8c:	4b77      	ldr	r3, [pc, #476]	@ (8001e6c <__aeabi_dadd+0x6e4>)
 8001c8e:	0849      	lsrs	r1, r1, #1
 8001c90:	4018      	ands	r0, r3
 8001c92:	07c3      	lsls	r3, r0, #31
 8001c94:	430b      	orrs	r3, r1
 8001c96:	0844      	lsrs	r4, r0, #1
 8001c98:	0749      	lsls	r1, r1, #29
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dadd+0x516>
 8001c9c:	e129      	b.n	8001ef2 <__aeabi_dadd+0x76a>
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	2a04      	cmp	r2, #4
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dadd+0x520>
 8001ca6:	e0ea      	b.n	8001e7e <__aeabi_dadd+0x6f6>
 8001ca8:	1d1f      	adds	r7, r3, #4
 8001caa:	429f      	cmp	r7, r3
 8001cac:	41b6      	sbcs	r6, r6
 8001cae:	4276      	negs	r6, r6
 8001cb0:	1936      	adds	r6, r6, r4
 8001cb2:	2402      	movs	r4, #2
 8001cb4:	e6c4      	b.n	8001a40 <__aeabi_dadd+0x2b8>
 8001cb6:	4649      	mov	r1, r9
 8001cb8:	1a8f      	subs	r7, r1, r2
 8001cba:	45b9      	cmp	r9, r7
 8001cbc:	4180      	sbcs	r0, r0
 8001cbe:	1af6      	subs	r6, r6, r3
 8001cc0:	4240      	negs	r0, r0
 8001cc2:	1a36      	subs	r6, r6, r0
 8001cc4:	0233      	lsls	r3, r6, #8
 8001cc6:	d406      	bmi.n	8001cd6 <__aeabi_dadd+0x54e>
 8001cc8:	0773      	lsls	r3, r6, #29
 8001cca:	08ff      	lsrs	r7, r7, #3
 8001ccc:	2101      	movs	r1, #1
 8001cce:	431f      	orrs	r7, r3
 8001cd0:	08f0      	lsrs	r0, r6, #3
 8001cd2:	e690      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001cd4:	4665      	mov	r5, ip
 8001cd6:	2401      	movs	r4, #1
 8001cd8:	e5ab      	b.n	8001832 <__aeabi_dadd+0xaa>
 8001cda:	464b      	mov	r3, r9
 8001cdc:	0777      	lsls	r7, r6, #29
 8001cde:	08d8      	lsrs	r0, r3, #3
 8001ce0:	4307      	orrs	r7, r0
 8001ce2:	08f0      	lsrs	r0, r6, #3
 8001ce4:	e6b4      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001ce6:	000f      	movs	r7, r1
 8001ce8:	0018      	movs	r0, r3
 8001cea:	3f20      	subs	r7, #32
 8001cec:	40f8      	lsrs	r0, r7
 8001cee:	4684      	mov	ip, r0
 8001cf0:	2920      	cmp	r1, #32
 8001cf2:	d003      	beq.n	8001cfc <__aeabi_dadd+0x574>
 8001cf4:	2740      	movs	r7, #64	@ 0x40
 8001cf6:	1a79      	subs	r1, r7, r1
 8001cf8:	408b      	lsls	r3, r1
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	1e53      	subs	r3, r2, #1
 8001cfe:	419a      	sbcs	r2, r3
 8001d00:	4663      	mov	r3, ip
 8001d02:	0017      	movs	r7, r2
 8001d04:	431f      	orrs	r7, r3
 8001d06:	e635      	b.n	8001974 <__aeabi_dadd+0x1ec>
 8001d08:	2500      	movs	r5, #0
 8001d0a:	2400      	movs	r4, #0
 8001d0c:	2600      	movs	r6, #0
 8001d0e:	e684      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001d10:	000c      	movs	r4, r1
 8001d12:	0035      	movs	r5, r6
 8001d14:	3c20      	subs	r4, #32
 8001d16:	40e5      	lsrs	r5, r4
 8001d18:	2920      	cmp	r1, #32
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dadd+0x5a0>
 8001d1c:	2440      	movs	r4, #64	@ 0x40
 8001d1e:	1a61      	subs	r1, r4, r1
 8001d20:	408e      	lsls	r6, r1
 8001d22:	4649      	mov	r1, r9
 8001d24:	4331      	orrs	r1, r6
 8001d26:	4689      	mov	r9, r1
 8001d28:	4648      	mov	r0, r9
 8001d2a:	1e41      	subs	r1, r0, #1
 8001d2c:	4188      	sbcs	r0, r1
 8001d2e:	0007      	movs	r7, r0
 8001d30:	432f      	orrs	r7, r5
 8001d32:	e5ef      	b.n	8001914 <__aeabi_dadd+0x18c>
 8001d34:	08d2      	lsrs	r2, r2, #3
 8001d36:	075f      	lsls	r7, r3, #29
 8001d38:	4665      	mov	r5, ip
 8001d3a:	4317      	orrs	r7, r2
 8001d3c:	08d8      	lsrs	r0, r3, #3
 8001d3e:	e687      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001d40:	1a17      	subs	r7, r2, r0
 8001d42:	42ba      	cmp	r2, r7
 8001d44:	4192      	sbcs	r2, r2
 8001d46:	1b9e      	subs	r6, r3, r6
 8001d48:	4252      	negs	r2, r2
 8001d4a:	1ab6      	subs	r6, r6, r2
 8001d4c:	0233      	lsls	r3, r6, #8
 8001d4e:	d4c1      	bmi.n	8001cd4 <__aeabi_dadd+0x54c>
 8001d50:	0773      	lsls	r3, r6, #29
 8001d52:	08ff      	lsrs	r7, r7, #3
 8001d54:	4665      	mov	r5, ip
 8001d56:	2101      	movs	r1, #1
 8001d58:	431f      	orrs	r7, r3
 8001d5a:	08f0      	lsrs	r0, r6, #3
 8001d5c:	e64b      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001d5e:	2f00      	cmp	r7, #0
 8001d60:	d07b      	beq.n	8001e5a <__aeabi_dadd+0x6d2>
 8001d62:	4665      	mov	r5, ip
 8001d64:	001e      	movs	r6, r3
 8001d66:	4691      	mov	r9, r2
 8001d68:	e63f      	b.n	80019ea <__aeabi_dadd+0x262>
 8001d6a:	1a81      	subs	r1, r0, r2
 8001d6c:	4688      	mov	r8, r1
 8001d6e:	45c1      	cmp	r9, r8
 8001d70:	41a4      	sbcs	r4, r4
 8001d72:	1af1      	subs	r1, r6, r3
 8001d74:	4264      	negs	r4, r4
 8001d76:	1b09      	subs	r1, r1, r4
 8001d78:	2480      	movs	r4, #128	@ 0x80
 8001d7a:	0424      	lsls	r4, r4, #16
 8001d7c:	4221      	tst	r1, r4
 8001d7e:	d077      	beq.n	8001e70 <__aeabi_dadd+0x6e8>
 8001d80:	1a10      	subs	r0, r2, r0
 8001d82:	4282      	cmp	r2, r0
 8001d84:	4192      	sbcs	r2, r2
 8001d86:	0007      	movs	r7, r0
 8001d88:	1b9e      	subs	r6, r3, r6
 8001d8a:	4252      	negs	r2, r2
 8001d8c:	1ab6      	subs	r6, r6, r2
 8001d8e:	4337      	orrs	r7, r6
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x60c>
 8001d92:	e0a0      	b.n	8001ed6 <__aeabi_dadd+0x74e>
 8001d94:	4665      	mov	r5, ip
 8001d96:	2400      	movs	r4, #0
 8001d98:	2600      	movs	r6, #0
 8001d9a:	e63e      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001d9c:	075f      	lsls	r7, r3, #29
 8001d9e:	08d2      	lsrs	r2, r2, #3
 8001da0:	4665      	mov	r5, ip
 8001da2:	4317      	orrs	r7, r2
 8001da4:	08d8      	lsrs	r0, r3, #3
 8001da6:	e653      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001da8:	1881      	adds	r1, r0, r2
 8001daa:	4291      	cmp	r1, r2
 8001dac:	4192      	sbcs	r2, r2
 8001dae:	18f0      	adds	r0, r6, r3
 8001db0:	4252      	negs	r2, r2
 8001db2:	1880      	adds	r0, r0, r2
 8001db4:	0203      	lsls	r3, r0, #8
 8001db6:	d500      	bpl.n	8001dba <__aeabi_dadd+0x632>
 8001db8:	e768      	b.n	8001c8c <__aeabi_dadd+0x504>
 8001dba:	0747      	lsls	r7, r0, #29
 8001dbc:	08c9      	lsrs	r1, r1, #3
 8001dbe:	430f      	orrs	r7, r1
 8001dc0:	08c0      	lsrs	r0, r0, #3
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	e617      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001dc6:	08d2      	lsrs	r2, r2, #3
 8001dc8:	075f      	lsls	r7, r3, #29
 8001dca:	4317      	orrs	r7, r2
 8001dcc:	08d8      	lsrs	r0, r3, #3
 8001dce:	e63f      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001dd0:	000c      	movs	r4, r1
 8001dd2:	2600      	movs	r6, #0
 8001dd4:	2700      	movs	r7, #0
 8001dd6:	e620      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001dd8:	2900      	cmp	r1, #0
 8001dda:	d156      	bne.n	8001e8a <__aeabi_dadd+0x702>
 8001ddc:	075f      	lsls	r7, r3, #29
 8001dde:	08d2      	lsrs	r2, r2, #3
 8001de0:	4317      	orrs	r7, r2
 8001de2:	08d8      	lsrs	r0, r3, #3
 8001de4:	e634      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001de6:	000c      	movs	r4, r1
 8001de8:	001e      	movs	r6, r3
 8001dea:	08d0      	lsrs	r0, r2, #3
 8001dec:	e629      	b.n	8001a42 <__aeabi_dadd+0x2ba>
 8001dee:	08c1      	lsrs	r1, r0, #3
 8001df0:	0770      	lsls	r0, r6, #29
 8001df2:	4301      	orrs	r1, r0
 8001df4:	08f0      	lsrs	r0, r6, #3
 8001df6:	2f00      	cmp	r7, #0
 8001df8:	d062      	beq.n	8001ec0 <__aeabi_dadd+0x738>
 8001dfa:	2480      	movs	r4, #128	@ 0x80
 8001dfc:	0324      	lsls	r4, r4, #12
 8001dfe:	4220      	tst	r0, r4
 8001e00:	d007      	beq.n	8001e12 <__aeabi_dadd+0x68a>
 8001e02:	08de      	lsrs	r6, r3, #3
 8001e04:	4226      	tst	r6, r4
 8001e06:	d104      	bne.n	8001e12 <__aeabi_dadd+0x68a>
 8001e08:	4665      	mov	r5, ip
 8001e0a:	0030      	movs	r0, r6
 8001e0c:	08d1      	lsrs	r1, r2, #3
 8001e0e:	075b      	lsls	r3, r3, #29
 8001e10:	4319      	orrs	r1, r3
 8001e12:	0f4f      	lsrs	r7, r1, #29
 8001e14:	00c9      	lsls	r1, r1, #3
 8001e16:	08c9      	lsrs	r1, r1, #3
 8001e18:	077f      	lsls	r7, r7, #29
 8001e1a:	430f      	orrs	r7, r1
 8001e1c:	e618      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001e1e:	000c      	movs	r4, r1
 8001e20:	0030      	movs	r0, r6
 8001e22:	3c20      	subs	r4, #32
 8001e24:	40e0      	lsrs	r0, r4
 8001e26:	4684      	mov	ip, r0
 8001e28:	2920      	cmp	r1, #32
 8001e2a:	d005      	beq.n	8001e38 <__aeabi_dadd+0x6b0>
 8001e2c:	2440      	movs	r4, #64	@ 0x40
 8001e2e:	1a61      	subs	r1, r4, r1
 8001e30:	408e      	lsls	r6, r1
 8001e32:	4649      	mov	r1, r9
 8001e34:	4331      	orrs	r1, r6
 8001e36:	4689      	mov	r9, r1
 8001e38:	4648      	mov	r0, r9
 8001e3a:	1e41      	subs	r1, r0, #1
 8001e3c:	4188      	sbcs	r0, r1
 8001e3e:	4661      	mov	r1, ip
 8001e40:	0007      	movs	r7, r0
 8001e42:	430f      	orrs	r7, r1
 8001e44:	e630      	b.n	8001aa8 <__aeabi_dadd+0x320>
 8001e46:	2120      	movs	r1, #32
 8001e48:	2700      	movs	r7, #0
 8001e4a:	1a09      	subs	r1, r1, r0
 8001e4c:	e50e      	b.n	800186c <__aeabi_dadd+0xe4>
 8001e4e:	001e      	movs	r6, r3
 8001e50:	2f00      	cmp	r7, #0
 8001e52:	d000      	beq.n	8001e56 <__aeabi_dadd+0x6ce>
 8001e54:	e522      	b.n	800189c <__aeabi_dadd+0x114>
 8001e56:	2400      	movs	r4, #0
 8001e58:	e758      	b.n	8001d0c <__aeabi_dadd+0x584>
 8001e5a:	2500      	movs	r5, #0
 8001e5c:	2400      	movs	r4, #0
 8001e5e:	2600      	movs	r6, #0
 8001e60:	e5db      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	000007ff 	.word	0x000007ff
 8001e6c:	ff7fffff 	.word	0xff7fffff
 8001e70:	4647      	mov	r7, r8
 8001e72:	430f      	orrs	r7, r1
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dadd+0x6f0>
 8001e76:	e747      	b.n	8001d08 <__aeabi_dadd+0x580>
 8001e78:	000e      	movs	r6, r1
 8001e7a:	46c1      	mov	r9, r8
 8001e7c:	e5b5      	b.n	80019ea <__aeabi_dadd+0x262>
 8001e7e:	08df      	lsrs	r7, r3, #3
 8001e80:	0764      	lsls	r4, r4, #29
 8001e82:	2102      	movs	r1, #2
 8001e84:	4327      	orrs	r7, r4
 8001e86:	0900      	lsrs	r0, r0, #4
 8001e88:	e5b5      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	08c0      	lsrs	r0, r0, #3
 8001e8e:	0777      	lsls	r7, r6, #29
 8001e90:	4307      	orrs	r7, r0
 8001e92:	4311      	orrs	r1, r2
 8001e94:	08f0      	lsrs	r0, r6, #3
 8001e96:	2900      	cmp	r1, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dadd+0x714>
 8001e9a:	e5d9      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001e9c:	2180      	movs	r1, #128	@ 0x80
 8001e9e:	0309      	lsls	r1, r1, #12
 8001ea0:	4208      	tst	r0, r1
 8001ea2:	d007      	beq.n	8001eb4 <__aeabi_dadd+0x72c>
 8001ea4:	08dc      	lsrs	r4, r3, #3
 8001ea6:	420c      	tst	r4, r1
 8001ea8:	d104      	bne.n	8001eb4 <__aeabi_dadd+0x72c>
 8001eaa:	08d2      	lsrs	r2, r2, #3
 8001eac:	075b      	lsls	r3, r3, #29
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	0017      	movs	r7, r2
 8001eb2:	0020      	movs	r0, r4
 8001eb4:	0f7b      	lsrs	r3, r7, #29
 8001eb6:	00ff      	lsls	r7, r7, #3
 8001eb8:	08ff      	lsrs	r7, r7, #3
 8001eba:	075b      	lsls	r3, r3, #29
 8001ebc:	431f      	orrs	r7, r3
 8001ebe:	e5c7      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001ec0:	000f      	movs	r7, r1
 8001ec2:	e5c5      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001ec4:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <__aeabi_dadd+0x788>)
 8001ec6:	08d2      	lsrs	r2, r2, #3
 8001ec8:	4033      	ands	r3, r6
 8001eca:	075f      	lsls	r7, r3, #29
 8001ecc:	025b      	lsls	r3, r3, #9
 8001ece:	2401      	movs	r4, #1
 8001ed0:	4317      	orrs	r7, r2
 8001ed2:	0b1e      	lsrs	r6, r3, #12
 8001ed4:	e5a1      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001ed6:	4226      	tst	r6, r4
 8001ed8:	d012      	beq.n	8001f00 <__aeabi_dadd+0x778>
 8001eda:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <__aeabi_dadd+0x788>)
 8001edc:	4665      	mov	r5, ip
 8001ede:	0002      	movs	r2, r0
 8001ee0:	2401      	movs	r4, #1
 8001ee2:	401e      	ands	r6, r3
 8001ee4:	e4e6      	b.n	80018b4 <__aeabi_dadd+0x12c>
 8001ee6:	0021      	movs	r1, r4
 8001ee8:	e585      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001eea:	0017      	movs	r7, r2
 8001eec:	e5a8      	b.n	8001a40 <__aeabi_dadd+0x2b8>
 8001eee:	003a      	movs	r2, r7
 8001ef0:	e4d4      	b.n	800189c <__aeabi_dadd+0x114>
 8001ef2:	08db      	lsrs	r3, r3, #3
 8001ef4:	0764      	lsls	r4, r4, #29
 8001ef6:	431c      	orrs	r4, r3
 8001ef8:	0027      	movs	r7, r4
 8001efa:	2102      	movs	r1, #2
 8001efc:	0900      	lsrs	r0, r0, #4
 8001efe:	e57a      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001f00:	08c0      	lsrs	r0, r0, #3
 8001f02:	0777      	lsls	r7, r6, #29
 8001f04:	4307      	orrs	r7, r0
 8001f06:	4665      	mov	r5, ip
 8001f08:	2100      	movs	r1, #0
 8001f0a:	08f0      	lsrs	r0, r6, #3
 8001f0c:	e573      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	ff7fffff 	.word	0xff7fffff

08001f14 <__aeabi_ddiv>:
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	46de      	mov	lr, fp
 8001f18:	4645      	mov	r5, r8
 8001f1a:	4657      	mov	r7, sl
 8001f1c:	464e      	mov	r6, r9
 8001f1e:	b5e0      	push	{r5, r6, r7, lr}
 8001f20:	b087      	sub	sp, #28
 8001f22:	9200      	str	r2, [sp, #0]
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	030b      	lsls	r3, r1, #12
 8001f28:	0b1b      	lsrs	r3, r3, #12
 8001f2a:	469b      	mov	fp, r3
 8001f2c:	0fca      	lsrs	r2, r1, #31
 8001f2e:	004b      	lsls	r3, r1, #1
 8001f30:	0004      	movs	r4, r0
 8001f32:	4680      	mov	r8, r0
 8001f34:	0d5b      	lsrs	r3, r3, #21
 8001f36:	9202      	str	r2, [sp, #8]
 8001f38:	d100      	bne.n	8001f3c <__aeabi_ddiv+0x28>
 8001f3a:	e098      	b.n	800206e <__aeabi_ddiv+0x15a>
 8001f3c:	4a7c      	ldr	r2, [pc, #496]	@ (8002130 <__aeabi_ddiv+0x21c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d037      	beq.n	8001fb2 <__aeabi_ddiv+0x9e>
 8001f42:	4659      	mov	r1, fp
 8001f44:	0f42      	lsrs	r2, r0, #29
 8001f46:	00c9      	lsls	r1, r1, #3
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	2180      	movs	r1, #128	@ 0x80
 8001f4c:	0409      	lsls	r1, r1, #16
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	00c2      	lsls	r2, r0, #3
 8001f52:	4690      	mov	r8, r2
 8001f54:	4a77      	ldr	r2, [pc, #476]	@ (8002134 <__aeabi_ddiv+0x220>)
 8001f56:	4689      	mov	r9, r1
 8001f58:	4692      	mov	sl, r2
 8001f5a:	449a      	add	sl, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2400      	movs	r4, #0
 8001f60:	9303      	str	r3, [sp, #12]
 8001f62:	9e00      	ldr	r6, [sp, #0]
 8001f64:	9f01      	ldr	r7, [sp, #4]
 8001f66:	033b      	lsls	r3, r7, #12
 8001f68:	0b1b      	lsrs	r3, r3, #12
 8001f6a:	469b      	mov	fp, r3
 8001f6c:	007b      	lsls	r3, r7, #1
 8001f6e:	0030      	movs	r0, r6
 8001f70:	0d5b      	lsrs	r3, r3, #21
 8001f72:	0ffd      	lsrs	r5, r7, #31
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d059      	beq.n	800202c <__aeabi_ddiv+0x118>
 8001f78:	4a6d      	ldr	r2, [pc, #436]	@ (8002130 <__aeabi_ddiv+0x21c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d048      	beq.n	8002010 <__aeabi_ddiv+0xfc>
 8001f7e:	4659      	mov	r1, fp
 8001f80:	0f72      	lsrs	r2, r6, #29
 8001f82:	00c9      	lsls	r1, r1, #3
 8001f84:	430a      	orrs	r2, r1
 8001f86:	2180      	movs	r1, #128	@ 0x80
 8001f88:	0409      	lsls	r1, r1, #16
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	468b      	mov	fp, r1
 8001f8e:	4969      	ldr	r1, [pc, #420]	@ (8002134 <__aeabi_ddiv+0x220>)
 8001f90:	00f2      	lsls	r2, r6, #3
 8001f92:	468c      	mov	ip, r1
 8001f94:	4651      	mov	r1, sl
 8001f96:	4463      	add	r3, ip
 8001f98:	1acb      	subs	r3, r1, r3
 8001f9a:	469a      	mov	sl, r3
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	9e02      	ldr	r6, [sp, #8]
 8001fa0:	406e      	eors	r6, r5
 8001fa2:	b2f6      	uxtb	r6, r6
 8001fa4:	2c0f      	cmp	r4, #15
 8001fa6:	d900      	bls.n	8001faa <__aeabi_ddiv+0x96>
 8001fa8:	e0ce      	b.n	8002148 <__aeabi_ddiv+0x234>
 8001faa:	4b63      	ldr	r3, [pc, #396]	@ (8002138 <__aeabi_ddiv+0x224>)
 8001fac:	00a4      	lsls	r4, r4, #2
 8001fae:	591b      	ldr	r3, [r3, r4]
 8001fb0:	469f      	mov	pc, r3
 8001fb2:	465a      	mov	r2, fp
 8001fb4:	4302      	orrs	r2, r0
 8001fb6:	4691      	mov	r9, r2
 8001fb8:	d000      	beq.n	8001fbc <__aeabi_ddiv+0xa8>
 8001fba:	e090      	b.n	80020de <__aeabi_ddiv+0x1ca>
 8001fbc:	469a      	mov	sl, r3
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	4690      	mov	r8, r2
 8001fc2:	2408      	movs	r4, #8
 8001fc4:	9303      	str	r3, [sp, #12]
 8001fc6:	e7cc      	b.n	8001f62 <__aeabi_ddiv+0x4e>
 8001fc8:	46cb      	mov	fp, r9
 8001fca:	4642      	mov	r2, r8
 8001fcc:	9d02      	ldr	r5, [sp, #8]
 8001fce:	9903      	ldr	r1, [sp, #12]
 8001fd0:	2902      	cmp	r1, #2
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_ddiv+0xc2>
 8001fd4:	e1de      	b.n	8002394 <__aeabi_ddiv+0x480>
 8001fd6:	2903      	cmp	r1, #3
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_ddiv+0xc8>
 8001fda:	e08d      	b.n	80020f8 <__aeabi_ddiv+0x1e4>
 8001fdc:	2901      	cmp	r1, #1
 8001fde:	d000      	beq.n	8001fe2 <__aeabi_ddiv+0xce>
 8001fe0:	e179      	b.n	80022d6 <__aeabi_ddiv+0x3c2>
 8001fe2:	002e      	movs	r6, r5
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	2400      	movs	r4, #0
 8001fea:	4690      	mov	r8, r2
 8001fec:	051b      	lsls	r3, r3, #20
 8001fee:	4323      	orrs	r3, r4
 8001ff0:	07f6      	lsls	r6, r6, #31
 8001ff2:	4333      	orrs	r3, r6
 8001ff4:	4640      	mov	r0, r8
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	b007      	add	sp, #28
 8001ffa:	bcf0      	pop	{r4, r5, r6, r7}
 8001ffc:	46bb      	mov	fp, r7
 8001ffe:	46b2      	mov	sl, r6
 8002000:	46a9      	mov	r9, r5
 8002002:	46a0      	mov	r8, r4
 8002004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002006:	2200      	movs	r2, #0
 8002008:	2400      	movs	r4, #0
 800200a:	4690      	mov	r8, r2
 800200c:	4b48      	ldr	r3, [pc, #288]	@ (8002130 <__aeabi_ddiv+0x21c>)
 800200e:	e7ed      	b.n	8001fec <__aeabi_ddiv+0xd8>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b49      	ldr	r3, [pc, #292]	@ (800213c <__aeabi_ddiv+0x228>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d159      	bne.n	80020d4 <__aeabi_ddiv+0x1c0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	2102      	movs	r1, #2
 8002028:	469b      	mov	fp, r3
 800202a:	e7b8      	b.n	8001f9e <__aeabi_ddiv+0x8a>
 800202c:	465a      	mov	r2, fp
 800202e:	9b00      	ldr	r3, [sp, #0]
 8002030:	431a      	orrs	r2, r3
 8002032:	d049      	beq.n	80020c8 <__aeabi_ddiv+0x1b4>
 8002034:	465b      	mov	r3, fp
 8002036:	2b00      	cmp	r3, #0
 8002038:	d100      	bne.n	800203c <__aeabi_ddiv+0x128>
 800203a:	e19c      	b.n	8002376 <__aeabi_ddiv+0x462>
 800203c:	4658      	mov	r0, fp
 800203e:	f001 fb43 	bl	80036c8 <__clzsi2>
 8002042:	0002      	movs	r2, r0
 8002044:	0003      	movs	r3, r0
 8002046:	3a0b      	subs	r2, #11
 8002048:	271d      	movs	r7, #29
 800204a:	9e00      	ldr	r6, [sp, #0]
 800204c:	1aba      	subs	r2, r7, r2
 800204e:	0019      	movs	r1, r3
 8002050:	4658      	mov	r0, fp
 8002052:	40d6      	lsrs	r6, r2
 8002054:	3908      	subs	r1, #8
 8002056:	4088      	lsls	r0, r1
 8002058:	0032      	movs	r2, r6
 800205a:	4302      	orrs	r2, r0
 800205c:	4693      	mov	fp, r2
 800205e:	9a00      	ldr	r2, [sp, #0]
 8002060:	408a      	lsls	r2, r1
 8002062:	4937      	ldr	r1, [pc, #220]	@ (8002140 <__aeabi_ddiv+0x22c>)
 8002064:	4453      	add	r3, sl
 8002066:	468a      	mov	sl, r1
 8002068:	2100      	movs	r1, #0
 800206a:	449a      	add	sl, r3
 800206c:	e797      	b.n	8001f9e <__aeabi_ddiv+0x8a>
 800206e:	465b      	mov	r3, fp
 8002070:	4303      	orrs	r3, r0
 8002072:	4699      	mov	r9, r3
 8002074:	d021      	beq.n	80020ba <__aeabi_ddiv+0x1a6>
 8002076:	465b      	mov	r3, fp
 8002078:	2b00      	cmp	r3, #0
 800207a:	d100      	bne.n	800207e <__aeabi_ddiv+0x16a>
 800207c:	e169      	b.n	8002352 <__aeabi_ddiv+0x43e>
 800207e:	4658      	mov	r0, fp
 8002080:	f001 fb22 	bl	80036c8 <__clzsi2>
 8002084:	230b      	movs	r3, #11
 8002086:	425b      	negs	r3, r3
 8002088:	469c      	mov	ip, r3
 800208a:	0002      	movs	r2, r0
 800208c:	4484      	add	ip, r0
 800208e:	4666      	mov	r6, ip
 8002090:	231d      	movs	r3, #29
 8002092:	1b9b      	subs	r3, r3, r6
 8002094:	0026      	movs	r6, r4
 8002096:	0011      	movs	r1, r2
 8002098:	4658      	mov	r0, fp
 800209a:	40de      	lsrs	r6, r3
 800209c:	3908      	subs	r1, #8
 800209e:	4088      	lsls	r0, r1
 80020a0:	0033      	movs	r3, r6
 80020a2:	4303      	orrs	r3, r0
 80020a4:	4699      	mov	r9, r3
 80020a6:	0023      	movs	r3, r4
 80020a8:	408b      	lsls	r3, r1
 80020aa:	4698      	mov	r8, r3
 80020ac:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <__aeabi_ddiv+0x230>)
 80020ae:	2400      	movs	r4, #0
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	469a      	mov	sl, r3
 80020b4:	2300      	movs	r3, #0
 80020b6:	9303      	str	r3, [sp, #12]
 80020b8:	e753      	b.n	8001f62 <__aeabi_ddiv+0x4e>
 80020ba:	2300      	movs	r3, #0
 80020bc:	4698      	mov	r8, r3
 80020be:	469a      	mov	sl, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	2404      	movs	r4, #4
 80020c4:	9303      	str	r3, [sp, #12]
 80020c6:	e74c      	b.n	8001f62 <__aeabi_ddiv+0x4e>
 80020c8:	2301      	movs	r3, #1
 80020ca:	431c      	orrs	r4, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	2101      	movs	r1, #1
 80020d0:	469b      	mov	fp, r3
 80020d2:	e764      	b.n	8001f9e <__aeabi_ddiv+0x8a>
 80020d4:	2303      	movs	r3, #3
 80020d6:	0032      	movs	r2, r6
 80020d8:	2103      	movs	r1, #3
 80020da:	431c      	orrs	r4, r3
 80020dc:	e75f      	b.n	8001f9e <__aeabi_ddiv+0x8a>
 80020de:	469a      	mov	sl, r3
 80020e0:	2303      	movs	r3, #3
 80020e2:	46d9      	mov	r9, fp
 80020e4:	240c      	movs	r4, #12
 80020e6:	9303      	str	r3, [sp, #12]
 80020e8:	e73b      	b.n	8001f62 <__aeabi_ddiv+0x4e>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2480      	movs	r4, #128	@ 0x80
 80020ee:	4698      	mov	r8, r3
 80020f0:	2600      	movs	r6, #0
 80020f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002130 <__aeabi_ddiv+0x21c>)
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	e779      	b.n	8001fec <__aeabi_ddiv+0xd8>
 80020f8:	2480      	movs	r4, #128	@ 0x80
 80020fa:	465b      	mov	r3, fp
 80020fc:	0324      	lsls	r4, r4, #12
 80020fe:	431c      	orrs	r4, r3
 8002100:	0324      	lsls	r4, r4, #12
 8002102:	002e      	movs	r6, r5
 8002104:	4690      	mov	r8, r2
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <__aeabi_ddiv+0x21c>)
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	e76f      	b.n	8001fec <__aeabi_ddiv+0xd8>
 800210c:	2480      	movs	r4, #128	@ 0x80
 800210e:	464b      	mov	r3, r9
 8002110:	0324      	lsls	r4, r4, #12
 8002112:	4223      	tst	r3, r4
 8002114:	d002      	beq.n	800211c <__aeabi_ddiv+0x208>
 8002116:	465b      	mov	r3, fp
 8002118:	4223      	tst	r3, r4
 800211a:	d0f0      	beq.n	80020fe <__aeabi_ddiv+0x1ea>
 800211c:	2480      	movs	r4, #128	@ 0x80
 800211e:	464b      	mov	r3, r9
 8002120:	0324      	lsls	r4, r4, #12
 8002122:	431c      	orrs	r4, r3
 8002124:	0324      	lsls	r4, r4, #12
 8002126:	9e02      	ldr	r6, [sp, #8]
 8002128:	4b01      	ldr	r3, [pc, #4]	@ (8002130 <__aeabi_ddiv+0x21c>)
 800212a:	0b24      	lsrs	r4, r4, #12
 800212c:	e75e      	b.n	8001fec <__aeabi_ddiv+0xd8>
 800212e:	46c0      	nop			@ (mov r8, r8)
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0800b750 	.word	0x0800b750
 800213c:	fffff801 	.word	0xfffff801
 8002140:	000003f3 	.word	0x000003f3
 8002144:	fffffc0d 	.word	0xfffffc0d
 8002148:	45cb      	cmp	fp, r9
 800214a:	d200      	bcs.n	800214e <__aeabi_ddiv+0x23a>
 800214c:	e0f8      	b.n	8002340 <__aeabi_ddiv+0x42c>
 800214e:	d100      	bne.n	8002152 <__aeabi_ddiv+0x23e>
 8002150:	e0f3      	b.n	800233a <__aeabi_ddiv+0x426>
 8002152:	2301      	movs	r3, #1
 8002154:	425b      	negs	r3, r3
 8002156:	469c      	mov	ip, r3
 8002158:	4644      	mov	r4, r8
 800215a:	4648      	mov	r0, r9
 800215c:	2500      	movs	r5, #0
 800215e:	44e2      	add	sl, ip
 8002160:	465b      	mov	r3, fp
 8002162:	0e17      	lsrs	r7, r2, #24
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	431f      	orrs	r7, r3
 8002168:	0c19      	lsrs	r1, r3, #16
 800216a:	043b      	lsls	r3, r7, #16
 800216c:	0212      	lsls	r2, r2, #8
 800216e:	9700      	str	r7, [sp, #0]
 8002170:	0c1f      	lsrs	r7, r3, #16
 8002172:	4691      	mov	r9, r2
 8002174:	9102      	str	r1, [sp, #8]
 8002176:	9703      	str	r7, [sp, #12]
 8002178:	f7fe f866 	bl	8000248 <__aeabi_uidivmod>
 800217c:	0002      	movs	r2, r0
 800217e:	437a      	muls	r2, r7
 8002180:	040b      	lsls	r3, r1, #16
 8002182:	0c21      	lsrs	r1, r4, #16
 8002184:	4680      	mov	r8, r0
 8002186:	4319      	orrs	r1, r3
 8002188:	428a      	cmp	r2, r1
 800218a:	d909      	bls.n	80021a0 <__aeabi_ddiv+0x28c>
 800218c:	9f00      	ldr	r7, [sp, #0]
 800218e:	2301      	movs	r3, #1
 8002190:	46bc      	mov	ip, r7
 8002192:	425b      	negs	r3, r3
 8002194:	4461      	add	r1, ip
 8002196:	469c      	mov	ip, r3
 8002198:	44e0      	add	r8, ip
 800219a:	428f      	cmp	r7, r1
 800219c:	d800      	bhi.n	80021a0 <__aeabi_ddiv+0x28c>
 800219e:	e15c      	b.n	800245a <__aeabi_ddiv+0x546>
 80021a0:	1a88      	subs	r0, r1, r2
 80021a2:	9902      	ldr	r1, [sp, #8]
 80021a4:	f7fe f850 	bl	8000248 <__aeabi_uidivmod>
 80021a8:	9a03      	ldr	r2, [sp, #12]
 80021aa:	0424      	lsls	r4, r4, #16
 80021ac:	4342      	muls	r2, r0
 80021ae:	0409      	lsls	r1, r1, #16
 80021b0:	0c24      	lsrs	r4, r4, #16
 80021b2:	0003      	movs	r3, r0
 80021b4:	430c      	orrs	r4, r1
 80021b6:	42a2      	cmp	r2, r4
 80021b8:	d906      	bls.n	80021c8 <__aeabi_ddiv+0x2b4>
 80021ba:	9900      	ldr	r1, [sp, #0]
 80021bc:	3b01      	subs	r3, #1
 80021be:	468c      	mov	ip, r1
 80021c0:	4464      	add	r4, ip
 80021c2:	42a1      	cmp	r1, r4
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x2b4>
 80021c6:	e142      	b.n	800244e <__aeabi_ddiv+0x53a>
 80021c8:	1aa0      	subs	r0, r4, r2
 80021ca:	4642      	mov	r2, r8
 80021cc:	0412      	lsls	r2, r2, #16
 80021ce:	431a      	orrs	r2, r3
 80021d0:	4693      	mov	fp, r2
 80021d2:	464b      	mov	r3, r9
 80021d4:	4659      	mov	r1, fp
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	001f      	movs	r7, r3
 80021da:	9304      	str	r3, [sp, #16]
 80021dc:	040b      	lsls	r3, r1, #16
 80021de:	4649      	mov	r1, r9
 80021e0:	0409      	lsls	r1, r1, #16
 80021e2:	0c09      	lsrs	r1, r1, #16
 80021e4:	000c      	movs	r4, r1
 80021e6:	0c1b      	lsrs	r3, r3, #16
 80021e8:	435c      	muls	r4, r3
 80021ea:	0c12      	lsrs	r2, r2, #16
 80021ec:	437b      	muls	r3, r7
 80021ee:	4688      	mov	r8, r1
 80021f0:	4351      	muls	r1, r2
 80021f2:	437a      	muls	r2, r7
 80021f4:	0c27      	lsrs	r7, r4, #16
 80021f6:	46bc      	mov	ip, r7
 80021f8:	185b      	adds	r3, r3, r1
 80021fa:	4463      	add	r3, ip
 80021fc:	4299      	cmp	r1, r3
 80021fe:	d903      	bls.n	8002208 <__aeabi_ddiv+0x2f4>
 8002200:	2180      	movs	r1, #128	@ 0x80
 8002202:	0249      	lsls	r1, r1, #9
 8002204:	468c      	mov	ip, r1
 8002206:	4462      	add	r2, ip
 8002208:	0c19      	lsrs	r1, r3, #16
 800220a:	0424      	lsls	r4, r4, #16
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	0c24      	lsrs	r4, r4, #16
 8002210:	188a      	adds	r2, r1, r2
 8002212:	191c      	adds	r4, r3, r4
 8002214:	4290      	cmp	r0, r2
 8002216:	d302      	bcc.n	800221e <__aeabi_ddiv+0x30a>
 8002218:	d116      	bne.n	8002248 <__aeabi_ddiv+0x334>
 800221a:	42a5      	cmp	r5, r4
 800221c:	d214      	bcs.n	8002248 <__aeabi_ddiv+0x334>
 800221e:	465b      	mov	r3, fp
 8002220:	9f00      	ldr	r7, [sp, #0]
 8002222:	3b01      	subs	r3, #1
 8002224:	444d      	add	r5, r9
 8002226:	9305      	str	r3, [sp, #20]
 8002228:	454d      	cmp	r5, r9
 800222a:	419b      	sbcs	r3, r3
 800222c:	46bc      	mov	ip, r7
 800222e:	425b      	negs	r3, r3
 8002230:	4463      	add	r3, ip
 8002232:	18c0      	adds	r0, r0, r3
 8002234:	4287      	cmp	r7, r0
 8002236:	d300      	bcc.n	800223a <__aeabi_ddiv+0x326>
 8002238:	e102      	b.n	8002440 <__aeabi_ddiv+0x52c>
 800223a:	4282      	cmp	r2, r0
 800223c:	d900      	bls.n	8002240 <__aeabi_ddiv+0x32c>
 800223e:	e129      	b.n	8002494 <__aeabi_ddiv+0x580>
 8002240:	d100      	bne.n	8002244 <__aeabi_ddiv+0x330>
 8002242:	e124      	b.n	800248e <__aeabi_ddiv+0x57a>
 8002244:	9b05      	ldr	r3, [sp, #20]
 8002246:	469b      	mov	fp, r3
 8002248:	1b2c      	subs	r4, r5, r4
 800224a:	42a5      	cmp	r5, r4
 800224c:	41ad      	sbcs	r5, r5
 800224e:	9b00      	ldr	r3, [sp, #0]
 8002250:	1a80      	subs	r0, r0, r2
 8002252:	426d      	negs	r5, r5
 8002254:	1b40      	subs	r0, r0, r5
 8002256:	4283      	cmp	r3, r0
 8002258:	d100      	bne.n	800225c <__aeabi_ddiv+0x348>
 800225a:	e10f      	b.n	800247c <__aeabi_ddiv+0x568>
 800225c:	9902      	ldr	r1, [sp, #8]
 800225e:	f7fd fff3 	bl	8000248 <__aeabi_uidivmod>
 8002262:	9a03      	ldr	r2, [sp, #12]
 8002264:	040b      	lsls	r3, r1, #16
 8002266:	4342      	muls	r2, r0
 8002268:	0c21      	lsrs	r1, r4, #16
 800226a:	0005      	movs	r5, r0
 800226c:	4319      	orrs	r1, r3
 800226e:	428a      	cmp	r2, r1
 8002270:	d900      	bls.n	8002274 <__aeabi_ddiv+0x360>
 8002272:	e0cb      	b.n	800240c <__aeabi_ddiv+0x4f8>
 8002274:	1a88      	subs	r0, r1, r2
 8002276:	9902      	ldr	r1, [sp, #8]
 8002278:	f7fd ffe6 	bl	8000248 <__aeabi_uidivmod>
 800227c:	9a03      	ldr	r2, [sp, #12]
 800227e:	0424      	lsls	r4, r4, #16
 8002280:	4342      	muls	r2, r0
 8002282:	0409      	lsls	r1, r1, #16
 8002284:	0c24      	lsrs	r4, r4, #16
 8002286:	0003      	movs	r3, r0
 8002288:	430c      	orrs	r4, r1
 800228a:	42a2      	cmp	r2, r4
 800228c:	d900      	bls.n	8002290 <__aeabi_ddiv+0x37c>
 800228e:	e0ca      	b.n	8002426 <__aeabi_ddiv+0x512>
 8002290:	4641      	mov	r1, r8
 8002292:	1aa4      	subs	r4, r4, r2
 8002294:	042a      	lsls	r2, r5, #16
 8002296:	431a      	orrs	r2, r3
 8002298:	9f04      	ldr	r7, [sp, #16]
 800229a:	0413      	lsls	r3, r2, #16
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	4359      	muls	r1, r3
 80022a0:	4640      	mov	r0, r8
 80022a2:	437b      	muls	r3, r7
 80022a4:	469c      	mov	ip, r3
 80022a6:	0c15      	lsrs	r5, r2, #16
 80022a8:	4368      	muls	r0, r5
 80022aa:	0c0b      	lsrs	r3, r1, #16
 80022ac:	4484      	add	ip, r0
 80022ae:	4463      	add	r3, ip
 80022b0:	437d      	muls	r5, r7
 80022b2:	4298      	cmp	r0, r3
 80022b4:	d903      	bls.n	80022be <__aeabi_ddiv+0x3aa>
 80022b6:	2080      	movs	r0, #128	@ 0x80
 80022b8:	0240      	lsls	r0, r0, #9
 80022ba:	4684      	mov	ip, r0
 80022bc:	4465      	add	r5, ip
 80022be:	0c18      	lsrs	r0, r3, #16
 80022c0:	0409      	lsls	r1, r1, #16
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	0c09      	lsrs	r1, r1, #16
 80022c6:	1940      	adds	r0, r0, r5
 80022c8:	185b      	adds	r3, r3, r1
 80022ca:	4284      	cmp	r4, r0
 80022cc:	d327      	bcc.n	800231e <__aeabi_ddiv+0x40a>
 80022ce:	d023      	beq.n	8002318 <__aeabi_ddiv+0x404>
 80022d0:	2301      	movs	r3, #1
 80022d2:	0035      	movs	r5, r6
 80022d4:	431a      	orrs	r2, r3
 80022d6:	4b94      	ldr	r3, [pc, #592]	@ (8002528 <__aeabi_ddiv+0x614>)
 80022d8:	4453      	add	r3, sl
 80022da:	2b00      	cmp	r3, #0
 80022dc:	dd60      	ble.n	80023a0 <__aeabi_ddiv+0x48c>
 80022de:	0751      	lsls	r1, r2, #29
 80022e0:	d000      	beq.n	80022e4 <__aeabi_ddiv+0x3d0>
 80022e2:	e086      	b.n	80023f2 <__aeabi_ddiv+0x4de>
 80022e4:	002e      	movs	r6, r5
 80022e6:	08d1      	lsrs	r1, r2, #3
 80022e8:	465a      	mov	r2, fp
 80022ea:	01d2      	lsls	r2, r2, #7
 80022ec:	d506      	bpl.n	80022fc <__aeabi_ddiv+0x3e8>
 80022ee:	465a      	mov	r2, fp
 80022f0:	4b8e      	ldr	r3, [pc, #568]	@ (800252c <__aeabi_ddiv+0x618>)
 80022f2:	401a      	ands	r2, r3
 80022f4:	2380      	movs	r3, #128	@ 0x80
 80022f6:	4693      	mov	fp, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4453      	add	r3, sl
 80022fc:	4a8c      	ldr	r2, [pc, #560]	@ (8002530 <__aeabi_ddiv+0x61c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	dd00      	ble.n	8002304 <__aeabi_ddiv+0x3f0>
 8002302:	e680      	b.n	8002006 <__aeabi_ddiv+0xf2>
 8002304:	465a      	mov	r2, fp
 8002306:	0752      	lsls	r2, r2, #29
 8002308:	430a      	orrs	r2, r1
 800230a:	4690      	mov	r8, r2
 800230c:	465a      	mov	r2, fp
 800230e:	055b      	lsls	r3, r3, #21
 8002310:	0254      	lsls	r4, r2, #9
 8002312:	0b24      	lsrs	r4, r4, #12
 8002314:	0d5b      	lsrs	r3, r3, #21
 8002316:	e669      	b.n	8001fec <__aeabi_ddiv+0xd8>
 8002318:	0035      	movs	r5, r6
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0db      	beq.n	80022d6 <__aeabi_ddiv+0x3c2>
 800231e:	9d00      	ldr	r5, [sp, #0]
 8002320:	1e51      	subs	r1, r2, #1
 8002322:	46ac      	mov	ip, r5
 8002324:	4464      	add	r4, ip
 8002326:	42ac      	cmp	r4, r5
 8002328:	d200      	bcs.n	800232c <__aeabi_ddiv+0x418>
 800232a:	e09e      	b.n	800246a <__aeabi_ddiv+0x556>
 800232c:	4284      	cmp	r4, r0
 800232e:	d200      	bcs.n	8002332 <__aeabi_ddiv+0x41e>
 8002330:	e0e1      	b.n	80024f6 <__aeabi_ddiv+0x5e2>
 8002332:	d100      	bne.n	8002336 <__aeabi_ddiv+0x422>
 8002334:	e0ee      	b.n	8002514 <__aeabi_ddiv+0x600>
 8002336:	000a      	movs	r2, r1
 8002338:	e7ca      	b.n	80022d0 <__aeabi_ddiv+0x3bc>
 800233a:	4542      	cmp	r2, r8
 800233c:	d900      	bls.n	8002340 <__aeabi_ddiv+0x42c>
 800233e:	e708      	b.n	8002152 <__aeabi_ddiv+0x23e>
 8002340:	464b      	mov	r3, r9
 8002342:	07dc      	lsls	r4, r3, #31
 8002344:	0858      	lsrs	r0, r3, #1
 8002346:	4643      	mov	r3, r8
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	431c      	orrs	r4, r3
 800234c:	4643      	mov	r3, r8
 800234e:	07dd      	lsls	r5, r3, #31
 8002350:	e706      	b.n	8002160 <__aeabi_ddiv+0x24c>
 8002352:	f001 f9b9 	bl	80036c8 <__clzsi2>
 8002356:	2315      	movs	r3, #21
 8002358:	469c      	mov	ip, r3
 800235a:	4484      	add	ip, r0
 800235c:	0002      	movs	r2, r0
 800235e:	4663      	mov	r3, ip
 8002360:	3220      	adds	r2, #32
 8002362:	2b1c      	cmp	r3, #28
 8002364:	dc00      	bgt.n	8002368 <__aeabi_ddiv+0x454>
 8002366:	e692      	b.n	800208e <__aeabi_ddiv+0x17a>
 8002368:	0023      	movs	r3, r4
 800236a:	3808      	subs	r0, #8
 800236c:	4083      	lsls	r3, r0
 800236e:	4699      	mov	r9, r3
 8002370:	2300      	movs	r3, #0
 8002372:	4698      	mov	r8, r3
 8002374:	e69a      	b.n	80020ac <__aeabi_ddiv+0x198>
 8002376:	f001 f9a7 	bl	80036c8 <__clzsi2>
 800237a:	0002      	movs	r2, r0
 800237c:	0003      	movs	r3, r0
 800237e:	3215      	adds	r2, #21
 8002380:	3320      	adds	r3, #32
 8002382:	2a1c      	cmp	r2, #28
 8002384:	dc00      	bgt.n	8002388 <__aeabi_ddiv+0x474>
 8002386:	e65f      	b.n	8002048 <__aeabi_ddiv+0x134>
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	3808      	subs	r0, #8
 800238c:	4081      	lsls	r1, r0
 800238e:	2200      	movs	r2, #0
 8002390:	468b      	mov	fp, r1
 8002392:	e666      	b.n	8002062 <__aeabi_ddiv+0x14e>
 8002394:	2200      	movs	r2, #0
 8002396:	002e      	movs	r6, r5
 8002398:	2400      	movs	r4, #0
 800239a:	4690      	mov	r8, r2
 800239c:	4b65      	ldr	r3, [pc, #404]	@ (8002534 <__aeabi_ddiv+0x620>)
 800239e:	e625      	b.n	8001fec <__aeabi_ddiv+0xd8>
 80023a0:	002e      	movs	r6, r5
 80023a2:	2101      	movs	r1, #1
 80023a4:	1ac9      	subs	r1, r1, r3
 80023a6:	2938      	cmp	r1, #56	@ 0x38
 80023a8:	dd00      	ble.n	80023ac <__aeabi_ddiv+0x498>
 80023aa:	e61b      	b.n	8001fe4 <__aeabi_ddiv+0xd0>
 80023ac:	291f      	cmp	r1, #31
 80023ae:	dc7e      	bgt.n	80024ae <__aeabi_ddiv+0x59a>
 80023b0:	4861      	ldr	r0, [pc, #388]	@ (8002538 <__aeabi_ddiv+0x624>)
 80023b2:	0014      	movs	r4, r2
 80023b4:	4450      	add	r0, sl
 80023b6:	465b      	mov	r3, fp
 80023b8:	4082      	lsls	r2, r0
 80023ba:	4083      	lsls	r3, r0
 80023bc:	40cc      	lsrs	r4, r1
 80023be:	1e50      	subs	r0, r2, #1
 80023c0:	4182      	sbcs	r2, r0
 80023c2:	4323      	orrs	r3, r4
 80023c4:	431a      	orrs	r2, r3
 80023c6:	465b      	mov	r3, fp
 80023c8:	40cb      	lsrs	r3, r1
 80023ca:	0751      	lsls	r1, r2, #29
 80023cc:	d009      	beq.n	80023e2 <__aeabi_ddiv+0x4ce>
 80023ce:	210f      	movs	r1, #15
 80023d0:	4011      	ands	r1, r2
 80023d2:	2904      	cmp	r1, #4
 80023d4:	d005      	beq.n	80023e2 <__aeabi_ddiv+0x4ce>
 80023d6:	1d11      	adds	r1, r2, #4
 80023d8:	4291      	cmp	r1, r2
 80023da:	4192      	sbcs	r2, r2
 80023dc:	4252      	negs	r2, r2
 80023de:	189b      	adds	r3, r3, r2
 80023e0:	000a      	movs	r2, r1
 80023e2:	0219      	lsls	r1, r3, #8
 80023e4:	d400      	bmi.n	80023e8 <__aeabi_ddiv+0x4d4>
 80023e6:	e09b      	b.n	8002520 <__aeabi_ddiv+0x60c>
 80023e8:	2200      	movs	r2, #0
 80023ea:	2301      	movs	r3, #1
 80023ec:	2400      	movs	r4, #0
 80023ee:	4690      	mov	r8, r2
 80023f0:	e5fc      	b.n	8001fec <__aeabi_ddiv+0xd8>
 80023f2:	210f      	movs	r1, #15
 80023f4:	4011      	ands	r1, r2
 80023f6:	2904      	cmp	r1, #4
 80023f8:	d100      	bne.n	80023fc <__aeabi_ddiv+0x4e8>
 80023fa:	e773      	b.n	80022e4 <__aeabi_ddiv+0x3d0>
 80023fc:	1d11      	adds	r1, r2, #4
 80023fe:	4291      	cmp	r1, r2
 8002400:	4192      	sbcs	r2, r2
 8002402:	4252      	negs	r2, r2
 8002404:	002e      	movs	r6, r5
 8002406:	08c9      	lsrs	r1, r1, #3
 8002408:	4493      	add	fp, r2
 800240a:	e76d      	b.n	80022e8 <__aeabi_ddiv+0x3d4>
 800240c:	9b00      	ldr	r3, [sp, #0]
 800240e:	3d01      	subs	r5, #1
 8002410:	469c      	mov	ip, r3
 8002412:	4461      	add	r1, ip
 8002414:	428b      	cmp	r3, r1
 8002416:	d900      	bls.n	800241a <__aeabi_ddiv+0x506>
 8002418:	e72c      	b.n	8002274 <__aeabi_ddiv+0x360>
 800241a:	428a      	cmp	r2, r1
 800241c:	d800      	bhi.n	8002420 <__aeabi_ddiv+0x50c>
 800241e:	e729      	b.n	8002274 <__aeabi_ddiv+0x360>
 8002420:	1e85      	subs	r5, r0, #2
 8002422:	4461      	add	r1, ip
 8002424:	e726      	b.n	8002274 <__aeabi_ddiv+0x360>
 8002426:	9900      	ldr	r1, [sp, #0]
 8002428:	3b01      	subs	r3, #1
 800242a:	468c      	mov	ip, r1
 800242c:	4464      	add	r4, ip
 800242e:	42a1      	cmp	r1, r4
 8002430:	d900      	bls.n	8002434 <__aeabi_ddiv+0x520>
 8002432:	e72d      	b.n	8002290 <__aeabi_ddiv+0x37c>
 8002434:	42a2      	cmp	r2, r4
 8002436:	d800      	bhi.n	800243a <__aeabi_ddiv+0x526>
 8002438:	e72a      	b.n	8002290 <__aeabi_ddiv+0x37c>
 800243a:	1e83      	subs	r3, r0, #2
 800243c:	4464      	add	r4, ip
 800243e:	e727      	b.n	8002290 <__aeabi_ddiv+0x37c>
 8002440:	4287      	cmp	r7, r0
 8002442:	d000      	beq.n	8002446 <__aeabi_ddiv+0x532>
 8002444:	e6fe      	b.n	8002244 <__aeabi_ddiv+0x330>
 8002446:	45a9      	cmp	r9, r5
 8002448:	d900      	bls.n	800244c <__aeabi_ddiv+0x538>
 800244a:	e6fb      	b.n	8002244 <__aeabi_ddiv+0x330>
 800244c:	e6f5      	b.n	800223a <__aeabi_ddiv+0x326>
 800244e:	42a2      	cmp	r2, r4
 8002450:	d800      	bhi.n	8002454 <__aeabi_ddiv+0x540>
 8002452:	e6b9      	b.n	80021c8 <__aeabi_ddiv+0x2b4>
 8002454:	1e83      	subs	r3, r0, #2
 8002456:	4464      	add	r4, ip
 8002458:	e6b6      	b.n	80021c8 <__aeabi_ddiv+0x2b4>
 800245a:	428a      	cmp	r2, r1
 800245c:	d800      	bhi.n	8002460 <__aeabi_ddiv+0x54c>
 800245e:	e69f      	b.n	80021a0 <__aeabi_ddiv+0x28c>
 8002460:	46bc      	mov	ip, r7
 8002462:	1e83      	subs	r3, r0, #2
 8002464:	4698      	mov	r8, r3
 8002466:	4461      	add	r1, ip
 8002468:	e69a      	b.n	80021a0 <__aeabi_ddiv+0x28c>
 800246a:	000a      	movs	r2, r1
 800246c:	4284      	cmp	r4, r0
 800246e:	d000      	beq.n	8002472 <__aeabi_ddiv+0x55e>
 8002470:	e72e      	b.n	80022d0 <__aeabi_ddiv+0x3bc>
 8002472:	454b      	cmp	r3, r9
 8002474:	d000      	beq.n	8002478 <__aeabi_ddiv+0x564>
 8002476:	e72b      	b.n	80022d0 <__aeabi_ddiv+0x3bc>
 8002478:	0035      	movs	r5, r6
 800247a:	e72c      	b.n	80022d6 <__aeabi_ddiv+0x3c2>
 800247c:	4b2a      	ldr	r3, [pc, #168]	@ (8002528 <__aeabi_ddiv+0x614>)
 800247e:	4a2f      	ldr	r2, [pc, #188]	@ (800253c <__aeabi_ddiv+0x628>)
 8002480:	4453      	add	r3, sl
 8002482:	4592      	cmp	sl, r2
 8002484:	db43      	blt.n	800250e <__aeabi_ddiv+0x5fa>
 8002486:	2201      	movs	r2, #1
 8002488:	2100      	movs	r1, #0
 800248a:	4493      	add	fp, r2
 800248c:	e72c      	b.n	80022e8 <__aeabi_ddiv+0x3d4>
 800248e:	42ac      	cmp	r4, r5
 8002490:	d800      	bhi.n	8002494 <__aeabi_ddiv+0x580>
 8002492:	e6d7      	b.n	8002244 <__aeabi_ddiv+0x330>
 8002494:	2302      	movs	r3, #2
 8002496:	425b      	negs	r3, r3
 8002498:	469c      	mov	ip, r3
 800249a:	9900      	ldr	r1, [sp, #0]
 800249c:	444d      	add	r5, r9
 800249e:	454d      	cmp	r5, r9
 80024a0:	419b      	sbcs	r3, r3
 80024a2:	44e3      	add	fp, ip
 80024a4:	468c      	mov	ip, r1
 80024a6:	425b      	negs	r3, r3
 80024a8:	4463      	add	r3, ip
 80024aa:	18c0      	adds	r0, r0, r3
 80024ac:	e6cc      	b.n	8002248 <__aeabi_ddiv+0x334>
 80024ae:	201f      	movs	r0, #31
 80024b0:	4240      	negs	r0, r0
 80024b2:	1ac3      	subs	r3, r0, r3
 80024b4:	4658      	mov	r0, fp
 80024b6:	40d8      	lsrs	r0, r3
 80024b8:	2920      	cmp	r1, #32
 80024ba:	d004      	beq.n	80024c6 <__aeabi_ddiv+0x5b2>
 80024bc:	4659      	mov	r1, fp
 80024be:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <__aeabi_ddiv+0x62c>)
 80024c0:	4453      	add	r3, sl
 80024c2:	4099      	lsls	r1, r3
 80024c4:	430a      	orrs	r2, r1
 80024c6:	1e53      	subs	r3, r2, #1
 80024c8:	419a      	sbcs	r2, r3
 80024ca:	2307      	movs	r3, #7
 80024cc:	0019      	movs	r1, r3
 80024ce:	4302      	orrs	r2, r0
 80024d0:	2400      	movs	r4, #0
 80024d2:	4011      	ands	r1, r2
 80024d4:	4213      	tst	r3, r2
 80024d6:	d009      	beq.n	80024ec <__aeabi_ddiv+0x5d8>
 80024d8:	3308      	adds	r3, #8
 80024da:	4013      	ands	r3, r2
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d01d      	beq.n	800251c <__aeabi_ddiv+0x608>
 80024e0:	1d13      	adds	r3, r2, #4
 80024e2:	4293      	cmp	r3, r2
 80024e4:	4189      	sbcs	r1, r1
 80024e6:	001a      	movs	r2, r3
 80024e8:	4249      	negs	r1, r1
 80024ea:	0749      	lsls	r1, r1, #29
 80024ec:	08d2      	lsrs	r2, r2, #3
 80024ee:	430a      	orrs	r2, r1
 80024f0:	4690      	mov	r8, r2
 80024f2:	2300      	movs	r3, #0
 80024f4:	e57a      	b.n	8001fec <__aeabi_ddiv+0xd8>
 80024f6:	4649      	mov	r1, r9
 80024f8:	9f00      	ldr	r7, [sp, #0]
 80024fa:	004d      	lsls	r5, r1, #1
 80024fc:	454d      	cmp	r5, r9
 80024fe:	4189      	sbcs	r1, r1
 8002500:	46bc      	mov	ip, r7
 8002502:	4249      	negs	r1, r1
 8002504:	4461      	add	r1, ip
 8002506:	46a9      	mov	r9, r5
 8002508:	3a02      	subs	r2, #2
 800250a:	1864      	adds	r4, r4, r1
 800250c:	e7ae      	b.n	800246c <__aeabi_ddiv+0x558>
 800250e:	2201      	movs	r2, #1
 8002510:	4252      	negs	r2, r2
 8002512:	e746      	b.n	80023a2 <__aeabi_ddiv+0x48e>
 8002514:	4599      	cmp	r9, r3
 8002516:	d3ee      	bcc.n	80024f6 <__aeabi_ddiv+0x5e2>
 8002518:	000a      	movs	r2, r1
 800251a:	e7aa      	b.n	8002472 <__aeabi_ddiv+0x55e>
 800251c:	2100      	movs	r1, #0
 800251e:	e7e5      	b.n	80024ec <__aeabi_ddiv+0x5d8>
 8002520:	0759      	lsls	r1, r3, #29
 8002522:	025b      	lsls	r3, r3, #9
 8002524:	0b1c      	lsrs	r4, r3, #12
 8002526:	e7e1      	b.n	80024ec <__aeabi_ddiv+0x5d8>
 8002528:	000003ff 	.word	0x000003ff
 800252c:	feffffff 	.word	0xfeffffff
 8002530:	000007fe 	.word	0x000007fe
 8002534:	000007ff 	.word	0x000007ff
 8002538:	0000041e 	.word	0x0000041e
 800253c:	fffffc02 	.word	0xfffffc02
 8002540:	0000043e 	.word	0x0000043e

08002544 <__eqdf2>:
 8002544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002546:	4657      	mov	r7, sl
 8002548:	46de      	mov	lr, fp
 800254a:	464e      	mov	r6, r9
 800254c:	4645      	mov	r5, r8
 800254e:	b5e0      	push	{r5, r6, r7, lr}
 8002550:	000d      	movs	r5, r1
 8002552:	0004      	movs	r4, r0
 8002554:	0fe8      	lsrs	r0, r5, #31
 8002556:	4683      	mov	fp, r0
 8002558:	0309      	lsls	r1, r1, #12
 800255a:	0fd8      	lsrs	r0, r3, #31
 800255c:	0b09      	lsrs	r1, r1, #12
 800255e:	4682      	mov	sl, r0
 8002560:	4819      	ldr	r0, [pc, #100]	@ (80025c8 <__eqdf2+0x84>)
 8002562:	468c      	mov	ip, r1
 8002564:	031f      	lsls	r7, r3, #12
 8002566:	0069      	lsls	r1, r5, #1
 8002568:	005e      	lsls	r6, r3, #1
 800256a:	0d49      	lsrs	r1, r1, #21
 800256c:	0b3f      	lsrs	r7, r7, #12
 800256e:	0d76      	lsrs	r6, r6, #21
 8002570:	4281      	cmp	r1, r0
 8002572:	d018      	beq.n	80025a6 <__eqdf2+0x62>
 8002574:	4286      	cmp	r6, r0
 8002576:	d00f      	beq.n	8002598 <__eqdf2+0x54>
 8002578:	2001      	movs	r0, #1
 800257a:	42b1      	cmp	r1, r6
 800257c:	d10d      	bne.n	800259a <__eqdf2+0x56>
 800257e:	45bc      	cmp	ip, r7
 8002580:	d10b      	bne.n	800259a <__eqdf2+0x56>
 8002582:	4294      	cmp	r4, r2
 8002584:	d109      	bne.n	800259a <__eqdf2+0x56>
 8002586:	45d3      	cmp	fp, sl
 8002588:	d01c      	beq.n	80025c4 <__eqdf2+0x80>
 800258a:	2900      	cmp	r1, #0
 800258c:	d105      	bne.n	800259a <__eqdf2+0x56>
 800258e:	4660      	mov	r0, ip
 8002590:	4320      	orrs	r0, r4
 8002592:	1e43      	subs	r3, r0, #1
 8002594:	4198      	sbcs	r0, r3
 8002596:	e000      	b.n	800259a <__eqdf2+0x56>
 8002598:	2001      	movs	r0, #1
 800259a:	bcf0      	pop	{r4, r5, r6, r7}
 800259c:	46bb      	mov	fp, r7
 800259e:	46b2      	mov	sl, r6
 80025a0:	46a9      	mov	r9, r5
 80025a2:	46a0      	mov	r8, r4
 80025a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025a6:	2001      	movs	r0, #1
 80025a8:	428e      	cmp	r6, r1
 80025aa:	d1f6      	bne.n	800259a <__eqdf2+0x56>
 80025ac:	4661      	mov	r1, ip
 80025ae:	4339      	orrs	r1, r7
 80025b0:	000f      	movs	r7, r1
 80025b2:	4317      	orrs	r7, r2
 80025b4:	4327      	orrs	r7, r4
 80025b6:	d1f0      	bne.n	800259a <__eqdf2+0x56>
 80025b8:	465b      	mov	r3, fp
 80025ba:	4652      	mov	r2, sl
 80025bc:	1a98      	subs	r0, r3, r2
 80025be:	1e43      	subs	r3, r0, #1
 80025c0:	4198      	sbcs	r0, r3
 80025c2:	e7ea      	b.n	800259a <__eqdf2+0x56>
 80025c4:	2000      	movs	r0, #0
 80025c6:	e7e8      	b.n	800259a <__eqdf2+0x56>
 80025c8:	000007ff 	.word	0x000007ff

080025cc <__gedf2>:
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ce:	4657      	mov	r7, sl
 80025d0:	464e      	mov	r6, r9
 80025d2:	4645      	mov	r5, r8
 80025d4:	46de      	mov	lr, fp
 80025d6:	b5e0      	push	{r5, r6, r7, lr}
 80025d8:	000d      	movs	r5, r1
 80025da:	030e      	lsls	r6, r1, #12
 80025dc:	0049      	lsls	r1, r1, #1
 80025de:	0d49      	lsrs	r1, r1, #21
 80025e0:	468a      	mov	sl, r1
 80025e2:	0fdf      	lsrs	r7, r3, #31
 80025e4:	0fe9      	lsrs	r1, r5, #31
 80025e6:	46bc      	mov	ip, r7
 80025e8:	b083      	sub	sp, #12
 80025ea:	4f2f      	ldr	r7, [pc, #188]	@ (80026a8 <__gedf2+0xdc>)
 80025ec:	0004      	movs	r4, r0
 80025ee:	4680      	mov	r8, r0
 80025f0:	9101      	str	r1, [sp, #4]
 80025f2:	0058      	lsls	r0, r3, #1
 80025f4:	0319      	lsls	r1, r3, #12
 80025f6:	4691      	mov	r9, r2
 80025f8:	0b36      	lsrs	r6, r6, #12
 80025fa:	0b09      	lsrs	r1, r1, #12
 80025fc:	0d40      	lsrs	r0, r0, #21
 80025fe:	45ba      	cmp	sl, r7
 8002600:	d01d      	beq.n	800263e <__gedf2+0x72>
 8002602:	42b8      	cmp	r0, r7
 8002604:	d00d      	beq.n	8002622 <__gedf2+0x56>
 8002606:	4657      	mov	r7, sl
 8002608:	2f00      	cmp	r7, #0
 800260a:	d12a      	bne.n	8002662 <__gedf2+0x96>
 800260c:	4334      	orrs	r4, r6
 800260e:	2800      	cmp	r0, #0
 8002610:	d124      	bne.n	800265c <__gedf2+0x90>
 8002612:	430a      	orrs	r2, r1
 8002614:	d036      	beq.n	8002684 <__gedf2+0xb8>
 8002616:	2c00      	cmp	r4, #0
 8002618:	d141      	bne.n	800269e <__gedf2+0xd2>
 800261a:	4663      	mov	r3, ip
 800261c:	0058      	lsls	r0, r3, #1
 800261e:	3801      	subs	r0, #1
 8002620:	e015      	b.n	800264e <__gedf2+0x82>
 8002622:	4311      	orrs	r1, r2
 8002624:	d138      	bne.n	8002698 <__gedf2+0xcc>
 8002626:	4653      	mov	r3, sl
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <__gedf2+0x64>
 800262c:	4326      	orrs	r6, r4
 800262e:	d0f4      	beq.n	800261a <__gedf2+0x4e>
 8002630:	9b01      	ldr	r3, [sp, #4]
 8002632:	4563      	cmp	r3, ip
 8002634:	d107      	bne.n	8002646 <__gedf2+0x7a>
 8002636:	9b01      	ldr	r3, [sp, #4]
 8002638:	0058      	lsls	r0, r3, #1
 800263a:	3801      	subs	r0, #1
 800263c:	e007      	b.n	800264e <__gedf2+0x82>
 800263e:	4326      	orrs	r6, r4
 8002640:	d12a      	bne.n	8002698 <__gedf2+0xcc>
 8002642:	4550      	cmp	r0, sl
 8002644:	d021      	beq.n	800268a <__gedf2+0xbe>
 8002646:	2001      	movs	r0, #1
 8002648:	9b01      	ldr	r3, [sp, #4]
 800264a:	425f      	negs	r7, r3
 800264c:	4338      	orrs	r0, r7
 800264e:	b003      	add	sp, #12
 8002650:	bcf0      	pop	{r4, r5, r6, r7}
 8002652:	46bb      	mov	fp, r7
 8002654:	46b2      	mov	sl, r6
 8002656:	46a9      	mov	r9, r5
 8002658:	46a0      	mov	r8, r4
 800265a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800265c:	2c00      	cmp	r4, #0
 800265e:	d0dc      	beq.n	800261a <__gedf2+0x4e>
 8002660:	e7e6      	b.n	8002630 <__gedf2+0x64>
 8002662:	2800      	cmp	r0, #0
 8002664:	d0ef      	beq.n	8002646 <__gedf2+0x7a>
 8002666:	9b01      	ldr	r3, [sp, #4]
 8002668:	4563      	cmp	r3, ip
 800266a:	d1ec      	bne.n	8002646 <__gedf2+0x7a>
 800266c:	4582      	cmp	sl, r0
 800266e:	dcea      	bgt.n	8002646 <__gedf2+0x7a>
 8002670:	dbe1      	blt.n	8002636 <__gedf2+0x6a>
 8002672:	428e      	cmp	r6, r1
 8002674:	d8e7      	bhi.n	8002646 <__gedf2+0x7a>
 8002676:	d1de      	bne.n	8002636 <__gedf2+0x6a>
 8002678:	45c8      	cmp	r8, r9
 800267a:	d8e4      	bhi.n	8002646 <__gedf2+0x7a>
 800267c:	2000      	movs	r0, #0
 800267e:	45c8      	cmp	r8, r9
 8002680:	d2e5      	bcs.n	800264e <__gedf2+0x82>
 8002682:	e7d8      	b.n	8002636 <__gedf2+0x6a>
 8002684:	2c00      	cmp	r4, #0
 8002686:	d0e2      	beq.n	800264e <__gedf2+0x82>
 8002688:	e7dd      	b.n	8002646 <__gedf2+0x7a>
 800268a:	4311      	orrs	r1, r2
 800268c:	d104      	bne.n	8002698 <__gedf2+0xcc>
 800268e:	9b01      	ldr	r3, [sp, #4]
 8002690:	4563      	cmp	r3, ip
 8002692:	d1d8      	bne.n	8002646 <__gedf2+0x7a>
 8002694:	2000      	movs	r0, #0
 8002696:	e7da      	b.n	800264e <__gedf2+0x82>
 8002698:	2002      	movs	r0, #2
 800269a:	4240      	negs	r0, r0
 800269c:	e7d7      	b.n	800264e <__gedf2+0x82>
 800269e:	9b01      	ldr	r3, [sp, #4]
 80026a0:	4563      	cmp	r3, ip
 80026a2:	d0e6      	beq.n	8002672 <__gedf2+0xa6>
 80026a4:	e7cf      	b.n	8002646 <__gedf2+0x7a>
 80026a6:	46c0      	nop			@ (mov r8, r8)
 80026a8:	000007ff 	.word	0x000007ff

080026ac <__ledf2>:
 80026ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ae:	4657      	mov	r7, sl
 80026b0:	464e      	mov	r6, r9
 80026b2:	4645      	mov	r5, r8
 80026b4:	46de      	mov	lr, fp
 80026b6:	b5e0      	push	{r5, r6, r7, lr}
 80026b8:	000d      	movs	r5, r1
 80026ba:	030e      	lsls	r6, r1, #12
 80026bc:	0049      	lsls	r1, r1, #1
 80026be:	0d49      	lsrs	r1, r1, #21
 80026c0:	468a      	mov	sl, r1
 80026c2:	0fdf      	lsrs	r7, r3, #31
 80026c4:	0fe9      	lsrs	r1, r5, #31
 80026c6:	46bc      	mov	ip, r7
 80026c8:	b083      	sub	sp, #12
 80026ca:	4f2e      	ldr	r7, [pc, #184]	@ (8002784 <__ledf2+0xd8>)
 80026cc:	0004      	movs	r4, r0
 80026ce:	4680      	mov	r8, r0
 80026d0:	9101      	str	r1, [sp, #4]
 80026d2:	0058      	lsls	r0, r3, #1
 80026d4:	0319      	lsls	r1, r3, #12
 80026d6:	4691      	mov	r9, r2
 80026d8:	0b36      	lsrs	r6, r6, #12
 80026da:	0b09      	lsrs	r1, r1, #12
 80026dc:	0d40      	lsrs	r0, r0, #21
 80026de:	45ba      	cmp	sl, r7
 80026e0:	d01e      	beq.n	8002720 <__ledf2+0x74>
 80026e2:	42b8      	cmp	r0, r7
 80026e4:	d00d      	beq.n	8002702 <__ledf2+0x56>
 80026e6:	4657      	mov	r7, sl
 80026e8:	2f00      	cmp	r7, #0
 80026ea:	d127      	bne.n	800273c <__ledf2+0x90>
 80026ec:	4334      	orrs	r4, r6
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d133      	bne.n	800275a <__ledf2+0xae>
 80026f2:	430a      	orrs	r2, r1
 80026f4:	d034      	beq.n	8002760 <__ledf2+0xb4>
 80026f6:	2c00      	cmp	r4, #0
 80026f8:	d140      	bne.n	800277c <__ledf2+0xd0>
 80026fa:	4663      	mov	r3, ip
 80026fc:	0058      	lsls	r0, r3, #1
 80026fe:	3801      	subs	r0, #1
 8002700:	e015      	b.n	800272e <__ledf2+0x82>
 8002702:	4311      	orrs	r1, r2
 8002704:	d112      	bne.n	800272c <__ledf2+0x80>
 8002706:	4653      	mov	r3, sl
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <__ledf2+0x64>
 800270c:	4326      	orrs	r6, r4
 800270e:	d0f4      	beq.n	80026fa <__ledf2+0x4e>
 8002710:	9b01      	ldr	r3, [sp, #4]
 8002712:	4563      	cmp	r3, ip
 8002714:	d01d      	beq.n	8002752 <__ledf2+0xa6>
 8002716:	2001      	movs	r0, #1
 8002718:	9b01      	ldr	r3, [sp, #4]
 800271a:	425f      	negs	r7, r3
 800271c:	4338      	orrs	r0, r7
 800271e:	e006      	b.n	800272e <__ledf2+0x82>
 8002720:	4326      	orrs	r6, r4
 8002722:	d103      	bne.n	800272c <__ledf2+0x80>
 8002724:	4550      	cmp	r0, sl
 8002726:	d1f6      	bne.n	8002716 <__ledf2+0x6a>
 8002728:	4311      	orrs	r1, r2
 800272a:	d01c      	beq.n	8002766 <__ledf2+0xba>
 800272c:	2002      	movs	r0, #2
 800272e:	b003      	add	sp, #12
 8002730:	bcf0      	pop	{r4, r5, r6, r7}
 8002732:	46bb      	mov	fp, r7
 8002734:	46b2      	mov	sl, r6
 8002736:	46a9      	mov	r9, r5
 8002738:	46a0      	mov	r8, r4
 800273a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800273c:	2800      	cmp	r0, #0
 800273e:	d0ea      	beq.n	8002716 <__ledf2+0x6a>
 8002740:	9b01      	ldr	r3, [sp, #4]
 8002742:	4563      	cmp	r3, ip
 8002744:	d1e7      	bne.n	8002716 <__ledf2+0x6a>
 8002746:	4582      	cmp	sl, r0
 8002748:	dce5      	bgt.n	8002716 <__ledf2+0x6a>
 800274a:	db02      	blt.n	8002752 <__ledf2+0xa6>
 800274c:	428e      	cmp	r6, r1
 800274e:	d8e2      	bhi.n	8002716 <__ledf2+0x6a>
 8002750:	d00e      	beq.n	8002770 <__ledf2+0xc4>
 8002752:	9b01      	ldr	r3, [sp, #4]
 8002754:	0058      	lsls	r0, r3, #1
 8002756:	3801      	subs	r0, #1
 8002758:	e7e9      	b.n	800272e <__ledf2+0x82>
 800275a:	2c00      	cmp	r4, #0
 800275c:	d0cd      	beq.n	80026fa <__ledf2+0x4e>
 800275e:	e7d7      	b.n	8002710 <__ledf2+0x64>
 8002760:	2c00      	cmp	r4, #0
 8002762:	d0e4      	beq.n	800272e <__ledf2+0x82>
 8002764:	e7d7      	b.n	8002716 <__ledf2+0x6a>
 8002766:	9b01      	ldr	r3, [sp, #4]
 8002768:	2000      	movs	r0, #0
 800276a:	4563      	cmp	r3, ip
 800276c:	d0df      	beq.n	800272e <__ledf2+0x82>
 800276e:	e7d2      	b.n	8002716 <__ledf2+0x6a>
 8002770:	45c8      	cmp	r8, r9
 8002772:	d8d0      	bhi.n	8002716 <__ledf2+0x6a>
 8002774:	2000      	movs	r0, #0
 8002776:	45c8      	cmp	r8, r9
 8002778:	d2d9      	bcs.n	800272e <__ledf2+0x82>
 800277a:	e7ea      	b.n	8002752 <__ledf2+0xa6>
 800277c:	9b01      	ldr	r3, [sp, #4]
 800277e:	4563      	cmp	r3, ip
 8002780:	d0e4      	beq.n	800274c <__ledf2+0xa0>
 8002782:	e7c8      	b.n	8002716 <__ledf2+0x6a>
 8002784:	000007ff 	.word	0x000007ff

08002788 <__aeabi_dmul>:
 8002788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278a:	4657      	mov	r7, sl
 800278c:	464e      	mov	r6, r9
 800278e:	46de      	mov	lr, fp
 8002790:	4645      	mov	r5, r8
 8002792:	b5e0      	push	{r5, r6, r7, lr}
 8002794:	001f      	movs	r7, r3
 8002796:	030b      	lsls	r3, r1, #12
 8002798:	0b1b      	lsrs	r3, r3, #12
 800279a:	0016      	movs	r6, r2
 800279c:	469a      	mov	sl, r3
 800279e:	0fca      	lsrs	r2, r1, #31
 80027a0:	004b      	lsls	r3, r1, #1
 80027a2:	0004      	movs	r4, r0
 80027a4:	4691      	mov	r9, r2
 80027a6:	b085      	sub	sp, #20
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	d100      	bne.n	80027ae <__aeabi_dmul+0x26>
 80027ac:	e1cf      	b.n	8002b4e <__aeabi_dmul+0x3c6>
 80027ae:	4acd      	ldr	r2, [pc, #820]	@ (8002ae4 <__aeabi_dmul+0x35c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d055      	beq.n	8002860 <__aeabi_dmul+0xd8>
 80027b4:	4651      	mov	r1, sl
 80027b6:	0f42      	lsrs	r2, r0, #29
 80027b8:	00c9      	lsls	r1, r1, #3
 80027ba:	430a      	orrs	r2, r1
 80027bc:	2180      	movs	r1, #128	@ 0x80
 80027be:	0409      	lsls	r1, r1, #16
 80027c0:	4311      	orrs	r1, r2
 80027c2:	00c2      	lsls	r2, r0, #3
 80027c4:	4690      	mov	r8, r2
 80027c6:	4ac8      	ldr	r2, [pc, #800]	@ (8002ae8 <__aeabi_dmul+0x360>)
 80027c8:	468a      	mov	sl, r1
 80027ca:	4693      	mov	fp, r2
 80027cc:	449b      	add	fp, r3
 80027ce:	2300      	movs	r3, #0
 80027d0:	2500      	movs	r5, #0
 80027d2:	9302      	str	r3, [sp, #8]
 80027d4:	033c      	lsls	r4, r7, #12
 80027d6:	007b      	lsls	r3, r7, #1
 80027d8:	0ffa      	lsrs	r2, r7, #31
 80027da:	9601      	str	r6, [sp, #4]
 80027dc:	0b24      	lsrs	r4, r4, #12
 80027de:	0d5b      	lsrs	r3, r3, #21
 80027e0:	9200      	str	r2, [sp, #0]
 80027e2:	d100      	bne.n	80027e6 <__aeabi_dmul+0x5e>
 80027e4:	e188      	b.n	8002af8 <__aeabi_dmul+0x370>
 80027e6:	4abf      	ldr	r2, [pc, #764]	@ (8002ae4 <__aeabi_dmul+0x35c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d100      	bne.n	80027ee <__aeabi_dmul+0x66>
 80027ec:	e092      	b.n	8002914 <__aeabi_dmul+0x18c>
 80027ee:	4abe      	ldr	r2, [pc, #760]	@ (8002ae8 <__aeabi_dmul+0x360>)
 80027f0:	4694      	mov	ip, r2
 80027f2:	4463      	add	r3, ip
 80027f4:	449b      	add	fp, r3
 80027f6:	2d0a      	cmp	r5, #10
 80027f8:	dc42      	bgt.n	8002880 <__aeabi_dmul+0xf8>
 80027fa:	00e4      	lsls	r4, r4, #3
 80027fc:	0f73      	lsrs	r3, r6, #29
 80027fe:	4323      	orrs	r3, r4
 8002800:	2480      	movs	r4, #128	@ 0x80
 8002802:	4649      	mov	r1, r9
 8002804:	0424      	lsls	r4, r4, #16
 8002806:	431c      	orrs	r4, r3
 8002808:	00f3      	lsls	r3, r6, #3
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	9b00      	ldr	r3, [sp, #0]
 800280e:	2000      	movs	r0, #0
 8002810:	4059      	eors	r1, r3
 8002812:	b2cb      	uxtb	r3, r1
 8002814:	9303      	str	r3, [sp, #12]
 8002816:	2d02      	cmp	r5, #2
 8002818:	dc00      	bgt.n	800281c <__aeabi_dmul+0x94>
 800281a:	e094      	b.n	8002946 <__aeabi_dmul+0x1be>
 800281c:	2301      	movs	r3, #1
 800281e:	40ab      	lsls	r3, r5
 8002820:	001d      	movs	r5, r3
 8002822:	23a6      	movs	r3, #166	@ 0xa6
 8002824:	002a      	movs	r2, r5
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	401a      	ands	r2, r3
 800282a:	421d      	tst	r5, r3
 800282c:	d000      	beq.n	8002830 <__aeabi_dmul+0xa8>
 800282e:	e229      	b.n	8002c84 <__aeabi_dmul+0x4fc>
 8002830:	2390      	movs	r3, #144	@ 0x90
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	421d      	tst	r5, r3
 8002836:	d100      	bne.n	800283a <__aeabi_dmul+0xb2>
 8002838:	e24d      	b.n	8002cd6 <__aeabi_dmul+0x54e>
 800283a:	2300      	movs	r3, #0
 800283c:	2480      	movs	r4, #128	@ 0x80
 800283e:	4699      	mov	r9, r3
 8002840:	0324      	lsls	r4, r4, #12
 8002842:	4ba8      	ldr	r3, [pc, #672]	@ (8002ae4 <__aeabi_dmul+0x35c>)
 8002844:	0010      	movs	r0, r2
 8002846:	464a      	mov	r2, r9
 8002848:	051b      	lsls	r3, r3, #20
 800284a:	4323      	orrs	r3, r4
 800284c:	07d2      	lsls	r2, r2, #31
 800284e:	4313      	orrs	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	b005      	add	sp, #20
 8002854:	bcf0      	pop	{r4, r5, r6, r7}
 8002856:	46bb      	mov	fp, r7
 8002858:	46b2      	mov	sl, r6
 800285a:	46a9      	mov	r9, r5
 800285c:	46a0      	mov	r8, r4
 800285e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002860:	4652      	mov	r2, sl
 8002862:	4302      	orrs	r2, r0
 8002864:	4690      	mov	r8, r2
 8002866:	d000      	beq.n	800286a <__aeabi_dmul+0xe2>
 8002868:	e1ac      	b.n	8002bc4 <__aeabi_dmul+0x43c>
 800286a:	469b      	mov	fp, r3
 800286c:	2302      	movs	r3, #2
 800286e:	4692      	mov	sl, r2
 8002870:	2508      	movs	r5, #8
 8002872:	9302      	str	r3, [sp, #8]
 8002874:	e7ae      	b.n	80027d4 <__aeabi_dmul+0x4c>
 8002876:	9b00      	ldr	r3, [sp, #0]
 8002878:	46a2      	mov	sl, r4
 800287a:	4699      	mov	r9, r3
 800287c:	9b01      	ldr	r3, [sp, #4]
 800287e:	4698      	mov	r8, r3
 8002880:	9b02      	ldr	r3, [sp, #8]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d100      	bne.n	8002888 <__aeabi_dmul+0x100>
 8002886:	e1ca      	b.n	8002c1e <__aeabi_dmul+0x496>
 8002888:	2b03      	cmp	r3, #3
 800288a:	d100      	bne.n	800288e <__aeabi_dmul+0x106>
 800288c:	e192      	b.n	8002bb4 <__aeabi_dmul+0x42c>
 800288e:	2b01      	cmp	r3, #1
 8002890:	d110      	bne.n	80028b4 <__aeabi_dmul+0x12c>
 8002892:	2300      	movs	r3, #0
 8002894:	2400      	movs	r4, #0
 8002896:	2200      	movs	r2, #0
 8002898:	e7d4      	b.n	8002844 <__aeabi_dmul+0xbc>
 800289a:	2201      	movs	r2, #1
 800289c:	087b      	lsrs	r3, r7, #1
 800289e:	403a      	ands	r2, r7
 80028a0:	4313      	orrs	r3, r2
 80028a2:	4652      	mov	r2, sl
 80028a4:	07d2      	lsls	r2, r2, #31
 80028a6:	4313      	orrs	r3, r2
 80028a8:	4698      	mov	r8, r3
 80028aa:	4653      	mov	r3, sl
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	469a      	mov	sl, r3
 80028b0:	9b03      	ldr	r3, [sp, #12]
 80028b2:	4699      	mov	r9, r3
 80028b4:	465b      	mov	r3, fp
 80028b6:	1c58      	adds	r0, r3, #1
 80028b8:	2380      	movs	r3, #128	@ 0x80
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	445b      	add	r3, fp
 80028be:	2b00      	cmp	r3, #0
 80028c0:	dc00      	bgt.n	80028c4 <__aeabi_dmul+0x13c>
 80028c2:	e1b1      	b.n	8002c28 <__aeabi_dmul+0x4a0>
 80028c4:	4642      	mov	r2, r8
 80028c6:	0752      	lsls	r2, r2, #29
 80028c8:	d00b      	beq.n	80028e2 <__aeabi_dmul+0x15a>
 80028ca:	220f      	movs	r2, #15
 80028cc:	4641      	mov	r1, r8
 80028ce:	400a      	ands	r2, r1
 80028d0:	2a04      	cmp	r2, #4
 80028d2:	d006      	beq.n	80028e2 <__aeabi_dmul+0x15a>
 80028d4:	4642      	mov	r2, r8
 80028d6:	1d11      	adds	r1, r2, #4
 80028d8:	4541      	cmp	r1, r8
 80028da:	4192      	sbcs	r2, r2
 80028dc:	4688      	mov	r8, r1
 80028de:	4252      	negs	r2, r2
 80028e0:	4492      	add	sl, r2
 80028e2:	4652      	mov	r2, sl
 80028e4:	01d2      	lsls	r2, r2, #7
 80028e6:	d506      	bpl.n	80028f6 <__aeabi_dmul+0x16e>
 80028e8:	4652      	mov	r2, sl
 80028ea:	4b80      	ldr	r3, [pc, #512]	@ (8002aec <__aeabi_dmul+0x364>)
 80028ec:	401a      	ands	r2, r3
 80028ee:	2380      	movs	r3, #128	@ 0x80
 80028f0:	4692      	mov	sl, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	18c3      	adds	r3, r0, r3
 80028f6:	4a7e      	ldr	r2, [pc, #504]	@ (8002af0 <__aeabi_dmul+0x368>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	dd00      	ble.n	80028fe <__aeabi_dmul+0x176>
 80028fc:	e18f      	b.n	8002c1e <__aeabi_dmul+0x496>
 80028fe:	4642      	mov	r2, r8
 8002900:	08d1      	lsrs	r1, r2, #3
 8002902:	4652      	mov	r2, sl
 8002904:	0752      	lsls	r2, r2, #29
 8002906:	430a      	orrs	r2, r1
 8002908:	4651      	mov	r1, sl
 800290a:	055b      	lsls	r3, r3, #21
 800290c:	024c      	lsls	r4, r1, #9
 800290e:	0b24      	lsrs	r4, r4, #12
 8002910:	0d5b      	lsrs	r3, r3, #21
 8002912:	e797      	b.n	8002844 <__aeabi_dmul+0xbc>
 8002914:	4b73      	ldr	r3, [pc, #460]	@ (8002ae4 <__aeabi_dmul+0x35c>)
 8002916:	4326      	orrs	r6, r4
 8002918:	469c      	mov	ip, r3
 800291a:	44e3      	add	fp, ip
 800291c:	2e00      	cmp	r6, #0
 800291e:	d100      	bne.n	8002922 <__aeabi_dmul+0x19a>
 8002920:	e16f      	b.n	8002c02 <__aeabi_dmul+0x47a>
 8002922:	2303      	movs	r3, #3
 8002924:	4649      	mov	r1, r9
 8002926:	431d      	orrs	r5, r3
 8002928:	9b00      	ldr	r3, [sp, #0]
 800292a:	4059      	eors	r1, r3
 800292c:	b2cb      	uxtb	r3, r1
 800292e:	9303      	str	r3, [sp, #12]
 8002930:	2d0a      	cmp	r5, #10
 8002932:	dd00      	ble.n	8002936 <__aeabi_dmul+0x1ae>
 8002934:	e133      	b.n	8002b9e <__aeabi_dmul+0x416>
 8002936:	2301      	movs	r3, #1
 8002938:	40ab      	lsls	r3, r5
 800293a:	001d      	movs	r5, r3
 800293c:	2303      	movs	r3, #3
 800293e:	9302      	str	r3, [sp, #8]
 8002940:	2288      	movs	r2, #136	@ 0x88
 8002942:	422a      	tst	r2, r5
 8002944:	d197      	bne.n	8002876 <__aeabi_dmul+0xee>
 8002946:	4642      	mov	r2, r8
 8002948:	4643      	mov	r3, r8
 800294a:	0412      	lsls	r2, r2, #16
 800294c:	0c12      	lsrs	r2, r2, #16
 800294e:	0016      	movs	r6, r2
 8002950:	9801      	ldr	r0, [sp, #4]
 8002952:	0c1d      	lsrs	r5, r3, #16
 8002954:	0c03      	lsrs	r3, r0, #16
 8002956:	0400      	lsls	r0, r0, #16
 8002958:	0c00      	lsrs	r0, r0, #16
 800295a:	4346      	muls	r6, r0
 800295c:	46b4      	mov	ip, r6
 800295e:	001e      	movs	r6, r3
 8002960:	436e      	muls	r6, r5
 8002962:	9600      	str	r6, [sp, #0]
 8002964:	0016      	movs	r6, r2
 8002966:	0007      	movs	r7, r0
 8002968:	435e      	muls	r6, r3
 800296a:	4661      	mov	r1, ip
 800296c:	46b0      	mov	r8, r6
 800296e:	436f      	muls	r7, r5
 8002970:	0c0e      	lsrs	r6, r1, #16
 8002972:	44b8      	add	r8, r7
 8002974:	4446      	add	r6, r8
 8002976:	42b7      	cmp	r7, r6
 8002978:	d905      	bls.n	8002986 <__aeabi_dmul+0x1fe>
 800297a:	2180      	movs	r1, #128	@ 0x80
 800297c:	0249      	lsls	r1, r1, #9
 800297e:	4688      	mov	r8, r1
 8002980:	9f00      	ldr	r7, [sp, #0]
 8002982:	4447      	add	r7, r8
 8002984:	9700      	str	r7, [sp, #0]
 8002986:	4661      	mov	r1, ip
 8002988:	0409      	lsls	r1, r1, #16
 800298a:	0c09      	lsrs	r1, r1, #16
 800298c:	0c37      	lsrs	r7, r6, #16
 800298e:	0436      	lsls	r6, r6, #16
 8002990:	468c      	mov	ip, r1
 8002992:	0031      	movs	r1, r6
 8002994:	4461      	add	r1, ip
 8002996:	9101      	str	r1, [sp, #4]
 8002998:	0011      	movs	r1, r2
 800299a:	0c26      	lsrs	r6, r4, #16
 800299c:	0424      	lsls	r4, r4, #16
 800299e:	0c24      	lsrs	r4, r4, #16
 80029a0:	4361      	muls	r1, r4
 80029a2:	468c      	mov	ip, r1
 80029a4:	0021      	movs	r1, r4
 80029a6:	4369      	muls	r1, r5
 80029a8:	4689      	mov	r9, r1
 80029aa:	4661      	mov	r1, ip
 80029ac:	0c09      	lsrs	r1, r1, #16
 80029ae:	4688      	mov	r8, r1
 80029b0:	4372      	muls	r2, r6
 80029b2:	444a      	add	r2, r9
 80029b4:	4442      	add	r2, r8
 80029b6:	4375      	muls	r5, r6
 80029b8:	4591      	cmp	r9, r2
 80029ba:	d903      	bls.n	80029c4 <__aeabi_dmul+0x23c>
 80029bc:	2180      	movs	r1, #128	@ 0x80
 80029be:	0249      	lsls	r1, r1, #9
 80029c0:	4688      	mov	r8, r1
 80029c2:	4445      	add	r5, r8
 80029c4:	0c11      	lsrs	r1, r2, #16
 80029c6:	4688      	mov	r8, r1
 80029c8:	4661      	mov	r1, ip
 80029ca:	0409      	lsls	r1, r1, #16
 80029cc:	0c09      	lsrs	r1, r1, #16
 80029ce:	468c      	mov	ip, r1
 80029d0:	0412      	lsls	r2, r2, #16
 80029d2:	4462      	add	r2, ip
 80029d4:	18b9      	adds	r1, r7, r2
 80029d6:	9102      	str	r1, [sp, #8]
 80029d8:	4651      	mov	r1, sl
 80029da:	0c09      	lsrs	r1, r1, #16
 80029dc:	468c      	mov	ip, r1
 80029de:	4651      	mov	r1, sl
 80029e0:	040f      	lsls	r7, r1, #16
 80029e2:	0c3f      	lsrs	r7, r7, #16
 80029e4:	0039      	movs	r1, r7
 80029e6:	4341      	muls	r1, r0
 80029e8:	4445      	add	r5, r8
 80029ea:	4688      	mov	r8, r1
 80029ec:	4661      	mov	r1, ip
 80029ee:	4341      	muls	r1, r0
 80029f0:	468a      	mov	sl, r1
 80029f2:	4641      	mov	r1, r8
 80029f4:	4660      	mov	r0, ip
 80029f6:	0c09      	lsrs	r1, r1, #16
 80029f8:	4689      	mov	r9, r1
 80029fa:	4358      	muls	r0, r3
 80029fc:	437b      	muls	r3, r7
 80029fe:	4453      	add	r3, sl
 8002a00:	444b      	add	r3, r9
 8002a02:	459a      	cmp	sl, r3
 8002a04:	d903      	bls.n	8002a0e <__aeabi_dmul+0x286>
 8002a06:	2180      	movs	r1, #128	@ 0x80
 8002a08:	0249      	lsls	r1, r1, #9
 8002a0a:	4689      	mov	r9, r1
 8002a0c:	4448      	add	r0, r9
 8002a0e:	0c19      	lsrs	r1, r3, #16
 8002a10:	4689      	mov	r9, r1
 8002a12:	4641      	mov	r1, r8
 8002a14:	0409      	lsls	r1, r1, #16
 8002a16:	0c09      	lsrs	r1, r1, #16
 8002a18:	4688      	mov	r8, r1
 8002a1a:	0039      	movs	r1, r7
 8002a1c:	4361      	muls	r1, r4
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	4443      	add	r3, r8
 8002a22:	4688      	mov	r8, r1
 8002a24:	4661      	mov	r1, ip
 8002a26:	434c      	muls	r4, r1
 8002a28:	4371      	muls	r1, r6
 8002a2a:	468c      	mov	ip, r1
 8002a2c:	4641      	mov	r1, r8
 8002a2e:	4377      	muls	r7, r6
 8002a30:	0c0e      	lsrs	r6, r1, #16
 8002a32:	193f      	adds	r7, r7, r4
 8002a34:	19f6      	adds	r6, r6, r7
 8002a36:	4448      	add	r0, r9
 8002a38:	42b4      	cmp	r4, r6
 8002a3a:	d903      	bls.n	8002a44 <__aeabi_dmul+0x2bc>
 8002a3c:	2180      	movs	r1, #128	@ 0x80
 8002a3e:	0249      	lsls	r1, r1, #9
 8002a40:	4689      	mov	r9, r1
 8002a42:	44cc      	add	ip, r9
 8002a44:	9902      	ldr	r1, [sp, #8]
 8002a46:	9f00      	ldr	r7, [sp, #0]
 8002a48:	4689      	mov	r9, r1
 8002a4a:	0431      	lsls	r1, r6, #16
 8002a4c:	444f      	add	r7, r9
 8002a4e:	4689      	mov	r9, r1
 8002a50:	4641      	mov	r1, r8
 8002a52:	4297      	cmp	r7, r2
 8002a54:	4192      	sbcs	r2, r2
 8002a56:	040c      	lsls	r4, r1, #16
 8002a58:	0c24      	lsrs	r4, r4, #16
 8002a5a:	444c      	add	r4, r9
 8002a5c:	18ff      	adds	r7, r7, r3
 8002a5e:	4252      	negs	r2, r2
 8002a60:	1964      	adds	r4, r4, r5
 8002a62:	18a1      	adds	r1, r4, r2
 8002a64:	429f      	cmp	r7, r3
 8002a66:	419b      	sbcs	r3, r3
 8002a68:	4688      	mov	r8, r1
 8002a6a:	4682      	mov	sl, r0
 8002a6c:	425b      	negs	r3, r3
 8002a6e:	4699      	mov	r9, r3
 8002a70:	4590      	cmp	r8, r2
 8002a72:	4192      	sbcs	r2, r2
 8002a74:	42ac      	cmp	r4, r5
 8002a76:	41a4      	sbcs	r4, r4
 8002a78:	44c2      	add	sl, r8
 8002a7a:	44d1      	add	r9, sl
 8002a7c:	4252      	negs	r2, r2
 8002a7e:	4264      	negs	r4, r4
 8002a80:	4314      	orrs	r4, r2
 8002a82:	4599      	cmp	r9, r3
 8002a84:	419b      	sbcs	r3, r3
 8002a86:	4582      	cmp	sl, r0
 8002a88:	4192      	sbcs	r2, r2
 8002a8a:	425b      	negs	r3, r3
 8002a8c:	4252      	negs	r2, r2
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	464a      	mov	r2, r9
 8002a92:	0c36      	lsrs	r6, r6, #16
 8002a94:	19a4      	adds	r4, r4, r6
 8002a96:	18e3      	adds	r3, r4, r3
 8002a98:	4463      	add	r3, ip
 8002a9a:	025b      	lsls	r3, r3, #9
 8002a9c:	0dd2      	lsrs	r2, r2, #23
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	9901      	ldr	r1, [sp, #4]
 8002aa2:	4692      	mov	sl, r2
 8002aa4:	027a      	lsls	r2, r7, #9
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	1e50      	subs	r0, r2, #1
 8002aaa:	4182      	sbcs	r2, r0
 8002aac:	0dff      	lsrs	r7, r7, #23
 8002aae:	4317      	orrs	r7, r2
 8002ab0:	464a      	mov	r2, r9
 8002ab2:	0252      	lsls	r2, r2, #9
 8002ab4:	4317      	orrs	r7, r2
 8002ab6:	46b8      	mov	r8, r7
 8002ab8:	01db      	lsls	r3, r3, #7
 8002aba:	d500      	bpl.n	8002abe <__aeabi_dmul+0x336>
 8002abc:	e6ed      	b.n	800289a <__aeabi_dmul+0x112>
 8002abe:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <__aeabi_dmul+0x36c>)
 8002ac0:	9a03      	ldr	r2, [sp, #12]
 8002ac2:	445b      	add	r3, fp
 8002ac4:	4691      	mov	r9, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	dc00      	bgt.n	8002acc <__aeabi_dmul+0x344>
 8002aca:	e0ac      	b.n	8002c26 <__aeabi_dmul+0x49e>
 8002acc:	003a      	movs	r2, r7
 8002ace:	0752      	lsls	r2, r2, #29
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dmul+0x34c>
 8002ad2:	e710      	b.n	80028f6 <__aeabi_dmul+0x16e>
 8002ad4:	220f      	movs	r2, #15
 8002ad6:	4658      	mov	r0, fp
 8002ad8:	403a      	ands	r2, r7
 8002ada:	2a04      	cmp	r2, #4
 8002adc:	d000      	beq.n	8002ae0 <__aeabi_dmul+0x358>
 8002ade:	e6f9      	b.n	80028d4 <__aeabi_dmul+0x14c>
 8002ae0:	e709      	b.n	80028f6 <__aeabi_dmul+0x16e>
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	000007ff 	.word	0x000007ff
 8002ae8:	fffffc01 	.word	0xfffffc01
 8002aec:	feffffff 	.word	0xfeffffff
 8002af0:	000007fe 	.word	0x000007fe
 8002af4:	000003ff 	.word	0x000003ff
 8002af8:	0022      	movs	r2, r4
 8002afa:	4332      	orrs	r2, r6
 8002afc:	d06f      	beq.n	8002bde <__aeabi_dmul+0x456>
 8002afe:	2c00      	cmp	r4, #0
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dmul+0x37c>
 8002b02:	e0c2      	b.n	8002c8a <__aeabi_dmul+0x502>
 8002b04:	0020      	movs	r0, r4
 8002b06:	f000 fddf 	bl	80036c8 <__clzsi2>
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	3a0b      	subs	r2, #11
 8002b10:	201d      	movs	r0, #29
 8002b12:	1a82      	subs	r2, r0, r2
 8002b14:	0030      	movs	r0, r6
 8002b16:	0019      	movs	r1, r3
 8002b18:	40d0      	lsrs	r0, r2
 8002b1a:	3908      	subs	r1, #8
 8002b1c:	408c      	lsls	r4, r1
 8002b1e:	0002      	movs	r2, r0
 8002b20:	4322      	orrs	r2, r4
 8002b22:	0034      	movs	r4, r6
 8002b24:	408c      	lsls	r4, r1
 8002b26:	4659      	mov	r1, fp
 8002b28:	1acb      	subs	r3, r1, r3
 8002b2a:	4986      	ldr	r1, [pc, #536]	@ (8002d44 <__aeabi_dmul+0x5bc>)
 8002b2c:	468b      	mov	fp, r1
 8002b2e:	449b      	add	fp, r3
 8002b30:	2d0a      	cmp	r5, #10
 8002b32:	dd00      	ble.n	8002b36 <__aeabi_dmul+0x3ae>
 8002b34:	e6a4      	b.n	8002880 <__aeabi_dmul+0xf8>
 8002b36:	4649      	mov	r1, r9
 8002b38:	9b00      	ldr	r3, [sp, #0]
 8002b3a:	9401      	str	r4, [sp, #4]
 8002b3c:	4059      	eors	r1, r3
 8002b3e:	b2cb      	uxtb	r3, r1
 8002b40:	0014      	movs	r4, r2
 8002b42:	2000      	movs	r0, #0
 8002b44:	9303      	str	r3, [sp, #12]
 8002b46:	2d02      	cmp	r5, #2
 8002b48:	dd00      	ble.n	8002b4c <__aeabi_dmul+0x3c4>
 8002b4a:	e667      	b.n	800281c <__aeabi_dmul+0x94>
 8002b4c:	e6fb      	b.n	8002946 <__aeabi_dmul+0x1be>
 8002b4e:	4653      	mov	r3, sl
 8002b50:	4303      	orrs	r3, r0
 8002b52:	4698      	mov	r8, r3
 8002b54:	d03c      	beq.n	8002bd0 <__aeabi_dmul+0x448>
 8002b56:	4653      	mov	r3, sl
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d100      	bne.n	8002b5e <__aeabi_dmul+0x3d6>
 8002b5c:	e0a3      	b.n	8002ca6 <__aeabi_dmul+0x51e>
 8002b5e:	4650      	mov	r0, sl
 8002b60:	f000 fdb2 	bl	80036c8 <__clzsi2>
 8002b64:	230b      	movs	r3, #11
 8002b66:	425b      	negs	r3, r3
 8002b68:	469c      	mov	ip, r3
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	4484      	add	ip, r0
 8002b6e:	0011      	movs	r1, r2
 8002b70:	4650      	mov	r0, sl
 8002b72:	3908      	subs	r1, #8
 8002b74:	4088      	lsls	r0, r1
 8002b76:	231d      	movs	r3, #29
 8002b78:	4680      	mov	r8, r0
 8002b7a:	4660      	mov	r0, ip
 8002b7c:	1a1b      	subs	r3, r3, r0
 8002b7e:	0020      	movs	r0, r4
 8002b80:	40d8      	lsrs	r0, r3
 8002b82:	0003      	movs	r3, r0
 8002b84:	4640      	mov	r0, r8
 8002b86:	4303      	orrs	r3, r0
 8002b88:	469a      	mov	sl, r3
 8002b8a:	0023      	movs	r3, r4
 8002b8c:	408b      	lsls	r3, r1
 8002b8e:	4698      	mov	r8, r3
 8002b90:	4b6c      	ldr	r3, [pc, #432]	@ (8002d44 <__aeabi_dmul+0x5bc>)
 8002b92:	2500      	movs	r5, #0
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	469b      	mov	fp, r3
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9302      	str	r3, [sp, #8]
 8002b9c:	e61a      	b.n	80027d4 <__aeabi_dmul+0x4c>
 8002b9e:	2d0f      	cmp	r5, #15
 8002ba0:	d000      	beq.n	8002ba4 <__aeabi_dmul+0x41c>
 8002ba2:	e0c9      	b.n	8002d38 <__aeabi_dmul+0x5b0>
 8002ba4:	2380      	movs	r3, #128	@ 0x80
 8002ba6:	4652      	mov	r2, sl
 8002ba8:	031b      	lsls	r3, r3, #12
 8002baa:	421a      	tst	r2, r3
 8002bac:	d002      	beq.n	8002bb4 <__aeabi_dmul+0x42c>
 8002bae:	421c      	tst	r4, r3
 8002bb0:	d100      	bne.n	8002bb4 <__aeabi_dmul+0x42c>
 8002bb2:	e092      	b.n	8002cda <__aeabi_dmul+0x552>
 8002bb4:	2480      	movs	r4, #128	@ 0x80
 8002bb6:	4653      	mov	r3, sl
 8002bb8:	0324      	lsls	r4, r4, #12
 8002bba:	431c      	orrs	r4, r3
 8002bbc:	0324      	lsls	r4, r4, #12
 8002bbe:	4642      	mov	r2, r8
 8002bc0:	0b24      	lsrs	r4, r4, #12
 8002bc2:	e63e      	b.n	8002842 <__aeabi_dmul+0xba>
 8002bc4:	469b      	mov	fp, r3
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	4680      	mov	r8, r0
 8002bca:	250c      	movs	r5, #12
 8002bcc:	9302      	str	r3, [sp, #8]
 8002bce:	e601      	b.n	80027d4 <__aeabi_dmul+0x4c>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	469a      	mov	sl, r3
 8002bd4:	469b      	mov	fp, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	2504      	movs	r5, #4
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	e5fa      	b.n	80027d4 <__aeabi_dmul+0x4c>
 8002bde:	2101      	movs	r1, #1
 8002be0:	430d      	orrs	r5, r1
 8002be2:	2d0a      	cmp	r5, #10
 8002be4:	dd00      	ble.n	8002be8 <__aeabi_dmul+0x460>
 8002be6:	e64b      	b.n	8002880 <__aeabi_dmul+0xf8>
 8002be8:	4649      	mov	r1, r9
 8002bea:	9800      	ldr	r0, [sp, #0]
 8002bec:	4041      	eors	r1, r0
 8002bee:	b2c9      	uxtb	r1, r1
 8002bf0:	9103      	str	r1, [sp, #12]
 8002bf2:	2d02      	cmp	r5, #2
 8002bf4:	dc00      	bgt.n	8002bf8 <__aeabi_dmul+0x470>
 8002bf6:	e096      	b.n	8002d26 <__aeabi_dmul+0x59e>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2400      	movs	r4, #0
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	e60c      	b.n	800281c <__aeabi_dmul+0x94>
 8002c02:	4649      	mov	r1, r9
 8002c04:	2302      	movs	r3, #2
 8002c06:	9a00      	ldr	r2, [sp, #0]
 8002c08:	432b      	orrs	r3, r5
 8002c0a:	4051      	eors	r1, r2
 8002c0c:	b2ca      	uxtb	r2, r1
 8002c0e:	9203      	str	r2, [sp, #12]
 8002c10:	2b0a      	cmp	r3, #10
 8002c12:	dd00      	ble.n	8002c16 <__aeabi_dmul+0x48e>
 8002c14:	e634      	b.n	8002880 <__aeabi_dmul+0xf8>
 8002c16:	2d00      	cmp	r5, #0
 8002c18:	d157      	bne.n	8002cca <__aeabi_dmul+0x542>
 8002c1a:	9b03      	ldr	r3, [sp, #12]
 8002c1c:	4699      	mov	r9, r3
 8002c1e:	2400      	movs	r4, #0
 8002c20:	2200      	movs	r2, #0
 8002c22:	4b49      	ldr	r3, [pc, #292]	@ (8002d48 <__aeabi_dmul+0x5c0>)
 8002c24:	e60e      	b.n	8002844 <__aeabi_dmul+0xbc>
 8002c26:	4658      	mov	r0, fp
 8002c28:	2101      	movs	r1, #1
 8002c2a:	1ac9      	subs	r1, r1, r3
 8002c2c:	2938      	cmp	r1, #56	@ 0x38
 8002c2e:	dd00      	ble.n	8002c32 <__aeabi_dmul+0x4aa>
 8002c30:	e62f      	b.n	8002892 <__aeabi_dmul+0x10a>
 8002c32:	291f      	cmp	r1, #31
 8002c34:	dd56      	ble.n	8002ce4 <__aeabi_dmul+0x55c>
 8002c36:	221f      	movs	r2, #31
 8002c38:	4654      	mov	r4, sl
 8002c3a:	4252      	negs	r2, r2
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	40dc      	lsrs	r4, r3
 8002c40:	2920      	cmp	r1, #32
 8002c42:	d007      	beq.n	8002c54 <__aeabi_dmul+0x4cc>
 8002c44:	4b41      	ldr	r3, [pc, #260]	@ (8002d4c <__aeabi_dmul+0x5c4>)
 8002c46:	4642      	mov	r2, r8
 8002c48:	469c      	mov	ip, r3
 8002c4a:	4653      	mov	r3, sl
 8002c4c:	4460      	add	r0, ip
 8002c4e:	4083      	lsls	r3, r0
 8002c50:	431a      	orrs	r2, r3
 8002c52:	4690      	mov	r8, r2
 8002c54:	4642      	mov	r2, r8
 8002c56:	2107      	movs	r1, #7
 8002c58:	1e53      	subs	r3, r2, #1
 8002c5a:	419a      	sbcs	r2, r3
 8002c5c:	000b      	movs	r3, r1
 8002c5e:	4322      	orrs	r2, r4
 8002c60:	4013      	ands	r3, r2
 8002c62:	2400      	movs	r4, #0
 8002c64:	4211      	tst	r1, r2
 8002c66:	d009      	beq.n	8002c7c <__aeabi_dmul+0x4f4>
 8002c68:	230f      	movs	r3, #15
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d05d      	beq.n	8002d2c <__aeabi_dmul+0x5a4>
 8002c70:	1d11      	adds	r1, r2, #4
 8002c72:	4291      	cmp	r1, r2
 8002c74:	419b      	sbcs	r3, r3
 8002c76:	000a      	movs	r2, r1
 8002c78:	425b      	negs	r3, r3
 8002c7a:	075b      	lsls	r3, r3, #29
 8002c7c:	08d2      	lsrs	r2, r2, #3
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	2300      	movs	r3, #0
 8002c82:	e5df      	b.n	8002844 <__aeabi_dmul+0xbc>
 8002c84:	9b03      	ldr	r3, [sp, #12]
 8002c86:	4699      	mov	r9, r3
 8002c88:	e5fa      	b.n	8002880 <__aeabi_dmul+0xf8>
 8002c8a:	9801      	ldr	r0, [sp, #4]
 8002c8c:	f000 fd1c 	bl	80036c8 <__clzsi2>
 8002c90:	0002      	movs	r2, r0
 8002c92:	0003      	movs	r3, r0
 8002c94:	3215      	adds	r2, #21
 8002c96:	3320      	adds	r3, #32
 8002c98:	2a1c      	cmp	r2, #28
 8002c9a:	dc00      	bgt.n	8002c9e <__aeabi_dmul+0x516>
 8002c9c:	e738      	b.n	8002b10 <__aeabi_dmul+0x388>
 8002c9e:	9a01      	ldr	r2, [sp, #4]
 8002ca0:	3808      	subs	r0, #8
 8002ca2:	4082      	lsls	r2, r0
 8002ca4:	e73f      	b.n	8002b26 <__aeabi_dmul+0x39e>
 8002ca6:	f000 fd0f 	bl	80036c8 <__clzsi2>
 8002caa:	2315      	movs	r3, #21
 8002cac:	469c      	mov	ip, r3
 8002cae:	4484      	add	ip, r0
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	4663      	mov	r3, ip
 8002cb4:	3220      	adds	r2, #32
 8002cb6:	2b1c      	cmp	r3, #28
 8002cb8:	dc00      	bgt.n	8002cbc <__aeabi_dmul+0x534>
 8002cba:	e758      	b.n	8002b6e <__aeabi_dmul+0x3e6>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	4698      	mov	r8, r3
 8002cc0:	0023      	movs	r3, r4
 8002cc2:	3808      	subs	r0, #8
 8002cc4:	4083      	lsls	r3, r0
 8002cc6:	469a      	mov	sl, r3
 8002cc8:	e762      	b.n	8002b90 <__aeabi_dmul+0x408>
 8002cca:	001d      	movs	r5, r3
 8002ccc:	2300      	movs	r3, #0
 8002cce:	2400      	movs	r4, #0
 8002cd0:	2002      	movs	r0, #2
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	e5a2      	b.n	800281c <__aeabi_dmul+0x94>
 8002cd6:	9002      	str	r0, [sp, #8]
 8002cd8:	e632      	b.n	8002940 <__aeabi_dmul+0x1b8>
 8002cda:	431c      	orrs	r4, r3
 8002cdc:	9b00      	ldr	r3, [sp, #0]
 8002cde:	9a01      	ldr	r2, [sp, #4]
 8002ce0:	4699      	mov	r9, r3
 8002ce2:	e5ae      	b.n	8002842 <__aeabi_dmul+0xba>
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <__aeabi_dmul+0x5c8>)
 8002ce6:	4652      	mov	r2, sl
 8002ce8:	18c3      	adds	r3, r0, r3
 8002cea:	4640      	mov	r0, r8
 8002cec:	409a      	lsls	r2, r3
 8002cee:	40c8      	lsrs	r0, r1
 8002cf0:	4302      	orrs	r2, r0
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	4098      	lsls	r0, r3
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	1e58      	subs	r0, r3, #1
 8002cfa:	4183      	sbcs	r3, r0
 8002cfc:	4654      	mov	r4, sl
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	40cc      	lsrs	r4, r1
 8002d02:	0753      	lsls	r3, r2, #29
 8002d04:	d009      	beq.n	8002d1a <__aeabi_dmul+0x592>
 8002d06:	230f      	movs	r3, #15
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d005      	beq.n	8002d1a <__aeabi_dmul+0x592>
 8002d0e:	1d13      	adds	r3, r2, #4
 8002d10:	4293      	cmp	r3, r2
 8002d12:	4192      	sbcs	r2, r2
 8002d14:	4252      	negs	r2, r2
 8002d16:	18a4      	adds	r4, r4, r2
 8002d18:	001a      	movs	r2, r3
 8002d1a:	0223      	lsls	r3, r4, #8
 8002d1c:	d508      	bpl.n	8002d30 <__aeabi_dmul+0x5a8>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	2400      	movs	r4, #0
 8002d22:	2200      	movs	r2, #0
 8002d24:	e58e      	b.n	8002844 <__aeabi_dmul+0xbc>
 8002d26:	4689      	mov	r9, r1
 8002d28:	2400      	movs	r4, #0
 8002d2a:	e58b      	b.n	8002844 <__aeabi_dmul+0xbc>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e7a5      	b.n	8002c7c <__aeabi_dmul+0x4f4>
 8002d30:	0763      	lsls	r3, r4, #29
 8002d32:	0264      	lsls	r4, r4, #9
 8002d34:	0b24      	lsrs	r4, r4, #12
 8002d36:	e7a1      	b.n	8002c7c <__aeabi_dmul+0x4f4>
 8002d38:	9b00      	ldr	r3, [sp, #0]
 8002d3a:	46a2      	mov	sl, r4
 8002d3c:	4699      	mov	r9, r3
 8002d3e:	9b01      	ldr	r3, [sp, #4]
 8002d40:	4698      	mov	r8, r3
 8002d42:	e737      	b.n	8002bb4 <__aeabi_dmul+0x42c>
 8002d44:	fffffc0d 	.word	0xfffffc0d
 8002d48:	000007ff 	.word	0x000007ff
 8002d4c:	0000043e 	.word	0x0000043e
 8002d50:	0000041e 	.word	0x0000041e

08002d54 <__aeabi_dsub>:
 8002d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d56:	4657      	mov	r7, sl
 8002d58:	464e      	mov	r6, r9
 8002d5a:	4645      	mov	r5, r8
 8002d5c:	46de      	mov	lr, fp
 8002d5e:	b5e0      	push	{r5, r6, r7, lr}
 8002d60:	b083      	sub	sp, #12
 8002d62:	9000      	str	r0, [sp, #0]
 8002d64:	9101      	str	r1, [sp, #4]
 8002d66:	030c      	lsls	r4, r1, #12
 8002d68:	004d      	lsls	r5, r1, #1
 8002d6a:	0fce      	lsrs	r6, r1, #31
 8002d6c:	0a61      	lsrs	r1, r4, #9
 8002d6e:	9c00      	ldr	r4, [sp, #0]
 8002d70:	005f      	lsls	r7, r3, #1
 8002d72:	0f64      	lsrs	r4, r4, #29
 8002d74:	430c      	orrs	r4, r1
 8002d76:	9900      	ldr	r1, [sp, #0]
 8002d78:	9200      	str	r2, [sp, #0]
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	00c8      	lsls	r0, r1, #3
 8002d7e:	0319      	lsls	r1, r3, #12
 8002d80:	0d7b      	lsrs	r3, r7, #21
 8002d82:	4699      	mov	r9, r3
 8002d84:	9b01      	ldr	r3, [sp, #4]
 8002d86:	4fcc      	ldr	r7, [pc, #816]	@ (80030b8 <__aeabi_dsub+0x364>)
 8002d88:	0fdb      	lsrs	r3, r3, #31
 8002d8a:	469c      	mov	ip, r3
 8002d8c:	0a4b      	lsrs	r3, r1, #9
 8002d8e:	9900      	ldr	r1, [sp, #0]
 8002d90:	4680      	mov	r8, r0
 8002d92:	0f49      	lsrs	r1, r1, #29
 8002d94:	4319      	orrs	r1, r3
 8002d96:	9b00      	ldr	r3, [sp, #0]
 8002d98:	468b      	mov	fp, r1
 8002d9a:	00da      	lsls	r2, r3, #3
 8002d9c:	4692      	mov	sl, r2
 8002d9e:	0d6d      	lsrs	r5, r5, #21
 8002da0:	45b9      	cmp	r9, r7
 8002da2:	d100      	bne.n	8002da6 <__aeabi_dsub+0x52>
 8002da4:	e0bf      	b.n	8002f26 <__aeabi_dsub+0x1d2>
 8002da6:	2301      	movs	r3, #1
 8002da8:	4661      	mov	r1, ip
 8002daa:	4059      	eors	r1, r3
 8002dac:	464b      	mov	r3, r9
 8002dae:	468c      	mov	ip, r1
 8002db0:	1aeb      	subs	r3, r5, r3
 8002db2:	428e      	cmp	r6, r1
 8002db4:	d075      	beq.n	8002ea2 <__aeabi_dsub+0x14e>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	dc00      	bgt.n	8002dbc <__aeabi_dsub+0x68>
 8002dba:	e2a3      	b.n	8003304 <__aeabi_dsub+0x5b0>
 8002dbc:	4649      	mov	r1, r9
 8002dbe:	2900      	cmp	r1, #0
 8002dc0:	d100      	bne.n	8002dc4 <__aeabi_dsub+0x70>
 8002dc2:	e0ce      	b.n	8002f62 <__aeabi_dsub+0x20e>
 8002dc4:	42bd      	cmp	r5, r7
 8002dc6:	d100      	bne.n	8002dca <__aeabi_dsub+0x76>
 8002dc8:	e200      	b.n	80031cc <__aeabi_dsub+0x478>
 8002dca:	2701      	movs	r7, #1
 8002dcc:	2b38      	cmp	r3, #56	@ 0x38
 8002dce:	dc19      	bgt.n	8002e04 <__aeabi_dsub+0xb0>
 8002dd0:	2780      	movs	r7, #128	@ 0x80
 8002dd2:	4659      	mov	r1, fp
 8002dd4:	043f      	lsls	r7, r7, #16
 8002dd6:	4339      	orrs	r1, r7
 8002dd8:	468b      	mov	fp, r1
 8002dda:	2b1f      	cmp	r3, #31
 8002ddc:	dd00      	ble.n	8002de0 <__aeabi_dsub+0x8c>
 8002dde:	e1fa      	b.n	80031d6 <__aeabi_dsub+0x482>
 8002de0:	2720      	movs	r7, #32
 8002de2:	1af9      	subs	r1, r7, r3
 8002de4:	468c      	mov	ip, r1
 8002de6:	4659      	mov	r1, fp
 8002de8:	4667      	mov	r7, ip
 8002dea:	40b9      	lsls	r1, r7
 8002dec:	000f      	movs	r7, r1
 8002dee:	0011      	movs	r1, r2
 8002df0:	40d9      	lsrs	r1, r3
 8002df2:	430f      	orrs	r7, r1
 8002df4:	4661      	mov	r1, ip
 8002df6:	408a      	lsls	r2, r1
 8002df8:	1e51      	subs	r1, r2, #1
 8002dfa:	418a      	sbcs	r2, r1
 8002dfc:	4659      	mov	r1, fp
 8002dfe:	40d9      	lsrs	r1, r3
 8002e00:	4317      	orrs	r7, r2
 8002e02:	1a64      	subs	r4, r4, r1
 8002e04:	1bc7      	subs	r7, r0, r7
 8002e06:	42b8      	cmp	r0, r7
 8002e08:	4180      	sbcs	r0, r0
 8002e0a:	4240      	negs	r0, r0
 8002e0c:	1a24      	subs	r4, r4, r0
 8002e0e:	0223      	lsls	r3, r4, #8
 8002e10:	d400      	bmi.n	8002e14 <__aeabi_dsub+0xc0>
 8002e12:	e140      	b.n	8003096 <__aeabi_dsub+0x342>
 8002e14:	0264      	lsls	r4, r4, #9
 8002e16:	0a64      	lsrs	r4, r4, #9
 8002e18:	2c00      	cmp	r4, #0
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0xca>
 8002e1c:	e154      	b.n	80030c8 <__aeabi_dsub+0x374>
 8002e1e:	0020      	movs	r0, r4
 8002e20:	f000 fc52 	bl	80036c8 <__clzsi2>
 8002e24:	0003      	movs	r3, r0
 8002e26:	3b08      	subs	r3, #8
 8002e28:	2120      	movs	r1, #32
 8002e2a:	0038      	movs	r0, r7
 8002e2c:	1aca      	subs	r2, r1, r3
 8002e2e:	40d0      	lsrs	r0, r2
 8002e30:	409c      	lsls	r4, r3
 8002e32:	0002      	movs	r2, r0
 8002e34:	409f      	lsls	r7, r3
 8002e36:	4322      	orrs	r2, r4
 8002e38:	429d      	cmp	r5, r3
 8002e3a:	dd00      	ble.n	8002e3e <__aeabi_dsub+0xea>
 8002e3c:	e1a6      	b.n	800318c <__aeabi_dsub+0x438>
 8002e3e:	1b58      	subs	r0, r3, r5
 8002e40:	3001      	adds	r0, #1
 8002e42:	1a09      	subs	r1, r1, r0
 8002e44:	003c      	movs	r4, r7
 8002e46:	408f      	lsls	r7, r1
 8002e48:	40c4      	lsrs	r4, r0
 8002e4a:	1e7b      	subs	r3, r7, #1
 8002e4c:	419f      	sbcs	r7, r3
 8002e4e:	0013      	movs	r3, r2
 8002e50:	408b      	lsls	r3, r1
 8002e52:	4327      	orrs	r7, r4
 8002e54:	431f      	orrs	r7, r3
 8002e56:	40c2      	lsrs	r2, r0
 8002e58:	003b      	movs	r3, r7
 8002e5a:	0014      	movs	r4, r2
 8002e5c:	2500      	movs	r5, #0
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	d100      	bne.n	8002e64 <__aeabi_dsub+0x110>
 8002e62:	e1f7      	b.n	8003254 <__aeabi_dsub+0x500>
 8002e64:	077b      	lsls	r3, r7, #29
 8002e66:	d100      	bne.n	8002e6a <__aeabi_dsub+0x116>
 8002e68:	e377      	b.n	800355a <__aeabi_dsub+0x806>
 8002e6a:	230f      	movs	r3, #15
 8002e6c:	0038      	movs	r0, r7
 8002e6e:	403b      	ands	r3, r7
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d004      	beq.n	8002e7e <__aeabi_dsub+0x12a>
 8002e74:	1d38      	adds	r0, r7, #4
 8002e76:	42b8      	cmp	r0, r7
 8002e78:	41bf      	sbcs	r7, r7
 8002e7a:	427f      	negs	r7, r7
 8002e7c:	19e4      	adds	r4, r4, r7
 8002e7e:	0223      	lsls	r3, r4, #8
 8002e80:	d400      	bmi.n	8002e84 <__aeabi_dsub+0x130>
 8002e82:	e368      	b.n	8003556 <__aeabi_dsub+0x802>
 8002e84:	4b8c      	ldr	r3, [pc, #560]	@ (80030b8 <__aeabi_dsub+0x364>)
 8002e86:	3501      	adds	r5, #1
 8002e88:	429d      	cmp	r5, r3
 8002e8a:	d100      	bne.n	8002e8e <__aeabi_dsub+0x13a>
 8002e8c:	e0f4      	b.n	8003078 <__aeabi_dsub+0x324>
 8002e8e:	4b8b      	ldr	r3, [pc, #556]	@ (80030bc <__aeabi_dsub+0x368>)
 8002e90:	056d      	lsls	r5, r5, #21
 8002e92:	401c      	ands	r4, r3
 8002e94:	0d6d      	lsrs	r5, r5, #21
 8002e96:	0767      	lsls	r7, r4, #29
 8002e98:	08c0      	lsrs	r0, r0, #3
 8002e9a:	0264      	lsls	r4, r4, #9
 8002e9c:	4307      	orrs	r7, r0
 8002e9e:	0b24      	lsrs	r4, r4, #12
 8002ea0:	e0ec      	b.n	800307c <__aeabi_dsub+0x328>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	dc00      	bgt.n	8002ea8 <__aeabi_dsub+0x154>
 8002ea6:	e329      	b.n	80034fc <__aeabi_dsub+0x7a8>
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	2900      	cmp	r1, #0
 8002eac:	d000      	beq.n	8002eb0 <__aeabi_dsub+0x15c>
 8002eae:	e0d6      	b.n	800305e <__aeabi_dsub+0x30a>
 8002eb0:	4659      	mov	r1, fp
 8002eb2:	4311      	orrs	r1, r2
 8002eb4:	d100      	bne.n	8002eb8 <__aeabi_dsub+0x164>
 8002eb6:	e12e      	b.n	8003116 <__aeabi_dsub+0x3c2>
 8002eb8:	1e59      	subs	r1, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d100      	bne.n	8002ec0 <__aeabi_dsub+0x16c>
 8002ebe:	e1e6      	b.n	800328e <__aeabi_dsub+0x53a>
 8002ec0:	42bb      	cmp	r3, r7
 8002ec2:	d100      	bne.n	8002ec6 <__aeabi_dsub+0x172>
 8002ec4:	e182      	b.n	80031cc <__aeabi_dsub+0x478>
 8002ec6:	2701      	movs	r7, #1
 8002ec8:	000b      	movs	r3, r1
 8002eca:	2938      	cmp	r1, #56	@ 0x38
 8002ecc:	dc14      	bgt.n	8002ef8 <__aeabi_dsub+0x1a4>
 8002ece:	2b1f      	cmp	r3, #31
 8002ed0:	dd00      	ble.n	8002ed4 <__aeabi_dsub+0x180>
 8002ed2:	e23c      	b.n	800334e <__aeabi_dsub+0x5fa>
 8002ed4:	2720      	movs	r7, #32
 8002ed6:	1af9      	subs	r1, r7, r3
 8002ed8:	468c      	mov	ip, r1
 8002eda:	4659      	mov	r1, fp
 8002edc:	4667      	mov	r7, ip
 8002ede:	40b9      	lsls	r1, r7
 8002ee0:	000f      	movs	r7, r1
 8002ee2:	0011      	movs	r1, r2
 8002ee4:	40d9      	lsrs	r1, r3
 8002ee6:	430f      	orrs	r7, r1
 8002ee8:	4661      	mov	r1, ip
 8002eea:	408a      	lsls	r2, r1
 8002eec:	1e51      	subs	r1, r2, #1
 8002eee:	418a      	sbcs	r2, r1
 8002ef0:	4659      	mov	r1, fp
 8002ef2:	40d9      	lsrs	r1, r3
 8002ef4:	4317      	orrs	r7, r2
 8002ef6:	1864      	adds	r4, r4, r1
 8002ef8:	183f      	adds	r7, r7, r0
 8002efa:	4287      	cmp	r7, r0
 8002efc:	4180      	sbcs	r0, r0
 8002efe:	4240      	negs	r0, r0
 8002f00:	1824      	adds	r4, r4, r0
 8002f02:	0223      	lsls	r3, r4, #8
 8002f04:	d400      	bmi.n	8002f08 <__aeabi_dsub+0x1b4>
 8002f06:	e0c6      	b.n	8003096 <__aeabi_dsub+0x342>
 8002f08:	4b6b      	ldr	r3, [pc, #428]	@ (80030b8 <__aeabi_dsub+0x364>)
 8002f0a:	3501      	adds	r5, #1
 8002f0c:	429d      	cmp	r5, r3
 8002f0e:	d100      	bne.n	8002f12 <__aeabi_dsub+0x1be>
 8002f10:	e0b2      	b.n	8003078 <__aeabi_dsub+0x324>
 8002f12:	2101      	movs	r1, #1
 8002f14:	4b69      	ldr	r3, [pc, #420]	@ (80030bc <__aeabi_dsub+0x368>)
 8002f16:	087a      	lsrs	r2, r7, #1
 8002f18:	401c      	ands	r4, r3
 8002f1a:	4039      	ands	r1, r7
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	07e7      	lsls	r7, r4, #31
 8002f20:	4317      	orrs	r7, r2
 8002f22:	0864      	lsrs	r4, r4, #1
 8002f24:	e79e      	b.n	8002e64 <__aeabi_dsub+0x110>
 8002f26:	4b66      	ldr	r3, [pc, #408]	@ (80030c0 <__aeabi_dsub+0x36c>)
 8002f28:	4311      	orrs	r1, r2
 8002f2a:	468a      	mov	sl, r1
 8002f2c:	18eb      	adds	r3, r5, r3
 8002f2e:	2900      	cmp	r1, #0
 8002f30:	d028      	beq.n	8002f84 <__aeabi_dsub+0x230>
 8002f32:	4566      	cmp	r6, ip
 8002f34:	d02c      	beq.n	8002f90 <__aeabi_dsub+0x23c>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d05b      	beq.n	8002ff2 <__aeabi_dsub+0x29e>
 8002f3a:	2d00      	cmp	r5, #0
 8002f3c:	d100      	bne.n	8002f40 <__aeabi_dsub+0x1ec>
 8002f3e:	e12c      	b.n	800319a <__aeabi_dsub+0x446>
 8002f40:	465b      	mov	r3, fp
 8002f42:	4666      	mov	r6, ip
 8002f44:	075f      	lsls	r7, r3, #29
 8002f46:	08d2      	lsrs	r2, r2, #3
 8002f48:	4317      	orrs	r7, r2
 8002f4a:	08dd      	lsrs	r5, r3, #3
 8002f4c:	003b      	movs	r3, r7
 8002f4e:	432b      	orrs	r3, r5
 8002f50:	d100      	bne.n	8002f54 <__aeabi_dsub+0x200>
 8002f52:	e0e2      	b.n	800311a <__aeabi_dsub+0x3c6>
 8002f54:	2480      	movs	r4, #128	@ 0x80
 8002f56:	0324      	lsls	r4, r4, #12
 8002f58:	432c      	orrs	r4, r5
 8002f5a:	0324      	lsls	r4, r4, #12
 8002f5c:	4d56      	ldr	r5, [pc, #344]	@ (80030b8 <__aeabi_dsub+0x364>)
 8002f5e:	0b24      	lsrs	r4, r4, #12
 8002f60:	e08c      	b.n	800307c <__aeabi_dsub+0x328>
 8002f62:	4659      	mov	r1, fp
 8002f64:	4311      	orrs	r1, r2
 8002f66:	d100      	bne.n	8002f6a <__aeabi_dsub+0x216>
 8002f68:	e0d5      	b.n	8003116 <__aeabi_dsub+0x3c2>
 8002f6a:	1e59      	subs	r1, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x21e>
 8002f70:	e1b9      	b.n	80032e6 <__aeabi_dsub+0x592>
 8002f72:	42bb      	cmp	r3, r7
 8002f74:	d100      	bne.n	8002f78 <__aeabi_dsub+0x224>
 8002f76:	e1b1      	b.n	80032dc <__aeabi_dsub+0x588>
 8002f78:	2701      	movs	r7, #1
 8002f7a:	000b      	movs	r3, r1
 8002f7c:	2938      	cmp	r1, #56	@ 0x38
 8002f7e:	dd00      	ble.n	8002f82 <__aeabi_dsub+0x22e>
 8002f80:	e740      	b.n	8002e04 <__aeabi_dsub+0xb0>
 8002f82:	e72a      	b.n	8002dda <__aeabi_dsub+0x86>
 8002f84:	4661      	mov	r1, ip
 8002f86:	2701      	movs	r7, #1
 8002f88:	4079      	eors	r1, r7
 8002f8a:	468c      	mov	ip, r1
 8002f8c:	4566      	cmp	r6, ip
 8002f8e:	d1d2      	bne.n	8002f36 <__aeabi_dsub+0x1e2>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x242>
 8002f94:	e0c5      	b.n	8003122 <__aeabi_dsub+0x3ce>
 8002f96:	2d00      	cmp	r5, #0
 8002f98:	d000      	beq.n	8002f9c <__aeabi_dsub+0x248>
 8002f9a:	e155      	b.n	8003248 <__aeabi_dsub+0x4f4>
 8002f9c:	464b      	mov	r3, r9
 8002f9e:	0025      	movs	r5, r4
 8002fa0:	4305      	orrs	r5, r0
 8002fa2:	d100      	bne.n	8002fa6 <__aeabi_dsub+0x252>
 8002fa4:	e212      	b.n	80033cc <__aeabi_dsub+0x678>
 8002fa6:	1e59      	subs	r1, r3, #1
 8002fa8:	468c      	mov	ip, r1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d100      	bne.n	8002fb0 <__aeabi_dsub+0x25c>
 8002fae:	e249      	b.n	8003444 <__aeabi_dsub+0x6f0>
 8002fb0:	4d41      	ldr	r5, [pc, #260]	@ (80030b8 <__aeabi_dsub+0x364>)
 8002fb2:	42ab      	cmp	r3, r5
 8002fb4:	d100      	bne.n	8002fb8 <__aeabi_dsub+0x264>
 8002fb6:	e28f      	b.n	80034d8 <__aeabi_dsub+0x784>
 8002fb8:	2701      	movs	r7, #1
 8002fba:	2938      	cmp	r1, #56	@ 0x38
 8002fbc:	dc11      	bgt.n	8002fe2 <__aeabi_dsub+0x28e>
 8002fbe:	4663      	mov	r3, ip
 8002fc0:	2b1f      	cmp	r3, #31
 8002fc2:	dd00      	ble.n	8002fc6 <__aeabi_dsub+0x272>
 8002fc4:	e25b      	b.n	800347e <__aeabi_dsub+0x72a>
 8002fc6:	4661      	mov	r1, ip
 8002fc8:	2320      	movs	r3, #32
 8002fca:	0027      	movs	r7, r4
 8002fcc:	1a5b      	subs	r3, r3, r1
 8002fce:	0005      	movs	r5, r0
 8002fd0:	4098      	lsls	r0, r3
 8002fd2:	409f      	lsls	r7, r3
 8002fd4:	40cd      	lsrs	r5, r1
 8002fd6:	1e43      	subs	r3, r0, #1
 8002fd8:	4198      	sbcs	r0, r3
 8002fda:	40cc      	lsrs	r4, r1
 8002fdc:	432f      	orrs	r7, r5
 8002fde:	4307      	orrs	r7, r0
 8002fe0:	44a3      	add	fp, r4
 8002fe2:	18bf      	adds	r7, r7, r2
 8002fe4:	4297      	cmp	r7, r2
 8002fe6:	4192      	sbcs	r2, r2
 8002fe8:	4252      	negs	r2, r2
 8002fea:	445a      	add	r2, fp
 8002fec:	0014      	movs	r4, r2
 8002fee:	464d      	mov	r5, r9
 8002ff0:	e787      	b.n	8002f02 <__aeabi_dsub+0x1ae>
 8002ff2:	4f34      	ldr	r7, [pc, #208]	@ (80030c4 <__aeabi_dsub+0x370>)
 8002ff4:	1c6b      	adds	r3, r5, #1
 8002ff6:	423b      	tst	r3, r7
 8002ff8:	d000      	beq.n	8002ffc <__aeabi_dsub+0x2a8>
 8002ffa:	e0b6      	b.n	800316a <__aeabi_dsub+0x416>
 8002ffc:	4659      	mov	r1, fp
 8002ffe:	0023      	movs	r3, r4
 8003000:	4311      	orrs	r1, r2
 8003002:	000f      	movs	r7, r1
 8003004:	4303      	orrs	r3, r0
 8003006:	2d00      	cmp	r5, #0
 8003008:	d000      	beq.n	800300c <__aeabi_dsub+0x2b8>
 800300a:	e126      	b.n	800325a <__aeabi_dsub+0x506>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d100      	bne.n	8003012 <__aeabi_dsub+0x2be>
 8003010:	e1c0      	b.n	8003394 <__aeabi_dsub+0x640>
 8003012:	2900      	cmp	r1, #0
 8003014:	d100      	bne.n	8003018 <__aeabi_dsub+0x2c4>
 8003016:	e0a1      	b.n	800315c <__aeabi_dsub+0x408>
 8003018:	1a83      	subs	r3, r0, r2
 800301a:	4698      	mov	r8, r3
 800301c:	465b      	mov	r3, fp
 800301e:	4540      	cmp	r0, r8
 8003020:	41ad      	sbcs	r5, r5
 8003022:	1ae3      	subs	r3, r4, r3
 8003024:	426d      	negs	r5, r5
 8003026:	1b5b      	subs	r3, r3, r5
 8003028:	2580      	movs	r5, #128	@ 0x80
 800302a:	042d      	lsls	r5, r5, #16
 800302c:	422b      	tst	r3, r5
 800302e:	d100      	bne.n	8003032 <__aeabi_dsub+0x2de>
 8003030:	e14b      	b.n	80032ca <__aeabi_dsub+0x576>
 8003032:	465b      	mov	r3, fp
 8003034:	1a10      	subs	r0, r2, r0
 8003036:	4282      	cmp	r2, r0
 8003038:	4192      	sbcs	r2, r2
 800303a:	1b1c      	subs	r4, r3, r4
 800303c:	0007      	movs	r7, r0
 800303e:	2601      	movs	r6, #1
 8003040:	4663      	mov	r3, ip
 8003042:	4252      	negs	r2, r2
 8003044:	1aa4      	subs	r4, r4, r2
 8003046:	4327      	orrs	r7, r4
 8003048:	401e      	ands	r6, r3
 800304a:	2f00      	cmp	r7, #0
 800304c:	d100      	bne.n	8003050 <__aeabi_dsub+0x2fc>
 800304e:	e142      	b.n	80032d6 <__aeabi_dsub+0x582>
 8003050:	422c      	tst	r4, r5
 8003052:	d100      	bne.n	8003056 <__aeabi_dsub+0x302>
 8003054:	e26d      	b.n	8003532 <__aeabi_dsub+0x7de>
 8003056:	4b19      	ldr	r3, [pc, #100]	@ (80030bc <__aeabi_dsub+0x368>)
 8003058:	2501      	movs	r5, #1
 800305a:	401c      	ands	r4, r3
 800305c:	e71b      	b.n	8002e96 <__aeabi_dsub+0x142>
 800305e:	42bd      	cmp	r5, r7
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x310>
 8003062:	e13b      	b.n	80032dc <__aeabi_dsub+0x588>
 8003064:	2701      	movs	r7, #1
 8003066:	2b38      	cmp	r3, #56	@ 0x38
 8003068:	dd00      	ble.n	800306c <__aeabi_dsub+0x318>
 800306a:	e745      	b.n	8002ef8 <__aeabi_dsub+0x1a4>
 800306c:	2780      	movs	r7, #128	@ 0x80
 800306e:	4659      	mov	r1, fp
 8003070:	043f      	lsls	r7, r7, #16
 8003072:	4339      	orrs	r1, r7
 8003074:	468b      	mov	fp, r1
 8003076:	e72a      	b.n	8002ece <__aeabi_dsub+0x17a>
 8003078:	2400      	movs	r4, #0
 800307a:	2700      	movs	r7, #0
 800307c:	052d      	lsls	r5, r5, #20
 800307e:	4325      	orrs	r5, r4
 8003080:	07f6      	lsls	r6, r6, #31
 8003082:	4335      	orrs	r5, r6
 8003084:	0038      	movs	r0, r7
 8003086:	0029      	movs	r1, r5
 8003088:	b003      	add	sp, #12
 800308a:	bcf0      	pop	{r4, r5, r6, r7}
 800308c:	46bb      	mov	fp, r7
 800308e:	46b2      	mov	sl, r6
 8003090:	46a9      	mov	r9, r5
 8003092:	46a0      	mov	r8, r4
 8003094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003096:	077b      	lsls	r3, r7, #29
 8003098:	d004      	beq.n	80030a4 <__aeabi_dsub+0x350>
 800309a:	230f      	movs	r3, #15
 800309c:	403b      	ands	r3, r7
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d000      	beq.n	80030a4 <__aeabi_dsub+0x350>
 80030a2:	e6e7      	b.n	8002e74 <__aeabi_dsub+0x120>
 80030a4:	002b      	movs	r3, r5
 80030a6:	08f8      	lsrs	r0, r7, #3
 80030a8:	4a03      	ldr	r2, [pc, #12]	@ (80030b8 <__aeabi_dsub+0x364>)
 80030aa:	0767      	lsls	r7, r4, #29
 80030ac:	4307      	orrs	r7, r0
 80030ae:	08e5      	lsrs	r5, r4, #3
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d100      	bne.n	80030b6 <__aeabi_dsub+0x362>
 80030b4:	e74a      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80030b6:	e0a5      	b.n	8003204 <__aeabi_dsub+0x4b0>
 80030b8:	000007ff 	.word	0x000007ff
 80030bc:	ff7fffff 	.word	0xff7fffff
 80030c0:	fffff801 	.word	0xfffff801
 80030c4:	000007fe 	.word	0x000007fe
 80030c8:	0038      	movs	r0, r7
 80030ca:	f000 fafd 	bl	80036c8 <__clzsi2>
 80030ce:	0003      	movs	r3, r0
 80030d0:	3318      	adds	r3, #24
 80030d2:	2b1f      	cmp	r3, #31
 80030d4:	dc00      	bgt.n	80030d8 <__aeabi_dsub+0x384>
 80030d6:	e6a7      	b.n	8002e28 <__aeabi_dsub+0xd4>
 80030d8:	003a      	movs	r2, r7
 80030da:	3808      	subs	r0, #8
 80030dc:	4082      	lsls	r2, r0
 80030de:	429d      	cmp	r5, r3
 80030e0:	dd00      	ble.n	80030e4 <__aeabi_dsub+0x390>
 80030e2:	e08a      	b.n	80031fa <__aeabi_dsub+0x4a6>
 80030e4:	1b5b      	subs	r3, r3, r5
 80030e6:	1c58      	adds	r0, r3, #1
 80030e8:	281f      	cmp	r0, #31
 80030ea:	dc00      	bgt.n	80030ee <__aeabi_dsub+0x39a>
 80030ec:	e1d8      	b.n	80034a0 <__aeabi_dsub+0x74c>
 80030ee:	0017      	movs	r7, r2
 80030f0:	3b1f      	subs	r3, #31
 80030f2:	40df      	lsrs	r7, r3
 80030f4:	2820      	cmp	r0, #32
 80030f6:	d005      	beq.n	8003104 <__aeabi_dsub+0x3b0>
 80030f8:	2340      	movs	r3, #64	@ 0x40
 80030fa:	1a1b      	subs	r3, r3, r0
 80030fc:	409a      	lsls	r2, r3
 80030fe:	1e53      	subs	r3, r2, #1
 8003100:	419a      	sbcs	r2, r3
 8003102:	4317      	orrs	r7, r2
 8003104:	2500      	movs	r5, #0
 8003106:	2f00      	cmp	r7, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x3b8>
 800310a:	e0e5      	b.n	80032d8 <__aeabi_dsub+0x584>
 800310c:	077b      	lsls	r3, r7, #29
 800310e:	d000      	beq.n	8003112 <__aeabi_dsub+0x3be>
 8003110:	e6ab      	b.n	8002e6a <__aeabi_dsub+0x116>
 8003112:	002c      	movs	r4, r5
 8003114:	e7c6      	b.n	80030a4 <__aeabi_dsub+0x350>
 8003116:	08c0      	lsrs	r0, r0, #3
 8003118:	e7c6      	b.n	80030a8 <__aeabi_dsub+0x354>
 800311a:	2700      	movs	r7, #0
 800311c:	2400      	movs	r4, #0
 800311e:	4dd1      	ldr	r5, [pc, #836]	@ (8003464 <__aeabi_dsub+0x710>)
 8003120:	e7ac      	b.n	800307c <__aeabi_dsub+0x328>
 8003122:	4fd1      	ldr	r7, [pc, #836]	@ (8003468 <__aeabi_dsub+0x714>)
 8003124:	1c6b      	adds	r3, r5, #1
 8003126:	423b      	tst	r3, r7
 8003128:	d171      	bne.n	800320e <__aeabi_dsub+0x4ba>
 800312a:	0023      	movs	r3, r4
 800312c:	4303      	orrs	r3, r0
 800312e:	2d00      	cmp	r5, #0
 8003130:	d000      	beq.n	8003134 <__aeabi_dsub+0x3e0>
 8003132:	e14e      	b.n	80033d2 <__aeabi_dsub+0x67e>
 8003134:	4657      	mov	r7, sl
 8003136:	2b00      	cmp	r3, #0
 8003138:	d100      	bne.n	800313c <__aeabi_dsub+0x3e8>
 800313a:	e1b5      	b.n	80034a8 <__aeabi_dsub+0x754>
 800313c:	2f00      	cmp	r7, #0
 800313e:	d00d      	beq.n	800315c <__aeabi_dsub+0x408>
 8003140:	1883      	adds	r3, r0, r2
 8003142:	4283      	cmp	r3, r0
 8003144:	4180      	sbcs	r0, r0
 8003146:	445c      	add	r4, fp
 8003148:	4240      	negs	r0, r0
 800314a:	1824      	adds	r4, r4, r0
 800314c:	0222      	lsls	r2, r4, #8
 800314e:	d500      	bpl.n	8003152 <__aeabi_dsub+0x3fe>
 8003150:	e1c8      	b.n	80034e4 <__aeabi_dsub+0x790>
 8003152:	001f      	movs	r7, r3
 8003154:	4698      	mov	r8, r3
 8003156:	4327      	orrs	r7, r4
 8003158:	d100      	bne.n	800315c <__aeabi_dsub+0x408>
 800315a:	e0bc      	b.n	80032d6 <__aeabi_dsub+0x582>
 800315c:	4643      	mov	r3, r8
 800315e:	0767      	lsls	r7, r4, #29
 8003160:	08db      	lsrs	r3, r3, #3
 8003162:	431f      	orrs	r7, r3
 8003164:	08e5      	lsrs	r5, r4, #3
 8003166:	2300      	movs	r3, #0
 8003168:	e04c      	b.n	8003204 <__aeabi_dsub+0x4b0>
 800316a:	1a83      	subs	r3, r0, r2
 800316c:	4698      	mov	r8, r3
 800316e:	465b      	mov	r3, fp
 8003170:	4540      	cmp	r0, r8
 8003172:	41bf      	sbcs	r7, r7
 8003174:	1ae3      	subs	r3, r4, r3
 8003176:	427f      	negs	r7, r7
 8003178:	1bdb      	subs	r3, r3, r7
 800317a:	021f      	lsls	r7, r3, #8
 800317c:	d47c      	bmi.n	8003278 <__aeabi_dsub+0x524>
 800317e:	4647      	mov	r7, r8
 8003180:	431f      	orrs	r7, r3
 8003182:	d100      	bne.n	8003186 <__aeabi_dsub+0x432>
 8003184:	e0a6      	b.n	80032d4 <__aeabi_dsub+0x580>
 8003186:	001c      	movs	r4, r3
 8003188:	4647      	mov	r7, r8
 800318a:	e645      	b.n	8002e18 <__aeabi_dsub+0xc4>
 800318c:	4cb7      	ldr	r4, [pc, #732]	@ (800346c <__aeabi_dsub+0x718>)
 800318e:	1aed      	subs	r5, r5, r3
 8003190:	4014      	ands	r4, r2
 8003192:	077b      	lsls	r3, r7, #29
 8003194:	d000      	beq.n	8003198 <__aeabi_dsub+0x444>
 8003196:	e780      	b.n	800309a <__aeabi_dsub+0x346>
 8003198:	e784      	b.n	80030a4 <__aeabi_dsub+0x350>
 800319a:	464b      	mov	r3, r9
 800319c:	0025      	movs	r5, r4
 800319e:	4305      	orrs	r5, r0
 80031a0:	d066      	beq.n	8003270 <__aeabi_dsub+0x51c>
 80031a2:	1e5f      	subs	r7, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x456>
 80031a8:	e0fc      	b.n	80033a4 <__aeabi_dsub+0x650>
 80031aa:	4dae      	ldr	r5, [pc, #696]	@ (8003464 <__aeabi_dsub+0x710>)
 80031ac:	42ab      	cmp	r3, r5
 80031ae:	d100      	bne.n	80031b2 <__aeabi_dsub+0x45e>
 80031b0:	e15e      	b.n	8003470 <__aeabi_dsub+0x71c>
 80031b2:	4666      	mov	r6, ip
 80031b4:	2f38      	cmp	r7, #56	@ 0x38
 80031b6:	dc00      	bgt.n	80031ba <__aeabi_dsub+0x466>
 80031b8:	e0b4      	b.n	8003324 <__aeabi_dsub+0x5d0>
 80031ba:	2001      	movs	r0, #1
 80031bc:	1a17      	subs	r7, r2, r0
 80031be:	42ba      	cmp	r2, r7
 80031c0:	4192      	sbcs	r2, r2
 80031c2:	465b      	mov	r3, fp
 80031c4:	4252      	negs	r2, r2
 80031c6:	464d      	mov	r5, r9
 80031c8:	1a9c      	subs	r4, r3, r2
 80031ca:	e620      	b.n	8002e0e <__aeabi_dsub+0xba>
 80031cc:	0767      	lsls	r7, r4, #29
 80031ce:	08c0      	lsrs	r0, r0, #3
 80031d0:	4307      	orrs	r7, r0
 80031d2:	08e5      	lsrs	r5, r4, #3
 80031d4:	e6ba      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80031d6:	001f      	movs	r7, r3
 80031d8:	4659      	mov	r1, fp
 80031da:	3f20      	subs	r7, #32
 80031dc:	40f9      	lsrs	r1, r7
 80031de:	000f      	movs	r7, r1
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d005      	beq.n	80031f0 <__aeabi_dsub+0x49c>
 80031e4:	2140      	movs	r1, #64	@ 0x40
 80031e6:	1acb      	subs	r3, r1, r3
 80031e8:	4659      	mov	r1, fp
 80031ea:	4099      	lsls	r1, r3
 80031ec:	430a      	orrs	r2, r1
 80031ee:	4692      	mov	sl, r2
 80031f0:	4653      	mov	r3, sl
 80031f2:	1e5a      	subs	r2, r3, #1
 80031f4:	4193      	sbcs	r3, r2
 80031f6:	431f      	orrs	r7, r3
 80031f8:	e604      	b.n	8002e04 <__aeabi_dsub+0xb0>
 80031fa:	1aeb      	subs	r3, r5, r3
 80031fc:	4d9b      	ldr	r5, [pc, #620]	@ (800346c <__aeabi_dsub+0x718>)
 80031fe:	4015      	ands	r5, r2
 8003200:	076f      	lsls	r7, r5, #29
 8003202:	08ed      	lsrs	r5, r5, #3
 8003204:	032c      	lsls	r4, r5, #12
 8003206:	055d      	lsls	r5, r3, #21
 8003208:	0b24      	lsrs	r4, r4, #12
 800320a:	0d6d      	lsrs	r5, r5, #21
 800320c:	e736      	b.n	800307c <__aeabi_dsub+0x328>
 800320e:	4d95      	ldr	r5, [pc, #596]	@ (8003464 <__aeabi_dsub+0x710>)
 8003210:	42ab      	cmp	r3, r5
 8003212:	d100      	bne.n	8003216 <__aeabi_dsub+0x4c2>
 8003214:	e0d6      	b.n	80033c4 <__aeabi_dsub+0x670>
 8003216:	1882      	adds	r2, r0, r2
 8003218:	0021      	movs	r1, r4
 800321a:	4282      	cmp	r2, r0
 800321c:	4180      	sbcs	r0, r0
 800321e:	4459      	add	r1, fp
 8003220:	4240      	negs	r0, r0
 8003222:	1808      	adds	r0, r1, r0
 8003224:	07c7      	lsls	r7, r0, #31
 8003226:	0852      	lsrs	r2, r2, #1
 8003228:	4317      	orrs	r7, r2
 800322a:	0844      	lsrs	r4, r0, #1
 800322c:	0752      	lsls	r2, r2, #29
 800322e:	d400      	bmi.n	8003232 <__aeabi_dsub+0x4de>
 8003230:	e185      	b.n	800353e <__aeabi_dsub+0x7ea>
 8003232:	220f      	movs	r2, #15
 8003234:	001d      	movs	r5, r3
 8003236:	403a      	ands	r2, r7
 8003238:	2a04      	cmp	r2, #4
 800323a:	d000      	beq.n	800323e <__aeabi_dsub+0x4ea>
 800323c:	e61a      	b.n	8002e74 <__aeabi_dsub+0x120>
 800323e:	08ff      	lsrs	r7, r7, #3
 8003240:	0764      	lsls	r4, r4, #29
 8003242:	4327      	orrs	r7, r4
 8003244:	0905      	lsrs	r5, r0, #4
 8003246:	e7dd      	b.n	8003204 <__aeabi_dsub+0x4b0>
 8003248:	465b      	mov	r3, fp
 800324a:	08d2      	lsrs	r2, r2, #3
 800324c:	075f      	lsls	r7, r3, #29
 800324e:	4317      	orrs	r7, r2
 8003250:	08dd      	lsrs	r5, r3, #3
 8003252:	e67b      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 8003254:	2700      	movs	r7, #0
 8003256:	2400      	movs	r4, #0
 8003258:	e710      	b.n	800307c <__aeabi_dsub+0x328>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d000      	beq.n	8003260 <__aeabi_dsub+0x50c>
 800325e:	e0d6      	b.n	800340e <__aeabi_dsub+0x6ba>
 8003260:	2900      	cmp	r1, #0
 8003262:	d000      	beq.n	8003266 <__aeabi_dsub+0x512>
 8003264:	e12f      	b.n	80034c6 <__aeabi_dsub+0x772>
 8003266:	2480      	movs	r4, #128	@ 0x80
 8003268:	2600      	movs	r6, #0
 800326a:	4d7e      	ldr	r5, [pc, #504]	@ (8003464 <__aeabi_dsub+0x710>)
 800326c:	0324      	lsls	r4, r4, #12
 800326e:	e705      	b.n	800307c <__aeabi_dsub+0x328>
 8003270:	4666      	mov	r6, ip
 8003272:	465c      	mov	r4, fp
 8003274:	08d0      	lsrs	r0, r2, #3
 8003276:	e717      	b.n	80030a8 <__aeabi_dsub+0x354>
 8003278:	465b      	mov	r3, fp
 800327a:	1a17      	subs	r7, r2, r0
 800327c:	42ba      	cmp	r2, r7
 800327e:	4192      	sbcs	r2, r2
 8003280:	1b1c      	subs	r4, r3, r4
 8003282:	2601      	movs	r6, #1
 8003284:	4663      	mov	r3, ip
 8003286:	4252      	negs	r2, r2
 8003288:	1aa4      	subs	r4, r4, r2
 800328a:	401e      	ands	r6, r3
 800328c:	e5c4      	b.n	8002e18 <__aeabi_dsub+0xc4>
 800328e:	1883      	adds	r3, r0, r2
 8003290:	4283      	cmp	r3, r0
 8003292:	4180      	sbcs	r0, r0
 8003294:	445c      	add	r4, fp
 8003296:	4240      	negs	r0, r0
 8003298:	1825      	adds	r5, r4, r0
 800329a:	022a      	lsls	r2, r5, #8
 800329c:	d400      	bmi.n	80032a0 <__aeabi_dsub+0x54c>
 800329e:	e0da      	b.n	8003456 <__aeabi_dsub+0x702>
 80032a0:	4a72      	ldr	r2, [pc, #456]	@ (800346c <__aeabi_dsub+0x718>)
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	4015      	ands	r5, r2
 80032a6:	07ea      	lsls	r2, r5, #31
 80032a8:	431a      	orrs	r2, r3
 80032aa:	0869      	lsrs	r1, r5, #1
 80032ac:	075b      	lsls	r3, r3, #29
 80032ae:	d400      	bmi.n	80032b2 <__aeabi_dsub+0x55e>
 80032b0:	e14a      	b.n	8003548 <__aeabi_dsub+0x7f4>
 80032b2:	230f      	movs	r3, #15
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d100      	bne.n	80032bc <__aeabi_dsub+0x568>
 80032ba:	e0fc      	b.n	80034b6 <__aeabi_dsub+0x762>
 80032bc:	1d17      	adds	r7, r2, #4
 80032be:	4297      	cmp	r7, r2
 80032c0:	41a4      	sbcs	r4, r4
 80032c2:	4264      	negs	r4, r4
 80032c4:	2502      	movs	r5, #2
 80032c6:	1864      	adds	r4, r4, r1
 80032c8:	e6ec      	b.n	80030a4 <__aeabi_dsub+0x350>
 80032ca:	4647      	mov	r7, r8
 80032cc:	001c      	movs	r4, r3
 80032ce:	431f      	orrs	r7, r3
 80032d0:	d000      	beq.n	80032d4 <__aeabi_dsub+0x580>
 80032d2:	e743      	b.n	800315c <__aeabi_dsub+0x408>
 80032d4:	2600      	movs	r6, #0
 80032d6:	2500      	movs	r5, #0
 80032d8:	2400      	movs	r4, #0
 80032da:	e6cf      	b.n	800307c <__aeabi_dsub+0x328>
 80032dc:	08c0      	lsrs	r0, r0, #3
 80032de:	0767      	lsls	r7, r4, #29
 80032e0:	4307      	orrs	r7, r0
 80032e2:	08e5      	lsrs	r5, r4, #3
 80032e4:	e632      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80032e6:	1a87      	subs	r7, r0, r2
 80032e8:	465b      	mov	r3, fp
 80032ea:	42b8      	cmp	r0, r7
 80032ec:	4180      	sbcs	r0, r0
 80032ee:	1ae4      	subs	r4, r4, r3
 80032f0:	4240      	negs	r0, r0
 80032f2:	1a24      	subs	r4, r4, r0
 80032f4:	0223      	lsls	r3, r4, #8
 80032f6:	d428      	bmi.n	800334a <__aeabi_dsub+0x5f6>
 80032f8:	0763      	lsls	r3, r4, #29
 80032fa:	08ff      	lsrs	r7, r7, #3
 80032fc:	431f      	orrs	r7, r3
 80032fe:	08e5      	lsrs	r5, r4, #3
 8003300:	2301      	movs	r3, #1
 8003302:	e77f      	b.n	8003204 <__aeabi_dsub+0x4b0>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d100      	bne.n	800330a <__aeabi_dsub+0x5b6>
 8003308:	e673      	b.n	8002ff2 <__aeabi_dsub+0x29e>
 800330a:	464b      	mov	r3, r9
 800330c:	1b5f      	subs	r7, r3, r5
 800330e:	003b      	movs	r3, r7
 8003310:	2d00      	cmp	r5, #0
 8003312:	d100      	bne.n	8003316 <__aeabi_dsub+0x5c2>
 8003314:	e742      	b.n	800319c <__aeabi_dsub+0x448>
 8003316:	2f38      	cmp	r7, #56	@ 0x38
 8003318:	dd00      	ble.n	800331c <__aeabi_dsub+0x5c8>
 800331a:	e0ec      	b.n	80034f6 <__aeabi_dsub+0x7a2>
 800331c:	2380      	movs	r3, #128	@ 0x80
 800331e:	000e      	movs	r6, r1
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	431c      	orrs	r4, r3
 8003324:	2f1f      	cmp	r7, #31
 8003326:	dc25      	bgt.n	8003374 <__aeabi_dsub+0x620>
 8003328:	2520      	movs	r5, #32
 800332a:	0023      	movs	r3, r4
 800332c:	1bed      	subs	r5, r5, r7
 800332e:	0001      	movs	r1, r0
 8003330:	40a8      	lsls	r0, r5
 8003332:	40ab      	lsls	r3, r5
 8003334:	40f9      	lsrs	r1, r7
 8003336:	1e45      	subs	r5, r0, #1
 8003338:	41a8      	sbcs	r0, r5
 800333a:	430b      	orrs	r3, r1
 800333c:	40fc      	lsrs	r4, r7
 800333e:	4318      	orrs	r0, r3
 8003340:	465b      	mov	r3, fp
 8003342:	1b1b      	subs	r3, r3, r4
 8003344:	469b      	mov	fp, r3
 8003346:	e739      	b.n	80031bc <__aeabi_dsub+0x468>
 8003348:	4666      	mov	r6, ip
 800334a:	2501      	movs	r5, #1
 800334c:	e562      	b.n	8002e14 <__aeabi_dsub+0xc0>
 800334e:	001f      	movs	r7, r3
 8003350:	4659      	mov	r1, fp
 8003352:	3f20      	subs	r7, #32
 8003354:	40f9      	lsrs	r1, r7
 8003356:	468c      	mov	ip, r1
 8003358:	2b20      	cmp	r3, #32
 800335a:	d005      	beq.n	8003368 <__aeabi_dsub+0x614>
 800335c:	2740      	movs	r7, #64	@ 0x40
 800335e:	4659      	mov	r1, fp
 8003360:	1afb      	subs	r3, r7, r3
 8003362:	4099      	lsls	r1, r3
 8003364:	430a      	orrs	r2, r1
 8003366:	4692      	mov	sl, r2
 8003368:	4657      	mov	r7, sl
 800336a:	1e7b      	subs	r3, r7, #1
 800336c:	419f      	sbcs	r7, r3
 800336e:	4663      	mov	r3, ip
 8003370:	431f      	orrs	r7, r3
 8003372:	e5c1      	b.n	8002ef8 <__aeabi_dsub+0x1a4>
 8003374:	003b      	movs	r3, r7
 8003376:	0025      	movs	r5, r4
 8003378:	3b20      	subs	r3, #32
 800337a:	40dd      	lsrs	r5, r3
 800337c:	2f20      	cmp	r7, #32
 800337e:	d004      	beq.n	800338a <__aeabi_dsub+0x636>
 8003380:	2340      	movs	r3, #64	@ 0x40
 8003382:	1bdb      	subs	r3, r3, r7
 8003384:	409c      	lsls	r4, r3
 8003386:	4320      	orrs	r0, r4
 8003388:	4680      	mov	r8, r0
 800338a:	4640      	mov	r0, r8
 800338c:	1e43      	subs	r3, r0, #1
 800338e:	4198      	sbcs	r0, r3
 8003390:	4328      	orrs	r0, r5
 8003392:	e713      	b.n	80031bc <__aeabi_dsub+0x468>
 8003394:	2900      	cmp	r1, #0
 8003396:	d09d      	beq.n	80032d4 <__aeabi_dsub+0x580>
 8003398:	2601      	movs	r6, #1
 800339a:	4663      	mov	r3, ip
 800339c:	465c      	mov	r4, fp
 800339e:	4690      	mov	r8, r2
 80033a0:	401e      	ands	r6, r3
 80033a2:	e6db      	b.n	800315c <__aeabi_dsub+0x408>
 80033a4:	1a17      	subs	r7, r2, r0
 80033a6:	465b      	mov	r3, fp
 80033a8:	42ba      	cmp	r2, r7
 80033aa:	4192      	sbcs	r2, r2
 80033ac:	1b1c      	subs	r4, r3, r4
 80033ae:	4252      	negs	r2, r2
 80033b0:	1aa4      	subs	r4, r4, r2
 80033b2:	0223      	lsls	r3, r4, #8
 80033b4:	d4c8      	bmi.n	8003348 <__aeabi_dsub+0x5f4>
 80033b6:	0763      	lsls	r3, r4, #29
 80033b8:	08ff      	lsrs	r7, r7, #3
 80033ba:	431f      	orrs	r7, r3
 80033bc:	4666      	mov	r6, ip
 80033be:	2301      	movs	r3, #1
 80033c0:	08e5      	lsrs	r5, r4, #3
 80033c2:	e71f      	b.n	8003204 <__aeabi_dsub+0x4b0>
 80033c4:	001d      	movs	r5, r3
 80033c6:	2400      	movs	r4, #0
 80033c8:	2700      	movs	r7, #0
 80033ca:	e657      	b.n	800307c <__aeabi_dsub+0x328>
 80033cc:	465c      	mov	r4, fp
 80033ce:	08d0      	lsrs	r0, r2, #3
 80033d0:	e66a      	b.n	80030a8 <__aeabi_dsub+0x354>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d100      	bne.n	80033d8 <__aeabi_dsub+0x684>
 80033d6:	e737      	b.n	8003248 <__aeabi_dsub+0x4f4>
 80033d8:	4653      	mov	r3, sl
 80033da:	08c0      	lsrs	r0, r0, #3
 80033dc:	0767      	lsls	r7, r4, #29
 80033de:	4307      	orrs	r7, r0
 80033e0:	08e5      	lsrs	r5, r4, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d100      	bne.n	80033e8 <__aeabi_dsub+0x694>
 80033e6:	e5b1      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80033e8:	2380      	movs	r3, #128	@ 0x80
 80033ea:	031b      	lsls	r3, r3, #12
 80033ec:	421d      	tst	r5, r3
 80033ee:	d008      	beq.n	8003402 <__aeabi_dsub+0x6ae>
 80033f0:	4659      	mov	r1, fp
 80033f2:	08c8      	lsrs	r0, r1, #3
 80033f4:	4218      	tst	r0, r3
 80033f6:	d104      	bne.n	8003402 <__aeabi_dsub+0x6ae>
 80033f8:	08d2      	lsrs	r2, r2, #3
 80033fa:	0749      	lsls	r1, r1, #29
 80033fc:	430a      	orrs	r2, r1
 80033fe:	0017      	movs	r7, r2
 8003400:	0005      	movs	r5, r0
 8003402:	0f7b      	lsrs	r3, r7, #29
 8003404:	00ff      	lsls	r7, r7, #3
 8003406:	08ff      	lsrs	r7, r7, #3
 8003408:	075b      	lsls	r3, r3, #29
 800340a:	431f      	orrs	r7, r3
 800340c:	e59e      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 800340e:	08c0      	lsrs	r0, r0, #3
 8003410:	0763      	lsls	r3, r4, #29
 8003412:	4318      	orrs	r0, r3
 8003414:	08e5      	lsrs	r5, r4, #3
 8003416:	2900      	cmp	r1, #0
 8003418:	d053      	beq.n	80034c2 <__aeabi_dsub+0x76e>
 800341a:	2380      	movs	r3, #128	@ 0x80
 800341c:	031b      	lsls	r3, r3, #12
 800341e:	421d      	tst	r5, r3
 8003420:	d00a      	beq.n	8003438 <__aeabi_dsub+0x6e4>
 8003422:	4659      	mov	r1, fp
 8003424:	08cc      	lsrs	r4, r1, #3
 8003426:	421c      	tst	r4, r3
 8003428:	d106      	bne.n	8003438 <__aeabi_dsub+0x6e4>
 800342a:	2601      	movs	r6, #1
 800342c:	4663      	mov	r3, ip
 800342e:	0025      	movs	r5, r4
 8003430:	08d0      	lsrs	r0, r2, #3
 8003432:	0749      	lsls	r1, r1, #29
 8003434:	4308      	orrs	r0, r1
 8003436:	401e      	ands	r6, r3
 8003438:	0f47      	lsrs	r7, r0, #29
 800343a:	00c0      	lsls	r0, r0, #3
 800343c:	08c0      	lsrs	r0, r0, #3
 800343e:	077f      	lsls	r7, r7, #29
 8003440:	4307      	orrs	r7, r0
 8003442:	e583      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 8003444:	1883      	adds	r3, r0, r2
 8003446:	4293      	cmp	r3, r2
 8003448:	4192      	sbcs	r2, r2
 800344a:	445c      	add	r4, fp
 800344c:	4252      	negs	r2, r2
 800344e:	18a5      	adds	r5, r4, r2
 8003450:	022a      	lsls	r2, r5, #8
 8003452:	d500      	bpl.n	8003456 <__aeabi_dsub+0x702>
 8003454:	e724      	b.n	80032a0 <__aeabi_dsub+0x54c>
 8003456:	076f      	lsls	r7, r5, #29
 8003458:	08db      	lsrs	r3, r3, #3
 800345a:	431f      	orrs	r7, r3
 800345c:	08ed      	lsrs	r5, r5, #3
 800345e:	2301      	movs	r3, #1
 8003460:	e6d0      	b.n	8003204 <__aeabi_dsub+0x4b0>
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	000007ff 	.word	0x000007ff
 8003468:	000007fe 	.word	0x000007fe
 800346c:	ff7fffff 	.word	0xff7fffff
 8003470:	465b      	mov	r3, fp
 8003472:	08d2      	lsrs	r2, r2, #3
 8003474:	075f      	lsls	r7, r3, #29
 8003476:	4666      	mov	r6, ip
 8003478:	4317      	orrs	r7, r2
 800347a:	08dd      	lsrs	r5, r3, #3
 800347c:	e566      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 800347e:	0025      	movs	r5, r4
 8003480:	3b20      	subs	r3, #32
 8003482:	40dd      	lsrs	r5, r3
 8003484:	4663      	mov	r3, ip
 8003486:	2b20      	cmp	r3, #32
 8003488:	d005      	beq.n	8003496 <__aeabi_dsub+0x742>
 800348a:	2340      	movs	r3, #64	@ 0x40
 800348c:	4661      	mov	r1, ip
 800348e:	1a5b      	subs	r3, r3, r1
 8003490:	409c      	lsls	r4, r3
 8003492:	4320      	orrs	r0, r4
 8003494:	4680      	mov	r8, r0
 8003496:	4647      	mov	r7, r8
 8003498:	1e7b      	subs	r3, r7, #1
 800349a:	419f      	sbcs	r7, r3
 800349c:	432f      	orrs	r7, r5
 800349e:	e5a0      	b.n	8002fe2 <__aeabi_dsub+0x28e>
 80034a0:	2120      	movs	r1, #32
 80034a2:	2700      	movs	r7, #0
 80034a4:	1a09      	subs	r1, r1, r0
 80034a6:	e4d2      	b.n	8002e4e <__aeabi_dsub+0xfa>
 80034a8:	2f00      	cmp	r7, #0
 80034aa:	d100      	bne.n	80034ae <__aeabi_dsub+0x75a>
 80034ac:	e713      	b.n	80032d6 <__aeabi_dsub+0x582>
 80034ae:	465c      	mov	r4, fp
 80034b0:	0017      	movs	r7, r2
 80034b2:	2500      	movs	r5, #0
 80034b4:	e5f6      	b.n	80030a4 <__aeabi_dsub+0x350>
 80034b6:	08d7      	lsrs	r7, r2, #3
 80034b8:	0749      	lsls	r1, r1, #29
 80034ba:	2302      	movs	r3, #2
 80034bc:	430f      	orrs	r7, r1
 80034be:	092d      	lsrs	r5, r5, #4
 80034c0:	e6a0      	b.n	8003204 <__aeabi_dsub+0x4b0>
 80034c2:	0007      	movs	r7, r0
 80034c4:	e542      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80034c6:	465b      	mov	r3, fp
 80034c8:	2601      	movs	r6, #1
 80034ca:	075f      	lsls	r7, r3, #29
 80034cc:	08dd      	lsrs	r5, r3, #3
 80034ce:	4663      	mov	r3, ip
 80034d0:	08d2      	lsrs	r2, r2, #3
 80034d2:	4317      	orrs	r7, r2
 80034d4:	401e      	ands	r6, r3
 80034d6:	e539      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80034d8:	465b      	mov	r3, fp
 80034da:	08d2      	lsrs	r2, r2, #3
 80034dc:	075f      	lsls	r7, r3, #29
 80034de:	4317      	orrs	r7, r2
 80034e0:	08dd      	lsrs	r5, r3, #3
 80034e2:	e533      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80034e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003560 <__aeabi_dsub+0x80c>)
 80034e6:	08db      	lsrs	r3, r3, #3
 80034e8:	4022      	ands	r2, r4
 80034ea:	0757      	lsls	r7, r2, #29
 80034ec:	0252      	lsls	r2, r2, #9
 80034ee:	2501      	movs	r5, #1
 80034f0:	431f      	orrs	r7, r3
 80034f2:	0b14      	lsrs	r4, r2, #12
 80034f4:	e5c2      	b.n	800307c <__aeabi_dsub+0x328>
 80034f6:	000e      	movs	r6, r1
 80034f8:	2001      	movs	r0, #1
 80034fa:	e65f      	b.n	80031bc <__aeabi_dsub+0x468>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <__aeabi_dsub+0x7c8>
 8003500:	464b      	mov	r3, r9
 8003502:	1b5b      	subs	r3, r3, r5
 8003504:	469c      	mov	ip, r3
 8003506:	2d00      	cmp	r5, #0
 8003508:	d100      	bne.n	800350c <__aeabi_dsub+0x7b8>
 800350a:	e548      	b.n	8002f9e <__aeabi_dsub+0x24a>
 800350c:	2701      	movs	r7, #1
 800350e:	2b38      	cmp	r3, #56	@ 0x38
 8003510:	dd00      	ble.n	8003514 <__aeabi_dsub+0x7c0>
 8003512:	e566      	b.n	8002fe2 <__aeabi_dsub+0x28e>
 8003514:	2380      	movs	r3, #128	@ 0x80
 8003516:	041b      	lsls	r3, r3, #16
 8003518:	431c      	orrs	r4, r3
 800351a:	e550      	b.n	8002fbe <__aeabi_dsub+0x26a>
 800351c:	1c6b      	adds	r3, r5, #1
 800351e:	4d11      	ldr	r5, [pc, #68]	@ (8003564 <__aeabi_dsub+0x810>)
 8003520:	422b      	tst	r3, r5
 8003522:	d000      	beq.n	8003526 <__aeabi_dsub+0x7d2>
 8003524:	e673      	b.n	800320e <__aeabi_dsub+0x4ba>
 8003526:	4659      	mov	r1, fp
 8003528:	0023      	movs	r3, r4
 800352a:	4311      	orrs	r1, r2
 800352c:	468a      	mov	sl, r1
 800352e:	4303      	orrs	r3, r0
 8003530:	e600      	b.n	8003134 <__aeabi_dsub+0x3e0>
 8003532:	0767      	lsls	r7, r4, #29
 8003534:	08c0      	lsrs	r0, r0, #3
 8003536:	2300      	movs	r3, #0
 8003538:	4307      	orrs	r7, r0
 800353a:	08e5      	lsrs	r5, r4, #3
 800353c:	e662      	b.n	8003204 <__aeabi_dsub+0x4b0>
 800353e:	0764      	lsls	r4, r4, #29
 8003540:	08ff      	lsrs	r7, r7, #3
 8003542:	4327      	orrs	r7, r4
 8003544:	0905      	lsrs	r5, r0, #4
 8003546:	e65d      	b.n	8003204 <__aeabi_dsub+0x4b0>
 8003548:	08d2      	lsrs	r2, r2, #3
 800354a:	0749      	lsls	r1, r1, #29
 800354c:	4311      	orrs	r1, r2
 800354e:	000f      	movs	r7, r1
 8003550:	2302      	movs	r3, #2
 8003552:	092d      	lsrs	r5, r5, #4
 8003554:	e656      	b.n	8003204 <__aeabi_dsub+0x4b0>
 8003556:	0007      	movs	r7, r0
 8003558:	e5a4      	b.n	80030a4 <__aeabi_dsub+0x350>
 800355a:	0038      	movs	r0, r7
 800355c:	e48f      	b.n	8002e7e <__aeabi_dsub+0x12a>
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	ff7fffff 	.word	0xff7fffff
 8003564:	000007fe 	.word	0x000007fe

08003568 <__aeabi_dcmpun>:
 8003568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356a:	46c6      	mov	lr, r8
 800356c:	031e      	lsls	r6, r3, #12
 800356e:	0b36      	lsrs	r6, r6, #12
 8003570:	46b0      	mov	r8, r6
 8003572:	4e0d      	ldr	r6, [pc, #52]	@ (80035a8 <__aeabi_dcmpun+0x40>)
 8003574:	030c      	lsls	r4, r1, #12
 8003576:	004d      	lsls	r5, r1, #1
 8003578:	005f      	lsls	r7, r3, #1
 800357a:	b500      	push	{lr}
 800357c:	0b24      	lsrs	r4, r4, #12
 800357e:	0d6d      	lsrs	r5, r5, #21
 8003580:	0d7f      	lsrs	r7, r7, #21
 8003582:	42b5      	cmp	r5, r6
 8003584:	d00b      	beq.n	800359e <__aeabi_dcmpun+0x36>
 8003586:	4908      	ldr	r1, [pc, #32]	@ (80035a8 <__aeabi_dcmpun+0x40>)
 8003588:	2000      	movs	r0, #0
 800358a:	428f      	cmp	r7, r1
 800358c:	d104      	bne.n	8003598 <__aeabi_dcmpun+0x30>
 800358e:	4646      	mov	r6, r8
 8003590:	4316      	orrs	r6, r2
 8003592:	0030      	movs	r0, r6
 8003594:	1e43      	subs	r3, r0, #1
 8003596:	4198      	sbcs	r0, r3
 8003598:	bc80      	pop	{r7}
 800359a:	46b8      	mov	r8, r7
 800359c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800359e:	4304      	orrs	r4, r0
 80035a0:	2001      	movs	r0, #1
 80035a2:	2c00      	cmp	r4, #0
 80035a4:	d1f8      	bne.n	8003598 <__aeabi_dcmpun+0x30>
 80035a6:	e7ee      	b.n	8003586 <__aeabi_dcmpun+0x1e>
 80035a8:	000007ff 	.word	0x000007ff

080035ac <__aeabi_d2iz>:
 80035ac:	000b      	movs	r3, r1
 80035ae:	0002      	movs	r2, r0
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	4d16      	ldr	r5, [pc, #88]	@ (800360c <__aeabi_d2iz+0x60>)
 80035b4:	030c      	lsls	r4, r1, #12
 80035b6:	b082      	sub	sp, #8
 80035b8:	0049      	lsls	r1, r1, #1
 80035ba:	2000      	movs	r0, #0
 80035bc:	9200      	str	r2, [sp, #0]
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	0b24      	lsrs	r4, r4, #12
 80035c2:	0d49      	lsrs	r1, r1, #21
 80035c4:	0fde      	lsrs	r6, r3, #31
 80035c6:	42a9      	cmp	r1, r5
 80035c8:	dd04      	ble.n	80035d4 <__aeabi_d2iz+0x28>
 80035ca:	4811      	ldr	r0, [pc, #68]	@ (8003610 <__aeabi_d2iz+0x64>)
 80035cc:	4281      	cmp	r1, r0
 80035ce:	dd03      	ble.n	80035d8 <__aeabi_d2iz+0x2c>
 80035d0:	4b10      	ldr	r3, [pc, #64]	@ (8003614 <__aeabi_d2iz+0x68>)
 80035d2:	18f0      	adds	r0, r6, r3
 80035d4:	b002      	add	sp, #8
 80035d6:	bd70      	pop	{r4, r5, r6, pc}
 80035d8:	2080      	movs	r0, #128	@ 0x80
 80035da:	0340      	lsls	r0, r0, #13
 80035dc:	4320      	orrs	r0, r4
 80035de:	4c0e      	ldr	r4, [pc, #56]	@ (8003618 <__aeabi_d2iz+0x6c>)
 80035e0:	1a64      	subs	r4, r4, r1
 80035e2:	2c1f      	cmp	r4, #31
 80035e4:	dd08      	ble.n	80035f8 <__aeabi_d2iz+0x4c>
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <__aeabi_d2iz+0x70>)
 80035e8:	1a5b      	subs	r3, r3, r1
 80035ea:	40d8      	lsrs	r0, r3
 80035ec:	0003      	movs	r3, r0
 80035ee:	4258      	negs	r0, r3
 80035f0:	2e00      	cmp	r6, #0
 80035f2:	d1ef      	bne.n	80035d4 <__aeabi_d2iz+0x28>
 80035f4:	0018      	movs	r0, r3
 80035f6:	e7ed      	b.n	80035d4 <__aeabi_d2iz+0x28>
 80035f8:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <__aeabi_d2iz+0x74>)
 80035fa:	9a00      	ldr	r2, [sp, #0]
 80035fc:	469c      	mov	ip, r3
 80035fe:	0003      	movs	r3, r0
 8003600:	4461      	add	r1, ip
 8003602:	408b      	lsls	r3, r1
 8003604:	40e2      	lsrs	r2, r4
 8003606:	4313      	orrs	r3, r2
 8003608:	e7f1      	b.n	80035ee <__aeabi_d2iz+0x42>
 800360a:	46c0      	nop			@ (mov r8, r8)
 800360c:	000003fe 	.word	0x000003fe
 8003610:	0000041d 	.word	0x0000041d
 8003614:	7fffffff 	.word	0x7fffffff
 8003618:	00000433 	.word	0x00000433
 800361c:	00000413 	.word	0x00000413
 8003620:	fffffbed 	.word	0xfffffbed

08003624 <__aeabi_i2d>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	2800      	cmp	r0, #0
 8003628:	d016      	beq.n	8003658 <__aeabi_i2d+0x34>
 800362a:	17c3      	asrs	r3, r0, #31
 800362c:	18c5      	adds	r5, r0, r3
 800362e:	405d      	eors	r5, r3
 8003630:	0fc4      	lsrs	r4, r0, #31
 8003632:	0028      	movs	r0, r5
 8003634:	f000 f848 	bl	80036c8 <__clzsi2>
 8003638:	4b10      	ldr	r3, [pc, #64]	@ (800367c <__aeabi_i2d+0x58>)
 800363a:	1a1b      	subs	r3, r3, r0
 800363c:	055b      	lsls	r3, r3, #21
 800363e:	0d5b      	lsrs	r3, r3, #21
 8003640:	280a      	cmp	r0, #10
 8003642:	dc14      	bgt.n	800366e <__aeabi_i2d+0x4a>
 8003644:	0002      	movs	r2, r0
 8003646:	002e      	movs	r6, r5
 8003648:	3215      	adds	r2, #21
 800364a:	4096      	lsls	r6, r2
 800364c:	220b      	movs	r2, #11
 800364e:	1a12      	subs	r2, r2, r0
 8003650:	40d5      	lsrs	r5, r2
 8003652:	032d      	lsls	r5, r5, #12
 8003654:	0b2d      	lsrs	r5, r5, #12
 8003656:	e003      	b.n	8003660 <__aeabi_i2d+0x3c>
 8003658:	2400      	movs	r4, #0
 800365a:	2300      	movs	r3, #0
 800365c:	2500      	movs	r5, #0
 800365e:	2600      	movs	r6, #0
 8003660:	051b      	lsls	r3, r3, #20
 8003662:	432b      	orrs	r3, r5
 8003664:	07e4      	lsls	r4, r4, #31
 8003666:	4323      	orrs	r3, r4
 8003668:	0030      	movs	r0, r6
 800366a:	0019      	movs	r1, r3
 800366c:	bd70      	pop	{r4, r5, r6, pc}
 800366e:	380b      	subs	r0, #11
 8003670:	4085      	lsls	r5, r0
 8003672:	032d      	lsls	r5, r5, #12
 8003674:	2600      	movs	r6, #0
 8003676:	0b2d      	lsrs	r5, r5, #12
 8003678:	e7f2      	b.n	8003660 <__aeabi_i2d+0x3c>
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	0000041e 	.word	0x0000041e

08003680 <__aeabi_ui2d>:
 8003680:	b510      	push	{r4, lr}
 8003682:	1e04      	subs	r4, r0, #0
 8003684:	d010      	beq.n	80036a8 <__aeabi_ui2d+0x28>
 8003686:	f000 f81f 	bl	80036c8 <__clzsi2>
 800368a:	4b0e      	ldr	r3, [pc, #56]	@ (80036c4 <__aeabi_ui2d+0x44>)
 800368c:	1a1b      	subs	r3, r3, r0
 800368e:	055b      	lsls	r3, r3, #21
 8003690:	0d5b      	lsrs	r3, r3, #21
 8003692:	280a      	cmp	r0, #10
 8003694:	dc0f      	bgt.n	80036b6 <__aeabi_ui2d+0x36>
 8003696:	220b      	movs	r2, #11
 8003698:	0021      	movs	r1, r4
 800369a:	1a12      	subs	r2, r2, r0
 800369c:	40d1      	lsrs	r1, r2
 800369e:	3015      	adds	r0, #21
 80036a0:	030a      	lsls	r2, r1, #12
 80036a2:	4084      	lsls	r4, r0
 80036a4:	0b12      	lsrs	r2, r2, #12
 80036a6:	e001      	b.n	80036ac <__aeabi_ui2d+0x2c>
 80036a8:	2300      	movs	r3, #0
 80036aa:	2200      	movs	r2, #0
 80036ac:	051b      	lsls	r3, r3, #20
 80036ae:	4313      	orrs	r3, r2
 80036b0:	0020      	movs	r0, r4
 80036b2:	0019      	movs	r1, r3
 80036b4:	bd10      	pop	{r4, pc}
 80036b6:	0022      	movs	r2, r4
 80036b8:	380b      	subs	r0, #11
 80036ba:	4082      	lsls	r2, r0
 80036bc:	0312      	lsls	r2, r2, #12
 80036be:	2400      	movs	r4, #0
 80036c0:	0b12      	lsrs	r2, r2, #12
 80036c2:	e7f3      	b.n	80036ac <__aeabi_ui2d+0x2c>
 80036c4:	0000041e 	.word	0x0000041e

080036c8 <__clzsi2>:
 80036c8:	211c      	movs	r1, #28
 80036ca:	2301      	movs	r3, #1
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	4298      	cmp	r0, r3
 80036d0:	d301      	bcc.n	80036d6 <__clzsi2+0xe>
 80036d2:	0c00      	lsrs	r0, r0, #16
 80036d4:	3910      	subs	r1, #16
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	4298      	cmp	r0, r3
 80036da:	d301      	bcc.n	80036e0 <__clzsi2+0x18>
 80036dc:	0a00      	lsrs	r0, r0, #8
 80036de:	3908      	subs	r1, #8
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	4298      	cmp	r0, r3
 80036e4:	d301      	bcc.n	80036ea <__clzsi2+0x22>
 80036e6:	0900      	lsrs	r0, r0, #4
 80036e8:	3904      	subs	r1, #4
 80036ea:	a202      	add	r2, pc, #8	@ (adr r2, 80036f4 <__clzsi2+0x2c>)
 80036ec:	5c10      	ldrb	r0, [r2, r0]
 80036ee:	1840      	adds	r0, r0, r1
 80036f0:	4770      	bx	lr
 80036f2:	46c0      	nop			@ (mov r8, r8)
 80036f4:	02020304 	.word	0x02020304
 80036f8:	01010101 	.word	0x01010101
	...

08003704 <__clzdi2>:
 8003704:	b510      	push	{r4, lr}
 8003706:	2900      	cmp	r1, #0
 8003708:	d103      	bne.n	8003712 <__clzdi2+0xe>
 800370a:	f7ff ffdd 	bl	80036c8 <__clzsi2>
 800370e:	3020      	adds	r0, #32
 8003710:	e002      	b.n	8003718 <__clzdi2+0x14>
 8003712:	0008      	movs	r0, r1
 8003714:	f7ff ffd8 	bl	80036c8 <__clzsi2>
 8003718:	bd10      	pop	{r4, pc}
 800371a:	46c0      	nop			@ (mov r8, r8)

0800371c <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 800371c:	b5b0      	push	{r4, r5, r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	0018      	movs	r0, r3
 8003728:	f000 f93a 	bl	80039a0 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	250f      	movs	r5, #15
 8003730:	197c      	adds	r4, r7, r5
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	20d0      	movs	r0, #208	@ 0xd0
 8003738:	f000 f8d8 	bl	80038ec <bme68x_get_regs>
 800373c:	0003      	movs	r3, r0
 800373e:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 8003740:	197b      	adds	r3, r7, r5
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	b25b      	sxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d11b      	bne.n	8003782 <bme68x_init+0x66>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b61      	cmp	r3, #97	@ 0x61
 8003750:	d113      	bne.n	800377a <bme68x_init+0x5e>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8003752:	197c      	adds	r4, r7, r5
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	0018      	movs	r0, r3
 8003758:	f001 f943 	bl	80049e2 <read_variant_id>
 800375c:	0003      	movs	r3, r0
 800375e:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8003760:	197b      	adds	r3, r7, r5
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	b25b      	sxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10b      	bne.n	8003782 <bme68x_init+0x66>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 800376a:	197c      	adds	r4, r7, r5
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	0018      	movs	r0, r3
 8003770:	f001 f800 	bl	8004774 <get_calib_data>
 8003774:	0003      	movs	r3, r0
 8003776:	7023      	strb	r3, [r4, #0]
 8003778:	e003      	b.n	8003782 <bme68x_init+0x66>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 800377a:	230f      	movs	r3, #15
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	22fd      	movs	r2, #253	@ 0xfd
 8003780:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8003782:	230f      	movs	r3, #15
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	b25b      	sxtb	r3, r3
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b004      	add	sp, #16
 8003790:	bdb0      	pop	{r4, r5, r7, pc}

08003792 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8003792:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003794:	b08b      	sub	sp, #44	@ 0x2c
 8003796:	af00      	add	r7, sp, #0
 8003798:	60f8      	str	r0, [r7, #12]
 800379a:	60b9      	str	r1, [r7, #8]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 80037a0:	2310      	movs	r3, #16
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	0018      	movs	r0, r3
 80037a6:	2314      	movs	r3, #20
 80037a8:	001a      	movs	r2, r3
 80037aa:	2100      	movs	r1, #0
 80037ac:	f005 fca8 	bl	8009100 <memset>
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80037b0:	2527      	movs	r5, #39	@ 0x27
 80037b2:	197c      	adds	r4, r7, r5
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 fdef 	bl	800439a <null_ptr_check>
 80037bc:	0003      	movs	r3, r0
 80037be:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 80037c0:	197b      	adds	r3, r7, r5
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d000      	beq.n	80037cc <bme68x_set_regs+0x3a>
 80037ca:	e083      	b.n	80038d4 <bme68x_set_regs+0x142>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d100      	bne.n	80037d4 <bme68x_set_regs+0x42>
 80037d2:	e07f      	b.n	80038d4 <bme68x_set_regs+0x142>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d100      	bne.n	80037dc <bme68x_set_regs+0x4a>
 80037da:	e07b      	b.n	80038d4 <bme68x_set_regs+0x142>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d100      	bne.n	80037e4 <bme68x_set_regs+0x52>
 80037e2:	e070      	b.n	80038c6 <bme68x_set_regs+0x134>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b0a      	cmp	r3, #10
 80037e8:	d900      	bls.n	80037ec <bme68x_set_regs+0x5a>
 80037ea:	e06c      	b.n	80038c6 <bme68x_set_regs+0x134>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 80037ec:	2324      	movs	r3, #36	@ 0x24
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	2200      	movs	r2, #0
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	e03f      	b.n	8003876 <bme68x_set_regs+0xe4>
            {
                if (dev->intf == BME68X_SPI_INTF)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	7b1b      	ldrb	r3, [r3, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d11d      	bne.n	800383a <bme68x_set_regs+0xa8>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 80037fe:	2524      	movs	r5, #36	@ 0x24
 8003800:	197b      	adds	r3, r7, r5
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	18d3      	adds	r3, r2, r3
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2227      	movs	r2, #39	@ 0x27
 800380c:	18bc      	adds	r4, r7, r2
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	0011      	movs	r1, r2
 8003812:	0018      	movs	r0, r3
 8003814:	f000 fcd3 	bl	80041be <set_mem_page>
 8003818:	0003      	movs	r3, r0
 800381a:	7023      	strb	r3, [r4, #0]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 800381c:	197b      	adds	r3, r7, r5
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	18d3      	adds	r3, r2, r3
 8003824:	781a      	ldrb	r2, [r3, #0]
 8003826:	197b      	adds	r3, r7, r5
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	217f      	movs	r1, #127	@ 0x7f
 800382e:	400a      	ands	r2, r1
 8003830:	b2d1      	uxtb	r1, r2
 8003832:	2210      	movs	r2, #16
 8003834:	18ba      	adds	r2, r7, r2
 8003836:	54d1      	strb	r1, [r2, r3]
 8003838:	e00b      	b.n	8003852 <bme68x_set_regs+0xc0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 800383a:	2124      	movs	r1, #36	@ 0x24
 800383c:	187b      	adds	r3, r7, r1
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	18d2      	adds	r2, r2, r3
 8003844:	187b      	adds	r3, r7, r1
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	7811      	ldrb	r1, [r2, #0]
 800384c:	2210      	movs	r2, #16
 800384e:	18ba      	adds	r2, r7, r2
 8003850:	54d1      	strb	r1, [r2, r3]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8003852:	2024      	movs	r0, #36	@ 0x24
 8003854:	183b      	adds	r3, r7, r0
 8003856:	881b      	ldrh	r3, [r3, #0]
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	18d2      	adds	r2, r2, r3
 800385c:	183b      	adds	r3, r7, r0
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	3301      	adds	r3, #1
 8003864:	7811      	ldrb	r1, [r2, #0]
 8003866:	2210      	movs	r2, #16
 8003868:	18ba      	adds	r2, r7, r2
 800386a:	54d1      	strb	r1, [r2, r3]
            for (index = 0; index < len; index++)
 800386c:	183b      	adds	r3, r7, r0
 800386e:	881a      	ldrh	r2, [r3, #0]
 8003870:	183b      	adds	r3, r7, r0
 8003872:	3201      	adds	r2, #1
 8003874:	801a      	strh	r2, [r3, #0]
 8003876:	2324      	movs	r3, #36	@ 0x24
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	429a      	cmp	r2, r3
 8003880:	d8b9      	bhi.n	80037f6 <bme68x_set_regs+0x64>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8003882:	2627      	movs	r6, #39	@ 0x27
 8003884:	19bb      	adds	r3, r7, r6
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	b25b      	sxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d120      	bne.n	80038d0 <bme68x_set_regs+0x13e>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003892:	2110      	movs	r1, #16
 8003894:	187b      	adds	r3, r7, r1
 8003896:	7818      	ldrb	r0, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	1e5a      	subs	r2, r3, #1
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685d      	ldr	r5, [r3, #4]
 80038a2:	187b      	adds	r3, r7, r1
 80038a4:	1c59      	adds	r1, r3, #1
 80038a6:	002b      	movs	r3, r5
 80038a8:	47a0      	blx	r4
 80038aa:	0003      	movs	r3, r0
 80038ac:	0019      	movs	r1, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	224c      	movs	r2, #76	@ 0x4c
 80038b2:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	224c      	movs	r2, #76	@ 0x4c
 80038b8:	569b      	ldrsb	r3, [r3, r2]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <bme68x_set_regs+0x13e>
                {
                    rslt = BME68X_E_COM_FAIL;
 80038be:	19bb      	adds	r3, r7, r6
 80038c0:	22fe      	movs	r2, #254	@ 0xfe
 80038c2:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 80038c4:	e004      	b.n	80038d0 <bme68x_set_regs+0x13e>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 80038c6:	2327      	movs	r3, #39	@ 0x27
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	22fc      	movs	r2, #252	@ 0xfc
 80038cc:	701a      	strb	r2, [r3, #0]
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80038ce:	e005      	b.n	80038dc <bme68x_set_regs+0x14a>
            if (rslt == BME68X_OK)
 80038d0:	46c0      	nop			@ (mov r8, r8)
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80038d2:	e003      	b.n	80038dc <bme68x_set_regs+0x14a>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80038d4:	2327      	movs	r3, #39	@ 0x27
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	22ff      	movs	r2, #255	@ 0xff
 80038da:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80038dc:	2327      	movs	r3, #39	@ 0x27
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b25b      	sxtb	r3, r3
}
 80038e4:	0018      	movs	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	b00b      	add	sp, #44	@ 0x2c
 80038ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038ec <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 80038ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	250f      	movs	r5, #15
 80038fa:	197b      	adds	r3, r7, r5
 80038fc:	1c02      	adds	r2, r0, #0
 80038fe:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003900:	2617      	movs	r6, #23
 8003902:	19bc      	adds	r4, r7, r6
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	0018      	movs	r0, r3
 8003908:	f000 fd47 	bl	800439a <null_ptr_check>
 800390c:	0003      	movs	r3, r0
 800390e:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_data)
 8003910:	19bb      	adds	r3, r7, r6
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	b25b      	sxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d136      	bne.n	8003988 <bme68x_get_regs+0x9c>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d033      	beq.n	8003988 <bme68x_get_regs+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	7b1b      	ldrb	r3, [r3, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d115      	bne.n	8003954 <bme68x_get_regs+0x68>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8003928:	19bc      	adds	r4, r7, r6
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	197b      	adds	r3, r7, r5
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	0011      	movs	r1, r2
 8003932:	0018      	movs	r0, r3
 8003934:	f000 fc43 	bl	80041be <set_mem_page>
 8003938:	0003      	movs	r3, r0
 800393a:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 800393c:	19bb      	adds	r3, r7, r6
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	b25b      	sxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <bme68x_get_regs+0x68>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8003946:	197b      	adds	r3, r7, r5
 8003948:	197a      	adds	r2, r7, r5
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	2180      	movs	r1, #128	@ 0x80
 800394e:	4249      	negs	r1, r1
 8003950:	430a      	orrs	r2, r1
 8003952:	701a      	strb	r2, [r3, #0]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685d      	ldr	r5, [r3, #4]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	230f      	movs	r3, #15
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	7818      	ldrb	r0, [r3, #0]
 8003966:	002b      	movs	r3, r5
 8003968:	47a0      	blx	r4
 800396a:	0003      	movs	r3, r0
 800396c:	0019      	movs	r1, r3
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	224c      	movs	r2, #76	@ 0x4c
 8003972:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	224c      	movs	r2, #76	@ 0x4c
 8003978:	569b      	ldrsb	r3, [r3, r2]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <bme68x_get_regs+0xa4>
        {
            rslt = BME68X_E_COM_FAIL;
 800397e:	2317      	movs	r3, #23
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	22fe      	movs	r2, #254	@ 0xfe
 8003984:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != 0)
 8003986:	e003      	b.n	8003990 <bme68x_get_regs+0xa4>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003988:	2317      	movs	r3, #23
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	22ff      	movs	r2, #255	@ 0xff
 800398e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003990:	2317      	movs	r3, #23
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	b25b      	sxtb	r3, r3
}
 8003998:	0018      	movs	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	b007      	add	sp, #28
 800399e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039a0 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 80039a0:	b5b0      	push	{r4, r5, r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 80039a8:	230e      	movs	r3, #14
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	22e0      	movs	r2, #224	@ 0xe0
 80039ae:	701a      	strb	r2, [r3, #0]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 80039b0:	230d      	movs	r3, #13
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	22b6      	movs	r2, #182	@ 0xb6
 80039b6:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80039b8:	250f      	movs	r5, #15
 80039ba:	197c      	adds	r4, r7, r5
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	0018      	movs	r0, r3
 80039c0:	f000 fceb 	bl	800439a <null_ptr_check>
 80039c4:	0003      	movs	r3, r0
 80039c6:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 80039c8:	002a      	movs	r2, r5
 80039ca:	18bb      	adds	r3, r7, r2
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	b25b      	sxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d133      	bne.n	8003a3c <bme68x_soft_reset+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	7b1b      	ldrb	r3, [r3, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <bme68x_soft_reset+0x4a>
        {
            rslt = get_mem_page(dev);
 80039dc:	18bc      	adds	r4, r7, r2
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	0018      	movs	r0, r3
 80039e2:	f000 fc69 	bl	80042b8 <get_mem_page>
 80039e6:	0003      	movs	r3, r0
 80039e8:	7023      	strb	r3, [r4, #0]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 80039ea:	250f      	movs	r5, #15
 80039ec:	197b      	adds	r3, r7, r5
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	b25b      	sxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d122      	bne.n	8003a3c <bme68x_soft_reset+0x9c>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80039f6:	197c      	adds	r4, r7, r5
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	220d      	movs	r2, #13
 80039fc:	18b9      	adds	r1, r7, r2
 80039fe:	220e      	movs	r2, #14
 8003a00:	18b8      	adds	r0, r7, r2
 8003a02:	2201      	movs	r2, #1
 8003a04:	f7ff fec5 	bl	8003792 <bme68x_set_regs>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8003a0c:	002c      	movs	r4, r5
 8003a0e:	193b      	adds	r3, r7, r4
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b25b      	sxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d111      	bne.n	8003a3c <bme68x_soft_reset+0x9c>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	480a      	ldr	r0, [pc, #40]	@ (8003a4c <bme68x_soft_reset+0xac>)
 8003a22:	0019      	movs	r1, r3
 8003a24:	4790      	blx	r2

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	7b1b      	ldrb	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <bme68x_soft_reset+0x9c>
                {
                    rslt = get_mem_page(dev);
 8003a2e:	193c      	adds	r4, r7, r4
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	0018      	movs	r0, r3
 8003a34:	f000 fc40 	bl	80042b8 <get_mem_page>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	7023      	strb	r3, [r4, #0]
                }
            }
        }
    }

    return rslt;
 8003a3c:	230f      	movs	r3, #15
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	b25b      	sxtb	r3, r3
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b004      	add	sp, #16
 8003a4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a4c:	00002710 	.word	0x00002710

08003a50 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8003a50:	b5b0      	push	{r4, r5, r7, lr}
 8003a52:	b088      	sub	sp, #32
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8003a5a:	231e      	movs	r3, #30
 8003a5c:	18fb      	adds	r3, r7, r3
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	231d      	movs	r3, #29
 8003a64:	18fb      	adds	r3, r7, r3
 8003a66:	2201      	movs	r2, #1
 8003a68:	701a      	strb	r2, [r3, #0]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8003a6a:	2314      	movs	r3, #20
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	4a9f      	ldr	r2, [pc, #636]	@ (8003cec <bme68x_set_conf+0x29c>)
 8003a70:	6811      	ldr	r1, [r2, #0]
 8003a72:	6019      	str	r1, [r3, #0]
 8003a74:	7912      	ldrb	r2, [r2, #4]
 8003a76:	711a      	strb	r2, [r3, #4]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8003a78:	230c      	movs	r3, #12
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	2305      	movs	r3, #5
 8003a80:	001a      	movs	r2, r3
 8003a82:	2100      	movs	r1, #0
 8003a84:	f005 fb3c 	bl	8009100 <memset>

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8003a88:	251f      	movs	r5, #31
 8003a8a:	197c      	adds	r4, r7, r5
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	231c      	movs	r3, #28
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	0011      	movs	r1, r2
 8003a94:	0018      	movs	r0, r3
 8003a96:	f000 f9ab 	bl	8003df0 <bme68x_get_op_mode>
 8003a9a:	0003      	movs	r3, r0
 8003a9c:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8003a9e:	197b      	adds	r3, r7, r5
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d107      	bne.n	8003ab8 <bme68x_set_conf+0x68>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8003aa8:	197c      	adds	r4, r7, r5
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	0019      	movs	r1, r3
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f000 f91e 	bl	8003cf0 <bme68x_set_op_mode>
 8003ab4:	0003      	movs	r3, r0
 8003ab6:	7023      	strb	r3, [r4, #0]
    }

    if (conf == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d104      	bne.n	8003ac8 <bme68x_set_conf+0x78>
    {
        rslt = BME68X_E_NULL_PTR;
 8003abe:	231f      	movs	r3, #31
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	22ff      	movs	r2, #255	@ 0xff
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	e0e2      	b.n	8003c8e <bme68x_set_conf+0x23e>
    }
    else if (rslt == BME68X_OK)
 8003ac8:	251f      	movs	r5, #31
 8003aca:	197b      	adds	r3, r7, r5
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	b25b      	sxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d000      	beq.n	8003ad6 <bme68x_set_conf+0x86>
 8003ad4:	e0db      	b.n	8003c8e <bme68x_set_conf+0x23e>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8003ad6:	2314      	movs	r3, #20
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	7818      	ldrb	r0, [r3, #0]
 8003adc:	197c      	adds	r4, r7, r5
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	220c      	movs	r2, #12
 8003ae2:	18b9      	adds	r1, r7, r2
 8003ae4:	2205      	movs	r2, #5
 8003ae6:	f7ff ff01 	bl	80038ec <bme68x_get_regs>
 8003aea:	0003      	movs	r3, r0
 8003aec:	7023      	strb	r3, [r4, #0]
        dev->info_msg = BME68X_OK;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	224d      	movs	r2, #77	@ 0x4d
 8003af2:	2100      	movs	r1, #0
 8003af4:	5499      	strb	r1, [r3, r2]
        if (rslt == BME68X_OK)
 8003af6:	197b      	adds	r3, r7, r5
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	b25b      	sxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <bme68x_set_conf+0xc4>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3303      	adds	r3, #3
 8003b04:	197c      	adds	r4, r7, r5
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	2107      	movs	r1, #7
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 fc0c 	bl	8004328 <boundary_check>
 8003b10:	0003      	movs	r3, r0
 8003b12:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003b14:	221f      	movs	r2, #31
 8003b16:	18bb      	adds	r3, r7, r2
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3301      	adds	r3, #1
 8003b24:	18bc      	adds	r4, r7, r2
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	2105      	movs	r1, #5
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 fbfc 	bl	8004328 <boundary_check>
 8003b30:	0003      	movs	r3, r0
 8003b32:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003b34:	221f      	movs	r2, #31
 8003b36:	18bb      	adds	r3, r7, r2
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b25b      	sxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d109      	bne.n	8003b54 <bme68x_set_conf+0x104>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3302      	adds	r3, #2
 8003b44:	18bc      	adds	r4, r7, r2
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	2105      	movs	r1, #5
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f000 fbec 	bl	8004328 <boundary_check>
 8003b50:	0003      	movs	r3, r0
 8003b52:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003b54:	221f      	movs	r2, #31
 8003b56:	18bb      	adds	r3, r7, r2
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	b25b      	sxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d108      	bne.n	8003b72 <bme68x_set_conf+0x122>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	18bc      	adds	r4, r7, r2
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	2105      	movs	r1, #5
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f000 fbdd 	bl	8004328 <boundary_check>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003b72:	221f      	movs	r2, #31
 8003b74:	18bb      	adds	r3, r7, r2
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	b25b      	sxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <bme68x_set_conf+0x142>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	18bc      	adds	r4, r7, r2
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	2108      	movs	r1, #8
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 fbcd 	bl	8004328 <boundary_check>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003b92:	231f      	movs	r3, #31
 8003b94:	18fb      	adds	r3, r7, r3
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	b25b      	sxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d177      	bne.n	8003c8e <bme68x_set_conf+0x23e>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8003b9e:	200c      	movs	r0, #12
 8003ba0:	183b      	adds	r3, r7, r0
 8003ba2:	791b      	ldrb	r3, [r3, #4]
 8003ba4:	b25b      	sxtb	r3, r3
 8003ba6:	221c      	movs	r2, #28
 8003ba8:	4393      	bics	r3, r2
 8003baa:	b25a      	sxtb	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	78db      	ldrb	r3, [r3, #3]
 8003bb0:	b25b      	sxtb	r3, r3
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	b25b      	sxtb	r3, r3
 8003bb6:	211c      	movs	r1, #28
 8003bb8:	400b      	ands	r3, r1
 8003bba:	b25b      	sxtb	r3, r3
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	b25b      	sxtb	r3, r3
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	183b      	adds	r3, r7, r0
 8003bc4:	711a      	strb	r2, [r3, #4]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8003bc6:	183b      	adds	r3, r7, r0
 8003bc8:	78db      	ldrb	r3, [r3, #3]
 8003bca:	b25b      	sxtb	r3, r3
 8003bcc:	221f      	movs	r2, #31
 8003bce:	4013      	ands	r3, r2
 8003bd0:	b25a      	sxtb	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	785b      	ldrb	r3, [r3, #1]
 8003bd6:	b25b      	sxtb	r3, r3
 8003bd8:	015b      	lsls	r3, r3, #5
 8003bda:	b25b      	sxtb	r3, r3
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	b25b      	sxtb	r3, r3
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	183b      	adds	r3, r7, r0
 8003be4:	70da      	strb	r2, [r3, #3]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8003be6:	183b      	adds	r3, r7, r0
 8003be8:	78db      	ldrb	r3, [r3, #3]
 8003bea:	b25b      	sxtb	r3, r3
 8003bec:	221c      	movs	r2, #28
 8003bee:	4393      	bics	r3, r2
 8003bf0:	b25a      	sxtb	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	789b      	ldrb	r3, [r3, #2]
 8003bf6:	b25b      	sxtb	r3, r3
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	b25b      	sxtb	r3, r3
 8003bfc:	211c      	movs	r1, #28
 8003bfe:	400b      	ands	r3, r1
 8003c00:	b25b      	sxtb	r3, r3
 8003c02:	4313      	orrs	r3, r2
 8003c04:	b25b      	sxtb	r3, r3
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	183b      	adds	r3, r7, r0
 8003c0a:	70da      	strb	r2, [r3, #3]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8003c0c:	183b      	adds	r3, r7, r0
 8003c0e:	785b      	ldrb	r3, [r3, #1]
 8003c10:	b25b      	sxtb	r3, r3
 8003c12:	2207      	movs	r2, #7
 8003c14:	4393      	bics	r3, r2
 8003c16:	b25a      	sxtb	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	b25b      	sxtb	r3, r3
 8003c1e:	2107      	movs	r1, #7
 8003c20:	400b      	ands	r3, r1
 8003c22:	b25b      	sxtb	r3, r3
 8003c24:	4313      	orrs	r3, r2
 8003c26:	b25b      	sxtb	r3, r3
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	183b      	adds	r3, r7, r0
 8003c2c:	705a      	strb	r2, [r3, #1]
            if (conf->odr != BME68X_ODR_NONE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	791b      	ldrb	r3, [r3, #4]
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d008      	beq.n	8003c48 <bme68x_set_conf+0x1f8>
            {
                odr20 = conf->odr;
 8003c36:	231e      	movs	r3, #30
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	7912      	ldrb	r2, [r2, #4]
 8003c3e:	701a      	strb	r2, [r3, #0]
                odr3 = 0;
 8003c40:	231d      	movs	r3, #29
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8003c48:	210c      	movs	r1, #12
 8003c4a:	187b      	adds	r3, r7, r1
 8003c4c:	791b      	ldrb	r3, [r3, #4]
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	221f      	movs	r2, #31
 8003c52:	4013      	ands	r3, r2
 8003c54:	b25a      	sxtb	r2, r3
 8003c56:	231e      	movs	r3, #30
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b25b      	sxtb	r3, r3
 8003c5e:	015b      	lsls	r3, r3, #5
 8003c60:	b25b      	sxtb	r3, r3
 8003c62:	4313      	orrs	r3, r2
 8003c64:	b25b      	sxtb	r3, r3
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	711a      	strb	r2, [r3, #4]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8003c6c:	187b      	adds	r3, r7, r1
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	b25b      	sxtb	r3, r3
 8003c72:	227f      	movs	r2, #127	@ 0x7f
 8003c74:	4013      	ands	r3, r2
 8003c76:	b25a      	sxtb	r2, r3
 8003c78:	231d      	movs	r3, #29
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b25b      	sxtb	r3, r3
 8003c80:	01db      	lsls	r3, r3, #7
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	4313      	orrs	r3, r2
 8003c86:	b25b      	sxtb	r3, r3
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	701a      	strb	r2, [r3, #0]
        }
    }

    if (rslt == BME68X_OK)
 8003c8e:	221f      	movs	r2, #31
 8003c90:	18bb      	adds	r3, r7, r2
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b25b      	sxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <bme68x_set_conf+0x260>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8003c9a:	18bc      	adds	r4, r7, r2
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	220c      	movs	r2, #12
 8003ca0:	18b9      	adds	r1, r7, r2
 8003ca2:	2214      	movs	r2, #20
 8003ca4:	18b8      	adds	r0, r7, r2
 8003ca6:	2205      	movs	r2, #5
 8003ca8:	f7ff fd73 	bl	8003792 <bme68x_set_regs>
 8003cac:	0003      	movs	r3, r0
 8003cae:	7023      	strb	r3, [r4, #0]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8003cb0:	221c      	movs	r2, #28
 8003cb2:	18bb      	adds	r3, r7, r2
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00f      	beq.n	8003cda <bme68x_set_conf+0x28a>
 8003cba:	211f      	movs	r1, #31
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	b25b      	sxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <bme68x_set_conf+0x28a>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8003cc6:	18bb      	adds	r3, r7, r2
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	187c      	adds	r4, r7, r1
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	0011      	movs	r1, r2
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f000 f80d 	bl	8003cf0 <bme68x_set_op_mode>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003cda:	231f      	movs	r3, #31
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	b25b      	sxtb	r3, r3
}
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b008      	add	sp, #32
 8003ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8003cea:	46c0      	nop			@ (mov r8, r8)
 8003cec:	0800b470 	.word	0x0800b470

08003cf0 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8003cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	6039      	str	r1, [r7, #0]
 8003cfa:	1dfb      	adds	r3, r7, #7
 8003cfc:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8003cfe:	230e      	movs	r3, #14
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8003d06:	230c      	movs	r3, #12
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	2274      	movs	r2, #116	@ 0x74
 8003d0c:	701a      	strb	r2, [r3, #0]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8003d0e:	260f      	movs	r6, #15
 8003d10:	19bc      	adds	r4, r7, r6
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	250d      	movs	r5, #13
 8003d16:	1979      	adds	r1, r7, r5
 8003d18:	2201      	movs	r2, #1
 8003d1a:	2074      	movs	r0, #116	@ 0x74
 8003d1c:	f7ff fde6 	bl	80038ec <bme68x_get_regs>
 8003d20:	0003      	movs	r3, r0
 8003d22:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 8003d24:	0034      	movs	r4, r6
 8003d26:	193b      	adds	r3, r7, r4
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	b25b      	sxtb	r3, r3
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d123      	bne.n	8003d78 <bme68x_set_op_mode+0x88>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8003d30:	0028      	movs	r0, r5
 8003d32:	183b      	adds	r3, r7, r0
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	250e      	movs	r5, #14
 8003d38:	197b      	adds	r3, r7, r5
 8003d3a:	2103      	movs	r1, #3
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	701a      	strb	r2, [r3, #0]
            if (pow_mode != BME68X_SLEEP_MODE)
 8003d40:	197b      	adds	r3, r7, r5
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d017      	beq.n	8003d78 <bme68x_set_op_mode+0x88>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8003d48:	183b      	adds	r3, r7, r0
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2203      	movs	r2, #3
 8003d4e:	4393      	bics	r3, r2
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	183b      	adds	r3, r7, r0
 8003d54:	701a      	strb	r2, [r3, #0]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003d56:	193c      	adds	r4, r7, r4
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	1839      	adds	r1, r7, r0
 8003d5c:	220c      	movs	r2, #12
 8003d5e:	18b8      	adds	r0, r7, r2
 8003d60:	2201      	movs	r2, #1
 8003d62:	f7ff fd16 	bl	8003792 <bme68x_set_regs>
 8003d66:	0003      	movs	r3, r0
 8003d68:	7023      	strb	r3, [r4, #0]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	481e      	ldr	r0, [pc, #120]	@ (8003dec <bme68x_set_op_mode+0xfc>)
 8003d74:	0019      	movs	r1, r3
 8003d76:	4790      	blx	r2
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8003d78:	230e      	movs	r3, #14
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <bme68x_set_op_mode+0x9e>
 8003d82:	230f      	movs	r3, #15
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b25b      	sxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0bf      	beq.n	8003d0e <bme68x_set_op_mode+0x1e>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8003d8e:	1dfb      	adds	r3, r7, #7
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d021      	beq.n	8003dda <bme68x_set_op_mode+0xea>
 8003d96:	240f      	movs	r4, #15
 8003d98:	193b      	adds	r3, r7, r4
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	b25b      	sxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d11b      	bne.n	8003dda <bme68x_set_op_mode+0xea>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8003da2:	200d      	movs	r0, #13
 8003da4:	183b      	adds	r3, r7, r0
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	2203      	movs	r2, #3
 8003dac:	4393      	bics	r3, r2
 8003dae:	b25a      	sxtb	r2, r3
 8003db0:	1dfb      	adds	r3, r7, #7
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	2103      	movs	r1, #3
 8003db8:	400b      	ands	r3, r1
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	b25b      	sxtb	r3, r3
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	183b      	adds	r3, r7, r0
 8003dc4:	701a      	strb	r2, [r3, #0]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003dc6:	193c      	adds	r4, r7, r4
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	1839      	adds	r1, r7, r0
 8003dcc:	220c      	movs	r2, #12
 8003dce:	18b8      	adds	r0, r7, r2
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f7ff fcde 	bl	8003792 <bme68x_set_regs>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003dda:	230f      	movs	r3, #15
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	b25b      	sxtb	r3, r3
}
 8003de2:	0018      	movs	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b005      	add	sp, #20
 8003de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dea:	46c0      	nop			@ (mov r8, r8)
 8003dec:	00002710 	.word	0x00002710

08003df0 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8003df0:	b5b0      	push	{r4, r5, r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d012      	beq.n	8003e26 <bme68x_get_op_mode+0x36>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8003e00:	230f      	movs	r3, #15
 8003e02:	18fc      	adds	r4, r7, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	250e      	movs	r5, #14
 8003e08:	1979      	adds	r1, r7, r5
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	2074      	movs	r0, #116	@ 0x74
 8003e0e:	f7ff fd6d 	bl	80038ec <bme68x_get_regs>
 8003e12:	0003      	movs	r3, r0
 8003e14:	7023      	strb	r3, [r4, #0]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8003e16:	197b      	adds	r3, r7, r5
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	e003      	b.n	8003e2e <bme68x_get_op_mode+0x3e>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003e26:	230f      	movs	r3, #15
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	22ff      	movs	r2, #255	@ 0xff
 8003e2c:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003e2e:	230f      	movs	r3, #15
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	b25b      	sxtb	r3, r3
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b004      	add	sp, #16
 8003e3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003e40 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8003e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e42:	b089      	sub	sp, #36	@ 0x24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	260f      	movs	r6, #15
 8003e4c:	19bb      	adds	r3, r7, r6
 8003e4e:	1c02      	adds	r2, r0, #0
 8003e50:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t nb_conv = 0;
 8003e52:	231c      	movs	r3, #28
 8003e54:	18fb      	adds	r3, r7, r3
 8003e56:	2200      	movs	r2, #0
 8003e58:	701a      	strb	r2, [r3, #0]
    uint8_t hctrl, run_gas = 0;
 8003e5a:	221d      	movs	r2, #29
 8003e5c:	18bb      	adds	r3, r7, r2
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8003e62:	2214      	movs	r2, #20
 8003e64:	18bb      	adds	r3, r7, r2
 8003e66:	4a53      	ldr	r2, [pc, #332]	@ (8003fb4 <bme68x_set_heatr_conf+0x174>)
 8003e68:	801a      	strh	r2, [r3, #0]

    if (conf != NULL)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d100      	bne.n	8003e72 <bme68x_set_heatr_conf+0x32>
 8003e70:	e094      	b.n	8003f9c <bme68x_set_heatr_conf+0x15c>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8003e72:	251f      	movs	r5, #31
 8003e74:	197c      	adds	r4, r7, r5
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	0019      	movs	r1, r3
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	f7ff ff38 	bl	8003cf0 <bme68x_set_op_mode>
 8003e80:	0003      	movs	r3, r0
 8003e82:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 8003e84:	197b      	adds	r3, r7, r5
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	b25b      	sxtb	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10b      	bne.n	8003ea6 <bme68x_set_heatr_conf+0x66>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 8003e8e:	197c      	adds	r4, r7, r5
 8003e90:	687d      	ldr	r5, [r7, #4]
 8003e92:	231c      	movs	r3, #28
 8003e94:	18fa      	adds	r2, r7, r3
 8003e96:	19bb      	adds	r3, r7, r6
 8003e98:	7819      	ldrb	r1, [r3, #0]
 8003e9a:	68b8      	ldr	r0, [r7, #8]
 8003e9c:	002b      	movs	r3, r5
 8003e9e:	f000 fa9f 	bl	80043e0 <set_conf>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003ea6:	251f      	movs	r5, #31
 8003ea8:	197b      	adds	r3, r7, r5
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	b25b      	sxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d000      	beq.n	8003eb4 <bme68x_set_heatr_conf+0x74>
 8003eb2:	e077      	b.n	8003fa4 <bme68x_set_heatr_conf+0x164>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8003eb4:	197c      	adds	r4, r7, r5
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2218      	movs	r2, #24
 8003eba:	18b9      	adds	r1, r7, r2
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	2070      	movs	r0, #112	@ 0x70
 8003ec0:	f7ff fd14 	bl	80038ec <bme68x_get_regs>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8003ec8:	197b      	adds	r3, r7, r5
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	b25b      	sxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d168      	bne.n	8003fa4 <bme68x_set_heatr_conf+0x164>
            {
                if (conf->enable == BME68X_ENABLE)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d111      	bne.n	8003efe <bme68x_set_heatr_conf+0xbe>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8003eda:	231e      	movs	r3, #30
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d104      	bne.n	8003ef4 <bme68x_set_heatr_conf+0xb4>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8003eea:	231d      	movs	r3, #29
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	2202      	movs	r2, #2
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e00c      	b.n	8003f0e <bme68x_set_heatr_conf+0xce>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8003ef4:	231d      	movs	r3, #29
 8003ef6:	18fb      	adds	r3, r7, r3
 8003ef8:	2201      	movs	r2, #1
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	e007      	b.n	8003f0e <bme68x_set_heatr_conf+0xce>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 8003efe:	231e      	movs	r3, #30
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	2201      	movs	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8003f06:	231d      	movs	r3, #29
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	701a      	strb	r2, [r3, #0]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8003f0e:	2018      	movs	r0, #24
 8003f10:	183b      	adds	r3, r7, r0
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	b25b      	sxtb	r3, r3
 8003f16:	2208      	movs	r2, #8
 8003f18:	4393      	bics	r3, r2
 8003f1a:	b25a      	sxtb	r2, r3
 8003f1c:	231e      	movs	r3, #30
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	b25b      	sxtb	r3, r3
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	b25b      	sxtb	r3, r3
 8003f28:	2108      	movs	r1, #8
 8003f2a:	400b      	ands	r3, r1
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	b25b      	sxtb	r3, r3
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	183b      	adds	r3, r7, r0
 8003f36:	701a      	strb	r2, [r3, #0]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8003f38:	183b      	adds	r3, r7, r0
 8003f3a:	785b      	ldrb	r3, [r3, #1]
 8003f3c:	b25b      	sxtb	r3, r3
 8003f3e:	220f      	movs	r2, #15
 8003f40:	4393      	bics	r3, r2
 8003f42:	b25a      	sxtb	r2, r3
 8003f44:	231c      	movs	r3, #28
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	b25b      	sxtb	r3, r3
 8003f4c:	210f      	movs	r1, #15
 8003f4e:	400b      	ands	r3, r1
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	4313      	orrs	r3, r2
 8003f54:	b25b      	sxtb	r3, r3
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	183b      	adds	r3, r7, r0
 8003f5a:	705a      	strb	r2, [r3, #1]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8003f5c:	183b      	adds	r3, r7, r0
 8003f5e:	785b      	ldrb	r3, [r3, #1]
 8003f60:	b25b      	sxtb	r3, r3
 8003f62:	2230      	movs	r2, #48	@ 0x30
 8003f64:	4393      	bics	r3, r2
 8003f66:	b25a      	sxtb	r2, r3
 8003f68:	231d      	movs	r3, #29
 8003f6a:	18fb      	adds	r3, r7, r3
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	b25b      	sxtb	r3, r3
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	b25b      	sxtb	r3, r3
 8003f74:	2130      	movs	r1, #48	@ 0x30
 8003f76:	400b      	ands	r3, r1
 8003f78:	b25b      	sxtb	r3, r3
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	b25b      	sxtb	r3, r3
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	183b      	adds	r3, r7, r0
 8003f82:	705a      	strb	r2, [r3, #1]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8003f84:	231f      	movs	r3, #31
 8003f86:	18fc      	adds	r4, r7, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	1839      	adds	r1, r7, r0
 8003f8c:	2214      	movs	r2, #20
 8003f8e:	18b8      	adds	r0, r7, r2
 8003f90:	2202      	movs	r2, #2
 8003f92:	f7ff fbfe 	bl	8003792 <bme68x_set_regs>
 8003f96:	0003      	movs	r3, r0
 8003f98:	7023      	strb	r3, [r4, #0]
 8003f9a:	e003      	b.n	8003fa4 <bme68x_set_heatr_conf+0x164>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003f9c:	231f      	movs	r3, #31
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	22ff      	movs	r2, #255	@ 0xff
 8003fa2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003fa4:	231f      	movs	r3, #31
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	b25b      	sxtb	r3, r3
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b009      	add	sp, #36	@ 0x24
 8003fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb4:	00007170 	.word	0x00007170

08003fb8 <calc_res_heat>:
    return calc_gas_res;
}

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8003fb8:	b5b0      	push	{r4, r5, r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	0002      	movs	r2, r0
 8003fc0:	6039      	str	r1, [r7, #0]
 8003fc2:	1dbb      	adds	r3, r7, #6
 8003fc4:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8003fc6:	1dbb      	adds	r3, r7, #6
 8003fc8:	881a      	ldrh	r2, [r3, #0]
 8003fca:	23c8      	movs	r3, #200	@ 0xc8
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d903      	bls.n	8003fda <calc_res_heat+0x22>
    {
        temp = 400;
 8003fd2:	1dbb      	adds	r3, r7, #6
 8003fd4:	22c8      	movs	r2, #200	@ 0xc8
 8003fd6:	0052      	lsls	r2, r2, #1
 8003fd8:	801a      	strh	r2, [r3, #0]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	7e5b      	ldrb	r3, [r3, #25]
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f7fd fb3b 	bl	800165c <__aeabi_i2f>
 8003fe6:	1c03      	adds	r3, r0, #0
 8003fe8:	2183      	movs	r1, #131	@ 0x83
 8003fea:	05c9      	lsls	r1, r1, #23
 8003fec:	1c18      	adds	r0, r3, #0
 8003fee:	f7fc fd89 	bl	8000b04 <__aeabi_fdiv>
 8003ff2:	1c03      	adds	r3, r0, #0
 8003ff4:	4950      	ldr	r1, [pc, #320]	@ (8004138 <calc_res_heat+0x180>)
 8003ff6:	1c18      	adds	r0, r3, #0
 8003ff8:	f7fc fb92 	bl	8000720 <__aeabi_fadd>
 8003ffc:	1c03      	adds	r3, r0, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	221a      	movs	r2, #26
 8004004:	5e9b      	ldrsh	r3, [r3, r2]
 8004006:	0018      	movs	r0, r3
 8004008:	f7fd fb28 	bl	800165c <__aeabi_i2f>
 800400c:	1c03      	adds	r3, r0, #0
 800400e:	218e      	movs	r1, #142	@ 0x8e
 8004010:	05c9      	lsls	r1, r1, #23
 8004012:	1c18      	adds	r0, r3, #0
 8004014:	f7fc fd76 	bl	8000b04 <__aeabi_fdiv>
 8004018:	1c03      	adds	r3, r0, #0
 800401a:	4948      	ldr	r1, [pc, #288]	@ (800413c <calc_res_heat+0x184>)
 800401c:	1c18      	adds	r0, r3, #0
 800401e:	f7fc ff3f 	bl	8000ea0 <__aeabi_fmul>
 8004022:	1c03      	adds	r3, r0, #0
 8004024:	4946      	ldr	r1, [pc, #280]	@ (8004140 <calc_res_heat+0x188>)
 8004026:	1c18      	adds	r0, r3, #0
 8004028:	f7fc fb7a 	bl	8000720 <__aeabi_fadd>
 800402c:	1c03      	adds	r3, r0, #0
 800402e:	61bb      	str	r3, [r7, #24]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	7f1b      	ldrb	r3, [r3, #28]
 8004034:	b25b      	sxtb	r3, r3
 8004036:	0018      	movs	r0, r3
 8004038:	f7fd fb10 	bl	800165c <__aeabi_i2f>
 800403c:	1c03      	adds	r3, r0, #0
 800403e:	2189      	movs	r1, #137	@ 0x89
 8004040:	05c9      	lsls	r1, r1, #23
 8004042:	1c18      	adds	r0, r3, #0
 8004044:	f7fc fd5e 	bl	8000b04 <__aeabi_fdiv>
 8004048:	1c03      	adds	r3, r0, #0
 800404a:	617b      	str	r3, [r7, #20]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 800404c:	1dbb      	adds	r3, r7, #6
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	0018      	movs	r0, r3
 8004052:	f7fd fb53 	bl	80016fc <__aeabi_ui2f>
 8004056:	1c03      	adds	r3, r0, #0
 8004058:	69b9      	ldr	r1, [r7, #24]
 800405a:	1c18      	adds	r0, r3, #0
 800405c:	f7fc ff20 	bl	8000ea0 <__aeabi_fmul>
 8004060:	1c03      	adds	r3, r0, #0
 8004062:	21fe      	movs	r1, #254	@ 0xfe
 8004064:	0589      	lsls	r1, r1, #22
 8004066:	1c18      	adds	r0, r3, #0
 8004068:	f7fc fb5a 	bl	8000720 <__aeabi_fadd>
 800406c:	1c03      	adds	r3, r0, #0
 800406e:	1c19      	adds	r1, r3, #0
 8004070:	69f8      	ldr	r0, [r7, #28]
 8004072:	f7fc ff15 	bl	8000ea0 <__aeabi_fmul>
 8004076:	1c03      	adds	r3, r0, #0
 8004078:	613b      	str	r3, [r7, #16]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	7b9b      	ldrb	r3, [r3, #14]
 800407e:	b25b      	sxtb	r3, r3
 8004080:	0018      	movs	r0, r3
 8004082:	f7fd faeb 	bl	800165c <__aeabi_i2f>
 8004086:	1c03      	adds	r3, r0, #0
 8004088:	6979      	ldr	r1, [r7, #20]
 800408a:	1c18      	adds	r0, r3, #0
 800408c:	f7fc ff08 	bl	8000ea0 <__aeabi_fmul>
 8004090:	1c03      	adds	r3, r0, #0
 8004092:	1c19      	adds	r1, r3, #0
 8004094:	6938      	ldr	r0, [r7, #16]
 8004096:	f7fc fb43 	bl	8000720 <__aeabi_fadd>
 800409a:	1c03      	adds	r3, r0, #0
 800409c:	60fb      	str	r3, [r7, #12]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	223c      	movs	r2, #60	@ 0x3c
 80040a2:	5c9b      	ldrb	r3, [r3, r2]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f7fd fb29 	bl	80016fc <__aeabi_ui2f>
 80040aa:	1c03      	adds	r3, r0, #0
 80040ac:	2181      	movs	r1, #129	@ 0x81
 80040ae:	05c9      	lsls	r1, r1, #23
 80040b0:	1c18      	adds	r0, r3, #0
 80040b2:	f7fc fb35 	bl	8000720 <__aeabi_fadd>
 80040b6:	1c03      	adds	r3, r0, #0
 80040b8:	1c19      	adds	r1, r3, #0
 80040ba:	2081      	movs	r0, #129	@ 0x81
 80040bc:	05c0      	lsls	r0, r0, #23
 80040be:	f7fc fd21 	bl	8000b04 <__aeabi_fdiv>
 80040c2:	1c03      	adds	r3, r0, #0
 80040c4:	68f9      	ldr	r1, [r7, #12]
 80040c6:	1c18      	adds	r0, r3, #0
 80040c8:	f7fc feea 	bl	8000ea0 <__aeabi_fmul>
 80040cc:	1c03      	adds	r3, r0, #0
 80040ce:	1c1c      	adds	r4, r3, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	223d      	movs	r2, #61	@ 0x3d
 80040d4:	569b      	ldrsb	r3, [r3, r2]
 80040d6:	0018      	movs	r0, r3
 80040d8:	f7fd fac0 	bl	800165c <__aeabi_i2f>
 80040dc:	1c03      	adds	r3, r0, #0
 80040de:	4919      	ldr	r1, [pc, #100]	@ (8004144 <calc_res_heat+0x18c>)
 80040e0:	1c18      	adds	r0, r3, #0
 80040e2:	f7fc fedd 	bl	8000ea0 <__aeabi_fmul>
 80040e6:	1c03      	adds	r3, r0, #0
 80040e8:	21fe      	movs	r1, #254	@ 0xfe
 80040ea:	0589      	lsls	r1, r1, #22
 80040ec:	1c18      	adds	r0, r3, #0
 80040ee:	f7fc fb17 	bl	8000720 <__aeabi_fadd>
 80040f2:	1c03      	adds	r3, r0, #0
 80040f4:	1c19      	adds	r1, r3, #0
 80040f6:	20fe      	movs	r0, #254	@ 0xfe
 80040f8:	0580      	lsls	r0, r0, #22
 80040fa:	f7fc fd03 	bl	8000b04 <__aeabi_fdiv>
 80040fe:	1c03      	adds	r3, r0, #0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8004100:	1c19      	adds	r1, r3, #0
 8004102:	1c20      	adds	r0, r4, #0
 8004104:	f7fc fecc 	bl	8000ea0 <__aeabi_fmul>
 8004108:	1c03      	adds	r3, r0, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 800410a:	490f      	ldr	r1, [pc, #60]	@ (8004148 <calc_res_heat+0x190>)
 800410c:	1c18      	adds	r0, r3, #0
 800410e:	f7fd f821 	bl	8001154 <__aeabi_fsub>
 8004112:	1c03      	adds	r3, r0, #0
        (uint8_t)(3.4f *
 8004114:	490d      	ldr	r1, [pc, #52]	@ (800414c <calc_res_heat+0x194>)
 8004116:	1c18      	adds	r0, r3, #0
 8004118:	f7fc fec2 	bl	8000ea0 <__aeabi_fmul>
 800411c:	1c03      	adds	r3, r0, #0
    res_heat =
 800411e:	250b      	movs	r5, #11
 8004120:	197c      	adds	r4, r7, r5
 8004122:	1c18      	adds	r0, r3, #0
 8004124:	f7fc fa18 	bl	8000558 <__aeabi_f2uiz>
 8004128:	0003      	movs	r3, r0
 800412a:	7023      	strb	r3, [r4, #0]
                   25));

    return res_heat;
 800412c:	197b      	adds	r3, r7, r5
 800412e:	781b      	ldrb	r3, [r3, #0]
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b008      	add	sp, #32
 8004136:	bdb0      	pop	{r4, r5, r7, pc}
 8004138:	42440000 	.word	0x42440000
 800413c:	3a03126f 	.word	0x3a03126f
 8004140:	3b1a0275 	.word	0x3b1a0275
 8004144:	3b03126f 	.word	0x3b03126f
 8004148:	41c80000 	.word	0x41c80000
 800414c:	4059999a 	.word	0x4059999a

08004150 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	0002      	movs	r2, r0
 8004158:	1dbb      	adds	r3, r7, #6
 800415a:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 800415c:	230f      	movs	r3, #15
 800415e:	18fb      	adds	r3, r7, r3
 8004160:	2200      	movs	r2, #0
 8004162:	701a      	strb	r2, [r3, #0]
    uint8_t durval;

    if (dur >= 0xfc0)
 8004164:	1dbb      	adds	r3, r7, #6
 8004166:	881a      	ldrh	r2, [r3, #0]
 8004168:	23fc      	movs	r3, #252	@ 0xfc
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	429a      	cmp	r2, r3
 800416e:	d30f      	bcc.n	8004190 <calc_gas_wait+0x40>
    {
        durval = 0xff; /* Max duration*/
 8004170:	230e      	movs	r3, #14
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	22ff      	movs	r2, #255	@ 0xff
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e01a      	b.n	80041b0 <calc_gas_wait+0x60>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 800417a:	1dbb      	adds	r3, r7, #6
 800417c:	1dba      	adds	r2, r7, #6
 800417e:	8812      	ldrh	r2, [r2, #0]
 8004180:	0892      	lsrs	r2, r2, #2
 8004182:	801a      	strh	r2, [r3, #0]
            factor += 1;
 8004184:	220f      	movs	r2, #15
 8004186:	18bb      	adds	r3, r7, r2
 8004188:	18ba      	adds	r2, r7, r2
 800418a:	7812      	ldrb	r2, [r2, #0]
 800418c:	3201      	adds	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8004190:	1dbb      	adds	r3, r7, #6
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	2b3f      	cmp	r3, #63	@ 0x3f
 8004196:	d8f0      	bhi.n	800417a <calc_gas_wait+0x2a>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8004198:	1dbb      	adds	r3, r7, #6
 800419a:	881b      	ldrh	r3, [r3, #0]
 800419c:	b2d9      	uxtb	r1, r3
 800419e:	230f      	movs	r3, #15
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	019b      	lsls	r3, r3, #6
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	230e      	movs	r3, #14
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	188a      	adds	r2, r1, r2
 80041ae:	701a      	strb	r2, [r3, #0]
    }

    return durval;
 80041b0:	230e      	movs	r3, #14
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	781b      	ldrb	r3, [r3, #0]
}
 80041b6:	0018      	movs	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b004      	add	sp, #16
 80041bc:	bd80      	pop	{r7, pc}

080041be <set_mem_page>:
    return rslt;
}

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 80041be:	b5b0      	push	{r4, r5, r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	0002      	movs	r2, r0
 80041c6:	6039      	str	r1, [r7, #0]
 80041c8:	1dfb      	adds	r3, r7, #7
 80041ca:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 80041cc:	250f      	movs	r5, #15
 80041ce:	197c      	adds	r4, r7, r5
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 f8e1 	bl	800439a <null_ptr_check>
 80041d8:	0003      	movs	r3, r0
 80041da:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 80041dc:	197b      	adds	r3, r7, r5
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	b25b      	sxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d160      	bne.n	80042a8 <set_mem_page+0xea>
    {
        if (reg_addr > 0x7f)
 80041e6:	1dfb      	adds	r3, r7, #7
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	b25b      	sxtb	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	da04      	bge.n	80041fa <set_mem_page+0x3c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80041f0:	230e      	movs	r3, #14
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	e003      	b.n	8004202 <set_mem_page+0x44>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80041fa:	230e      	movs	r3, #14
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	2210      	movs	r2, #16
 8004200:	701a      	strb	r2, [r3, #0]
        }

        if (mem_page != dev->mem_page)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	7b5b      	ldrb	r3, [r3, #13]
 8004206:	210e      	movs	r1, #14
 8004208:	187a      	adds	r2, r7, r1
 800420a:	7812      	ldrb	r2, [r2, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d04b      	beq.n	80042a8 <set_mem_page+0xea>
        {
            dev->mem_page = mem_page;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	187a      	adds	r2, r7, r1
 8004214:	7812      	ldrb	r2, [r2, #0]
 8004216:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	220d      	movs	r2, #13
 8004222:	18b9      	adds	r1, r7, r2
 8004224:	2201      	movs	r2, #1
 8004226:	20f3      	movs	r0, #243	@ 0xf3
 8004228:	47a0      	blx	r4
 800422a:	0003      	movs	r3, r0
 800422c:	0019      	movs	r1, r3
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	224c      	movs	r2, #76	@ 0x4c
 8004232:	5499      	strb	r1, [r3, r2]
            if (dev->intf_rslt != 0)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	224c      	movs	r2, #76	@ 0x4c
 8004238:	569b      	ldrsb	r3, [r3, r2]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <set_mem_page+0x88>
            {
                rslt = BME68X_E_COM_FAIL;
 800423e:	230f      	movs	r3, #15
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	22fe      	movs	r2, #254	@ 0xfe
 8004244:	701a      	strb	r2, [r3, #0]
            }

            if (rslt == BME68X_OK)
 8004246:	250f      	movs	r5, #15
 8004248:	197b      	adds	r3, r7, r5
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	b25b      	sxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d12a      	bne.n	80042a8 <set_mem_page+0xea>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8004252:	210d      	movs	r1, #13
 8004254:	187b      	adds	r3, r7, r1
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2210      	movs	r2, #16
 800425a:	4393      	bics	r3, r2
 800425c:	b2da      	uxtb	r2, r3
 800425e:	187b      	adds	r3, r7, r1
 8004260:	701a      	strb	r2, [r3, #0]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	7b5b      	ldrb	r3, [r3, #13]
 8004266:	b25b      	sxtb	r3, r3
 8004268:	2210      	movs	r2, #16
 800426a:	4013      	ands	r3, r2
 800426c:	b25a      	sxtb	r2, r3
 800426e:	187b      	adds	r3, r7, r1
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	b25b      	sxtb	r3, r3
 8004274:	4313      	orrs	r3, r2
 8004276:	b25b      	sxtb	r3, r3
 8004278:	b2da      	uxtb	r2, r3
 800427a:	187b      	adds	r3, r7, r1
 800427c:	701a      	strb	r2, [r3, #0]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	1879      	adds	r1, r7, r1
 8004288:	2201      	movs	r2, #1
 800428a:	2073      	movs	r0, #115	@ 0x73
 800428c:	47a0      	blx	r4
 800428e:	0003      	movs	r3, r0
 8004290:	0019      	movs	r1, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	224c      	movs	r2, #76	@ 0x4c
 8004296:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	224c      	movs	r2, #76	@ 0x4c
 800429c:	569b      	ldrsb	r3, [r3, r2]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <set_mem_page+0xea>
                {
                    rslt = BME68X_E_COM_FAIL;
 80042a2:	197b      	adds	r3, r7, r5
 80042a4:	22fe      	movs	r2, #254	@ 0xfe
 80042a6:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    return rslt;
 80042a8:	230f      	movs	r3, #15
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b25b      	sxtb	r3, r3
}
 80042b0:	0018      	movs	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b004      	add	sp, #16
 80042b6:	bdb0      	pop	{r4, r5, r7, pc}

080042b8 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 80042b8:	b5b0      	push	{r4, r5, r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80042c0:	250f      	movs	r5, #15
 80042c2:	197c      	adds	r4, r7, r5
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f000 f867 	bl	800439a <null_ptr_check>
 80042cc:	0003      	movs	r3, r0
 80042ce:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 80042d0:	197b      	adds	r3, r7, r5
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d11e      	bne.n	8004318 <get_mem_page+0x60>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	220e      	movs	r2, #14
 80042e4:	18b9      	adds	r1, r7, r2
 80042e6:	2201      	movs	r2, #1
 80042e8:	20f3      	movs	r0, #243	@ 0xf3
 80042ea:	47a0      	blx	r4
 80042ec:	0003      	movs	r3, r0
 80042ee:	0019      	movs	r1, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	224c      	movs	r2, #76	@ 0x4c
 80042f4:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	224c      	movs	r2, #76	@ 0x4c
 80042fa:	569b      	ldrsb	r3, [r3, r2]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <get_mem_page+0x50>
        {
            rslt = BME68X_E_COM_FAIL;
 8004300:	197b      	adds	r3, r7, r5
 8004302:	22fe      	movs	r2, #254	@ 0xfe
 8004304:	701a      	strb	r2, [r3, #0]
 8004306:	e007      	b.n	8004318 <get_mem_page+0x60>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8004308:	230e      	movs	r3, #14
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2210      	movs	r2, #16
 8004310:	4013      	ands	r3, r2
 8004312:	b2da      	uxtb	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 8004318:	230f      	movs	r3, #15
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	b25b      	sxtb	r3, r3
}
 8004320:	0018      	movs	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	b004      	add	sp, #16
 8004326:	bdb0      	pop	{r4, r5, r7, pc}

08004328 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 8004328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	250b      	movs	r5, #11
 8004334:	197b      	adds	r3, r7, r5
 8004336:	1c0a      	adds	r2, r1, #0
 8004338:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800433a:	2617      	movs	r6, #23
 800433c:	19bc      	adds	r4, r7, r6
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	0018      	movs	r0, r3
 8004342:	f000 f82a 	bl	800439a <null_ptr_check>
 8004346:	0003      	movs	r3, r0
 8004348:	7023      	strb	r3, [r4, #0]
    if ((value != NULL) && (rslt == BME68X_OK))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d018      	beq.n	8004382 <boundary_check+0x5a>
 8004350:	19bb      	adds	r3, r7, r6
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	b25b      	sxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d113      	bne.n	8004382 <boundary_check+0x5a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	197a      	adds	r2, r7, r5
 8004360:	7812      	ldrb	r2, [r2, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d211      	bcs.n	800438a <boundary_check+0x62>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	197a      	adds	r2, r7, r5
 800436a:	7812      	ldrb	r2, [r2, #0]
 800436c:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	224d      	movs	r2, #77	@ 0x4d
 8004372:	5c9b      	ldrb	r3, [r3, r2]
 8004374:	2201      	movs	r2, #1
 8004376:	4313      	orrs	r3, r2
 8004378:	b2d9      	uxtb	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	224d      	movs	r2, #77	@ 0x4d
 800437e:	5499      	strb	r1, [r3, r2]
        if (*value > max)
 8004380:	e003      	b.n	800438a <boundary_check+0x62>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8004382:	2317      	movs	r3, #23
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	22ff      	movs	r2, #255	@ 0xff
 8004388:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800438a:	2317      	movs	r3, #23
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	b25b      	sxtb	r3, r3
}
 8004392:	0018      	movs	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	b007      	add	sp, #28
 8004398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800439a <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 80043a2:	230f      	movs	r3, #15
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00b      	beq.n	80043c8 <null_ptr_check+0x2e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d007      	beq.n	80043c8 <null_ptr_check+0x2e>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <null_ptr_check+0x2e>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d103      	bne.n	80043d0 <null_ptr_check+0x36>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 80043c8:	230f      	movs	r3, #15
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	22ff      	movs	r2, #255	@ 0xff
 80043ce:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80043d0:	230f      	movs	r3, #15
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b25b      	sxtb	r3, r3
}
 80043d8:	0018      	movs	r0, r3
 80043da:	46bd      	mov	sp, r7
 80043dc:	b004      	add	sp, #16
 80043de:	bd80      	pop	{r7, pc}

080043e0 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 80043e0:	b5b0      	push	{r4, r5, r7, lr}
 80043e2:	b092      	sub	sp, #72	@ 0x48
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	607a      	str	r2, [r7, #4]
 80043ea:	603b      	str	r3, [r7, #0]
 80043ec:	240b      	movs	r4, #11
 80043ee:	193b      	adds	r3, r7, r4
 80043f0:	1c0a      	adds	r2, r1, #0
 80043f2:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 80043f4:	2347      	movs	r3, #71	@ 0x47
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	2200      	movs	r2, #0
 80043fa:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 80043fc:	2345      	movs	r3, #69	@ 0x45
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8004404:	2343      	movs	r3, #67	@ 0x43
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	226e      	movs	r2, #110	@ 0x6e
 800440a:	701a      	strb	r2, [r3, #0]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800440c:	2338      	movs	r3, #56	@ 0x38
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	0018      	movs	r0, r3
 8004412:	230a      	movs	r3, #10
 8004414:	001a      	movs	r2, r3
 8004416:	2100      	movs	r1, #0
 8004418:	f004 fe72 	bl	8009100 <memset>
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800441c:	232c      	movs	r3, #44	@ 0x2c
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	0018      	movs	r0, r3
 8004422:	230a      	movs	r3, #10
 8004424:	001a      	movs	r2, r3
 8004426:	2100      	movs	r1, #0
 8004428:	f004 fe6a 	bl	8009100 <memset>
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800442c:	2320      	movs	r3, #32
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	0018      	movs	r0, r3
 8004432:	230a      	movs	r3, #10
 8004434:	001a      	movs	r2, r3
 8004436:	2100      	movs	r1, #0
 8004438:	f004 fe62 	bl	8009100 <memset>
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800443c:	2314      	movs	r3, #20
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	0018      	movs	r0, r3
 8004442:	230a      	movs	r3, #10
 8004444:	001a      	movs	r2, r3
 8004446:	2100      	movs	r1, #0
 8004448:	f004 fe5a 	bl	8009100 <memset>

    switch (op_mode)
 800444c:	193b      	adds	r3, r7, r4
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d02d      	beq.n	80044b0 <set_conf+0xd0>
 8004454:	dd00      	ble.n	8004458 <set_conf+0x78>
 8004456:	e10c      	b.n	8004672 <set_conf+0x292>
 8004458:	2b01      	cmp	r3, #1
 800445a:	d003      	beq.n	8004464 <set_conf+0x84>
 800445c:	2b02      	cmp	r3, #2
 800445e:	d100      	bne.n	8004462 <set_conf+0x82>
 8004460:	e088      	b.n	8004574 <set_conf+0x194>
 8004462:	e106      	b.n	8004672 <set_conf+0x292>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8004464:	2338      	movs	r3, #56	@ 0x38
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	225a      	movs	r2, #90	@ 0x5a
 800446a:	701a      	strb	r2, [r3, #0]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	885b      	ldrh	r3, [r3, #2]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	0011      	movs	r1, r2
 8004474:	0018      	movs	r0, r3
 8004476:	f7ff fd9f 	bl	8003fb8 <calc_res_heat>
 800447a:	0003      	movs	r3, r0
 800447c:	001a      	movs	r2, r3
 800447e:	232c      	movs	r3, #44	@ 0x2c
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	701a      	strb	r2, [r3, #0]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8004484:	2320      	movs	r3, #32
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	2264      	movs	r2, #100	@ 0x64
 800448a:	701a      	strb	r2, [r3, #0]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	889b      	ldrh	r3, [r3, #4]
 8004490:	0018      	movs	r0, r3
 8004492:	f7ff fe5d 	bl	8004150 <calc_gas_wait>
 8004496:	0003      	movs	r3, r0
 8004498:	001a      	movs	r2, r3
 800449a:	2314      	movs	r3, #20
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	701a      	strb	r2, [r3, #0]
            (*nb_conv) = 0;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 80044a6:	2345      	movs	r3, #69	@ 0x45
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	2201      	movs	r2, #1
 80044ac:	701a      	strb	r2, [r3, #0]
            break;
 80044ae:	e0e6      	b.n	800467e <set_conf+0x29e>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <set_conf+0xe0>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d104      	bne.n	80044ca <set_conf+0xea>
            {
                rslt = BME68X_E_NULL_PTR;
 80044c0:	2347      	movs	r3, #71	@ 0x47
 80044c2:	18fb      	adds	r3, r7, r3
 80044c4:	22ff      	movs	r2, #255	@ 0xff
 80044c6:	701a      	strb	r2, [r3, #0]
                break;
 80044c8:	e0d9      	b.n	800467e <set_conf+0x29e>
            }

            for (i = 0; i < conf->profile_len; i++)
 80044ca:	2346      	movs	r3, #70	@ 0x46
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	2200      	movs	r2, #0
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	e03e      	b.n	8004552 <set_conf+0x172>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80044d4:	2046      	movs	r0, #70	@ 0x46
 80044d6:	183b      	adds	r3, r7, r0
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	183a      	adds	r2, r7, r0
 80044dc:	7812      	ldrb	r2, [r2, #0]
 80044de:	325a      	adds	r2, #90	@ 0x5a
 80044e0:	b2d1      	uxtb	r1, r2
 80044e2:	2238      	movs	r2, #56	@ 0x38
 80044e4:	18ba      	adds	r2, r7, r2
 80044e6:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	183b      	adds	r3, r7, r0
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	18d3      	adds	r3, r2, r3
 80044f4:	881a      	ldrh	r2, [r3, #0]
 80044f6:	0005      	movs	r5, r0
 80044f8:	183b      	adds	r3, r7, r0
 80044fa:	781c      	ldrb	r4, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	0019      	movs	r1, r3
 8004500:	0010      	movs	r0, r2
 8004502:	f7ff fd59 	bl	8003fb8 <calc_res_heat>
 8004506:	0003      	movs	r3, r0
 8004508:	001a      	movs	r2, r3
 800450a:	232c      	movs	r3, #44	@ 0x2c
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8004510:	0028      	movs	r0, r5
 8004512:	183b      	adds	r3, r7, r0
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	183a      	adds	r2, r7, r0
 8004518:	7812      	ldrb	r2, [r2, #0]
 800451a:	3264      	adds	r2, #100	@ 0x64
 800451c:	b2d1      	uxtb	r1, r2
 800451e:	2220      	movs	r2, #32
 8004520:	18ba      	adds	r2, r7, r2
 8004522:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	183b      	adds	r3, r7, r0
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	18d3      	adds	r3, r2, r3
 8004530:	881a      	ldrh	r2, [r3, #0]
 8004532:	0005      	movs	r5, r0
 8004534:	183b      	adds	r3, r7, r0
 8004536:	781c      	ldrb	r4, [r3, #0]
 8004538:	0010      	movs	r0, r2
 800453a:	f7ff fe09 	bl	8004150 <calc_gas_wait>
 800453e:	0003      	movs	r3, r0
 8004540:	001a      	movs	r2, r3
 8004542:	2314      	movs	r3, #20
 8004544:	18fb      	adds	r3, r7, r3
 8004546:	551a      	strb	r2, [r3, r4]
            for (i = 0; i < conf->profile_len; i++)
 8004548:	197b      	adds	r3, r7, r5
 800454a:	781a      	ldrb	r2, [r3, #0]
 800454c:	197b      	adds	r3, r7, r5
 800454e:	3201      	adds	r2, #1
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	7c1b      	ldrb	r3, [r3, #16]
 8004556:	2246      	movs	r2, #70	@ 0x46
 8004558:	18ba      	adds	r2, r7, r2
 800455a:	7812      	ldrb	r2, [r2, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d3b9      	bcc.n	80044d4 <set_conf+0xf4>
            }

            (*nb_conv) = conf->profile_len;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	7c1a      	ldrb	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8004568:	2345      	movs	r3, #69	@ 0x45
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	7c12      	ldrb	r2, [r2, #16]
 8004570:	701a      	strb	r2, [r3, #0]
            break;
 8004572:	e084      	b.n	800467e <set_conf+0x29e>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <set_conf+0x1a4>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <set_conf+0x1ae>
            {
                rslt = BME68X_E_NULL_PTR;
 8004584:	2347      	movs	r3, #71	@ 0x47
 8004586:	18fb      	adds	r3, r7, r3
 8004588:	22ff      	movs	r2, #255	@ 0xff
 800458a:	701a      	strb	r2, [r3, #0]
                break;
 800458c:	e077      	b.n	800467e <set_conf+0x29e>
            }

            if (conf->shared_heatr_dur == 0)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8a5b      	ldrh	r3, [r3, #18]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <set_conf+0x1be>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8004596:	2347      	movs	r3, #71	@ 0x47
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	2203      	movs	r2, #3
 800459c:	701a      	strb	r2, [r3, #0]
            }

            for (i = 0; i < conf->profile_len; i++)
 800459e:	2346      	movs	r3, #70	@ 0x46
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e039      	b.n	800461c <set_conf+0x23c>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80045a8:	2046      	movs	r0, #70	@ 0x46
 80045aa:	183b      	adds	r3, r7, r0
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	183a      	adds	r2, r7, r0
 80045b0:	7812      	ldrb	r2, [r2, #0]
 80045b2:	325a      	adds	r2, #90	@ 0x5a
 80045b4:	b2d1      	uxtb	r1, r2
 80045b6:	2238      	movs	r2, #56	@ 0x38
 80045b8:	18ba      	adds	r2, r7, r2
 80045ba:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	183b      	adds	r3, r7, r0
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	18d3      	adds	r3, r2, r3
 80045c8:	881a      	ldrh	r2, [r3, #0]
 80045ca:	0005      	movs	r5, r0
 80045cc:	183b      	adds	r3, r7, r0
 80045ce:	781c      	ldrb	r4, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	0019      	movs	r1, r3
 80045d4:	0010      	movs	r0, r2
 80045d6:	f7ff fcef 	bl	8003fb8 <calc_res_heat>
 80045da:	0003      	movs	r3, r0
 80045dc:	001a      	movs	r2, r3
 80045de:	232c      	movs	r3, #44	@ 0x2c
 80045e0:	18fb      	adds	r3, r7, r3
 80045e2:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80045e4:	0028      	movs	r0, r5
 80045e6:	183b      	adds	r3, r7, r0
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	183a      	adds	r2, r7, r0
 80045ec:	7812      	ldrb	r2, [r2, #0]
 80045ee:	3264      	adds	r2, #100	@ 0x64
 80045f0:	b2d1      	uxtb	r1, r2
 80045f2:	2220      	movs	r2, #32
 80045f4:	18ba      	adds	r2, r7, r2
 80045f6:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	183b      	adds	r3, r7, r0
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	18d3      	adds	r3, r2, r3
 8004604:	881a      	ldrh	r2, [r3, #0]
 8004606:	183b      	adds	r3, r7, r0
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b2d1      	uxtb	r1, r2
 800460c:	2214      	movs	r2, #20
 800460e:	18ba      	adds	r2, r7, r2
 8004610:	54d1      	strb	r1, [r2, r3]
            for (i = 0; i < conf->profile_len; i++)
 8004612:	183b      	adds	r3, r7, r0
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	183b      	adds	r3, r7, r0
 8004618:	3201      	adds	r2, #1
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	7c1b      	ldrb	r3, [r3, #16]
 8004620:	2246      	movs	r2, #70	@ 0x46
 8004622:	18ba      	adds	r2, r7, r2
 8004624:	7812      	ldrb	r2, [r2, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d3be      	bcc.n	80045a8 <set_conf+0x1c8>
            }

            (*nb_conv) = conf->profile_len;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	7c1a      	ldrb	r2, [r3, #16]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8004632:	2345      	movs	r3, #69	@ 0x45
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	7c12      	ldrb	r2, [r2, #16]
 800463a:	701a      	strb	r2, [r3, #0]
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8a5b      	ldrh	r3, [r3, #18]
 8004640:	0018      	movs	r0, r3
 8004642:	f000 f84b 	bl	80046dc <calc_heatr_dur_shared>
 8004646:	0003      	movs	r3, r0
 8004648:	001a      	movs	r2, r3
 800464a:	2144      	movs	r1, #68	@ 0x44
 800464c:	187b      	adds	r3, r7, r1
 800464e:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8004650:	2247      	movs	r2, #71	@ 0x47
 8004652:	18bb      	adds	r3, r7, r2
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	b25b      	sxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10f      	bne.n	800467c <set_conf+0x29c>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 800465c:	18bc      	adds	r4, r7, r2
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	1879      	adds	r1, r7, r1
 8004662:	2243      	movs	r2, #67	@ 0x43
 8004664:	18b8      	adds	r0, r7, r2
 8004666:	2201      	movs	r2, #1
 8004668:	f7ff f893 	bl	8003792 <bme68x_set_regs>
 800466c:	0003      	movs	r3, r0
 800466e:	7023      	strb	r3, [r4, #0]
            }

            break;
 8004670:	e004      	b.n	800467c <set_conf+0x29c>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8004672:	2347      	movs	r3, #71	@ 0x47
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	2201      	movs	r2, #1
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	e000      	b.n	800467e <set_conf+0x29e>
            break;
 800467c:	46c0      	nop			@ (mov r8, r8)
    }

    if (rslt == BME68X_OK)
 800467e:	2147      	movs	r1, #71	@ 0x47
 8004680:	187b      	adds	r3, r7, r1
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	b25b      	sxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10c      	bne.n	80046a4 <set_conf+0x2c4>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 800468a:	2345      	movs	r3, #69	@ 0x45
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	781a      	ldrb	r2, [r3, #0]
 8004690:	187c      	adds	r4, r7, r1
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	212c      	movs	r1, #44	@ 0x2c
 8004696:	1879      	adds	r1, r7, r1
 8004698:	2038      	movs	r0, #56	@ 0x38
 800469a:	1838      	adds	r0, r7, r0
 800469c:	f7ff f879 	bl	8003792 <bme68x_set_regs>
 80046a0:	0003      	movs	r3, r0
 80046a2:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 80046a4:	2147      	movs	r1, #71	@ 0x47
 80046a6:	187b      	adds	r3, r7, r1
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	b25b      	sxtb	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10c      	bne.n	80046ca <set_conf+0x2ea>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 80046b0:	2345      	movs	r3, #69	@ 0x45
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	187c      	adds	r4, r7, r1
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2114      	movs	r1, #20
 80046bc:	1879      	adds	r1, r7, r1
 80046be:	2020      	movs	r0, #32
 80046c0:	1838      	adds	r0, r7, r0
 80046c2:	f7ff f866 	bl	8003792 <bme68x_set_regs>
 80046c6:	0003      	movs	r3, r0
 80046c8:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 80046ca:	2347      	movs	r3, #71	@ 0x47
 80046cc:	18fb      	adds	r3, r7, r3
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	b25b      	sxtb	r3, r3
}
 80046d2:	0018      	movs	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	b012      	add	sp, #72	@ 0x48
 80046d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080046dc <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	0002      	movs	r2, r0
 80046e4:	1dbb      	adds	r3, r7, #6
 80046e6:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 80046e8:	230f      	movs	r3, #15
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
    uint8_t heatdurval;

    if (dur >= 0x783)
 80046f0:	1dbb      	adds	r3, r7, #6
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004770 <calc_heatr_dur_shared+0x94>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d904      	bls.n	8004704 <calc_heatr_dur_shared+0x28>
    {
        heatdurval = 0xff; /* Max duration */
 80046fa:	230e      	movs	r3, #14
 80046fc:	18fb      	adds	r3, r7, r3
 80046fe:	22ff      	movs	r2, #255	@ 0xff
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	e02e      	b.n	8004762 <calc_heatr_dur_shared+0x86>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8004704:	1dbb      	adds	r3, r7, #6
 8004706:	881a      	ldrh	r2, [r3, #0]
 8004708:	0013      	movs	r3, r2
 800470a:	015b      	lsls	r3, r3, #5
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	189b      	adds	r3, r3, r2
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	001a      	movs	r2, r3
 8004716:	23de      	movs	r3, #222	@ 0xde
 8004718:	33ff      	adds	r3, #255	@ 0xff
 800471a:	0019      	movs	r1, r3
 800471c:	0010      	movs	r0, r2
 800471e:	f7fb fd0d 	bl	800013c <__udivsi3>
 8004722:	0003      	movs	r3, r0
 8004724:	001a      	movs	r2, r3
 8004726:	1dbb      	adds	r3, r7, #6
 8004728:	801a      	strh	r2, [r3, #0]
        while (dur > 0x3F)
 800472a:	e00a      	b.n	8004742 <calc_heatr_dur_shared+0x66>
        {
            dur = dur >> 2;
 800472c:	1dbb      	adds	r3, r7, #6
 800472e:	1dba      	adds	r2, r7, #6
 8004730:	8812      	ldrh	r2, [r2, #0]
 8004732:	0892      	lsrs	r2, r2, #2
 8004734:	801a      	strh	r2, [r3, #0]
            factor += 1;
 8004736:	220f      	movs	r2, #15
 8004738:	18bb      	adds	r3, r7, r2
 800473a:	18ba      	adds	r2, r7, r2
 800473c:	7812      	ldrb	r2, [r2, #0]
 800473e:	3201      	adds	r2, #1
 8004740:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8004742:	1dbb      	adds	r3, r7, #6
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	2b3f      	cmp	r3, #63	@ 0x3f
 8004748:	d8f0      	bhi.n	800472c <calc_heatr_dur_shared+0x50>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 800474a:	1dbb      	adds	r3, r7, #6
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	b2d9      	uxtb	r1, r3
 8004750:	230f      	movs	r3, #15
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	019b      	lsls	r3, r3, #6
 8004758:	b2da      	uxtb	r2, r3
 800475a:	230e      	movs	r3, #14
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	188a      	adds	r2, r1, r2
 8004760:	701a      	strb	r2, [r3, #0]
    }

    return heatdurval;
 8004762:	230e      	movs	r3, #14
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	781b      	ldrb	r3, [r3, #0]
}
 8004768:	0018      	movs	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	b004      	add	sp, #16
 800476e:	bd80      	pop	{r7, pc}
 8004770:	00000782 	.word	0x00000782

08004774 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8004774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004776:	b08f      	sub	sp, #60	@ 0x3c
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 800477c:	2537      	movs	r5, #55	@ 0x37
 800477e:	197c      	adds	r4, r7, r5
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	260c      	movs	r6, #12
 8004784:	19b9      	adds	r1, r7, r6
 8004786:	2217      	movs	r2, #23
 8004788:	208a      	movs	r0, #138	@ 0x8a
 800478a:	f7ff f8af 	bl	80038ec <bme68x_get_regs>
 800478e:	0003      	movs	r3, r0
 8004790:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8004792:	197b      	adds	r3, r7, r5
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	b25b      	sxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10b      	bne.n	80047b4 <get_calib_data+0x40>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 800479c:	197c      	adds	r4, r7, r5
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	19bb      	adds	r3, r7, r6
 80047a2:	3317      	adds	r3, #23
 80047a4:	0019      	movs	r1, r3
 80047a6:	0013      	movs	r3, r2
 80047a8:	220e      	movs	r2, #14
 80047aa:	20e1      	movs	r0, #225	@ 0xe1
 80047ac:	f7ff f89e 	bl	80038ec <bme68x_get_regs>
 80047b0:	0003      	movs	r3, r0
 80047b2:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 80047b4:	2237      	movs	r2, #55	@ 0x37
 80047b6:	18bb      	adds	r3, r7, r2
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	b25b      	sxtb	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10c      	bne.n	80047da <get_calib_data+0x66>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 80047c0:	18bc      	adds	r4, r7, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	230c      	movs	r3, #12
 80047c6:	18fb      	adds	r3, r7, r3
 80047c8:	3325      	adds	r3, #37	@ 0x25
 80047ca:	0019      	movs	r1, r3
 80047cc:	0013      	movs	r3, r2
 80047ce:	2205      	movs	r2, #5
 80047d0:	2000      	movs	r0, #0
 80047d2:	f7ff f88b 	bl	80038ec <bme68x_get_regs>
 80047d6:	0003      	movs	r3, r0
 80047d8:	7023      	strb	r3, [r4, #0]
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 80047da:	2337      	movs	r3, #55	@ 0x37
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	b25b      	sxtb	r3, r3
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d000      	beq.n	80047e8 <get_calib_data+0x74>
 80047e6:	e0f4      	b.n	80049d2 <get_calib_data+0x25e>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 80047e8:	210c      	movs	r1, #12
 80047ea:	187b      	adds	r3, r7, r1
 80047ec:	2220      	movs	r2, #32
 80047ee:	5c9b      	ldrb	r3, [r3, r2]
 80047f0:	b21b      	sxth	r3, r3
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	b21a      	sxth	r2, r3
 80047f6:	187b      	adds	r3, r7, r1
 80047f8:	7fdb      	ldrb	r3, [r3, #31]
 80047fa:	b21b      	sxth	r3, r3
 80047fc:	4313      	orrs	r3, r2
 80047fe:	b21b      	sxth	r3, r3
 8004800:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8004806:	187b      	adds	r3, r7, r1
 8004808:	785b      	ldrb	r3, [r3, #1]
 800480a:	b21b      	sxth	r3, r3
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	b21a      	sxth	r2, r3
 8004810:	187b      	adds	r3, r7, r1
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	b21b      	sxth	r3, r3
 8004816:	4313      	orrs	r3, r2
 8004818:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 800481e:	0008      	movs	r0, r1
 8004820:	187b      	adds	r3, r7, r1
 8004822:	789b      	ldrb	r3, [r3, #2]
 8004824:	b259      	sxtb	r1, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2222      	movs	r2, #34	@ 0x22
 800482a:	5499      	strb	r1, [r3, r2]

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 800482c:	0001      	movs	r1, r0
 800482e:	187b      	adds	r3, r7, r1
 8004830:	795b      	ldrb	r3, [r3, #5]
 8004832:	b21b      	sxth	r3, r3
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	b21a      	sxth	r2, r3
 8004838:	187b      	adds	r3, r7, r1
 800483a:	791b      	ldrb	r3, [r3, #4]
 800483c:	b21b      	sxth	r3, r3
 800483e:	4313      	orrs	r3, r2
 8004840:	b21b      	sxth	r3, r3
 8004842:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8004848:	187b      	adds	r3, r7, r1
 800484a:	79db      	ldrb	r3, [r3, #7]
 800484c:	b21b      	sxth	r3, r3
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	b21a      	sxth	r2, r3
 8004852:	187b      	adds	r3, r7, r1
 8004854:	799b      	ldrb	r3, [r3, #6]
 8004856:	b21b      	sxth	r3, r3
 8004858:	4313      	orrs	r3, r2
 800485a:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8004860:	0008      	movs	r0, r1
 8004862:	187b      	adds	r3, r7, r1
 8004864:	7a1b      	ldrb	r3, [r3, #8]
 8004866:	b259      	sxtb	r1, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2228      	movs	r2, #40	@ 0x28
 800486c:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 800486e:	0001      	movs	r1, r0
 8004870:	187b      	adds	r3, r7, r1
 8004872:	7adb      	ldrb	r3, [r3, #11]
 8004874:	b21b      	sxth	r3, r3
 8004876:	021b      	lsls	r3, r3, #8
 8004878:	b21a      	sxth	r2, r3
 800487a:	187b      	adds	r3, r7, r1
 800487c:	7a9b      	ldrb	r3, [r3, #10]
 800487e:	b21b      	sxth	r3, r3
 8004880:	4313      	orrs	r3, r2
 8004882:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8004888:	187b      	adds	r3, r7, r1
 800488a:	7b5b      	ldrb	r3, [r3, #13]
 800488c:	b21b      	sxth	r3, r3
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	b21a      	sxth	r2, r3
 8004892:	187b      	adds	r3, r7, r1
 8004894:	7b1b      	ldrb	r3, [r3, #12]
 8004896:	b21b      	sxth	r3, r3
 8004898:	4313      	orrs	r3, r2
 800489a:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 80048a0:	0008      	movs	r0, r1
 80048a2:	183b      	adds	r3, r7, r0
 80048a4:	7bdb      	ldrb	r3, [r3, #15]
 80048a6:	b259      	sxtb	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	222e      	movs	r2, #46	@ 0x2e
 80048ac:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 80048ae:	183b      	adds	r3, r7, r0
 80048b0:	7b9b      	ldrb	r3, [r3, #14]
 80048b2:	b259      	sxtb	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	222f      	movs	r2, #47	@ 0x2f
 80048b8:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 80048ba:	183b      	adds	r3, r7, r0
 80048bc:	7cdb      	ldrb	r3, [r3, #19]
 80048be:	b21b      	sxth	r3, r3
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	b21a      	sxth	r2, r3
 80048c4:	183b      	adds	r3, r7, r0
 80048c6:	7c9b      	ldrb	r3, [r3, #18]
 80048c8:	b21b      	sxth	r3, r3
 80048ca:	4313      	orrs	r3, r2
 80048cc:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 80048d2:	183b      	adds	r3, r7, r0
 80048d4:	7d5b      	ldrb	r3, [r3, #21]
 80048d6:	b21b      	sxth	r3, r3
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	b21a      	sxth	r2, r3
 80048dc:	183b      	adds	r3, r7, r0
 80048de:	7d1b      	ldrb	r3, [r3, #20]
 80048e0:	b21b      	sxth	r3, r3
 80048e2:	4313      	orrs	r3, r2
 80048e4:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 80048ea:	183b      	adds	r3, r7, r0
 80048ec:	7d99      	ldrb	r1, [r3, #22]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2234      	movs	r2, #52	@ 0x34
 80048f2:	5499      	strb	r1, [r3, r2]

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 80048f4:	183b      	adds	r3, r7, r0
 80048f6:	7e5b      	ldrb	r3, [r3, #25]
 80048f8:	b21b      	sxth	r3, r3
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 80048fe:	183b      	adds	r3, r7, r0
 8004900:	7e1b      	ldrb	r3, [r3, #24]
 8004902:	b21b      	sxth	r3, r3
 8004904:	210f      	movs	r1, #15
 8004906:	400b      	ands	r3, r1
 8004908:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 800490a:	4313      	orrs	r3, r2
 800490c:	b21b      	sxth	r3, r3
 800490e:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8004914:	183b      	adds	r3, r7, r0
 8004916:	7ddb      	ldrb	r3, [r3, #23]
 8004918:	b21b      	sxth	r3, r3
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	b21a      	sxth	r2, r3
 800491e:	183b      	adds	r3, r7, r0
 8004920:	7e1b      	ldrb	r3, [r3, #24]
 8004922:	091b      	lsrs	r3, r3, #4
 8004924:	b2db      	uxtb	r3, r3
 8004926:	b21b      	sxth	r3, r3
 8004928:	4313      	orrs	r3, r2
 800492a:	b21b      	sxth	r3, r3
 800492c:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8004932:	183b      	adds	r3, r7, r0
 8004934:	7e9b      	ldrb	r3, [r3, #26]
 8004936:	b25a      	sxtb	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 800493c:	183b      	adds	r3, r7, r0
 800493e:	7edb      	ldrb	r3, [r3, #27]
 8004940:	b25a      	sxtb	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8004946:	183b      	adds	r3, r7, r0
 8004948:	7f1b      	ldrb	r3, [r3, #28]
 800494a:	b25a      	sxtb	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8004950:	183b      	adds	r3, r7, r0
 8004952:	7f5a      	ldrb	r2, [r3, #29]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8004958:	183b      	adds	r3, r7, r0
 800495a:	7f9b      	ldrb	r3, [r3, #30]
 800495c:	b25a      	sxtb	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8004962:	183b      	adds	r3, r7, r0
 8004964:	2223      	movs	r2, #35	@ 0x23
 8004966:	5c9b      	ldrb	r3, [r3, r2]
 8004968:	b25a      	sxtb	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 800496e:	183b      	adds	r3, r7, r0
 8004970:	2222      	movs	r2, #34	@ 0x22
 8004972:	5c9b      	ldrb	r3, [r3, r2]
 8004974:	b21b      	sxth	r3, r3
 8004976:	021b      	lsls	r3, r3, #8
 8004978:	b21a      	sxth	r2, r3
 800497a:	183b      	adds	r3, r7, r0
 800497c:	2121      	movs	r1, #33	@ 0x21
 800497e:	5c5b      	ldrb	r3, [r3, r1]
 8004980:	b21b      	sxth	r3, r3
 8004982:	4313      	orrs	r3, r2
 8004984:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 800498a:	183b      	adds	r3, r7, r0
 800498c:	2224      	movs	r2, #36	@ 0x24
 800498e:	5c9b      	ldrb	r3, [r3, r2]
 8004990:	b25a      	sxtb	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8004996:	183b      	adds	r3, r7, r0
 8004998:	2227      	movs	r2, #39	@ 0x27
 800499a:	5c9b      	ldrb	r3, [r3, r2]
 800499c:	001a      	movs	r2, r3
 800499e:	2330      	movs	r3, #48	@ 0x30
 80049a0:	4013      	ands	r3, r2
 80049a2:	d500      	bpl.n	80049a6 <get_calib_data+0x232>
 80049a4:	330f      	adds	r3, #15
 80049a6:	111b      	asrs	r3, r3, #4
 80049a8:	b2d9      	uxtb	r1, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	223c      	movs	r2, #60	@ 0x3c
 80049ae:	5499      	strb	r1, [r3, r2]
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 80049b0:	200c      	movs	r0, #12
 80049b2:	183b      	adds	r3, r7, r0
 80049b4:	2225      	movs	r2, #37	@ 0x25
 80049b6:	5c9b      	ldrb	r3, [r3, r2]
 80049b8:	b259      	sxtb	r1, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	223d      	movs	r2, #61	@ 0x3d
 80049be:	5499      	strb	r1, [r3, r2]
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 80049c0:	183b      	adds	r3, r7, r0
 80049c2:	2229      	movs	r2, #41	@ 0x29
 80049c4:	5c9b      	ldrb	r3, [r3, r2]
 80049c6:	b25b      	sxtb	r3, r3
 80049c8:	111b      	asrs	r3, r3, #4
 80049ca:	b259      	sxtb	r1, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	223e      	movs	r2, #62	@ 0x3e
 80049d0:	5499      	strb	r1, [r3, r2]
    }

    return rslt;
 80049d2:	2337      	movs	r3, #55	@ 0x37
 80049d4:	18fb      	adds	r3, r7, r3
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	b25b      	sxtb	r3, r3
}
 80049da:	0018      	movs	r0, r3
 80049dc:	46bd      	mov	sp, r7
 80049de:	b00f      	add	sp, #60	@ 0x3c
 80049e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049e2 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 80049e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 80049ea:	250e      	movs	r5, #14
 80049ec:	197b      	adds	r3, r7, r5
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 80049f2:	260f      	movs	r6, #15
 80049f4:	19bc      	adds	r4, r7, r6
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	1979      	adds	r1, r7, r5
 80049fa:	2201      	movs	r2, #1
 80049fc:	20f0      	movs	r0, #240	@ 0xf0
 80049fe:	f7fe ff75 	bl	80038ec <bme68x_get_regs>
 8004a02:	0003      	movs	r3, r0
 8004a04:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 8004a06:	19bb      	adds	r3, r7, r6
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	b25b      	sxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d104      	bne.n	8004a1a <read_variant_id+0x38>
    {
        dev->variant_id = reg_data;
 8004a10:	197b      	adds	r3, r7, r5
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	001a      	movs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8004a1a:	230f      	movs	r3, #15
 8004a1c:	18fb      	adds	r3, r7, r3
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	b25b      	sxtb	r3, r3
}
 8004a22:	0018      	movs	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	b005      	add	sp, #20
 8004a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a2c:	b5b0      	push	{r4, r5, r7, lr}
 8004a2e:	b094      	sub	sp, #80	@ 0x50
 8004a30:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  log_debug("System Initialization Started");
 8004a32:	4b5a      	ldr	r3, [pc, #360]	@ (8004b9c <main+0x170>)
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 fac9 	bl	8004fcc <log_debug>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a3a:	f000 fd2d 	bl	8005498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a3e:	f000 f8d7 	bl	8004bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a42:	f000 f9e9 	bl	8004e18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004a46:	f000 f999 	bl	8004d7c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004a4a:	f000 f919 	bl	8004c80 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004a4e:	f000 f957 	bl	8004d00 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  log_debug("GPIO, USART2, I2C1 Initialized");
 8004a52:	4b53      	ldr	r3, [pc, #332]	@ (8004ba0 <main+0x174>)
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 fab9 	bl	8004fcc <log_debug>
  log_debug("Checking for BME68x on I2C bus...");
 8004a5a:	4b52      	ldr	r3, [pc, #328]	@ (8004ba4 <main+0x178>)
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f000 fab5 	bl	8004fcc <log_debug>

  HAL_StatusTypeDef devReady = HAL_I2C_IsDeviceReady(&hi2c1, BME68X_I2C_ADDR << 1, 3, 100);
 8004a62:	2547      	movs	r5, #71	@ 0x47
 8004a64:	197c      	adds	r4, r7, r5
 8004a66:	4850      	ldr	r0, [pc, #320]	@ (8004ba8 <main+0x17c>)
 8004a68:	2364      	movs	r3, #100	@ 0x64
 8004a6a:	2203      	movs	r2, #3
 8004a6c:	21ee      	movs	r1, #238	@ 0xee
 8004a6e:	f001 fad7 	bl	8006020 <HAL_I2C_IsDeviceReady>
 8004a72:	0003      	movs	r3, r0
 8004a74:	7023      	strb	r3, [r4, #0]
  if (devReady != HAL_OK) {
 8004a76:	197b      	adds	r3, r7, r5
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <main+0x5e>
	log_debug("BME68x NOT FOUND on I2C bus. Halting.");
 8004a7e:	4b4b      	ldr	r3, [pc, #300]	@ (8004bac <main+0x180>)
 8004a80:	0018      	movs	r0, r3
 8004a82:	f000 faa3 	bl	8004fcc <log_debug>
    while (1); // Block execution here
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	e7fd      	b.n	8004a86 <main+0x5a>
  } else {
    log_debug("BME68x FOUND on I2C bus");
 8004a8a:	4b49      	ldr	r3, [pc, #292]	@ (8004bb0 <main+0x184>)
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f000 fa9d 	bl	8004fcc <log_debug>
  }
  
  // Set up sensor interface
  gas_sensor.intf = BME68X_I2C_INTF;
 8004a92:	4b48      	ldr	r3, [pc, #288]	@ (8004bb4 <main+0x188>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	731a      	strb	r2, [r3, #12]
  gas_sensor.read = user_i2c_read;
 8004a98:	4b46      	ldr	r3, [pc, #280]	@ (8004bb4 <main+0x188>)
 8004a9a:	4a47      	ldr	r2, [pc, #284]	@ (8004bb8 <main+0x18c>)
 8004a9c:	641a      	str	r2, [r3, #64]	@ 0x40
  gas_sensor.write = user_i2c_write;
 8004a9e:	4b45      	ldr	r3, [pc, #276]	@ (8004bb4 <main+0x188>)
 8004aa0:	4a46      	ldr	r2, [pc, #280]	@ (8004bbc <main+0x190>)
 8004aa2:	645a      	str	r2, [r3, #68]	@ 0x44
  gas_sensor.delay_us = user_delay_us;
 8004aa4:	4b43      	ldr	r3, [pc, #268]	@ (8004bb4 <main+0x188>)
 8004aa6:	4a46      	ldr	r2, [pc, #280]	@ (8004bc0 <main+0x194>)
 8004aa8:	649a      	str	r2, [r3, #72]	@ 0x48
  gas_sensor.intf_ptr = &hi2c1;
 8004aaa:	4b42      	ldr	r3, [pc, #264]	@ (8004bb4 <main+0x188>)
 8004aac:	4a3e      	ldr	r2, [pc, #248]	@ (8004ba8 <main+0x17c>)
 8004aae:	605a      	str	r2, [r3, #4]
  
  log_debug("Initializing BME68x...");
 8004ab0:	4b44      	ldr	r3, [pc, #272]	@ (8004bc4 <main+0x198>)
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 fa8a 	bl	8004fcc <log_debug>
  rslt = bme68x_init(&gas_sensor);
 8004ab8:	4b3e      	ldr	r3, [pc, #248]	@ (8004bb4 <main+0x188>)
 8004aba:	0018      	movs	r0, r3
 8004abc:	f7fe fe2e 	bl	800371c <bme68x_init>
 8004ac0:	0003      	movs	r3, r0
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	4b40      	ldr	r3, [pc, #256]	@ (8004bc8 <main+0x19c>)
 8004ac6:	701a      	strb	r2, [r3, #0]
  if (rslt != BME68X_OK) {
 8004ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8004bc8 <main+0x19c>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	b25b      	sxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <main+0xb2>
	  log_debug("Sensor initialization failed. Halting.");
 8004ad2:	4b3e      	ldr	r3, [pc, #248]	@ (8004bcc <main+0x1a0>)
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f000 fa79 	bl	8004fcc <log_debug>
      while (1);
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	e7fd      	b.n	8004ada <main+0xae>
  }
  
  uint8_t chip_id = 0;
 8004ade:	2446      	movs	r4, #70	@ 0x46
 8004ae0:	193b      	adds	r3, r7, r4
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	701a      	strb	r2, [r3, #0]
  rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &chip_id, 1, &gas_sensor);
 8004ae6:	4b33      	ldr	r3, [pc, #204]	@ (8004bb4 <main+0x188>)
 8004ae8:	1939      	adds	r1, r7, r4
 8004aea:	2201      	movs	r2, #1
 8004aec:	20d0      	movs	r0, #208	@ 0xd0
 8004aee:	f7fe fefd 	bl	80038ec <bme68x_get_regs>
 8004af2:	0003      	movs	r3, r0
 8004af4:	001a      	movs	r2, r3
 8004af6:	4b34      	ldr	r3, [pc, #208]	@ (8004bc8 <main+0x19c>)
 8004af8:	701a      	strb	r2, [r3, #0]
  if (rslt == BME68X_OK) {
 8004afa:	4b33      	ldr	r3, [pc, #204]	@ (8004bc8 <main+0x19c>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	b25b      	sxtb	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10f      	bne.n	8004b24 <main+0xf8>
      char id_msg[64];
      snprintf(id_msg, sizeof(id_msg), "BME68x Chip ID: 0x%02X (Expected: 0x%02X)", chip_id, BME68X_CHIP_ID);
 8004b04:	193b      	adds	r3, r7, r4
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	0019      	movs	r1, r3
 8004b0a:	4a31      	ldr	r2, [pc, #196]	@ (8004bd0 <main+0x1a4>)
 8004b0c:	1d38      	adds	r0, r7, #4
 8004b0e:	2361      	movs	r3, #97	@ 0x61
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	000b      	movs	r3, r1
 8004b14:	2140      	movs	r1, #64	@ 0x40
 8004b16:	f004 f9f9 	bl	8008f0c <sniprintf>
      log_debug(id_msg);
 8004b1a:	1d3b      	adds	r3, r7, #4
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 fa55 	bl	8004fcc <log_debug>
 8004b22:	e003      	b.n	8004b2c <main+0x100>
  } else {
      log_debug("Failed to read Chip ID");
 8004b24:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd4 <main+0x1a8>)
 8004b26:	0018      	movs	r0, r3
 8004b28:	f000 fa50 	bl	8004fcc <log_debug>
  }
  
  log_debug("Configuring BME68x sensor...");
 8004b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004bd8 <main+0x1ac>)
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f000 fa4c 	bl	8004fcc <log_debug>
  
  // Oversampling and filter config
  conf.os_hum = BME68X_OS_2X;
 8004b34:	4b29      	ldr	r3, [pc, #164]	@ (8004bdc <main+0x1b0>)
 8004b36:	2202      	movs	r2, #2
 8004b38:	701a      	strb	r2, [r3, #0]
  conf.os_temp = BME68X_OS_8X;
 8004b3a:	4b28      	ldr	r3, [pc, #160]	@ (8004bdc <main+0x1b0>)
 8004b3c:	2204      	movs	r2, #4
 8004b3e:	705a      	strb	r2, [r3, #1]
  conf.os_pres = BME68X_OS_4X;
 8004b40:	4b26      	ldr	r3, [pc, #152]	@ (8004bdc <main+0x1b0>)
 8004b42:	2203      	movs	r2, #3
 8004b44:	709a      	strb	r2, [r3, #2]
  conf.filter = BME68X_FILTER_SIZE_3;
 8004b46:	4b25      	ldr	r3, [pc, #148]	@ (8004bdc <main+0x1b0>)
 8004b48:	2202      	movs	r2, #2
 8004b4a:	70da      	strb	r2, [r3, #3]
  
  if (bme68x_set_conf(&conf, &gas_sensor) != BME68X_OK)
 8004b4c:	4a19      	ldr	r2, [pc, #100]	@ (8004bb4 <main+0x188>)
 8004b4e:	4b23      	ldr	r3, [pc, #140]	@ (8004bdc <main+0x1b0>)
 8004b50:	0011      	movs	r1, r2
 8004b52:	0018      	movs	r0, r3
 8004b54:	f7fe ff7c 	bl	8003a50 <bme68x_set_conf>
 8004b58:	1e03      	subs	r3, r0, #0
 8004b5a:	d003      	beq.n	8004b64 <main+0x138>
      log_debug("Failed to apply sensor config");
 8004b5c:	4b20      	ldr	r3, [pc, #128]	@ (8004be0 <main+0x1b4>)
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f000 fa34 	bl	8004fcc <log_debug>
  
  // Heater configuration
  heatr_conf.enable = BME68X_ENABLE;
 8004b64:	4b1f      	ldr	r3, [pc, #124]	@ (8004be4 <main+0x1b8>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
  heatr_conf.heatr_temp = 300;
 8004b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004be4 <main+0x1b8>)
 8004b6c:	2296      	movs	r2, #150	@ 0x96
 8004b6e:	0052      	lsls	r2, r2, #1
 8004b70:	805a      	strh	r2, [r3, #2]
  heatr_conf.heatr_dur = 100;
 8004b72:	4b1c      	ldr	r3, [pc, #112]	@ (8004be4 <main+0x1b8>)
 8004b74:	2264      	movs	r2, #100	@ 0x64
 8004b76:	809a      	strh	r2, [r3, #4]
  
  if (bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &gas_sensor) != BME68X_OK)
 8004b78:	4a0e      	ldr	r2, [pc, #56]	@ (8004bb4 <main+0x188>)
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004be4 <main+0x1b8>)
 8004b7c:	0019      	movs	r1, r3
 8004b7e:	2001      	movs	r0, #1
 8004b80:	f7ff f95e 	bl	8003e40 <bme68x_set_heatr_conf>
 8004b84:	1e03      	subs	r3, r0, #0
 8004b86:	d003      	beq.n	8004b90 <main+0x164>
      log_debug("Failed to apply heater config");
 8004b88:	4b17      	ldr	r3, [pc, #92]	@ (8004be8 <main+0x1bc>)
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f000 fa1e 	bl	8004fcc <log_debug>
  
  log_debug("BME68x configuration complete.");
 8004b90:	4b16      	ldr	r3, [pc, #88]	@ (8004bec <main+0x1c0>)
 8004b92:	0018      	movs	r0, r3
 8004b94:	f000 fa1a 	bl	8004fcc <log_debug>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004b98:	46c0      	nop			@ (mov r8, r8)
 8004b9a:	e7fd      	b.n	8004b98 <main+0x16c>
 8004b9c:	0800b500 	.word	0x0800b500
 8004ba0:	0800b520 	.word	0x0800b520
 8004ba4:	0800b540 	.word	0x0800b540
 8004ba8:	200001f0 	.word	0x200001f0
 8004bac:	0800b564 	.word	0x0800b564
 8004bb0:	0800b58c 	.word	0x0800b58c
 8004bb4:	2000033c 	.word	0x2000033c
 8004bb8:	08004efd 	.word	0x08004efd
 8004bbc:	08004f7d 	.word	0x08004f7d
 8004bc0:	08004ec1 	.word	0x08004ec1
 8004bc4:	0800b5a4 	.word	0x0800b5a4
 8004bc8:	200003a8 	.word	0x200003a8
 8004bcc:	0800b5bc 	.word	0x0800b5bc
 8004bd0:	0800b5e4 	.word	0x0800b5e4
 8004bd4:	0800b610 	.word	0x0800b610
 8004bd8:	0800b628 	.word	0x0800b628
 8004bdc:	2000038c 	.word	0x2000038c
 8004be0:	0800b648 	.word	0x0800b648
 8004be4:	20000394 	.word	0x20000394
 8004be8:	0800b668 	.word	0x0800b668
 8004bec:	0800b688 	.word	0x0800b688

08004bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b093      	sub	sp, #76	@ 0x4c
 8004bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bf6:	2410      	movs	r4, #16
 8004bf8:	193b      	adds	r3, r7, r4
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	2338      	movs	r3, #56	@ 0x38
 8004bfe:	001a      	movs	r2, r3
 8004c00:	2100      	movs	r1, #0
 8004c02:	f004 fa7d 	bl	8009100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c06:	003b      	movs	r3, r7
 8004c08:	0018      	movs	r0, r3
 8004c0a:	2310      	movs	r3, #16
 8004c0c:	001a      	movs	r2, r3
 8004c0e:	2100      	movs	r1, #0
 8004c10:	f004 fa76 	bl	8009100 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c14:	2380      	movs	r3, #128	@ 0x80
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f001 fe91 	bl	8006940 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c1e:	193b      	adds	r3, r7, r4
 8004c20:	2202      	movs	r2, #2
 8004c22:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c24:	193b      	adds	r3, r7, r4
 8004c26:	2280      	movs	r2, #128	@ 0x80
 8004c28:	0052      	lsls	r2, r2, #1
 8004c2a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004c2c:	193b      	adds	r3, r7, r4
 8004c2e:	2200      	movs	r2, #0
 8004c30:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c32:	193b      	adds	r3, r7, r4
 8004c34:	2240      	movs	r2, #64	@ 0x40
 8004c36:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004c38:	193b      	adds	r3, r7, r4
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c3e:	193b      	adds	r3, r7, r4
 8004c40:	0018      	movs	r0, r3
 8004c42:	f001 fec9 	bl	80069d8 <HAL_RCC_OscConfig>
 8004c46:	1e03      	subs	r3, r0, #0
 8004c48:	d001      	beq.n	8004c4e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8004c4a:	f000 f9e7 	bl	800501c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c4e:	003b      	movs	r3, r7
 8004c50:	2207      	movs	r2, #7
 8004c52:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004c54:	003b      	movs	r3, r7
 8004c56:	2200      	movs	r2, #0
 8004c58:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c5a:	003b      	movs	r3, r7
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c60:	003b      	movs	r3, r7
 8004c62:	2200      	movs	r2, #0
 8004c64:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004c66:	003b      	movs	r3, r7
 8004c68:	2100      	movs	r1, #0
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f002 f9ce 	bl	800700c <HAL_RCC_ClockConfig>
 8004c70:	1e03      	subs	r3, r0, #0
 8004c72:	d001      	beq.n	8004c78 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004c74:	f000 f9d2 	bl	800501c <Error_Handler>
  }
}
 8004c78:	46c0      	nop			@ (mov r8, r8)
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b013      	add	sp, #76	@ 0x4c
 8004c7e:	bd90      	pop	{r4, r7, pc}

08004c80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c84:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf4 <MX_I2C1_Init+0x74>)
 8004c86:	4a1c      	ldr	r2, [pc, #112]	@ (8004cf8 <MX_I2C1_Init+0x78>)
 8004c88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8004c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf4 <MX_I2C1_Init+0x74>)
 8004c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cfc <MX_I2C1_Init+0x7c>)
 8004c8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004c90:	4b18      	ldr	r3, [pc, #96]	@ (8004cf4 <MX_I2C1_Init+0x74>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c96:	4b17      	ldr	r3, [pc, #92]	@ (8004cf4 <MX_I2C1_Init+0x74>)
 8004c98:	2201      	movs	r2, #1
 8004c9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c9c:	4b15      	ldr	r3, [pc, #84]	@ (8004cf4 <MX_I2C1_Init+0x74>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004ca2:	4b14      	ldr	r3, [pc, #80]	@ (8004cf4 <MX_I2C1_Init+0x74>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004ca8:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <MX_I2C1_Init+0x74>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004cae:	4b11      	ldr	r3, [pc, #68]	@ (8004cf4 <MX_I2C1_Init+0x74>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf4 <MX_I2C1_Init+0x74>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004cba:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf4 <MX_I2C1_Init+0x74>)
 8004cbc:	0018      	movs	r0, r3
 8004cbe:	f000 fea7 	bl	8005a10 <HAL_I2C_Init>
 8004cc2:	1e03      	subs	r3, r0, #0
 8004cc4:	d001      	beq.n	8004cca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004cc6:	f000 f9a9 	bl	800501c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004cca:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf4 <MX_I2C1_Init+0x74>)
 8004ccc:	2100      	movs	r1, #0
 8004cce:	0018      	movs	r0, r3
 8004cd0:	f001 fd9e 	bl	8006810 <HAL_I2CEx_ConfigAnalogFilter>
 8004cd4:	1e03      	subs	r3, r0, #0
 8004cd6:	d001      	beq.n	8004cdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004cd8:	f000 f9a0 	bl	800501c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <MX_I2C1_Init+0x74>)
 8004cde:	2100      	movs	r1, #0
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f001 fde1 	bl	80068a8 <HAL_I2CEx_ConfigDigitalFilter>
 8004ce6:	1e03      	subs	r3, r0, #0
 8004ce8:	d001      	beq.n	8004cee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004cea:	f000 f997 	bl	800501c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	200001f0 	.word	0x200001f0
 8004cf8:	40005400 	.word	0x40005400
 8004cfc:	00503d58 	.word	0x00503d58

08004d00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004d04:	4b1b      	ldr	r3, [pc, #108]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d06:	4a1c      	ldr	r2, [pc, #112]	@ (8004d78 <MX_SPI1_Init+0x78>)
 8004d08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d0c:	2282      	movs	r2, #130	@ 0x82
 8004d0e:	0052      	lsls	r2, r2, #1
 8004d10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004d12:	4b18      	ldr	r3, [pc, #96]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8004d18:	4b16      	ldr	r3, [pc, #88]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d1a:	22c0      	movs	r2, #192	@ 0xc0
 8004d1c:	0092      	lsls	r2, r2, #2
 8004d1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d20:	4b14      	ldr	r3, [pc, #80]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d26:	4b13      	ldr	r3, [pc, #76]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004d2c:	4b11      	ldr	r3, [pc, #68]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d2e:	2280      	movs	r2, #128	@ 0x80
 8004d30:	0092      	lsls	r2, r2, #2
 8004d32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d34:	4b0f      	ldr	r3, [pc, #60]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d40:	4b0c      	ldr	r3, [pc, #48]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d46:	4b0b      	ldr	r3, [pc, #44]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004d4c:	4b09      	ldr	r3, [pc, #36]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d4e:	2207      	movs	r2, #7
 8004d50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004d52:	4b08      	ldr	r3, [pc, #32]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004d58:	4b06      	ldr	r3, [pc, #24]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d5e:	4b05      	ldr	r3, [pc, #20]	@ (8004d74 <MX_SPI1_Init+0x74>)
 8004d60:	0018      	movs	r0, r3
 8004d62:	f002 fcb5 	bl	80076d0 <HAL_SPI_Init>
 8004d66:	1e03      	subs	r3, r0, #0
 8004d68:	d001      	beq.n	8004d6e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004d6a:	f000 f957 	bl	800501c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004d6e:	46c0      	nop			@ (mov r8, r8)
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20000244 	.word	0x20000244
 8004d78:	40013000 	.word	0x40013000

08004d7c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d80:	4b23      	ldr	r3, [pc, #140]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004d82:	4a24      	ldr	r2, [pc, #144]	@ (8004e14 <MX_USART2_UART_Init+0x98>)
 8004d84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d86:	4b22      	ldr	r3, [pc, #136]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004d88:	22e1      	movs	r2, #225	@ 0xe1
 8004d8a:	0252      	lsls	r2, r2, #9
 8004d8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d8e:	4b20      	ldr	r3, [pc, #128]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d94:	4b1e      	ldr	r3, [pc, #120]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004da0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004da2:	220c      	movs	r2, #12
 8004da4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004da6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dac:	4b18      	ldr	r3, [pc, #96]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004db2:	4b17      	ldr	r3, [pc, #92]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004db8:	4b15      	ldr	r3, [pc, #84]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004dbe:	4b14      	ldr	r3, [pc, #80]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004dc4:	4b12      	ldr	r3, [pc, #72]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f002 fd3a 	bl	8007840 <HAL_UART_Init>
 8004dcc:	1e03      	subs	r3, r0, #0
 8004dce:	d001      	beq.n	8004dd4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004dd0:	f000 f924 	bl	800501c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f003 fb57 	bl	800848c <HAL_UARTEx_SetTxFifoThreshold>
 8004dde:	1e03      	subs	r3, r0, #0
 8004de0:	d001      	beq.n	8004de6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004de2:	f000 f91b 	bl	800501c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004de6:	4b0a      	ldr	r3, [pc, #40]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004de8:	2100      	movs	r1, #0
 8004dea:	0018      	movs	r0, r3
 8004dec:	f003 fb8e 	bl	800850c <HAL_UARTEx_SetRxFifoThreshold>
 8004df0:	1e03      	subs	r3, r0, #0
 8004df2:	d001      	beq.n	8004df8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004df4:	f000 f912 	bl	800501c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <MX_USART2_UART_Init+0x94>)
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f003 fb0c 	bl	8008418 <HAL_UARTEx_DisableFifoMode>
 8004e00:	1e03      	subs	r3, r0, #0
 8004e02:	d001      	beq.n	8004e08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004e04:	f000 f90a 	bl	800501c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e08:	46c0      	nop			@ (mov r8, r8)
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	46c0      	nop			@ (mov r8, r8)
 8004e10:	200002a8 	.word	0x200002a8
 8004e14:	40004400 	.word	0x40004400

08004e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e18:	b590      	push	{r4, r7, lr}
 8004e1a:	b089      	sub	sp, #36	@ 0x24
 8004e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1e:	240c      	movs	r4, #12
 8004e20:	193b      	adds	r3, r7, r4
 8004e22:	0018      	movs	r0, r3
 8004e24:	2314      	movs	r3, #20
 8004e26:	001a      	movs	r2, r3
 8004e28:	2100      	movs	r1, #0
 8004e2a:	f004 f969 	bl	8009100 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e2e:	4b22      	ldr	r3, [pc, #136]	@ (8004eb8 <MX_GPIO_Init+0xa0>)
 8004e30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e32:	4b21      	ldr	r3, [pc, #132]	@ (8004eb8 <MX_GPIO_Init+0xa0>)
 8004e34:	2101      	movs	r1, #1
 8004e36:	430a      	orrs	r2, r1
 8004e38:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb8 <MX_GPIO_Init+0xa0>)
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e3e:	2201      	movs	r2, #1
 8004e40:	4013      	ands	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
 8004e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e46:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb8 <MX_GPIO_Init+0xa0>)
 8004e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb8 <MX_GPIO_Init+0xa0>)
 8004e4c:	2102      	movs	r1, #2
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e52:	4b19      	ldr	r3, [pc, #100]	@ (8004eb8 <MX_GPIO_Init+0xa0>)
 8004e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e56:	2202      	movs	r2, #2
 8004e58:	4013      	ands	r3, r2
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8004e5e:	4b17      	ldr	r3, [pc, #92]	@ (8004ebc <MX_GPIO_Init+0xa4>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	2102      	movs	r1, #2
 8004e64:	0018      	movs	r0, r3
 8004e66:	f000 fdb5 	bl	80059d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004e6a:	193b      	adds	r3, r7, r4
 8004e6c:	2205      	movs	r2, #5
 8004e6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e70:	193b      	adds	r3, r7, r4
 8004e72:	2200      	movs	r2, #0
 8004e74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e76:	193b      	adds	r3, r7, r4
 8004e78:	2200      	movs	r2, #0
 8004e7a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e7c:	193b      	adds	r3, r7, r4
 8004e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8004ebc <MX_GPIO_Init+0xa4>)
 8004e80:	0019      	movs	r1, r3
 8004e82:	0010      	movs	r0, r2
 8004e84:	f000 fc42 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004e88:	0021      	movs	r1, r4
 8004e8a:	187b      	adds	r3, r7, r1
 8004e8c:	2202      	movs	r2, #2
 8004e8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e90:	187b      	adds	r3, r7, r1
 8004e92:	2201      	movs	r2, #1
 8004e94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e96:	187b      	adds	r3, r7, r1
 8004e98:	2200      	movs	r2, #0
 8004e9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e9c:	187b      	adds	r3, r7, r1
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea2:	187b      	adds	r3, r7, r1
 8004ea4:	4a05      	ldr	r2, [pc, #20]	@ (8004ebc <MX_GPIO_Init+0xa4>)
 8004ea6:	0019      	movs	r1, r3
 8004ea8:	0010      	movs	r0, r2
 8004eaa:	f000 fc2f 	bl	800570c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	b009      	add	sp, #36	@ 0x24
 8004eb4:	bd90      	pop	{r4, r7, pc}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	50000400 	.word	0x50000400

08004ec0 <user_delay_us>:

/* USER CODE BEGIN 4 */
static void user_delay_us(uint32_t period, void *intf_ptr)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
    uint32_t start = HAL_GetTick();
 8004eca:	f000 fb61 	bl	8005590 <HAL_GetTick>
 8004ece:	0003      	movs	r3, r0
 8004ed0:	60fb      	str	r3, [r7, #12]
    while ((HAL_GetTick() - start) * 1000 < period);
 8004ed2:	46c0      	nop			@ (mov r8, r8)
 8004ed4:	f000 fb5c 	bl	8005590 <HAL_GetTick>
 8004ed8:	0002      	movs	r2, r0
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	1ad2      	subs	r2, r2, r3
 8004ede:	0013      	movs	r3, r2
 8004ee0:	015b      	lsls	r3, r3, #5
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	189b      	adds	r3, r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	001a      	movs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d8f0      	bhi.n	8004ed4 <user_delay_us+0x14>
}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	46c0      	nop			@ (mov r8, r8)
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b004      	add	sp, #16
 8004efa:	bd80      	pop	{r7, pc}

08004efc <user_i2c_read>:

static int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 8004efc:	b5b0      	push	{r4, r5, r7, lr}
 8004efe:	b08e      	sub	sp, #56	@ 0x38
 8004f00:	af04      	add	r7, sp, #16
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
 8004f06:	603b      	str	r3, [r7, #0]
 8004f08:	210f      	movs	r1, #15
 8004f0a:	187b      	adds	r3, r7, r1
 8004f0c:	1c02      	adds	r2, r0, #0
 8004f0e:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_I2C_Mem_Read(hi2c, BME68X_I2C_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY) != HAL_OK) {
 8004f14:	187b      	adds	r3, r7, r1
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	b299      	uxth	r1, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f20:	2201      	movs	r2, #1
 8004f22:	4252      	negs	r2, r2
 8004f24:	9202      	str	r2, [sp, #8]
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	000a      	movs	r2, r1
 8004f30:	21ee      	movs	r1, #238	@ 0xee
 8004f32:	f000 ff41 	bl	8005db8 <HAL_I2C_Mem_Read>
 8004f36:	1e03      	subs	r3, r0, #0
 8004f38:	d017      	beq.n	8004f6a <user_i2c_read+0x6e>
        char err[] = "I2C read failed\r\n";
 8004f3a:	2510      	movs	r5, #16
 8004f3c:	197b      	adds	r3, r7, r5
 8004f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8004f74 <user_i2c_read+0x78>)
 8004f40:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004f42:	c313      	stmia	r3!, {r0, r1, r4}
 8004f44:	6811      	ldr	r1, [r2, #0]
 8004f46:	6019      	str	r1, [r3, #0]
 8004f48:	8892      	ldrh	r2, [r2, #4]
 8004f4a:	809a      	strh	r2, [r3, #4]
        HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 8004f4c:	197b      	adds	r3, r7, r5
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f7fb f8d8 	bl	8000104 <strlen>
 8004f54:	0003      	movs	r3, r0
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	2301      	movs	r3, #1
 8004f5a:	425b      	negs	r3, r3
 8004f5c:	1979      	adds	r1, r7, r5
 8004f5e:	4806      	ldr	r0, [pc, #24]	@ (8004f78 <user_i2c_read+0x7c>)
 8004f60:	f002 fcc4 	bl	80078ec <HAL_UART_Transmit>
        return -1;
 8004f64:	2301      	movs	r3, #1
 8004f66:	425b      	negs	r3, r3
 8004f68:	e000      	b.n	8004f6c <user_i2c_read+0x70>
    }
    return 0;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b00a      	add	sp, #40	@ 0x28
 8004f72:	bdb0      	pop	{r4, r5, r7, pc}
 8004f74:	0800b6a8 	.word	0x0800b6a8
 8004f78:	200002a8 	.word	0x200002a8

08004f7c <user_i2c_write>:

static int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b08a      	sub	sp, #40	@ 0x28
 8004f80:	af04      	add	r7, sp, #16
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	210f      	movs	r1, #15
 8004f8a:	187b      	adds	r3, r7, r1
 8004f8c:	1c02      	adds	r2, r0, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	617b      	str	r3, [r7, #20]
    if (HAL_I2C_Mem_Write(hi2c, BME68X_I2C_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, len, HAL_MAX_DELAY) != HAL_OK)
 8004f94:	187b      	adds	r3, r7, r1
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	b299      	uxth	r1, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	6978      	ldr	r0, [r7, #20]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	4252      	negs	r2, r2
 8004fa4:	9202      	str	r2, [sp, #8]
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	2301      	movs	r3, #1
 8004fae:	000a      	movs	r2, r1
 8004fb0:	21ee      	movs	r1, #238	@ 0xee
 8004fb2:	f000 fdd3 	bl	8005b5c <HAL_I2C_Mem_Write>
 8004fb6:	1e03      	subs	r3, r0, #0
 8004fb8:	d002      	beq.n	8004fc0 <user_i2c_write+0x44>
        return -1;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	425b      	negs	r3, r3
 8004fbe:	e000      	b.n	8004fc2 <user_i2c_write+0x46>
    return 0;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b006      	add	sp, #24
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <log_debug>:

void log_debug(const char *msg) {
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b0b7      	sub	sp, #220	@ 0xdc
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
	bool isDebug = true;
 8004fd4:	21d7      	movs	r1, #215	@ 0xd7
 8004fd6:	187b      	adds	r3, r7, r1
 8004fd8:	2201      	movs	r2, #1
 8004fda:	701a      	strb	r2, [r3, #0]
    char buffer[200];
    if(isDebug)
 8004fdc:	187b      	adds	r3, r7, r1
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d012      	beq.n	800500a <log_debug+0x3e>
    {
    	snprintf(buffer, sizeof(buffer), "[DEBUG] %s\r\n", msg);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a0b      	ldr	r2, [pc, #44]	@ (8005014 <log_debug+0x48>)
 8004fe8:	240c      	movs	r4, #12
 8004fea:	1938      	adds	r0, r7, r4
 8004fec:	21c8      	movs	r1, #200	@ 0xc8
 8004fee:	f003 ff8d 	bl	8008f0c <sniprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8004ff2:	193b      	adds	r3, r7, r4
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f7fb f885 	bl	8000104 <strlen>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	2301      	movs	r3, #1
 8005000:	425b      	negs	r3, r3
 8005002:	1939      	adds	r1, r7, r4
 8005004:	4804      	ldr	r0, [pc, #16]	@ (8005018 <log_debug+0x4c>)
 8005006:	f002 fc71 	bl	80078ec <HAL_UART_Transmit>
    }
}
 800500a:	46c0      	nop			@ (mov r8, r8)
 800500c:	46bd      	mov	sp, r7
 800500e:	b037      	add	sp, #220	@ 0xdc
 8005010:	bd90      	pop	{r4, r7, pc}
 8005012:	46c0      	nop			@ (mov r8, r8)
 8005014:	0800b6bc 	.word	0x0800b6bc
 8005018:	200002a8 	.word	0x200002a8

0800501c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005020:	b672      	cpsid	i
}
 8005022:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005024:	46c0      	nop			@ (mov r8, r8)
 8005026:	e7fd      	b.n	8005024 <Error_Handler+0x8>

08005028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800502e:	4b0f      	ldr	r3, [pc, #60]	@ (800506c <HAL_MspInit+0x44>)
 8005030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005032:	4b0e      	ldr	r3, [pc, #56]	@ (800506c <HAL_MspInit+0x44>)
 8005034:	2101      	movs	r1, #1
 8005036:	430a      	orrs	r2, r1
 8005038:	641a      	str	r2, [r3, #64]	@ 0x40
 800503a:	4b0c      	ldr	r3, [pc, #48]	@ (800506c <HAL_MspInit+0x44>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	2201      	movs	r2, #1
 8005040:	4013      	ands	r3, r2
 8005042:	607b      	str	r3, [r7, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005046:	4b09      	ldr	r3, [pc, #36]	@ (800506c <HAL_MspInit+0x44>)
 8005048:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800504a:	4b08      	ldr	r3, [pc, #32]	@ (800506c <HAL_MspInit+0x44>)
 800504c:	2180      	movs	r1, #128	@ 0x80
 800504e:	0549      	lsls	r1, r1, #21
 8005050:	430a      	orrs	r2, r1
 8005052:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005054:	4b05      	ldr	r3, [pc, #20]	@ (800506c <HAL_MspInit+0x44>)
 8005056:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005058:	2380      	movs	r3, #128	@ 0x80
 800505a:	055b      	lsls	r3, r3, #21
 800505c:	4013      	ands	r3, r2
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005062:	46c0      	nop			@ (mov r8, r8)
 8005064:	46bd      	mov	sp, r7
 8005066:	b002      	add	sp, #8
 8005068:	bd80      	pop	{r7, pc}
 800506a:	46c0      	nop			@ (mov r8, r8)
 800506c:	40021000 	.word	0x40021000

08005070 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b097      	sub	sp, #92	@ 0x5c
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005078:	2344      	movs	r3, #68	@ 0x44
 800507a:	18fb      	adds	r3, r7, r3
 800507c:	0018      	movs	r0, r3
 800507e:	2314      	movs	r3, #20
 8005080:	001a      	movs	r2, r3
 8005082:	2100      	movs	r1, #0
 8005084:	f004 f83c 	bl	8009100 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005088:	2410      	movs	r4, #16
 800508a:	193b      	adds	r3, r7, r4
 800508c:	0018      	movs	r0, r3
 800508e:	2334      	movs	r3, #52	@ 0x34
 8005090:	001a      	movs	r2, r3
 8005092:	2100      	movs	r1, #0
 8005094:	f004 f834 	bl	8009100 <memset>
  if(hi2c->Instance==I2C1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a22      	ldr	r2, [pc, #136]	@ (8005128 <HAL_I2C_MspInit+0xb8>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d13e      	bne.n	8005120 <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80050a2:	193b      	adds	r3, r7, r4
 80050a4:	2220      	movs	r2, #32
 80050a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80050a8:	193b      	adds	r3, r7, r4
 80050aa:	2200      	movs	r2, #0
 80050ac:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80050ae:	193b      	adds	r3, r7, r4
 80050b0:	0018      	movs	r0, r3
 80050b2:	f002 f955 	bl	8007360 <HAL_RCCEx_PeriphCLKConfig>
 80050b6:	1e03      	subs	r3, r0, #0
 80050b8:	d001      	beq.n	80050be <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80050ba:	f7ff ffaf 	bl	800501c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050be:	4b1b      	ldr	r3, [pc, #108]	@ (800512c <HAL_I2C_MspInit+0xbc>)
 80050c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c2:	4b1a      	ldr	r3, [pc, #104]	@ (800512c <HAL_I2C_MspInit+0xbc>)
 80050c4:	2102      	movs	r1, #2
 80050c6:	430a      	orrs	r2, r1
 80050c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80050ca:	4b18      	ldr	r3, [pc, #96]	@ (800512c <HAL_I2C_MspInit+0xbc>)
 80050cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ce:	2202      	movs	r2, #2
 80050d0:	4013      	ands	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80050d6:	2144      	movs	r1, #68	@ 0x44
 80050d8:	187b      	adds	r3, r7, r1
 80050da:	22c0      	movs	r2, #192	@ 0xc0
 80050dc:	0092      	lsls	r2, r2, #2
 80050de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050e0:	187b      	adds	r3, r7, r1
 80050e2:	2212      	movs	r2, #18
 80050e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e6:	187b      	adds	r3, r7, r1
 80050e8:	2200      	movs	r2, #0
 80050ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ec:	187b      	adds	r3, r7, r1
 80050ee:	2200      	movs	r2, #0
 80050f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80050f2:	187b      	adds	r3, r7, r1
 80050f4:	2206      	movs	r2, #6
 80050f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050f8:	187b      	adds	r3, r7, r1
 80050fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005130 <HAL_I2C_MspInit+0xc0>)
 80050fc:	0019      	movs	r1, r3
 80050fe:	0010      	movs	r0, r2
 8005100:	f000 fb04 	bl	800570c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005104:	4b09      	ldr	r3, [pc, #36]	@ (800512c <HAL_I2C_MspInit+0xbc>)
 8005106:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005108:	4b08      	ldr	r3, [pc, #32]	@ (800512c <HAL_I2C_MspInit+0xbc>)
 800510a:	2180      	movs	r1, #128	@ 0x80
 800510c:	0389      	lsls	r1, r1, #14
 800510e:	430a      	orrs	r2, r1
 8005110:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005112:	4b06      	ldr	r3, [pc, #24]	@ (800512c <HAL_I2C_MspInit+0xbc>)
 8005114:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005116:	2380      	movs	r3, #128	@ 0x80
 8005118:	039b      	lsls	r3, r3, #14
 800511a:	4013      	ands	r3, r2
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005120:	46c0      	nop			@ (mov r8, r8)
 8005122:	46bd      	mov	sp, r7
 8005124:	b017      	add	sp, #92	@ 0x5c
 8005126:	bd90      	pop	{r4, r7, pc}
 8005128:	40005400 	.word	0x40005400
 800512c:	40021000 	.word	0x40021000
 8005130:	50000400 	.word	0x50000400

08005134 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005134:	b590      	push	{r4, r7, lr}
 8005136:	b08b      	sub	sp, #44	@ 0x2c
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800513c:	2414      	movs	r4, #20
 800513e:	193b      	adds	r3, r7, r4
 8005140:	0018      	movs	r0, r3
 8005142:	2314      	movs	r3, #20
 8005144:	001a      	movs	r2, r3
 8005146:	2100      	movs	r1, #0
 8005148:	f003 ffda 	bl	8009100 <memset>
  if(hspi->Instance==SPI1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1b      	ldr	r2, [pc, #108]	@ (80051c0 <HAL_SPI_MspInit+0x8c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d130      	bne.n	80051b8 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005156:	4b1b      	ldr	r3, [pc, #108]	@ (80051c4 <HAL_SPI_MspInit+0x90>)
 8005158:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800515a:	4b1a      	ldr	r3, [pc, #104]	@ (80051c4 <HAL_SPI_MspInit+0x90>)
 800515c:	2180      	movs	r1, #128	@ 0x80
 800515e:	0149      	lsls	r1, r1, #5
 8005160:	430a      	orrs	r2, r1
 8005162:	641a      	str	r2, [r3, #64]	@ 0x40
 8005164:	4b17      	ldr	r3, [pc, #92]	@ (80051c4 <HAL_SPI_MspInit+0x90>)
 8005166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005168:	2380      	movs	r3, #128	@ 0x80
 800516a:	015b      	lsls	r3, r3, #5
 800516c:	4013      	ands	r3, r2
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005172:	4b14      	ldr	r3, [pc, #80]	@ (80051c4 <HAL_SPI_MspInit+0x90>)
 8005174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005176:	4b13      	ldr	r3, [pc, #76]	@ (80051c4 <HAL_SPI_MspInit+0x90>)
 8005178:	2101      	movs	r1, #1
 800517a:	430a      	orrs	r2, r1
 800517c:	635a      	str	r2, [r3, #52]	@ 0x34
 800517e:	4b11      	ldr	r3, [pc, #68]	@ (80051c4 <HAL_SPI_MspInit+0x90>)
 8005180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005182:	2201      	movs	r2, #1
 8005184:	4013      	ands	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800518a:	0021      	movs	r1, r4
 800518c:	187b      	adds	r3, r7, r1
 800518e:	22e0      	movs	r2, #224	@ 0xe0
 8005190:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005192:	187b      	adds	r3, r7, r1
 8005194:	2202      	movs	r2, #2
 8005196:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005198:	187b      	adds	r3, r7, r1
 800519a:	2200      	movs	r2, #0
 800519c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519e:	187b      	adds	r3, r7, r1
 80051a0:	2200      	movs	r2, #0
 80051a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80051a4:	187b      	adds	r3, r7, r1
 80051a6:	2200      	movs	r2, #0
 80051a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051aa:	187a      	adds	r2, r7, r1
 80051ac:	23a0      	movs	r3, #160	@ 0xa0
 80051ae:	05db      	lsls	r3, r3, #23
 80051b0:	0011      	movs	r1, r2
 80051b2:	0018      	movs	r0, r3
 80051b4:	f000 faaa 	bl	800570c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80051b8:	46c0      	nop			@ (mov r8, r8)
 80051ba:	46bd      	mov	sp, r7
 80051bc:	b00b      	add	sp, #44	@ 0x2c
 80051be:	bd90      	pop	{r4, r7, pc}
 80051c0:	40013000 	.word	0x40013000
 80051c4:	40021000 	.word	0x40021000

080051c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80051c8:	b590      	push	{r4, r7, lr}
 80051ca:	b097      	sub	sp, #92	@ 0x5c
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051d0:	2344      	movs	r3, #68	@ 0x44
 80051d2:	18fb      	adds	r3, r7, r3
 80051d4:	0018      	movs	r0, r3
 80051d6:	2314      	movs	r3, #20
 80051d8:	001a      	movs	r2, r3
 80051da:	2100      	movs	r1, #0
 80051dc:	f003 ff90 	bl	8009100 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051e0:	2410      	movs	r4, #16
 80051e2:	193b      	adds	r3, r7, r4
 80051e4:	0018      	movs	r0, r3
 80051e6:	2334      	movs	r3, #52	@ 0x34
 80051e8:	001a      	movs	r2, r3
 80051ea:	2100      	movs	r1, #0
 80051ec:	f003 ff88 	bl	8009100 <memset>
  if(huart->Instance==USART2)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a22      	ldr	r2, [pc, #136]	@ (8005280 <HAL_UART_MspInit+0xb8>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d13e      	bne.n	8005278 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80051fa:	193b      	adds	r3, r7, r4
 80051fc:	2202      	movs	r2, #2
 80051fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005200:	193b      	adds	r3, r7, r4
 8005202:	2200      	movs	r2, #0
 8005204:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005206:	193b      	adds	r3, r7, r4
 8005208:	0018      	movs	r0, r3
 800520a:	f002 f8a9 	bl	8007360 <HAL_RCCEx_PeriphCLKConfig>
 800520e:	1e03      	subs	r3, r0, #0
 8005210:	d001      	beq.n	8005216 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005212:	f7ff ff03 	bl	800501c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005216:	4b1b      	ldr	r3, [pc, #108]	@ (8005284 <HAL_UART_MspInit+0xbc>)
 8005218:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800521a:	4b1a      	ldr	r3, [pc, #104]	@ (8005284 <HAL_UART_MspInit+0xbc>)
 800521c:	2180      	movs	r1, #128	@ 0x80
 800521e:	0289      	lsls	r1, r1, #10
 8005220:	430a      	orrs	r2, r1
 8005222:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005224:	4b17      	ldr	r3, [pc, #92]	@ (8005284 <HAL_UART_MspInit+0xbc>)
 8005226:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005228:	2380      	movs	r3, #128	@ 0x80
 800522a:	029b      	lsls	r3, r3, #10
 800522c:	4013      	ands	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005232:	4b14      	ldr	r3, [pc, #80]	@ (8005284 <HAL_UART_MspInit+0xbc>)
 8005234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005236:	4b13      	ldr	r3, [pc, #76]	@ (8005284 <HAL_UART_MspInit+0xbc>)
 8005238:	2101      	movs	r1, #1
 800523a:	430a      	orrs	r2, r1
 800523c:	635a      	str	r2, [r3, #52]	@ 0x34
 800523e:	4b11      	ldr	r3, [pc, #68]	@ (8005284 <HAL_UART_MspInit+0xbc>)
 8005240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005242:	2201      	movs	r2, #1
 8005244:	4013      	ands	r3, r2
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800524a:	2144      	movs	r1, #68	@ 0x44
 800524c:	187b      	adds	r3, r7, r1
 800524e:	220c      	movs	r2, #12
 8005250:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005252:	187b      	adds	r3, r7, r1
 8005254:	2202      	movs	r2, #2
 8005256:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005258:	187b      	adds	r3, r7, r1
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800525e:	187b      	adds	r3, r7, r1
 8005260:	2200      	movs	r2, #0
 8005262:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005264:	187b      	adds	r3, r7, r1
 8005266:	2201      	movs	r2, #1
 8005268:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800526a:	187a      	adds	r2, r7, r1
 800526c:	23a0      	movs	r3, #160	@ 0xa0
 800526e:	05db      	lsls	r3, r3, #23
 8005270:	0011      	movs	r1, r2
 8005272:	0018      	movs	r0, r3
 8005274:	f000 fa4a 	bl	800570c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8005278:	46c0      	nop			@ (mov r8, r8)
 800527a:	46bd      	mov	sp, r7
 800527c:	b017      	add	sp, #92	@ 0x5c
 800527e:	bd90      	pop	{r4, r7, pc}
 8005280:	40004400 	.word	0x40004400
 8005284:	40021000 	.word	0x40021000

08005288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800528c:	46c0      	nop			@ (mov r8, r8)
 800528e:	e7fd      	b.n	800528c <NMI_Handler+0x4>

08005290 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005294:	46c0      	nop			@ (mov r8, r8)
 8005296:	e7fd      	b.n	8005294 <HardFault_Handler+0x4>

08005298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800529c:	46c0      	nop			@ (mov r8, r8)
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052a6:	46c0      	nop			@ (mov r8, r8)
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052b0:	f000 f95c 	bl	800556c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052b4:	46c0      	nop			@ (mov r8, r8)
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	af00      	add	r7, sp, #0
  return 1;
 80052be:	2301      	movs	r3, #1
}
 80052c0:	0018      	movs	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <_kill>:

int _kill(int pid, int sig)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80052d0:	f003 ff1e 	bl	8009110 <__errno>
 80052d4:	0003      	movs	r3, r0
 80052d6:	2216      	movs	r2, #22
 80052d8:	601a      	str	r2, [r3, #0]
  return -1;
 80052da:	2301      	movs	r3, #1
 80052dc:	425b      	negs	r3, r3
}
 80052de:	0018      	movs	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	b002      	add	sp, #8
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <_exit>:

void _exit (int status)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80052ee:	2301      	movs	r3, #1
 80052f0:	425a      	negs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	0011      	movs	r1, r2
 80052f6:	0018      	movs	r0, r3
 80052f8:	f7ff ffe5 	bl	80052c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80052fc:	46c0      	nop			@ (mov r8, r8)
 80052fe:	e7fd      	b.n	80052fc <_exit+0x16>

08005300 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	e00a      	b.n	8005328 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005312:	e000      	b.n	8005316 <_read+0x16>
 8005314:	bf00      	nop
 8005316:	0001      	movs	r1, r0
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	60ba      	str	r2, [r7, #8]
 800531e:	b2ca      	uxtb	r2, r1
 8005320:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	3301      	adds	r3, #1
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	429a      	cmp	r2, r3
 800532e:	dbf0      	blt.n	8005312 <_read+0x12>
  }

  return len;
 8005330:	687b      	ldr	r3, [r7, #4]
}
 8005332:	0018      	movs	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	b006      	add	sp, #24
 8005338:	bd80      	pop	{r7, pc}

0800533a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b086      	sub	sp, #24
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e009      	b.n	8005360 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	60ba      	str	r2, [r7, #8]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	0018      	movs	r0, r3
 8005356:	e000      	b.n	800535a <_write+0x20>
 8005358:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	3301      	adds	r3, #1
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	429a      	cmp	r2, r3
 8005366:	dbf1      	blt.n	800534c <_write+0x12>
  }
  return len;
 8005368:	687b      	ldr	r3, [r7, #4]
}
 800536a:	0018      	movs	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	b006      	add	sp, #24
 8005370:	bd80      	pop	{r7, pc}

08005372 <_close>:

int _close(int file)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800537a:	2301      	movs	r3, #1
 800537c:	425b      	negs	r3, r3
}
 800537e:	0018      	movs	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	b002      	add	sp, #8
 8005384:	bd80      	pop	{r7, pc}

08005386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2280      	movs	r2, #128	@ 0x80
 8005394:	0192      	lsls	r2, r2, #6
 8005396:	605a      	str	r2, [r3, #4]
  return 0;
 8005398:	2300      	movs	r3, #0
}
 800539a:	0018      	movs	r0, r3
 800539c:	46bd      	mov	sp, r7
 800539e:	b002      	add	sp, #8
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <_isatty>:

int _isatty(int file)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80053aa:	2301      	movs	r3, #1
}
 80053ac:	0018      	movs	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	b002      	add	sp, #8
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	0018      	movs	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b004      	add	sp, #16
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053d4:	4a14      	ldr	r2, [pc, #80]	@ (8005428 <_sbrk+0x5c>)
 80053d6:	4b15      	ldr	r3, [pc, #84]	@ (800542c <_sbrk+0x60>)
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053e0:	4b13      	ldr	r3, [pc, #76]	@ (8005430 <_sbrk+0x64>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d102      	bne.n	80053ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053e8:	4b11      	ldr	r3, [pc, #68]	@ (8005430 <_sbrk+0x64>)
 80053ea:	4a12      	ldr	r2, [pc, #72]	@ (8005434 <_sbrk+0x68>)
 80053ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053ee:	4b10      	ldr	r3, [pc, #64]	@ (8005430 <_sbrk+0x64>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	18d3      	adds	r3, r2, r3
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d207      	bcs.n	800540c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053fc:	f003 fe88 	bl	8009110 <__errno>
 8005400:	0003      	movs	r3, r0
 8005402:	220c      	movs	r2, #12
 8005404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005406:	2301      	movs	r3, #1
 8005408:	425b      	negs	r3, r3
 800540a:	e009      	b.n	8005420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800540c:	4b08      	ldr	r3, [pc, #32]	@ (8005430 <_sbrk+0x64>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005412:	4b07      	ldr	r3, [pc, #28]	@ (8005430 <_sbrk+0x64>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	18d2      	adds	r2, r2, r3
 800541a:	4b05      	ldr	r3, [pc, #20]	@ (8005430 <_sbrk+0x64>)
 800541c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800541e:	68fb      	ldr	r3, [r7, #12]
}
 8005420:	0018      	movs	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	b006      	add	sp, #24
 8005426:	bd80      	pop	{r7, pc}
 8005428:	20009000 	.word	0x20009000
 800542c:	00000400 	.word	0x00000400
 8005430:	200003ac 	.word	0x200003ac
 8005434:	20000500 	.word	0x20000500

08005438 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800543c:	46c0      	nop			@ (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005444:	480d      	ldr	r0, [pc, #52]	@ (800547c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005446:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005448:	f7ff fff6 	bl	8005438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800544c:	480c      	ldr	r0, [pc, #48]	@ (8005480 <LoopForever+0x6>)
  ldr r1, =_edata
 800544e:	490d      	ldr	r1, [pc, #52]	@ (8005484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005450:	4a0d      	ldr	r2, [pc, #52]	@ (8005488 <LoopForever+0xe>)
  movs r3, #0
 8005452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005454:	e002      	b.n	800545c <LoopCopyDataInit>

08005456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800545a:	3304      	adds	r3, #4

0800545c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800545c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800545e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005460:	d3f9      	bcc.n	8005456 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005462:	4a0a      	ldr	r2, [pc, #40]	@ (800548c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005464:	4c0a      	ldr	r4, [pc, #40]	@ (8005490 <LoopForever+0x16>)
  movs r3, #0
 8005466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005468:	e001      	b.n	800546e <LoopFillZerobss>

0800546a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800546a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800546c:	3204      	adds	r2, #4

0800546e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800546e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005470:	d3fb      	bcc.n	800546a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005472:	f003 fe53 	bl	800911c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005476:	f7ff fad9 	bl	8004a2c <main>

0800547a <LoopForever>:

LoopForever:
  b LoopForever
 800547a:	e7fe      	b.n	800547a <LoopForever>
  ldr   r0, =_estack
 800547c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005484:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8005488:	0800bb9c 	.word	0x0800bb9c
  ldr r2, =_sbss
 800548c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8005490:	20000500 	.word	0x20000500

08005494 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005494:	e7fe      	b.n	8005494 <ADC1_COMP_IRQHandler>
	...

08005498 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800549e:	1dfb      	adds	r3, r7, #7
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054a4:	4b0b      	ldr	r3, [pc, #44]	@ (80054d4 <HAL_Init+0x3c>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	4b0a      	ldr	r3, [pc, #40]	@ (80054d4 <HAL_Init+0x3c>)
 80054aa:	2180      	movs	r1, #128	@ 0x80
 80054ac:	0049      	lsls	r1, r1, #1
 80054ae:	430a      	orrs	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054b2:	2000      	movs	r0, #0
 80054b4:	f000 f810 	bl	80054d8 <HAL_InitTick>
 80054b8:	1e03      	subs	r3, r0, #0
 80054ba:	d003      	beq.n	80054c4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80054bc:	1dfb      	adds	r3, r7, #7
 80054be:	2201      	movs	r2, #1
 80054c0:	701a      	strb	r2, [r3, #0]
 80054c2:	e001      	b.n	80054c8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80054c4:	f7ff fdb0 	bl	8005028 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054c8:	1dfb      	adds	r3, r7, #7
 80054ca:	781b      	ldrb	r3, [r3, #0]
}
 80054cc:	0018      	movs	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b002      	add	sp, #8
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	40022000 	.word	0x40022000

080054d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054e0:	230f      	movs	r3, #15
 80054e2:	18fb      	adds	r3, r7, r3
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80054e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005560 <HAL_InitTick+0x88>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d02b      	beq.n	8005548 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80054f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005564 <HAL_InitTick+0x8c>)
 80054f2:	681c      	ldr	r4, [r3, #0]
 80054f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005560 <HAL_InitTick+0x88>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	0019      	movs	r1, r3
 80054fa:	23fa      	movs	r3, #250	@ 0xfa
 80054fc:	0098      	lsls	r0, r3, #2
 80054fe:	f7fa fe1d 	bl	800013c <__udivsi3>
 8005502:	0003      	movs	r3, r0
 8005504:	0019      	movs	r1, r3
 8005506:	0020      	movs	r0, r4
 8005508:	f7fa fe18 	bl	800013c <__udivsi3>
 800550c:	0003      	movs	r3, r0
 800550e:	0018      	movs	r0, r3
 8005510:	f000 f8ef 	bl	80056f2 <HAL_SYSTICK_Config>
 8005514:	1e03      	subs	r3, r0, #0
 8005516:	d112      	bne.n	800553e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b03      	cmp	r3, #3
 800551c:	d80a      	bhi.n	8005534 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	2301      	movs	r3, #1
 8005522:	425b      	negs	r3, r3
 8005524:	2200      	movs	r2, #0
 8005526:	0018      	movs	r0, r3
 8005528:	f000 f8ce 	bl	80056c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800552c:	4b0e      	ldr	r3, [pc, #56]	@ (8005568 <HAL_InitTick+0x90>)
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e00d      	b.n	8005550 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8005534:	230f      	movs	r3, #15
 8005536:	18fb      	adds	r3, r7, r3
 8005538:	2201      	movs	r2, #1
 800553a:	701a      	strb	r2, [r3, #0]
 800553c:	e008      	b.n	8005550 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800553e:	230f      	movs	r3, #15
 8005540:	18fb      	adds	r3, r7, r3
 8005542:	2201      	movs	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	e003      	b.n	8005550 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005548:	230f      	movs	r3, #15
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	2201      	movs	r2, #1
 800554e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005550:	230f      	movs	r3, #15
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	781b      	ldrb	r3, [r3, #0]
}
 8005556:	0018      	movs	r0, r3
 8005558:	46bd      	mov	sp, r7
 800555a:	b005      	add	sp, #20
 800555c:	bd90      	pop	{r4, r7, pc}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	20000008 	.word	0x20000008
 8005564:	20000000 	.word	0x20000000
 8005568:	20000004 	.word	0x20000004

0800556c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005570:	4b05      	ldr	r3, [pc, #20]	@ (8005588 <HAL_IncTick+0x1c>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	001a      	movs	r2, r3
 8005576:	4b05      	ldr	r3, [pc, #20]	@ (800558c <HAL_IncTick+0x20>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	18d2      	adds	r2, r2, r3
 800557c:	4b03      	ldr	r3, [pc, #12]	@ (800558c <HAL_IncTick+0x20>)
 800557e:	601a      	str	r2, [r3, #0]
}
 8005580:	46c0      	nop			@ (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	20000008 	.word	0x20000008
 800558c:	200003b0 	.word	0x200003b0

08005590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	af00      	add	r7, sp, #0
  return uwTick;
 8005594:	4b02      	ldr	r3, [pc, #8]	@ (80055a0 <HAL_GetTick+0x10>)
 8005596:	681b      	ldr	r3, [r3, #0]
}
 8005598:	0018      	movs	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	46c0      	nop			@ (mov r8, r8)
 80055a0:	200003b0 	.word	0x200003b0

080055a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055a4:	b590      	push	{r4, r7, lr}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	0002      	movs	r2, r0
 80055ac:	6039      	str	r1, [r7, #0]
 80055ae:	1dfb      	adds	r3, r7, #7
 80055b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80055b2:	1dfb      	adds	r3, r7, #7
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80055b8:	d828      	bhi.n	800560c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005678 <__NVIC_SetPriority+0xd4>)
 80055bc:	1dfb      	adds	r3, r7, #7
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	b25b      	sxtb	r3, r3
 80055c2:	089b      	lsrs	r3, r3, #2
 80055c4:	33c0      	adds	r3, #192	@ 0xc0
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	589b      	ldr	r3, [r3, r2]
 80055ca:	1dfa      	adds	r2, r7, #7
 80055cc:	7812      	ldrb	r2, [r2, #0]
 80055ce:	0011      	movs	r1, r2
 80055d0:	2203      	movs	r2, #3
 80055d2:	400a      	ands	r2, r1
 80055d4:	00d2      	lsls	r2, r2, #3
 80055d6:	21ff      	movs	r1, #255	@ 0xff
 80055d8:	4091      	lsls	r1, r2
 80055da:	000a      	movs	r2, r1
 80055dc:	43d2      	mvns	r2, r2
 80055de:	401a      	ands	r2, r3
 80055e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	019b      	lsls	r3, r3, #6
 80055e6:	22ff      	movs	r2, #255	@ 0xff
 80055e8:	401a      	ands	r2, r3
 80055ea:	1dfb      	adds	r3, r7, #7
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	0018      	movs	r0, r3
 80055f0:	2303      	movs	r3, #3
 80055f2:	4003      	ands	r3, r0
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80055f8:	481f      	ldr	r0, [pc, #124]	@ (8005678 <__NVIC_SetPriority+0xd4>)
 80055fa:	1dfb      	adds	r3, r7, #7
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	089b      	lsrs	r3, r3, #2
 8005602:	430a      	orrs	r2, r1
 8005604:	33c0      	adds	r3, #192	@ 0xc0
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800560a:	e031      	b.n	8005670 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800560c:	4a1b      	ldr	r2, [pc, #108]	@ (800567c <__NVIC_SetPriority+0xd8>)
 800560e:	1dfb      	adds	r3, r7, #7
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	0019      	movs	r1, r3
 8005614:	230f      	movs	r3, #15
 8005616:	400b      	ands	r3, r1
 8005618:	3b08      	subs	r3, #8
 800561a:	089b      	lsrs	r3, r3, #2
 800561c:	3306      	adds	r3, #6
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	18d3      	adds	r3, r2, r3
 8005622:	3304      	adds	r3, #4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	1dfa      	adds	r2, r7, #7
 8005628:	7812      	ldrb	r2, [r2, #0]
 800562a:	0011      	movs	r1, r2
 800562c:	2203      	movs	r2, #3
 800562e:	400a      	ands	r2, r1
 8005630:	00d2      	lsls	r2, r2, #3
 8005632:	21ff      	movs	r1, #255	@ 0xff
 8005634:	4091      	lsls	r1, r2
 8005636:	000a      	movs	r2, r1
 8005638:	43d2      	mvns	r2, r2
 800563a:	401a      	ands	r2, r3
 800563c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	019b      	lsls	r3, r3, #6
 8005642:	22ff      	movs	r2, #255	@ 0xff
 8005644:	401a      	ands	r2, r3
 8005646:	1dfb      	adds	r3, r7, #7
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	0018      	movs	r0, r3
 800564c:	2303      	movs	r3, #3
 800564e:	4003      	ands	r3, r0
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005654:	4809      	ldr	r0, [pc, #36]	@ (800567c <__NVIC_SetPriority+0xd8>)
 8005656:	1dfb      	adds	r3, r7, #7
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	001c      	movs	r4, r3
 800565c:	230f      	movs	r3, #15
 800565e:	4023      	ands	r3, r4
 8005660:	3b08      	subs	r3, #8
 8005662:	089b      	lsrs	r3, r3, #2
 8005664:	430a      	orrs	r2, r1
 8005666:	3306      	adds	r3, #6
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	18c3      	adds	r3, r0, r3
 800566c:	3304      	adds	r3, #4
 800566e:	601a      	str	r2, [r3, #0]
}
 8005670:	46c0      	nop			@ (mov r8, r8)
 8005672:	46bd      	mov	sp, r7
 8005674:	b003      	add	sp, #12
 8005676:	bd90      	pop	{r4, r7, pc}
 8005678:	e000e100 	.word	0xe000e100
 800567c:	e000ed00 	.word	0xe000ed00

08005680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	1e5a      	subs	r2, r3, #1
 800568c:	2380      	movs	r3, #128	@ 0x80
 800568e:	045b      	lsls	r3, r3, #17
 8005690:	429a      	cmp	r2, r3
 8005692:	d301      	bcc.n	8005698 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005694:	2301      	movs	r3, #1
 8005696:	e010      	b.n	80056ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005698:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <SysTick_Config+0x44>)
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	3a01      	subs	r2, #1
 800569e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056a0:	2301      	movs	r3, #1
 80056a2:	425b      	negs	r3, r3
 80056a4:	2103      	movs	r1, #3
 80056a6:	0018      	movs	r0, r3
 80056a8:	f7ff ff7c 	bl	80055a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056ac:	4b05      	ldr	r3, [pc, #20]	@ (80056c4 <SysTick_Config+0x44>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056b2:	4b04      	ldr	r3, [pc, #16]	@ (80056c4 <SysTick_Config+0x44>)
 80056b4:	2207      	movs	r2, #7
 80056b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	0018      	movs	r0, r3
 80056bc:	46bd      	mov	sp, r7
 80056be:	b002      	add	sp, #8
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	46c0      	nop			@ (mov r8, r8)
 80056c4:	e000e010 	.word	0xe000e010

080056c8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	210f      	movs	r1, #15
 80056d4:	187b      	adds	r3, r7, r1
 80056d6:	1c02      	adds	r2, r0, #0
 80056d8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	187b      	adds	r3, r7, r1
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	b25b      	sxtb	r3, r3
 80056e2:	0011      	movs	r1, r2
 80056e4:	0018      	movs	r0, r3
 80056e6:	f7ff ff5d 	bl	80055a4 <__NVIC_SetPriority>
}
 80056ea:	46c0      	nop			@ (mov r8, r8)
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b004      	add	sp, #16
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b082      	sub	sp, #8
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7ff ffbf 	bl	8005680 <SysTick_Config>
 8005702:	0003      	movs	r3, r0
}
 8005704:	0018      	movs	r0, r3
 8005706:	46bd      	mov	sp, r7
 8005708:	b002      	add	sp, #8
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800571a:	e147      	b.n	80059ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2101      	movs	r1, #1
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4091      	lsls	r1, r2
 8005726:	000a      	movs	r2, r1
 8005728:	4013      	ands	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d100      	bne.n	8005734 <HAL_GPIO_Init+0x28>
 8005732:	e138      	b.n	80059a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2203      	movs	r2, #3
 800573a:	4013      	ands	r3, r2
 800573c:	2b01      	cmp	r3, #1
 800573e:	d005      	beq.n	800574c <HAL_GPIO_Init+0x40>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2203      	movs	r2, #3
 8005746:	4013      	ands	r3, r2
 8005748:	2b02      	cmp	r3, #2
 800574a:	d130      	bne.n	80057ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	2203      	movs	r2, #3
 8005758:	409a      	lsls	r2, r3
 800575a:	0013      	movs	r3, r2
 800575c:	43da      	mvns	r2, r3
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	4013      	ands	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	409a      	lsls	r2, r3
 800576e:	0013      	movs	r3, r2
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005782:	2201      	movs	r2, #1
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	409a      	lsls	r2, r3
 8005788:	0013      	movs	r3, r2
 800578a:	43da      	mvns	r2, r3
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	4013      	ands	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	091b      	lsrs	r3, r3, #4
 8005798:	2201      	movs	r2, #1
 800579a:	401a      	ands	r2, r3
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	409a      	lsls	r2, r3
 80057a0:	0013      	movs	r3, r2
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2203      	movs	r2, #3
 80057b4:	4013      	ands	r3, r2
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d017      	beq.n	80057ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	2203      	movs	r2, #3
 80057c6:	409a      	lsls	r2, r3
 80057c8:	0013      	movs	r3, r2
 80057ca:	43da      	mvns	r2, r3
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4013      	ands	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	409a      	lsls	r2, r3
 80057dc:	0013      	movs	r3, r2
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2203      	movs	r2, #3
 80057f0:	4013      	ands	r3, r2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d123      	bne.n	800583e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	08da      	lsrs	r2, r3, #3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3208      	adds	r2, #8
 80057fe:	0092      	lsls	r2, r2, #2
 8005800:	58d3      	ldr	r3, [r2, r3]
 8005802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	2207      	movs	r2, #7
 8005808:	4013      	ands	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	220f      	movs	r2, #15
 800580e:	409a      	lsls	r2, r3
 8005810:	0013      	movs	r3, r2
 8005812:	43da      	mvns	r2, r3
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	4013      	ands	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2107      	movs	r1, #7
 8005822:	400b      	ands	r3, r1
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	409a      	lsls	r2, r3
 8005828:	0013      	movs	r3, r2
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	08da      	lsrs	r2, r3, #3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3208      	adds	r2, #8
 8005838:	0092      	lsls	r2, r2, #2
 800583a:	6939      	ldr	r1, [r7, #16]
 800583c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	2203      	movs	r2, #3
 800584a:	409a      	lsls	r2, r3
 800584c:	0013      	movs	r3, r2
 800584e:	43da      	mvns	r2, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4013      	ands	r3, r2
 8005854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	2203      	movs	r2, #3
 800585c:	401a      	ands	r2, r3
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	409a      	lsls	r2, r3
 8005864:	0013      	movs	r3, r2
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	23c0      	movs	r3, #192	@ 0xc0
 8005878:	029b      	lsls	r3, r3, #10
 800587a:	4013      	ands	r3, r2
 800587c:	d100      	bne.n	8005880 <HAL_GPIO_Init+0x174>
 800587e:	e092      	b.n	80059a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005880:	4a50      	ldr	r2, [pc, #320]	@ (80059c4 <HAL_GPIO_Init+0x2b8>)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	089b      	lsrs	r3, r3, #2
 8005886:	3318      	adds	r3, #24
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	589b      	ldr	r3, [r3, r2]
 800588c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2203      	movs	r2, #3
 8005892:	4013      	ands	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	220f      	movs	r2, #15
 8005898:	409a      	lsls	r2, r3
 800589a:	0013      	movs	r3, r2
 800589c:	43da      	mvns	r2, r3
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	4013      	ands	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	23a0      	movs	r3, #160	@ 0xa0
 80058a8:	05db      	lsls	r3, r3, #23
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d013      	beq.n	80058d6 <HAL_GPIO_Init+0x1ca>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a45      	ldr	r2, [pc, #276]	@ (80059c8 <HAL_GPIO_Init+0x2bc>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00d      	beq.n	80058d2 <HAL_GPIO_Init+0x1c6>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a44      	ldr	r2, [pc, #272]	@ (80059cc <HAL_GPIO_Init+0x2c0>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <HAL_GPIO_Init+0x1c2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a43      	ldr	r2, [pc, #268]	@ (80059d0 <HAL_GPIO_Init+0x2c4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d101      	bne.n	80058ca <HAL_GPIO_Init+0x1be>
 80058c6:	2303      	movs	r3, #3
 80058c8:	e006      	b.n	80058d8 <HAL_GPIO_Init+0x1cc>
 80058ca:	2305      	movs	r3, #5
 80058cc:	e004      	b.n	80058d8 <HAL_GPIO_Init+0x1cc>
 80058ce:	2302      	movs	r3, #2
 80058d0:	e002      	b.n	80058d8 <HAL_GPIO_Init+0x1cc>
 80058d2:	2301      	movs	r3, #1
 80058d4:	e000      	b.n	80058d8 <HAL_GPIO_Init+0x1cc>
 80058d6:	2300      	movs	r3, #0
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	2103      	movs	r1, #3
 80058dc:	400a      	ands	r2, r1
 80058de:	00d2      	lsls	r2, r2, #3
 80058e0:	4093      	lsls	r3, r2
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80058e8:	4936      	ldr	r1, [pc, #216]	@ (80059c4 <HAL_GPIO_Init+0x2b8>)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	3318      	adds	r3, #24
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058f6:	4b33      	ldr	r3, [pc, #204]	@ (80059c4 <HAL_GPIO_Init+0x2b8>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	43da      	mvns	r2, r3
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4013      	ands	r3, r2
 8005904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	2380      	movs	r3, #128	@ 0x80
 800590c:	035b      	lsls	r3, r3, #13
 800590e:	4013      	ands	r3, r2
 8005910:	d003      	beq.n	800591a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800591a:	4b2a      	ldr	r3, [pc, #168]	@ (80059c4 <HAL_GPIO_Init+0x2b8>)
 800591c:	693a      	ldr	r2, [r7, #16]
 800591e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8005920:	4b28      	ldr	r3, [pc, #160]	@ (80059c4 <HAL_GPIO_Init+0x2b8>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	43da      	mvns	r2, r3
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4013      	ands	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	2380      	movs	r3, #128	@ 0x80
 8005936:	039b      	lsls	r3, r3, #14
 8005938:	4013      	ands	r3, r2
 800593a:	d003      	beq.n	8005944 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005944:	4b1f      	ldr	r3, [pc, #124]	@ (80059c4 <HAL_GPIO_Init+0x2b8>)
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800594a:	4a1e      	ldr	r2, [pc, #120]	@ (80059c4 <HAL_GPIO_Init+0x2b8>)
 800594c:	2384      	movs	r3, #132	@ 0x84
 800594e:	58d3      	ldr	r3, [r2, r3]
 8005950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	43da      	mvns	r2, r3
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	4013      	ands	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	2380      	movs	r3, #128	@ 0x80
 8005962:	029b      	lsls	r3, r3, #10
 8005964:	4013      	ands	r3, r2
 8005966:	d003      	beq.n	8005970 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005970:	4914      	ldr	r1, [pc, #80]	@ (80059c4 <HAL_GPIO_Init+0x2b8>)
 8005972:	2284      	movs	r2, #132	@ 0x84
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8005978:	4a12      	ldr	r2, [pc, #72]	@ (80059c4 <HAL_GPIO_Init+0x2b8>)
 800597a:	2380      	movs	r3, #128	@ 0x80
 800597c:	58d3      	ldr	r3, [r2, r3]
 800597e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	43da      	mvns	r2, r3
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4013      	ands	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	2380      	movs	r3, #128	@ 0x80
 8005990:	025b      	lsls	r3, r3, #9
 8005992:	4013      	ands	r3, r2
 8005994:	d003      	beq.n	800599e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4313      	orrs	r3, r2
 800599c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800599e:	4909      	ldr	r1, [pc, #36]	@ (80059c4 <HAL_GPIO_Init+0x2b8>)
 80059a0:	2280      	movs	r2, #128	@ 0x80
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	3301      	adds	r3, #1
 80059aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	40da      	lsrs	r2, r3
 80059b4:	1e13      	subs	r3, r2, #0
 80059b6:	d000      	beq.n	80059ba <HAL_GPIO_Init+0x2ae>
 80059b8:	e6b0      	b.n	800571c <HAL_GPIO_Init+0x10>
  }
}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	46c0      	nop			@ (mov r8, r8)
 80059be:	46bd      	mov	sp, r7
 80059c0:	b006      	add	sp, #24
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40021800 	.word	0x40021800
 80059c8:	50000400 	.word	0x50000400
 80059cc:	50000800 	.word	0x50000800
 80059d0:	50000c00 	.word	0x50000c00

080059d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	0008      	movs	r0, r1
 80059de:	0011      	movs	r1, r2
 80059e0:	1cbb      	adds	r3, r7, #2
 80059e2:	1c02      	adds	r2, r0, #0
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	1c7b      	adds	r3, r7, #1
 80059e8:	1c0a      	adds	r2, r1, #0
 80059ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059ec:	1c7b      	adds	r3, r7, #1
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d004      	beq.n	80059fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059f4:	1cbb      	adds	r3, r7, #2
 80059f6:	881a      	ldrh	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059fc:	e003      	b.n	8005a06 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059fe:	1cbb      	adds	r3, r7, #2
 8005a00:	881a      	ldrh	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005a06:	46c0      	nop			@ (mov r8, r8)
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	b002      	add	sp, #8
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e08f      	b.n	8005b42 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2241      	movs	r2, #65	@ 0x41
 8005a26:	5c9b      	ldrb	r3, [r3, r2]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d107      	bne.n	8005a3e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2240      	movs	r2, #64	@ 0x40
 8005a32:	2100      	movs	r1, #0
 8005a34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f7ff fb19 	bl	8005070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2241      	movs	r2, #65	@ 0x41
 8005a42:	2124      	movs	r1, #36	@ 0x24
 8005a44:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2101      	movs	r1, #1
 8005a52:	438a      	bics	r2, r1
 8005a54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685a      	ldr	r2, [r3, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	493b      	ldr	r1, [pc, #236]	@ (8005b4c <HAL_I2C_Init+0x13c>)
 8005a60:	400a      	ands	r2, r1
 8005a62:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4938      	ldr	r1, [pc, #224]	@ (8005b50 <HAL_I2C_Init+0x140>)
 8005a70:	400a      	ands	r2, r1
 8005a72:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d108      	bne.n	8005a8e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2180      	movs	r1, #128	@ 0x80
 8005a86:	0209      	lsls	r1, r1, #8
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	609a      	str	r2, [r3, #8]
 8005a8c:	e007      	b.n	8005a9e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	689a      	ldr	r2, [r3, #8]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2184      	movs	r1, #132	@ 0x84
 8005a98:	0209      	lsls	r1, r1, #8
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d109      	bne.n	8005aba <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2180      	movs	r1, #128	@ 0x80
 8005ab2:	0109      	lsls	r1, r1, #4
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
 8005ab8:	e007      	b.n	8005aca <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4923      	ldr	r1, [pc, #140]	@ (8005b54 <HAL_I2C_Init+0x144>)
 8005ac6:	400a      	ands	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4920      	ldr	r1, [pc, #128]	@ (8005b58 <HAL_I2C_Init+0x148>)
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	491a      	ldr	r1, [pc, #104]	@ (8005b50 <HAL_I2C_Init+0x140>)
 8005ae6:	400a      	ands	r2, r1
 8005ae8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69d9      	ldr	r1, [r3, #28]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1a      	ldr	r2, [r3, #32]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2101      	movs	r1, #1
 8005b20:	430a      	orrs	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2241      	movs	r2, #65	@ 0x41
 8005b2e:	2120      	movs	r1, #32
 8005b30:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2242      	movs	r2, #66	@ 0x42
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b002      	add	sp, #8
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	46c0      	nop			@ (mov r8, r8)
 8005b4c:	f0ffffff 	.word	0xf0ffffff
 8005b50:	ffff7fff 	.word	0xffff7fff
 8005b54:	fffff7ff 	.word	0xfffff7ff
 8005b58:	02008000 	.word	0x02008000

08005b5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b5c:	b590      	push	{r4, r7, lr}
 8005b5e:	b089      	sub	sp, #36	@ 0x24
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	000c      	movs	r4, r1
 8005b66:	0010      	movs	r0, r2
 8005b68:	0019      	movs	r1, r3
 8005b6a:	230a      	movs	r3, #10
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	1c22      	adds	r2, r4, #0
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	2308      	movs	r3, #8
 8005b74:	18fb      	adds	r3, r7, r3
 8005b76:	1c02      	adds	r2, r0, #0
 8005b78:	801a      	strh	r2, [r3, #0]
 8005b7a:	1dbb      	adds	r3, r7, #6
 8005b7c:	1c0a      	adds	r2, r1, #0
 8005b7e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2241      	movs	r2, #65	@ 0x41
 8005b84:	5c9b      	ldrb	r3, [r3, r2]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d000      	beq.n	8005b8e <HAL_I2C_Mem_Write+0x32>
 8005b8c:	e10c      	b.n	8005da8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <HAL_I2C_Mem_Write+0x42>
 8005b94:	232c      	movs	r3, #44	@ 0x2c
 8005b96:	18fb      	adds	r3, r7, r3
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d105      	bne.n	8005baa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2280      	movs	r2, #128	@ 0x80
 8005ba2:	0092      	lsls	r2, r2, #2
 8005ba4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e0ff      	b.n	8005daa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2240      	movs	r2, #64	@ 0x40
 8005bae:	5c9b      	ldrb	r3, [r3, r2]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_I2C_Mem_Write+0x5c>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e0f8      	b.n	8005daa <HAL_I2C_Mem_Write+0x24e>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2240      	movs	r2, #64	@ 0x40
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bc0:	f7ff fce6 	bl	8005590 <HAL_GetTick>
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bc8:	2380      	movs	r3, #128	@ 0x80
 8005bca:	0219      	lsls	r1, r3, #8
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	2319      	movs	r3, #25
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f000 fc07 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8005bda:	1e03      	subs	r3, r0, #0
 8005bdc:	d001      	beq.n	8005be2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e0e3      	b.n	8005daa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2241      	movs	r2, #65	@ 0x41
 8005be6:	2121      	movs	r1, #33	@ 0x21
 8005be8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2242      	movs	r2, #66	@ 0x42
 8005bee:	2140      	movs	r1, #64	@ 0x40
 8005bf0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	222c      	movs	r2, #44	@ 0x2c
 8005c02:	18ba      	adds	r2, r7, r2
 8005c04:	8812      	ldrh	r2, [r2, #0]
 8005c06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c0e:	1dbb      	adds	r3, r7, #6
 8005c10:	881c      	ldrh	r4, [r3, #0]
 8005c12:	2308      	movs	r3, #8
 8005c14:	18fb      	adds	r3, r7, r3
 8005c16:	881a      	ldrh	r2, [r3, #0]
 8005c18:	230a      	movs	r3, #10
 8005c1a:	18fb      	adds	r3, r7, r3
 8005c1c:	8819      	ldrh	r1, [r3, #0]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	9301      	str	r3, [sp, #4]
 8005c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	0023      	movs	r3, r4
 8005c2a:	f000 faf5 	bl	8006218 <I2C_RequestMemoryWrite>
 8005c2e:	1e03      	subs	r3, r0, #0
 8005c30:	d005      	beq.n	8005c3e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2240      	movs	r2, #64	@ 0x40
 8005c36:	2100      	movs	r1, #0
 8005c38:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e0b5      	b.n	8005daa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2bff      	cmp	r3, #255	@ 0xff
 8005c46:	d911      	bls.n	8005c6c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	22ff      	movs	r2, #255	@ 0xff
 8005c4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	2380      	movs	r3, #128	@ 0x80
 8005c56:	045c      	lsls	r4, r3, #17
 8005c58:	230a      	movs	r3, #10
 8005c5a:	18fb      	adds	r3, r7, r3
 8005c5c:	8819      	ldrh	r1, [r3, #0]
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	2300      	movs	r3, #0
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	0023      	movs	r3, r4
 8005c66:	f000 fd99 	bl	800679c <I2C_TransferConfig>
 8005c6a:	e012      	b.n	8005c92 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	2380      	movs	r3, #128	@ 0x80
 8005c7e:	049c      	lsls	r4, r3, #18
 8005c80:	230a      	movs	r3, #10
 8005c82:	18fb      	adds	r3, r7, r3
 8005c84:	8819      	ldrh	r1, [r3, #0]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	0023      	movs	r3, r4
 8005c8e:	f000 fd85 	bl	800679c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f000 fbfd 	bl	8006498 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c9e:	1e03      	subs	r3, r0, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e081      	b.n	8005daa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	781a      	ldrb	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d03a      	beq.n	8005d56 <HAL_I2C_Mem_Write+0x1fa>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d136      	bne.n	8005d56 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	0013      	movs	r3, r2
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2180      	movs	r1, #128	@ 0x80
 8005cf6:	f000 fb77 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8005cfa:	1e03      	subs	r3, r0, #0
 8005cfc:	d001      	beq.n	8005d02 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e053      	b.n	8005daa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2bff      	cmp	r3, #255	@ 0xff
 8005d0a:	d911      	bls.n	8005d30 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	22ff      	movs	r2, #255	@ 0xff
 8005d10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	2380      	movs	r3, #128	@ 0x80
 8005d1a:	045c      	lsls	r4, r3, #17
 8005d1c:	230a      	movs	r3, #10
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	8819      	ldrh	r1, [r3, #0]
 8005d22:	68f8      	ldr	r0, [r7, #12]
 8005d24:	2300      	movs	r3, #0
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	0023      	movs	r3, r4
 8005d2a:	f000 fd37 	bl	800679c <I2C_TransferConfig>
 8005d2e:	e012      	b.n	8005d56 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	2380      	movs	r3, #128	@ 0x80
 8005d42:	049c      	lsls	r4, r3, #18
 8005d44:	230a      	movs	r3, #10
 8005d46:	18fb      	adds	r3, r7, r3
 8005d48:	8819      	ldrh	r1, [r3, #0]
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	0023      	movs	r3, r4
 8005d52:	f000 fd23 	bl	800679c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d198      	bne.n	8005c92 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	0018      	movs	r0, r3
 8005d68:	f000 fbdc 	bl	8006524 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d6c:	1e03      	subs	r3, r0, #0
 8005d6e:	d001      	beq.n	8005d74 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e01a      	b.n	8005daa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	490b      	ldr	r1, [pc, #44]	@ (8005db4 <HAL_I2C_Mem_Write+0x258>)
 8005d88:	400a      	ands	r2, r1
 8005d8a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2241      	movs	r2, #65	@ 0x41
 8005d90:	2120      	movs	r1, #32
 8005d92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2242      	movs	r2, #66	@ 0x42
 8005d98:	2100      	movs	r1, #0
 8005d9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2240      	movs	r2, #64	@ 0x40
 8005da0:	2100      	movs	r1, #0
 8005da2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	e000      	b.n	8005daa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8005da8:	2302      	movs	r3, #2
  }
}
 8005daa:	0018      	movs	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	b007      	add	sp, #28
 8005db0:	bd90      	pop	{r4, r7, pc}
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	fe00e800 	.word	0xfe00e800

08005db8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005db8:	b590      	push	{r4, r7, lr}
 8005dba:	b089      	sub	sp, #36	@ 0x24
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	000c      	movs	r4, r1
 8005dc2:	0010      	movs	r0, r2
 8005dc4:	0019      	movs	r1, r3
 8005dc6:	230a      	movs	r3, #10
 8005dc8:	18fb      	adds	r3, r7, r3
 8005dca:	1c22      	adds	r2, r4, #0
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	2308      	movs	r3, #8
 8005dd0:	18fb      	adds	r3, r7, r3
 8005dd2:	1c02      	adds	r2, r0, #0
 8005dd4:	801a      	strh	r2, [r3, #0]
 8005dd6:	1dbb      	adds	r3, r7, #6
 8005dd8:	1c0a      	adds	r2, r1, #0
 8005dda:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2241      	movs	r2, #65	@ 0x41
 8005de0:	5c9b      	ldrb	r3, [r3, r2]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b20      	cmp	r3, #32
 8005de6:	d000      	beq.n	8005dea <HAL_I2C_Mem_Read+0x32>
 8005de8:	e110      	b.n	800600c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d004      	beq.n	8005dfa <HAL_I2C_Mem_Read+0x42>
 8005df0:	232c      	movs	r3, #44	@ 0x2c
 8005df2:	18fb      	adds	r3, r7, r3
 8005df4:	881b      	ldrh	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d105      	bne.n	8005e06 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2280      	movs	r2, #128	@ 0x80
 8005dfe:	0092      	lsls	r2, r2, #2
 8005e00:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e103      	b.n	800600e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2240      	movs	r2, #64	@ 0x40
 8005e0a:	5c9b      	ldrb	r3, [r3, r2]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_I2C_Mem_Read+0x5c>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e0fc      	b.n	800600e <HAL_I2C_Mem_Read+0x256>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2240      	movs	r2, #64	@ 0x40
 8005e18:	2101      	movs	r1, #1
 8005e1a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e1c:	f7ff fbb8 	bl	8005590 <HAL_GetTick>
 8005e20:	0003      	movs	r3, r0
 8005e22:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e24:	2380      	movs	r3, #128	@ 0x80
 8005e26:	0219      	lsls	r1, r3, #8
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	2319      	movs	r3, #25
 8005e30:	2201      	movs	r2, #1
 8005e32:	f000 fad9 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8005e36:	1e03      	subs	r3, r0, #0
 8005e38:	d001      	beq.n	8005e3e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e0e7      	b.n	800600e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2241      	movs	r2, #65	@ 0x41
 8005e42:	2122      	movs	r1, #34	@ 0x22
 8005e44:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2242      	movs	r2, #66	@ 0x42
 8005e4a:	2140      	movs	r1, #64	@ 0x40
 8005e4c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	222c      	movs	r2, #44	@ 0x2c
 8005e5e:	18ba      	adds	r2, r7, r2
 8005e60:	8812      	ldrh	r2, [r2, #0]
 8005e62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e6a:	1dbb      	adds	r3, r7, #6
 8005e6c:	881c      	ldrh	r4, [r3, #0]
 8005e6e:	2308      	movs	r3, #8
 8005e70:	18fb      	adds	r3, r7, r3
 8005e72:	881a      	ldrh	r2, [r3, #0]
 8005e74:	230a      	movs	r3, #10
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	8819      	ldrh	r1, [r3, #0]
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	0023      	movs	r3, r4
 8005e86:	f000 fa2b 	bl	80062e0 <I2C_RequestMemoryRead>
 8005e8a:	1e03      	subs	r3, r0, #0
 8005e8c:	d005      	beq.n	8005e9a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2240      	movs	r2, #64	@ 0x40
 8005e92:	2100      	movs	r1, #0
 8005e94:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e0b9      	b.n	800600e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	2bff      	cmp	r3, #255	@ 0xff
 8005ea2:	d911      	bls.n	8005ec8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	22ff      	movs	r2, #255	@ 0xff
 8005ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	2380      	movs	r3, #128	@ 0x80
 8005eb2:	045c      	lsls	r4, r3, #17
 8005eb4:	230a      	movs	r3, #10
 8005eb6:	18fb      	adds	r3, r7, r3
 8005eb8:	8819      	ldrh	r1, [r3, #0]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	4b56      	ldr	r3, [pc, #344]	@ (8006018 <HAL_I2C_Mem_Read+0x260>)
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	0023      	movs	r3, r4
 8005ec2:	f000 fc6b 	bl	800679c <I2C_TransferConfig>
 8005ec6:	e012      	b.n	8005eee <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	2380      	movs	r3, #128	@ 0x80
 8005eda:	049c      	lsls	r4, r3, #18
 8005edc:	230a      	movs	r3, #10
 8005ede:	18fb      	adds	r3, r7, r3
 8005ee0:	8819      	ldrh	r1, [r3, #0]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	4b4c      	ldr	r3, [pc, #304]	@ (8006018 <HAL_I2C_Mem_Read+0x260>)
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	0023      	movs	r3, r4
 8005eea:	f000 fc57 	bl	800679c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	0013      	movs	r3, r2
 8005ef8:	2200      	movs	r2, #0
 8005efa:	2104      	movs	r1, #4
 8005efc:	f000 fa74 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8005f00:	1e03      	subs	r3, r0, #0
 8005f02:	d001      	beq.n	8005f08 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e082      	b.n	800600e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	3b01      	subs	r3, #1
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d03a      	beq.n	8005fba <HAL_I2C_Mem_Read+0x202>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d136      	bne.n	8005fba <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	0013      	movs	r3, r2
 8005f56:	2200      	movs	r2, #0
 8005f58:	2180      	movs	r1, #128	@ 0x80
 8005f5a:	f000 fa45 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8005f5e:	1e03      	subs	r3, r0, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e053      	b.n	800600e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2bff      	cmp	r3, #255	@ 0xff
 8005f6e:	d911      	bls.n	8005f94 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	22ff      	movs	r2, #255	@ 0xff
 8005f74:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	2380      	movs	r3, #128	@ 0x80
 8005f7e:	045c      	lsls	r4, r3, #17
 8005f80:	230a      	movs	r3, #10
 8005f82:	18fb      	adds	r3, r7, r3
 8005f84:	8819      	ldrh	r1, [r3, #0]
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	0023      	movs	r3, r4
 8005f8e:	f000 fc05 	bl	800679c <I2C_TransferConfig>
 8005f92:	e012      	b.n	8005fba <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	2380      	movs	r3, #128	@ 0x80
 8005fa6:	049c      	lsls	r4, r3, #18
 8005fa8:	230a      	movs	r3, #10
 8005faa:	18fb      	adds	r3, r7, r3
 8005fac:	8819      	ldrh	r1, [r3, #0]
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	0023      	movs	r3, r4
 8005fb6:	f000 fbf1 	bl	800679c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d194      	bne.n	8005eee <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f000 faaa 	bl	8006524 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fd0:	1e03      	subs	r3, r0, #0
 8005fd2:	d001      	beq.n	8005fd8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e01a      	b.n	800600e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	490c      	ldr	r1, [pc, #48]	@ (800601c <HAL_I2C_Mem_Read+0x264>)
 8005fec:	400a      	ands	r2, r1
 8005fee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2241      	movs	r2, #65	@ 0x41
 8005ff4:	2120      	movs	r1, #32
 8005ff6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2242      	movs	r2, #66	@ 0x42
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2240      	movs	r2, #64	@ 0x40
 8006004:	2100      	movs	r1, #0
 8006006:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	e000      	b.n	800600e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800600c:	2302      	movs	r3, #2
  }
}
 800600e:	0018      	movs	r0, r3
 8006010:	46bd      	mov	sp, r7
 8006012:	b007      	add	sp, #28
 8006014:	bd90      	pop	{r4, r7, pc}
 8006016:	46c0      	nop			@ (mov r8, r8)
 8006018:	80002400 	.word	0x80002400
 800601c:	fe00e800 	.word	0xfe00e800

08006020 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08a      	sub	sp, #40	@ 0x28
 8006024:	af02      	add	r7, sp, #8
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	607a      	str	r2, [r7, #4]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	230a      	movs	r3, #10
 800602e:	18fb      	adds	r3, r7, r3
 8006030:	1c0a      	adds	r2, r1, #0
 8006032:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2241      	movs	r2, #65	@ 0x41
 800603c:	5c9b      	ldrb	r3, [r3, r2]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b20      	cmp	r3, #32
 8006042:	d000      	beq.n	8006046 <HAL_I2C_IsDeviceReady+0x26>
 8006044:	e0df      	b.n	8006206 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699a      	ldr	r2, [r3, #24]
 800604c:	2380      	movs	r3, #128	@ 0x80
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	401a      	ands	r2, r3
 8006052:	2380      	movs	r3, #128	@ 0x80
 8006054:	021b      	lsls	r3, r3, #8
 8006056:	429a      	cmp	r2, r3
 8006058:	d101      	bne.n	800605e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800605a:	2302      	movs	r3, #2
 800605c:	e0d4      	b.n	8006208 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2240      	movs	r2, #64	@ 0x40
 8006062:	5c9b      	ldrb	r3, [r3, r2]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <HAL_I2C_IsDeviceReady+0x4c>
 8006068:	2302      	movs	r3, #2
 800606a:	e0cd      	b.n	8006208 <HAL_I2C_IsDeviceReady+0x1e8>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2240      	movs	r2, #64	@ 0x40
 8006070:	2101      	movs	r1, #1
 8006072:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2241      	movs	r2, #65	@ 0x41
 8006078:	2124      	movs	r1, #36	@ 0x24
 800607a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d107      	bne.n	800609a <HAL_I2C_IsDeviceReady+0x7a>
 800608a:	230a      	movs	r3, #10
 800608c:	18fb      	adds	r3, r7, r3
 800608e:	881b      	ldrh	r3, [r3, #0]
 8006090:	059b      	lsls	r3, r3, #22
 8006092:	0d9b      	lsrs	r3, r3, #22
 8006094:	4a5e      	ldr	r2, [pc, #376]	@ (8006210 <HAL_I2C_IsDeviceReady+0x1f0>)
 8006096:	431a      	orrs	r2, r3
 8006098:	e006      	b.n	80060a8 <HAL_I2C_IsDeviceReady+0x88>
 800609a:	230a      	movs	r3, #10
 800609c:	18fb      	adds	r3, r7, r3
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	059b      	lsls	r3, r3, #22
 80060a2:	0d9b      	lsrs	r3, r3, #22
 80060a4:	4a5b      	ldr	r2, [pc, #364]	@ (8006214 <HAL_I2C_IsDeviceReady+0x1f4>)
 80060a6:	431a      	orrs	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80060ae:	f7ff fa6f 	bl	8005590 <HAL_GetTick>
 80060b2:	0003      	movs	r3, r0
 80060b4:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	2220      	movs	r2, #32
 80060be:	4013      	ands	r3, r2
 80060c0:	3b20      	subs	r3, #32
 80060c2:	425a      	negs	r2, r3
 80060c4:	4153      	adcs	r3, r2
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	231f      	movs	r3, #31
 80060ca:	18fb      	adds	r3, r7, r3
 80060cc:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	2210      	movs	r2, #16
 80060d6:	4013      	ands	r3, r2
 80060d8:	3b10      	subs	r3, #16
 80060da:	425a      	negs	r2, r3
 80060dc:	4153      	adcs	r3, r2
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	231e      	movs	r3, #30
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80060e6:	e035      	b.n	8006154 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	3301      	adds	r3, #1
 80060ec:	d01a      	beq.n	8006124 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060ee:	f7ff fa4f 	bl	8005590 <HAL_GetTick>
 80060f2:	0002      	movs	r2, r0
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d302      	bcc.n	8006104 <HAL_I2C_IsDeviceReady+0xe4>
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10f      	bne.n	8006124 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2241      	movs	r2, #65	@ 0x41
 8006108:	2120      	movs	r1, #32
 800610a:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006110:	2220      	movs	r2, #32
 8006112:	431a      	orrs	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2240      	movs	r2, #64	@ 0x40
 800611c:	2100      	movs	r1, #0
 800611e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e071      	b.n	8006208 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	2220      	movs	r2, #32
 800612c:	4013      	ands	r3, r2
 800612e:	3b20      	subs	r3, #32
 8006130:	425a      	negs	r2, r3
 8006132:	4153      	adcs	r3, r2
 8006134:	b2da      	uxtb	r2, r3
 8006136:	231f      	movs	r3, #31
 8006138:	18fb      	adds	r3, r7, r3
 800613a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	2210      	movs	r2, #16
 8006144:	4013      	ands	r3, r2
 8006146:	3b10      	subs	r3, #16
 8006148:	425a      	negs	r2, r3
 800614a:	4153      	adcs	r3, r2
 800614c:	b2da      	uxtb	r2, r3
 800614e:	231e      	movs	r3, #30
 8006150:	18fb      	adds	r3, r7, r3
 8006152:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8006154:	231f      	movs	r3, #31
 8006156:	18fb      	adds	r3, r7, r3
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d104      	bne.n	8006168 <HAL_I2C_IsDeviceReady+0x148>
 800615e:	231e      	movs	r3, #30
 8006160:	18fb      	adds	r3, r7, r3
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0bf      	beq.n	80060e8 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	2210      	movs	r2, #16
 8006170:	4013      	ands	r3, r2
 8006172:	2b10      	cmp	r3, #16
 8006174:	d01a      	beq.n	80061ac <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	0013      	movs	r3, r2
 8006180:	2200      	movs	r2, #0
 8006182:	2120      	movs	r1, #32
 8006184:	f000 f930 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 8006188:	1e03      	subs	r3, r0, #0
 800618a:	d001      	beq.n	8006190 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e03b      	b.n	8006208 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2220      	movs	r2, #32
 8006196:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2241      	movs	r2, #65	@ 0x41
 800619c:	2120      	movs	r1, #32
 800619e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2240      	movs	r2, #64	@ 0x40
 80061a4:	2100      	movs	r1, #0
 80061a6:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	e02d      	b.n	8006208 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	0013      	movs	r3, r2
 80061b6:	2200      	movs	r2, #0
 80061b8:	2120      	movs	r1, #32
 80061ba:	f000 f915 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 80061be:	1e03      	subs	r3, r0, #0
 80061c0:	d001      	beq.n	80061c6 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e020      	b.n	8006208 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2210      	movs	r2, #16
 80061cc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2220      	movs	r2, #32
 80061d4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	3301      	adds	r3, #1
 80061da:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d900      	bls.n	80061e6 <HAL_I2C_IsDeviceReady+0x1c6>
 80061e4:	e74d      	b.n	8006082 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2241      	movs	r2, #65	@ 0x41
 80061ea:	2120      	movs	r1, #32
 80061ec:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f2:	2220      	movs	r2, #32
 80061f4:	431a      	orrs	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2240      	movs	r2, #64	@ 0x40
 80061fe:	2100      	movs	r1, #0
 8006200:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e000      	b.n	8006208 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8006206:	2302      	movs	r3, #2
  }
}
 8006208:	0018      	movs	r0, r3
 800620a:	46bd      	mov	sp, r7
 800620c:	b008      	add	sp, #32
 800620e:	bd80      	pop	{r7, pc}
 8006210:	02002000 	.word	0x02002000
 8006214:	02002800 	.word	0x02002800

08006218 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006218:	b5b0      	push	{r4, r5, r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	000c      	movs	r4, r1
 8006222:	0010      	movs	r0, r2
 8006224:	0019      	movs	r1, r3
 8006226:	250a      	movs	r5, #10
 8006228:	197b      	adds	r3, r7, r5
 800622a:	1c22      	adds	r2, r4, #0
 800622c:	801a      	strh	r2, [r3, #0]
 800622e:	2308      	movs	r3, #8
 8006230:	18fb      	adds	r3, r7, r3
 8006232:	1c02      	adds	r2, r0, #0
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	1dbb      	adds	r3, r7, #6
 8006238:	1c0a      	adds	r2, r1, #0
 800623a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800623c:	1dbb      	adds	r3, r7, #6
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b2da      	uxtb	r2, r3
 8006242:	2380      	movs	r3, #128	@ 0x80
 8006244:	045c      	lsls	r4, r3, #17
 8006246:	197b      	adds	r3, r7, r5
 8006248:	8819      	ldrh	r1, [r3, #0]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	4b23      	ldr	r3, [pc, #140]	@ (80062dc <I2C_RequestMemoryWrite+0xc4>)
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	0023      	movs	r3, r4
 8006252:	f000 faa3 	bl	800679c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006258:	6a39      	ldr	r1, [r7, #32]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	0018      	movs	r0, r3
 800625e:	f000 f91b 	bl	8006498 <I2C_WaitOnTXISFlagUntilTimeout>
 8006262:	1e03      	subs	r3, r0, #0
 8006264:	d001      	beq.n	800626a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e033      	b.n	80062d2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800626a:	1dbb      	adds	r3, r7, #6
 800626c:	881b      	ldrh	r3, [r3, #0]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d107      	bne.n	8006282 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006272:	2308      	movs	r3, #8
 8006274:	18fb      	adds	r3, r7, r3
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	b2da      	uxtb	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006280:	e019      	b.n	80062b6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006282:	2308      	movs	r3, #8
 8006284:	18fb      	adds	r3, r7, r3
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	0a1b      	lsrs	r3, r3, #8
 800628a:	b29b      	uxth	r3, r3
 800628c:	b2da      	uxtb	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006294:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006296:	6a39      	ldr	r1, [r7, #32]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	0018      	movs	r0, r3
 800629c:	f000 f8fc 	bl	8006498 <I2C_WaitOnTXISFlagUntilTimeout>
 80062a0:	1e03      	subs	r3, r0, #0
 80062a2:	d001      	beq.n	80062a8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e014      	b.n	80062d2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062a8:	2308      	movs	r3, #8
 80062aa:	18fb      	adds	r3, r7, r3
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80062b6:	6a3a      	ldr	r2, [r7, #32]
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	0013      	movs	r3, r2
 80062c0:	2200      	movs	r2, #0
 80062c2:	2180      	movs	r1, #128	@ 0x80
 80062c4:	f000 f890 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 80062c8:	1e03      	subs	r3, r0, #0
 80062ca:	d001      	beq.n	80062d0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	0018      	movs	r0, r3
 80062d4:	46bd      	mov	sp, r7
 80062d6:	b004      	add	sp, #16
 80062d8:	bdb0      	pop	{r4, r5, r7, pc}
 80062da:	46c0      	nop			@ (mov r8, r8)
 80062dc:	80002000 	.word	0x80002000

080062e0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80062e0:	b5b0      	push	{r4, r5, r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	000c      	movs	r4, r1
 80062ea:	0010      	movs	r0, r2
 80062ec:	0019      	movs	r1, r3
 80062ee:	250a      	movs	r5, #10
 80062f0:	197b      	adds	r3, r7, r5
 80062f2:	1c22      	adds	r2, r4, #0
 80062f4:	801a      	strh	r2, [r3, #0]
 80062f6:	2308      	movs	r3, #8
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	1c02      	adds	r2, r0, #0
 80062fc:	801a      	strh	r2, [r3, #0]
 80062fe:	1dbb      	adds	r3, r7, #6
 8006300:	1c0a      	adds	r2, r1, #0
 8006302:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006304:	1dbb      	adds	r3, r7, #6
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b2da      	uxtb	r2, r3
 800630a:	197b      	adds	r3, r7, r5
 800630c:	8819      	ldrh	r1, [r3, #0]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	4b23      	ldr	r3, [pc, #140]	@ (80063a0 <I2C_RequestMemoryRead+0xc0>)
 8006312:	9300      	str	r3, [sp, #0]
 8006314:	2300      	movs	r3, #0
 8006316:	f000 fa41 	bl	800679c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800631a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800631c:	6a39      	ldr	r1, [r7, #32]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	0018      	movs	r0, r3
 8006322:	f000 f8b9 	bl	8006498 <I2C_WaitOnTXISFlagUntilTimeout>
 8006326:	1e03      	subs	r3, r0, #0
 8006328:	d001      	beq.n	800632e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e033      	b.n	8006396 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800632e:	1dbb      	adds	r3, r7, #6
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d107      	bne.n	8006346 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006336:	2308      	movs	r3, #8
 8006338:	18fb      	adds	r3, r7, r3
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	629a      	str	r2, [r3, #40]	@ 0x28
 8006344:	e019      	b.n	800637a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006346:	2308      	movs	r3, #8
 8006348:	18fb      	adds	r3, r7, r3
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	0a1b      	lsrs	r3, r3, #8
 800634e:	b29b      	uxth	r3, r3
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800635a:	6a39      	ldr	r1, [r7, #32]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	0018      	movs	r0, r3
 8006360:	f000 f89a 	bl	8006498 <I2C_WaitOnTXISFlagUntilTimeout>
 8006364:	1e03      	subs	r3, r0, #0
 8006366:	d001      	beq.n	800636c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e014      	b.n	8006396 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800636c:	2308      	movs	r3, #8
 800636e:	18fb      	adds	r3, r7, r3
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b2da      	uxtb	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800637a:	6a3a      	ldr	r2, [r7, #32]
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	0013      	movs	r3, r2
 8006384:	2200      	movs	r2, #0
 8006386:	2140      	movs	r1, #64	@ 0x40
 8006388:	f000 f82e 	bl	80063e8 <I2C_WaitOnFlagUntilTimeout>
 800638c:	1e03      	subs	r3, r0, #0
 800638e:	d001      	beq.n	8006394 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e000      	b.n	8006396 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	0018      	movs	r0, r3
 8006398:	46bd      	mov	sp, r7
 800639a:	b004      	add	sp, #16
 800639c:	bdb0      	pop	{r4, r5, r7, pc}
 800639e:	46c0      	nop			@ (mov r8, r8)
 80063a0:	80002000 	.word	0x80002000

080063a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	2202      	movs	r2, #2
 80063b4:	4013      	ands	r3, r2
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d103      	bne.n	80063c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2200      	movs	r2, #0
 80063c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	2201      	movs	r2, #1
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d007      	beq.n	80063e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	699a      	ldr	r2, [r3, #24]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2101      	movs	r1, #1
 80063dc:	430a      	orrs	r2, r1
 80063de:	619a      	str	r2, [r3, #24]
  }
}
 80063e0:	46c0      	nop			@ (mov r8, r8)
 80063e2:	46bd      	mov	sp, r7
 80063e4:	b002      	add	sp, #8
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	1dfb      	adds	r3, r7, #7
 80063f6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063f8:	e03a      	b.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	0018      	movs	r0, r3
 8006402:	f000 f8d3 	bl	80065ac <I2C_IsErrorOccurred>
 8006406:	1e03      	subs	r3, r0, #0
 8006408:	d001      	beq.n	800640e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e040      	b.n	8006490 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	3301      	adds	r3, #1
 8006412:	d02d      	beq.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006414:	f7ff f8bc 	bl	8005590 <HAL_GetTick>
 8006418:	0002      	movs	r2, r0
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d302      	bcc.n	800642a <I2C_WaitOnFlagUntilTimeout+0x42>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d122      	bne.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	4013      	ands	r3, r2
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	425a      	negs	r2, r3
 800643a:	4153      	adcs	r3, r2
 800643c:	b2db      	uxtb	r3, r3
 800643e:	001a      	movs	r2, r3
 8006440:	1dfb      	adds	r3, r7, #7
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	429a      	cmp	r2, r3
 8006446:	d113      	bne.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644c:	2220      	movs	r2, #32
 800644e:	431a      	orrs	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2241      	movs	r2, #65	@ 0x41
 8006458:	2120      	movs	r1, #32
 800645a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2242      	movs	r2, #66	@ 0x42
 8006460:	2100      	movs	r1, #0
 8006462:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2240      	movs	r2, #64	@ 0x40
 8006468:	2100      	movs	r1, #0
 800646a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e00f      	b.n	8006490 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	4013      	ands	r3, r2
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	425a      	negs	r2, r3
 8006480:	4153      	adcs	r3, r2
 8006482:	b2db      	uxtb	r3, r3
 8006484:	001a      	movs	r2, r3
 8006486:	1dfb      	adds	r3, r7, #7
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d0b5      	beq.n	80063fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	0018      	movs	r0, r3
 8006492:	46bd      	mov	sp, r7
 8006494:	b004      	add	sp, #16
 8006496:	bd80      	pop	{r7, pc}

08006498 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064a4:	e032      	b.n	800650c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	68b9      	ldr	r1, [r7, #8]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	0018      	movs	r0, r3
 80064ae:	f000 f87d 	bl	80065ac <I2C_IsErrorOccurred>
 80064b2:	1e03      	subs	r3, r0, #0
 80064b4:	d001      	beq.n	80064ba <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e030      	b.n	800651c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	3301      	adds	r3, #1
 80064be:	d025      	beq.n	800650c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c0:	f7ff f866 	bl	8005590 <HAL_GetTick>
 80064c4:	0002      	movs	r2, r0
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d302      	bcc.n	80064d6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d11a      	bne.n	800650c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	2202      	movs	r2, #2
 80064de:	4013      	ands	r3, r2
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d013      	beq.n	800650c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e8:	2220      	movs	r2, #32
 80064ea:	431a      	orrs	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2241      	movs	r2, #65	@ 0x41
 80064f4:	2120      	movs	r1, #32
 80064f6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2242      	movs	r2, #66	@ 0x42
 80064fc:	2100      	movs	r1, #0
 80064fe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2240      	movs	r2, #64	@ 0x40
 8006504:	2100      	movs	r1, #0
 8006506:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e007      	b.n	800651c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	2202      	movs	r2, #2
 8006514:	4013      	ands	r3, r2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d1c5      	bne.n	80064a6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	0018      	movs	r0, r3
 800651e:	46bd      	mov	sp, r7
 8006520:	b004      	add	sp, #16
 8006522:	bd80      	pop	{r7, pc}

08006524 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006530:	e02f      	b.n	8006592 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	0018      	movs	r0, r3
 800653a:	f000 f837 	bl	80065ac <I2C_IsErrorOccurred>
 800653e:	1e03      	subs	r3, r0, #0
 8006540:	d001      	beq.n	8006546 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e02d      	b.n	80065a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006546:	f7ff f823 	bl	8005590 <HAL_GetTick>
 800654a:	0002      	movs	r2, r0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	429a      	cmp	r2, r3
 8006554:	d302      	bcc.n	800655c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d11a      	bne.n	8006592 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2220      	movs	r2, #32
 8006564:	4013      	ands	r3, r2
 8006566:	2b20      	cmp	r3, #32
 8006568:	d013      	beq.n	8006592 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656e:	2220      	movs	r2, #32
 8006570:	431a      	orrs	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2241      	movs	r2, #65	@ 0x41
 800657a:	2120      	movs	r1, #32
 800657c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2242      	movs	r2, #66	@ 0x42
 8006582:	2100      	movs	r1, #0
 8006584:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2240      	movs	r2, #64	@ 0x40
 800658a:	2100      	movs	r1, #0
 800658c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e007      	b.n	80065a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	2220      	movs	r2, #32
 800659a:	4013      	ands	r3, r2
 800659c:	2b20      	cmp	r3, #32
 800659e:	d1c8      	bne.n	8006532 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	0018      	movs	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	b004      	add	sp, #16
 80065a8:	bd80      	pop	{r7, pc}
	...

080065ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b08a      	sub	sp, #40	@ 0x28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065b8:	2327      	movs	r3, #39	@ 0x27
 80065ba:	18fb      	adds	r3, r7, r3
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80065c8:	2300      	movs	r3, #0
 80065ca:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	2210      	movs	r2, #16
 80065d4:	4013      	ands	r3, r2
 80065d6:	d100      	bne.n	80065da <I2C_IsErrorOccurred+0x2e>
 80065d8:	e079      	b.n	80066ce <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2210      	movs	r2, #16
 80065e0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065e2:	e057      	b.n	8006694 <I2C_IsErrorOccurred+0xe8>
 80065e4:	2227      	movs	r2, #39	@ 0x27
 80065e6:	18bb      	adds	r3, r7, r2
 80065e8:	18ba      	adds	r2, r7, r2
 80065ea:	7812      	ldrb	r2, [r2, #0]
 80065ec:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	3301      	adds	r3, #1
 80065f2:	d04f      	beq.n	8006694 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065f4:	f7fe ffcc 	bl	8005590 <HAL_GetTick>
 80065f8:	0002      	movs	r2, r0
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	429a      	cmp	r2, r3
 8006602:	d302      	bcc.n	800660a <I2C_IsErrorOccurred+0x5e>
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d144      	bne.n	8006694 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	2380      	movs	r3, #128	@ 0x80
 8006612:	01db      	lsls	r3, r3, #7
 8006614:	4013      	ands	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006618:	2013      	movs	r0, #19
 800661a:	183b      	adds	r3, r7, r0
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	2142      	movs	r1, #66	@ 0x42
 8006620:	5c52      	ldrb	r2, [r2, r1]
 8006622:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	2380      	movs	r3, #128	@ 0x80
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	401a      	ands	r2, r3
 8006630:	2380      	movs	r3, #128	@ 0x80
 8006632:	021b      	lsls	r3, r3, #8
 8006634:	429a      	cmp	r2, r3
 8006636:	d126      	bne.n	8006686 <I2C_IsErrorOccurred+0xda>
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	2380      	movs	r3, #128	@ 0x80
 800663c:	01db      	lsls	r3, r3, #7
 800663e:	429a      	cmp	r2, r3
 8006640:	d021      	beq.n	8006686 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8006642:	183b      	adds	r3, r7, r0
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	2b20      	cmp	r3, #32
 8006648:	d01d      	beq.n	8006686 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2180      	movs	r1, #128	@ 0x80
 8006656:	01c9      	lsls	r1, r1, #7
 8006658:	430a      	orrs	r2, r1
 800665a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800665c:	f7fe ff98 	bl	8005590 <HAL_GetTick>
 8006660:	0003      	movs	r3, r0
 8006662:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006664:	e00f      	b.n	8006686 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006666:	f7fe ff93 	bl	8005590 <HAL_GetTick>
 800666a:	0002      	movs	r2, r0
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b19      	cmp	r3, #25
 8006672:	d908      	bls.n	8006686 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2220      	movs	r2, #32
 8006678:	4313      	orrs	r3, r2
 800667a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800667c:	2327      	movs	r3, #39	@ 0x27
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	2201      	movs	r2, #1
 8006682:	701a      	strb	r2, [r3, #0]

              break;
 8006684:	e006      	b.n	8006694 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	2220      	movs	r2, #32
 800668e:	4013      	ands	r3, r2
 8006690:	2b20      	cmp	r3, #32
 8006692:	d1e8      	bne.n	8006666 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	2220      	movs	r2, #32
 800669c:	4013      	ands	r3, r2
 800669e:	2b20      	cmp	r3, #32
 80066a0:	d004      	beq.n	80066ac <I2C_IsErrorOccurred+0x100>
 80066a2:	2327      	movs	r3, #39	@ 0x27
 80066a4:	18fb      	adds	r3, r7, r3
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d09b      	beq.n	80065e4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80066ac:	2327      	movs	r3, #39	@ 0x27
 80066ae:	18fb      	adds	r3, r7, r3
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d103      	bne.n	80066be <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2220      	movs	r2, #32
 80066bc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	2204      	movs	r2, #4
 80066c2:	4313      	orrs	r3, r2
 80066c4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80066c6:	2327      	movs	r3, #39	@ 0x27
 80066c8:	18fb      	adds	r3, r7, r3
 80066ca:	2201      	movs	r2, #1
 80066cc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	2380      	movs	r3, #128	@ 0x80
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	4013      	ands	r3, r2
 80066de:	d00c      	beq.n	80066fa <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	2201      	movs	r2, #1
 80066e4:	4313      	orrs	r3, r2
 80066e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2280      	movs	r2, #128	@ 0x80
 80066ee:	0052      	lsls	r2, r2, #1
 80066f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066f2:	2327      	movs	r3, #39	@ 0x27
 80066f4:	18fb      	adds	r3, r7, r3
 80066f6:	2201      	movs	r2, #1
 80066f8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	2380      	movs	r3, #128	@ 0x80
 80066fe:	00db      	lsls	r3, r3, #3
 8006700:	4013      	ands	r3, r2
 8006702:	d00c      	beq.n	800671e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	2208      	movs	r2, #8
 8006708:	4313      	orrs	r3, r2
 800670a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2280      	movs	r2, #128	@ 0x80
 8006712:	00d2      	lsls	r2, r2, #3
 8006714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006716:	2327      	movs	r3, #39	@ 0x27
 8006718:	18fb      	adds	r3, r7, r3
 800671a:	2201      	movs	r2, #1
 800671c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	2380      	movs	r3, #128	@ 0x80
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	4013      	ands	r3, r2
 8006726:	d00c      	beq.n	8006742 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006728:	6a3b      	ldr	r3, [r7, #32]
 800672a:	2202      	movs	r2, #2
 800672c:	4313      	orrs	r3, r2
 800672e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2280      	movs	r2, #128	@ 0x80
 8006736:	0092      	lsls	r2, r2, #2
 8006738:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800673a:	2327      	movs	r3, #39	@ 0x27
 800673c:	18fb      	adds	r3, r7, r3
 800673e:	2201      	movs	r2, #1
 8006740:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006742:	2327      	movs	r3, #39	@ 0x27
 8006744:	18fb      	adds	r3, r7, r3
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01d      	beq.n	8006788 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	0018      	movs	r0, r3
 8006750:	f7ff fe28 	bl	80063a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	490e      	ldr	r1, [pc, #56]	@ (8006798 <I2C_IsErrorOccurred+0x1ec>)
 8006760:	400a      	ands	r2, r1
 8006762:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	431a      	orrs	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2241      	movs	r2, #65	@ 0x41
 8006774:	2120      	movs	r1, #32
 8006776:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2242      	movs	r2, #66	@ 0x42
 800677c:	2100      	movs	r1, #0
 800677e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2240      	movs	r2, #64	@ 0x40
 8006784:	2100      	movs	r1, #0
 8006786:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006788:	2327      	movs	r3, #39	@ 0x27
 800678a:	18fb      	adds	r3, r7, r3
 800678c:	781b      	ldrb	r3, [r3, #0]
}
 800678e:	0018      	movs	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	b00a      	add	sp, #40	@ 0x28
 8006794:	bd80      	pop	{r7, pc}
 8006796:	46c0      	nop			@ (mov r8, r8)
 8006798:	fe00e800 	.word	0xfe00e800

0800679c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	0008      	movs	r0, r1
 80067a6:	0011      	movs	r1, r2
 80067a8:	607b      	str	r3, [r7, #4]
 80067aa:	240a      	movs	r4, #10
 80067ac:	193b      	adds	r3, r7, r4
 80067ae:	1c02      	adds	r2, r0, #0
 80067b0:	801a      	strh	r2, [r3, #0]
 80067b2:	2009      	movs	r0, #9
 80067b4:	183b      	adds	r3, r7, r0
 80067b6:	1c0a      	adds	r2, r1, #0
 80067b8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067ba:	193b      	adds	r3, r7, r4
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	059b      	lsls	r3, r3, #22
 80067c0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067c2:	183b      	adds	r3, r7, r0
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	0419      	lsls	r1, r3, #16
 80067c8:	23ff      	movs	r3, #255	@ 0xff
 80067ca:	041b      	lsls	r3, r3, #16
 80067cc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067ce:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d6:	4313      	orrs	r3, r2
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	085b      	lsrs	r3, r3, #1
 80067dc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067e6:	0d51      	lsrs	r1, r2, #21
 80067e8:	2280      	movs	r2, #128	@ 0x80
 80067ea:	00d2      	lsls	r2, r2, #3
 80067ec:	400a      	ands	r2, r1
 80067ee:	4907      	ldr	r1, [pc, #28]	@ (800680c <I2C_TransferConfig+0x70>)
 80067f0:	430a      	orrs	r2, r1
 80067f2:	43d2      	mvns	r2, r2
 80067f4:	401a      	ands	r2, r3
 80067f6:	0011      	movs	r1, r2
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006802:	46c0      	nop			@ (mov r8, r8)
 8006804:	46bd      	mov	sp, r7
 8006806:	b007      	add	sp, #28
 8006808:	bd90      	pop	{r4, r7, pc}
 800680a:	46c0      	nop			@ (mov r8, r8)
 800680c:	03ff63ff 	.word	0x03ff63ff

08006810 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2241      	movs	r2, #65	@ 0x41
 800681e:	5c9b      	ldrb	r3, [r3, r2]
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b20      	cmp	r3, #32
 8006824:	d138      	bne.n	8006898 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2240      	movs	r2, #64	@ 0x40
 800682a:	5c9b      	ldrb	r3, [r3, r2]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006830:	2302      	movs	r3, #2
 8006832:	e032      	b.n	800689a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2240      	movs	r2, #64	@ 0x40
 8006838:	2101      	movs	r1, #1
 800683a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2241      	movs	r2, #65	@ 0x41
 8006840:	2124      	movs	r1, #36	@ 0x24
 8006842:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2101      	movs	r1, #1
 8006850:	438a      	bics	r2, r1
 8006852:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4911      	ldr	r1, [pc, #68]	@ (80068a4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006860:	400a      	ands	r2, r1
 8006862:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6819      	ldr	r1, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2101      	movs	r1, #1
 8006880:	430a      	orrs	r2, r1
 8006882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2241      	movs	r2, #65	@ 0x41
 8006888:	2120      	movs	r1, #32
 800688a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2240      	movs	r2, #64	@ 0x40
 8006890:	2100      	movs	r1, #0
 8006892:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	e000      	b.n	800689a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006898:	2302      	movs	r3, #2
  }
}
 800689a:	0018      	movs	r0, r3
 800689c:	46bd      	mov	sp, r7
 800689e:	b002      	add	sp, #8
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	46c0      	nop			@ (mov r8, r8)
 80068a4:	ffffefff 	.word	0xffffefff

080068a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2241      	movs	r2, #65	@ 0x41
 80068b6:	5c9b      	ldrb	r3, [r3, r2]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b20      	cmp	r3, #32
 80068bc:	d139      	bne.n	8006932 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2240      	movs	r2, #64	@ 0x40
 80068c2:	5c9b      	ldrb	r3, [r3, r2]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e033      	b.n	8006934 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2240      	movs	r2, #64	@ 0x40
 80068d0:	2101      	movs	r1, #1
 80068d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2241      	movs	r2, #65	@ 0x41
 80068d8:	2124      	movs	r1, #36	@ 0x24
 80068da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2101      	movs	r1, #1
 80068e8:	438a      	bics	r2, r1
 80068ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4a11      	ldr	r2, [pc, #68]	@ (800693c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2101      	movs	r1, #1
 800691a:	430a      	orrs	r2, r1
 800691c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2241      	movs	r2, #65	@ 0x41
 8006922:	2120      	movs	r1, #32
 8006924:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2240      	movs	r2, #64	@ 0x40
 800692a:	2100      	movs	r1, #0
 800692c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e000      	b.n	8006934 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006932:	2302      	movs	r3, #2
  }
}
 8006934:	0018      	movs	r0, r3
 8006936:	46bd      	mov	sp, r7
 8006938:	b004      	add	sp, #16
 800693a:	bd80      	pop	{r7, pc}
 800693c:	fffff0ff 	.word	0xfffff0ff

08006940 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006948:	4b19      	ldr	r3, [pc, #100]	@ (80069b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a19      	ldr	r2, [pc, #100]	@ (80069b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800694e:	4013      	ands	r3, r2
 8006950:	0019      	movs	r1, r3
 8006952:	4b17      	ldr	r3, [pc, #92]	@ (80069b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	430a      	orrs	r2, r1
 8006958:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	2380      	movs	r3, #128	@ 0x80
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	429a      	cmp	r2, r3
 8006962:	d11f      	bne.n	80069a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8006964:	4b14      	ldr	r3, [pc, #80]	@ (80069b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	0013      	movs	r3, r2
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	189b      	adds	r3, r3, r2
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	4912      	ldr	r1, [pc, #72]	@ (80069bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006972:	0018      	movs	r0, r3
 8006974:	f7f9 fbe2 	bl	800013c <__udivsi3>
 8006978:	0003      	movs	r3, r0
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800697e:	e008      	b.n	8006992 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3b01      	subs	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	e001      	b.n	8006992 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e009      	b.n	80069a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006992:	4b07      	ldr	r3, [pc, #28]	@ (80069b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006994:	695a      	ldr	r2, [r3, #20]
 8006996:	2380      	movs	r3, #128	@ 0x80
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	401a      	ands	r2, r3
 800699c:	2380      	movs	r3, #128	@ 0x80
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d0ed      	beq.n	8006980 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	0018      	movs	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	b004      	add	sp, #16
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	46c0      	nop			@ (mov r8, r8)
 80069b0:	40007000 	.word	0x40007000
 80069b4:	fffff9ff 	.word	0xfffff9ff
 80069b8:	20000000 	.word	0x20000000
 80069bc:	000f4240 	.word	0x000f4240

080069c0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80069c4:	4b03      	ldr	r3, [pc, #12]	@ (80069d4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	23e0      	movs	r3, #224	@ 0xe0
 80069ca:	01db      	lsls	r3, r3, #7
 80069cc:	4013      	ands	r3, r2
}
 80069ce:	0018      	movs	r0, r3
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40021000 	.word	0x40021000

080069d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d101      	bne.n	80069ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e2fe      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2201      	movs	r2, #1
 80069f0:	4013      	ands	r3, r2
 80069f2:	d100      	bne.n	80069f6 <HAL_RCC_OscConfig+0x1e>
 80069f4:	e07c      	b.n	8006af0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069f6:	4bc3      	ldr	r3, [pc, #780]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2238      	movs	r2, #56	@ 0x38
 80069fc:	4013      	ands	r3, r2
 80069fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a00:	4bc0      	ldr	r3, [pc, #768]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	2203      	movs	r2, #3
 8006a06:	4013      	ands	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b10      	cmp	r3, #16
 8006a0e:	d102      	bne.n	8006a16 <HAL_RCC_OscConfig+0x3e>
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b03      	cmp	r3, #3
 8006a14:	d002      	beq.n	8006a1c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2b08      	cmp	r3, #8
 8006a1a:	d10b      	bne.n	8006a34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a1c:	4bb9      	ldr	r3, [pc, #740]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	2380      	movs	r3, #128	@ 0x80
 8006a22:	029b      	lsls	r3, r3, #10
 8006a24:	4013      	ands	r3, r2
 8006a26:	d062      	beq.n	8006aee <HAL_RCC_OscConfig+0x116>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d15e      	bne.n	8006aee <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e2d9      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	2380      	movs	r3, #128	@ 0x80
 8006a3a:	025b      	lsls	r3, r3, #9
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d107      	bne.n	8006a50 <HAL_RCC_OscConfig+0x78>
 8006a40:	4bb0      	ldr	r3, [pc, #704]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	4baf      	ldr	r3, [pc, #700]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006a46:	2180      	movs	r1, #128	@ 0x80
 8006a48:	0249      	lsls	r1, r1, #9
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	e020      	b.n	8006a92 <HAL_RCC_OscConfig+0xba>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	23a0      	movs	r3, #160	@ 0xa0
 8006a56:	02db      	lsls	r3, r3, #11
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d10e      	bne.n	8006a7a <HAL_RCC_OscConfig+0xa2>
 8006a5c:	4ba9      	ldr	r3, [pc, #676]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	4ba8      	ldr	r3, [pc, #672]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006a62:	2180      	movs	r1, #128	@ 0x80
 8006a64:	02c9      	lsls	r1, r1, #11
 8006a66:	430a      	orrs	r2, r1
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	4ba6      	ldr	r3, [pc, #664]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	4ba5      	ldr	r3, [pc, #660]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006a70:	2180      	movs	r1, #128	@ 0x80
 8006a72:	0249      	lsls	r1, r1, #9
 8006a74:	430a      	orrs	r2, r1
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	e00b      	b.n	8006a92 <HAL_RCC_OscConfig+0xba>
 8006a7a:	4ba2      	ldr	r3, [pc, #648]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4ba1      	ldr	r3, [pc, #644]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006a80:	49a1      	ldr	r1, [pc, #644]	@ (8006d08 <HAL_RCC_OscConfig+0x330>)
 8006a82:	400a      	ands	r2, r1
 8006a84:	601a      	str	r2, [r3, #0]
 8006a86:	4b9f      	ldr	r3, [pc, #636]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4b9e      	ldr	r3, [pc, #632]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006a8c:	499f      	ldr	r1, [pc, #636]	@ (8006d0c <HAL_RCC_OscConfig+0x334>)
 8006a8e:	400a      	ands	r2, r1
 8006a90:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d014      	beq.n	8006ac4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a9a:	f7fe fd79 	bl	8005590 <HAL_GetTick>
 8006a9e:	0003      	movs	r3, r0
 8006aa0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aa2:	e008      	b.n	8006ab6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aa4:	f7fe fd74 	bl	8005590 <HAL_GetTick>
 8006aa8:	0002      	movs	r2, r0
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b64      	cmp	r3, #100	@ 0x64
 8006ab0:	d901      	bls.n	8006ab6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e298      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ab6:	4b93      	ldr	r3, [pc, #588]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	2380      	movs	r3, #128	@ 0x80
 8006abc:	029b      	lsls	r3, r3, #10
 8006abe:	4013      	ands	r3, r2
 8006ac0:	d0f0      	beq.n	8006aa4 <HAL_RCC_OscConfig+0xcc>
 8006ac2:	e015      	b.n	8006af0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ac4:	f7fe fd64 	bl	8005590 <HAL_GetTick>
 8006ac8:	0003      	movs	r3, r0
 8006aca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ace:	f7fe fd5f 	bl	8005590 <HAL_GetTick>
 8006ad2:	0002      	movs	r2, r0
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b64      	cmp	r3, #100	@ 0x64
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e283      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ae0:	4b88      	ldr	r3, [pc, #544]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	2380      	movs	r3, #128	@ 0x80
 8006ae6:	029b      	lsls	r3, r3, #10
 8006ae8:	4013      	ands	r3, r2
 8006aea:	d1f0      	bne.n	8006ace <HAL_RCC_OscConfig+0xf6>
 8006aec:	e000      	b.n	8006af0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2202      	movs	r2, #2
 8006af6:	4013      	ands	r3, r2
 8006af8:	d100      	bne.n	8006afc <HAL_RCC_OscConfig+0x124>
 8006afa:	e099      	b.n	8006c30 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006afc:	4b81      	ldr	r3, [pc, #516]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	2238      	movs	r2, #56	@ 0x38
 8006b02:	4013      	ands	r3, r2
 8006b04:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b06:	4b7f      	ldr	r3, [pc, #508]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	2203      	movs	r2, #3
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d102      	bne.n	8006b1c <HAL_RCC_OscConfig+0x144>
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d002      	beq.n	8006b22 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d135      	bne.n	8006b8e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b22:	4b78      	ldr	r3, [pc, #480]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	2380      	movs	r3, #128	@ 0x80
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	d005      	beq.n	8006b3a <HAL_RCC_OscConfig+0x162>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e256      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b3a:	4b72      	ldr	r3, [pc, #456]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	4a74      	ldr	r2, [pc, #464]	@ (8006d10 <HAL_RCC_OscConfig+0x338>)
 8006b40:	4013      	ands	r3, r2
 8006b42:	0019      	movs	r1, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	021a      	lsls	r2, r3, #8
 8006b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d112      	bne.n	8006b7c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006b56:	4b6b      	ldr	r3, [pc, #428]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a6e      	ldr	r2, [pc, #440]	@ (8006d14 <HAL_RCC_OscConfig+0x33c>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	0019      	movs	r1, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691a      	ldr	r2, [r3, #16]
 8006b64:	4b67      	ldr	r3, [pc, #412]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006b66:	430a      	orrs	r2, r1
 8006b68:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006b6a:	4b66      	ldr	r3, [pc, #408]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	0adb      	lsrs	r3, r3, #11
 8006b70:	2207      	movs	r2, #7
 8006b72:	4013      	ands	r3, r2
 8006b74:	4a68      	ldr	r2, [pc, #416]	@ (8006d18 <HAL_RCC_OscConfig+0x340>)
 8006b76:	40da      	lsrs	r2, r3
 8006b78:	4b68      	ldr	r3, [pc, #416]	@ (8006d1c <HAL_RCC_OscConfig+0x344>)
 8006b7a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b7c:	4b68      	ldr	r3, [pc, #416]	@ (8006d20 <HAL_RCC_OscConfig+0x348>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	0018      	movs	r0, r3
 8006b82:	f7fe fca9 	bl	80054d8 <HAL_InitTick>
 8006b86:	1e03      	subs	r3, r0, #0
 8006b88:	d051      	beq.n	8006c2e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e22c      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d030      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006b96:	4b5b      	ldr	r3, [pc, #364]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a5e      	ldr	r2, [pc, #376]	@ (8006d14 <HAL_RCC_OscConfig+0x33c>)
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	0019      	movs	r1, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	4b57      	ldr	r3, [pc, #348]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006baa:	4b56      	ldr	r3, [pc, #344]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4b55      	ldr	r3, [pc, #340]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006bb0:	2180      	movs	r1, #128	@ 0x80
 8006bb2:	0049      	lsls	r1, r1, #1
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb8:	f7fe fcea 	bl	8005590 <HAL_GetTick>
 8006bbc:	0003      	movs	r3, r0
 8006bbe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bc0:	e008      	b.n	8006bd4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bc2:	f7fe fce5 	bl	8005590 <HAL_GetTick>
 8006bc6:	0002      	movs	r2, r0
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d901      	bls.n	8006bd4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e209      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	2380      	movs	r3, #128	@ 0x80
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	4013      	ands	r3, r2
 8006bde:	d0f0      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006be0:	4b48      	ldr	r3, [pc, #288]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	4a4a      	ldr	r2, [pc, #296]	@ (8006d10 <HAL_RCC_OscConfig+0x338>)
 8006be6:	4013      	ands	r3, r2
 8006be8:	0019      	movs	r1, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	021a      	lsls	r2, r3, #8
 8006bf0:	4b44      	ldr	r3, [pc, #272]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	e01b      	b.n	8006c30 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006bf8:	4b42      	ldr	r3, [pc, #264]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	4b41      	ldr	r3, [pc, #260]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006bfe:	4949      	ldr	r1, [pc, #292]	@ (8006d24 <HAL_RCC_OscConfig+0x34c>)
 8006c00:	400a      	ands	r2, r1
 8006c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c04:	f7fe fcc4 	bl	8005590 <HAL_GetTick>
 8006c08:	0003      	movs	r3, r0
 8006c0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c0e:	f7fe fcbf 	bl	8005590 <HAL_GetTick>
 8006c12:	0002      	movs	r2, r0
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e1e3      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c20:	4b38      	ldr	r3, [pc, #224]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	2380      	movs	r3, #128	@ 0x80
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	4013      	ands	r3, r2
 8006c2a:	d1f0      	bne.n	8006c0e <HAL_RCC_OscConfig+0x236>
 8006c2c:	e000      	b.n	8006c30 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c2e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2208      	movs	r2, #8
 8006c36:	4013      	ands	r3, r2
 8006c38:	d047      	beq.n	8006cca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006c3a:	4b32      	ldr	r3, [pc, #200]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	2238      	movs	r2, #56	@ 0x38
 8006c40:	4013      	ands	r3, r2
 8006c42:	2b18      	cmp	r3, #24
 8006c44:	d10a      	bne.n	8006c5c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006c46:	4b2f      	ldr	r3, [pc, #188]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d03c      	beq.n	8006cca <HAL_RCC_OscConfig+0x2f2>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d138      	bne.n	8006cca <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e1c5      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d019      	beq.n	8006c98 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006c64:	4b27      	ldr	r3, [pc, #156]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006c66:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c68:	4b26      	ldr	r3, [pc, #152]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fe fc8e 	bl	8005590 <HAL_GetTick>
 8006c74:	0003      	movs	r3, r0
 8006c76:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c78:	e008      	b.n	8006c8c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c7a:	f7fe fc89 	bl	8005590 <HAL_GetTick>
 8006c7e:	0002      	movs	r2, r0
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d901      	bls.n	8006c8c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e1ad      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006c8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c90:	2202      	movs	r2, #2
 8006c92:	4013      	ands	r3, r2
 8006c94:	d0f1      	beq.n	8006c7a <HAL_RCC_OscConfig+0x2a2>
 8006c96:	e018      	b.n	8006cca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006c98:	4b1a      	ldr	r3, [pc, #104]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006c9a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c9c:	4b19      	ldr	r3, [pc, #100]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	438a      	bics	r2, r1
 8006ca2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca4:	f7fe fc74 	bl	8005590 <HAL_GetTick>
 8006ca8:	0003      	movs	r3, r0
 8006caa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cae:	f7fe fc6f 	bl	8005590 <HAL_GetTick>
 8006cb2:	0002      	movs	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e193      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cc0:	4b10      	ldr	r3, [pc, #64]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	d1f1      	bne.n	8006cae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2204      	movs	r2, #4
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	d100      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x2fe>
 8006cd4:	e0c6      	b.n	8006e64 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cd6:	231f      	movs	r3, #31
 8006cd8:	18fb      	adds	r3, r7, r3
 8006cda:	2200      	movs	r2, #0
 8006cdc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006cde:	4b09      	ldr	r3, [pc, #36]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2238      	movs	r2, #56	@ 0x38
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d11e      	bne.n	8006d28 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006cea:	4b06      	ldr	r3, [pc, #24]	@ (8006d04 <HAL_RCC_OscConfig+0x32c>)
 8006cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cee:	2202      	movs	r2, #2
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	d100      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x31e>
 8006cf4:	e0b6      	b.n	8006e64 <HAL_RCC_OscConfig+0x48c>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d000      	beq.n	8006d00 <HAL_RCC_OscConfig+0x328>
 8006cfe:	e0b1      	b.n	8006e64 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e171      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
 8006d04:	40021000 	.word	0x40021000
 8006d08:	fffeffff 	.word	0xfffeffff
 8006d0c:	fffbffff 	.word	0xfffbffff
 8006d10:	ffff80ff 	.word	0xffff80ff
 8006d14:	ffffc7ff 	.word	0xffffc7ff
 8006d18:	00f42400 	.word	0x00f42400
 8006d1c:	20000000 	.word	0x20000000
 8006d20:	20000004 	.word	0x20000004
 8006d24:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d28:	4bb1      	ldr	r3, [pc, #708]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006d2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d2c:	2380      	movs	r3, #128	@ 0x80
 8006d2e:	055b      	lsls	r3, r3, #21
 8006d30:	4013      	ands	r3, r2
 8006d32:	d101      	bne.n	8006d38 <HAL_RCC_OscConfig+0x360>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <HAL_RCC_OscConfig+0x362>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d011      	beq.n	8006d62 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006d3e:	4bac      	ldr	r3, [pc, #688]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006d40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d42:	4bab      	ldr	r3, [pc, #684]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006d44:	2180      	movs	r1, #128	@ 0x80
 8006d46:	0549      	lsls	r1, r1, #21
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006d4c:	4ba8      	ldr	r3, [pc, #672]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006d4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d50:	2380      	movs	r3, #128	@ 0x80
 8006d52:	055b      	lsls	r3, r3, #21
 8006d54:	4013      	ands	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006d5a:	231f      	movs	r3, #31
 8006d5c:	18fb      	adds	r3, r7, r3
 8006d5e:	2201      	movs	r2, #1
 8006d60:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d62:	4ba4      	ldr	r3, [pc, #656]	@ (8006ff4 <HAL_RCC_OscConfig+0x61c>)
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	2380      	movs	r3, #128	@ 0x80
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	d11a      	bne.n	8006da4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d6e:	4ba1      	ldr	r3, [pc, #644]	@ (8006ff4 <HAL_RCC_OscConfig+0x61c>)
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4ba0      	ldr	r3, [pc, #640]	@ (8006ff4 <HAL_RCC_OscConfig+0x61c>)
 8006d74:	2180      	movs	r1, #128	@ 0x80
 8006d76:	0049      	lsls	r1, r1, #1
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006d7c:	f7fe fc08 	bl	8005590 <HAL_GetTick>
 8006d80:	0003      	movs	r3, r0
 8006d82:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d84:	e008      	b.n	8006d98 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d86:	f7fe fc03 	bl	8005590 <HAL_GetTick>
 8006d8a:	0002      	movs	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e127      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d98:	4b96      	ldr	r3, [pc, #600]	@ (8006ff4 <HAL_RCC_OscConfig+0x61c>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	2380      	movs	r3, #128	@ 0x80
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	4013      	ands	r3, r2
 8006da2:	d0f0      	beq.n	8006d86 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d106      	bne.n	8006dba <HAL_RCC_OscConfig+0x3e2>
 8006dac:	4b90      	ldr	r3, [pc, #576]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006dae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006db0:	4b8f      	ldr	r3, [pc, #572]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006db2:	2101      	movs	r1, #1
 8006db4:	430a      	orrs	r2, r1
 8006db6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006db8:	e01c      	b.n	8006df4 <HAL_RCC_OscConfig+0x41c>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d10c      	bne.n	8006ddc <HAL_RCC_OscConfig+0x404>
 8006dc2:	4b8b      	ldr	r3, [pc, #556]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006dc4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dc6:	4b8a      	ldr	r3, [pc, #552]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006dc8:	2104      	movs	r1, #4
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006dce:	4b88      	ldr	r3, [pc, #544]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006dd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dd2:	4b87      	ldr	r3, [pc, #540]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006dda:	e00b      	b.n	8006df4 <HAL_RCC_OscConfig+0x41c>
 8006ddc:	4b84      	ldr	r3, [pc, #528]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006dde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006de0:	4b83      	ldr	r3, [pc, #524]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006de2:	2101      	movs	r1, #1
 8006de4:	438a      	bics	r2, r1
 8006de6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006de8:	4b81      	ldr	r3, [pc, #516]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006dea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dec:	4b80      	ldr	r3, [pc, #512]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006dee:	2104      	movs	r1, #4
 8006df0:	438a      	bics	r2, r1
 8006df2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d014      	beq.n	8006e26 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfc:	f7fe fbc8 	bl	8005590 <HAL_GetTick>
 8006e00:	0003      	movs	r3, r0
 8006e02:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e04:	e009      	b.n	8006e1a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e06:	f7fe fbc3 	bl	8005590 <HAL_GetTick>
 8006e0a:	0002      	movs	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	4a79      	ldr	r2, [pc, #484]	@ (8006ff8 <HAL_RCC_OscConfig+0x620>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e0e6      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e1a:	4b75      	ldr	r3, [pc, #468]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e1e:	2202      	movs	r2, #2
 8006e20:	4013      	ands	r3, r2
 8006e22:	d0f0      	beq.n	8006e06 <HAL_RCC_OscConfig+0x42e>
 8006e24:	e013      	b.n	8006e4e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e26:	f7fe fbb3 	bl	8005590 <HAL_GetTick>
 8006e2a:	0003      	movs	r3, r0
 8006e2c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e2e:	e009      	b.n	8006e44 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e30:	f7fe fbae 	bl	8005590 <HAL_GetTick>
 8006e34:	0002      	movs	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	4a6f      	ldr	r2, [pc, #444]	@ (8006ff8 <HAL_RCC_OscConfig+0x620>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d901      	bls.n	8006e44 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e0d1      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e44:	4b6a      	ldr	r3, [pc, #424]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e48:	2202      	movs	r2, #2
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	d1f0      	bne.n	8006e30 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006e4e:	231f      	movs	r3, #31
 8006e50:	18fb      	adds	r3, r7, r3
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d105      	bne.n	8006e64 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006e58:	4b65      	ldr	r3, [pc, #404]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006e5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e5c:	4b64      	ldr	r3, [pc, #400]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006e5e:	4967      	ldr	r1, [pc, #412]	@ (8006ffc <HAL_RCC_OscConfig+0x624>)
 8006e60:	400a      	ands	r2, r1
 8006e62:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d100      	bne.n	8006e6e <HAL_RCC_OscConfig+0x496>
 8006e6c:	e0bb      	b.n	8006fe6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e6e:	4b60      	ldr	r3, [pc, #384]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	2238      	movs	r2, #56	@ 0x38
 8006e74:	4013      	ands	r3, r2
 8006e76:	2b10      	cmp	r3, #16
 8006e78:	d100      	bne.n	8006e7c <HAL_RCC_OscConfig+0x4a4>
 8006e7a:	e07b      	b.n	8006f74 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d156      	bne.n	8006f32 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e84:	4b5a      	ldr	r3, [pc, #360]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	4b59      	ldr	r3, [pc, #356]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006e8a:	495d      	ldr	r1, [pc, #372]	@ (8007000 <HAL_RCC_OscConfig+0x628>)
 8006e8c:	400a      	ands	r2, r1
 8006e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e90:	f7fe fb7e 	bl	8005590 <HAL_GetTick>
 8006e94:	0003      	movs	r3, r0
 8006e96:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e98:	e008      	b.n	8006eac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e9a:	f7fe fb79 	bl	8005590 <HAL_GetTick>
 8006e9e:	0002      	movs	r2, r0
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e09d      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006eac:	4b50      	ldr	r3, [pc, #320]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	2380      	movs	r3, #128	@ 0x80
 8006eb2:	049b      	lsls	r3, r3, #18
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	d1f0      	bne.n	8006e9a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	4a51      	ldr	r2, [pc, #324]	@ (8007004 <HAL_RCC_OscConfig+0x62c>)
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	0019      	movs	r1, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1a      	ldr	r2, [r3, #32]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed0:	021b      	lsls	r3, r3, #8
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	4b42      	ldr	r3, [pc, #264]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006ee8:	430a      	orrs	r2, r1
 8006eea:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eec:	4b40      	ldr	r3, [pc, #256]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006ef2:	2180      	movs	r1, #128	@ 0x80
 8006ef4:	0449      	lsls	r1, r1, #17
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006efa:	4b3d      	ldr	r3, [pc, #244]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006efc:	68da      	ldr	r2, [r3, #12]
 8006efe:	4b3c      	ldr	r3, [pc, #240]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006f00:	2180      	movs	r1, #128	@ 0x80
 8006f02:	0549      	lsls	r1, r1, #21
 8006f04:	430a      	orrs	r2, r1
 8006f06:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f08:	f7fe fb42 	bl	8005590 <HAL_GetTick>
 8006f0c:	0003      	movs	r3, r0
 8006f0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f10:	e008      	b.n	8006f24 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f12:	f7fe fb3d 	bl	8005590 <HAL_GetTick>
 8006f16:	0002      	movs	r2, r0
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	2b02      	cmp	r3, #2
 8006f1e:	d901      	bls.n	8006f24 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e061      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f24:	4b32      	ldr	r3, [pc, #200]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	2380      	movs	r3, #128	@ 0x80
 8006f2a:	049b      	lsls	r3, r3, #18
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	d0f0      	beq.n	8006f12 <HAL_RCC_OscConfig+0x53a>
 8006f30:	e059      	b.n	8006fe6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f32:	4b2f      	ldr	r3, [pc, #188]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	4b2e      	ldr	r3, [pc, #184]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006f38:	4931      	ldr	r1, [pc, #196]	@ (8007000 <HAL_RCC_OscConfig+0x628>)
 8006f3a:	400a      	ands	r2, r1
 8006f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f3e:	f7fe fb27 	bl	8005590 <HAL_GetTick>
 8006f42:	0003      	movs	r3, r0
 8006f44:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f48:	f7fe fb22 	bl	8005590 <HAL_GetTick>
 8006f4c:	0002      	movs	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e046      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f5a:	4b25      	ldr	r3, [pc, #148]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	2380      	movs	r3, #128	@ 0x80
 8006f60:	049b      	lsls	r3, r3, #18
 8006f62:	4013      	ands	r3, r2
 8006f64:	d1f0      	bne.n	8006f48 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006f66:	4b22      	ldr	r3, [pc, #136]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	4b21      	ldr	r3, [pc, #132]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006f6c:	4926      	ldr	r1, [pc, #152]	@ (8007008 <HAL_RCC_OscConfig+0x630>)
 8006f6e:	400a      	ands	r2, r1
 8006f70:	60da      	str	r2, [r3, #12]
 8006f72:	e038      	b.n	8006fe6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e033      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006f80:	4b1b      	ldr	r3, [pc, #108]	@ (8006ff0 <HAL_RCC_OscConfig+0x618>)
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2203      	movs	r2, #3
 8006f8a:	401a      	ands	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d126      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2270      	movs	r2, #112	@ 0x70
 8006f98:	401a      	ands	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d11f      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	23fe      	movs	r3, #254	@ 0xfe
 8006fa6:	01db      	lsls	r3, r3, #7
 8006fa8:	401a      	ands	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fae:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d116      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	23f8      	movs	r3, #248	@ 0xf8
 8006fb8:	039b      	lsls	r3, r3, #14
 8006fba:	401a      	ands	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d10e      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	23e0      	movs	r3, #224	@ 0xe0
 8006fc8:	051b      	lsls	r3, r3, #20
 8006fca:	401a      	ands	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d106      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	0f5b      	lsrs	r3, r3, #29
 8006fd8:	075a      	lsls	r2, r3, #29
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d001      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e000      	b.n	8006fe8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	0018      	movs	r0, r3
 8006fea:	46bd      	mov	sp, r7
 8006fec:	b008      	add	sp, #32
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40021000 	.word	0x40021000
 8006ff4:	40007000 	.word	0x40007000
 8006ff8:	00001388 	.word	0x00001388
 8006ffc:	efffffff 	.word	0xefffffff
 8007000:	feffffff 	.word	0xfeffffff
 8007004:	11c1808c 	.word	0x11c1808c
 8007008:	eefefffc 	.word	0xeefefffc

0800700c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e0e9      	b.n	80071f4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007020:	4b76      	ldr	r3, [pc, #472]	@ (80071fc <HAL_RCC_ClockConfig+0x1f0>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2207      	movs	r2, #7
 8007026:	4013      	ands	r3, r2
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d91e      	bls.n	800706c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702e:	4b73      	ldr	r3, [pc, #460]	@ (80071fc <HAL_RCC_ClockConfig+0x1f0>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2207      	movs	r2, #7
 8007034:	4393      	bics	r3, r2
 8007036:	0019      	movs	r1, r3
 8007038:	4b70      	ldr	r3, [pc, #448]	@ (80071fc <HAL_RCC_ClockConfig+0x1f0>)
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007040:	f7fe faa6 	bl	8005590 <HAL_GetTick>
 8007044:	0003      	movs	r3, r0
 8007046:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007048:	e009      	b.n	800705e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800704a:	f7fe faa1 	bl	8005590 <HAL_GetTick>
 800704e:	0002      	movs	r2, r0
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	4a6a      	ldr	r2, [pc, #424]	@ (8007200 <HAL_RCC_ClockConfig+0x1f4>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d901      	bls.n	800705e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e0ca      	b.n	80071f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800705e:	4b67      	ldr	r3, [pc, #412]	@ (80071fc <HAL_RCC_ClockConfig+0x1f0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2207      	movs	r2, #7
 8007064:	4013      	ands	r3, r2
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d1ee      	bne.n	800704a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2202      	movs	r2, #2
 8007072:	4013      	ands	r3, r2
 8007074:	d015      	beq.n	80070a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2204      	movs	r2, #4
 800707c:	4013      	ands	r3, r2
 800707e:	d006      	beq.n	800708e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007080:	4b60      	ldr	r3, [pc, #384]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	4b5f      	ldr	r3, [pc, #380]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 8007086:	21e0      	movs	r1, #224	@ 0xe0
 8007088:	01c9      	lsls	r1, r1, #7
 800708a:	430a      	orrs	r2, r1
 800708c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800708e:	4b5d      	ldr	r3, [pc, #372]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	4a5d      	ldr	r2, [pc, #372]	@ (8007208 <HAL_RCC_ClockConfig+0x1fc>)
 8007094:	4013      	ands	r3, r2
 8007096:	0019      	movs	r1, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	4b59      	ldr	r3, [pc, #356]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 800709e:	430a      	orrs	r2, r1
 80070a0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2201      	movs	r2, #1
 80070a8:	4013      	ands	r3, r2
 80070aa:	d057      	beq.n	800715c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d107      	bne.n	80070c4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070b4:	4b53      	ldr	r3, [pc, #332]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	2380      	movs	r3, #128	@ 0x80
 80070ba:	029b      	lsls	r3, r3, #10
 80070bc:	4013      	ands	r3, r2
 80070be:	d12b      	bne.n	8007118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e097      	b.n	80071f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d107      	bne.n	80070dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070cc:	4b4d      	ldr	r3, [pc, #308]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	2380      	movs	r3, #128	@ 0x80
 80070d2:	049b      	lsls	r3, r3, #18
 80070d4:	4013      	ands	r3, r2
 80070d6:	d11f      	bne.n	8007118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e08b      	b.n	80071f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d107      	bne.n	80070f4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070e4:	4b47      	ldr	r3, [pc, #284]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	2380      	movs	r3, #128	@ 0x80
 80070ea:	00db      	lsls	r3, r3, #3
 80070ec:	4013      	ands	r3, r2
 80070ee:	d113      	bne.n	8007118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e07f      	b.n	80071f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b03      	cmp	r3, #3
 80070fa:	d106      	bne.n	800710a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070fc:	4b41      	ldr	r3, [pc, #260]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 80070fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007100:	2202      	movs	r2, #2
 8007102:	4013      	ands	r3, r2
 8007104:	d108      	bne.n	8007118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e074      	b.n	80071f4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800710a:	4b3e      	ldr	r3, [pc, #248]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 800710c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800710e:	2202      	movs	r2, #2
 8007110:	4013      	ands	r3, r2
 8007112:	d101      	bne.n	8007118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e06d      	b.n	80071f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007118:	4b3a      	ldr	r3, [pc, #232]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	2207      	movs	r2, #7
 800711e:	4393      	bics	r3, r2
 8007120:	0019      	movs	r1, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	4b37      	ldr	r3, [pc, #220]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 8007128:	430a      	orrs	r2, r1
 800712a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800712c:	f7fe fa30 	bl	8005590 <HAL_GetTick>
 8007130:	0003      	movs	r3, r0
 8007132:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007134:	e009      	b.n	800714a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007136:	f7fe fa2b 	bl	8005590 <HAL_GetTick>
 800713a:	0002      	movs	r2, r0
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	4a2f      	ldr	r2, [pc, #188]	@ (8007200 <HAL_RCC_ClockConfig+0x1f4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d901      	bls.n	800714a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e054      	b.n	80071f4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800714a:	4b2e      	ldr	r3, [pc, #184]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	2238      	movs	r2, #56	@ 0x38
 8007150:	401a      	ands	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	429a      	cmp	r2, r3
 800715a:	d1ec      	bne.n	8007136 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800715c:	4b27      	ldr	r3, [pc, #156]	@ (80071fc <HAL_RCC_ClockConfig+0x1f0>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2207      	movs	r2, #7
 8007162:	4013      	ands	r3, r2
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	429a      	cmp	r2, r3
 8007168:	d21e      	bcs.n	80071a8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800716a:	4b24      	ldr	r3, [pc, #144]	@ (80071fc <HAL_RCC_ClockConfig+0x1f0>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2207      	movs	r2, #7
 8007170:	4393      	bics	r3, r2
 8007172:	0019      	movs	r1, r3
 8007174:	4b21      	ldr	r3, [pc, #132]	@ (80071fc <HAL_RCC_ClockConfig+0x1f0>)
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	430a      	orrs	r2, r1
 800717a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800717c:	f7fe fa08 	bl	8005590 <HAL_GetTick>
 8007180:	0003      	movs	r3, r0
 8007182:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007184:	e009      	b.n	800719a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007186:	f7fe fa03 	bl	8005590 <HAL_GetTick>
 800718a:	0002      	movs	r2, r0
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	4a1b      	ldr	r2, [pc, #108]	@ (8007200 <HAL_RCC_ClockConfig+0x1f4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d901      	bls.n	800719a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e02c      	b.n	80071f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800719a:	4b18      	ldr	r3, [pc, #96]	@ (80071fc <HAL_RCC_ClockConfig+0x1f0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2207      	movs	r2, #7
 80071a0:	4013      	ands	r3, r2
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d1ee      	bne.n	8007186 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2204      	movs	r2, #4
 80071ae:	4013      	ands	r3, r2
 80071b0:	d009      	beq.n	80071c6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80071b2:	4b14      	ldr	r3, [pc, #80]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	4a15      	ldr	r2, [pc, #84]	@ (800720c <HAL_RCC_ClockConfig+0x200>)
 80071b8:	4013      	ands	r3, r2
 80071ba:	0019      	movs	r1, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68da      	ldr	r2, [r3, #12]
 80071c0:	4b10      	ldr	r3, [pc, #64]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 80071c2:	430a      	orrs	r2, r1
 80071c4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80071c6:	f000 f829 	bl	800721c <HAL_RCC_GetSysClockFreq>
 80071ca:	0001      	movs	r1, r0
 80071cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007204 <HAL_RCC_ClockConfig+0x1f8>)
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	0a1b      	lsrs	r3, r3, #8
 80071d2:	220f      	movs	r2, #15
 80071d4:	401a      	ands	r2, r3
 80071d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007210 <HAL_RCC_ClockConfig+0x204>)
 80071d8:	0092      	lsls	r2, r2, #2
 80071da:	58d3      	ldr	r3, [r2, r3]
 80071dc:	221f      	movs	r2, #31
 80071de:	4013      	ands	r3, r2
 80071e0:	000a      	movs	r2, r1
 80071e2:	40da      	lsrs	r2, r3
 80071e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007214 <HAL_RCC_ClockConfig+0x208>)
 80071e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80071e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007218 <HAL_RCC_ClockConfig+0x20c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	0018      	movs	r0, r3
 80071ee:	f7fe f973 	bl	80054d8 <HAL_InitTick>
 80071f2:	0003      	movs	r3, r0
}
 80071f4:	0018      	movs	r0, r3
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b004      	add	sp, #16
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	40022000 	.word	0x40022000
 8007200:	00001388 	.word	0x00001388
 8007204:	40021000 	.word	0x40021000
 8007208:	fffff0ff 	.word	0xfffff0ff
 800720c:	ffff8fff 	.word	0xffff8fff
 8007210:	0800b790 	.word	0x0800b790
 8007214:	20000000 	.word	0x20000000
 8007218:	20000004 	.word	0x20000004

0800721c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007222:	4b3c      	ldr	r3, [pc, #240]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	2238      	movs	r2, #56	@ 0x38
 8007228:	4013      	ands	r3, r2
 800722a:	d10f      	bne.n	800724c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800722c:	4b39      	ldr	r3, [pc, #228]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xf8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	0adb      	lsrs	r3, r3, #11
 8007232:	2207      	movs	r2, #7
 8007234:	4013      	ands	r3, r2
 8007236:	2201      	movs	r2, #1
 8007238:	409a      	lsls	r2, r3
 800723a:	0013      	movs	r3, r2
 800723c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	4835      	ldr	r0, [pc, #212]	@ (8007318 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007242:	f7f8 ff7b 	bl	800013c <__udivsi3>
 8007246:	0003      	movs	r3, r0
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	e05d      	b.n	8007308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800724c:	4b31      	ldr	r3, [pc, #196]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xf8>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2238      	movs	r2, #56	@ 0x38
 8007252:	4013      	ands	r3, r2
 8007254:	2b08      	cmp	r3, #8
 8007256:	d102      	bne.n	800725e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007258:	4b30      	ldr	r3, [pc, #192]	@ (800731c <HAL_RCC_GetSysClockFreq+0x100>)
 800725a:	613b      	str	r3, [r7, #16]
 800725c:	e054      	b.n	8007308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800725e:	4b2d      	ldr	r3, [pc, #180]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	2238      	movs	r2, #56	@ 0x38
 8007264:	4013      	ands	r3, r2
 8007266:	2b10      	cmp	r3, #16
 8007268:	d138      	bne.n	80072dc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800726a:	4b2a      	ldr	r3, [pc, #168]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xf8>)
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	2203      	movs	r2, #3
 8007270:	4013      	ands	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007274:	4b27      	ldr	r3, [pc, #156]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	091b      	lsrs	r3, r3, #4
 800727a:	2207      	movs	r2, #7
 800727c:	4013      	ands	r3, r2
 800727e:	3301      	adds	r3, #1
 8007280:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b03      	cmp	r3, #3
 8007286:	d10d      	bne.n	80072a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	4824      	ldr	r0, [pc, #144]	@ (800731c <HAL_RCC_GetSysClockFreq+0x100>)
 800728c:	f7f8 ff56 	bl	800013c <__udivsi3>
 8007290:	0003      	movs	r3, r0
 8007292:	0019      	movs	r1, r3
 8007294:	4b1f      	ldr	r3, [pc, #124]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	0a1b      	lsrs	r3, r3, #8
 800729a:	227f      	movs	r2, #127	@ 0x7f
 800729c:	4013      	ands	r3, r2
 800729e:	434b      	muls	r3, r1
 80072a0:	617b      	str	r3, [r7, #20]
        break;
 80072a2:	e00d      	b.n	80072c0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	481c      	ldr	r0, [pc, #112]	@ (8007318 <HAL_RCC_GetSysClockFreq+0xfc>)
 80072a8:	f7f8 ff48 	bl	800013c <__udivsi3>
 80072ac:	0003      	movs	r3, r0
 80072ae:	0019      	movs	r1, r3
 80072b0:	4b18      	ldr	r3, [pc, #96]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	0a1b      	lsrs	r3, r3, #8
 80072b6:	227f      	movs	r2, #127	@ 0x7f
 80072b8:	4013      	ands	r3, r2
 80072ba:	434b      	muls	r3, r1
 80072bc:	617b      	str	r3, [r7, #20]
        break;
 80072be:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80072c0:	4b14      	ldr	r3, [pc, #80]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	0f5b      	lsrs	r3, r3, #29
 80072c6:	2207      	movs	r2, #7
 80072c8:	4013      	ands	r3, r2
 80072ca:	3301      	adds	r3, #1
 80072cc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80072ce:	6879      	ldr	r1, [r7, #4]
 80072d0:	6978      	ldr	r0, [r7, #20]
 80072d2:	f7f8 ff33 	bl	800013c <__udivsi3>
 80072d6:	0003      	movs	r3, r0
 80072d8:	613b      	str	r3, [r7, #16]
 80072da:	e015      	b.n	8007308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80072dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	2238      	movs	r2, #56	@ 0x38
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	d103      	bne.n	80072f0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80072e8:	2380      	movs	r3, #128	@ 0x80
 80072ea:	021b      	lsls	r3, r3, #8
 80072ec:	613b      	str	r3, [r7, #16]
 80072ee:	e00b      	b.n	8007308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80072f0:	4b08      	ldr	r3, [pc, #32]	@ (8007314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	2238      	movs	r2, #56	@ 0x38
 80072f6:	4013      	ands	r3, r2
 80072f8:	2b18      	cmp	r3, #24
 80072fa:	d103      	bne.n	8007304 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80072fc:	23fa      	movs	r3, #250	@ 0xfa
 80072fe:	01db      	lsls	r3, r3, #7
 8007300:	613b      	str	r3, [r7, #16]
 8007302:	e001      	b.n	8007308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007304:	2300      	movs	r3, #0
 8007306:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007308:	693b      	ldr	r3, [r7, #16]
}
 800730a:	0018      	movs	r0, r3
 800730c:	46bd      	mov	sp, r7
 800730e:	b006      	add	sp, #24
 8007310:	bd80      	pop	{r7, pc}
 8007312:	46c0      	nop			@ (mov r8, r8)
 8007314:	40021000 	.word	0x40021000
 8007318:	00f42400 	.word	0x00f42400
 800731c:	007a1200 	.word	0x007a1200

08007320 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007324:	4b02      	ldr	r3, [pc, #8]	@ (8007330 <HAL_RCC_GetHCLKFreq+0x10>)
 8007326:	681b      	ldr	r3, [r3, #0]
}
 8007328:	0018      	movs	r0, r3
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	46c0      	nop			@ (mov r8, r8)
 8007330:	20000000 	.word	0x20000000

08007334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007334:	b5b0      	push	{r4, r5, r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007338:	f7ff fff2 	bl	8007320 <HAL_RCC_GetHCLKFreq>
 800733c:	0004      	movs	r4, r0
 800733e:	f7ff fb3f 	bl	80069c0 <LL_RCC_GetAPB1Prescaler>
 8007342:	0003      	movs	r3, r0
 8007344:	0b1a      	lsrs	r2, r3, #12
 8007346:	4b05      	ldr	r3, [pc, #20]	@ (800735c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007348:	0092      	lsls	r2, r2, #2
 800734a:	58d3      	ldr	r3, [r2, r3]
 800734c:	221f      	movs	r2, #31
 800734e:	4013      	ands	r3, r2
 8007350:	40dc      	lsrs	r4, r3
 8007352:	0023      	movs	r3, r4
}
 8007354:	0018      	movs	r0, r3
 8007356:	46bd      	mov	sp, r7
 8007358:	bdb0      	pop	{r4, r5, r7, pc}
 800735a:	46c0      	nop			@ (mov r8, r8)
 800735c:	0800b7d0 	.word	0x0800b7d0

08007360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8007368:	2313      	movs	r3, #19
 800736a:	18fb      	adds	r3, r7, r3
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007370:	2312      	movs	r3, #18
 8007372:	18fb      	adds	r3, r7, r3
 8007374:	2200      	movs	r2, #0
 8007376:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	2380      	movs	r3, #128	@ 0x80
 800737e:	029b      	lsls	r3, r3, #10
 8007380:	4013      	ands	r3, r2
 8007382:	d100      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007384:	e0a3      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007386:	2011      	movs	r0, #17
 8007388:	183b      	adds	r3, r7, r0
 800738a:	2200      	movs	r2, #0
 800738c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800738e:	4bc3      	ldr	r3, [pc, #780]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007390:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007392:	2380      	movs	r3, #128	@ 0x80
 8007394:	055b      	lsls	r3, r3, #21
 8007396:	4013      	ands	r3, r2
 8007398:	d110      	bne.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800739a:	4bc0      	ldr	r3, [pc, #768]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800739c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800739e:	4bbf      	ldr	r3, [pc, #764]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073a0:	2180      	movs	r1, #128	@ 0x80
 80073a2:	0549      	lsls	r1, r1, #21
 80073a4:	430a      	orrs	r2, r1
 80073a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80073a8:	4bbc      	ldr	r3, [pc, #752]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073ac:	2380      	movs	r3, #128	@ 0x80
 80073ae:	055b      	lsls	r3, r3, #21
 80073b0:	4013      	ands	r3, r2
 80073b2:	60bb      	str	r3, [r7, #8]
 80073b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073b6:	183b      	adds	r3, r7, r0
 80073b8:	2201      	movs	r2, #1
 80073ba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073bc:	4bb8      	ldr	r3, [pc, #736]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	4bb7      	ldr	r3, [pc, #732]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80073c2:	2180      	movs	r1, #128	@ 0x80
 80073c4:	0049      	lsls	r1, r1, #1
 80073c6:	430a      	orrs	r2, r1
 80073c8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073ca:	f7fe f8e1 	bl	8005590 <HAL_GetTick>
 80073ce:	0003      	movs	r3, r0
 80073d0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073d2:	e00b      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073d4:	f7fe f8dc 	bl	8005590 <HAL_GetTick>
 80073d8:	0002      	movs	r2, r0
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d904      	bls.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80073e2:	2313      	movs	r3, #19
 80073e4:	18fb      	adds	r3, r7, r3
 80073e6:	2203      	movs	r2, #3
 80073e8:	701a      	strb	r2, [r3, #0]
        break;
 80073ea:	e005      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073ec:	4bac      	ldr	r3, [pc, #688]	@ (80076a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	2380      	movs	r3, #128	@ 0x80
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	4013      	ands	r3, r2
 80073f6:	d0ed      	beq.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80073f8:	2313      	movs	r3, #19
 80073fa:	18fb      	adds	r3, r7, r3
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d154      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007402:	4ba6      	ldr	r3, [pc, #664]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007404:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007406:	23c0      	movs	r3, #192	@ 0xc0
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4013      	ands	r3, r2
 800740c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d019      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	429a      	cmp	r2, r3
 800741c:	d014      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800741e:	4b9f      	ldr	r3, [pc, #636]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007422:	4aa0      	ldr	r2, [pc, #640]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007424:	4013      	ands	r3, r2
 8007426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007428:	4b9c      	ldr	r3, [pc, #624]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800742a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800742c:	4b9b      	ldr	r3, [pc, #620]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800742e:	2180      	movs	r1, #128	@ 0x80
 8007430:	0249      	lsls	r1, r1, #9
 8007432:	430a      	orrs	r2, r1
 8007434:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007436:	4b99      	ldr	r3, [pc, #612]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007438:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800743a:	4b98      	ldr	r3, [pc, #608]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800743c:	499a      	ldr	r1, [pc, #616]	@ (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800743e:	400a      	ands	r2, r1
 8007440:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007442:	4b96      	ldr	r3, [pc, #600]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2201      	movs	r2, #1
 800744c:	4013      	ands	r3, r2
 800744e:	d016      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007450:	f7fe f89e 	bl	8005590 <HAL_GetTick>
 8007454:	0003      	movs	r3, r0
 8007456:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007458:	e00c      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800745a:	f7fe f899 	bl	8005590 <HAL_GetTick>
 800745e:	0002      	movs	r2, r0
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	4a91      	ldr	r2, [pc, #580]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d904      	bls.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800746a:	2313      	movs	r3, #19
 800746c:	18fb      	adds	r3, r7, r3
 800746e:	2203      	movs	r2, #3
 8007470:	701a      	strb	r2, [r3, #0]
            break;
 8007472:	e004      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007474:	4b89      	ldr	r3, [pc, #548]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007478:	2202      	movs	r2, #2
 800747a:	4013      	ands	r3, r2
 800747c:	d0ed      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800747e:	2313      	movs	r3, #19
 8007480:	18fb      	adds	r3, r7, r3
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d10a      	bne.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007488:	4b84      	ldr	r3, [pc, #528]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800748a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800748c:	4a85      	ldr	r2, [pc, #532]	@ (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800748e:	4013      	ands	r3, r2
 8007490:	0019      	movs	r1, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007496:	4b81      	ldr	r3, [pc, #516]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007498:	430a      	orrs	r2, r1
 800749a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800749c:	e00c      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800749e:	2312      	movs	r3, #18
 80074a0:	18fb      	adds	r3, r7, r3
 80074a2:	2213      	movs	r2, #19
 80074a4:	18ba      	adds	r2, r7, r2
 80074a6:	7812      	ldrb	r2, [r2, #0]
 80074a8:	701a      	strb	r2, [r3, #0]
 80074aa:	e005      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ac:	2312      	movs	r3, #18
 80074ae:	18fb      	adds	r3, r7, r3
 80074b0:	2213      	movs	r2, #19
 80074b2:	18ba      	adds	r2, r7, r2
 80074b4:	7812      	ldrb	r2, [r2, #0]
 80074b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074b8:	2311      	movs	r3, #17
 80074ba:	18fb      	adds	r3, r7, r3
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d105      	bne.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074c2:	4b76      	ldr	r3, [pc, #472]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80074c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074c6:	4b75      	ldr	r3, [pc, #468]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80074c8:	4979      	ldr	r1, [pc, #484]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80074ca:	400a      	ands	r2, r1
 80074cc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2201      	movs	r2, #1
 80074d4:	4013      	ands	r3, r2
 80074d6:	d009      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074d8:	4b70      	ldr	r3, [pc, #448]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80074da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074dc:	2203      	movs	r2, #3
 80074de:	4393      	bics	r3, r2
 80074e0:	0019      	movs	r1, r3
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	4b6d      	ldr	r3, [pc, #436]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80074e8:	430a      	orrs	r2, r1
 80074ea:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2202      	movs	r2, #2
 80074f2:	4013      	ands	r3, r2
 80074f4:	d009      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074f6:	4b69      	ldr	r3, [pc, #420]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80074f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074fa:	220c      	movs	r2, #12
 80074fc:	4393      	bics	r3, r2
 80074fe:	0019      	movs	r1, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	4b65      	ldr	r3, [pc, #404]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007506:	430a      	orrs	r2, r1
 8007508:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2210      	movs	r2, #16
 8007510:	4013      	ands	r3, r2
 8007512:	d009      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007514:	4b61      	ldr	r3, [pc, #388]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007518:	4a66      	ldr	r2, [pc, #408]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800751a:	4013      	ands	r3, r2
 800751c:	0019      	movs	r1, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68da      	ldr	r2, [r3, #12]
 8007522:	4b5e      	ldr	r3, [pc, #376]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007524:	430a      	orrs	r2, r1
 8007526:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	2380      	movs	r3, #128	@ 0x80
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4013      	ands	r3, r2
 8007532:	d009      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007534:	4b59      	ldr	r3, [pc, #356]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007538:	4a5f      	ldr	r2, [pc, #380]	@ (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800753a:	4013      	ands	r3, r2
 800753c:	0019      	movs	r1, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	4b56      	ldr	r3, [pc, #344]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007544:	430a      	orrs	r2, r1
 8007546:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	2380      	movs	r3, #128	@ 0x80
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	4013      	ands	r3, r2
 8007552:	d009      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007554:	4b51      	ldr	r3, [pc, #324]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007558:	4a58      	ldr	r2, [pc, #352]	@ (80076bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800755a:	4013      	ands	r3, r2
 800755c:	0019      	movs	r1, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	69da      	ldr	r2, [r3, #28]
 8007562:	4b4e      	ldr	r3, [pc, #312]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007564:	430a      	orrs	r2, r1
 8007566:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2220      	movs	r2, #32
 800756e:	4013      	ands	r3, r2
 8007570:	d009      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007572:	4b4a      	ldr	r3, [pc, #296]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007576:	4a52      	ldr	r2, [pc, #328]	@ (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8007578:	4013      	ands	r3, r2
 800757a:	0019      	movs	r1, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691a      	ldr	r2, [r3, #16]
 8007580:	4b46      	ldr	r3, [pc, #280]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007582:	430a      	orrs	r2, r1
 8007584:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	2380      	movs	r3, #128	@ 0x80
 800758c:	01db      	lsls	r3, r3, #7
 800758e:	4013      	ands	r3, r2
 8007590:	d015      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007592:	4b42      	ldr	r3, [pc, #264]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	0899      	lsrs	r1, r3, #2
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1a      	ldr	r2, [r3, #32]
 800759e:	4b3f      	ldr	r3, [pc, #252]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80075a0:	430a      	orrs	r2, r1
 80075a2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1a      	ldr	r2, [r3, #32]
 80075a8:	2380      	movs	r3, #128	@ 0x80
 80075aa:	05db      	lsls	r3, r3, #23
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d106      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80075b0:	4b3a      	ldr	r3, [pc, #232]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80075b2:	68da      	ldr	r2, [r3, #12]
 80075b4:	4b39      	ldr	r3, [pc, #228]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80075b6:	2180      	movs	r1, #128	@ 0x80
 80075b8:	0249      	lsls	r1, r1, #9
 80075ba:	430a      	orrs	r2, r1
 80075bc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	2380      	movs	r3, #128	@ 0x80
 80075c4:	031b      	lsls	r3, r3, #12
 80075c6:	4013      	ands	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80075ca:	4b34      	ldr	r3, [pc, #208]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80075cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ce:	2240      	movs	r2, #64	@ 0x40
 80075d0:	4393      	bics	r3, r2
 80075d2:	0019      	movs	r1, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075d8:	4b30      	ldr	r3, [pc, #192]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80075da:	430a      	orrs	r2, r1
 80075dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	2380      	movs	r3, #128	@ 0x80
 80075e4:	039b      	lsls	r3, r3, #14
 80075e6:	4013      	ands	r3, r2
 80075e8:	d016      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80075ea:	4b2c      	ldr	r3, [pc, #176]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80075ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ee:	4a35      	ldr	r2, [pc, #212]	@ (80076c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	0019      	movs	r1, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80075f8:	4b28      	ldr	r3, [pc, #160]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80075fa:	430a      	orrs	r2, r1
 80075fc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007602:	2380      	movs	r3, #128	@ 0x80
 8007604:	03db      	lsls	r3, r3, #15
 8007606:	429a      	cmp	r2, r3
 8007608:	d106      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800760a:	4b24      	ldr	r3, [pc, #144]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	4b23      	ldr	r3, [pc, #140]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007610:	2180      	movs	r1, #128	@ 0x80
 8007612:	0449      	lsls	r1, r1, #17
 8007614:	430a      	orrs	r2, r1
 8007616:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	2380      	movs	r3, #128	@ 0x80
 800761e:	03db      	lsls	r3, r3, #15
 8007620:	4013      	ands	r3, r2
 8007622:	d016      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007624:	4b1d      	ldr	r3, [pc, #116]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007628:	4a27      	ldr	r2, [pc, #156]	@ (80076c8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800762a:	4013      	ands	r3, r2
 800762c:	0019      	movs	r1, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007632:	4b1a      	ldr	r3, [pc, #104]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007634:	430a      	orrs	r2, r1
 8007636:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800763c:	2380      	movs	r3, #128	@ 0x80
 800763e:	045b      	lsls	r3, r3, #17
 8007640:	429a      	cmp	r2, r3
 8007642:	d106      	bne.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007644:	4b15      	ldr	r3, [pc, #84]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	4b14      	ldr	r3, [pc, #80]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800764a:	2180      	movs	r1, #128	@ 0x80
 800764c:	0449      	lsls	r1, r1, #17
 800764e:	430a      	orrs	r2, r1
 8007650:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	2380      	movs	r3, #128	@ 0x80
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	4013      	ands	r3, r2
 800765c:	d016      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800765e:	4b0f      	ldr	r3, [pc, #60]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007662:	4a1a      	ldr	r2, [pc, #104]	@ (80076cc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8007664:	4013      	ands	r3, r2
 8007666:	0019      	movs	r1, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	695a      	ldr	r2, [r3, #20]
 800766c:	4b0b      	ldr	r3, [pc, #44]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800766e:	430a      	orrs	r2, r1
 8007670:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695a      	ldr	r2, [r3, #20]
 8007676:	2380      	movs	r3, #128	@ 0x80
 8007678:	01db      	lsls	r3, r3, #7
 800767a:	429a      	cmp	r2, r3
 800767c:	d106      	bne.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800767e:	4b07      	ldr	r3, [pc, #28]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	4b06      	ldr	r3, [pc, #24]	@ (800769c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007684:	2180      	movs	r1, #128	@ 0x80
 8007686:	0249      	lsls	r1, r1, #9
 8007688:	430a      	orrs	r2, r1
 800768a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800768c:	2312      	movs	r3, #18
 800768e:	18fb      	adds	r3, r7, r3
 8007690:	781b      	ldrb	r3, [r3, #0]
}
 8007692:	0018      	movs	r0, r3
 8007694:	46bd      	mov	sp, r7
 8007696:	b006      	add	sp, #24
 8007698:	bd80      	pop	{r7, pc}
 800769a:	46c0      	nop			@ (mov r8, r8)
 800769c:	40021000 	.word	0x40021000
 80076a0:	40007000 	.word	0x40007000
 80076a4:	fffffcff 	.word	0xfffffcff
 80076a8:	fffeffff 	.word	0xfffeffff
 80076ac:	00001388 	.word	0x00001388
 80076b0:	efffffff 	.word	0xefffffff
 80076b4:	fffff3ff 	.word	0xfffff3ff
 80076b8:	fff3ffff 	.word	0xfff3ffff
 80076bc:	ffcfffff 	.word	0xffcfffff
 80076c0:	ffffcfff 	.word	0xffffcfff
 80076c4:	ffbfffff 	.word	0xffbfffff
 80076c8:	feffffff 	.word	0xfeffffff
 80076cc:	ffff3fff 	.word	0xffff3fff

080076d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e0a8      	b.n	8007834 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d109      	bne.n	80076fe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	2382      	movs	r3, #130	@ 0x82
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d009      	beq.n	800770a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	61da      	str	r2, [r3, #28]
 80076fc:	e005      	b.n	800770a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	225d      	movs	r2, #93	@ 0x5d
 8007714:	5c9b      	ldrb	r3, [r3, r2]
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d107      	bne.n	800772c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	225c      	movs	r2, #92	@ 0x5c
 8007720:	2100      	movs	r1, #0
 8007722:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	0018      	movs	r0, r3
 8007728:	f7fd fd04 	bl	8005134 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	225d      	movs	r2, #93	@ 0x5d
 8007730:	2102      	movs	r1, #2
 8007732:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2140      	movs	r1, #64	@ 0x40
 8007740:	438a      	bics	r2, r1
 8007742:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	23e0      	movs	r3, #224	@ 0xe0
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	429a      	cmp	r2, r3
 800774e:	d902      	bls.n	8007756 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007750:	2300      	movs	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	e002      	b.n	800775c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007756:	2380      	movs	r3, #128	@ 0x80
 8007758:	015b      	lsls	r3, r3, #5
 800775a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	23f0      	movs	r3, #240	@ 0xf0
 8007762:	011b      	lsls	r3, r3, #4
 8007764:	429a      	cmp	r2, r3
 8007766:	d008      	beq.n	800777a <HAL_SPI_Init+0xaa>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	23e0      	movs	r3, #224	@ 0xe0
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	429a      	cmp	r2, r3
 8007772:	d002      	beq.n	800777a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	2382      	movs	r3, #130	@ 0x82
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	401a      	ands	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6899      	ldr	r1, [r3, #8]
 8007788:	2384      	movs	r3, #132	@ 0x84
 800778a:	021b      	lsls	r3, r3, #8
 800778c:	400b      	ands	r3, r1
 800778e:	431a      	orrs	r2, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	2102      	movs	r1, #2
 8007796:	400b      	ands	r3, r1
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	2101      	movs	r1, #1
 80077a0:	400b      	ands	r3, r1
 80077a2:	431a      	orrs	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6999      	ldr	r1, [r3, #24]
 80077a8:	2380      	movs	r3, #128	@ 0x80
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	400b      	ands	r3, r1
 80077ae:	431a      	orrs	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	2138      	movs	r1, #56	@ 0x38
 80077b6:	400b      	ands	r3, r1
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	2180      	movs	r1, #128	@ 0x80
 80077c0:	400b      	ands	r3, r1
 80077c2:	431a      	orrs	r2, r3
 80077c4:	0011      	movs	r1, r2
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80077ca:	2380      	movs	r3, #128	@ 0x80
 80077cc:	019b      	lsls	r3, r3, #6
 80077ce:	401a      	ands	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	0c1b      	lsrs	r3, r3, #16
 80077de:	2204      	movs	r2, #4
 80077e0:	401a      	ands	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e6:	2110      	movs	r1, #16
 80077e8:	400b      	ands	r3, r1
 80077ea:	431a      	orrs	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f0:	2108      	movs	r1, #8
 80077f2:	400b      	ands	r3, r1
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68d9      	ldr	r1, [r3, #12]
 80077fa:	23f0      	movs	r3, #240	@ 0xf0
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	400b      	ands	r3, r1
 8007800:	431a      	orrs	r2, r3
 8007802:	0011      	movs	r1, r2
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	2380      	movs	r3, #128	@ 0x80
 8007808:	015b      	lsls	r3, r3, #5
 800780a:	401a      	ands	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	430a      	orrs	r2, r1
 8007812:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	69da      	ldr	r2, [r3, #28]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4907      	ldr	r1, [pc, #28]	@ (800783c <HAL_SPI_Init+0x16c>)
 8007820:	400a      	ands	r2, r1
 8007822:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	225d      	movs	r2, #93	@ 0x5d
 800782e:	2101      	movs	r1, #1
 8007830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	0018      	movs	r0, r3
 8007836:	46bd      	mov	sp, r7
 8007838:	b004      	add	sp, #16
 800783a:	bd80      	pop	{r7, pc}
 800783c:	fffff7ff 	.word	0xfffff7ff

08007840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e046      	b.n	80078e0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2288      	movs	r2, #136	@ 0x88
 8007856:	589b      	ldr	r3, [r3, r2]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d107      	bne.n	800786c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2284      	movs	r2, #132	@ 0x84
 8007860:	2100      	movs	r1, #0
 8007862:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	0018      	movs	r0, r3
 8007868:	f7fd fcae 	bl	80051c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2288      	movs	r2, #136	@ 0x88
 8007870:	2124      	movs	r1, #36	@ 0x24
 8007872:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2101      	movs	r1, #1
 8007880:	438a      	bics	r2, r1
 8007882:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	0018      	movs	r0, r3
 8007890:	f000 fb8e 	bl	8007fb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	0018      	movs	r0, r3
 8007898:	f000 f8cc 	bl	8007a34 <UART_SetConfig>
 800789c:	0003      	movs	r3, r0
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d101      	bne.n	80078a6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e01c      	b.n	80078e0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	490d      	ldr	r1, [pc, #52]	@ (80078e8 <HAL_UART_Init+0xa8>)
 80078b2:	400a      	ands	r2, r1
 80078b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	212a      	movs	r1, #42	@ 0x2a
 80078c2:	438a      	bics	r2, r1
 80078c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2101      	movs	r1, #1
 80078d2:	430a      	orrs	r2, r1
 80078d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	0018      	movs	r0, r3
 80078da:	f000 fc1d 	bl	8008118 <UART_CheckIdleState>
 80078de:	0003      	movs	r3, r0
}
 80078e0:	0018      	movs	r0, r3
 80078e2:	46bd      	mov	sp, r7
 80078e4:	b002      	add	sp, #8
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	ffffb7ff 	.word	0xffffb7ff

080078ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08a      	sub	sp, #40	@ 0x28
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	1dbb      	adds	r3, r7, #6
 80078fa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2288      	movs	r2, #136	@ 0x88
 8007900:	589b      	ldr	r3, [r3, r2]
 8007902:	2b20      	cmp	r3, #32
 8007904:	d000      	beq.n	8007908 <HAL_UART_Transmit+0x1c>
 8007906:	e090      	b.n	8007a2a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <HAL_UART_Transmit+0x2a>
 800790e:	1dbb      	adds	r3, r7, #6
 8007910:	881b      	ldrh	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e088      	b.n	8007a2c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	2380      	movs	r3, #128	@ 0x80
 8007920:	015b      	lsls	r3, r3, #5
 8007922:	429a      	cmp	r2, r3
 8007924:	d109      	bne.n	800793a <HAL_UART_Transmit+0x4e>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d105      	bne.n	800793a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2201      	movs	r2, #1
 8007932:	4013      	ands	r3, r2
 8007934:	d001      	beq.n	800793a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e078      	b.n	8007a2c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2290      	movs	r2, #144	@ 0x90
 800793e:	2100      	movs	r1, #0
 8007940:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2288      	movs	r2, #136	@ 0x88
 8007946:	2121      	movs	r1, #33	@ 0x21
 8007948:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800794a:	f7fd fe21 	bl	8005590 <HAL_GetTick>
 800794e:	0003      	movs	r3, r0
 8007950:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	1dba      	adds	r2, r7, #6
 8007956:	2154      	movs	r1, #84	@ 0x54
 8007958:	8812      	ldrh	r2, [r2, #0]
 800795a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	1dba      	adds	r2, r7, #6
 8007960:	2156      	movs	r1, #86	@ 0x56
 8007962:	8812      	ldrh	r2, [r2, #0]
 8007964:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	689a      	ldr	r2, [r3, #8]
 800796a:	2380      	movs	r3, #128	@ 0x80
 800796c:	015b      	lsls	r3, r3, #5
 800796e:	429a      	cmp	r2, r3
 8007970:	d108      	bne.n	8007984 <HAL_UART_Transmit+0x98>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d104      	bne.n	8007984 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800797a:	2300      	movs	r3, #0
 800797c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	e003      	b.n	800798c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007988:	2300      	movs	r3, #0
 800798a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800798c:	e030      	b.n	80079f0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	0013      	movs	r3, r2
 8007998:	2200      	movs	r2, #0
 800799a:	2180      	movs	r1, #128	@ 0x80
 800799c:	f000 fc66 	bl	800826c <UART_WaitOnFlagUntilTimeout>
 80079a0:	1e03      	subs	r3, r0, #0
 80079a2:	d005      	beq.n	80079b0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2288      	movs	r2, #136	@ 0x88
 80079a8:	2120      	movs	r1, #32
 80079aa:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e03d      	b.n	8007a2c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10b      	bne.n	80079ce <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	001a      	movs	r2, r3
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	05d2      	lsls	r2, r2, #23
 80079c2:	0dd2      	lsrs	r2, r2, #23
 80079c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	3302      	adds	r3, #2
 80079ca:	61bb      	str	r3, [r7, #24]
 80079cc:	e007      	b.n	80079de <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	781a      	ldrb	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	3301      	adds	r3, #1
 80079dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2256      	movs	r2, #86	@ 0x56
 80079e2:	5a9b      	ldrh	r3, [r3, r2]
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	3b01      	subs	r3, #1
 80079e8:	b299      	uxth	r1, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2256      	movs	r2, #86	@ 0x56
 80079ee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2256      	movs	r2, #86	@ 0x56
 80079f4:	5a9b      	ldrh	r3, [r3, r2]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1c8      	bne.n	800798e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	0013      	movs	r3, r2
 8007a06:	2200      	movs	r2, #0
 8007a08:	2140      	movs	r1, #64	@ 0x40
 8007a0a:	f000 fc2f 	bl	800826c <UART_WaitOnFlagUntilTimeout>
 8007a0e:	1e03      	subs	r3, r0, #0
 8007a10:	d005      	beq.n	8007a1e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2288      	movs	r2, #136	@ 0x88
 8007a16:	2120      	movs	r1, #32
 8007a18:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e006      	b.n	8007a2c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2288      	movs	r2, #136	@ 0x88
 8007a22:	2120      	movs	r1, #32
 8007a24:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	e000      	b.n	8007a2c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007a2a:	2302      	movs	r3, #2
  }
}
 8007a2c:	0018      	movs	r0, r3
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	b008      	add	sp, #32
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a34:	b5b0      	push	{r4, r5, r7, lr}
 8007a36:	b090      	sub	sp, #64	@ 0x40
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a3c:	231a      	movs	r3, #26
 8007a3e:	2220      	movs	r2, #32
 8007a40:	189b      	adds	r3, r3, r2
 8007a42:	19db      	adds	r3, r3, r7
 8007a44:	2200      	movs	r2, #0
 8007a46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4a:	689a      	ldr	r2, [r3, #8]
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	431a      	orrs	r2, r3
 8007a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	431a      	orrs	r2, r3
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4aaf      	ldr	r2, [pc, #700]	@ (8007d24 <UART_SetConfig+0x2f0>)
 8007a68:	4013      	ands	r3, r2
 8007a6a:	0019      	movs	r1, r3
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a72:	430b      	orrs	r3, r1
 8007a74:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	4aaa      	ldr	r2, [pc, #680]	@ (8007d28 <UART_SetConfig+0x2f4>)
 8007a7e:	4013      	ands	r3, r2
 8007a80:	0018      	movs	r0, r3
 8007a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a84:	68d9      	ldr	r1, [r3, #12]
 8007a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	0003      	movs	r3, r0
 8007a8c:	430b      	orrs	r3, r1
 8007a8e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4aa4      	ldr	r2, [pc, #656]	@ (8007d2c <UART_SetConfig+0x2f8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d004      	beq.n	8007aaa <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	4a9f      	ldr	r2, [pc, #636]	@ (8007d30 <UART_SetConfig+0x2fc>)
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	0019      	movs	r1, r3
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007abc:	430b      	orrs	r3, r1
 8007abe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac6:	220f      	movs	r2, #15
 8007ac8:	4393      	bics	r3, r2
 8007aca:	0018      	movs	r0, r3
 8007acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ace:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	0003      	movs	r3, r0
 8007ad6:	430b      	orrs	r3, r1
 8007ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a95      	ldr	r2, [pc, #596]	@ (8007d34 <UART_SetConfig+0x300>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d131      	bne.n	8007b48 <UART_SetConfig+0x114>
 8007ae4:	4b94      	ldr	r3, [pc, #592]	@ (8007d38 <UART_SetConfig+0x304>)
 8007ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ae8:	2203      	movs	r2, #3
 8007aea:	4013      	ands	r3, r2
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d01d      	beq.n	8007b2c <UART_SetConfig+0xf8>
 8007af0:	d823      	bhi.n	8007b3a <UART_SetConfig+0x106>
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d00c      	beq.n	8007b10 <UART_SetConfig+0xdc>
 8007af6:	d820      	bhi.n	8007b3a <UART_SetConfig+0x106>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <UART_SetConfig+0xce>
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d00e      	beq.n	8007b1e <UART_SetConfig+0xea>
 8007b00:	e01b      	b.n	8007b3a <UART_SetConfig+0x106>
 8007b02:	231b      	movs	r3, #27
 8007b04:	2220      	movs	r2, #32
 8007b06:	189b      	adds	r3, r3, r2
 8007b08:	19db      	adds	r3, r3, r7
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
 8007b0e:	e0b4      	b.n	8007c7a <UART_SetConfig+0x246>
 8007b10:	231b      	movs	r3, #27
 8007b12:	2220      	movs	r2, #32
 8007b14:	189b      	adds	r3, r3, r2
 8007b16:	19db      	adds	r3, r3, r7
 8007b18:	2202      	movs	r2, #2
 8007b1a:	701a      	strb	r2, [r3, #0]
 8007b1c:	e0ad      	b.n	8007c7a <UART_SetConfig+0x246>
 8007b1e:	231b      	movs	r3, #27
 8007b20:	2220      	movs	r2, #32
 8007b22:	189b      	adds	r3, r3, r2
 8007b24:	19db      	adds	r3, r3, r7
 8007b26:	2204      	movs	r2, #4
 8007b28:	701a      	strb	r2, [r3, #0]
 8007b2a:	e0a6      	b.n	8007c7a <UART_SetConfig+0x246>
 8007b2c:	231b      	movs	r3, #27
 8007b2e:	2220      	movs	r2, #32
 8007b30:	189b      	adds	r3, r3, r2
 8007b32:	19db      	adds	r3, r3, r7
 8007b34:	2208      	movs	r2, #8
 8007b36:	701a      	strb	r2, [r3, #0]
 8007b38:	e09f      	b.n	8007c7a <UART_SetConfig+0x246>
 8007b3a:	231b      	movs	r3, #27
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	189b      	adds	r3, r3, r2
 8007b40:	19db      	adds	r3, r3, r7
 8007b42:	2210      	movs	r2, #16
 8007b44:	701a      	strb	r2, [r3, #0]
 8007b46:	e098      	b.n	8007c7a <UART_SetConfig+0x246>
 8007b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a7b      	ldr	r2, [pc, #492]	@ (8007d3c <UART_SetConfig+0x308>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d131      	bne.n	8007bb6 <UART_SetConfig+0x182>
 8007b52:	4b79      	ldr	r3, [pc, #484]	@ (8007d38 <UART_SetConfig+0x304>)
 8007b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b56:	220c      	movs	r2, #12
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b0c      	cmp	r3, #12
 8007b5c:	d01d      	beq.n	8007b9a <UART_SetConfig+0x166>
 8007b5e:	d823      	bhi.n	8007ba8 <UART_SetConfig+0x174>
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d00c      	beq.n	8007b7e <UART_SetConfig+0x14a>
 8007b64:	d820      	bhi.n	8007ba8 <UART_SetConfig+0x174>
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d002      	beq.n	8007b70 <UART_SetConfig+0x13c>
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	d00e      	beq.n	8007b8c <UART_SetConfig+0x158>
 8007b6e:	e01b      	b.n	8007ba8 <UART_SetConfig+0x174>
 8007b70:	231b      	movs	r3, #27
 8007b72:	2220      	movs	r2, #32
 8007b74:	189b      	adds	r3, r3, r2
 8007b76:	19db      	adds	r3, r3, r7
 8007b78:	2200      	movs	r2, #0
 8007b7a:	701a      	strb	r2, [r3, #0]
 8007b7c:	e07d      	b.n	8007c7a <UART_SetConfig+0x246>
 8007b7e:	231b      	movs	r3, #27
 8007b80:	2220      	movs	r2, #32
 8007b82:	189b      	adds	r3, r3, r2
 8007b84:	19db      	adds	r3, r3, r7
 8007b86:	2202      	movs	r2, #2
 8007b88:	701a      	strb	r2, [r3, #0]
 8007b8a:	e076      	b.n	8007c7a <UART_SetConfig+0x246>
 8007b8c:	231b      	movs	r3, #27
 8007b8e:	2220      	movs	r2, #32
 8007b90:	189b      	adds	r3, r3, r2
 8007b92:	19db      	adds	r3, r3, r7
 8007b94:	2204      	movs	r2, #4
 8007b96:	701a      	strb	r2, [r3, #0]
 8007b98:	e06f      	b.n	8007c7a <UART_SetConfig+0x246>
 8007b9a:	231b      	movs	r3, #27
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	189b      	adds	r3, r3, r2
 8007ba0:	19db      	adds	r3, r3, r7
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	e068      	b.n	8007c7a <UART_SetConfig+0x246>
 8007ba8:	231b      	movs	r3, #27
 8007baa:	2220      	movs	r2, #32
 8007bac:	189b      	adds	r3, r3, r2
 8007bae:	19db      	adds	r3, r3, r7
 8007bb0:	2210      	movs	r2, #16
 8007bb2:	701a      	strb	r2, [r3, #0]
 8007bb4:	e061      	b.n	8007c7a <UART_SetConfig+0x246>
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a61      	ldr	r2, [pc, #388]	@ (8007d40 <UART_SetConfig+0x30c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d106      	bne.n	8007bce <UART_SetConfig+0x19a>
 8007bc0:	231b      	movs	r3, #27
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	189b      	adds	r3, r3, r2
 8007bc6:	19db      	adds	r3, r3, r7
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]
 8007bcc:	e055      	b.n	8007c7a <UART_SetConfig+0x246>
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a5c      	ldr	r2, [pc, #368]	@ (8007d44 <UART_SetConfig+0x310>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d106      	bne.n	8007be6 <UART_SetConfig+0x1b2>
 8007bd8:	231b      	movs	r3, #27
 8007bda:	2220      	movs	r2, #32
 8007bdc:	189b      	adds	r3, r3, r2
 8007bde:	19db      	adds	r3, r3, r7
 8007be0:	2200      	movs	r2, #0
 8007be2:	701a      	strb	r2, [r3, #0]
 8007be4:	e049      	b.n	8007c7a <UART_SetConfig+0x246>
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a50      	ldr	r2, [pc, #320]	@ (8007d2c <UART_SetConfig+0x2f8>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d13e      	bne.n	8007c6e <UART_SetConfig+0x23a>
 8007bf0:	4b51      	ldr	r3, [pc, #324]	@ (8007d38 <UART_SetConfig+0x304>)
 8007bf2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bf4:	23c0      	movs	r3, #192	@ 0xc0
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	22c0      	movs	r2, #192	@ 0xc0
 8007bfc:	0112      	lsls	r2, r2, #4
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d027      	beq.n	8007c52 <UART_SetConfig+0x21e>
 8007c02:	22c0      	movs	r2, #192	@ 0xc0
 8007c04:	0112      	lsls	r2, r2, #4
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d82a      	bhi.n	8007c60 <UART_SetConfig+0x22c>
 8007c0a:	2280      	movs	r2, #128	@ 0x80
 8007c0c:	0112      	lsls	r2, r2, #4
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d011      	beq.n	8007c36 <UART_SetConfig+0x202>
 8007c12:	2280      	movs	r2, #128	@ 0x80
 8007c14:	0112      	lsls	r2, r2, #4
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d822      	bhi.n	8007c60 <UART_SetConfig+0x22c>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d004      	beq.n	8007c28 <UART_SetConfig+0x1f4>
 8007c1e:	2280      	movs	r2, #128	@ 0x80
 8007c20:	00d2      	lsls	r2, r2, #3
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00e      	beq.n	8007c44 <UART_SetConfig+0x210>
 8007c26:	e01b      	b.n	8007c60 <UART_SetConfig+0x22c>
 8007c28:	231b      	movs	r3, #27
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	189b      	adds	r3, r3, r2
 8007c2e:	19db      	adds	r3, r3, r7
 8007c30:	2200      	movs	r2, #0
 8007c32:	701a      	strb	r2, [r3, #0]
 8007c34:	e021      	b.n	8007c7a <UART_SetConfig+0x246>
 8007c36:	231b      	movs	r3, #27
 8007c38:	2220      	movs	r2, #32
 8007c3a:	189b      	adds	r3, r3, r2
 8007c3c:	19db      	adds	r3, r3, r7
 8007c3e:	2202      	movs	r2, #2
 8007c40:	701a      	strb	r2, [r3, #0]
 8007c42:	e01a      	b.n	8007c7a <UART_SetConfig+0x246>
 8007c44:	231b      	movs	r3, #27
 8007c46:	2220      	movs	r2, #32
 8007c48:	189b      	adds	r3, r3, r2
 8007c4a:	19db      	adds	r3, r3, r7
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	e013      	b.n	8007c7a <UART_SetConfig+0x246>
 8007c52:	231b      	movs	r3, #27
 8007c54:	2220      	movs	r2, #32
 8007c56:	189b      	adds	r3, r3, r2
 8007c58:	19db      	adds	r3, r3, r7
 8007c5a:	2208      	movs	r2, #8
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e00c      	b.n	8007c7a <UART_SetConfig+0x246>
 8007c60:	231b      	movs	r3, #27
 8007c62:	2220      	movs	r2, #32
 8007c64:	189b      	adds	r3, r3, r2
 8007c66:	19db      	adds	r3, r3, r7
 8007c68:	2210      	movs	r2, #16
 8007c6a:	701a      	strb	r2, [r3, #0]
 8007c6c:	e005      	b.n	8007c7a <UART_SetConfig+0x246>
 8007c6e:	231b      	movs	r3, #27
 8007c70:	2220      	movs	r2, #32
 8007c72:	189b      	adds	r3, r3, r2
 8007c74:	19db      	adds	r3, r3, r7
 8007c76:	2210      	movs	r2, #16
 8007c78:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8007d2c <UART_SetConfig+0x2f8>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d000      	beq.n	8007c86 <UART_SetConfig+0x252>
 8007c84:	e0a9      	b.n	8007dda <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c86:	231b      	movs	r3, #27
 8007c88:	2220      	movs	r2, #32
 8007c8a:	189b      	adds	r3, r3, r2
 8007c8c:	19db      	adds	r3, r3, r7
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	2b08      	cmp	r3, #8
 8007c92:	d015      	beq.n	8007cc0 <UART_SetConfig+0x28c>
 8007c94:	dc18      	bgt.n	8007cc8 <UART_SetConfig+0x294>
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	d00d      	beq.n	8007cb6 <UART_SetConfig+0x282>
 8007c9a:	dc15      	bgt.n	8007cc8 <UART_SetConfig+0x294>
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <UART_SetConfig+0x272>
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d005      	beq.n	8007cb0 <UART_SetConfig+0x27c>
 8007ca4:	e010      	b.n	8007cc8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ca6:	f7ff fb45 	bl	8007334 <HAL_RCC_GetPCLK1Freq>
 8007caa:	0003      	movs	r3, r0
 8007cac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cae:	e014      	b.n	8007cda <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cb0:	4b25      	ldr	r3, [pc, #148]	@ (8007d48 <UART_SetConfig+0x314>)
 8007cb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cb4:	e011      	b.n	8007cda <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cb6:	f7ff fab1 	bl	800721c <HAL_RCC_GetSysClockFreq>
 8007cba:	0003      	movs	r3, r0
 8007cbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cbe:	e00c      	b.n	8007cda <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cc0:	2380      	movs	r3, #128	@ 0x80
 8007cc2:	021b      	lsls	r3, r3, #8
 8007cc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007cc6:	e008      	b.n	8007cda <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007ccc:	231a      	movs	r3, #26
 8007cce:	2220      	movs	r2, #32
 8007cd0:	189b      	adds	r3, r3, r2
 8007cd2:	19db      	adds	r3, r3, r7
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	701a      	strb	r2, [r3, #0]
        break;
 8007cd8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d100      	bne.n	8007ce2 <UART_SetConfig+0x2ae>
 8007ce0:	e14b      	b.n	8007f7a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ce6:	4b19      	ldr	r3, [pc, #100]	@ (8007d4c <UART_SetConfig+0x318>)
 8007ce8:	0052      	lsls	r2, r2, #1
 8007cea:	5ad3      	ldrh	r3, [r2, r3]
 8007cec:	0019      	movs	r1, r3
 8007cee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007cf0:	f7f8 fa24 	bl	800013c <__udivsi3>
 8007cf4:	0003      	movs	r3, r0
 8007cf6:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	0013      	movs	r3, r2
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	189b      	adds	r3, r3, r2
 8007d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d305      	bcc.n	8007d14 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d91d      	bls.n	8007d50 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007d14:	231a      	movs	r3, #26
 8007d16:	2220      	movs	r2, #32
 8007d18:	189b      	adds	r3, r3, r2
 8007d1a:	19db      	adds	r3, r3, r7
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	701a      	strb	r2, [r3, #0]
 8007d20:	e12b      	b.n	8007f7a <UART_SetConfig+0x546>
 8007d22:	46c0      	nop			@ (mov r8, r8)
 8007d24:	cfff69f3 	.word	0xcfff69f3
 8007d28:	ffffcfff 	.word	0xffffcfff
 8007d2c:	40008000 	.word	0x40008000
 8007d30:	11fff4ff 	.word	0x11fff4ff
 8007d34:	40013800 	.word	0x40013800
 8007d38:	40021000 	.word	0x40021000
 8007d3c:	40004400 	.word	0x40004400
 8007d40:	40004800 	.word	0x40004800
 8007d44:	40004c00 	.word	0x40004c00
 8007d48:	00f42400 	.word	0x00f42400
 8007d4c:	0800b7f0 	.word	0x0800b7f0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d52:	61bb      	str	r3, [r7, #24]
 8007d54:	2300      	movs	r3, #0
 8007d56:	61fb      	str	r3, [r7, #28]
 8007d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d5c:	4b92      	ldr	r3, [pc, #584]	@ (8007fa8 <UART_SetConfig+0x574>)
 8007d5e:	0052      	lsls	r2, r2, #1
 8007d60:	5ad3      	ldrh	r3, [r2, r3]
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	2300      	movs	r3, #0
 8007d66:	617b      	str	r3, [r7, #20]
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	69b8      	ldr	r0, [r7, #24]
 8007d6e:	69f9      	ldr	r1, [r7, #28]
 8007d70:	f7f8 fbd2 	bl	8000518 <__aeabi_uldivmod>
 8007d74:	0002      	movs	r2, r0
 8007d76:	000b      	movs	r3, r1
 8007d78:	0e11      	lsrs	r1, r2, #24
 8007d7a:	021d      	lsls	r5, r3, #8
 8007d7c:	430d      	orrs	r5, r1
 8007d7e:	0214      	lsls	r4, r2, #8
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	085b      	lsrs	r3, r3, #1
 8007d86:	60bb      	str	r3, [r7, #8]
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68b8      	ldr	r0, [r7, #8]
 8007d8e:	68f9      	ldr	r1, [r7, #12]
 8007d90:	1900      	adds	r0, r0, r4
 8007d92:	4169      	adcs	r1, r5
 8007d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	603b      	str	r3, [r7, #0]
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	607b      	str	r3, [r7, #4]
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f7f8 fbb9 	bl	8000518 <__aeabi_uldivmod>
 8007da6:	0002      	movs	r2, r0
 8007da8:	000b      	movs	r3, r1
 8007daa:	0013      	movs	r3, r2
 8007dac:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007db0:	23c0      	movs	r3, #192	@ 0xc0
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d309      	bcc.n	8007dcc <UART_SetConfig+0x398>
 8007db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dba:	2380      	movs	r3, #128	@ 0x80
 8007dbc:	035b      	lsls	r3, r3, #13
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d204      	bcs.n	8007dcc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dc8:	60da      	str	r2, [r3, #12]
 8007dca:	e0d6      	b.n	8007f7a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8007dcc:	231a      	movs	r3, #26
 8007dce:	2220      	movs	r2, #32
 8007dd0:	189b      	adds	r3, r3, r2
 8007dd2:	19db      	adds	r3, r3, r7
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	701a      	strb	r2, [r3, #0]
 8007dd8:	e0cf      	b.n	8007f7a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ddc:	69da      	ldr	r2, [r3, #28]
 8007dde:	2380      	movs	r3, #128	@ 0x80
 8007de0:	021b      	lsls	r3, r3, #8
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d000      	beq.n	8007de8 <UART_SetConfig+0x3b4>
 8007de6:	e070      	b.n	8007eca <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8007de8:	231b      	movs	r3, #27
 8007dea:	2220      	movs	r2, #32
 8007dec:	189b      	adds	r3, r3, r2
 8007dee:	19db      	adds	r3, r3, r7
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2b08      	cmp	r3, #8
 8007df4:	d015      	beq.n	8007e22 <UART_SetConfig+0x3ee>
 8007df6:	dc18      	bgt.n	8007e2a <UART_SetConfig+0x3f6>
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d00d      	beq.n	8007e18 <UART_SetConfig+0x3e4>
 8007dfc:	dc15      	bgt.n	8007e2a <UART_SetConfig+0x3f6>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <UART_SetConfig+0x3d4>
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	d005      	beq.n	8007e12 <UART_SetConfig+0x3de>
 8007e06:	e010      	b.n	8007e2a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e08:	f7ff fa94 	bl	8007334 <HAL_RCC_GetPCLK1Freq>
 8007e0c:	0003      	movs	r3, r0
 8007e0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e10:	e014      	b.n	8007e3c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e12:	4b66      	ldr	r3, [pc, #408]	@ (8007fac <UART_SetConfig+0x578>)
 8007e14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e16:	e011      	b.n	8007e3c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e18:	f7ff fa00 	bl	800721c <HAL_RCC_GetSysClockFreq>
 8007e1c:	0003      	movs	r3, r0
 8007e1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e20:	e00c      	b.n	8007e3c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e22:	2380      	movs	r3, #128	@ 0x80
 8007e24:	021b      	lsls	r3, r3, #8
 8007e26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e28:	e008      	b.n	8007e3c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007e2e:	231a      	movs	r3, #26
 8007e30:	2220      	movs	r2, #32
 8007e32:	189b      	adds	r3, r3, r2
 8007e34:	19db      	adds	r3, r3, r7
 8007e36:	2201      	movs	r2, #1
 8007e38:	701a      	strb	r2, [r3, #0]
        break;
 8007e3a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d100      	bne.n	8007e44 <UART_SetConfig+0x410>
 8007e42:	e09a      	b.n	8007f7a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e48:	4b57      	ldr	r3, [pc, #348]	@ (8007fa8 <UART_SetConfig+0x574>)
 8007e4a:	0052      	lsls	r2, r2, #1
 8007e4c:	5ad3      	ldrh	r3, [r2, r3]
 8007e4e:	0019      	movs	r1, r3
 8007e50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007e52:	f7f8 f973 	bl	800013c <__udivsi3>
 8007e56:	0003      	movs	r3, r0
 8007e58:	005a      	lsls	r2, r3, #1
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	085b      	lsrs	r3, r3, #1
 8007e60:	18d2      	adds	r2, r2, r3
 8007e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	0019      	movs	r1, r3
 8007e68:	0010      	movs	r0, r2
 8007e6a:	f7f8 f967 	bl	800013c <__udivsi3>
 8007e6e:	0003      	movs	r3, r0
 8007e70:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e74:	2b0f      	cmp	r3, #15
 8007e76:	d921      	bls.n	8007ebc <UART_SetConfig+0x488>
 8007e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e7a:	2380      	movs	r3, #128	@ 0x80
 8007e7c:	025b      	lsls	r3, r3, #9
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d21c      	bcs.n	8007ebc <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	200e      	movs	r0, #14
 8007e88:	2420      	movs	r4, #32
 8007e8a:	1903      	adds	r3, r0, r4
 8007e8c:	19db      	adds	r3, r3, r7
 8007e8e:	210f      	movs	r1, #15
 8007e90:	438a      	bics	r2, r1
 8007e92:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e96:	085b      	lsrs	r3, r3, #1
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2207      	movs	r2, #7
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	b299      	uxth	r1, r3
 8007ea0:	1903      	adds	r3, r0, r4
 8007ea2:	19db      	adds	r3, r3, r7
 8007ea4:	1902      	adds	r2, r0, r4
 8007ea6:	19d2      	adds	r2, r2, r7
 8007ea8:	8812      	ldrh	r2, [r2, #0]
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	1902      	adds	r2, r0, r4
 8007eb4:	19d2      	adds	r2, r2, r7
 8007eb6:	8812      	ldrh	r2, [r2, #0]
 8007eb8:	60da      	str	r2, [r3, #12]
 8007eba:	e05e      	b.n	8007f7a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007ebc:	231a      	movs	r3, #26
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	189b      	adds	r3, r3, r2
 8007ec2:	19db      	adds	r3, r3, r7
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	701a      	strb	r2, [r3, #0]
 8007ec8:	e057      	b.n	8007f7a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007eca:	231b      	movs	r3, #27
 8007ecc:	2220      	movs	r2, #32
 8007ece:	189b      	adds	r3, r3, r2
 8007ed0:	19db      	adds	r3, r3, r7
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d015      	beq.n	8007f04 <UART_SetConfig+0x4d0>
 8007ed8:	dc18      	bgt.n	8007f0c <UART_SetConfig+0x4d8>
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d00d      	beq.n	8007efa <UART_SetConfig+0x4c6>
 8007ede:	dc15      	bgt.n	8007f0c <UART_SetConfig+0x4d8>
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <UART_SetConfig+0x4b6>
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d005      	beq.n	8007ef4 <UART_SetConfig+0x4c0>
 8007ee8:	e010      	b.n	8007f0c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eea:	f7ff fa23 	bl	8007334 <HAL_RCC_GetPCLK1Freq>
 8007eee:	0003      	movs	r3, r0
 8007ef0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ef2:	e014      	b.n	8007f1e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8007fac <UART_SetConfig+0x578>)
 8007ef6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ef8:	e011      	b.n	8007f1e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007efa:	f7ff f98f 	bl	800721c <HAL_RCC_GetSysClockFreq>
 8007efe:	0003      	movs	r3, r0
 8007f00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f02:	e00c      	b.n	8007f1e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f04:	2380      	movs	r3, #128	@ 0x80
 8007f06:	021b      	lsls	r3, r3, #8
 8007f08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f0a:	e008      	b.n	8007f1e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8007f10:	231a      	movs	r3, #26
 8007f12:	2220      	movs	r2, #32
 8007f14:	189b      	adds	r3, r3, r2
 8007f16:	19db      	adds	r3, r3, r7
 8007f18:	2201      	movs	r2, #1
 8007f1a:	701a      	strb	r2, [r3, #0]
        break;
 8007f1c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d02a      	beq.n	8007f7a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f28:	4b1f      	ldr	r3, [pc, #124]	@ (8007fa8 <UART_SetConfig+0x574>)
 8007f2a:	0052      	lsls	r2, r2, #1
 8007f2c:	5ad3      	ldrh	r3, [r2, r3]
 8007f2e:	0019      	movs	r1, r3
 8007f30:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007f32:	f7f8 f903 	bl	800013c <__udivsi3>
 8007f36:	0003      	movs	r3, r0
 8007f38:	001a      	movs	r2, r3
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	085b      	lsrs	r3, r3, #1
 8007f40:	18d2      	adds	r2, r2, r3
 8007f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	0019      	movs	r1, r3
 8007f48:	0010      	movs	r0, r2
 8007f4a:	f7f8 f8f7 	bl	800013c <__udivsi3>
 8007f4e:	0003      	movs	r3, r0
 8007f50:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f54:	2b0f      	cmp	r3, #15
 8007f56:	d90a      	bls.n	8007f6e <UART_SetConfig+0x53a>
 8007f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f5a:	2380      	movs	r3, #128	@ 0x80
 8007f5c:	025b      	lsls	r3, r3, #9
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d205      	bcs.n	8007f6e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60da      	str	r2, [r3, #12]
 8007f6c:	e005      	b.n	8007f7a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007f6e:	231a      	movs	r3, #26
 8007f70:	2220      	movs	r2, #32
 8007f72:	189b      	adds	r3, r3, r2
 8007f74:	19db      	adds	r3, r3, r7
 8007f76:	2201      	movs	r2, #1
 8007f78:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	226a      	movs	r2, #106	@ 0x6a
 8007f7e:	2101      	movs	r1, #1
 8007f80:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	2268      	movs	r2, #104	@ 0x68
 8007f86:	2101      	movs	r1, #1
 8007f88:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	2200      	movs	r2, #0
 8007f94:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f96:	231a      	movs	r3, #26
 8007f98:	2220      	movs	r2, #32
 8007f9a:	189b      	adds	r3, r3, r2
 8007f9c:	19db      	adds	r3, r3, r7
 8007f9e:	781b      	ldrb	r3, [r3, #0]
}
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	b010      	add	sp, #64	@ 0x40
 8007fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8007fa8:	0800b7f0 	.word	0x0800b7f0
 8007fac:	00f42400 	.word	0x00f42400

08007fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fbc:	2208      	movs	r2, #8
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	d00b      	beq.n	8007fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	4a4a      	ldr	r2, [pc, #296]	@ (80080f4 <UART_AdvFeatureConfig+0x144>)
 8007fca:	4013      	ands	r3, r2
 8007fcc:	0019      	movs	r1, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fde:	2201      	movs	r2, #1
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	d00b      	beq.n	8007ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	4a43      	ldr	r2, [pc, #268]	@ (80080f8 <UART_AdvFeatureConfig+0x148>)
 8007fec:	4013      	ands	r3, r2
 8007fee:	0019      	movs	r1, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008000:	2202      	movs	r2, #2
 8008002:	4013      	ands	r3, r2
 8008004:	d00b      	beq.n	800801e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	4a3b      	ldr	r2, [pc, #236]	@ (80080fc <UART_AdvFeatureConfig+0x14c>)
 800800e:	4013      	ands	r3, r2
 8008010:	0019      	movs	r1, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008022:	2204      	movs	r2, #4
 8008024:	4013      	ands	r3, r2
 8008026:	d00b      	beq.n	8008040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	4a34      	ldr	r2, [pc, #208]	@ (8008100 <UART_AdvFeatureConfig+0x150>)
 8008030:	4013      	ands	r3, r2
 8008032:	0019      	movs	r1, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008044:	2210      	movs	r2, #16
 8008046:	4013      	ands	r3, r2
 8008048:	d00b      	beq.n	8008062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	4a2c      	ldr	r2, [pc, #176]	@ (8008104 <UART_AdvFeatureConfig+0x154>)
 8008052:	4013      	ands	r3, r2
 8008054:	0019      	movs	r1, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008066:	2220      	movs	r2, #32
 8008068:	4013      	ands	r3, r2
 800806a:	d00b      	beq.n	8008084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	4a25      	ldr	r2, [pc, #148]	@ (8008108 <UART_AdvFeatureConfig+0x158>)
 8008074:	4013      	ands	r3, r2
 8008076:	0019      	movs	r1, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008088:	2240      	movs	r2, #64	@ 0x40
 800808a:	4013      	ands	r3, r2
 800808c:	d01d      	beq.n	80080ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	4a1d      	ldr	r2, [pc, #116]	@ (800810c <UART_AdvFeatureConfig+0x15c>)
 8008096:	4013      	ands	r3, r2
 8008098:	0019      	movs	r1, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080aa:	2380      	movs	r3, #128	@ 0x80
 80080ac:	035b      	lsls	r3, r3, #13
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d10b      	bne.n	80080ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	4a15      	ldr	r2, [pc, #84]	@ (8008110 <UART_AdvFeatureConfig+0x160>)
 80080ba:	4013      	ands	r3, r2
 80080bc:	0019      	movs	r1, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080ce:	2280      	movs	r2, #128	@ 0x80
 80080d0:	4013      	ands	r3, r2
 80080d2:	d00b      	beq.n	80080ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	4a0e      	ldr	r2, [pc, #56]	@ (8008114 <UART_AdvFeatureConfig+0x164>)
 80080dc:	4013      	ands	r3, r2
 80080de:	0019      	movs	r1, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	430a      	orrs	r2, r1
 80080ea:	605a      	str	r2, [r3, #4]
  }
}
 80080ec:	46c0      	nop			@ (mov r8, r8)
 80080ee:	46bd      	mov	sp, r7
 80080f0:	b002      	add	sp, #8
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	ffff7fff 	.word	0xffff7fff
 80080f8:	fffdffff 	.word	0xfffdffff
 80080fc:	fffeffff 	.word	0xfffeffff
 8008100:	fffbffff 	.word	0xfffbffff
 8008104:	ffffefff 	.word	0xffffefff
 8008108:	ffffdfff 	.word	0xffffdfff
 800810c:	ffefffff 	.word	0xffefffff
 8008110:	ff9fffff 	.word	0xff9fffff
 8008114:	fff7ffff 	.word	0xfff7ffff

08008118 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b092      	sub	sp, #72	@ 0x48
 800811c:	af02      	add	r7, sp, #8
 800811e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2290      	movs	r2, #144	@ 0x90
 8008124:	2100      	movs	r1, #0
 8008126:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008128:	f7fd fa32 	bl	8005590 <HAL_GetTick>
 800812c:	0003      	movs	r3, r0
 800812e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2208      	movs	r2, #8
 8008138:	4013      	ands	r3, r2
 800813a:	2b08      	cmp	r3, #8
 800813c:	d12d      	bne.n	800819a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800813e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008140:	2280      	movs	r2, #128	@ 0x80
 8008142:	0391      	lsls	r1, r2, #14
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	4a47      	ldr	r2, [pc, #284]	@ (8008264 <UART_CheckIdleState+0x14c>)
 8008148:	9200      	str	r2, [sp, #0]
 800814a:	2200      	movs	r2, #0
 800814c:	f000 f88e 	bl	800826c <UART_WaitOnFlagUntilTimeout>
 8008150:	1e03      	subs	r3, r0, #0
 8008152:	d022      	beq.n	800819a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008154:	f3ef 8310 	mrs	r3, PRIMASK
 8008158:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800815c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800815e:	2301      	movs	r3, #1
 8008160:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008164:	f383 8810 	msr	PRIMASK, r3
}
 8008168:	46c0      	nop			@ (mov r8, r8)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2180      	movs	r1, #128	@ 0x80
 8008176:	438a      	bics	r2, r1
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800817c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800817e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008180:	f383 8810 	msr	PRIMASK, r3
}
 8008184:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2288      	movs	r2, #136	@ 0x88
 800818a:	2120      	movs	r1, #32
 800818c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2284      	movs	r2, #132	@ 0x84
 8008192:	2100      	movs	r1, #0
 8008194:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e060      	b.n	800825c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2204      	movs	r2, #4
 80081a2:	4013      	ands	r3, r2
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d146      	bne.n	8008236 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081aa:	2280      	movs	r2, #128	@ 0x80
 80081ac:	03d1      	lsls	r1, r2, #15
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4a2c      	ldr	r2, [pc, #176]	@ (8008264 <UART_CheckIdleState+0x14c>)
 80081b2:	9200      	str	r2, [sp, #0]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f000 f859 	bl	800826c <UART_WaitOnFlagUntilTimeout>
 80081ba:	1e03      	subs	r3, r0, #0
 80081bc:	d03b      	beq.n	8008236 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081be:	f3ef 8310 	mrs	r3, PRIMASK
 80081c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80081c4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081c8:	2301      	movs	r3, #1
 80081ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	f383 8810 	msr	PRIMASK, r3
}
 80081d2:	46c0      	nop			@ (mov r8, r8)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4922      	ldr	r1, [pc, #136]	@ (8008268 <UART_CheckIdleState+0x150>)
 80081e0:	400a      	ands	r2, r1
 80081e2:	601a      	str	r2, [r3, #0]
 80081e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f383 8810 	msr	PRIMASK, r3
}
 80081ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f0:	f3ef 8310 	mrs	r3, PRIMASK
 80081f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80081f6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80081fa:	2301      	movs	r3, #1
 80081fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	f383 8810 	msr	PRIMASK, r3
}
 8008204:	46c0      	nop			@ (mov r8, r8)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689a      	ldr	r2, [r3, #8]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2101      	movs	r1, #1
 8008212:	438a      	bics	r2, r1
 8008214:	609a      	str	r2, [r3, #8]
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	f383 8810 	msr	PRIMASK, r3
}
 8008220:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	228c      	movs	r2, #140	@ 0x8c
 8008226:	2120      	movs	r1, #32
 8008228:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2284      	movs	r2, #132	@ 0x84
 800822e:	2100      	movs	r1, #0
 8008230:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e012      	b.n	800825c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2288      	movs	r2, #136	@ 0x88
 800823a:	2120      	movs	r1, #32
 800823c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	228c      	movs	r2, #140	@ 0x8c
 8008242:	2120      	movs	r1, #32
 8008244:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2284      	movs	r2, #132	@ 0x84
 8008256:	2100      	movs	r1, #0
 8008258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	0018      	movs	r0, r3
 800825e:	46bd      	mov	sp, r7
 8008260:	b010      	add	sp, #64	@ 0x40
 8008262:	bd80      	pop	{r7, pc}
 8008264:	01ffffff 	.word	0x01ffffff
 8008268:	fffffedf 	.word	0xfffffedf

0800826c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	603b      	str	r3, [r7, #0]
 8008278:	1dfb      	adds	r3, r7, #7
 800827a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800827c:	e051      	b.n	8008322 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	3301      	adds	r3, #1
 8008282:	d04e      	beq.n	8008322 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008284:	f7fd f984 	bl	8005590 <HAL_GetTick>
 8008288:	0002      	movs	r2, r0
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	69ba      	ldr	r2, [r7, #24]
 8008290:	429a      	cmp	r2, r3
 8008292:	d302      	bcc.n	800829a <UART_WaitOnFlagUntilTimeout+0x2e>
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d101      	bne.n	800829e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e051      	b.n	8008342 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2204      	movs	r2, #4
 80082a6:	4013      	ands	r3, r2
 80082a8:	d03b      	beq.n	8008322 <UART_WaitOnFlagUntilTimeout+0xb6>
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b80      	cmp	r3, #128	@ 0x80
 80082ae:	d038      	beq.n	8008322 <UART_WaitOnFlagUntilTimeout+0xb6>
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2b40      	cmp	r3, #64	@ 0x40
 80082b4:	d035      	beq.n	8008322 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	69db      	ldr	r3, [r3, #28]
 80082bc:	2208      	movs	r2, #8
 80082be:	4013      	ands	r3, r2
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d111      	bne.n	80082e8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2208      	movs	r2, #8
 80082ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	0018      	movs	r0, r3
 80082d0:	f000 f83c 	bl	800834c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2290      	movs	r2, #144	@ 0x90
 80082d8:	2108      	movs	r1, #8
 80082da:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2284      	movs	r2, #132	@ 0x84
 80082e0:	2100      	movs	r1, #0
 80082e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e02c      	b.n	8008342 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69da      	ldr	r2, [r3, #28]
 80082ee:	2380      	movs	r3, #128	@ 0x80
 80082f0:	011b      	lsls	r3, r3, #4
 80082f2:	401a      	ands	r2, r3
 80082f4:	2380      	movs	r3, #128	@ 0x80
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d112      	bne.n	8008322 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2280      	movs	r2, #128	@ 0x80
 8008302:	0112      	lsls	r2, r2, #4
 8008304:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	0018      	movs	r0, r3
 800830a:	f000 f81f 	bl	800834c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2290      	movs	r2, #144	@ 0x90
 8008312:	2120      	movs	r1, #32
 8008314:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2284      	movs	r2, #132	@ 0x84
 800831a:	2100      	movs	r1, #0
 800831c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	e00f      	b.n	8008342 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	4013      	ands	r3, r2
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	425a      	negs	r2, r3
 8008332:	4153      	adcs	r3, r2
 8008334:	b2db      	uxtb	r3, r3
 8008336:	001a      	movs	r2, r3
 8008338:	1dfb      	adds	r3, r7, #7
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	429a      	cmp	r2, r3
 800833e:	d09e      	beq.n	800827e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	0018      	movs	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	b004      	add	sp, #16
 8008348:	bd80      	pop	{r7, pc}
	...

0800834c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08e      	sub	sp, #56	@ 0x38
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008354:	f3ef 8310 	mrs	r3, PRIMASK
 8008358:	617b      	str	r3, [r7, #20]
  return(result);
 800835a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800835c:	637b      	str	r3, [r7, #52]	@ 0x34
 800835e:	2301      	movs	r3, #1
 8008360:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	f383 8810 	msr	PRIMASK, r3
}
 8008368:	46c0      	nop			@ (mov r8, r8)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4926      	ldr	r1, [pc, #152]	@ (8008410 <UART_EndRxTransfer+0xc4>)
 8008376:	400a      	ands	r2, r1
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800837c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	f383 8810 	msr	PRIMASK, r3
}
 8008384:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008386:	f3ef 8310 	mrs	r3, PRIMASK
 800838a:	623b      	str	r3, [r7, #32]
  return(result);
 800838c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800838e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008390:	2301      	movs	r3, #1
 8008392:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008396:	f383 8810 	msr	PRIMASK, r3
}
 800839a:	46c0      	nop			@ (mov r8, r8)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	689a      	ldr	r2, [r3, #8]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	491b      	ldr	r1, [pc, #108]	@ (8008414 <UART_EndRxTransfer+0xc8>)
 80083a8:	400a      	ands	r2, r1
 80083aa:	609a      	str	r2, [r3, #8]
 80083ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b2:	f383 8810 	msr	PRIMASK, r3
}
 80083b6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d118      	bne.n	80083f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083c0:	f3ef 8310 	mrs	r3, PRIMASK
 80083c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80083c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083ca:	2301      	movs	r3, #1
 80083cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f383 8810 	msr	PRIMASK, r3
}
 80083d4:	46c0      	nop			@ (mov r8, r8)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2110      	movs	r1, #16
 80083e2:	438a      	bics	r2, r1
 80083e4:	601a      	str	r2, [r3, #0]
 80083e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f383 8810 	msr	PRIMASK, r3
}
 80083f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	228c      	movs	r2, #140	@ 0x8c
 80083f6:	2120      	movs	r1, #32
 80083f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008406:	46c0      	nop			@ (mov r8, r8)
 8008408:	46bd      	mov	sp, r7
 800840a:	b00e      	add	sp, #56	@ 0x38
 800840c:	bd80      	pop	{r7, pc}
 800840e:	46c0      	nop			@ (mov r8, r8)
 8008410:	fffffedf 	.word	0xfffffedf
 8008414:	effffffe 	.word	0xeffffffe

08008418 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2284      	movs	r2, #132	@ 0x84
 8008424:	5c9b      	ldrb	r3, [r3, r2]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d101      	bne.n	800842e <HAL_UARTEx_DisableFifoMode+0x16>
 800842a:	2302      	movs	r3, #2
 800842c:	e027      	b.n	800847e <HAL_UARTEx_DisableFifoMode+0x66>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2284      	movs	r2, #132	@ 0x84
 8008432:	2101      	movs	r1, #1
 8008434:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2288      	movs	r2, #136	@ 0x88
 800843a:	2124      	movs	r1, #36	@ 0x24
 800843c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2101      	movs	r1, #1
 8008452:	438a      	bics	r2, r1
 8008454:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4a0b      	ldr	r2, [pc, #44]	@ (8008488 <HAL_UARTEx_DisableFifoMode+0x70>)
 800845a:	4013      	ands	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2288      	movs	r2, #136	@ 0x88
 8008470:	2120      	movs	r1, #32
 8008472:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2284      	movs	r2, #132	@ 0x84
 8008478:	2100      	movs	r1, #0
 800847a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	0018      	movs	r0, r3
 8008480:	46bd      	mov	sp, r7
 8008482:	b004      	add	sp, #16
 8008484:	bd80      	pop	{r7, pc}
 8008486:	46c0      	nop			@ (mov r8, r8)
 8008488:	dfffffff 	.word	0xdfffffff

0800848c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2284      	movs	r2, #132	@ 0x84
 800849a:	5c9b      	ldrb	r3, [r3, r2]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d101      	bne.n	80084a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084a0:	2302      	movs	r3, #2
 80084a2:	e02e      	b.n	8008502 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2284      	movs	r2, #132	@ 0x84
 80084a8:	2101      	movs	r1, #1
 80084aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2288      	movs	r2, #136	@ 0x88
 80084b0:	2124      	movs	r1, #36	@ 0x24
 80084b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2101      	movs	r1, #1
 80084c8:	438a      	bics	r2, r1
 80084ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	08d9      	lsrs	r1, r3, #3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	683a      	ldr	r2, [r7, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	0018      	movs	r0, r3
 80084e4:	f000 f854 	bl	8008590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2288      	movs	r2, #136	@ 0x88
 80084f4:	2120      	movs	r1, #32
 80084f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2284      	movs	r2, #132	@ 0x84
 80084fc:	2100      	movs	r1, #0
 80084fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	0018      	movs	r0, r3
 8008504:	46bd      	mov	sp, r7
 8008506:	b004      	add	sp, #16
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2284      	movs	r2, #132	@ 0x84
 800851a:	5c9b      	ldrb	r3, [r3, r2]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d101      	bne.n	8008524 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008520:	2302      	movs	r3, #2
 8008522:	e02f      	b.n	8008584 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2284      	movs	r2, #132	@ 0x84
 8008528:	2101      	movs	r1, #1
 800852a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2288      	movs	r2, #136	@ 0x88
 8008530:	2124      	movs	r1, #36	@ 0x24
 8008532:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2101      	movs	r1, #1
 8008548:	438a      	bics	r2, r1
 800854a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	4a0e      	ldr	r2, [pc, #56]	@ (800858c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008554:	4013      	ands	r3, r2
 8008556:	0019      	movs	r1, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	0018      	movs	r0, r3
 8008566:	f000 f813 	bl	8008590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2288      	movs	r2, #136	@ 0x88
 8008576:	2120      	movs	r1, #32
 8008578:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2284      	movs	r2, #132	@ 0x84
 800857e:	2100      	movs	r1, #0
 8008580:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	0018      	movs	r0, r3
 8008586:	46bd      	mov	sp, r7
 8008588:	b004      	add	sp, #16
 800858a:	bd80      	pop	{r7, pc}
 800858c:	f1ffffff 	.word	0xf1ffffff

08008590 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800859c:	2b00      	cmp	r3, #0
 800859e:	d108      	bne.n	80085b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	226a      	movs	r2, #106	@ 0x6a
 80085a4:	2101      	movs	r1, #1
 80085a6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2268      	movs	r2, #104	@ 0x68
 80085ac:	2101      	movs	r1, #1
 80085ae:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085b0:	e043      	b.n	800863a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085b2:	260f      	movs	r6, #15
 80085b4:	19bb      	adds	r3, r7, r6
 80085b6:	2208      	movs	r2, #8
 80085b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085ba:	200e      	movs	r0, #14
 80085bc:	183b      	adds	r3, r7, r0
 80085be:	2208      	movs	r2, #8
 80085c0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	0e5b      	lsrs	r3, r3, #25
 80085ca:	b2da      	uxtb	r2, r3
 80085cc:	240d      	movs	r4, #13
 80085ce:	193b      	adds	r3, r7, r4
 80085d0:	2107      	movs	r1, #7
 80085d2:	400a      	ands	r2, r1
 80085d4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	0f5b      	lsrs	r3, r3, #29
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	250c      	movs	r5, #12
 80085e2:	197b      	adds	r3, r7, r5
 80085e4:	2107      	movs	r1, #7
 80085e6:	400a      	ands	r2, r1
 80085e8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085ea:	183b      	adds	r3, r7, r0
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	197a      	adds	r2, r7, r5
 80085f0:	7812      	ldrb	r2, [r2, #0]
 80085f2:	4914      	ldr	r1, [pc, #80]	@ (8008644 <UARTEx_SetNbDataToProcess+0xb4>)
 80085f4:	5c8a      	ldrb	r2, [r1, r2]
 80085f6:	435a      	muls	r2, r3
 80085f8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80085fa:	197b      	adds	r3, r7, r5
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	4a12      	ldr	r2, [pc, #72]	@ (8008648 <UARTEx_SetNbDataToProcess+0xb8>)
 8008600:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008602:	0019      	movs	r1, r3
 8008604:	f7f7 fe24 	bl	8000250 <__divsi3>
 8008608:	0003      	movs	r3, r0
 800860a:	b299      	uxth	r1, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	226a      	movs	r2, #106	@ 0x6a
 8008610:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008612:	19bb      	adds	r3, r7, r6
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	193a      	adds	r2, r7, r4
 8008618:	7812      	ldrb	r2, [r2, #0]
 800861a:	490a      	ldr	r1, [pc, #40]	@ (8008644 <UARTEx_SetNbDataToProcess+0xb4>)
 800861c:	5c8a      	ldrb	r2, [r1, r2]
 800861e:	435a      	muls	r2, r3
 8008620:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008622:	193b      	adds	r3, r7, r4
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	4a08      	ldr	r2, [pc, #32]	@ (8008648 <UARTEx_SetNbDataToProcess+0xb8>)
 8008628:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800862a:	0019      	movs	r1, r3
 800862c:	f7f7 fe10 	bl	8000250 <__divsi3>
 8008630:	0003      	movs	r3, r0
 8008632:	b299      	uxth	r1, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2268      	movs	r2, #104	@ 0x68
 8008638:	5299      	strh	r1, [r3, r2]
}
 800863a:	46c0      	nop			@ (mov r8, r8)
 800863c:	46bd      	mov	sp, r7
 800863e:	b005      	add	sp, #20
 8008640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008642:	46c0      	nop			@ (mov r8, r8)
 8008644:	0800b808 	.word	0x0800b808
 8008648:	0800b810 	.word	0x0800b810

0800864c <__cvt>:
 800864c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800864e:	001f      	movs	r7, r3
 8008650:	2300      	movs	r3, #0
 8008652:	0016      	movs	r6, r2
 8008654:	b08b      	sub	sp, #44	@ 0x2c
 8008656:	429f      	cmp	r7, r3
 8008658:	da04      	bge.n	8008664 <__cvt+0x18>
 800865a:	2180      	movs	r1, #128	@ 0x80
 800865c:	0609      	lsls	r1, r1, #24
 800865e:	187b      	adds	r3, r7, r1
 8008660:	001f      	movs	r7, r3
 8008662:	232d      	movs	r3, #45	@ 0x2d
 8008664:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008666:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008668:	7013      	strb	r3, [r2, #0]
 800866a:	2320      	movs	r3, #32
 800866c:	2203      	movs	r2, #3
 800866e:	439d      	bics	r5, r3
 8008670:	2d46      	cmp	r5, #70	@ 0x46
 8008672:	d007      	beq.n	8008684 <__cvt+0x38>
 8008674:	002b      	movs	r3, r5
 8008676:	3b45      	subs	r3, #69	@ 0x45
 8008678:	4259      	negs	r1, r3
 800867a:	414b      	adcs	r3, r1
 800867c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800867e:	3a01      	subs	r2, #1
 8008680:	18cb      	adds	r3, r1, r3
 8008682:	9310      	str	r3, [sp, #64]	@ 0x40
 8008684:	ab09      	add	r3, sp, #36	@ 0x24
 8008686:	9304      	str	r3, [sp, #16]
 8008688:	ab08      	add	r3, sp, #32
 800868a:	9303      	str	r3, [sp, #12]
 800868c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800868e:	9200      	str	r2, [sp, #0]
 8008690:	9302      	str	r3, [sp, #8]
 8008692:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008694:	0032      	movs	r2, r6
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	003b      	movs	r3, r7
 800869a:	f000 fe05 	bl	80092a8 <_dtoa_r>
 800869e:	0004      	movs	r4, r0
 80086a0:	2d47      	cmp	r5, #71	@ 0x47
 80086a2:	d11b      	bne.n	80086dc <__cvt+0x90>
 80086a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80086a6:	07db      	lsls	r3, r3, #31
 80086a8:	d511      	bpl.n	80086ce <__cvt+0x82>
 80086aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80086ac:	18c3      	adds	r3, r0, r3
 80086ae:	9307      	str	r3, [sp, #28]
 80086b0:	2200      	movs	r2, #0
 80086b2:	2300      	movs	r3, #0
 80086b4:	0030      	movs	r0, r6
 80086b6:	0039      	movs	r1, r7
 80086b8:	f7f7 fec6 	bl	8000448 <__aeabi_dcmpeq>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d001      	beq.n	80086c4 <__cvt+0x78>
 80086c0:	9b07      	ldr	r3, [sp, #28]
 80086c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80086c4:	2230      	movs	r2, #48	@ 0x30
 80086c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c8:	9907      	ldr	r1, [sp, #28]
 80086ca:	428b      	cmp	r3, r1
 80086cc:	d320      	bcc.n	8008710 <__cvt+0xc4>
 80086ce:	0020      	movs	r0, r4
 80086d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80086d4:	1b1b      	subs	r3, r3, r4
 80086d6:	6013      	str	r3, [r2, #0]
 80086d8:	b00b      	add	sp, #44	@ 0x2c
 80086da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80086de:	18c3      	adds	r3, r0, r3
 80086e0:	9307      	str	r3, [sp, #28]
 80086e2:	2d46      	cmp	r5, #70	@ 0x46
 80086e4:	d1e4      	bne.n	80086b0 <__cvt+0x64>
 80086e6:	7803      	ldrb	r3, [r0, #0]
 80086e8:	2b30      	cmp	r3, #48	@ 0x30
 80086ea:	d10c      	bne.n	8008706 <__cvt+0xba>
 80086ec:	2200      	movs	r2, #0
 80086ee:	2300      	movs	r3, #0
 80086f0:	0030      	movs	r0, r6
 80086f2:	0039      	movs	r1, r7
 80086f4:	f7f7 fea8 	bl	8000448 <__aeabi_dcmpeq>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d104      	bne.n	8008706 <__cvt+0xba>
 80086fc:	2301      	movs	r3, #1
 80086fe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008700:	1a9b      	subs	r3, r3, r2
 8008702:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008708:	9a07      	ldr	r2, [sp, #28]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	18d3      	adds	r3, r2, r3
 800870e:	e7ce      	b.n	80086ae <__cvt+0x62>
 8008710:	1c59      	adds	r1, r3, #1
 8008712:	9109      	str	r1, [sp, #36]	@ 0x24
 8008714:	701a      	strb	r2, [r3, #0]
 8008716:	e7d6      	b.n	80086c6 <__cvt+0x7a>

08008718 <__exponent>:
 8008718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800871a:	232b      	movs	r3, #43	@ 0x2b
 800871c:	b085      	sub	sp, #20
 800871e:	0005      	movs	r5, r0
 8008720:	1e0c      	subs	r4, r1, #0
 8008722:	7002      	strb	r2, [r0, #0]
 8008724:	da01      	bge.n	800872a <__exponent+0x12>
 8008726:	424c      	negs	r4, r1
 8008728:	3302      	adds	r3, #2
 800872a:	706b      	strb	r3, [r5, #1]
 800872c:	2c09      	cmp	r4, #9
 800872e:	dd2c      	ble.n	800878a <__exponent+0x72>
 8008730:	ab02      	add	r3, sp, #8
 8008732:	1dde      	adds	r6, r3, #7
 8008734:	0020      	movs	r0, r4
 8008736:	210a      	movs	r1, #10
 8008738:	f7f7 fe70 	bl	800041c <__aeabi_idivmod>
 800873c:	0037      	movs	r7, r6
 800873e:	3130      	adds	r1, #48	@ 0x30
 8008740:	3e01      	subs	r6, #1
 8008742:	0020      	movs	r0, r4
 8008744:	7031      	strb	r1, [r6, #0]
 8008746:	210a      	movs	r1, #10
 8008748:	9401      	str	r4, [sp, #4]
 800874a:	f7f7 fd81 	bl	8000250 <__divsi3>
 800874e:	9b01      	ldr	r3, [sp, #4]
 8008750:	0004      	movs	r4, r0
 8008752:	2b63      	cmp	r3, #99	@ 0x63
 8008754:	dcee      	bgt.n	8008734 <__exponent+0x1c>
 8008756:	1eba      	subs	r2, r7, #2
 8008758:	1ca8      	adds	r0, r5, #2
 800875a:	0001      	movs	r1, r0
 800875c:	0013      	movs	r3, r2
 800875e:	3430      	adds	r4, #48	@ 0x30
 8008760:	7014      	strb	r4, [r2, #0]
 8008762:	ac02      	add	r4, sp, #8
 8008764:	3407      	adds	r4, #7
 8008766:	429c      	cmp	r4, r3
 8008768:	d80a      	bhi.n	8008780 <__exponent+0x68>
 800876a:	2300      	movs	r3, #0
 800876c:	4294      	cmp	r4, r2
 800876e:	d303      	bcc.n	8008778 <__exponent+0x60>
 8008770:	3309      	adds	r3, #9
 8008772:	aa02      	add	r2, sp, #8
 8008774:	189b      	adds	r3, r3, r2
 8008776:	1bdb      	subs	r3, r3, r7
 8008778:	18c0      	adds	r0, r0, r3
 800877a:	1b40      	subs	r0, r0, r5
 800877c:	b005      	add	sp, #20
 800877e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008780:	781c      	ldrb	r4, [r3, #0]
 8008782:	3301      	adds	r3, #1
 8008784:	700c      	strb	r4, [r1, #0]
 8008786:	3101      	adds	r1, #1
 8008788:	e7eb      	b.n	8008762 <__exponent+0x4a>
 800878a:	2330      	movs	r3, #48	@ 0x30
 800878c:	18e4      	adds	r4, r4, r3
 800878e:	70ab      	strb	r3, [r5, #2]
 8008790:	1d28      	adds	r0, r5, #4
 8008792:	70ec      	strb	r4, [r5, #3]
 8008794:	e7f1      	b.n	800877a <__exponent+0x62>
	...

08008798 <_printf_float>:
 8008798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800879a:	b097      	sub	sp, #92	@ 0x5c
 800879c:	000d      	movs	r5, r1
 800879e:	920a      	str	r2, [sp, #40]	@ 0x28
 80087a0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80087a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80087a6:	f000 fce1 	bl	800916c <_localeconv_r>
 80087aa:	6803      	ldr	r3, [r0, #0]
 80087ac:	0018      	movs	r0, r3
 80087ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80087b0:	f7f7 fca8 	bl	8000104 <strlen>
 80087b4:	2300      	movs	r3, #0
 80087b6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80087b8:	9314      	str	r3, [sp, #80]	@ 0x50
 80087ba:	7e2b      	ldrb	r3, [r5, #24]
 80087bc:	2207      	movs	r2, #7
 80087be:	930c      	str	r3, [sp, #48]	@ 0x30
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	930e      	str	r3, [sp, #56]	@ 0x38
 80087c4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	05c9      	lsls	r1, r1, #23
 80087ca:	d545      	bpl.n	8008858 <_printf_float+0xc0>
 80087cc:	189b      	adds	r3, r3, r2
 80087ce:	4393      	bics	r3, r2
 80087d0:	001a      	movs	r2, r3
 80087d2:	3208      	adds	r2, #8
 80087d4:	6022      	str	r2, [r4, #0]
 80087d6:	2201      	movs	r2, #1
 80087d8:	681e      	ldr	r6, [r3, #0]
 80087da:	685f      	ldr	r7, [r3, #4]
 80087dc:	007b      	lsls	r3, r7, #1
 80087de:	085b      	lsrs	r3, r3, #1
 80087e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80087e2:	9610      	str	r6, [sp, #64]	@ 0x40
 80087e4:	64ae      	str	r6, [r5, #72]	@ 0x48
 80087e6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80087e8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80087ea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80087ec:	4ba7      	ldr	r3, [pc, #668]	@ (8008a8c <_printf_float+0x2f4>)
 80087ee:	4252      	negs	r2, r2
 80087f0:	f7fa feba 	bl	8003568 <__aeabi_dcmpun>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d131      	bne.n	800885c <_printf_float+0xc4>
 80087f8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80087fa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80087fc:	2201      	movs	r2, #1
 80087fe:	4ba3      	ldr	r3, [pc, #652]	@ (8008a8c <_printf_float+0x2f4>)
 8008800:	4252      	negs	r2, r2
 8008802:	f7f7 fe31 	bl	8000468 <__aeabi_dcmple>
 8008806:	2800      	cmp	r0, #0
 8008808:	d128      	bne.n	800885c <_printf_float+0xc4>
 800880a:	2200      	movs	r2, #0
 800880c:	2300      	movs	r3, #0
 800880e:	0030      	movs	r0, r6
 8008810:	0039      	movs	r1, r7
 8008812:	f7f7 fe1f 	bl	8000454 <__aeabi_dcmplt>
 8008816:	2800      	cmp	r0, #0
 8008818:	d003      	beq.n	8008822 <_printf_float+0x8a>
 800881a:	002b      	movs	r3, r5
 800881c:	222d      	movs	r2, #45	@ 0x2d
 800881e:	3343      	adds	r3, #67	@ 0x43
 8008820:	701a      	strb	r2, [r3, #0]
 8008822:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008824:	4f9a      	ldr	r7, [pc, #616]	@ (8008a90 <_printf_float+0x2f8>)
 8008826:	2b47      	cmp	r3, #71	@ 0x47
 8008828:	d800      	bhi.n	800882c <_printf_float+0x94>
 800882a:	4f9a      	ldr	r7, [pc, #616]	@ (8008a94 <_printf_float+0x2fc>)
 800882c:	2303      	movs	r3, #3
 800882e:	2400      	movs	r4, #0
 8008830:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008832:	612b      	str	r3, [r5, #16]
 8008834:	3301      	adds	r3, #1
 8008836:	439a      	bics	r2, r3
 8008838:	602a      	str	r2, [r5, #0]
 800883a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800883c:	0029      	movs	r1, r5
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008844:	aa15      	add	r2, sp, #84	@ 0x54
 8008846:	f000 f9e5 	bl	8008c14 <_printf_common>
 800884a:	3001      	adds	r0, #1
 800884c:	d000      	beq.n	8008850 <_printf_float+0xb8>
 800884e:	e09e      	b.n	800898e <_printf_float+0x1f6>
 8008850:	2001      	movs	r0, #1
 8008852:	4240      	negs	r0, r0
 8008854:	b017      	add	sp, #92	@ 0x5c
 8008856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008858:	3307      	adds	r3, #7
 800885a:	e7b8      	b.n	80087ce <_printf_float+0x36>
 800885c:	0032      	movs	r2, r6
 800885e:	003b      	movs	r3, r7
 8008860:	0030      	movs	r0, r6
 8008862:	0039      	movs	r1, r7
 8008864:	f7fa fe80 	bl	8003568 <__aeabi_dcmpun>
 8008868:	2800      	cmp	r0, #0
 800886a:	d00b      	beq.n	8008884 <_printf_float+0xec>
 800886c:	2f00      	cmp	r7, #0
 800886e:	da03      	bge.n	8008878 <_printf_float+0xe0>
 8008870:	002b      	movs	r3, r5
 8008872:	222d      	movs	r2, #45	@ 0x2d
 8008874:	3343      	adds	r3, #67	@ 0x43
 8008876:	701a      	strb	r2, [r3, #0]
 8008878:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800887a:	4f87      	ldr	r7, [pc, #540]	@ (8008a98 <_printf_float+0x300>)
 800887c:	2b47      	cmp	r3, #71	@ 0x47
 800887e:	d8d5      	bhi.n	800882c <_printf_float+0x94>
 8008880:	4f86      	ldr	r7, [pc, #536]	@ (8008a9c <_printf_float+0x304>)
 8008882:	e7d3      	b.n	800882c <_printf_float+0x94>
 8008884:	2220      	movs	r2, #32
 8008886:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008888:	686b      	ldr	r3, [r5, #4]
 800888a:	4394      	bics	r4, r2
 800888c:	1c5a      	adds	r2, r3, #1
 800888e:	d146      	bne.n	800891e <_printf_float+0x186>
 8008890:	3307      	adds	r3, #7
 8008892:	606b      	str	r3, [r5, #4]
 8008894:	2380      	movs	r3, #128	@ 0x80
 8008896:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008898:	00db      	lsls	r3, r3, #3
 800889a:	4313      	orrs	r3, r2
 800889c:	2200      	movs	r2, #0
 800889e:	602b      	str	r3, [r5, #0]
 80088a0:	9206      	str	r2, [sp, #24]
 80088a2:	aa14      	add	r2, sp, #80	@ 0x50
 80088a4:	9205      	str	r2, [sp, #20]
 80088a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088a8:	a90a      	add	r1, sp, #40	@ 0x28
 80088aa:	9204      	str	r2, [sp, #16]
 80088ac:	aa13      	add	r2, sp, #76	@ 0x4c
 80088ae:	9203      	str	r2, [sp, #12]
 80088b0:	2223      	movs	r2, #35	@ 0x23
 80088b2:	1852      	adds	r2, r2, r1
 80088b4:	9202      	str	r2, [sp, #8]
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	686b      	ldr	r3, [r5, #4]
 80088ba:	0032      	movs	r2, r6
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088c0:	003b      	movs	r3, r7
 80088c2:	f7ff fec3 	bl	800864c <__cvt>
 80088c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088c8:	0007      	movs	r7, r0
 80088ca:	2c47      	cmp	r4, #71	@ 0x47
 80088cc:	d12d      	bne.n	800892a <_printf_float+0x192>
 80088ce:	1cd3      	adds	r3, r2, #3
 80088d0:	db02      	blt.n	80088d8 <_printf_float+0x140>
 80088d2:	686b      	ldr	r3, [r5, #4]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	dd47      	ble.n	8008968 <_printf_float+0x1d0>
 80088d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088da:	3b02      	subs	r3, #2
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	930c      	str	r3, [sp, #48]	@ 0x30
 80088e0:	0028      	movs	r0, r5
 80088e2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80088e4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088e6:	3901      	subs	r1, #1
 80088e8:	3050      	adds	r0, #80	@ 0x50
 80088ea:	9113      	str	r1, [sp, #76]	@ 0x4c
 80088ec:	f7ff ff14 	bl	8008718 <__exponent>
 80088f0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80088f2:	0004      	movs	r4, r0
 80088f4:	1813      	adds	r3, r2, r0
 80088f6:	612b      	str	r3, [r5, #16]
 80088f8:	2a01      	cmp	r2, #1
 80088fa:	dc02      	bgt.n	8008902 <_printf_float+0x16a>
 80088fc:	682a      	ldr	r2, [r5, #0]
 80088fe:	07d2      	lsls	r2, r2, #31
 8008900:	d501      	bpl.n	8008906 <_printf_float+0x16e>
 8008902:	3301      	adds	r3, #1
 8008904:	612b      	str	r3, [r5, #16]
 8008906:	2323      	movs	r3, #35	@ 0x23
 8008908:	aa0a      	add	r2, sp, #40	@ 0x28
 800890a:	189b      	adds	r3, r3, r2
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d100      	bne.n	8008914 <_printf_float+0x17c>
 8008912:	e792      	b.n	800883a <_printf_float+0xa2>
 8008914:	002b      	movs	r3, r5
 8008916:	222d      	movs	r2, #45	@ 0x2d
 8008918:	3343      	adds	r3, #67	@ 0x43
 800891a:	701a      	strb	r2, [r3, #0]
 800891c:	e78d      	b.n	800883a <_printf_float+0xa2>
 800891e:	2c47      	cmp	r4, #71	@ 0x47
 8008920:	d1b8      	bne.n	8008894 <_printf_float+0xfc>
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1b6      	bne.n	8008894 <_printf_float+0xfc>
 8008926:	3301      	adds	r3, #1
 8008928:	e7b3      	b.n	8008892 <_printf_float+0xfa>
 800892a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800892c:	2b65      	cmp	r3, #101	@ 0x65
 800892e:	d9d7      	bls.n	80088e0 <_printf_float+0x148>
 8008930:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008932:	2b66      	cmp	r3, #102	@ 0x66
 8008934:	d11a      	bne.n	800896c <_printf_float+0x1d4>
 8008936:	686b      	ldr	r3, [r5, #4]
 8008938:	2a00      	cmp	r2, #0
 800893a:	dd09      	ble.n	8008950 <_printf_float+0x1b8>
 800893c:	612a      	str	r2, [r5, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d102      	bne.n	8008948 <_printf_float+0x1b0>
 8008942:	6829      	ldr	r1, [r5, #0]
 8008944:	07c9      	lsls	r1, r1, #31
 8008946:	d50b      	bpl.n	8008960 <_printf_float+0x1c8>
 8008948:	3301      	adds	r3, #1
 800894a:	189b      	adds	r3, r3, r2
 800894c:	612b      	str	r3, [r5, #16]
 800894e:	e007      	b.n	8008960 <_printf_float+0x1c8>
 8008950:	2b00      	cmp	r3, #0
 8008952:	d103      	bne.n	800895c <_printf_float+0x1c4>
 8008954:	2201      	movs	r2, #1
 8008956:	6829      	ldr	r1, [r5, #0]
 8008958:	4211      	tst	r1, r2
 800895a:	d000      	beq.n	800895e <_printf_float+0x1c6>
 800895c:	1c9a      	adds	r2, r3, #2
 800895e:	612a      	str	r2, [r5, #16]
 8008960:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008962:	2400      	movs	r4, #0
 8008964:	65ab      	str	r3, [r5, #88]	@ 0x58
 8008966:	e7ce      	b.n	8008906 <_printf_float+0x16e>
 8008968:	2367      	movs	r3, #103	@ 0x67
 800896a:	930c      	str	r3, [sp, #48]	@ 0x30
 800896c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800896e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008970:	4299      	cmp	r1, r3
 8008972:	db06      	blt.n	8008982 <_printf_float+0x1ea>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	6129      	str	r1, [r5, #16]
 8008978:	07db      	lsls	r3, r3, #31
 800897a:	d5f1      	bpl.n	8008960 <_printf_float+0x1c8>
 800897c:	3101      	adds	r1, #1
 800897e:	6129      	str	r1, [r5, #16]
 8008980:	e7ee      	b.n	8008960 <_printf_float+0x1c8>
 8008982:	2201      	movs	r2, #1
 8008984:	2900      	cmp	r1, #0
 8008986:	dce0      	bgt.n	800894a <_printf_float+0x1b2>
 8008988:	1892      	adds	r2, r2, r2
 800898a:	1a52      	subs	r2, r2, r1
 800898c:	e7dd      	b.n	800894a <_printf_float+0x1b2>
 800898e:	682a      	ldr	r2, [r5, #0]
 8008990:	0553      	lsls	r3, r2, #21
 8008992:	d408      	bmi.n	80089a6 <_printf_float+0x20e>
 8008994:	692b      	ldr	r3, [r5, #16]
 8008996:	003a      	movs	r2, r7
 8008998:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800899a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800899c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800899e:	47a0      	blx	r4
 80089a0:	3001      	adds	r0, #1
 80089a2:	d129      	bne.n	80089f8 <_printf_float+0x260>
 80089a4:	e754      	b.n	8008850 <_printf_float+0xb8>
 80089a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089a8:	2b65      	cmp	r3, #101	@ 0x65
 80089aa:	d800      	bhi.n	80089ae <_printf_float+0x216>
 80089ac:	e0db      	b.n	8008b66 <_printf_float+0x3ce>
 80089ae:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80089b0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80089b2:	2200      	movs	r2, #0
 80089b4:	2300      	movs	r3, #0
 80089b6:	f7f7 fd47 	bl	8000448 <__aeabi_dcmpeq>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d033      	beq.n	8008a26 <_printf_float+0x28e>
 80089be:	2301      	movs	r3, #1
 80089c0:	4a37      	ldr	r2, [pc, #220]	@ (8008aa0 <_printf_float+0x308>)
 80089c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80089c8:	47a0      	blx	r4
 80089ca:	3001      	adds	r0, #1
 80089cc:	d100      	bne.n	80089d0 <_printf_float+0x238>
 80089ce:	e73f      	b.n	8008850 <_printf_float+0xb8>
 80089d0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80089d2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089d4:	42b3      	cmp	r3, r6
 80089d6:	db02      	blt.n	80089de <_printf_float+0x246>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	07db      	lsls	r3, r3, #31
 80089dc:	d50c      	bpl.n	80089f8 <_printf_float+0x260>
 80089de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80089e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80089e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089e8:	47a0      	blx	r4
 80089ea:	2400      	movs	r4, #0
 80089ec:	3001      	adds	r0, #1
 80089ee:	d100      	bne.n	80089f2 <_printf_float+0x25a>
 80089f0:	e72e      	b.n	8008850 <_printf_float+0xb8>
 80089f2:	1e73      	subs	r3, r6, #1
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	dc0a      	bgt.n	8008a0e <_printf_float+0x276>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	079b      	lsls	r3, r3, #30
 80089fc:	d500      	bpl.n	8008a00 <_printf_float+0x268>
 80089fe:	e106      	b.n	8008c0e <_printf_float+0x476>
 8008a00:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008a02:	68e8      	ldr	r0, [r5, #12]
 8008a04:	4298      	cmp	r0, r3
 8008a06:	db00      	blt.n	8008a0a <_printf_float+0x272>
 8008a08:	e724      	b.n	8008854 <_printf_float+0xbc>
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	e722      	b.n	8008854 <_printf_float+0xbc>
 8008a0e:	002a      	movs	r2, r5
 8008a10:	2301      	movs	r3, #1
 8008a12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a16:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008a18:	321a      	adds	r2, #26
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d100      	bne.n	8008a22 <_printf_float+0x28a>
 8008a20:	e716      	b.n	8008850 <_printf_float+0xb8>
 8008a22:	3401      	adds	r4, #1
 8008a24:	e7e5      	b.n	80089f2 <_printf_float+0x25a>
 8008a26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	dc3b      	bgt.n	8008aa4 <_printf_float+0x30c>
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8008aa0 <_printf_float+0x308>)
 8008a30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a34:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008a36:	47a0      	blx	r4
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d100      	bne.n	8008a3e <_printf_float+0x2a6>
 8008a3c:	e708      	b.n	8008850 <_printf_float+0xb8>
 8008a3e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008a40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a42:	4333      	orrs	r3, r6
 8008a44:	d102      	bne.n	8008a4c <_printf_float+0x2b4>
 8008a46:	682b      	ldr	r3, [r5, #0]
 8008a48:	07db      	lsls	r3, r3, #31
 8008a4a:	d5d5      	bpl.n	80089f8 <_printf_float+0x260>
 8008a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008a56:	47a0      	blx	r4
 8008a58:	2300      	movs	r3, #0
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	d100      	bne.n	8008a60 <_printf_float+0x2c8>
 8008a5e:	e6f7      	b.n	8008850 <_printf_float+0xb8>
 8008a60:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a62:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a64:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a66:	425b      	negs	r3, r3
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	dc01      	bgt.n	8008a70 <_printf_float+0x2d8>
 8008a6c:	0033      	movs	r3, r6
 8008a6e:	e792      	b.n	8008996 <_printf_float+0x1fe>
 8008a70:	002a      	movs	r2, r5
 8008a72:	2301      	movs	r3, #1
 8008a74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a78:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008a7a:	321a      	adds	r2, #26
 8008a7c:	47a0      	blx	r4
 8008a7e:	3001      	adds	r0, #1
 8008a80:	d100      	bne.n	8008a84 <_printf_float+0x2ec>
 8008a82:	e6e5      	b.n	8008850 <_printf_float+0xb8>
 8008a84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a86:	3301      	adds	r3, #1
 8008a88:	e7ea      	b.n	8008a60 <_printf_float+0x2c8>
 8008a8a:	46c0      	nop			@ (mov r8, r8)
 8008a8c:	7fefffff 	.word	0x7fefffff
 8008a90:	0800b81c 	.word	0x0800b81c
 8008a94:	0800b818 	.word	0x0800b818
 8008a98:	0800b824 	.word	0x0800b824
 8008a9c:	0800b820 	.word	0x0800b820
 8008aa0:	0800b828 	.word	0x0800b828
 8008aa4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008aa6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008aa8:	930c      	str	r3, [sp, #48]	@ 0x30
 8008aaa:	429e      	cmp	r6, r3
 8008aac:	dd00      	ble.n	8008ab0 <_printf_float+0x318>
 8008aae:	001e      	movs	r6, r3
 8008ab0:	2e00      	cmp	r6, #0
 8008ab2:	dc31      	bgt.n	8008b18 <_printf_float+0x380>
 8008ab4:	43f3      	mvns	r3, r6
 8008ab6:	2400      	movs	r4, #0
 8008ab8:	17db      	asrs	r3, r3, #31
 8008aba:	4033      	ands	r3, r6
 8008abc:	930e      	str	r3, [sp, #56]	@ 0x38
 8008abe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008ac0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ac2:	1af3      	subs	r3, r6, r3
 8008ac4:	42a3      	cmp	r3, r4
 8008ac6:	dc30      	bgt.n	8008b2a <_printf_float+0x392>
 8008ac8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008aca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008acc:	429a      	cmp	r2, r3
 8008ace:	dc38      	bgt.n	8008b42 <_printf_float+0x3aa>
 8008ad0:	682b      	ldr	r3, [r5, #0]
 8008ad2:	07db      	lsls	r3, r3, #31
 8008ad4:	d435      	bmi.n	8008b42 <_printf_float+0x3aa>
 8008ad6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008ad8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ada:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008adc:	1b9b      	subs	r3, r3, r6
 8008ade:	1b14      	subs	r4, r2, r4
 8008ae0:	429c      	cmp	r4, r3
 8008ae2:	dd00      	ble.n	8008ae6 <_printf_float+0x34e>
 8008ae4:	001c      	movs	r4, r3
 8008ae6:	2c00      	cmp	r4, #0
 8008ae8:	dc34      	bgt.n	8008b54 <_printf_float+0x3bc>
 8008aea:	43e3      	mvns	r3, r4
 8008aec:	2600      	movs	r6, #0
 8008aee:	17db      	asrs	r3, r3, #31
 8008af0:	401c      	ands	r4, r3
 8008af2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008af4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	1b1b      	subs	r3, r3, r4
 8008afa:	42b3      	cmp	r3, r6
 8008afc:	dc00      	bgt.n	8008b00 <_printf_float+0x368>
 8008afe:	e77b      	b.n	80089f8 <_printf_float+0x260>
 8008b00:	002a      	movs	r2, r5
 8008b02:	2301      	movs	r3, #1
 8008b04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b08:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008b0a:	321a      	adds	r2, #26
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	d100      	bne.n	8008b14 <_printf_float+0x37c>
 8008b12:	e69d      	b.n	8008850 <_printf_float+0xb8>
 8008b14:	3601      	adds	r6, #1
 8008b16:	e7ec      	b.n	8008af2 <_printf_float+0x35a>
 8008b18:	0033      	movs	r3, r6
 8008b1a:	003a      	movs	r2, r7
 8008b1c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b20:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008b22:	47a0      	blx	r4
 8008b24:	3001      	adds	r0, #1
 8008b26:	d1c5      	bne.n	8008ab4 <_printf_float+0x31c>
 8008b28:	e692      	b.n	8008850 <_printf_float+0xb8>
 8008b2a:	002a      	movs	r2, r5
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b32:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008b34:	321a      	adds	r2, #26
 8008b36:	47b0      	blx	r6
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d100      	bne.n	8008b3e <_printf_float+0x3a6>
 8008b3c:	e688      	b.n	8008850 <_printf_float+0xb8>
 8008b3e:	3401      	adds	r4, #1
 8008b40:	e7bd      	b.n	8008abe <_printf_float+0x326>
 8008b42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b46:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b48:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b4a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008b4c:	47a0      	blx	r4
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d1c1      	bne.n	8008ad6 <_printf_float+0x33e>
 8008b52:	e67d      	b.n	8008850 <_printf_float+0xb8>
 8008b54:	19ba      	adds	r2, r7, r6
 8008b56:	0023      	movs	r3, r4
 8008b58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b5c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008b5e:	47b0      	blx	r6
 8008b60:	3001      	adds	r0, #1
 8008b62:	d1c2      	bne.n	8008aea <_printf_float+0x352>
 8008b64:	e674      	b.n	8008850 <_printf_float+0xb8>
 8008b66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b68:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	dc02      	bgt.n	8008b74 <_printf_float+0x3dc>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	421a      	tst	r2, r3
 8008b72:	d039      	beq.n	8008be8 <_printf_float+0x450>
 8008b74:	2301      	movs	r3, #1
 8008b76:	003a      	movs	r2, r7
 8008b78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b7c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008b7e:	47b0      	blx	r6
 8008b80:	3001      	adds	r0, #1
 8008b82:	d100      	bne.n	8008b86 <_printf_float+0x3ee>
 8008b84:	e664      	b.n	8008850 <_printf_float+0xb8>
 8008b86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008b8c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b8e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008b90:	47b0      	blx	r6
 8008b92:	3001      	adds	r0, #1
 8008b94:	d100      	bne.n	8008b98 <_printf_float+0x400>
 8008b96:	e65b      	b.n	8008850 <_printf_float+0xb8>
 8008b98:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008b9a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008b9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f7f7 fc4f 	bl	8000448 <__aeabi_dcmpeq>
 8008baa:	2800      	cmp	r0, #0
 8008bac:	d11a      	bne.n	8008be4 <_printf_float+0x44c>
 8008bae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bb0:	1c7a      	adds	r2, r7, #1
 8008bb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008bb4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bb6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008bb8:	47b0      	blx	r6
 8008bba:	3001      	adds	r0, #1
 8008bbc:	d10e      	bne.n	8008bdc <_printf_float+0x444>
 8008bbe:	e647      	b.n	8008850 <_printf_float+0xb8>
 8008bc0:	002a      	movs	r2, r5
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008bc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bc8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008bca:	321a      	adds	r2, #26
 8008bcc:	47b8      	blx	r7
 8008bce:	3001      	adds	r0, #1
 8008bd0:	d100      	bne.n	8008bd4 <_printf_float+0x43c>
 8008bd2:	e63d      	b.n	8008850 <_printf_float+0xb8>
 8008bd4:	3601      	adds	r6, #1
 8008bd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bd8:	429e      	cmp	r6, r3
 8008bda:	dbf1      	blt.n	8008bc0 <_printf_float+0x428>
 8008bdc:	002a      	movs	r2, r5
 8008bde:	0023      	movs	r3, r4
 8008be0:	3250      	adds	r2, #80	@ 0x50
 8008be2:	e6d9      	b.n	8008998 <_printf_float+0x200>
 8008be4:	2600      	movs	r6, #0
 8008be6:	e7f6      	b.n	8008bd6 <_printf_float+0x43e>
 8008be8:	003a      	movs	r2, r7
 8008bea:	e7e2      	b.n	8008bb2 <_printf_float+0x41a>
 8008bec:	002a      	movs	r2, r5
 8008bee:	2301      	movs	r3, #1
 8008bf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bf4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008bf6:	3219      	adds	r2, #25
 8008bf8:	47b0      	blx	r6
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d100      	bne.n	8008c00 <_printf_float+0x468>
 8008bfe:	e627      	b.n	8008850 <_printf_float+0xb8>
 8008c00:	3401      	adds	r4, #1
 8008c02:	68eb      	ldr	r3, [r5, #12]
 8008c04:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008c06:	1a9b      	subs	r3, r3, r2
 8008c08:	42a3      	cmp	r3, r4
 8008c0a:	dcef      	bgt.n	8008bec <_printf_float+0x454>
 8008c0c:	e6f8      	b.n	8008a00 <_printf_float+0x268>
 8008c0e:	2400      	movs	r4, #0
 8008c10:	e7f7      	b.n	8008c02 <_printf_float+0x46a>
 8008c12:	46c0      	nop			@ (mov r8, r8)

08008c14 <_printf_common>:
 8008c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c16:	0016      	movs	r6, r2
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	688a      	ldr	r2, [r1, #8]
 8008c1c:	690b      	ldr	r3, [r1, #16]
 8008c1e:	000c      	movs	r4, r1
 8008c20:	9000      	str	r0, [sp, #0]
 8008c22:	4293      	cmp	r3, r2
 8008c24:	da00      	bge.n	8008c28 <_printf_common+0x14>
 8008c26:	0013      	movs	r3, r2
 8008c28:	0022      	movs	r2, r4
 8008c2a:	6033      	str	r3, [r6, #0]
 8008c2c:	3243      	adds	r2, #67	@ 0x43
 8008c2e:	7812      	ldrb	r2, [r2, #0]
 8008c30:	2a00      	cmp	r2, #0
 8008c32:	d001      	beq.n	8008c38 <_printf_common+0x24>
 8008c34:	3301      	adds	r3, #1
 8008c36:	6033      	str	r3, [r6, #0]
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	069b      	lsls	r3, r3, #26
 8008c3c:	d502      	bpl.n	8008c44 <_printf_common+0x30>
 8008c3e:	6833      	ldr	r3, [r6, #0]
 8008c40:	3302      	adds	r3, #2
 8008c42:	6033      	str	r3, [r6, #0]
 8008c44:	6822      	ldr	r2, [r4, #0]
 8008c46:	2306      	movs	r3, #6
 8008c48:	0015      	movs	r5, r2
 8008c4a:	401d      	ands	r5, r3
 8008c4c:	421a      	tst	r2, r3
 8008c4e:	d027      	beq.n	8008ca0 <_printf_common+0x8c>
 8008c50:	0023      	movs	r3, r4
 8008c52:	3343      	adds	r3, #67	@ 0x43
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	1e5a      	subs	r2, r3, #1
 8008c58:	4193      	sbcs	r3, r2
 8008c5a:	6822      	ldr	r2, [r4, #0]
 8008c5c:	0692      	lsls	r2, r2, #26
 8008c5e:	d430      	bmi.n	8008cc2 <_printf_common+0xae>
 8008c60:	0022      	movs	r2, r4
 8008c62:	9901      	ldr	r1, [sp, #4]
 8008c64:	9800      	ldr	r0, [sp, #0]
 8008c66:	9d08      	ldr	r5, [sp, #32]
 8008c68:	3243      	adds	r2, #67	@ 0x43
 8008c6a:	47a8      	blx	r5
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	d025      	beq.n	8008cbc <_printf_common+0xa8>
 8008c70:	2206      	movs	r2, #6
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	2500      	movs	r5, #0
 8008c76:	4013      	ands	r3, r2
 8008c78:	2b04      	cmp	r3, #4
 8008c7a:	d105      	bne.n	8008c88 <_printf_common+0x74>
 8008c7c:	6833      	ldr	r3, [r6, #0]
 8008c7e:	68e5      	ldr	r5, [r4, #12]
 8008c80:	1aed      	subs	r5, r5, r3
 8008c82:	43eb      	mvns	r3, r5
 8008c84:	17db      	asrs	r3, r3, #31
 8008c86:	401d      	ands	r5, r3
 8008c88:	68a3      	ldr	r3, [r4, #8]
 8008c8a:	6922      	ldr	r2, [r4, #16]
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	dd01      	ble.n	8008c94 <_printf_common+0x80>
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	18ed      	adds	r5, r5, r3
 8008c94:	2600      	movs	r6, #0
 8008c96:	42b5      	cmp	r5, r6
 8008c98:	d120      	bne.n	8008cdc <_printf_common+0xc8>
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	e010      	b.n	8008cc0 <_printf_common+0xac>
 8008c9e:	3501      	adds	r5, #1
 8008ca0:	68e3      	ldr	r3, [r4, #12]
 8008ca2:	6832      	ldr	r2, [r6, #0]
 8008ca4:	1a9b      	subs	r3, r3, r2
 8008ca6:	42ab      	cmp	r3, r5
 8008ca8:	ddd2      	ble.n	8008c50 <_printf_common+0x3c>
 8008caa:	0022      	movs	r2, r4
 8008cac:	2301      	movs	r3, #1
 8008cae:	9901      	ldr	r1, [sp, #4]
 8008cb0:	9800      	ldr	r0, [sp, #0]
 8008cb2:	9f08      	ldr	r7, [sp, #32]
 8008cb4:	3219      	adds	r2, #25
 8008cb6:	47b8      	blx	r7
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d1f0      	bne.n	8008c9e <_printf_common+0x8a>
 8008cbc:	2001      	movs	r0, #1
 8008cbe:	4240      	negs	r0, r0
 8008cc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008cc2:	2030      	movs	r0, #48	@ 0x30
 8008cc4:	18e1      	adds	r1, r4, r3
 8008cc6:	3143      	adds	r1, #67	@ 0x43
 8008cc8:	7008      	strb	r0, [r1, #0]
 8008cca:	0021      	movs	r1, r4
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	3145      	adds	r1, #69	@ 0x45
 8008cd0:	7809      	ldrb	r1, [r1, #0]
 8008cd2:	18a2      	adds	r2, r4, r2
 8008cd4:	3243      	adds	r2, #67	@ 0x43
 8008cd6:	3302      	adds	r3, #2
 8008cd8:	7011      	strb	r1, [r2, #0]
 8008cda:	e7c1      	b.n	8008c60 <_printf_common+0x4c>
 8008cdc:	0022      	movs	r2, r4
 8008cde:	2301      	movs	r3, #1
 8008ce0:	9901      	ldr	r1, [sp, #4]
 8008ce2:	9800      	ldr	r0, [sp, #0]
 8008ce4:	9f08      	ldr	r7, [sp, #32]
 8008ce6:	321a      	adds	r2, #26
 8008ce8:	47b8      	blx	r7
 8008cea:	3001      	adds	r0, #1
 8008cec:	d0e6      	beq.n	8008cbc <_printf_common+0xa8>
 8008cee:	3601      	adds	r6, #1
 8008cf0:	e7d1      	b.n	8008c96 <_printf_common+0x82>
	...

08008cf4 <_printf_i>:
 8008cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cf6:	b08b      	sub	sp, #44	@ 0x2c
 8008cf8:	9206      	str	r2, [sp, #24]
 8008cfa:	000a      	movs	r2, r1
 8008cfc:	3243      	adds	r2, #67	@ 0x43
 8008cfe:	9307      	str	r3, [sp, #28]
 8008d00:	9005      	str	r0, [sp, #20]
 8008d02:	9203      	str	r2, [sp, #12]
 8008d04:	7e0a      	ldrb	r2, [r1, #24]
 8008d06:	000c      	movs	r4, r1
 8008d08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d0a:	2a78      	cmp	r2, #120	@ 0x78
 8008d0c:	d809      	bhi.n	8008d22 <_printf_i+0x2e>
 8008d0e:	2a62      	cmp	r2, #98	@ 0x62
 8008d10:	d80b      	bhi.n	8008d2a <_printf_i+0x36>
 8008d12:	2a00      	cmp	r2, #0
 8008d14:	d100      	bne.n	8008d18 <_printf_i+0x24>
 8008d16:	e0ba      	b.n	8008e8e <_printf_i+0x19a>
 8008d18:	497a      	ldr	r1, [pc, #488]	@ (8008f04 <_printf_i+0x210>)
 8008d1a:	9104      	str	r1, [sp, #16]
 8008d1c:	2a58      	cmp	r2, #88	@ 0x58
 8008d1e:	d100      	bne.n	8008d22 <_printf_i+0x2e>
 8008d20:	e08e      	b.n	8008e40 <_printf_i+0x14c>
 8008d22:	0025      	movs	r5, r4
 8008d24:	3542      	adds	r5, #66	@ 0x42
 8008d26:	702a      	strb	r2, [r5, #0]
 8008d28:	e022      	b.n	8008d70 <_printf_i+0x7c>
 8008d2a:	0010      	movs	r0, r2
 8008d2c:	3863      	subs	r0, #99	@ 0x63
 8008d2e:	2815      	cmp	r0, #21
 8008d30:	d8f7      	bhi.n	8008d22 <_printf_i+0x2e>
 8008d32:	f7f7 f9f9 	bl	8000128 <__gnu_thumb1_case_shi>
 8008d36:	0016      	.short	0x0016
 8008d38:	fff6001f 	.word	0xfff6001f
 8008d3c:	fff6fff6 	.word	0xfff6fff6
 8008d40:	001ffff6 	.word	0x001ffff6
 8008d44:	fff6fff6 	.word	0xfff6fff6
 8008d48:	fff6fff6 	.word	0xfff6fff6
 8008d4c:	0036009f 	.word	0x0036009f
 8008d50:	fff6007e 	.word	0xfff6007e
 8008d54:	00b0fff6 	.word	0x00b0fff6
 8008d58:	0036fff6 	.word	0x0036fff6
 8008d5c:	fff6fff6 	.word	0xfff6fff6
 8008d60:	0082      	.short	0x0082
 8008d62:	0025      	movs	r5, r4
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	3542      	adds	r5, #66	@ 0x42
 8008d68:	1d11      	adds	r1, r2, #4
 8008d6a:	6019      	str	r1, [r3, #0]
 8008d6c:	6813      	ldr	r3, [r2, #0]
 8008d6e:	702b      	strb	r3, [r5, #0]
 8008d70:	2301      	movs	r3, #1
 8008d72:	e09e      	b.n	8008eb2 <_printf_i+0x1be>
 8008d74:	6818      	ldr	r0, [r3, #0]
 8008d76:	6809      	ldr	r1, [r1, #0]
 8008d78:	1d02      	adds	r2, r0, #4
 8008d7a:	060d      	lsls	r5, r1, #24
 8008d7c:	d50b      	bpl.n	8008d96 <_printf_i+0xa2>
 8008d7e:	6806      	ldr	r6, [r0, #0]
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	2e00      	cmp	r6, #0
 8008d84:	da03      	bge.n	8008d8e <_printf_i+0x9a>
 8008d86:	232d      	movs	r3, #45	@ 0x2d
 8008d88:	9a03      	ldr	r2, [sp, #12]
 8008d8a:	4276      	negs	r6, r6
 8008d8c:	7013      	strb	r3, [r2, #0]
 8008d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8008f04 <_printf_i+0x210>)
 8008d90:	270a      	movs	r7, #10
 8008d92:	9304      	str	r3, [sp, #16]
 8008d94:	e018      	b.n	8008dc8 <_printf_i+0xd4>
 8008d96:	6806      	ldr	r6, [r0, #0]
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	0649      	lsls	r1, r1, #25
 8008d9c:	d5f1      	bpl.n	8008d82 <_printf_i+0x8e>
 8008d9e:	b236      	sxth	r6, r6
 8008da0:	e7ef      	b.n	8008d82 <_printf_i+0x8e>
 8008da2:	6808      	ldr	r0, [r1, #0]
 8008da4:	6819      	ldr	r1, [r3, #0]
 8008da6:	c940      	ldmia	r1!, {r6}
 8008da8:	0605      	lsls	r5, r0, #24
 8008daa:	d402      	bmi.n	8008db2 <_printf_i+0xbe>
 8008dac:	0640      	lsls	r0, r0, #25
 8008dae:	d500      	bpl.n	8008db2 <_printf_i+0xbe>
 8008db0:	b2b6      	uxth	r6, r6
 8008db2:	6019      	str	r1, [r3, #0]
 8008db4:	4b53      	ldr	r3, [pc, #332]	@ (8008f04 <_printf_i+0x210>)
 8008db6:	270a      	movs	r7, #10
 8008db8:	9304      	str	r3, [sp, #16]
 8008dba:	2a6f      	cmp	r2, #111	@ 0x6f
 8008dbc:	d100      	bne.n	8008dc0 <_printf_i+0xcc>
 8008dbe:	3f02      	subs	r7, #2
 8008dc0:	0023      	movs	r3, r4
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	3343      	adds	r3, #67	@ 0x43
 8008dc6:	701a      	strb	r2, [r3, #0]
 8008dc8:	6863      	ldr	r3, [r4, #4]
 8008dca:	60a3      	str	r3, [r4, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	db06      	blt.n	8008dde <_printf_i+0xea>
 8008dd0:	2104      	movs	r1, #4
 8008dd2:	6822      	ldr	r2, [r4, #0]
 8008dd4:	9d03      	ldr	r5, [sp, #12]
 8008dd6:	438a      	bics	r2, r1
 8008dd8:	6022      	str	r2, [r4, #0]
 8008dda:	4333      	orrs	r3, r6
 8008ddc:	d00c      	beq.n	8008df8 <_printf_i+0x104>
 8008dde:	9d03      	ldr	r5, [sp, #12]
 8008de0:	0030      	movs	r0, r6
 8008de2:	0039      	movs	r1, r7
 8008de4:	f7f7 fa30 	bl	8000248 <__aeabi_uidivmod>
 8008de8:	9b04      	ldr	r3, [sp, #16]
 8008dea:	3d01      	subs	r5, #1
 8008dec:	5c5b      	ldrb	r3, [r3, r1]
 8008dee:	702b      	strb	r3, [r5, #0]
 8008df0:	0033      	movs	r3, r6
 8008df2:	0006      	movs	r6, r0
 8008df4:	429f      	cmp	r7, r3
 8008df6:	d9f3      	bls.n	8008de0 <_printf_i+0xec>
 8008df8:	2f08      	cmp	r7, #8
 8008dfa:	d109      	bne.n	8008e10 <_printf_i+0x11c>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	07db      	lsls	r3, r3, #31
 8008e00:	d506      	bpl.n	8008e10 <_printf_i+0x11c>
 8008e02:	6862      	ldr	r2, [r4, #4]
 8008e04:	6923      	ldr	r3, [r4, #16]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	dc02      	bgt.n	8008e10 <_printf_i+0x11c>
 8008e0a:	2330      	movs	r3, #48	@ 0x30
 8008e0c:	3d01      	subs	r5, #1
 8008e0e:	702b      	strb	r3, [r5, #0]
 8008e10:	9b03      	ldr	r3, [sp, #12]
 8008e12:	1b5b      	subs	r3, r3, r5
 8008e14:	6123      	str	r3, [r4, #16]
 8008e16:	9b07      	ldr	r3, [sp, #28]
 8008e18:	0021      	movs	r1, r4
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	9805      	ldr	r0, [sp, #20]
 8008e1e:	9b06      	ldr	r3, [sp, #24]
 8008e20:	aa09      	add	r2, sp, #36	@ 0x24
 8008e22:	f7ff fef7 	bl	8008c14 <_printf_common>
 8008e26:	3001      	adds	r0, #1
 8008e28:	d148      	bne.n	8008ebc <_printf_i+0x1c8>
 8008e2a:	2001      	movs	r0, #1
 8008e2c:	4240      	negs	r0, r0
 8008e2e:	b00b      	add	sp, #44	@ 0x2c
 8008e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e32:	2220      	movs	r2, #32
 8008e34:	6809      	ldr	r1, [r1, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	6022      	str	r2, [r4, #0]
 8008e3a:	2278      	movs	r2, #120	@ 0x78
 8008e3c:	4932      	ldr	r1, [pc, #200]	@ (8008f08 <_printf_i+0x214>)
 8008e3e:	9104      	str	r1, [sp, #16]
 8008e40:	0021      	movs	r1, r4
 8008e42:	3145      	adds	r1, #69	@ 0x45
 8008e44:	700a      	strb	r2, [r1, #0]
 8008e46:	6819      	ldr	r1, [r3, #0]
 8008e48:	6822      	ldr	r2, [r4, #0]
 8008e4a:	c940      	ldmia	r1!, {r6}
 8008e4c:	0610      	lsls	r0, r2, #24
 8008e4e:	d402      	bmi.n	8008e56 <_printf_i+0x162>
 8008e50:	0650      	lsls	r0, r2, #25
 8008e52:	d500      	bpl.n	8008e56 <_printf_i+0x162>
 8008e54:	b2b6      	uxth	r6, r6
 8008e56:	6019      	str	r1, [r3, #0]
 8008e58:	07d3      	lsls	r3, r2, #31
 8008e5a:	d502      	bpl.n	8008e62 <_printf_i+0x16e>
 8008e5c:	2320      	movs	r3, #32
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	2e00      	cmp	r6, #0
 8008e64:	d001      	beq.n	8008e6a <_printf_i+0x176>
 8008e66:	2710      	movs	r7, #16
 8008e68:	e7aa      	b.n	8008dc0 <_printf_i+0xcc>
 8008e6a:	2220      	movs	r2, #32
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	4393      	bics	r3, r2
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	e7f8      	b.n	8008e66 <_printf_i+0x172>
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	680d      	ldr	r5, [r1, #0]
 8008e78:	1d10      	adds	r0, r2, #4
 8008e7a:	6949      	ldr	r1, [r1, #20]
 8008e7c:	6018      	str	r0, [r3, #0]
 8008e7e:	6813      	ldr	r3, [r2, #0]
 8008e80:	062e      	lsls	r6, r5, #24
 8008e82:	d501      	bpl.n	8008e88 <_printf_i+0x194>
 8008e84:	6019      	str	r1, [r3, #0]
 8008e86:	e002      	b.n	8008e8e <_printf_i+0x19a>
 8008e88:	066d      	lsls	r5, r5, #25
 8008e8a:	d5fb      	bpl.n	8008e84 <_printf_i+0x190>
 8008e8c:	8019      	strh	r1, [r3, #0]
 8008e8e:	2300      	movs	r3, #0
 8008e90:	9d03      	ldr	r5, [sp, #12]
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	e7bf      	b.n	8008e16 <_printf_i+0x122>
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	1d11      	adds	r1, r2, #4
 8008e9a:	6019      	str	r1, [r3, #0]
 8008e9c:	6815      	ldr	r5, [r2, #0]
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	0028      	movs	r0, r5
 8008ea2:	6862      	ldr	r2, [r4, #4]
 8008ea4:	f000 f966 	bl	8009174 <memchr>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	d001      	beq.n	8008eb0 <_printf_i+0x1bc>
 8008eac:	1b40      	subs	r0, r0, r5
 8008eae:	6060      	str	r0, [r4, #4]
 8008eb0:	6863      	ldr	r3, [r4, #4]
 8008eb2:	6123      	str	r3, [r4, #16]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	9a03      	ldr	r2, [sp, #12]
 8008eb8:	7013      	strb	r3, [r2, #0]
 8008eba:	e7ac      	b.n	8008e16 <_printf_i+0x122>
 8008ebc:	002a      	movs	r2, r5
 8008ebe:	6923      	ldr	r3, [r4, #16]
 8008ec0:	9906      	ldr	r1, [sp, #24]
 8008ec2:	9805      	ldr	r0, [sp, #20]
 8008ec4:	9d07      	ldr	r5, [sp, #28]
 8008ec6:	47a8      	blx	r5
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d0ae      	beq.n	8008e2a <_printf_i+0x136>
 8008ecc:	6823      	ldr	r3, [r4, #0]
 8008ece:	079b      	lsls	r3, r3, #30
 8008ed0:	d415      	bmi.n	8008efe <_printf_i+0x20a>
 8008ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ed4:	68e0      	ldr	r0, [r4, #12]
 8008ed6:	4298      	cmp	r0, r3
 8008ed8:	daa9      	bge.n	8008e2e <_printf_i+0x13a>
 8008eda:	0018      	movs	r0, r3
 8008edc:	e7a7      	b.n	8008e2e <_printf_i+0x13a>
 8008ede:	0022      	movs	r2, r4
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	9906      	ldr	r1, [sp, #24]
 8008ee4:	9805      	ldr	r0, [sp, #20]
 8008ee6:	9e07      	ldr	r6, [sp, #28]
 8008ee8:	3219      	adds	r2, #25
 8008eea:	47b0      	blx	r6
 8008eec:	3001      	adds	r0, #1
 8008eee:	d09c      	beq.n	8008e2a <_printf_i+0x136>
 8008ef0:	3501      	adds	r5, #1
 8008ef2:	68e3      	ldr	r3, [r4, #12]
 8008ef4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ef6:	1a9b      	subs	r3, r3, r2
 8008ef8:	42ab      	cmp	r3, r5
 8008efa:	dcf0      	bgt.n	8008ede <_printf_i+0x1ea>
 8008efc:	e7e9      	b.n	8008ed2 <_printf_i+0x1de>
 8008efe:	2500      	movs	r5, #0
 8008f00:	e7f7      	b.n	8008ef2 <_printf_i+0x1fe>
 8008f02:	46c0      	nop			@ (mov r8, r8)
 8008f04:	0800b82a 	.word	0x0800b82a
 8008f08:	0800b83b 	.word	0x0800b83b

08008f0c <sniprintf>:
 8008f0c:	b40c      	push	{r2, r3}
 8008f0e:	b530      	push	{r4, r5, lr}
 8008f10:	4b18      	ldr	r3, [pc, #96]	@ (8008f74 <sniprintf+0x68>)
 8008f12:	000c      	movs	r4, r1
 8008f14:	681d      	ldr	r5, [r3, #0]
 8008f16:	b09d      	sub	sp, #116	@ 0x74
 8008f18:	2900      	cmp	r1, #0
 8008f1a:	da08      	bge.n	8008f2e <sniprintf+0x22>
 8008f1c:	238b      	movs	r3, #139	@ 0x8b
 8008f1e:	2001      	movs	r0, #1
 8008f20:	602b      	str	r3, [r5, #0]
 8008f22:	4240      	negs	r0, r0
 8008f24:	b01d      	add	sp, #116	@ 0x74
 8008f26:	bc30      	pop	{r4, r5}
 8008f28:	bc08      	pop	{r3}
 8008f2a:	b002      	add	sp, #8
 8008f2c:	4718      	bx	r3
 8008f2e:	2382      	movs	r3, #130	@ 0x82
 8008f30:	466a      	mov	r2, sp
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	8293      	strh	r3, [r2, #20]
 8008f36:	2300      	movs	r3, #0
 8008f38:	9002      	str	r0, [sp, #8]
 8008f3a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008f3c:	9006      	str	r0, [sp, #24]
 8008f3e:	4299      	cmp	r1, r3
 8008f40:	d000      	beq.n	8008f44 <sniprintf+0x38>
 8008f42:	1e4b      	subs	r3, r1, #1
 8008f44:	9304      	str	r3, [sp, #16]
 8008f46:	9307      	str	r3, [sp, #28]
 8008f48:	2301      	movs	r3, #1
 8008f4a:	466a      	mov	r2, sp
 8008f4c:	425b      	negs	r3, r3
 8008f4e:	82d3      	strh	r3, [r2, #22]
 8008f50:	0028      	movs	r0, r5
 8008f52:	ab21      	add	r3, sp, #132	@ 0x84
 8008f54:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008f56:	a902      	add	r1, sp, #8
 8008f58:	9301      	str	r3, [sp, #4]
 8008f5a:	f000 fff5 	bl	8009f48 <_svfiprintf_r>
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	da01      	bge.n	8008f66 <sniprintf+0x5a>
 8008f62:	238b      	movs	r3, #139	@ 0x8b
 8008f64:	602b      	str	r3, [r5, #0]
 8008f66:	2c00      	cmp	r4, #0
 8008f68:	d0dc      	beq.n	8008f24 <sniprintf+0x18>
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	9b02      	ldr	r3, [sp, #8]
 8008f6e:	701a      	strb	r2, [r3, #0]
 8008f70:	e7d8      	b.n	8008f24 <sniprintf+0x18>
 8008f72:	46c0      	nop			@ (mov r8, r8)
 8008f74:	20000018 	.word	0x20000018

08008f78 <std>:
 8008f78:	2300      	movs	r3, #0
 8008f7a:	b510      	push	{r4, lr}
 8008f7c:	0004      	movs	r4, r0
 8008f7e:	6003      	str	r3, [r0, #0]
 8008f80:	6043      	str	r3, [r0, #4]
 8008f82:	6083      	str	r3, [r0, #8]
 8008f84:	8181      	strh	r1, [r0, #12]
 8008f86:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f88:	81c2      	strh	r2, [r0, #14]
 8008f8a:	6103      	str	r3, [r0, #16]
 8008f8c:	6143      	str	r3, [r0, #20]
 8008f8e:	6183      	str	r3, [r0, #24]
 8008f90:	0019      	movs	r1, r3
 8008f92:	2208      	movs	r2, #8
 8008f94:	305c      	adds	r0, #92	@ 0x5c
 8008f96:	f000 f8b3 	bl	8009100 <memset>
 8008f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc8 <std+0x50>)
 8008f9c:	6224      	str	r4, [r4, #32]
 8008f9e:	6263      	str	r3, [r4, #36]	@ 0x24
 8008fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8008fcc <std+0x54>)
 8008fa2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd0 <std+0x58>)
 8008fa6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd4 <std+0x5c>)
 8008faa:	6323      	str	r3, [r4, #48]	@ 0x30
 8008fac:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd8 <std+0x60>)
 8008fae:	429c      	cmp	r4, r3
 8008fb0:	d005      	beq.n	8008fbe <std+0x46>
 8008fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008fdc <std+0x64>)
 8008fb4:	429c      	cmp	r4, r3
 8008fb6:	d002      	beq.n	8008fbe <std+0x46>
 8008fb8:	4b09      	ldr	r3, [pc, #36]	@ (8008fe0 <std+0x68>)
 8008fba:	429c      	cmp	r4, r3
 8008fbc:	d103      	bne.n	8008fc6 <std+0x4e>
 8008fbe:	0020      	movs	r0, r4
 8008fc0:	3058      	adds	r0, #88	@ 0x58
 8008fc2:	f000 f8cf 	bl	8009164 <__retarget_lock_init_recursive>
 8008fc6:	bd10      	pop	{r4, pc}
 8008fc8:	0800ab59 	.word	0x0800ab59
 8008fcc:	0800ab81 	.word	0x0800ab81
 8008fd0:	0800abb9 	.word	0x0800abb9
 8008fd4:	0800abe5 	.word	0x0800abe5
 8008fd8:	200003b4 	.word	0x200003b4
 8008fdc:	2000041c 	.word	0x2000041c
 8008fe0:	20000484 	.word	0x20000484

08008fe4 <stdio_exit_handler>:
 8008fe4:	b510      	push	{r4, lr}
 8008fe6:	4a03      	ldr	r2, [pc, #12]	@ (8008ff4 <stdio_exit_handler+0x10>)
 8008fe8:	4903      	ldr	r1, [pc, #12]	@ (8008ff8 <stdio_exit_handler+0x14>)
 8008fea:	4804      	ldr	r0, [pc, #16]	@ (8008ffc <stdio_exit_handler+0x18>)
 8008fec:	f000 f86c 	bl	80090c8 <_fwalk_sglue>
 8008ff0:	bd10      	pop	{r4, pc}
 8008ff2:	46c0      	nop			@ (mov r8, r8)
 8008ff4:	2000000c 	.word	0x2000000c
 8008ff8:	0800a3a9 	.word	0x0800a3a9
 8008ffc:	2000001c 	.word	0x2000001c

08009000 <cleanup_stdio>:
 8009000:	6841      	ldr	r1, [r0, #4]
 8009002:	4b0b      	ldr	r3, [pc, #44]	@ (8009030 <cleanup_stdio+0x30>)
 8009004:	b510      	push	{r4, lr}
 8009006:	0004      	movs	r4, r0
 8009008:	4299      	cmp	r1, r3
 800900a:	d001      	beq.n	8009010 <cleanup_stdio+0x10>
 800900c:	f001 f9cc 	bl	800a3a8 <_fflush_r>
 8009010:	68a1      	ldr	r1, [r4, #8]
 8009012:	4b08      	ldr	r3, [pc, #32]	@ (8009034 <cleanup_stdio+0x34>)
 8009014:	4299      	cmp	r1, r3
 8009016:	d002      	beq.n	800901e <cleanup_stdio+0x1e>
 8009018:	0020      	movs	r0, r4
 800901a:	f001 f9c5 	bl	800a3a8 <_fflush_r>
 800901e:	68e1      	ldr	r1, [r4, #12]
 8009020:	4b05      	ldr	r3, [pc, #20]	@ (8009038 <cleanup_stdio+0x38>)
 8009022:	4299      	cmp	r1, r3
 8009024:	d002      	beq.n	800902c <cleanup_stdio+0x2c>
 8009026:	0020      	movs	r0, r4
 8009028:	f001 f9be 	bl	800a3a8 <_fflush_r>
 800902c:	bd10      	pop	{r4, pc}
 800902e:	46c0      	nop			@ (mov r8, r8)
 8009030:	200003b4 	.word	0x200003b4
 8009034:	2000041c 	.word	0x2000041c
 8009038:	20000484 	.word	0x20000484

0800903c <global_stdio_init.part.0>:
 800903c:	b510      	push	{r4, lr}
 800903e:	4b09      	ldr	r3, [pc, #36]	@ (8009064 <global_stdio_init.part.0+0x28>)
 8009040:	4a09      	ldr	r2, [pc, #36]	@ (8009068 <global_stdio_init.part.0+0x2c>)
 8009042:	2104      	movs	r1, #4
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	4809      	ldr	r0, [pc, #36]	@ (800906c <global_stdio_init.part.0+0x30>)
 8009048:	2200      	movs	r2, #0
 800904a:	f7ff ff95 	bl	8008f78 <std>
 800904e:	2201      	movs	r2, #1
 8009050:	2109      	movs	r1, #9
 8009052:	4807      	ldr	r0, [pc, #28]	@ (8009070 <global_stdio_init.part.0+0x34>)
 8009054:	f7ff ff90 	bl	8008f78 <std>
 8009058:	2202      	movs	r2, #2
 800905a:	2112      	movs	r1, #18
 800905c:	4805      	ldr	r0, [pc, #20]	@ (8009074 <global_stdio_init.part.0+0x38>)
 800905e:	f7ff ff8b 	bl	8008f78 <std>
 8009062:	bd10      	pop	{r4, pc}
 8009064:	200004ec 	.word	0x200004ec
 8009068:	08008fe5 	.word	0x08008fe5
 800906c:	200003b4 	.word	0x200003b4
 8009070:	2000041c 	.word	0x2000041c
 8009074:	20000484 	.word	0x20000484

08009078 <__sfp_lock_acquire>:
 8009078:	b510      	push	{r4, lr}
 800907a:	4802      	ldr	r0, [pc, #8]	@ (8009084 <__sfp_lock_acquire+0xc>)
 800907c:	f000 f873 	bl	8009166 <__retarget_lock_acquire_recursive>
 8009080:	bd10      	pop	{r4, pc}
 8009082:	46c0      	nop			@ (mov r8, r8)
 8009084:	200004f1 	.word	0x200004f1

08009088 <__sfp_lock_release>:
 8009088:	b510      	push	{r4, lr}
 800908a:	4802      	ldr	r0, [pc, #8]	@ (8009094 <__sfp_lock_release+0xc>)
 800908c:	f000 f86c 	bl	8009168 <__retarget_lock_release_recursive>
 8009090:	bd10      	pop	{r4, pc}
 8009092:	46c0      	nop			@ (mov r8, r8)
 8009094:	200004f1 	.word	0x200004f1

08009098 <__sinit>:
 8009098:	b510      	push	{r4, lr}
 800909a:	0004      	movs	r4, r0
 800909c:	f7ff ffec 	bl	8009078 <__sfp_lock_acquire>
 80090a0:	6a23      	ldr	r3, [r4, #32]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <__sinit+0x14>
 80090a6:	f7ff ffef 	bl	8009088 <__sfp_lock_release>
 80090aa:	bd10      	pop	{r4, pc}
 80090ac:	4b04      	ldr	r3, [pc, #16]	@ (80090c0 <__sinit+0x28>)
 80090ae:	6223      	str	r3, [r4, #32]
 80090b0:	4b04      	ldr	r3, [pc, #16]	@ (80090c4 <__sinit+0x2c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1f6      	bne.n	80090a6 <__sinit+0xe>
 80090b8:	f7ff ffc0 	bl	800903c <global_stdio_init.part.0>
 80090bc:	e7f3      	b.n	80090a6 <__sinit+0xe>
 80090be:	46c0      	nop			@ (mov r8, r8)
 80090c0:	08009001 	.word	0x08009001
 80090c4:	200004ec 	.word	0x200004ec

080090c8 <_fwalk_sglue>:
 80090c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ca:	0014      	movs	r4, r2
 80090cc:	2600      	movs	r6, #0
 80090ce:	9000      	str	r0, [sp, #0]
 80090d0:	9101      	str	r1, [sp, #4]
 80090d2:	68a5      	ldr	r5, [r4, #8]
 80090d4:	6867      	ldr	r7, [r4, #4]
 80090d6:	3f01      	subs	r7, #1
 80090d8:	d504      	bpl.n	80090e4 <_fwalk_sglue+0x1c>
 80090da:	6824      	ldr	r4, [r4, #0]
 80090dc:	2c00      	cmp	r4, #0
 80090de:	d1f8      	bne.n	80090d2 <_fwalk_sglue+0xa>
 80090e0:	0030      	movs	r0, r6
 80090e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090e4:	89ab      	ldrh	r3, [r5, #12]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d908      	bls.n	80090fc <_fwalk_sglue+0x34>
 80090ea:	220e      	movs	r2, #14
 80090ec:	5eab      	ldrsh	r3, [r5, r2]
 80090ee:	3301      	adds	r3, #1
 80090f0:	d004      	beq.n	80090fc <_fwalk_sglue+0x34>
 80090f2:	0029      	movs	r1, r5
 80090f4:	9800      	ldr	r0, [sp, #0]
 80090f6:	9b01      	ldr	r3, [sp, #4]
 80090f8:	4798      	blx	r3
 80090fa:	4306      	orrs	r6, r0
 80090fc:	3568      	adds	r5, #104	@ 0x68
 80090fe:	e7ea      	b.n	80090d6 <_fwalk_sglue+0xe>

08009100 <memset>:
 8009100:	0003      	movs	r3, r0
 8009102:	1882      	adds	r2, r0, r2
 8009104:	4293      	cmp	r3, r2
 8009106:	d100      	bne.n	800910a <memset+0xa>
 8009108:	4770      	bx	lr
 800910a:	7019      	strb	r1, [r3, #0]
 800910c:	3301      	adds	r3, #1
 800910e:	e7f9      	b.n	8009104 <memset+0x4>

08009110 <__errno>:
 8009110:	4b01      	ldr	r3, [pc, #4]	@ (8009118 <__errno+0x8>)
 8009112:	6818      	ldr	r0, [r3, #0]
 8009114:	4770      	bx	lr
 8009116:	46c0      	nop			@ (mov r8, r8)
 8009118:	20000018 	.word	0x20000018

0800911c <__libc_init_array>:
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	2600      	movs	r6, #0
 8009120:	4c0c      	ldr	r4, [pc, #48]	@ (8009154 <__libc_init_array+0x38>)
 8009122:	4d0d      	ldr	r5, [pc, #52]	@ (8009158 <__libc_init_array+0x3c>)
 8009124:	1b64      	subs	r4, r4, r5
 8009126:	10a4      	asrs	r4, r4, #2
 8009128:	42a6      	cmp	r6, r4
 800912a:	d109      	bne.n	8009140 <__libc_init_array+0x24>
 800912c:	2600      	movs	r6, #0
 800912e:	f002 f991 	bl	800b454 <_init>
 8009132:	4c0a      	ldr	r4, [pc, #40]	@ (800915c <__libc_init_array+0x40>)
 8009134:	4d0a      	ldr	r5, [pc, #40]	@ (8009160 <__libc_init_array+0x44>)
 8009136:	1b64      	subs	r4, r4, r5
 8009138:	10a4      	asrs	r4, r4, #2
 800913a:	42a6      	cmp	r6, r4
 800913c:	d105      	bne.n	800914a <__libc_init_array+0x2e>
 800913e:	bd70      	pop	{r4, r5, r6, pc}
 8009140:	00b3      	lsls	r3, r6, #2
 8009142:	58eb      	ldr	r3, [r5, r3]
 8009144:	4798      	blx	r3
 8009146:	3601      	adds	r6, #1
 8009148:	e7ee      	b.n	8009128 <__libc_init_array+0xc>
 800914a:	00b3      	lsls	r3, r6, #2
 800914c:	58eb      	ldr	r3, [r5, r3]
 800914e:	4798      	blx	r3
 8009150:	3601      	adds	r6, #1
 8009152:	e7f2      	b.n	800913a <__libc_init_array+0x1e>
 8009154:	0800bb94 	.word	0x0800bb94
 8009158:	0800bb94 	.word	0x0800bb94
 800915c:	0800bb98 	.word	0x0800bb98
 8009160:	0800bb94 	.word	0x0800bb94

08009164 <__retarget_lock_init_recursive>:
 8009164:	4770      	bx	lr

08009166 <__retarget_lock_acquire_recursive>:
 8009166:	4770      	bx	lr

08009168 <__retarget_lock_release_recursive>:
 8009168:	4770      	bx	lr
	...

0800916c <_localeconv_r>:
 800916c:	4800      	ldr	r0, [pc, #0]	@ (8009170 <_localeconv_r+0x4>)
 800916e:	4770      	bx	lr
 8009170:	20000158 	.word	0x20000158

08009174 <memchr>:
 8009174:	b2c9      	uxtb	r1, r1
 8009176:	1882      	adds	r2, r0, r2
 8009178:	4290      	cmp	r0, r2
 800917a:	d101      	bne.n	8009180 <memchr+0xc>
 800917c:	2000      	movs	r0, #0
 800917e:	4770      	bx	lr
 8009180:	7803      	ldrb	r3, [r0, #0]
 8009182:	428b      	cmp	r3, r1
 8009184:	d0fb      	beq.n	800917e <memchr+0xa>
 8009186:	3001      	adds	r0, #1
 8009188:	e7f6      	b.n	8009178 <memchr+0x4>

0800918a <memcpy>:
 800918a:	2300      	movs	r3, #0
 800918c:	b510      	push	{r4, lr}
 800918e:	429a      	cmp	r2, r3
 8009190:	d100      	bne.n	8009194 <memcpy+0xa>
 8009192:	bd10      	pop	{r4, pc}
 8009194:	5ccc      	ldrb	r4, [r1, r3]
 8009196:	54c4      	strb	r4, [r0, r3]
 8009198:	3301      	adds	r3, #1
 800919a:	e7f8      	b.n	800918e <memcpy+0x4>

0800919c <quorem>:
 800919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919e:	6903      	ldr	r3, [r0, #16]
 80091a0:	690c      	ldr	r4, [r1, #16]
 80091a2:	b089      	sub	sp, #36	@ 0x24
 80091a4:	9003      	str	r0, [sp, #12]
 80091a6:	9106      	str	r1, [sp, #24]
 80091a8:	2000      	movs	r0, #0
 80091aa:	42a3      	cmp	r3, r4
 80091ac:	db63      	blt.n	8009276 <quorem+0xda>
 80091ae:	000b      	movs	r3, r1
 80091b0:	3c01      	subs	r4, #1
 80091b2:	3314      	adds	r3, #20
 80091b4:	00a5      	lsls	r5, r4, #2
 80091b6:	9304      	str	r3, [sp, #16]
 80091b8:	195b      	adds	r3, r3, r5
 80091ba:	9305      	str	r3, [sp, #20]
 80091bc:	9b03      	ldr	r3, [sp, #12]
 80091be:	3314      	adds	r3, #20
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	195d      	adds	r5, r3, r5
 80091c4:	9b05      	ldr	r3, [sp, #20]
 80091c6:	682f      	ldr	r7, [r5, #0]
 80091c8:	681e      	ldr	r6, [r3, #0]
 80091ca:	0038      	movs	r0, r7
 80091cc:	3601      	adds	r6, #1
 80091ce:	0031      	movs	r1, r6
 80091d0:	f7f6 ffb4 	bl	800013c <__udivsi3>
 80091d4:	9002      	str	r0, [sp, #8]
 80091d6:	42b7      	cmp	r7, r6
 80091d8:	d327      	bcc.n	800922a <quorem+0x8e>
 80091da:	9b04      	ldr	r3, [sp, #16]
 80091dc:	2700      	movs	r7, #0
 80091de:	469c      	mov	ip, r3
 80091e0:	9e01      	ldr	r6, [sp, #4]
 80091e2:	9707      	str	r7, [sp, #28]
 80091e4:	4662      	mov	r2, ip
 80091e6:	ca08      	ldmia	r2!, {r3}
 80091e8:	6830      	ldr	r0, [r6, #0]
 80091ea:	4694      	mov	ip, r2
 80091ec:	9a02      	ldr	r2, [sp, #8]
 80091ee:	b299      	uxth	r1, r3
 80091f0:	4351      	muls	r1, r2
 80091f2:	0c1b      	lsrs	r3, r3, #16
 80091f4:	4353      	muls	r3, r2
 80091f6:	19c9      	adds	r1, r1, r7
 80091f8:	0c0a      	lsrs	r2, r1, #16
 80091fa:	189b      	adds	r3, r3, r2
 80091fc:	b289      	uxth	r1, r1
 80091fe:	b282      	uxth	r2, r0
 8009200:	1a52      	subs	r2, r2, r1
 8009202:	9907      	ldr	r1, [sp, #28]
 8009204:	0c1f      	lsrs	r7, r3, #16
 8009206:	1852      	adds	r2, r2, r1
 8009208:	0c00      	lsrs	r0, r0, #16
 800920a:	b29b      	uxth	r3, r3
 800920c:	1411      	asrs	r1, r2, #16
 800920e:	1ac3      	subs	r3, r0, r3
 8009210:	185b      	adds	r3, r3, r1
 8009212:	1419      	asrs	r1, r3, #16
 8009214:	b292      	uxth	r2, r2
 8009216:	041b      	lsls	r3, r3, #16
 8009218:	431a      	orrs	r2, r3
 800921a:	9b05      	ldr	r3, [sp, #20]
 800921c:	9107      	str	r1, [sp, #28]
 800921e:	c604      	stmia	r6!, {r2}
 8009220:	4563      	cmp	r3, ip
 8009222:	d2df      	bcs.n	80091e4 <quorem+0x48>
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d02b      	beq.n	8009282 <quorem+0xe6>
 800922a:	9906      	ldr	r1, [sp, #24]
 800922c:	9803      	ldr	r0, [sp, #12]
 800922e:	f001 fb7d 	bl	800a92c <__mcmp>
 8009232:	2800      	cmp	r0, #0
 8009234:	db1e      	blt.n	8009274 <quorem+0xd8>
 8009236:	2600      	movs	r6, #0
 8009238:	9d01      	ldr	r5, [sp, #4]
 800923a:	9904      	ldr	r1, [sp, #16]
 800923c:	c901      	ldmia	r1!, {r0}
 800923e:	682b      	ldr	r3, [r5, #0]
 8009240:	b287      	uxth	r7, r0
 8009242:	b29a      	uxth	r2, r3
 8009244:	1bd2      	subs	r2, r2, r7
 8009246:	1992      	adds	r2, r2, r6
 8009248:	0c00      	lsrs	r0, r0, #16
 800924a:	0c1b      	lsrs	r3, r3, #16
 800924c:	1a1b      	subs	r3, r3, r0
 800924e:	1410      	asrs	r0, r2, #16
 8009250:	181b      	adds	r3, r3, r0
 8009252:	141e      	asrs	r6, r3, #16
 8009254:	b292      	uxth	r2, r2
 8009256:	041b      	lsls	r3, r3, #16
 8009258:	431a      	orrs	r2, r3
 800925a:	9b05      	ldr	r3, [sp, #20]
 800925c:	c504      	stmia	r5!, {r2}
 800925e:	428b      	cmp	r3, r1
 8009260:	d2ec      	bcs.n	800923c <quorem+0xa0>
 8009262:	9a01      	ldr	r2, [sp, #4]
 8009264:	00a3      	lsls	r3, r4, #2
 8009266:	18d3      	adds	r3, r2, r3
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	2a00      	cmp	r2, #0
 800926c:	d014      	beq.n	8009298 <quorem+0xfc>
 800926e:	9b02      	ldr	r3, [sp, #8]
 8009270:	3301      	adds	r3, #1
 8009272:	9302      	str	r3, [sp, #8]
 8009274:	9802      	ldr	r0, [sp, #8]
 8009276:	b009      	add	sp, #36	@ 0x24
 8009278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800927a:	682b      	ldr	r3, [r5, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d104      	bne.n	800928a <quorem+0xee>
 8009280:	3c01      	subs	r4, #1
 8009282:	9b01      	ldr	r3, [sp, #4]
 8009284:	3d04      	subs	r5, #4
 8009286:	42ab      	cmp	r3, r5
 8009288:	d3f7      	bcc.n	800927a <quorem+0xde>
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	611c      	str	r4, [r3, #16]
 800928e:	e7cc      	b.n	800922a <quorem+0x8e>
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	2a00      	cmp	r2, #0
 8009294:	d104      	bne.n	80092a0 <quorem+0x104>
 8009296:	3c01      	subs	r4, #1
 8009298:	9a01      	ldr	r2, [sp, #4]
 800929a:	3b04      	subs	r3, #4
 800929c:	429a      	cmp	r2, r3
 800929e:	d3f7      	bcc.n	8009290 <quorem+0xf4>
 80092a0:	9b03      	ldr	r3, [sp, #12]
 80092a2:	611c      	str	r4, [r3, #16]
 80092a4:	e7e3      	b.n	800926e <quorem+0xd2>
	...

080092a8 <_dtoa_r>:
 80092a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092aa:	0014      	movs	r4, r2
 80092ac:	001d      	movs	r5, r3
 80092ae:	69c6      	ldr	r6, [r0, #28]
 80092b0:	b09d      	sub	sp, #116	@ 0x74
 80092b2:	940a      	str	r4, [sp, #40]	@ 0x28
 80092b4:	950b      	str	r5, [sp, #44]	@ 0x2c
 80092b6:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80092b8:	9003      	str	r0, [sp, #12]
 80092ba:	2e00      	cmp	r6, #0
 80092bc:	d10f      	bne.n	80092de <_dtoa_r+0x36>
 80092be:	2010      	movs	r0, #16
 80092c0:	f000 ff40 	bl	800a144 <malloc>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	1e02      	subs	r2, r0, #0
 80092c8:	61d8      	str	r0, [r3, #28]
 80092ca:	d104      	bne.n	80092d6 <_dtoa_r+0x2e>
 80092cc:	21ef      	movs	r1, #239	@ 0xef
 80092ce:	4bc7      	ldr	r3, [pc, #796]	@ (80095ec <_dtoa_r+0x344>)
 80092d0:	48c7      	ldr	r0, [pc, #796]	@ (80095f0 <_dtoa_r+0x348>)
 80092d2:	f001 fd2f 	bl	800ad34 <__assert_func>
 80092d6:	6046      	str	r6, [r0, #4]
 80092d8:	6086      	str	r6, [r0, #8]
 80092da:	6006      	str	r6, [r0, #0]
 80092dc:	60c6      	str	r6, [r0, #12]
 80092de:	9b03      	ldr	r3, [sp, #12]
 80092e0:	69db      	ldr	r3, [r3, #28]
 80092e2:	6819      	ldr	r1, [r3, #0]
 80092e4:	2900      	cmp	r1, #0
 80092e6:	d00b      	beq.n	8009300 <_dtoa_r+0x58>
 80092e8:	685a      	ldr	r2, [r3, #4]
 80092ea:	2301      	movs	r3, #1
 80092ec:	4093      	lsls	r3, r2
 80092ee:	604a      	str	r2, [r1, #4]
 80092f0:	608b      	str	r3, [r1, #8]
 80092f2:	9803      	ldr	r0, [sp, #12]
 80092f4:	f001 f8d8 	bl	800a4a8 <_Bfree>
 80092f8:	2200      	movs	r2, #0
 80092fa:	9b03      	ldr	r3, [sp, #12]
 80092fc:	69db      	ldr	r3, [r3, #28]
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	2d00      	cmp	r5, #0
 8009302:	da1e      	bge.n	8009342 <_dtoa_r+0x9a>
 8009304:	2301      	movs	r3, #1
 8009306:	603b      	str	r3, [r7, #0]
 8009308:	006b      	lsls	r3, r5, #1
 800930a:	085b      	lsrs	r3, r3, #1
 800930c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800930e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009310:	4bb8      	ldr	r3, [pc, #736]	@ (80095f4 <_dtoa_r+0x34c>)
 8009312:	4ab8      	ldr	r2, [pc, #736]	@ (80095f4 <_dtoa_r+0x34c>)
 8009314:	403b      	ands	r3, r7
 8009316:	4293      	cmp	r3, r2
 8009318:	d116      	bne.n	8009348 <_dtoa_r+0xa0>
 800931a:	4bb7      	ldr	r3, [pc, #732]	@ (80095f8 <_dtoa_r+0x350>)
 800931c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800931e:	6013      	str	r3, [r2, #0]
 8009320:	033b      	lsls	r3, r7, #12
 8009322:	0b1b      	lsrs	r3, r3, #12
 8009324:	4323      	orrs	r3, r4
 8009326:	d101      	bne.n	800932c <_dtoa_r+0x84>
 8009328:	f000 fd80 	bl	8009e2c <_dtoa_r+0xb84>
 800932c:	4bb3      	ldr	r3, [pc, #716]	@ (80095fc <_dtoa_r+0x354>)
 800932e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009330:	9308      	str	r3, [sp, #32]
 8009332:	2a00      	cmp	r2, #0
 8009334:	d002      	beq.n	800933c <_dtoa_r+0x94>
 8009336:	4bb2      	ldr	r3, [pc, #712]	@ (8009600 <_dtoa_r+0x358>)
 8009338:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	9808      	ldr	r0, [sp, #32]
 800933e:	b01d      	add	sp, #116	@ 0x74
 8009340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009342:	2300      	movs	r3, #0
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	e7e2      	b.n	800930e <_dtoa_r+0x66>
 8009348:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800934a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800934c:	9212      	str	r2, [sp, #72]	@ 0x48
 800934e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009350:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009352:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009354:	2200      	movs	r2, #0
 8009356:	2300      	movs	r3, #0
 8009358:	f7f7 f876 	bl	8000448 <__aeabi_dcmpeq>
 800935c:	1e06      	subs	r6, r0, #0
 800935e:	d00b      	beq.n	8009378 <_dtoa_r+0xd0>
 8009360:	2301      	movs	r3, #1
 8009362:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <_dtoa_r+0xca>
 800936c:	4ba5      	ldr	r3, [pc, #660]	@ (8009604 <_dtoa_r+0x35c>)
 800936e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009370:	6013      	str	r3, [r2, #0]
 8009372:	4ba5      	ldr	r3, [pc, #660]	@ (8009608 <_dtoa_r+0x360>)
 8009374:	9308      	str	r3, [sp, #32]
 8009376:	e7e1      	b.n	800933c <_dtoa_r+0x94>
 8009378:	ab1a      	add	r3, sp, #104	@ 0x68
 800937a:	9301      	str	r3, [sp, #4]
 800937c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800937e:	9300      	str	r3, [sp, #0]
 8009380:	9803      	ldr	r0, [sp, #12]
 8009382:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009384:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009386:	f001 fb87 	bl	800aa98 <__d2b>
 800938a:	007a      	lsls	r2, r7, #1
 800938c:	9005      	str	r0, [sp, #20]
 800938e:	0d52      	lsrs	r2, r2, #21
 8009390:	d100      	bne.n	8009394 <_dtoa_r+0xec>
 8009392:	e07b      	b.n	800948c <_dtoa_r+0x1e4>
 8009394:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009396:	9618      	str	r6, [sp, #96]	@ 0x60
 8009398:	0319      	lsls	r1, r3, #12
 800939a:	4b9c      	ldr	r3, [pc, #624]	@ (800960c <_dtoa_r+0x364>)
 800939c:	0b09      	lsrs	r1, r1, #12
 800939e:	430b      	orrs	r3, r1
 80093a0:	499b      	ldr	r1, [pc, #620]	@ (8009610 <_dtoa_r+0x368>)
 80093a2:	1857      	adds	r7, r2, r1
 80093a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80093a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80093a8:	0019      	movs	r1, r3
 80093aa:	2200      	movs	r2, #0
 80093ac:	4b99      	ldr	r3, [pc, #612]	@ (8009614 <_dtoa_r+0x36c>)
 80093ae:	f7f9 fcd1 	bl	8002d54 <__aeabi_dsub>
 80093b2:	4a99      	ldr	r2, [pc, #612]	@ (8009618 <_dtoa_r+0x370>)
 80093b4:	4b99      	ldr	r3, [pc, #612]	@ (800961c <_dtoa_r+0x374>)
 80093b6:	f7f9 f9e7 	bl	8002788 <__aeabi_dmul>
 80093ba:	4a99      	ldr	r2, [pc, #612]	@ (8009620 <_dtoa_r+0x378>)
 80093bc:	4b99      	ldr	r3, [pc, #612]	@ (8009624 <_dtoa_r+0x37c>)
 80093be:	f7f8 f9e3 	bl	8001788 <__aeabi_dadd>
 80093c2:	0004      	movs	r4, r0
 80093c4:	0038      	movs	r0, r7
 80093c6:	000d      	movs	r5, r1
 80093c8:	f7fa f92c 	bl	8003624 <__aeabi_i2d>
 80093cc:	4a96      	ldr	r2, [pc, #600]	@ (8009628 <_dtoa_r+0x380>)
 80093ce:	4b97      	ldr	r3, [pc, #604]	@ (800962c <_dtoa_r+0x384>)
 80093d0:	f7f9 f9da 	bl	8002788 <__aeabi_dmul>
 80093d4:	0002      	movs	r2, r0
 80093d6:	000b      	movs	r3, r1
 80093d8:	0020      	movs	r0, r4
 80093da:	0029      	movs	r1, r5
 80093dc:	f7f8 f9d4 	bl	8001788 <__aeabi_dadd>
 80093e0:	0004      	movs	r4, r0
 80093e2:	000d      	movs	r5, r1
 80093e4:	f7fa f8e2 	bl	80035ac <__aeabi_d2iz>
 80093e8:	2200      	movs	r2, #0
 80093ea:	9004      	str	r0, [sp, #16]
 80093ec:	2300      	movs	r3, #0
 80093ee:	0020      	movs	r0, r4
 80093f0:	0029      	movs	r1, r5
 80093f2:	f7f7 f82f 	bl	8000454 <__aeabi_dcmplt>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d00b      	beq.n	8009412 <_dtoa_r+0x16a>
 80093fa:	9804      	ldr	r0, [sp, #16]
 80093fc:	f7fa f912 	bl	8003624 <__aeabi_i2d>
 8009400:	002b      	movs	r3, r5
 8009402:	0022      	movs	r2, r4
 8009404:	f7f7 f820 	bl	8000448 <__aeabi_dcmpeq>
 8009408:	4243      	negs	r3, r0
 800940a:	4158      	adcs	r0, r3
 800940c:	9b04      	ldr	r3, [sp, #16]
 800940e:	1a1b      	subs	r3, r3, r0
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	2301      	movs	r3, #1
 8009414:	9315      	str	r3, [sp, #84]	@ 0x54
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	2b16      	cmp	r3, #22
 800941a:	d810      	bhi.n	800943e <_dtoa_r+0x196>
 800941c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800941e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009420:	9a04      	ldr	r2, [sp, #16]
 8009422:	4b83      	ldr	r3, [pc, #524]	@ (8009630 <_dtoa_r+0x388>)
 8009424:	00d2      	lsls	r2, r2, #3
 8009426:	189b      	adds	r3, r3, r2
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	f7f7 f812 	bl	8000454 <__aeabi_dcmplt>
 8009430:	2800      	cmp	r0, #0
 8009432:	d047      	beq.n	80094c4 <_dtoa_r+0x21c>
 8009434:	9b04      	ldr	r3, [sp, #16]
 8009436:	3b01      	subs	r3, #1
 8009438:	9304      	str	r3, [sp, #16]
 800943a:	2300      	movs	r3, #0
 800943c:	9315      	str	r3, [sp, #84]	@ 0x54
 800943e:	2200      	movs	r2, #0
 8009440:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8009442:	9206      	str	r2, [sp, #24]
 8009444:	1bdb      	subs	r3, r3, r7
 8009446:	1e5a      	subs	r2, r3, #1
 8009448:	d53e      	bpl.n	80094c8 <_dtoa_r+0x220>
 800944a:	2201      	movs	r2, #1
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	9306      	str	r3, [sp, #24]
 8009450:	2300      	movs	r3, #0
 8009452:	930d      	str	r3, [sp, #52]	@ 0x34
 8009454:	9b04      	ldr	r3, [sp, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	db38      	blt.n	80094cc <_dtoa_r+0x224>
 800945a:	9a04      	ldr	r2, [sp, #16]
 800945c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800945e:	4694      	mov	ip, r2
 8009460:	4463      	add	r3, ip
 8009462:	930d      	str	r3, [sp, #52]	@ 0x34
 8009464:	2300      	movs	r3, #0
 8009466:	9214      	str	r2, [sp, #80]	@ 0x50
 8009468:	930f      	str	r3, [sp, #60]	@ 0x3c
 800946a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800946c:	2401      	movs	r4, #1
 800946e:	2b09      	cmp	r3, #9
 8009470:	d862      	bhi.n	8009538 <_dtoa_r+0x290>
 8009472:	2b05      	cmp	r3, #5
 8009474:	dd02      	ble.n	800947c <_dtoa_r+0x1d4>
 8009476:	2400      	movs	r4, #0
 8009478:	3b04      	subs	r3, #4
 800947a:	9322      	str	r3, [sp, #136]	@ 0x88
 800947c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800947e:	1e98      	subs	r0, r3, #2
 8009480:	2803      	cmp	r0, #3
 8009482:	d863      	bhi.n	800954c <_dtoa_r+0x2a4>
 8009484:	f7f6 fe46 	bl	8000114 <__gnu_thumb1_case_uqi>
 8009488:	2b385654 	.word	0x2b385654
 800948c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800948e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8009490:	18f6      	adds	r6, r6, r3
 8009492:	4b68      	ldr	r3, [pc, #416]	@ (8009634 <_dtoa_r+0x38c>)
 8009494:	18f2      	adds	r2, r6, r3
 8009496:	2a20      	cmp	r2, #32
 8009498:	dd0f      	ble.n	80094ba <_dtoa_r+0x212>
 800949a:	2340      	movs	r3, #64	@ 0x40
 800949c:	1a9b      	subs	r3, r3, r2
 800949e:	409f      	lsls	r7, r3
 80094a0:	4b65      	ldr	r3, [pc, #404]	@ (8009638 <_dtoa_r+0x390>)
 80094a2:	0038      	movs	r0, r7
 80094a4:	18f3      	adds	r3, r6, r3
 80094a6:	40dc      	lsrs	r4, r3
 80094a8:	4320      	orrs	r0, r4
 80094aa:	f7fa f8e9 	bl	8003680 <__aeabi_ui2d>
 80094ae:	2201      	movs	r2, #1
 80094b0:	4b62      	ldr	r3, [pc, #392]	@ (800963c <_dtoa_r+0x394>)
 80094b2:	1e77      	subs	r7, r6, #1
 80094b4:	18cb      	adds	r3, r1, r3
 80094b6:	9218      	str	r2, [sp, #96]	@ 0x60
 80094b8:	e776      	b.n	80093a8 <_dtoa_r+0x100>
 80094ba:	2320      	movs	r3, #32
 80094bc:	0020      	movs	r0, r4
 80094be:	1a9b      	subs	r3, r3, r2
 80094c0:	4098      	lsls	r0, r3
 80094c2:	e7f2      	b.n	80094aa <_dtoa_r+0x202>
 80094c4:	9015      	str	r0, [sp, #84]	@ 0x54
 80094c6:	e7ba      	b.n	800943e <_dtoa_r+0x196>
 80094c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80094ca:	e7c3      	b.n	8009454 <_dtoa_r+0x1ac>
 80094cc:	9b06      	ldr	r3, [sp, #24]
 80094ce:	9a04      	ldr	r2, [sp, #16]
 80094d0:	1a9b      	subs	r3, r3, r2
 80094d2:	9306      	str	r3, [sp, #24]
 80094d4:	4253      	negs	r3, r2
 80094d6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80094d8:	2300      	movs	r3, #0
 80094da:	9314      	str	r3, [sp, #80]	@ 0x50
 80094dc:	e7c5      	b.n	800946a <_dtoa_r+0x1c2>
 80094de:	2301      	movs	r3, #1
 80094e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80094e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80094e4:	4694      	mov	ip, r2
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	4463      	add	r3, ip
 80094ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80094ec:	3301      	adds	r3, #1
 80094ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	dc08      	bgt.n	8009506 <_dtoa_r+0x25e>
 80094f4:	2301      	movs	r3, #1
 80094f6:	e006      	b.n	8009506 <_dtoa_r+0x25e>
 80094f8:	2301      	movs	r3, #1
 80094fa:	9310      	str	r3, [sp, #64]	@ 0x40
 80094fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	dd28      	ble.n	8009554 <_dtoa_r+0x2ac>
 8009502:	930e      	str	r3, [sp, #56]	@ 0x38
 8009504:	9309      	str	r3, [sp, #36]	@ 0x24
 8009506:	9a03      	ldr	r2, [sp, #12]
 8009508:	2100      	movs	r1, #0
 800950a:	69d0      	ldr	r0, [r2, #28]
 800950c:	2204      	movs	r2, #4
 800950e:	0015      	movs	r5, r2
 8009510:	3514      	adds	r5, #20
 8009512:	429d      	cmp	r5, r3
 8009514:	d923      	bls.n	800955e <_dtoa_r+0x2b6>
 8009516:	6041      	str	r1, [r0, #4]
 8009518:	9803      	ldr	r0, [sp, #12]
 800951a:	f000 ff81 	bl	800a420 <_Balloc>
 800951e:	9008      	str	r0, [sp, #32]
 8009520:	2800      	cmp	r0, #0
 8009522:	d11f      	bne.n	8009564 <_dtoa_r+0x2bc>
 8009524:	21b0      	movs	r1, #176	@ 0xb0
 8009526:	4b46      	ldr	r3, [pc, #280]	@ (8009640 <_dtoa_r+0x398>)
 8009528:	4831      	ldr	r0, [pc, #196]	@ (80095f0 <_dtoa_r+0x348>)
 800952a:	9a08      	ldr	r2, [sp, #32]
 800952c:	31ff      	adds	r1, #255	@ 0xff
 800952e:	e6d0      	b.n	80092d2 <_dtoa_r+0x2a>
 8009530:	2300      	movs	r3, #0
 8009532:	e7e2      	b.n	80094fa <_dtoa_r+0x252>
 8009534:	2300      	movs	r3, #0
 8009536:	e7d3      	b.n	80094e0 <_dtoa_r+0x238>
 8009538:	2300      	movs	r3, #0
 800953a:	9410      	str	r4, [sp, #64]	@ 0x40
 800953c:	9322      	str	r3, [sp, #136]	@ 0x88
 800953e:	3b01      	subs	r3, #1
 8009540:	2200      	movs	r2, #0
 8009542:	930e      	str	r3, [sp, #56]	@ 0x38
 8009544:	9309      	str	r3, [sp, #36]	@ 0x24
 8009546:	3313      	adds	r3, #19
 8009548:	9223      	str	r2, [sp, #140]	@ 0x8c
 800954a:	e7dc      	b.n	8009506 <_dtoa_r+0x25e>
 800954c:	2301      	movs	r3, #1
 800954e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009550:	3b02      	subs	r3, #2
 8009552:	e7f5      	b.n	8009540 <_dtoa_r+0x298>
 8009554:	2301      	movs	r3, #1
 8009556:	001a      	movs	r2, r3
 8009558:	930e      	str	r3, [sp, #56]	@ 0x38
 800955a:	9309      	str	r3, [sp, #36]	@ 0x24
 800955c:	e7f4      	b.n	8009548 <_dtoa_r+0x2a0>
 800955e:	3101      	adds	r1, #1
 8009560:	0052      	lsls	r2, r2, #1
 8009562:	e7d4      	b.n	800950e <_dtoa_r+0x266>
 8009564:	9b03      	ldr	r3, [sp, #12]
 8009566:	9a08      	ldr	r2, [sp, #32]
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	601a      	str	r2, [r3, #0]
 800956c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800956e:	2b0e      	cmp	r3, #14
 8009570:	d900      	bls.n	8009574 <_dtoa_r+0x2cc>
 8009572:	e0d6      	b.n	8009722 <_dtoa_r+0x47a>
 8009574:	2c00      	cmp	r4, #0
 8009576:	d100      	bne.n	800957a <_dtoa_r+0x2d2>
 8009578:	e0d3      	b.n	8009722 <_dtoa_r+0x47a>
 800957a:	9b04      	ldr	r3, [sp, #16]
 800957c:	2b00      	cmp	r3, #0
 800957e:	dd63      	ble.n	8009648 <_dtoa_r+0x3a0>
 8009580:	210f      	movs	r1, #15
 8009582:	9a04      	ldr	r2, [sp, #16]
 8009584:	4b2a      	ldr	r3, [pc, #168]	@ (8009630 <_dtoa_r+0x388>)
 8009586:	400a      	ands	r2, r1
 8009588:	00d2      	lsls	r2, r2, #3
 800958a:	189b      	adds	r3, r3, r2
 800958c:	681e      	ldr	r6, [r3, #0]
 800958e:	685f      	ldr	r7, [r3, #4]
 8009590:	9b04      	ldr	r3, [sp, #16]
 8009592:	2402      	movs	r4, #2
 8009594:	111d      	asrs	r5, r3, #4
 8009596:	05db      	lsls	r3, r3, #23
 8009598:	d50a      	bpl.n	80095b0 <_dtoa_r+0x308>
 800959a:	4b2a      	ldr	r3, [pc, #168]	@ (8009644 <_dtoa_r+0x39c>)
 800959c:	400d      	ands	r5, r1
 800959e:	6a1a      	ldr	r2, [r3, #32]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80095a4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80095a6:	f7f8 fcb5 	bl	8001f14 <__aeabi_ddiv>
 80095aa:	900a      	str	r0, [sp, #40]	@ 0x28
 80095ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80095ae:	3401      	adds	r4, #1
 80095b0:	4b24      	ldr	r3, [pc, #144]	@ (8009644 <_dtoa_r+0x39c>)
 80095b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80095b4:	2d00      	cmp	r5, #0
 80095b6:	d108      	bne.n	80095ca <_dtoa_r+0x322>
 80095b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80095ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095bc:	0032      	movs	r2, r6
 80095be:	003b      	movs	r3, r7
 80095c0:	f7f8 fca8 	bl	8001f14 <__aeabi_ddiv>
 80095c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80095c6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80095c8:	e059      	b.n	800967e <_dtoa_r+0x3d6>
 80095ca:	2301      	movs	r3, #1
 80095cc:	421d      	tst	r5, r3
 80095ce:	d009      	beq.n	80095e4 <_dtoa_r+0x33c>
 80095d0:	18e4      	adds	r4, r4, r3
 80095d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095d4:	0030      	movs	r0, r6
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	0039      	movs	r1, r7
 80095dc:	f7f9 f8d4 	bl	8002788 <__aeabi_dmul>
 80095e0:	0006      	movs	r6, r0
 80095e2:	000f      	movs	r7, r1
 80095e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095e6:	106d      	asrs	r5, r5, #1
 80095e8:	3308      	adds	r3, #8
 80095ea:	e7e2      	b.n	80095b2 <_dtoa_r+0x30a>
 80095ec:	0800b859 	.word	0x0800b859
 80095f0:	0800b870 	.word	0x0800b870
 80095f4:	7ff00000 	.word	0x7ff00000
 80095f8:	0000270f 	.word	0x0000270f
 80095fc:	0800b855 	.word	0x0800b855
 8009600:	0800b858 	.word	0x0800b858
 8009604:	0800b829 	.word	0x0800b829
 8009608:	0800b828 	.word	0x0800b828
 800960c:	3ff00000 	.word	0x3ff00000
 8009610:	fffffc01 	.word	0xfffffc01
 8009614:	3ff80000 	.word	0x3ff80000
 8009618:	636f4361 	.word	0x636f4361
 800961c:	3fd287a7 	.word	0x3fd287a7
 8009620:	8b60c8b3 	.word	0x8b60c8b3
 8009624:	3fc68a28 	.word	0x3fc68a28
 8009628:	509f79fb 	.word	0x509f79fb
 800962c:	3fd34413 	.word	0x3fd34413
 8009630:	0800b9c0 	.word	0x0800b9c0
 8009634:	00000432 	.word	0x00000432
 8009638:	00000412 	.word	0x00000412
 800963c:	fe100000 	.word	0xfe100000
 8009640:	0800b8c8 	.word	0x0800b8c8
 8009644:	0800b998 	.word	0x0800b998
 8009648:	9b04      	ldr	r3, [sp, #16]
 800964a:	2402      	movs	r4, #2
 800964c:	2b00      	cmp	r3, #0
 800964e:	d016      	beq.n	800967e <_dtoa_r+0x3d6>
 8009650:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009652:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009654:	220f      	movs	r2, #15
 8009656:	425d      	negs	r5, r3
 8009658:	402a      	ands	r2, r5
 800965a:	4bd5      	ldr	r3, [pc, #852]	@ (80099b0 <_dtoa_r+0x708>)
 800965c:	00d2      	lsls	r2, r2, #3
 800965e:	189b      	adds	r3, r3, r2
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f7f9 f890 	bl	8002788 <__aeabi_dmul>
 8009668:	2701      	movs	r7, #1
 800966a:	2300      	movs	r3, #0
 800966c:	900a      	str	r0, [sp, #40]	@ 0x28
 800966e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009670:	4ed0      	ldr	r6, [pc, #832]	@ (80099b4 <_dtoa_r+0x70c>)
 8009672:	112d      	asrs	r5, r5, #4
 8009674:	2d00      	cmp	r5, #0
 8009676:	d000      	beq.n	800967a <_dtoa_r+0x3d2>
 8009678:	e095      	b.n	80097a6 <_dtoa_r+0x4fe>
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1a2      	bne.n	80095c4 <_dtoa_r+0x31c>
 800967e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009680:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009682:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009684:	2b00      	cmp	r3, #0
 8009686:	d100      	bne.n	800968a <_dtoa_r+0x3e2>
 8009688:	e098      	b.n	80097bc <_dtoa_r+0x514>
 800968a:	2200      	movs	r2, #0
 800968c:	0030      	movs	r0, r6
 800968e:	0039      	movs	r1, r7
 8009690:	4bc9      	ldr	r3, [pc, #804]	@ (80099b8 <_dtoa_r+0x710>)
 8009692:	f7f6 fedf 	bl	8000454 <__aeabi_dcmplt>
 8009696:	2800      	cmp	r0, #0
 8009698:	d100      	bne.n	800969c <_dtoa_r+0x3f4>
 800969a:	e08f      	b.n	80097bc <_dtoa_r+0x514>
 800969c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d100      	bne.n	80096a4 <_dtoa_r+0x3fc>
 80096a2:	e08b      	b.n	80097bc <_dtoa_r+0x514>
 80096a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	dd37      	ble.n	800971a <_dtoa_r+0x472>
 80096aa:	9b04      	ldr	r3, [sp, #16]
 80096ac:	2200      	movs	r2, #0
 80096ae:	3b01      	subs	r3, #1
 80096b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80096b2:	0030      	movs	r0, r6
 80096b4:	4bc1      	ldr	r3, [pc, #772]	@ (80099bc <_dtoa_r+0x714>)
 80096b6:	0039      	movs	r1, r7
 80096b8:	f7f9 f866 	bl	8002788 <__aeabi_dmul>
 80096bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80096be:	910b      	str	r1, [sp, #44]	@ 0x2c
 80096c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096c2:	3401      	adds	r4, #1
 80096c4:	0020      	movs	r0, r4
 80096c6:	9311      	str	r3, [sp, #68]	@ 0x44
 80096c8:	f7f9 ffac 	bl	8003624 <__aeabi_i2d>
 80096cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096d0:	f7f9 f85a 	bl	8002788 <__aeabi_dmul>
 80096d4:	4bba      	ldr	r3, [pc, #744]	@ (80099c0 <_dtoa_r+0x718>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	f7f8 f856 	bl	8001788 <__aeabi_dadd>
 80096dc:	4bb9      	ldr	r3, [pc, #740]	@ (80099c4 <_dtoa_r+0x71c>)
 80096de:	0006      	movs	r6, r0
 80096e0:	18cf      	adds	r7, r1, r3
 80096e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d16d      	bne.n	80097c4 <_dtoa_r+0x51c>
 80096e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80096ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80096ec:	2200      	movs	r2, #0
 80096ee:	4bb6      	ldr	r3, [pc, #728]	@ (80099c8 <_dtoa_r+0x720>)
 80096f0:	f7f9 fb30 	bl	8002d54 <__aeabi_dsub>
 80096f4:	0032      	movs	r2, r6
 80096f6:	003b      	movs	r3, r7
 80096f8:	0004      	movs	r4, r0
 80096fa:	000d      	movs	r5, r1
 80096fc:	f7f6 febe 	bl	800047c <__aeabi_dcmpgt>
 8009700:	2800      	cmp	r0, #0
 8009702:	d000      	beq.n	8009706 <_dtoa_r+0x45e>
 8009704:	e2b6      	b.n	8009c74 <_dtoa_r+0x9cc>
 8009706:	2180      	movs	r1, #128	@ 0x80
 8009708:	0609      	lsls	r1, r1, #24
 800970a:	187b      	adds	r3, r7, r1
 800970c:	0032      	movs	r2, r6
 800970e:	0020      	movs	r0, r4
 8009710:	0029      	movs	r1, r5
 8009712:	f7f6 fe9f 	bl	8000454 <__aeabi_dcmplt>
 8009716:	2800      	cmp	r0, #0
 8009718:	d128      	bne.n	800976c <_dtoa_r+0x4c4>
 800971a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800971c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800971e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009720:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009722:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8009724:	2b00      	cmp	r3, #0
 8009726:	da00      	bge.n	800972a <_dtoa_r+0x482>
 8009728:	e174      	b.n	8009a14 <_dtoa_r+0x76c>
 800972a:	9a04      	ldr	r2, [sp, #16]
 800972c:	2a0e      	cmp	r2, #14
 800972e:	dd00      	ble.n	8009732 <_dtoa_r+0x48a>
 8009730:	e170      	b.n	8009a14 <_dtoa_r+0x76c>
 8009732:	4b9f      	ldr	r3, [pc, #636]	@ (80099b0 <_dtoa_r+0x708>)
 8009734:	00d2      	lsls	r2, r2, #3
 8009736:	189b      	adds	r3, r3, r2
 8009738:	685c      	ldr	r4, [r3, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	9306      	str	r3, [sp, #24]
 800973e:	9407      	str	r4, [sp, #28]
 8009740:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009742:	2b00      	cmp	r3, #0
 8009744:	db00      	blt.n	8009748 <_dtoa_r+0x4a0>
 8009746:	e0e7      	b.n	8009918 <_dtoa_r+0x670>
 8009748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800974a:	2b00      	cmp	r3, #0
 800974c:	dd00      	ble.n	8009750 <_dtoa_r+0x4a8>
 800974e:	e0e3      	b.n	8009918 <_dtoa_r+0x670>
 8009750:	d10c      	bne.n	800976c <_dtoa_r+0x4c4>
 8009752:	9806      	ldr	r0, [sp, #24]
 8009754:	9907      	ldr	r1, [sp, #28]
 8009756:	2200      	movs	r2, #0
 8009758:	4b9b      	ldr	r3, [pc, #620]	@ (80099c8 <_dtoa_r+0x720>)
 800975a:	f7f9 f815 	bl	8002788 <__aeabi_dmul>
 800975e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009760:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009762:	f7f6 fe95 	bl	8000490 <__aeabi_dcmpge>
 8009766:	2800      	cmp	r0, #0
 8009768:	d100      	bne.n	800976c <_dtoa_r+0x4c4>
 800976a:	e286      	b.n	8009c7a <_dtoa_r+0x9d2>
 800976c:	2600      	movs	r6, #0
 800976e:	0037      	movs	r7, r6
 8009770:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009772:	9c08      	ldr	r4, [sp, #32]
 8009774:	43db      	mvns	r3, r3
 8009776:	930c      	str	r3, [sp, #48]	@ 0x30
 8009778:	9704      	str	r7, [sp, #16]
 800977a:	2700      	movs	r7, #0
 800977c:	0031      	movs	r1, r6
 800977e:	9803      	ldr	r0, [sp, #12]
 8009780:	f000 fe92 	bl	800a4a8 <_Bfree>
 8009784:	9b04      	ldr	r3, [sp, #16]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d100      	bne.n	800978c <_dtoa_r+0x4e4>
 800978a:	e0bb      	b.n	8009904 <_dtoa_r+0x65c>
 800978c:	2f00      	cmp	r7, #0
 800978e:	d005      	beq.n	800979c <_dtoa_r+0x4f4>
 8009790:	429f      	cmp	r7, r3
 8009792:	d003      	beq.n	800979c <_dtoa_r+0x4f4>
 8009794:	0039      	movs	r1, r7
 8009796:	9803      	ldr	r0, [sp, #12]
 8009798:	f000 fe86 	bl	800a4a8 <_Bfree>
 800979c:	9904      	ldr	r1, [sp, #16]
 800979e:	9803      	ldr	r0, [sp, #12]
 80097a0:	f000 fe82 	bl	800a4a8 <_Bfree>
 80097a4:	e0ae      	b.n	8009904 <_dtoa_r+0x65c>
 80097a6:	423d      	tst	r5, r7
 80097a8:	d005      	beq.n	80097b6 <_dtoa_r+0x50e>
 80097aa:	6832      	ldr	r2, [r6, #0]
 80097ac:	6873      	ldr	r3, [r6, #4]
 80097ae:	f7f8 ffeb 	bl	8002788 <__aeabi_dmul>
 80097b2:	003b      	movs	r3, r7
 80097b4:	3401      	adds	r4, #1
 80097b6:	106d      	asrs	r5, r5, #1
 80097b8:	3608      	adds	r6, #8
 80097ba:	e75b      	b.n	8009674 <_dtoa_r+0x3cc>
 80097bc:	9b04      	ldr	r3, [sp, #16]
 80097be:	930c      	str	r3, [sp, #48]	@ 0x30
 80097c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097c2:	e77f      	b.n	80096c4 <_dtoa_r+0x41c>
 80097c4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80097c6:	4b7a      	ldr	r3, [pc, #488]	@ (80099b0 <_dtoa_r+0x708>)
 80097c8:	3a01      	subs	r2, #1
 80097ca:	00d2      	lsls	r2, r2, #3
 80097cc:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80097ce:	189b      	adds	r3, r3, r2
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	2900      	cmp	r1, #0
 80097d6:	d04c      	beq.n	8009872 <_dtoa_r+0x5ca>
 80097d8:	2000      	movs	r0, #0
 80097da:	497c      	ldr	r1, [pc, #496]	@ (80099cc <_dtoa_r+0x724>)
 80097dc:	f7f8 fb9a 	bl	8001f14 <__aeabi_ddiv>
 80097e0:	0032      	movs	r2, r6
 80097e2:	003b      	movs	r3, r7
 80097e4:	f7f9 fab6 	bl	8002d54 <__aeabi_dsub>
 80097e8:	9a08      	ldr	r2, [sp, #32]
 80097ea:	0006      	movs	r6, r0
 80097ec:	4694      	mov	ip, r2
 80097ee:	000f      	movs	r7, r1
 80097f0:	9b08      	ldr	r3, [sp, #32]
 80097f2:	9316      	str	r3, [sp, #88]	@ 0x58
 80097f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80097f6:	4463      	add	r3, ip
 80097f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80097fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80097fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80097fe:	f7f9 fed5 	bl	80035ac <__aeabi_d2iz>
 8009802:	0005      	movs	r5, r0
 8009804:	f7f9 ff0e 	bl	8003624 <__aeabi_i2d>
 8009808:	0002      	movs	r2, r0
 800980a:	000b      	movs	r3, r1
 800980c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800980e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009810:	f7f9 faa0 	bl	8002d54 <__aeabi_dsub>
 8009814:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009816:	3530      	adds	r5, #48	@ 0x30
 8009818:	1c5c      	adds	r4, r3, #1
 800981a:	701d      	strb	r5, [r3, #0]
 800981c:	0032      	movs	r2, r6
 800981e:	003b      	movs	r3, r7
 8009820:	900a      	str	r0, [sp, #40]	@ 0x28
 8009822:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009824:	f7f6 fe16 	bl	8000454 <__aeabi_dcmplt>
 8009828:	2800      	cmp	r0, #0
 800982a:	d16b      	bne.n	8009904 <_dtoa_r+0x65c>
 800982c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800982e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009830:	2000      	movs	r0, #0
 8009832:	4961      	ldr	r1, [pc, #388]	@ (80099b8 <_dtoa_r+0x710>)
 8009834:	f7f9 fa8e 	bl	8002d54 <__aeabi_dsub>
 8009838:	0032      	movs	r2, r6
 800983a:	003b      	movs	r3, r7
 800983c:	f7f6 fe0a 	bl	8000454 <__aeabi_dcmplt>
 8009840:	2800      	cmp	r0, #0
 8009842:	d000      	beq.n	8009846 <_dtoa_r+0x59e>
 8009844:	e0c6      	b.n	80099d4 <_dtoa_r+0x72c>
 8009846:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009848:	42a3      	cmp	r3, r4
 800984a:	d100      	bne.n	800984e <_dtoa_r+0x5a6>
 800984c:	e765      	b.n	800971a <_dtoa_r+0x472>
 800984e:	2200      	movs	r2, #0
 8009850:	0030      	movs	r0, r6
 8009852:	0039      	movs	r1, r7
 8009854:	4b59      	ldr	r3, [pc, #356]	@ (80099bc <_dtoa_r+0x714>)
 8009856:	f7f8 ff97 	bl	8002788 <__aeabi_dmul>
 800985a:	2200      	movs	r2, #0
 800985c:	0006      	movs	r6, r0
 800985e:	000f      	movs	r7, r1
 8009860:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009862:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009864:	4b55      	ldr	r3, [pc, #340]	@ (80099bc <_dtoa_r+0x714>)
 8009866:	f7f8 ff8f 	bl	8002788 <__aeabi_dmul>
 800986a:	9416      	str	r4, [sp, #88]	@ 0x58
 800986c:	900a      	str	r0, [sp, #40]	@ 0x28
 800986e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009870:	e7c3      	b.n	80097fa <_dtoa_r+0x552>
 8009872:	0030      	movs	r0, r6
 8009874:	0039      	movs	r1, r7
 8009876:	f7f8 ff87 	bl	8002788 <__aeabi_dmul>
 800987a:	9d08      	ldr	r5, [sp, #32]
 800987c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800987e:	002b      	movs	r3, r5
 8009880:	4694      	mov	ip, r2
 8009882:	9016      	str	r0, [sp, #88]	@ 0x58
 8009884:	9117      	str	r1, [sp, #92]	@ 0x5c
 8009886:	4463      	add	r3, ip
 8009888:	9319      	str	r3, [sp, #100]	@ 0x64
 800988a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800988c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800988e:	f7f9 fe8d 	bl	80035ac <__aeabi_d2iz>
 8009892:	0004      	movs	r4, r0
 8009894:	f7f9 fec6 	bl	8003624 <__aeabi_i2d>
 8009898:	000b      	movs	r3, r1
 800989a:	0002      	movs	r2, r0
 800989c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800989e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80098a0:	f7f9 fa58 	bl	8002d54 <__aeabi_dsub>
 80098a4:	3430      	adds	r4, #48	@ 0x30
 80098a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098a8:	702c      	strb	r4, [r5, #0]
 80098aa:	3501      	adds	r5, #1
 80098ac:	0006      	movs	r6, r0
 80098ae:	000f      	movs	r7, r1
 80098b0:	42ab      	cmp	r3, r5
 80098b2:	d12a      	bne.n	800990a <_dtoa_r+0x662>
 80098b4:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80098b6:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80098b8:	9b08      	ldr	r3, [sp, #32]
 80098ba:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80098bc:	469c      	mov	ip, r3
 80098be:	2200      	movs	r2, #0
 80098c0:	4b42      	ldr	r3, [pc, #264]	@ (80099cc <_dtoa_r+0x724>)
 80098c2:	4464      	add	r4, ip
 80098c4:	f7f7 ff60 	bl	8001788 <__aeabi_dadd>
 80098c8:	0002      	movs	r2, r0
 80098ca:	000b      	movs	r3, r1
 80098cc:	0030      	movs	r0, r6
 80098ce:	0039      	movs	r1, r7
 80098d0:	f7f6 fdd4 	bl	800047c <__aeabi_dcmpgt>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	d000      	beq.n	80098da <_dtoa_r+0x632>
 80098d8:	e07c      	b.n	80099d4 <_dtoa_r+0x72c>
 80098da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80098dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80098de:	2000      	movs	r0, #0
 80098e0:	493a      	ldr	r1, [pc, #232]	@ (80099cc <_dtoa_r+0x724>)
 80098e2:	f7f9 fa37 	bl	8002d54 <__aeabi_dsub>
 80098e6:	0002      	movs	r2, r0
 80098e8:	000b      	movs	r3, r1
 80098ea:	0030      	movs	r0, r6
 80098ec:	0039      	movs	r1, r7
 80098ee:	f7f6 fdb1 	bl	8000454 <__aeabi_dcmplt>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d100      	bne.n	80098f8 <_dtoa_r+0x650>
 80098f6:	e710      	b.n	800971a <_dtoa_r+0x472>
 80098f8:	0023      	movs	r3, r4
 80098fa:	3c01      	subs	r4, #1
 80098fc:	7822      	ldrb	r2, [r4, #0]
 80098fe:	2a30      	cmp	r2, #48	@ 0x30
 8009900:	d0fa      	beq.n	80098f8 <_dtoa_r+0x650>
 8009902:	001c      	movs	r4, r3
 8009904:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009906:	9304      	str	r3, [sp, #16]
 8009908:	e042      	b.n	8009990 <_dtoa_r+0x6e8>
 800990a:	2200      	movs	r2, #0
 800990c:	4b2b      	ldr	r3, [pc, #172]	@ (80099bc <_dtoa_r+0x714>)
 800990e:	f7f8 ff3b 	bl	8002788 <__aeabi_dmul>
 8009912:	900a      	str	r0, [sp, #40]	@ 0x28
 8009914:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009916:	e7b8      	b.n	800988a <_dtoa_r+0x5e2>
 8009918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800991a:	9d08      	ldr	r5, [sp, #32]
 800991c:	3b01      	subs	r3, #1
 800991e:	195b      	adds	r3, r3, r5
 8009920:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009922:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009924:	930a      	str	r3, [sp, #40]	@ 0x28
 8009926:	9a06      	ldr	r2, [sp, #24]
 8009928:	9b07      	ldr	r3, [sp, #28]
 800992a:	0030      	movs	r0, r6
 800992c:	0039      	movs	r1, r7
 800992e:	f7f8 faf1 	bl	8001f14 <__aeabi_ddiv>
 8009932:	f7f9 fe3b 	bl	80035ac <__aeabi_d2iz>
 8009936:	9009      	str	r0, [sp, #36]	@ 0x24
 8009938:	f7f9 fe74 	bl	8003624 <__aeabi_i2d>
 800993c:	9a06      	ldr	r2, [sp, #24]
 800993e:	9b07      	ldr	r3, [sp, #28]
 8009940:	f7f8 ff22 	bl	8002788 <__aeabi_dmul>
 8009944:	0002      	movs	r2, r0
 8009946:	000b      	movs	r3, r1
 8009948:	0030      	movs	r0, r6
 800994a:	0039      	movs	r1, r7
 800994c:	f7f9 fa02 	bl	8002d54 <__aeabi_dsub>
 8009950:	002b      	movs	r3, r5
 8009952:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009954:	3501      	adds	r5, #1
 8009956:	3230      	adds	r2, #48	@ 0x30
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800995c:	002c      	movs	r4, r5
 800995e:	429a      	cmp	r2, r3
 8009960:	d14b      	bne.n	80099fa <_dtoa_r+0x752>
 8009962:	0002      	movs	r2, r0
 8009964:	000b      	movs	r3, r1
 8009966:	f7f7 ff0f 	bl	8001788 <__aeabi_dadd>
 800996a:	9a06      	ldr	r2, [sp, #24]
 800996c:	9b07      	ldr	r3, [sp, #28]
 800996e:	0006      	movs	r6, r0
 8009970:	000f      	movs	r7, r1
 8009972:	f7f6 fd83 	bl	800047c <__aeabi_dcmpgt>
 8009976:	2800      	cmp	r0, #0
 8009978:	d12a      	bne.n	80099d0 <_dtoa_r+0x728>
 800997a:	9a06      	ldr	r2, [sp, #24]
 800997c:	9b07      	ldr	r3, [sp, #28]
 800997e:	0030      	movs	r0, r6
 8009980:	0039      	movs	r1, r7
 8009982:	f7f6 fd61 	bl	8000448 <__aeabi_dcmpeq>
 8009986:	2800      	cmp	r0, #0
 8009988:	d002      	beq.n	8009990 <_dtoa_r+0x6e8>
 800998a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800998c:	07dd      	lsls	r5, r3, #31
 800998e:	d41f      	bmi.n	80099d0 <_dtoa_r+0x728>
 8009990:	9905      	ldr	r1, [sp, #20]
 8009992:	9803      	ldr	r0, [sp, #12]
 8009994:	f000 fd88 	bl	800a4a8 <_Bfree>
 8009998:	2300      	movs	r3, #0
 800999a:	7023      	strb	r3, [r4, #0]
 800999c:	9b04      	ldr	r3, [sp, #16]
 800999e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80099a0:	3301      	adds	r3, #1
 80099a2:	6013      	str	r3, [r2, #0]
 80099a4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d100      	bne.n	80099ac <_dtoa_r+0x704>
 80099aa:	e4c7      	b.n	800933c <_dtoa_r+0x94>
 80099ac:	601c      	str	r4, [r3, #0]
 80099ae:	e4c5      	b.n	800933c <_dtoa_r+0x94>
 80099b0:	0800b9c0 	.word	0x0800b9c0
 80099b4:	0800b998 	.word	0x0800b998
 80099b8:	3ff00000 	.word	0x3ff00000
 80099bc:	40240000 	.word	0x40240000
 80099c0:	401c0000 	.word	0x401c0000
 80099c4:	fcc00000 	.word	0xfcc00000
 80099c8:	40140000 	.word	0x40140000
 80099cc:	3fe00000 	.word	0x3fe00000
 80099d0:	9b04      	ldr	r3, [sp, #16]
 80099d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80099d4:	0023      	movs	r3, r4
 80099d6:	001c      	movs	r4, r3
 80099d8:	3b01      	subs	r3, #1
 80099da:	781a      	ldrb	r2, [r3, #0]
 80099dc:	2a39      	cmp	r2, #57	@ 0x39
 80099de:	d108      	bne.n	80099f2 <_dtoa_r+0x74a>
 80099e0:	9a08      	ldr	r2, [sp, #32]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d1f7      	bne.n	80099d6 <_dtoa_r+0x72e>
 80099e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80099e8:	9908      	ldr	r1, [sp, #32]
 80099ea:	3201      	adds	r2, #1
 80099ec:	920c      	str	r2, [sp, #48]	@ 0x30
 80099ee:	2230      	movs	r2, #48	@ 0x30
 80099f0:	700a      	strb	r2, [r1, #0]
 80099f2:	781a      	ldrb	r2, [r3, #0]
 80099f4:	3201      	adds	r2, #1
 80099f6:	701a      	strb	r2, [r3, #0]
 80099f8:	e784      	b.n	8009904 <_dtoa_r+0x65c>
 80099fa:	2200      	movs	r2, #0
 80099fc:	4bc6      	ldr	r3, [pc, #792]	@ (8009d18 <_dtoa_r+0xa70>)
 80099fe:	f7f8 fec3 	bl	8002788 <__aeabi_dmul>
 8009a02:	2200      	movs	r2, #0
 8009a04:	2300      	movs	r3, #0
 8009a06:	0006      	movs	r6, r0
 8009a08:	000f      	movs	r7, r1
 8009a0a:	f7f6 fd1d 	bl	8000448 <__aeabi_dcmpeq>
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	d089      	beq.n	8009926 <_dtoa_r+0x67e>
 8009a12:	e7bd      	b.n	8009990 <_dtoa_r+0x6e8>
 8009a14:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8009a16:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009a18:	9c06      	ldr	r4, [sp, #24]
 8009a1a:	2f00      	cmp	r7, #0
 8009a1c:	d014      	beq.n	8009a48 <_dtoa_r+0x7a0>
 8009a1e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009a20:	2a01      	cmp	r2, #1
 8009a22:	dd00      	ble.n	8009a26 <_dtoa_r+0x77e>
 8009a24:	e0e4      	b.n	8009bf0 <_dtoa_r+0x948>
 8009a26:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009a28:	2a00      	cmp	r2, #0
 8009a2a:	d100      	bne.n	8009a2e <_dtoa_r+0x786>
 8009a2c:	e0da      	b.n	8009be4 <_dtoa_r+0x93c>
 8009a2e:	4abb      	ldr	r2, [pc, #748]	@ (8009d1c <_dtoa_r+0xa74>)
 8009a30:	189b      	adds	r3, r3, r2
 8009a32:	9a06      	ldr	r2, [sp, #24]
 8009a34:	2101      	movs	r1, #1
 8009a36:	18d2      	adds	r2, r2, r3
 8009a38:	9206      	str	r2, [sp, #24]
 8009a3a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a3c:	9803      	ldr	r0, [sp, #12]
 8009a3e:	18d3      	adds	r3, r2, r3
 8009a40:	930d      	str	r3, [sp, #52]	@ 0x34
 8009a42:	f000 fde9 	bl	800a618 <__i2b>
 8009a46:	0007      	movs	r7, r0
 8009a48:	2c00      	cmp	r4, #0
 8009a4a:	d00e      	beq.n	8009a6a <_dtoa_r+0x7c2>
 8009a4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	dd0b      	ble.n	8009a6a <_dtoa_r+0x7c2>
 8009a52:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a54:	0023      	movs	r3, r4
 8009a56:	4294      	cmp	r4, r2
 8009a58:	dd00      	ble.n	8009a5c <_dtoa_r+0x7b4>
 8009a5a:	0013      	movs	r3, r2
 8009a5c:	9a06      	ldr	r2, [sp, #24]
 8009a5e:	1ae4      	subs	r4, r4, r3
 8009a60:	1ad2      	subs	r2, r2, r3
 8009a62:	9206      	str	r2, [sp, #24]
 8009a64:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009a66:	1ad3      	subs	r3, r2, r3
 8009a68:	930d      	str	r3, [sp, #52]	@ 0x34
 8009a6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d021      	beq.n	8009ab4 <_dtoa_r+0x80c>
 8009a70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d100      	bne.n	8009a78 <_dtoa_r+0x7d0>
 8009a76:	e0d3      	b.n	8009c20 <_dtoa_r+0x978>
 8009a78:	9e05      	ldr	r6, [sp, #20]
 8009a7a:	2d00      	cmp	r5, #0
 8009a7c:	d014      	beq.n	8009aa8 <_dtoa_r+0x800>
 8009a7e:	0039      	movs	r1, r7
 8009a80:	002a      	movs	r2, r5
 8009a82:	9803      	ldr	r0, [sp, #12]
 8009a84:	f000 fe8a 	bl	800a79c <__pow5mult>
 8009a88:	9a05      	ldr	r2, [sp, #20]
 8009a8a:	0001      	movs	r1, r0
 8009a8c:	0007      	movs	r7, r0
 8009a8e:	9803      	ldr	r0, [sp, #12]
 8009a90:	f000 fdda 	bl	800a648 <__multiply>
 8009a94:	0006      	movs	r6, r0
 8009a96:	9905      	ldr	r1, [sp, #20]
 8009a98:	9803      	ldr	r0, [sp, #12]
 8009a9a:	f000 fd05 	bl	800a4a8 <_Bfree>
 8009a9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009aa0:	9605      	str	r6, [sp, #20]
 8009aa2:	1b5b      	subs	r3, r3, r5
 8009aa4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009aa6:	d005      	beq.n	8009ab4 <_dtoa_r+0x80c>
 8009aa8:	0031      	movs	r1, r6
 8009aaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009aac:	9803      	ldr	r0, [sp, #12]
 8009aae:	f000 fe75 	bl	800a79c <__pow5mult>
 8009ab2:	9005      	str	r0, [sp, #20]
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	9803      	ldr	r0, [sp, #12]
 8009ab8:	f000 fdae 	bl	800a618 <__i2b>
 8009abc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009abe:	0006      	movs	r6, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d100      	bne.n	8009ac6 <_dtoa_r+0x81e>
 8009ac4:	e1bc      	b.n	8009e40 <_dtoa_r+0xb98>
 8009ac6:	001a      	movs	r2, r3
 8009ac8:	0001      	movs	r1, r0
 8009aca:	9803      	ldr	r0, [sp, #12]
 8009acc:	f000 fe66 	bl	800a79c <__pow5mult>
 8009ad0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009ad2:	0006      	movs	r6, r0
 8009ad4:	2500      	movs	r5, #0
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	dc16      	bgt.n	8009b08 <_dtoa_r+0x860>
 8009ada:	2500      	movs	r5, #0
 8009adc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ade:	42ab      	cmp	r3, r5
 8009ae0:	d10e      	bne.n	8009b00 <_dtoa_r+0x858>
 8009ae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ae4:	031b      	lsls	r3, r3, #12
 8009ae6:	42ab      	cmp	r3, r5
 8009ae8:	d10a      	bne.n	8009b00 <_dtoa_r+0x858>
 8009aea:	4b8d      	ldr	r3, [pc, #564]	@ (8009d20 <_dtoa_r+0xa78>)
 8009aec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009aee:	4213      	tst	r3, r2
 8009af0:	d006      	beq.n	8009b00 <_dtoa_r+0x858>
 8009af2:	9b06      	ldr	r3, [sp, #24]
 8009af4:	3501      	adds	r5, #1
 8009af6:	3301      	adds	r3, #1
 8009af8:	9306      	str	r3, [sp, #24]
 8009afa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009afc:	3301      	adds	r3, #1
 8009afe:	930d      	str	r3, [sp, #52]	@ 0x34
 8009b00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b02:	2001      	movs	r0, #1
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d008      	beq.n	8009b1a <_dtoa_r+0x872>
 8009b08:	6933      	ldr	r3, [r6, #16]
 8009b0a:	3303      	adds	r3, #3
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	18f3      	adds	r3, r6, r3
 8009b10:	6858      	ldr	r0, [r3, #4]
 8009b12:	f000 fd31 	bl	800a578 <__hi0bits>
 8009b16:	2320      	movs	r3, #32
 8009b18:	1a18      	subs	r0, r3, r0
 8009b1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b1c:	1818      	adds	r0, r3, r0
 8009b1e:	0002      	movs	r2, r0
 8009b20:	231f      	movs	r3, #31
 8009b22:	401a      	ands	r2, r3
 8009b24:	4218      	tst	r0, r3
 8009b26:	d100      	bne.n	8009b2a <_dtoa_r+0x882>
 8009b28:	e081      	b.n	8009c2e <_dtoa_r+0x986>
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	1a9b      	subs	r3, r3, r2
 8009b2e:	2b04      	cmp	r3, #4
 8009b30:	dd79      	ble.n	8009c26 <_dtoa_r+0x97e>
 8009b32:	231c      	movs	r3, #28
 8009b34:	1a9b      	subs	r3, r3, r2
 8009b36:	9a06      	ldr	r2, [sp, #24]
 8009b38:	18e4      	adds	r4, r4, r3
 8009b3a:	18d2      	adds	r2, r2, r3
 8009b3c:	9206      	str	r2, [sp, #24]
 8009b3e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b40:	18d3      	adds	r3, r2, r3
 8009b42:	930d      	str	r3, [sp, #52]	@ 0x34
 8009b44:	9b06      	ldr	r3, [sp, #24]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	dd05      	ble.n	8009b56 <_dtoa_r+0x8ae>
 8009b4a:	001a      	movs	r2, r3
 8009b4c:	9905      	ldr	r1, [sp, #20]
 8009b4e:	9803      	ldr	r0, [sp, #12]
 8009b50:	f000 fe80 	bl	800a854 <__lshift>
 8009b54:	9005      	str	r0, [sp, #20]
 8009b56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	dd05      	ble.n	8009b68 <_dtoa_r+0x8c0>
 8009b5c:	0031      	movs	r1, r6
 8009b5e:	001a      	movs	r2, r3
 8009b60:	9803      	ldr	r0, [sp, #12]
 8009b62:	f000 fe77 	bl	800a854 <__lshift>
 8009b66:	0006      	movs	r6, r0
 8009b68:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d061      	beq.n	8009c32 <_dtoa_r+0x98a>
 8009b6e:	0031      	movs	r1, r6
 8009b70:	9805      	ldr	r0, [sp, #20]
 8009b72:	f000 fedb 	bl	800a92c <__mcmp>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	da5b      	bge.n	8009c32 <_dtoa_r+0x98a>
 8009b7a:	9b04      	ldr	r3, [sp, #16]
 8009b7c:	220a      	movs	r2, #10
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b82:	9905      	ldr	r1, [sp, #20]
 8009b84:	2300      	movs	r3, #0
 8009b86:	9803      	ldr	r0, [sp, #12]
 8009b88:	f000 fcb2 	bl	800a4f0 <__multadd>
 8009b8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b8e:	9005      	str	r0, [sp, #20]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d100      	bne.n	8009b96 <_dtoa_r+0x8ee>
 8009b94:	e15b      	b.n	8009e4e <_dtoa_r+0xba6>
 8009b96:	2300      	movs	r3, #0
 8009b98:	0039      	movs	r1, r7
 8009b9a:	220a      	movs	r2, #10
 8009b9c:	9803      	ldr	r0, [sp, #12]
 8009b9e:	f000 fca7 	bl	800a4f0 <__multadd>
 8009ba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ba4:	0007      	movs	r7, r0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	dc4d      	bgt.n	8009c46 <_dtoa_r+0x99e>
 8009baa:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009bac:	2b02      	cmp	r3, #2
 8009bae:	dd46      	ble.n	8009c3e <_dtoa_r+0x996>
 8009bb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d000      	beq.n	8009bb8 <_dtoa_r+0x910>
 8009bb6:	e5db      	b.n	8009770 <_dtoa_r+0x4c8>
 8009bb8:	0031      	movs	r1, r6
 8009bba:	2205      	movs	r2, #5
 8009bbc:	9803      	ldr	r0, [sp, #12]
 8009bbe:	f000 fc97 	bl	800a4f0 <__multadd>
 8009bc2:	0006      	movs	r6, r0
 8009bc4:	0001      	movs	r1, r0
 8009bc6:	9805      	ldr	r0, [sp, #20]
 8009bc8:	f000 feb0 	bl	800a92c <__mcmp>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	dc00      	bgt.n	8009bd2 <_dtoa_r+0x92a>
 8009bd0:	e5ce      	b.n	8009770 <_dtoa_r+0x4c8>
 8009bd2:	9b08      	ldr	r3, [sp, #32]
 8009bd4:	9a08      	ldr	r2, [sp, #32]
 8009bd6:	1c5c      	adds	r4, r3, #1
 8009bd8:	2331      	movs	r3, #49	@ 0x31
 8009bda:	7013      	strb	r3, [r2, #0]
 8009bdc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bde:	3301      	adds	r3, #1
 8009be0:	930c      	str	r3, [sp, #48]	@ 0x30
 8009be2:	e5c9      	b.n	8009778 <_dtoa_r+0x4d0>
 8009be4:	2336      	movs	r3, #54	@ 0x36
 8009be6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009be8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009bea:	1a9b      	subs	r3, r3, r2
 8009bec:	9c06      	ldr	r4, [sp, #24]
 8009bee:	e720      	b.n	8009a32 <_dtoa_r+0x78a>
 8009bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bf2:	1e5d      	subs	r5, r3, #1
 8009bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bf6:	42ab      	cmp	r3, r5
 8009bf8:	db08      	blt.n	8009c0c <_dtoa_r+0x964>
 8009bfa:	1b5d      	subs	r5, r3, r5
 8009bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	daf4      	bge.n	8009bec <_dtoa_r+0x944>
 8009c02:	9b06      	ldr	r3, [sp, #24]
 8009c04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c06:	1a9c      	subs	r4, r3, r2
 8009c08:	2300      	movs	r3, #0
 8009c0a:	e712      	b.n	8009a32 <_dtoa_r+0x78a>
 8009c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c0e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009c10:	1aeb      	subs	r3, r5, r3
 8009c12:	18d3      	adds	r3, r2, r3
 8009c14:	9314      	str	r3, [sp, #80]	@ 0x50
 8009c16:	950f      	str	r5, [sp, #60]	@ 0x3c
 8009c18:	9c06      	ldr	r4, [sp, #24]
 8009c1a:	2500      	movs	r5, #0
 8009c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c1e:	e708      	b.n	8009a32 <_dtoa_r+0x78a>
 8009c20:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c22:	9905      	ldr	r1, [sp, #20]
 8009c24:	e742      	b.n	8009aac <_dtoa_r+0x804>
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	d08c      	beq.n	8009b44 <_dtoa_r+0x89c>
 8009c2a:	331c      	adds	r3, #28
 8009c2c:	e783      	b.n	8009b36 <_dtoa_r+0x88e>
 8009c2e:	0013      	movs	r3, r2
 8009c30:	e7fb      	b.n	8009c2a <_dtoa_r+0x982>
 8009c32:	9b04      	ldr	r3, [sp, #16]
 8009c34:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c38:	930e      	str	r3, [sp, #56]	@ 0x38
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	ddb5      	ble.n	8009baa <_dtoa_r+0x902>
 8009c3e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d100      	bne.n	8009c46 <_dtoa_r+0x99e>
 8009c44:	e107      	b.n	8009e56 <_dtoa_r+0xbae>
 8009c46:	2c00      	cmp	r4, #0
 8009c48:	dd05      	ble.n	8009c56 <_dtoa_r+0x9ae>
 8009c4a:	0039      	movs	r1, r7
 8009c4c:	0022      	movs	r2, r4
 8009c4e:	9803      	ldr	r0, [sp, #12]
 8009c50:	f000 fe00 	bl	800a854 <__lshift>
 8009c54:	0007      	movs	r7, r0
 8009c56:	9704      	str	r7, [sp, #16]
 8009c58:	2d00      	cmp	r5, #0
 8009c5a:	d020      	beq.n	8009c9e <_dtoa_r+0x9f6>
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	9803      	ldr	r0, [sp, #12]
 8009c60:	f000 fbde 	bl	800a420 <_Balloc>
 8009c64:	1e04      	subs	r4, r0, #0
 8009c66:	d10c      	bne.n	8009c82 <_dtoa_r+0x9da>
 8009c68:	0022      	movs	r2, r4
 8009c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8009d24 <_dtoa_r+0xa7c>)
 8009c6c:	482e      	ldr	r0, [pc, #184]	@ (8009d28 <_dtoa_r+0xa80>)
 8009c6e:	492f      	ldr	r1, [pc, #188]	@ (8009d2c <_dtoa_r+0xa84>)
 8009c70:	f7ff fb2f 	bl	80092d2 <_dtoa_r+0x2a>
 8009c74:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8009c76:	0037      	movs	r7, r6
 8009c78:	e7ab      	b.n	8009bd2 <_dtoa_r+0x92a>
 8009c7a:	9b04      	ldr	r3, [sp, #16]
 8009c7c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8009c7e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c80:	e7f9      	b.n	8009c76 <_dtoa_r+0x9ce>
 8009c82:	0039      	movs	r1, r7
 8009c84:	693a      	ldr	r2, [r7, #16]
 8009c86:	310c      	adds	r1, #12
 8009c88:	3202      	adds	r2, #2
 8009c8a:	0092      	lsls	r2, r2, #2
 8009c8c:	300c      	adds	r0, #12
 8009c8e:	f7ff fa7c 	bl	800918a <memcpy>
 8009c92:	2201      	movs	r2, #1
 8009c94:	0021      	movs	r1, r4
 8009c96:	9803      	ldr	r0, [sp, #12]
 8009c98:	f000 fddc 	bl	800a854 <__lshift>
 8009c9c:	9004      	str	r0, [sp, #16]
 8009c9e:	9b08      	ldr	r3, [sp, #32]
 8009ca0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ca2:	9306      	str	r3, [sp, #24]
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	189b      	adds	r3, r3, r2
 8009ca8:	2201      	movs	r2, #1
 8009caa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cae:	4013      	ands	r3, r2
 8009cb0:	930e      	str	r3, [sp, #56]	@ 0x38
 8009cb2:	0031      	movs	r1, r6
 8009cb4:	9805      	ldr	r0, [sp, #20]
 8009cb6:	f7ff fa71 	bl	800919c <quorem>
 8009cba:	0039      	movs	r1, r7
 8009cbc:	0005      	movs	r5, r0
 8009cbe:	900a      	str	r0, [sp, #40]	@ 0x28
 8009cc0:	9805      	ldr	r0, [sp, #20]
 8009cc2:	f000 fe33 	bl	800a92c <__mcmp>
 8009cc6:	9a04      	ldr	r2, [sp, #16]
 8009cc8:	900d      	str	r0, [sp, #52]	@ 0x34
 8009cca:	0031      	movs	r1, r6
 8009ccc:	9803      	ldr	r0, [sp, #12]
 8009cce:	f000 fe49 	bl	800a964 <__mdiff>
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	68c3      	ldr	r3, [r0, #12]
 8009cd6:	0004      	movs	r4, r0
 8009cd8:	3530      	adds	r5, #48	@ 0x30
 8009cda:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d104      	bne.n	8009cea <_dtoa_r+0xa42>
 8009ce0:	0001      	movs	r1, r0
 8009ce2:	9805      	ldr	r0, [sp, #20]
 8009ce4:	f000 fe22 	bl	800a92c <__mcmp>
 8009ce8:	9009      	str	r0, [sp, #36]	@ 0x24
 8009cea:	0021      	movs	r1, r4
 8009cec:	9803      	ldr	r0, [sp, #12]
 8009cee:	f000 fbdb 	bl	800a4a8 <_Bfree>
 8009cf2:	9b06      	ldr	r3, [sp, #24]
 8009cf4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009cf6:	1c5c      	adds	r4, r3, #1
 8009cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	d116      	bne.n	8009d30 <_dtoa_r+0xa88>
 8009d02:	2d39      	cmp	r5, #57	@ 0x39
 8009d04:	d02f      	beq.n	8009d66 <_dtoa_r+0xabe>
 8009d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	dd01      	ble.n	8009d10 <_dtoa_r+0xa68>
 8009d0c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8009d0e:	3531      	adds	r5, #49	@ 0x31
 8009d10:	9b06      	ldr	r3, [sp, #24]
 8009d12:	701d      	strb	r5, [r3, #0]
 8009d14:	e532      	b.n	800977c <_dtoa_r+0x4d4>
 8009d16:	46c0      	nop			@ (mov r8, r8)
 8009d18:	40240000 	.word	0x40240000
 8009d1c:	00000433 	.word	0x00000433
 8009d20:	7ff00000 	.word	0x7ff00000
 8009d24:	0800b8c8 	.word	0x0800b8c8
 8009d28:	0800b870 	.word	0x0800b870
 8009d2c:	000002ef 	.word	0x000002ef
 8009d30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	db04      	blt.n	8009d40 <_dtoa_r+0xa98>
 8009d36:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	d11e      	bne.n	8009d7e <_dtoa_r+0xad6>
 8009d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	dde4      	ble.n	8009d10 <_dtoa_r+0xa68>
 8009d46:	9905      	ldr	r1, [sp, #20]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	9803      	ldr	r0, [sp, #12]
 8009d4c:	f000 fd82 	bl	800a854 <__lshift>
 8009d50:	0031      	movs	r1, r6
 8009d52:	9005      	str	r0, [sp, #20]
 8009d54:	f000 fdea 	bl	800a92c <__mcmp>
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	dc02      	bgt.n	8009d62 <_dtoa_r+0xaba>
 8009d5c:	d1d8      	bne.n	8009d10 <_dtoa_r+0xa68>
 8009d5e:	07eb      	lsls	r3, r5, #31
 8009d60:	d5d6      	bpl.n	8009d10 <_dtoa_r+0xa68>
 8009d62:	2d39      	cmp	r5, #57	@ 0x39
 8009d64:	d1d2      	bne.n	8009d0c <_dtoa_r+0xa64>
 8009d66:	2339      	movs	r3, #57	@ 0x39
 8009d68:	9a06      	ldr	r2, [sp, #24]
 8009d6a:	7013      	strb	r3, [r2, #0]
 8009d6c:	0023      	movs	r3, r4
 8009d6e:	001c      	movs	r4, r3
 8009d70:	3b01      	subs	r3, #1
 8009d72:	781a      	ldrb	r2, [r3, #0]
 8009d74:	2a39      	cmp	r2, #57	@ 0x39
 8009d76:	d050      	beq.n	8009e1a <_dtoa_r+0xb72>
 8009d78:	3201      	adds	r2, #1
 8009d7a:	701a      	strb	r2, [r3, #0]
 8009d7c:	e4fe      	b.n	800977c <_dtoa_r+0x4d4>
 8009d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	dd03      	ble.n	8009d8c <_dtoa_r+0xae4>
 8009d84:	2d39      	cmp	r5, #57	@ 0x39
 8009d86:	d0ee      	beq.n	8009d66 <_dtoa_r+0xabe>
 8009d88:	3501      	adds	r5, #1
 8009d8a:	e7c1      	b.n	8009d10 <_dtoa_r+0xa68>
 8009d8c:	9b06      	ldr	r3, [sp, #24]
 8009d8e:	9a06      	ldr	r2, [sp, #24]
 8009d90:	701d      	strb	r5, [r3, #0]
 8009d92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d02b      	beq.n	8009df0 <_dtoa_r+0xb48>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	220a      	movs	r2, #10
 8009d9c:	9905      	ldr	r1, [sp, #20]
 8009d9e:	9803      	ldr	r0, [sp, #12]
 8009da0:	f000 fba6 	bl	800a4f0 <__multadd>
 8009da4:	9b04      	ldr	r3, [sp, #16]
 8009da6:	9005      	str	r0, [sp, #20]
 8009da8:	429f      	cmp	r7, r3
 8009daa:	d109      	bne.n	8009dc0 <_dtoa_r+0xb18>
 8009dac:	0039      	movs	r1, r7
 8009dae:	2300      	movs	r3, #0
 8009db0:	220a      	movs	r2, #10
 8009db2:	9803      	ldr	r0, [sp, #12]
 8009db4:	f000 fb9c 	bl	800a4f0 <__multadd>
 8009db8:	0007      	movs	r7, r0
 8009dba:	9004      	str	r0, [sp, #16]
 8009dbc:	9406      	str	r4, [sp, #24]
 8009dbe:	e778      	b.n	8009cb2 <_dtoa_r+0xa0a>
 8009dc0:	0039      	movs	r1, r7
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	220a      	movs	r2, #10
 8009dc6:	9803      	ldr	r0, [sp, #12]
 8009dc8:	f000 fb92 	bl	800a4f0 <__multadd>
 8009dcc:	2300      	movs	r3, #0
 8009dce:	0007      	movs	r7, r0
 8009dd0:	220a      	movs	r2, #10
 8009dd2:	9904      	ldr	r1, [sp, #16]
 8009dd4:	9803      	ldr	r0, [sp, #12]
 8009dd6:	f000 fb8b 	bl	800a4f0 <__multadd>
 8009dda:	9004      	str	r0, [sp, #16]
 8009ddc:	e7ee      	b.n	8009dbc <_dtoa_r+0xb14>
 8009dde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009de0:	2401      	movs	r4, #1
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	dd00      	ble.n	8009de8 <_dtoa_r+0xb40>
 8009de6:	001c      	movs	r4, r3
 8009de8:	9704      	str	r7, [sp, #16]
 8009dea:	2700      	movs	r7, #0
 8009dec:	9b08      	ldr	r3, [sp, #32]
 8009dee:	191c      	adds	r4, r3, r4
 8009df0:	9905      	ldr	r1, [sp, #20]
 8009df2:	2201      	movs	r2, #1
 8009df4:	9803      	ldr	r0, [sp, #12]
 8009df6:	f000 fd2d 	bl	800a854 <__lshift>
 8009dfa:	0031      	movs	r1, r6
 8009dfc:	9005      	str	r0, [sp, #20]
 8009dfe:	f000 fd95 	bl	800a92c <__mcmp>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	dcb2      	bgt.n	8009d6c <_dtoa_r+0xac4>
 8009e06:	d101      	bne.n	8009e0c <_dtoa_r+0xb64>
 8009e08:	07ed      	lsls	r5, r5, #31
 8009e0a:	d4af      	bmi.n	8009d6c <_dtoa_r+0xac4>
 8009e0c:	0023      	movs	r3, r4
 8009e0e:	001c      	movs	r4, r3
 8009e10:	3b01      	subs	r3, #1
 8009e12:	781a      	ldrb	r2, [r3, #0]
 8009e14:	2a30      	cmp	r2, #48	@ 0x30
 8009e16:	d0fa      	beq.n	8009e0e <_dtoa_r+0xb66>
 8009e18:	e4b0      	b.n	800977c <_dtoa_r+0x4d4>
 8009e1a:	9a08      	ldr	r2, [sp, #32]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d1a6      	bne.n	8009d6e <_dtoa_r+0xac6>
 8009e20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e22:	3301      	adds	r3, #1
 8009e24:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e26:	2331      	movs	r3, #49	@ 0x31
 8009e28:	7013      	strb	r3, [r2, #0]
 8009e2a:	e4a7      	b.n	800977c <_dtoa_r+0x4d4>
 8009e2c:	4b14      	ldr	r3, [pc, #80]	@ (8009e80 <_dtoa_r+0xbd8>)
 8009e2e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009e30:	9308      	str	r3, [sp, #32]
 8009e32:	4b14      	ldr	r3, [pc, #80]	@ (8009e84 <_dtoa_r+0xbdc>)
 8009e34:	2a00      	cmp	r2, #0
 8009e36:	d001      	beq.n	8009e3c <_dtoa_r+0xb94>
 8009e38:	f7ff fa7e 	bl	8009338 <_dtoa_r+0x90>
 8009e3c:	f7ff fa7e 	bl	800933c <_dtoa_r+0x94>
 8009e40:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	dc00      	bgt.n	8009e48 <_dtoa_r+0xba0>
 8009e46:	e648      	b.n	8009ada <_dtoa_r+0x832>
 8009e48:	2001      	movs	r0, #1
 8009e4a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009e4c:	e665      	b.n	8009b1a <_dtoa_r+0x872>
 8009e4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	dc00      	bgt.n	8009e56 <_dtoa_r+0xbae>
 8009e54:	e6a9      	b.n	8009baa <_dtoa_r+0x902>
 8009e56:	2400      	movs	r4, #0
 8009e58:	0031      	movs	r1, r6
 8009e5a:	9805      	ldr	r0, [sp, #20]
 8009e5c:	f7ff f99e 	bl	800919c <quorem>
 8009e60:	9b08      	ldr	r3, [sp, #32]
 8009e62:	3030      	adds	r0, #48	@ 0x30
 8009e64:	5518      	strb	r0, [r3, r4]
 8009e66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e68:	3401      	adds	r4, #1
 8009e6a:	0005      	movs	r5, r0
 8009e6c:	42a3      	cmp	r3, r4
 8009e6e:	ddb6      	ble.n	8009dde <_dtoa_r+0xb36>
 8009e70:	2300      	movs	r3, #0
 8009e72:	220a      	movs	r2, #10
 8009e74:	9905      	ldr	r1, [sp, #20]
 8009e76:	9803      	ldr	r0, [sp, #12]
 8009e78:	f000 fb3a 	bl	800a4f0 <__multadd>
 8009e7c:	9005      	str	r0, [sp, #20]
 8009e7e:	e7eb      	b.n	8009e58 <_dtoa_r+0xbb0>
 8009e80:	0800b84c 	.word	0x0800b84c
 8009e84:	0800b854 	.word	0x0800b854

08009e88 <__ssputs_r>:
 8009e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e8a:	688e      	ldr	r6, [r1, #8]
 8009e8c:	b085      	sub	sp, #20
 8009e8e:	001f      	movs	r7, r3
 8009e90:	000c      	movs	r4, r1
 8009e92:	680b      	ldr	r3, [r1, #0]
 8009e94:	9002      	str	r0, [sp, #8]
 8009e96:	9203      	str	r2, [sp, #12]
 8009e98:	42be      	cmp	r6, r7
 8009e9a:	d830      	bhi.n	8009efe <__ssputs_r+0x76>
 8009e9c:	210c      	movs	r1, #12
 8009e9e:	5e62      	ldrsh	r2, [r4, r1]
 8009ea0:	2190      	movs	r1, #144	@ 0x90
 8009ea2:	00c9      	lsls	r1, r1, #3
 8009ea4:	420a      	tst	r2, r1
 8009ea6:	d028      	beq.n	8009efa <__ssputs_r+0x72>
 8009ea8:	2003      	movs	r0, #3
 8009eaa:	6921      	ldr	r1, [r4, #16]
 8009eac:	1a5b      	subs	r3, r3, r1
 8009eae:	9301      	str	r3, [sp, #4]
 8009eb0:	6963      	ldr	r3, [r4, #20]
 8009eb2:	4343      	muls	r3, r0
 8009eb4:	9801      	ldr	r0, [sp, #4]
 8009eb6:	0fdd      	lsrs	r5, r3, #31
 8009eb8:	18ed      	adds	r5, r5, r3
 8009eba:	1c7b      	adds	r3, r7, #1
 8009ebc:	181b      	adds	r3, r3, r0
 8009ebe:	106d      	asrs	r5, r5, #1
 8009ec0:	42ab      	cmp	r3, r5
 8009ec2:	d900      	bls.n	8009ec6 <__ssputs_r+0x3e>
 8009ec4:	001d      	movs	r5, r3
 8009ec6:	0552      	lsls	r2, r2, #21
 8009ec8:	d528      	bpl.n	8009f1c <__ssputs_r+0x94>
 8009eca:	0029      	movs	r1, r5
 8009ecc:	9802      	ldr	r0, [sp, #8]
 8009ece:	f000 f965 	bl	800a19c <_malloc_r>
 8009ed2:	1e06      	subs	r6, r0, #0
 8009ed4:	d02c      	beq.n	8009f30 <__ssputs_r+0xa8>
 8009ed6:	9a01      	ldr	r2, [sp, #4]
 8009ed8:	6921      	ldr	r1, [r4, #16]
 8009eda:	f7ff f956 	bl	800918a <memcpy>
 8009ede:	89a2      	ldrh	r2, [r4, #12]
 8009ee0:	4b18      	ldr	r3, [pc, #96]	@ (8009f44 <__ssputs_r+0xbc>)
 8009ee2:	401a      	ands	r2, r3
 8009ee4:	2380      	movs	r3, #128	@ 0x80
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	81a3      	strh	r3, [r4, #12]
 8009eea:	9b01      	ldr	r3, [sp, #4]
 8009eec:	6126      	str	r6, [r4, #16]
 8009eee:	18f6      	adds	r6, r6, r3
 8009ef0:	6026      	str	r6, [r4, #0]
 8009ef2:	003e      	movs	r6, r7
 8009ef4:	6165      	str	r5, [r4, #20]
 8009ef6:	1aed      	subs	r5, r5, r3
 8009ef8:	60a5      	str	r5, [r4, #8]
 8009efa:	42be      	cmp	r6, r7
 8009efc:	d900      	bls.n	8009f00 <__ssputs_r+0x78>
 8009efe:	003e      	movs	r6, r7
 8009f00:	0032      	movs	r2, r6
 8009f02:	9903      	ldr	r1, [sp, #12]
 8009f04:	6820      	ldr	r0, [r4, #0]
 8009f06:	f000 fea3 	bl	800ac50 <memmove>
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	68a3      	ldr	r3, [r4, #8]
 8009f0e:	1b9b      	subs	r3, r3, r6
 8009f10:	60a3      	str	r3, [r4, #8]
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	199b      	adds	r3, r3, r6
 8009f16:	6023      	str	r3, [r4, #0]
 8009f18:	b005      	add	sp, #20
 8009f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f1c:	002a      	movs	r2, r5
 8009f1e:	9802      	ldr	r0, [sp, #8]
 8009f20:	f000 fe66 	bl	800abf0 <_realloc_r>
 8009f24:	1e06      	subs	r6, r0, #0
 8009f26:	d1e0      	bne.n	8009eea <__ssputs_r+0x62>
 8009f28:	6921      	ldr	r1, [r4, #16]
 8009f2a:	9802      	ldr	r0, [sp, #8]
 8009f2c:	f000 ff4e 	bl	800adcc <_free_r>
 8009f30:	230c      	movs	r3, #12
 8009f32:	2001      	movs	r0, #1
 8009f34:	9a02      	ldr	r2, [sp, #8]
 8009f36:	4240      	negs	r0, r0
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	89a2      	ldrh	r2, [r4, #12]
 8009f3c:	3334      	adds	r3, #52	@ 0x34
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	81a3      	strh	r3, [r4, #12]
 8009f42:	e7e9      	b.n	8009f18 <__ssputs_r+0x90>
 8009f44:	fffffb7f 	.word	0xfffffb7f

08009f48 <_svfiprintf_r>:
 8009f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f4a:	b0a1      	sub	sp, #132	@ 0x84
 8009f4c:	9003      	str	r0, [sp, #12]
 8009f4e:	001d      	movs	r5, r3
 8009f50:	898b      	ldrh	r3, [r1, #12]
 8009f52:	000f      	movs	r7, r1
 8009f54:	0016      	movs	r6, r2
 8009f56:	061b      	lsls	r3, r3, #24
 8009f58:	d511      	bpl.n	8009f7e <_svfiprintf_r+0x36>
 8009f5a:	690b      	ldr	r3, [r1, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d10e      	bne.n	8009f7e <_svfiprintf_r+0x36>
 8009f60:	2140      	movs	r1, #64	@ 0x40
 8009f62:	f000 f91b 	bl	800a19c <_malloc_r>
 8009f66:	6038      	str	r0, [r7, #0]
 8009f68:	6138      	str	r0, [r7, #16]
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	d105      	bne.n	8009f7a <_svfiprintf_r+0x32>
 8009f6e:	230c      	movs	r3, #12
 8009f70:	9a03      	ldr	r2, [sp, #12]
 8009f72:	6013      	str	r3, [r2, #0]
 8009f74:	2001      	movs	r0, #1
 8009f76:	4240      	negs	r0, r0
 8009f78:	e0cf      	b.n	800a11a <_svfiprintf_r+0x1d2>
 8009f7a:	2340      	movs	r3, #64	@ 0x40
 8009f7c:	617b      	str	r3, [r7, #20]
 8009f7e:	2300      	movs	r3, #0
 8009f80:	ac08      	add	r4, sp, #32
 8009f82:	6163      	str	r3, [r4, #20]
 8009f84:	3320      	adds	r3, #32
 8009f86:	7663      	strb	r3, [r4, #25]
 8009f88:	3310      	adds	r3, #16
 8009f8a:	76a3      	strb	r3, [r4, #26]
 8009f8c:	9507      	str	r5, [sp, #28]
 8009f8e:	0035      	movs	r5, r6
 8009f90:	782b      	ldrb	r3, [r5, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d001      	beq.n	8009f9a <_svfiprintf_r+0x52>
 8009f96:	2b25      	cmp	r3, #37	@ 0x25
 8009f98:	d148      	bne.n	800a02c <_svfiprintf_r+0xe4>
 8009f9a:	1bab      	subs	r3, r5, r6
 8009f9c:	9305      	str	r3, [sp, #20]
 8009f9e:	42b5      	cmp	r5, r6
 8009fa0:	d00b      	beq.n	8009fba <_svfiprintf_r+0x72>
 8009fa2:	0032      	movs	r2, r6
 8009fa4:	0039      	movs	r1, r7
 8009fa6:	9803      	ldr	r0, [sp, #12]
 8009fa8:	f7ff ff6e 	bl	8009e88 <__ssputs_r>
 8009fac:	3001      	adds	r0, #1
 8009fae:	d100      	bne.n	8009fb2 <_svfiprintf_r+0x6a>
 8009fb0:	e0ae      	b.n	800a110 <_svfiprintf_r+0x1c8>
 8009fb2:	6963      	ldr	r3, [r4, #20]
 8009fb4:	9a05      	ldr	r2, [sp, #20]
 8009fb6:	189b      	adds	r3, r3, r2
 8009fb8:	6163      	str	r3, [r4, #20]
 8009fba:	782b      	ldrb	r3, [r5, #0]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d100      	bne.n	8009fc2 <_svfiprintf_r+0x7a>
 8009fc0:	e0a6      	b.n	800a110 <_svfiprintf_r+0x1c8>
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4252      	negs	r2, r2
 8009fc8:	6062      	str	r2, [r4, #4]
 8009fca:	a904      	add	r1, sp, #16
 8009fcc:	3254      	adds	r2, #84	@ 0x54
 8009fce:	1852      	adds	r2, r2, r1
 8009fd0:	1c6e      	adds	r6, r5, #1
 8009fd2:	6023      	str	r3, [r4, #0]
 8009fd4:	60e3      	str	r3, [r4, #12]
 8009fd6:	60a3      	str	r3, [r4, #8]
 8009fd8:	7013      	strb	r3, [r2, #0]
 8009fda:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009fdc:	4b54      	ldr	r3, [pc, #336]	@ (800a130 <_svfiprintf_r+0x1e8>)
 8009fde:	2205      	movs	r2, #5
 8009fe0:	0018      	movs	r0, r3
 8009fe2:	7831      	ldrb	r1, [r6, #0]
 8009fe4:	9305      	str	r3, [sp, #20]
 8009fe6:	f7ff f8c5 	bl	8009174 <memchr>
 8009fea:	1c75      	adds	r5, r6, #1
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d11f      	bne.n	800a030 <_svfiprintf_r+0xe8>
 8009ff0:	6822      	ldr	r2, [r4, #0]
 8009ff2:	06d3      	lsls	r3, r2, #27
 8009ff4:	d504      	bpl.n	800a000 <_svfiprintf_r+0xb8>
 8009ff6:	2353      	movs	r3, #83	@ 0x53
 8009ff8:	a904      	add	r1, sp, #16
 8009ffa:	185b      	adds	r3, r3, r1
 8009ffc:	2120      	movs	r1, #32
 8009ffe:	7019      	strb	r1, [r3, #0]
 800a000:	0713      	lsls	r3, r2, #28
 800a002:	d504      	bpl.n	800a00e <_svfiprintf_r+0xc6>
 800a004:	2353      	movs	r3, #83	@ 0x53
 800a006:	a904      	add	r1, sp, #16
 800a008:	185b      	adds	r3, r3, r1
 800a00a:	212b      	movs	r1, #43	@ 0x2b
 800a00c:	7019      	strb	r1, [r3, #0]
 800a00e:	7833      	ldrb	r3, [r6, #0]
 800a010:	2b2a      	cmp	r3, #42	@ 0x2a
 800a012:	d016      	beq.n	800a042 <_svfiprintf_r+0xfa>
 800a014:	0035      	movs	r5, r6
 800a016:	2100      	movs	r1, #0
 800a018:	200a      	movs	r0, #10
 800a01a:	68e3      	ldr	r3, [r4, #12]
 800a01c:	782a      	ldrb	r2, [r5, #0]
 800a01e:	1c6e      	adds	r6, r5, #1
 800a020:	3a30      	subs	r2, #48	@ 0x30
 800a022:	2a09      	cmp	r2, #9
 800a024:	d950      	bls.n	800a0c8 <_svfiprintf_r+0x180>
 800a026:	2900      	cmp	r1, #0
 800a028:	d111      	bne.n	800a04e <_svfiprintf_r+0x106>
 800a02a:	e017      	b.n	800a05c <_svfiprintf_r+0x114>
 800a02c:	3501      	adds	r5, #1
 800a02e:	e7af      	b.n	8009f90 <_svfiprintf_r+0x48>
 800a030:	9b05      	ldr	r3, [sp, #20]
 800a032:	6822      	ldr	r2, [r4, #0]
 800a034:	1ac0      	subs	r0, r0, r3
 800a036:	2301      	movs	r3, #1
 800a038:	4083      	lsls	r3, r0
 800a03a:	4313      	orrs	r3, r2
 800a03c:	002e      	movs	r6, r5
 800a03e:	6023      	str	r3, [r4, #0]
 800a040:	e7cc      	b.n	8009fdc <_svfiprintf_r+0x94>
 800a042:	9b07      	ldr	r3, [sp, #28]
 800a044:	1d19      	adds	r1, r3, #4
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	9107      	str	r1, [sp, #28]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	db01      	blt.n	800a052 <_svfiprintf_r+0x10a>
 800a04e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a050:	e004      	b.n	800a05c <_svfiprintf_r+0x114>
 800a052:	425b      	negs	r3, r3
 800a054:	60e3      	str	r3, [r4, #12]
 800a056:	2302      	movs	r3, #2
 800a058:	4313      	orrs	r3, r2
 800a05a:	6023      	str	r3, [r4, #0]
 800a05c:	782b      	ldrb	r3, [r5, #0]
 800a05e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a060:	d10c      	bne.n	800a07c <_svfiprintf_r+0x134>
 800a062:	786b      	ldrb	r3, [r5, #1]
 800a064:	2b2a      	cmp	r3, #42	@ 0x2a
 800a066:	d134      	bne.n	800a0d2 <_svfiprintf_r+0x18a>
 800a068:	9b07      	ldr	r3, [sp, #28]
 800a06a:	3502      	adds	r5, #2
 800a06c:	1d1a      	adds	r2, r3, #4
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	9207      	str	r2, [sp, #28]
 800a072:	2b00      	cmp	r3, #0
 800a074:	da01      	bge.n	800a07a <_svfiprintf_r+0x132>
 800a076:	2301      	movs	r3, #1
 800a078:	425b      	negs	r3, r3
 800a07a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a07c:	4e2d      	ldr	r6, [pc, #180]	@ (800a134 <_svfiprintf_r+0x1ec>)
 800a07e:	2203      	movs	r2, #3
 800a080:	0030      	movs	r0, r6
 800a082:	7829      	ldrb	r1, [r5, #0]
 800a084:	f7ff f876 	bl	8009174 <memchr>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d006      	beq.n	800a09a <_svfiprintf_r+0x152>
 800a08c:	2340      	movs	r3, #64	@ 0x40
 800a08e:	1b80      	subs	r0, r0, r6
 800a090:	4083      	lsls	r3, r0
 800a092:	6822      	ldr	r2, [r4, #0]
 800a094:	3501      	adds	r5, #1
 800a096:	4313      	orrs	r3, r2
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	7829      	ldrb	r1, [r5, #0]
 800a09c:	2206      	movs	r2, #6
 800a09e:	4826      	ldr	r0, [pc, #152]	@ (800a138 <_svfiprintf_r+0x1f0>)
 800a0a0:	1c6e      	adds	r6, r5, #1
 800a0a2:	7621      	strb	r1, [r4, #24]
 800a0a4:	f7ff f866 	bl	8009174 <memchr>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d038      	beq.n	800a11e <_svfiprintf_r+0x1d6>
 800a0ac:	4b23      	ldr	r3, [pc, #140]	@ (800a13c <_svfiprintf_r+0x1f4>)
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d122      	bne.n	800a0f8 <_svfiprintf_r+0x1b0>
 800a0b2:	2207      	movs	r2, #7
 800a0b4:	9b07      	ldr	r3, [sp, #28]
 800a0b6:	3307      	adds	r3, #7
 800a0b8:	4393      	bics	r3, r2
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	9307      	str	r3, [sp, #28]
 800a0be:	6963      	ldr	r3, [r4, #20]
 800a0c0:	9a04      	ldr	r2, [sp, #16]
 800a0c2:	189b      	adds	r3, r3, r2
 800a0c4:	6163      	str	r3, [r4, #20]
 800a0c6:	e762      	b.n	8009f8e <_svfiprintf_r+0x46>
 800a0c8:	4343      	muls	r3, r0
 800a0ca:	0035      	movs	r5, r6
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	189b      	adds	r3, r3, r2
 800a0d0:	e7a4      	b.n	800a01c <_svfiprintf_r+0xd4>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	200a      	movs	r0, #10
 800a0d6:	0019      	movs	r1, r3
 800a0d8:	3501      	adds	r5, #1
 800a0da:	6063      	str	r3, [r4, #4]
 800a0dc:	782a      	ldrb	r2, [r5, #0]
 800a0de:	1c6e      	adds	r6, r5, #1
 800a0e0:	3a30      	subs	r2, #48	@ 0x30
 800a0e2:	2a09      	cmp	r2, #9
 800a0e4:	d903      	bls.n	800a0ee <_svfiprintf_r+0x1a6>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d0c8      	beq.n	800a07c <_svfiprintf_r+0x134>
 800a0ea:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0ec:	e7c6      	b.n	800a07c <_svfiprintf_r+0x134>
 800a0ee:	4341      	muls	r1, r0
 800a0f0:	0035      	movs	r5, r6
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	1889      	adds	r1, r1, r2
 800a0f6:	e7f1      	b.n	800a0dc <_svfiprintf_r+0x194>
 800a0f8:	aa07      	add	r2, sp, #28
 800a0fa:	9200      	str	r2, [sp, #0]
 800a0fc:	0021      	movs	r1, r4
 800a0fe:	003a      	movs	r2, r7
 800a100:	4b0f      	ldr	r3, [pc, #60]	@ (800a140 <_svfiprintf_r+0x1f8>)
 800a102:	9803      	ldr	r0, [sp, #12]
 800a104:	f7fe fb48 	bl	8008798 <_printf_float>
 800a108:	9004      	str	r0, [sp, #16]
 800a10a:	9b04      	ldr	r3, [sp, #16]
 800a10c:	3301      	adds	r3, #1
 800a10e:	d1d6      	bne.n	800a0be <_svfiprintf_r+0x176>
 800a110:	89bb      	ldrh	r3, [r7, #12]
 800a112:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a114:	065b      	lsls	r3, r3, #25
 800a116:	d500      	bpl.n	800a11a <_svfiprintf_r+0x1d2>
 800a118:	e72c      	b.n	8009f74 <_svfiprintf_r+0x2c>
 800a11a:	b021      	add	sp, #132	@ 0x84
 800a11c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a11e:	aa07      	add	r2, sp, #28
 800a120:	9200      	str	r2, [sp, #0]
 800a122:	0021      	movs	r1, r4
 800a124:	003a      	movs	r2, r7
 800a126:	4b06      	ldr	r3, [pc, #24]	@ (800a140 <_svfiprintf_r+0x1f8>)
 800a128:	9803      	ldr	r0, [sp, #12]
 800a12a:	f7fe fde3 	bl	8008cf4 <_printf_i>
 800a12e:	e7eb      	b.n	800a108 <_svfiprintf_r+0x1c0>
 800a130:	0800b8d9 	.word	0x0800b8d9
 800a134:	0800b8df 	.word	0x0800b8df
 800a138:	0800b8e3 	.word	0x0800b8e3
 800a13c:	08008799 	.word	0x08008799
 800a140:	08009e89 	.word	0x08009e89

0800a144 <malloc>:
 800a144:	b510      	push	{r4, lr}
 800a146:	4b03      	ldr	r3, [pc, #12]	@ (800a154 <malloc+0x10>)
 800a148:	0001      	movs	r1, r0
 800a14a:	6818      	ldr	r0, [r3, #0]
 800a14c:	f000 f826 	bl	800a19c <_malloc_r>
 800a150:	bd10      	pop	{r4, pc}
 800a152:	46c0      	nop			@ (mov r8, r8)
 800a154:	20000018 	.word	0x20000018

0800a158 <sbrk_aligned>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	4e0f      	ldr	r6, [pc, #60]	@ (800a198 <sbrk_aligned+0x40>)
 800a15c:	000d      	movs	r5, r1
 800a15e:	6831      	ldr	r1, [r6, #0]
 800a160:	0004      	movs	r4, r0
 800a162:	2900      	cmp	r1, #0
 800a164:	d102      	bne.n	800a16c <sbrk_aligned+0x14>
 800a166:	f000 fdad 	bl	800acc4 <_sbrk_r>
 800a16a:	6030      	str	r0, [r6, #0]
 800a16c:	0029      	movs	r1, r5
 800a16e:	0020      	movs	r0, r4
 800a170:	f000 fda8 	bl	800acc4 <_sbrk_r>
 800a174:	1c43      	adds	r3, r0, #1
 800a176:	d103      	bne.n	800a180 <sbrk_aligned+0x28>
 800a178:	2501      	movs	r5, #1
 800a17a:	426d      	negs	r5, r5
 800a17c:	0028      	movs	r0, r5
 800a17e:	bd70      	pop	{r4, r5, r6, pc}
 800a180:	2303      	movs	r3, #3
 800a182:	1cc5      	adds	r5, r0, #3
 800a184:	439d      	bics	r5, r3
 800a186:	42a8      	cmp	r0, r5
 800a188:	d0f8      	beq.n	800a17c <sbrk_aligned+0x24>
 800a18a:	1a29      	subs	r1, r5, r0
 800a18c:	0020      	movs	r0, r4
 800a18e:	f000 fd99 	bl	800acc4 <_sbrk_r>
 800a192:	3001      	adds	r0, #1
 800a194:	d1f2      	bne.n	800a17c <sbrk_aligned+0x24>
 800a196:	e7ef      	b.n	800a178 <sbrk_aligned+0x20>
 800a198:	200004f4 	.word	0x200004f4

0800a19c <_malloc_r>:
 800a19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a19e:	2203      	movs	r2, #3
 800a1a0:	1ccb      	adds	r3, r1, #3
 800a1a2:	4393      	bics	r3, r2
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	0005      	movs	r5, r0
 800a1a8:	001f      	movs	r7, r3
 800a1aa:	2b0c      	cmp	r3, #12
 800a1ac:	d234      	bcs.n	800a218 <_malloc_r+0x7c>
 800a1ae:	270c      	movs	r7, #12
 800a1b0:	42b9      	cmp	r1, r7
 800a1b2:	d833      	bhi.n	800a21c <_malloc_r+0x80>
 800a1b4:	0028      	movs	r0, r5
 800a1b6:	f000 f923 	bl	800a400 <__malloc_lock>
 800a1ba:	4e37      	ldr	r6, [pc, #220]	@ (800a298 <_malloc_r+0xfc>)
 800a1bc:	6833      	ldr	r3, [r6, #0]
 800a1be:	001c      	movs	r4, r3
 800a1c0:	2c00      	cmp	r4, #0
 800a1c2:	d12f      	bne.n	800a224 <_malloc_r+0x88>
 800a1c4:	0039      	movs	r1, r7
 800a1c6:	0028      	movs	r0, r5
 800a1c8:	f7ff ffc6 	bl	800a158 <sbrk_aligned>
 800a1cc:	0004      	movs	r4, r0
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	d15f      	bne.n	800a292 <_malloc_r+0xf6>
 800a1d2:	6834      	ldr	r4, [r6, #0]
 800a1d4:	9400      	str	r4, [sp, #0]
 800a1d6:	9b00      	ldr	r3, [sp, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d14a      	bne.n	800a272 <_malloc_r+0xd6>
 800a1dc:	2c00      	cmp	r4, #0
 800a1de:	d052      	beq.n	800a286 <_malloc_r+0xea>
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	0028      	movs	r0, r5
 800a1e4:	18e3      	adds	r3, r4, r3
 800a1e6:	9900      	ldr	r1, [sp, #0]
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	f000 fd6b 	bl	800acc4 <_sbrk_r>
 800a1ee:	9b01      	ldr	r3, [sp, #4]
 800a1f0:	4283      	cmp	r3, r0
 800a1f2:	d148      	bne.n	800a286 <_malloc_r+0xea>
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	0028      	movs	r0, r5
 800a1f8:	1aff      	subs	r7, r7, r3
 800a1fa:	0039      	movs	r1, r7
 800a1fc:	f7ff ffac 	bl	800a158 <sbrk_aligned>
 800a200:	3001      	adds	r0, #1
 800a202:	d040      	beq.n	800a286 <_malloc_r+0xea>
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	19db      	adds	r3, r3, r7
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	6833      	ldr	r3, [r6, #0]
 800a20c:	685a      	ldr	r2, [r3, #4]
 800a20e:	2a00      	cmp	r2, #0
 800a210:	d133      	bne.n	800a27a <_malloc_r+0xde>
 800a212:	9b00      	ldr	r3, [sp, #0]
 800a214:	6033      	str	r3, [r6, #0]
 800a216:	e019      	b.n	800a24c <_malloc_r+0xb0>
 800a218:	2b00      	cmp	r3, #0
 800a21a:	dac9      	bge.n	800a1b0 <_malloc_r+0x14>
 800a21c:	230c      	movs	r3, #12
 800a21e:	602b      	str	r3, [r5, #0]
 800a220:	2000      	movs	r0, #0
 800a222:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a224:	6821      	ldr	r1, [r4, #0]
 800a226:	1bc9      	subs	r1, r1, r7
 800a228:	d420      	bmi.n	800a26c <_malloc_r+0xd0>
 800a22a:	290b      	cmp	r1, #11
 800a22c:	d90a      	bls.n	800a244 <_malloc_r+0xa8>
 800a22e:	19e2      	adds	r2, r4, r7
 800a230:	6027      	str	r7, [r4, #0]
 800a232:	42a3      	cmp	r3, r4
 800a234:	d104      	bne.n	800a240 <_malloc_r+0xa4>
 800a236:	6032      	str	r2, [r6, #0]
 800a238:	6863      	ldr	r3, [r4, #4]
 800a23a:	6011      	str	r1, [r2, #0]
 800a23c:	6053      	str	r3, [r2, #4]
 800a23e:	e005      	b.n	800a24c <_malloc_r+0xb0>
 800a240:	605a      	str	r2, [r3, #4]
 800a242:	e7f9      	b.n	800a238 <_malloc_r+0x9c>
 800a244:	6862      	ldr	r2, [r4, #4]
 800a246:	42a3      	cmp	r3, r4
 800a248:	d10e      	bne.n	800a268 <_malloc_r+0xcc>
 800a24a:	6032      	str	r2, [r6, #0]
 800a24c:	0028      	movs	r0, r5
 800a24e:	f000 f8df 	bl	800a410 <__malloc_unlock>
 800a252:	0020      	movs	r0, r4
 800a254:	2207      	movs	r2, #7
 800a256:	300b      	adds	r0, #11
 800a258:	1d23      	adds	r3, r4, #4
 800a25a:	4390      	bics	r0, r2
 800a25c:	1ac2      	subs	r2, r0, r3
 800a25e:	4298      	cmp	r0, r3
 800a260:	d0df      	beq.n	800a222 <_malloc_r+0x86>
 800a262:	1a1b      	subs	r3, r3, r0
 800a264:	50a3      	str	r3, [r4, r2]
 800a266:	e7dc      	b.n	800a222 <_malloc_r+0x86>
 800a268:	605a      	str	r2, [r3, #4]
 800a26a:	e7ef      	b.n	800a24c <_malloc_r+0xb0>
 800a26c:	0023      	movs	r3, r4
 800a26e:	6864      	ldr	r4, [r4, #4]
 800a270:	e7a6      	b.n	800a1c0 <_malloc_r+0x24>
 800a272:	9c00      	ldr	r4, [sp, #0]
 800a274:	6863      	ldr	r3, [r4, #4]
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	e7ad      	b.n	800a1d6 <_malloc_r+0x3a>
 800a27a:	001a      	movs	r2, r3
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	42a3      	cmp	r3, r4
 800a280:	d1fb      	bne.n	800a27a <_malloc_r+0xde>
 800a282:	2300      	movs	r3, #0
 800a284:	e7da      	b.n	800a23c <_malloc_r+0xa0>
 800a286:	230c      	movs	r3, #12
 800a288:	0028      	movs	r0, r5
 800a28a:	602b      	str	r3, [r5, #0]
 800a28c:	f000 f8c0 	bl	800a410 <__malloc_unlock>
 800a290:	e7c6      	b.n	800a220 <_malloc_r+0x84>
 800a292:	6007      	str	r7, [r0, #0]
 800a294:	e7da      	b.n	800a24c <_malloc_r+0xb0>
 800a296:	46c0      	nop			@ (mov r8, r8)
 800a298:	200004f8 	.word	0x200004f8

0800a29c <__sflush_r>:
 800a29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a29e:	220c      	movs	r2, #12
 800a2a0:	5e8b      	ldrsh	r3, [r1, r2]
 800a2a2:	0005      	movs	r5, r0
 800a2a4:	000c      	movs	r4, r1
 800a2a6:	071a      	lsls	r2, r3, #28
 800a2a8:	d456      	bmi.n	800a358 <__sflush_r+0xbc>
 800a2aa:	684a      	ldr	r2, [r1, #4]
 800a2ac:	2a00      	cmp	r2, #0
 800a2ae:	dc02      	bgt.n	800a2b6 <__sflush_r+0x1a>
 800a2b0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a2b2:	2a00      	cmp	r2, #0
 800a2b4:	dd4e      	ble.n	800a354 <__sflush_r+0xb8>
 800a2b6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a2b8:	2f00      	cmp	r7, #0
 800a2ba:	d04b      	beq.n	800a354 <__sflush_r+0xb8>
 800a2bc:	2200      	movs	r2, #0
 800a2be:	2080      	movs	r0, #128	@ 0x80
 800a2c0:	682e      	ldr	r6, [r5, #0]
 800a2c2:	602a      	str	r2, [r5, #0]
 800a2c4:	001a      	movs	r2, r3
 800a2c6:	0140      	lsls	r0, r0, #5
 800a2c8:	6a21      	ldr	r1, [r4, #32]
 800a2ca:	4002      	ands	r2, r0
 800a2cc:	4203      	tst	r3, r0
 800a2ce:	d033      	beq.n	800a338 <__sflush_r+0x9c>
 800a2d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a2d2:	89a3      	ldrh	r3, [r4, #12]
 800a2d4:	075b      	lsls	r3, r3, #29
 800a2d6:	d506      	bpl.n	800a2e6 <__sflush_r+0x4a>
 800a2d8:	6863      	ldr	r3, [r4, #4]
 800a2da:	1ad2      	subs	r2, r2, r3
 800a2dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <__sflush_r+0x4a>
 800a2e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a2e4:	1ad2      	subs	r2, r2, r3
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	0028      	movs	r0, r5
 800a2ea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a2ec:	6a21      	ldr	r1, [r4, #32]
 800a2ee:	47b8      	blx	r7
 800a2f0:	89a2      	ldrh	r2, [r4, #12]
 800a2f2:	1c43      	adds	r3, r0, #1
 800a2f4:	d106      	bne.n	800a304 <__sflush_r+0x68>
 800a2f6:	6829      	ldr	r1, [r5, #0]
 800a2f8:	291d      	cmp	r1, #29
 800a2fa:	d846      	bhi.n	800a38a <__sflush_r+0xee>
 800a2fc:	4b29      	ldr	r3, [pc, #164]	@ (800a3a4 <__sflush_r+0x108>)
 800a2fe:	40cb      	lsrs	r3, r1
 800a300:	07db      	lsls	r3, r3, #31
 800a302:	d542      	bpl.n	800a38a <__sflush_r+0xee>
 800a304:	2300      	movs	r3, #0
 800a306:	6063      	str	r3, [r4, #4]
 800a308:	6923      	ldr	r3, [r4, #16]
 800a30a:	6023      	str	r3, [r4, #0]
 800a30c:	04d2      	lsls	r2, r2, #19
 800a30e:	d505      	bpl.n	800a31c <__sflush_r+0x80>
 800a310:	1c43      	adds	r3, r0, #1
 800a312:	d102      	bne.n	800a31a <__sflush_r+0x7e>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d100      	bne.n	800a31c <__sflush_r+0x80>
 800a31a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a31c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a31e:	602e      	str	r6, [r5, #0]
 800a320:	2900      	cmp	r1, #0
 800a322:	d017      	beq.n	800a354 <__sflush_r+0xb8>
 800a324:	0023      	movs	r3, r4
 800a326:	3344      	adds	r3, #68	@ 0x44
 800a328:	4299      	cmp	r1, r3
 800a32a:	d002      	beq.n	800a332 <__sflush_r+0x96>
 800a32c:	0028      	movs	r0, r5
 800a32e:	f000 fd4d 	bl	800adcc <_free_r>
 800a332:	2300      	movs	r3, #0
 800a334:	6363      	str	r3, [r4, #52]	@ 0x34
 800a336:	e00d      	b.n	800a354 <__sflush_r+0xb8>
 800a338:	2301      	movs	r3, #1
 800a33a:	0028      	movs	r0, r5
 800a33c:	47b8      	blx	r7
 800a33e:	0002      	movs	r2, r0
 800a340:	1c43      	adds	r3, r0, #1
 800a342:	d1c6      	bne.n	800a2d2 <__sflush_r+0x36>
 800a344:	682b      	ldr	r3, [r5, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d0c3      	beq.n	800a2d2 <__sflush_r+0x36>
 800a34a:	2b1d      	cmp	r3, #29
 800a34c:	d001      	beq.n	800a352 <__sflush_r+0xb6>
 800a34e:	2b16      	cmp	r3, #22
 800a350:	d11a      	bne.n	800a388 <__sflush_r+0xec>
 800a352:	602e      	str	r6, [r5, #0]
 800a354:	2000      	movs	r0, #0
 800a356:	e01e      	b.n	800a396 <__sflush_r+0xfa>
 800a358:	690e      	ldr	r6, [r1, #16]
 800a35a:	2e00      	cmp	r6, #0
 800a35c:	d0fa      	beq.n	800a354 <__sflush_r+0xb8>
 800a35e:	680f      	ldr	r7, [r1, #0]
 800a360:	600e      	str	r6, [r1, #0]
 800a362:	1bba      	subs	r2, r7, r6
 800a364:	9201      	str	r2, [sp, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	079b      	lsls	r3, r3, #30
 800a36a:	d100      	bne.n	800a36e <__sflush_r+0xd2>
 800a36c:	694a      	ldr	r2, [r1, #20]
 800a36e:	60a2      	str	r2, [r4, #8]
 800a370:	9b01      	ldr	r3, [sp, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	ddee      	ble.n	800a354 <__sflush_r+0xb8>
 800a376:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a378:	0032      	movs	r2, r6
 800a37a:	001f      	movs	r7, r3
 800a37c:	0028      	movs	r0, r5
 800a37e:	9b01      	ldr	r3, [sp, #4]
 800a380:	6a21      	ldr	r1, [r4, #32]
 800a382:	47b8      	blx	r7
 800a384:	2800      	cmp	r0, #0
 800a386:	dc07      	bgt.n	800a398 <__sflush_r+0xfc>
 800a388:	89a2      	ldrh	r2, [r4, #12]
 800a38a:	2340      	movs	r3, #64	@ 0x40
 800a38c:	2001      	movs	r0, #1
 800a38e:	4313      	orrs	r3, r2
 800a390:	b21b      	sxth	r3, r3
 800a392:	81a3      	strh	r3, [r4, #12]
 800a394:	4240      	negs	r0, r0
 800a396:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a398:	9b01      	ldr	r3, [sp, #4]
 800a39a:	1836      	adds	r6, r6, r0
 800a39c:	1a1b      	subs	r3, r3, r0
 800a39e:	9301      	str	r3, [sp, #4]
 800a3a0:	e7e6      	b.n	800a370 <__sflush_r+0xd4>
 800a3a2:	46c0      	nop			@ (mov r8, r8)
 800a3a4:	20400001 	.word	0x20400001

0800a3a8 <_fflush_r>:
 800a3a8:	690b      	ldr	r3, [r1, #16]
 800a3aa:	b570      	push	{r4, r5, r6, lr}
 800a3ac:	0005      	movs	r5, r0
 800a3ae:	000c      	movs	r4, r1
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d102      	bne.n	800a3ba <_fflush_r+0x12>
 800a3b4:	2500      	movs	r5, #0
 800a3b6:	0028      	movs	r0, r5
 800a3b8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ba:	2800      	cmp	r0, #0
 800a3bc:	d004      	beq.n	800a3c8 <_fflush_r+0x20>
 800a3be:	6a03      	ldr	r3, [r0, #32]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d101      	bne.n	800a3c8 <_fflush_r+0x20>
 800a3c4:	f7fe fe68 	bl	8009098 <__sinit>
 800a3c8:	220c      	movs	r2, #12
 800a3ca:	5ea3      	ldrsh	r3, [r4, r2]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d0f1      	beq.n	800a3b4 <_fflush_r+0xc>
 800a3d0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3d2:	07d2      	lsls	r2, r2, #31
 800a3d4:	d404      	bmi.n	800a3e0 <_fflush_r+0x38>
 800a3d6:	059b      	lsls	r3, r3, #22
 800a3d8:	d402      	bmi.n	800a3e0 <_fflush_r+0x38>
 800a3da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3dc:	f7fe fec3 	bl	8009166 <__retarget_lock_acquire_recursive>
 800a3e0:	0028      	movs	r0, r5
 800a3e2:	0021      	movs	r1, r4
 800a3e4:	f7ff ff5a 	bl	800a29c <__sflush_r>
 800a3e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3ea:	0005      	movs	r5, r0
 800a3ec:	07db      	lsls	r3, r3, #31
 800a3ee:	d4e2      	bmi.n	800a3b6 <_fflush_r+0xe>
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	059b      	lsls	r3, r3, #22
 800a3f4:	d4df      	bmi.n	800a3b6 <_fflush_r+0xe>
 800a3f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3f8:	f7fe feb6 	bl	8009168 <__retarget_lock_release_recursive>
 800a3fc:	e7db      	b.n	800a3b6 <_fflush_r+0xe>
	...

0800a400 <__malloc_lock>:
 800a400:	b510      	push	{r4, lr}
 800a402:	4802      	ldr	r0, [pc, #8]	@ (800a40c <__malloc_lock+0xc>)
 800a404:	f7fe feaf 	bl	8009166 <__retarget_lock_acquire_recursive>
 800a408:	bd10      	pop	{r4, pc}
 800a40a:	46c0      	nop			@ (mov r8, r8)
 800a40c:	200004f0 	.word	0x200004f0

0800a410 <__malloc_unlock>:
 800a410:	b510      	push	{r4, lr}
 800a412:	4802      	ldr	r0, [pc, #8]	@ (800a41c <__malloc_unlock+0xc>)
 800a414:	f7fe fea8 	bl	8009168 <__retarget_lock_release_recursive>
 800a418:	bd10      	pop	{r4, pc}
 800a41a:	46c0      	nop			@ (mov r8, r8)
 800a41c:	200004f0 	.word	0x200004f0

0800a420 <_Balloc>:
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	69c5      	ldr	r5, [r0, #28]
 800a424:	0006      	movs	r6, r0
 800a426:	000c      	movs	r4, r1
 800a428:	2d00      	cmp	r5, #0
 800a42a:	d10e      	bne.n	800a44a <_Balloc+0x2a>
 800a42c:	2010      	movs	r0, #16
 800a42e:	f7ff fe89 	bl	800a144 <malloc>
 800a432:	1e02      	subs	r2, r0, #0
 800a434:	61f0      	str	r0, [r6, #28]
 800a436:	d104      	bne.n	800a442 <_Balloc+0x22>
 800a438:	216b      	movs	r1, #107	@ 0x6b
 800a43a:	4b19      	ldr	r3, [pc, #100]	@ (800a4a0 <_Balloc+0x80>)
 800a43c:	4819      	ldr	r0, [pc, #100]	@ (800a4a4 <_Balloc+0x84>)
 800a43e:	f000 fc79 	bl	800ad34 <__assert_func>
 800a442:	6045      	str	r5, [r0, #4]
 800a444:	6085      	str	r5, [r0, #8]
 800a446:	6005      	str	r5, [r0, #0]
 800a448:	60c5      	str	r5, [r0, #12]
 800a44a:	69f5      	ldr	r5, [r6, #28]
 800a44c:	68eb      	ldr	r3, [r5, #12]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d013      	beq.n	800a47a <_Balloc+0x5a>
 800a452:	69f3      	ldr	r3, [r6, #28]
 800a454:	00a2      	lsls	r2, r4, #2
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	189b      	adds	r3, r3, r2
 800a45a:	6818      	ldr	r0, [r3, #0]
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d118      	bne.n	800a492 <_Balloc+0x72>
 800a460:	2101      	movs	r1, #1
 800a462:	000d      	movs	r5, r1
 800a464:	40a5      	lsls	r5, r4
 800a466:	1d6a      	adds	r2, r5, #5
 800a468:	0030      	movs	r0, r6
 800a46a:	0092      	lsls	r2, r2, #2
 800a46c:	f000 fc80 	bl	800ad70 <_calloc_r>
 800a470:	2800      	cmp	r0, #0
 800a472:	d00c      	beq.n	800a48e <_Balloc+0x6e>
 800a474:	6044      	str	r4, [r0, #4]
 800a476:	6085      	str	r5, [r0, #8]
 800a478:	e00d      	b.n	800a496 <_Balloc+0x76>
 800a47a:	2221      	movs	r2, #33	@ 0x21
 800a47c:	2104      	movs	r1, #4
 800a47e:	0030      	movs	r0, r6
 800a480:	f000 fc76 	bl	800ad70 <_calloc_r>
 800a484:	69f3      	ldr	r3, [r6, #28]
 800a486:	60e8      	str	r0, [r5, #12]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1e1      	bne.n	800a452 <_Balloc+0x32>
 800a48e:	2000      	movs	r0, #0
 800a490:	bd70      	pop	{r4, r5, r6, pc}
 800a492:	6802      	ldr	r2, [r0, #0]
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	2300      	movs	r3, #0
 800a498:	6103      	str	r3, [r0, #16]
 800a49a:	60c3      	str	r3, [r0, #12]
 800a49c:	e7f8      	b.n	800a490 <_Balloc+0x70>
 800a49e:	46c0      	nop			@ (mov r8, r8)
 800a4a0:	0800b859 	.word	0x0800b859
 800a4a4:	0800b8ea 	.word	0x0800b8ea

0800a4a8 <_Bfree>:
 800a4a8:	b570      	push	{r4, r5, r6, lr}
 800a4aa:	69c6      	ldr	r6, [r0, #28]
 800a4ac:	0005      	movs	r5, r0
 800a4ae:	000c      	movs	r4, r1
 800a4b0:	2e00      	cmp	r6, #0
 800a4b2:	d10e      	bne.n	800a4d2 <_Bfree+0x2a>
 800a4b4:	2010      	movs	r0, #16
 800a4b6:	f7ff fe45 	bl	800a144 <malloc>
 800a4ba:	1e02      	subs	r2, r0, #0
 800a4bc:	61e8      	str	r0, [r5, #28]
 800a4be:	d104      	bne.n	800a4ca <_Bfree+0x22>
 800a4c0:	218f      	movs	r1, #143	@ 0x8f
 800a4c2:	4b09      	ldr	r3, [pc, #36]	@ (800a4e8 <_Bfree+0x40>)
 800a4c4:	4809      	ldr	r0, [pc, #36]	@ (800a4ec <_Bfree+0x44>)
 800a4c6:	f000 fc35 	bl	800ad34 <__assert_func>
 800a4ca:	6046      	str	r6, [r0, #4]
 800a4cc:	6086      	str	r6, [r0, #8]
 800a4ce:	6006      	str	r6, [r0, #0]
 800a4d0:	60c6      	str	r6, [r0, #12]
 800a4d2:	2c00      	cmp	r4, #0
 800a4d4:	d007      	beq.n	800a4e6 <_Bfree+0x3e>
 800a4d6:	69eb      	ldr	r3, [r5, #28]
 800a4d8:	6862      	ldr	r2, [r4, #4]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	0092      	lsls	r2, r2, #2
 800a4de:	189b      	adds	r3, r3, r2
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	6022      	str	r2, [r4, #0]
 800a4e4:	601c      	str	r4, [r3, #0]
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}
 800a4e8:	0800b859 	.word	0x0800b859
 800a4ec:	0800b8ea 	.word	0x0800b8ea

0800a4f0 <__multadd>:
 800a4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4f2:	000f      	movs	r7, r1
 800a4f4:	9001      	str	r0, [sp, #4]
 800a4f6:	000c      	movs	r4, r1
 800a4f8:	001e      	movs	r6, r3
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	690d      	ldr	r5, [r1, #16]
 800a4fe:	3714      	adds	r7, #20
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	3001      	adds	r0, #1
 800a504:	b299      	uxth	r1, r3
 800a506:	4351      	muls	r1, r2
 800a508:	0c1b      	lsrs	r3, r3, #16
 800a50a:	4353      	muls	r3, r2
 800a50c:	1989      	adds	r1, r1, r6
 800a50e:	0c0e      	lsrs	r6, r1, #16
 800a510:	199b      	adds	r3, r3, r6
 800a512:	0c1e      	lsrs	r6, r3, #16
 800a514:	b289      	uxth	r1, r1
 800a516:	041b      	lsls	r3, r3, #16
 800a518:	185b      	adds	r3, r3, r1
 800a51a:	c708      	stmia	r7!, {r3}
 800a51c:	4285      	cmp	r5, r0
 800a51e:	dcef      	bgt.n	800a500 <__multadd+0x10>
 800a520:	2e00      	cmp	r6, #0
 800a522:	d022      	beq.n	800a56a <__multadd+0x7a>
 800a524:	68a3      	ldr	r3, [r4, #8]
 800a526:	42ab      	cmp	r3, r5
 800a528:	dc19      	bgt.n	800a55e <__multadd+0x6e>
 800a52a:	6861      	ldr	r1, [r4, #4]
 800a52c:	9801      	ldr	r0, [sp, #4]
 800a52e:	3101      	adds	r1, #1
 800a530:	f7ff ff76 	bl	800a420 <_Balloc>
 800a534:	1e07      	subs	r7, r0, #0
 800a536:	d105      	bne.n	800a544 <__multadd+0x54>
 800a538:	003a      	movs	r2, r7
 800a53a:	21ba      	movs	r1, #186	@ 0xba
 800a53c:	4b0c      	ldr	r3, [pc, #48]	@ (800a570 <__multadd+0x80>)
 800a53e:	480d      	ldr	r0, [pc, #52]	@ (800a574 <__multadd+0x84>)
 800a540:	f000 fbf8 	bl	800ad34 <__assert_func>
 800a544:	0021      	movs	r1, r4
 800a546:	6922      	ldr	r2, [r4, #16]
 800a548:	310c      	adds	r1, #12
 800a54a:	3202      	adds	r2, #2
 800a54c:	0092      	lsls	r2, r2, #2
 800a54e:	300c      	adds	r0, #12
 800a550:	f7fe fe1b 	bl	800918a <memcpy>
 800a554:	0021      	movs	r1, r4
 800a556:	9801      	ldr	r0, [sp, #4]
 800a558:	f7ff ffa6 	bl	800a4a8 <_Bfree>
 800a55c:	003c      	movs	r4, r7
 800a55e:	1d2b      	adds	r3, r5, #4
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	18e3      	adds	r3, r4, r3
 800a564:	3501      	adds	r5, #1
 800a566:	605e      	str	r6, [r3, #4]
 800a568:	6125      	str	r5, [r4, #16]
 800a56a:	0020      	movs	r0, r4
 800a56c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a56e:	46c0      	nop			@ (mov r8, r8)
 800a570:	0800b8c8 	.word	0x0800b8c8
 800a574:	0800b8ea 	.word	0x0800b8ea

0800a578 <__hi0bits>:
 800a578:	2280      	movs	r2, #128	@ 0x80
 800a57a:	0003      	movs	r3, r0
 800a57c:	0252      	lsls	r2, r2, #9
 800a57e:	2000      	movs	r0, #0
 800a580:	4293      	cmp	r3, r2
 800a582:	d201      	bcs.n	800a588 <__hi0bits+0x10>
 800a584:	041b      	lsls	r3, r3, #16
 800a586:	3010      	adds	r0, #16
 800a588:	2280      	movs	r2, #128	@ 0x80
 800a58a:	0452      	lsls	r2, r2, #17
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d201      	bcs.n	800a594 <__hi0bits+0x1c>
 800a590:	3008      	adds	r0, #8
 800a592:	021b      	lsls	r3, r3, #8
 800a594:	2280      	movs	r2, #128	@ 0x80
 800a596:	0552      	lsls	r2, r2, #21
 800a598:	4293      	cmp	r3, r2
 800a59a:	d201      	bcs.n	800a5a0 <__hi0bits+0x28>
 800a59c:	3004      	adds	r0, #4
 800a59e:	011b      	lsls	r3, r3, #4
 800a5a0:	2280      	movs	r2, #128	@ 0x80
 800a5a2:	05d2      	lsls	r2, r2, #23
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d201      	bcs.n	800a5ac <__hi0bits+0x34>
 800a5a8:	3002      	adds	r0, #2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	db03      	blt.n	800a5b8 <__hi0bits+0x40>
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	4213      	tst	r3, r2
 800a5b4:	d100      	bne.n	800a5b8 <__hi0bits+0x40>
 800a5b6:	2020      	movs	r0, #32
 800a5b8:	4770      	bx	lr

0800a5ba <__lo0bits>:
 800a5ba:	6803      	ldr	r3, [r0, #0]
 800a5bc:	0001      	movs	r1, r0
 800a5be:	2207      	movs	r2, #7
 800a5c0:	0018      	movs	r0, r3
 800a5c2:	4010      	ands	r0, r2
 800a5c4:	4213      	tst	r3, r2
 800a5c6:	d00d      	beq.n	800a5e4 <__lo0bits+0x2a>
 800a5c8:	3a06      	subs	r2, #6
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	4213      	tst	r3, r2
 800a5ce:	d105      	bne.n	800a5dc <__lo0bits+0x22>
 800a5d0:	3002      	adds	r0, #2
 800a5d2:	4203      	tst	r3, r0
 800a5d4:	d003      	beq.n	800a5de <__lo0bits+0x24>
 800a5d6:	40d3      	lsrs	r3, r2
 800a5d8:	0010      	movs	r0, r2
 800a5da:	600b      	str	r3, [r1, #0]
 800a5dc:	4770      	bx	lr
 800a5de:	089b      	lsrs	r3, r3, #2
 800a5e0:	600b      	str	r3, [r1, #0]
 800a5e2:	e7fb      	b.n	800a5dc <__lo0bits+0x22>
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	2a00      	cmp	r2, #0
 800a5e8:	d101      	bne.n	800a5ee <__lo0bits+0x34>
 800a5ea:	2010      	movs	r0, #16
 800a5ec:	0c1b      	lsrs	r3, r3, #16
 800a5ee:	b2da      	uxtb	r2, r3
 800a5f0:	2a00      	cmp	r2, #0
 800a5f2:	d101      	bne.n	800a5f8 <__lo0bits+0x3e>
 800a5f4:	3008      	adds	r0, #8
 800a5f6:	0a1b      	lsrs	r3, r3, #8
 800a5f8:	071a      	lsls	r2, r3, #28
 800a5fa:	d101      	bne.n	800a600 <__lo0bits+0x46>
 800a5fc:	3004      	adds	r0, #4
 800a5fe:	091b      	lsrs	r3, r3, #4
 800a600:	079a      	lsls	r2, r3, #30
 800a602:	d101      	bne.n	800a608 <__lo0bits+0x4e>
 800a604:	3002      	adds	r0, #2
 800a606:	089b      	lsrs	r3, r3, #2
 800a608:	07da      	lsls	r2, r3, #31
 800a60a:	d4e9      	bmi.n	800a5e0 <__lo0bits+0x26>
 800a60c:	3001      	adds	r0, #1
 800a60e:	085b      	lsrs	r3, r3, #1
 800a610:	d1e6      	bne.n	800a5e0 <__lo0bits+0x26>
 800a612:	2020      	movs	r0, #32
 800a614:	e7e2      	b.n	800a5dc <__lo0bits+0x22>
	...

0800a618 <__i2b>:
 800a618:	b510      	push	{r4, lr}
 800a61a:	000c      	movs	r4, r1
 800a61c:	2101      	movs	r1, #1
 800a61e:	f7ff feff 	bl	800a420 <_Balloc>
 800a622:	2800      	cmp	r0, #0
 800a624:	d107      	bne.n	800a636 <__i2b+0x1e>
 800a626:	2146      	movs	r1, #70	@ 0x46
 800a628:	4c05      	ldr	r4, [pc, #20]	@ (800a640 <__i2b+0x28>)
 800a62a:	0002      	movs	r2, r0
 800a62c:	4b05      	ldr	r3, [pc, #20]	@ (800a644 <__i2b+0x2c>)
 800a62e:	0020      	movs	r0, r4
 800a630:	31ff      	adds	r1, #255	@ 0xff
 800a632:	f000 fb7f 	bl	800ad34 <__assert_func>
 800a636:	2301      	movs	r3, #1
 800a638:	6144      	str	r4, [r0, #20]
 800a63a:	6103      	str	r3, [r0, #16]
 800a63c:	bd10      	pop	{r4, pc}
 800a63e:	46c0      	nop			@ (mov r8, r8)
 800a640:	0800b8ea 	.word	0x0800b8ea
 800a644:	0800b8c8 	.word	0x0800b8c8

0800a648 <__multiply>:
 800a648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a64a:	0014      	movs	r4, r2
 800a64c:	690a      	ldr	r2, [r1, #16]
 800a64e:	6923      	ldr	r3, [r4, #16]
 800a650:	000d      	movs	r5, r1
 800a652:	b089      	sub	sp, #36	@ 0x24
 800a654:	429a      	cmp	r2, r3
 800a656:	db02      	blt.n	800a65e <__multiply+0x16>
 800a658:	0023      	movs	r3, r4
 800a65a:	000c      	movs	r4, r1
 800a65c:	001d      	movs	r5, r3
 800a65e:	6927      	ldr	r7, [r4, #16]
 800a660:	692e      	ldr	r6, [r5, #16]
 800a662:	6861      	ldr	r1, [r4, #4]
 800a664:	19bb      	adds	r3, r7, r6
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	68a3      	ldr	r3, [r4, #8]
 800a66a:	19ba      	adds	r2, r7, r6
 800a66c:	4293      	cmp	r3, r2
 800a66e:	da00      	bge.n	800a672 <__multiply+0x2a>
 800a670:	3101      	adds	r1, #1
 800a672:	f7ff fed5 	bl	800a420 <_Balloc>
 800a676:	4684      	mov	ip, r0
 800a678:	2800      	cmp	r0, #0
 800a67a:	d106      	bne.n	800a68a <__multiply+0x42>
 800a67c:	21b1      	movs	r1, #177	@ 0xb1
 800a67e:	4662      	mov	r2, ip
 800a680:	4b44      	ldr	r3, [pc, #272]	@ (800a794 <__multiply+0x14c>)
 800a682:	4845      	ldr	r0, [pc, #276]	@ (800a798 <__multiply+0x150>)
 800a684:	0049      	lsls	r1, r1, #1
 800a686:	f000 fb55 	bl	800ad34 <__assert_func>
 800a68a:	0002      	movs	r2, r0
 800a68c:	19bb      	adds	r3, r7, r6
 800a68e:	3214      	adds	r2, #20
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	18d3      	adds	r3, r2, r3
 800a694:	9301      	str	r3, [sp, #4]
 800a696:	2100      	movs	r1, #0
 800a698:	0013      	movs	r3, r2
 800a69a:	9801      	ldr	r0, [sp, #4]
 800a69c:	4283      	cmp	r3, r0
 800a69e:	d328      	bcc.n	800a6f2 <__multiply+0xaa>
 800a6a0:	0023      	movs	r3, r4
 800a6a2:	00bf      	lsls	r7, r7, #2
 800a6a4:	3314      	adds	r3, #20
 800a6a6:	9304      	str	r3, [sp, #16]
 800a6a8:	3514      	adds	r5, #20
 800a6aa:	19db      	adds	r3, r3, r7
 800a6ac:	00b6      	lsls	r6, r6, #2
 800a6ae:	9302      	str	r3, [sp, #8]
 800a6b0:	19ab      	adds	r3, r5, r6
 800a6b2:	9307      	str	r3, [sp, #28]
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	9305      	str	r3, [sp, #20]
 800a6b8:	0023      	movs	r3, r4
 800a6ba:	9902      	ldr	r1, [sp, #8]
 800a6bc:	3315      	adds	r3, #21
 800a6be:	4299      	cmp	r1, r3
 800a6c0:	d305      	bcc.n	800a6ce <__multiply+0x86>
 800a6c2:	1b0c      	subs	r4, r1, r4
 800a6c4:	3c15      	subs	r4, #21
 800a6c6:	08a4      	lsrs	r4, r4, #2
 800a6c8:	3401      	adds	r4, #1
 800a6ca:	00a3      	lsls	r3, r4, #2
 800a6cc:	9305      	str	r3, [sp, #20]
 800a6ce:	9b07      	ldr	r3, [sp, #28]
 800a6d0:	429d      	cmp	r5, r3
 800a6d2:	d310      	bcc.n	800a6f6 <__multiply+0xae>
 800a6d4:	9b00      	ldr	r3, [sp, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	dd05      	ble.n	800a6e6 <__multiply+0x9e>
 800a6da:	9b01      	ldr	r3, [sp, #4]
 800a6dc:	3b04      	subs	r3, #4
 800a6de:	9301      	str	r3, [sp, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d052      	beq.n	800a78c <__multiply+0x144>
 800a6e6:	4663      	mov	r3, ip
 800a6e8:	4660      	mov	r0, ip
 800a6ea:	9a00      	ldr	r2, [sp, #0]
 800a6ec:	611a      	str	r2, [r3, #16]
 800a6ee:	b009      	add	sp, #36	@ 0x24
 800a6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6f2:	c302      	stmia	r3!, {r1}
 800a6f4:	e7d1      	b.n	800a69a <__multiply+0x52>
 800a6f6:	682c      	ldr	r4, [r5, #0]
 800a6f8:	b2a4      	uxth	r4, r4
 800a6fa:	2c00      	cmp	r4, #0
 800a6fc:	d01f      	beq.n	800a73e <__multiply+0xf6>
 800a6fe:	2300      	movs	r3, #0
 800a700:	0017      	movs	r7, r2
 800a702:	9e04      	ldr	r6, [sp, #16]
 800a704:	9303      	str	r3, [sp, #12]
 800a706:	ce08      	ldmia	r6!, {r3}
 800a708:	6839      	ldr	r1, [r7, #0]
 800a70a:	9306      	str	r3, [sp, #24]
 800a70c:	466b      	mov	r3, sp
 800a70e:	8b1b      	ldrh	r3, [r3, #24]
 800a710:	b288      	uxth	r0, r1
 800a712:	4363      	muls	r3, r4
 800a714:	181b      	adds	r3, r3, r0
 800a716:	9803      	ldr	r0, [sp, #12]
 800a718:	0c09      	lsrs	r1, r1, #16
 800a71a:	181b      	adds	r3, r3, r0
 800a71c:	9806      	ldr	r0, [sp, #24]
 800a71e:	0c00      	lsrs	r0, r0, #16
 800a720:	4360      	muls	r0, r4
 800a722:	1840      	adds	r0, r0, r1
 800a724:	0c19      	lsrs	r1, r3, #16
 800a726:	1841      	adds	r1, r0, r1
 800a728:	0c08      	lsrs	r0, r1, #16
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	0409      	lsls	r1, r1, #16
 800a72e:	4319      	orrs	r1, r3
 800a730:	9b02      	ldr	r3, [sp, #8]
 800a732:	9003      	str	r0, [sp, #12]
 800a734:	c702      	stmia	r7!, {r1}
 800a736:	42b3      	cmp	r3, r6
 800a738:	d8e5      	bhi.n	800a706 <__multiply+0xbe>
 800a73a:	9b05      	ldr	r3, [sp, #20]
 800a73c:	50d0      	str	r0, [r2, r3]
 800a73e:	682c      	ldr	r4, [r5, #0]
 800a740:	0c24      	lsrs	r4, r4, #16
 800a742:	d020      	beq.n	800a786 <__multiply+0x13e>
 800a744:	2100      	movs	r1, #0
 800a746:	0010      	movs	r0, r2
 800a748:	6813      	ldr	r3, [r2, #0]
 800a74a:	9e04      	ldr	r6, [sp, #16]
 800a74c:	9103      	str	r1, [sp, #12]
 800a74e:	6831      	ldr	r1, [r6, #0]
 800a750:	6807      	ldr	r7, [r0, #0]
 800a752:	b289      	uxth	r1, r1
 800a754:	4361      	muls	r1, r4
 800a756:	0c3f      	lsrs	r7, r7, #16
 800a758:	19c9      	adds	r1, r1, r7
 800a75a:	9f03      	ldr	r7, [sp, #12]
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	19c9      	adds	r1, r1, r7
 800a760:	040f      	lsls	r7, r1, #16
 800a762:	431f      	orrs	r7, r3
 800a764:	6007      	str	r7, [r0, #0]
 800a766:	ce80      	ldmia	r6!, {r7}
 800a768:	6843      	ldr	r3, [r0, #4]
 800a76a:	0c3f      	lsrs	r7, r7, #16
 800a76c:	4367      	muls	r7, r4
 800a76e:	b29b      	uxth	r3, r3
 800a770:	0c09      	lsrs	r1, r1, #16
 800a772:	18fb      	adds	r3, r7, r3
 800a774:	185b      	adds	r3, r3, r1
 800a776:	0c19      	lsrs	r1, r3, #16
 800a778:	9103      	str	r1, [sp, #12]
 800a77a:	9902      	ldr	r1, [sp, #8]
 800a77c:	3004      	adds	r0, #4
 800a77e:	42b1      	cmp	r1, r6
 800a780:	d8e5      	bhi.n	800a74e <__multiply+0x106>
 800a782:	9905      	ldr	r1, [sp, #20]
 800a784:	5053      	str	r3, [r2, r1]
 800a786:	3504      	adds	r5, #4
 800a788:	3204      	adds	r2, #4
 800a78a:	e7a0      	b.n	800a6ce <__multiply+0x86>
 800a78c:	9b00      	ldr	r3, [sp, #0]
 800a78e:	3b01      	subs	r3, #1
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	e79f      	b.n	800a6d4 <__multiply+0x8c>
 800a794:	0800b8c8 	.word	0x0800b8c8
 800a798:	0800b8ea 	.word	0x0800b8ea

0800a79c <__pow5mult>:
 800a79c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a79e:	2303      	movs	r3, #3
 800a7a0:	0015      	movs	r5, r2
 800a7a2:	0007      	movs	r7, r0
 800a7a4:	000e      	movs	r6, r1
 800a7a6:	401a      	ands	r2, r3
 800a7a8:	421d      	tst	r5, r3
 800a7aa:	d008      	beq.n	800a7be <__pow5mult+0x22>
 800a7ac:	4925      	ldr	r1, [pc, #148]	@ (800a844 <__pow5mult+0xa8>)
 800a7ae:	3a01      	subs	r2, #1
 800a7b0:	0092      	lsls	r2, r2, #2
 800a7b2:	5852      	ldr	r2, [r2, r1]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	0031      	movs	r1, r6
 800a7b8:	f7ff fe9a 	bl	800a4f0 <__multadd>
 800a7bc:	0006      	movs	r6, r0
 800a7be:	10ad      	asrs	r5, r5, #2
 800a7c0:	d03d      	beq.n	800a83e <__pow5mult+0xa2>
 800a7c2:	69fc      	ldr	r4, [r7, #28]
 800a7c4:	2c00      	cmp	r4, #0
 800a7c6:	d10f      	bne.n	800a7e8 <__pow5mult+0x4c>
 800a7c8:	2010      	movs	r0, #16
 800a7ca:	f7ff fcbb 	bl	800a144 <malloc>
 800a7ce:	1e02      	subs	r2, r0, #0
 800a7d0:	61f8      	str	r0, [r7, #28]
 800a7d2:	d105      	bne.n	800a7e0 <__pow5mult+0x44>
 800a7d4:	21b4      	movs	r1, #180	@ 0xb4
 800a7d6:	4b1c      	ldr	r3, [pc, #112]	@ (800a848 <__pow5mult+0xac>)
 800a7d8:	481c      	ldr	r0, [pc, #112]	@ (800a84c <__pow5mult+0xb0>)
 800a7da:	31ff      	adds	r1, #255	@ 0xff
 800a7dc:	f000 faaa 	bl	800ad34 <__assert_func>
 800a7e0:	6044      	str	r4, [r0, #4]
 800a7e2:	6084      	str	r4, [r0, #8]
 800a7e4:	6004      	str	r4, [r0, #0]
 800a7e6:	60c4      	str	r4, [r0, #12]
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	689c      	ldr	r4, [r3, #8]
 800a7ec:	9301      	str	r3, [sp, #4]
 800a7ee:	2c00      	cmp	r4, #0
 800a7f0:	d108      	bne.n	800a804 <__pow5mult+0x68>
 800a7f2:	0038      	movs	r0, r7
 800a7f4:	4916      	ldr	r1, [pc, #88]	@ (800a850 <__pow5mult+0xb4>)
 800a7f6:	f7ff ff0f 	bl	800a618 <__i2b>
 800a7fa:	9b01      	ldr	r3, [sp, #4]
 800a7fc:	0004      	movs	r4, r0
 800a7fe:	6098      	str	r0, [r3, #8]
 800a800:	2300      	movs	r3, #0
 800a802:	6003      	str	r3, [r0, #0]
 800a804:	2301      	movs	r3, #1
 800a806:	421d      	tst	r5, r3
 800a808:	d00a      	beq.n	800a820 <__pow5mult+0x84>
 800a80a:	0031      	movs	r1, r6
 800a80c:	0022      	movs	r2, r4
 800a80e:	0038      	movs	r0, r7
 800a810:	f7ff ff1a 	bl	800a648 <__multiply>
 800a814:	0031      	movs	r1, r6
 800a816:	9001      	str	r0, [sp, #4]
 800a818:	0038      	movs	r0, r7
 800a81a:	f7ff fe45 	bl	800a4a8 <_Bfree>
 800a81e:	9e01      	ldr	r6, [sp, #4]
 800a820:	106d      	asrs	r5, r5, #1
 800a822:	d00c      	beq.n	800a83e <__pow5mult+0xa2>
 800a824:	6820      	ldr	r0, [r4, #0]
 800a826:	2800      	cmp	r0, #0
 800a828:	d107      	bne.n	800a83a <__pow5mult+0x9e>
 800a82a:	0022      	movs	r2, r4
 800a82c:	0021      	movs	r1, r4
 800a82e:	0038      	movs	r0, r7
 800a830:	f7ff ff0a 	bl	800a648 <__multiply>
 800a834:	2300      	movs	r3, #0
 800a836:	6020      	str	r0, [r4, #0]
 800a838:	6003      	str	r3, [r0, #0]
 800a83a:	0004      	movs	r4, r0
 800a83c:	e7e2      	b.n	800a804 <__pow5mult+0x68>
 800a83e:	0030      	movs	r0, r6
 800a840:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a842:	46c0      	nop			@ (mov r8, r8)
 800a844:	0800b98c 	.word	0x0800b98c
 800a848:	0800b859 	.word	0x0800b859
 800a84c:	0800b8ea 	.word	0x0800b8ea
 800a850:	00000271 	.word	0x00000271

0800a854 <__lshift>:
 800a854:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a856:	000c      	movs	r4, r1
 800a858:	0016      	movs	r6, r2
 800a85a:	6923      	ldr	r3, [r4, #16]
 800a85c:	1157      	asrs	r7, r2, #5
 800a85e:	b085      	sub	sp, #20
 800a860:	18fb      	adds	r3, r7, r3
 800a862:	9301      	str	r3, [sp, #4]
 800a864:	3301      	adds	r3, #1
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	6849      	ldr	r1, [r1, #4]
 800a86a:	68a3      	ldr	r3, [r4, #8]
 800a86c:	9002      	str	r0, [sp, #8]
 800a86e:	9a00      	ldr	r2, [sp, #0]
 800a870:	4293      	cmp	r3, r2
 800a872:	db10      	blt.n	800a896 <__lshift+0x42>
 800a874:	9802      	ldr	r0, [sp, #8]
 800a876:	f7ff fdd3 	bl	800a420 <_Balloc>
 800a87a:	2300      	movs	r3, #0
 800a87c:	0001      	movs	r1, r0
 800a87e:	0005      	movs	r5, r0
 800a880:	001a      	movs	r2, r3
 800a882:	3114      	adds	r1, #20
 800a884:	4298      	cmp	r0, r3
 800a886:	d10c      	bne.n	800a8a2 <__lshift+0x4e>
 800a888:	21ef      	movs	r1, #239	@ 0xef
 800a88a:	002a      	movs	r2, r5
 800a88c:	4b25      	ldr	r3, [pc, #148]	@ (800a924 <__lshift+0xd0>)
 800a88e:	4826      	ldr	r0, [pc, #152]	@ (800a928 <__lshift+0xd4>)
 800a890:	0049      	lsls	r1, r1, #1
 800a892:	f000 fa4f 	bl	800ad34 <__assert_func>
 800a896:	3101      	adds	r1, #1
 800a898:	005b      	lsls	r3, r3, #1
 800a89a:	e7e8      	b.n	800a86e <__lshift+0x1a>
 800a89c:	0098      	lsls	r0, r3, #2
 800a89e:	500a      	str	r2, [r1, r0]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	42bb      	cmp	r3, r7
 800a8a4:	dbfa      	blt.n	800a89c <__lshift+0x48>
 800a8a6:	43fb      	mvns	r3, r7
 800a8a8:	17db      	asrs	r3, r3, #31
 800a8aa:	401f      	ands	r7, r3
 800a8ac:	00bf      	lsls	r7, r7, #2
 800a8ae:	0023      	movs	r3, r4
 800a8b0:	201f      	movs	r0, #31
 800a8b2:	19c9      	adds	r1, r1, r7
 800a8b4:	0037      	movs	r7, r6
 800a8b6:	6922      	ldr	r2, [r4, #16]
 800a8b8:	3314      	adds	r3, #20
 800a8ba:	0092      	lsls	r2, r2, #2
 800a8bc:	189a      	adds	r2, r3, r2
 800a8be:	4007      	ands	r7, r0
 800a8c0:	4206      	tst	r6, r0
 800a8c2:	d029      	beq.n	800a918 <__lshift+0xc4>
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	1bc0      	subs	r0, r0, r7
 800a8c8:	9003      	str	r0, [sp, #12]
 800a8ca:	468c      	mov	ip, r1
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	681e      	ldr	r6, [r3, #0]
 800a8d0:	40be      	lsls	r6, r7
 800a8d2:	4306      	orrs	r6, r0
 800a8d4:	4660      	mov	r0, ip
 800a8d6:	c040      	stmia	r0!, {r6}
 800a8d8:	4684      	mov	ip, r0
 800a8da:	9e03      	ldr	r6, [sp, #12]
 800a8dc:	cb01      	ldmia	r3!, {r0}
 800a8de:	40f0      	lsrs	r0, r6
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d8f4      	bhi.n	800a8ce <__lshift+0x7a>
 800a8e4:	0026      	movs	r6, r4
 800a8e6:	3615      	adds	r6, #21
 800a8e8:	2304      	movs	r3, #4
 800a8ea:	42b2      	cmp	r2, r6
 800a8ec:	d304      	bcc.n	800a8f8 <__lshift+0xa4>
 800a8ee:	1b13      	subs	r3, r2, r4
 800a8f0:	3b15      	subs	r3, #21
 800a8f2:	089b      	lsrs	r3, r3, #2
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	50c8      	str	r0, [r1, r3]
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d002      	beq.n	800a904 <__lshift+0xb0>
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	3302      	adds	r3, #2
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	9b00      	ldr	r3, [sp, #0]
 800a906:	9802      	ldr	r0, [sp, #8]
 800a908:	3b01      	subs	r3, #1
 800a90a:	0021      	movs	r1, r4
 800a90c:	612b      	str	r3, [r5, #16]
 800a90e:	f7ff fdcb 	bl	800a4a8 <_Bfree>
 800a912:	0028      	movs	r0, r5
 800a914:	b005      	add	sp, #20
 800a916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a918:	cb01      	ldmia	r3!, {r0}
 800a91a:	c101      	stmia	r1!, {r0}
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d8fb      	bhi.n	800a918 <__lshift+0xc4>
 800a920:	e7f0      	b.n	800a904 <__lshift+0xb0>
 800a922:	46c0      	nop			@ (mov r8, r8)
 800a924:	0800b8c8 	.word	0x0800b8c8
 800a928:	0800b8ea 	.word	0x0800b8ea

0800a92c <__mcmp>:
 800a92c:	b530      	push	{r4, r5, lr}
 800a92e:	690b      	ldr	r3, [r1, #16]
 800a930:	6904      	ldr	r4, [r0, #16]
 800a932:	0002      	movs	r2, r0
 800a934:	1ae0      	subs	r0, r4, r3
 800a936:	429c      	cmp	r4, r3
 800a938:	d10f      	bne.n	800a95a <__mcmp+0x2e>
 800a93a:	3214      	adds	r2, #20
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	3114      	adds	r1, #20
 800a940:	0014      	movs	r4, r2
 800a942:	18c9      	adds	r1, r1, r3
 800a944:	18d2      	adds	r2, r2, r3
 800a946:	3a04      	subs	r2, #4
 800a948:	3904      	subs	r1, #4
 800a94a:	6815      	ldr	r5, [r2, #0]
 800a94c:	680b      	ldr	r3, [r1, #0]
 800a94e:	429d      	cmp	r5, r3
 800a950:	d004      	beq.n	800a95c <__mcmp+0x30>
 800a952:	2001      	movs	r0, #1
 800a954:	429d      	cmp	r5, r3
 800a956:	d200      	bcs.n	800a95a <__mcmp+0x2e>
 800a958:	3802      	subs	r0, #2
 800a95a:	bd30      	pop	{r4, r5, pc}
 800a95c:	4294      	cmp	r4, r2
 800a95e:	d3f2      	bcc.n	800a946 <__mcmp+0x1a>
 800a960:	e7fb      	b.n	800a95a <__mcmp+0x2e>
	...

0800a964 <__mdiff>:
 800a964:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a966:	000c      	movs	r4, r1
 800a968:	b087      	sub	sp, #28
 800a96a:	9000      	str	r0, [sp, #0]
 800a96c:	0011      	movs	r1, r2
 800a96e:	0020      	movs	r0, r4
 800a970:	0017      	movs	r7, r2
 800a972:	f7ff ffdb 	bl	800a92c <__mcmp>
 800a976:	1e05      	subs	r5, r0, #0
 800a978:	d110      	bne.n	800a99c <__mdiff+0x38>
 800a97a:	0001      	movs	r1, r0
 800a97c:	9800      	ldr	r0, [sp, #0]
 800a97e:	f7ff fd4f 	bl	800a420 <_Balloc>
 800a982:	1e02      	subs	r2, r0, #0
 800a984:	d104      	bne.n	800a990 <__mdiff+0x2c>
 800a986:	4b40      	ldr	r3, [pc, #256]	@ (800aa88 <__mdiff+0x124>)
 800a988:	4840      	ldr	r0, [pc, #256]	@ (800aa8c <__mdiff+0x128>)
 800a98a:	4941      	ldr	r1, [pc, #260]	@ (800aa90 <__mdiff+0x12c>)
 800a98c:	f000 f9d2 	bl	800ad34 <__assert_func>
 800a990:	2301      	movs	r3, #1
 800a992:	6145      	str	r5, [r0, #20]
 800a994:	6103      	str	r3, [r0, #16]
 800a996:	0010      	movs	r0, r2
 800a998:	b007      	add	sp, #28
 800a99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a99c:	2600      	movs	r6, #0
 800a99e:	42b0      	cmp	r0, r6
 800a9a0:	da03      	bge.n	800a9aa <__mdiff+0x46>
 800a9a2:	0023      	movs	r3, r4
 800a9a4:	003c      	movs	r4, r7
 800a9a6:	001f      	movs	r7, r3
 800a9a8:	3601      	adds	r6, #1
 800a9aa:	6861      	ldr	r1, [r4, #4]
 800a9ac:	9800      	ldr	r0, [sp, #0]
 800a9ae:	f7ff fd37 	bl	800a420 <_Balloc>
 800a9b2:	1e02      	subs	r2, r0, #0
 800a9b4:	d103      	bne.n	800a9be <__mdiff+0x5a>
 800a9b6:	4b34      	ldr	r3, [pc, #208]	@ (800aa88 <__mdiff+0x124>)
 800a9b8:	4834      	ldr	r0, [pc, #208]	@ (800aa8c <__mdiff+0x128>)
 800a9ba:	4936      	ldr	r1, [pc, #216]	@ (800aa94 <__mdiff+0x130>)
 800a9bc:	e7e6      	b.n	800a98c <__mdiff+0x28>
 800a9be:	6923      	ldr	r3, [r4, #16]
 800a9c0:	3414      	adds	r4, #20
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	18e3      	adds	r3, r4, r3
 800a9c8:	0021      	movs	r1, r4
 800a9ca:	9401      	str	r4, [sp, #4]
 800a9cc:	003c      	movs	r4, r7
 800a9ce:	9302      	str	r3, [sp, #8]
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	3414      	adds	r4, #20
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	18e3      	adds	r3, r4, r3
 800a9d8:	9303      	str	r3, [sp, #12]
 800a9da:	0003      	movs	r3, r0
 800a9dc:	60c6      	str	r6, [r0, #12]
 800a9de:	468c      	mov	ip, r1
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	3314      	adds	r3, #20
 800a9e4:	9304      	str	r3, [sp, #16]
 800a9e6:	9305      	str	r3, [sp, #20]
 800a9e8:	4663      	mov	r3, ip
 800a9ea:	cb20      	ldmia	r3!, {r5}
 800a9ec:	b2a9      	uxth	r1, r5
 800a9ee:	000e      	movs	r6, r1
 800a9f0:	469c      	mov	ip, r3
 800a9f2:	cc08      	ldmia	r4!, {r3}
 800a9f4:	0c2d      	lsrs	r5, r5, #16
 800a9f6:	b299      	uxth	r1, r3
 800a9f8:	1a71      	subs	r1, r6, r1
 800a9fa:	1809      	adds	r1, r1, r0
 800a9fc:	0c1b      	lsrs	r3, r3, #16
 800a9fe:	1408      	asrs	r0, r1, #16
 800aa00:	1aeb      	subs	r3, r5, r3
 800aa02:	181b      	adds	r3, r3, r0
 800aa04:	1418      	asrs	r0, r3, #16
 800aa06:	b289      	uxth	r1, r1
 800aa08:	041b      	lsls	r3, r3, #16
 800aa0a:	4319      	orrs	r1, r3
 800aa0c:	9b05      	ldr	r3, [sp, #20]
 800aa0e:	c302      	stmia	r3!, {r1}
 800aa10:	9305      	str	r3, [sp, #20]
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	42a3      	cmp	r3, r4
 800aa16:	d8e7      	bhi.n	800a9e8 <__mdiff+0x84>
 800aa18:	0039      	movs	r1, r7
 800aa1a:	9c03      	ldr	r4, [sp, #12]
 800aa1c:	3115      	adds	r1, #21
 800aa1e:	2304      	movs	r3, #4
 800aa20:	428c      	cmp	r4, r1
 800aa22:	d304      	bcc.n	800aa2e <__mdiff+0xca>
 800aa24:	1be3      	subs	r3, r4, r7
 800aa26:	3b15      	subs	r3, #21
 800aa28:	089b      	lsrs	r3, r3, #2
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	9901      	ldr	r1, [sp, #4]
 800aa30:	18cd      	adds	r5, r1, r3
 800aa32:	9904      	ldr	r1, [sp, #16]
 800aa34:	002e      	movs	r6, r5
 800aa36:	18cb      	adds	r3, r1, r3
 800aa38:	001f      	movs	r7, r3
 800aa3a:	9902      	ldr	r1, [sp, #8]
 800aa3c:	428e      	cmp	r6, r1
 800aa3e:	d311      	bcc.n	800aa64 <__mdiff+0x100>
 800aa40:	9c02      	ldr	r4, [sp, #8]
 800aa42:	1ee9      	subs	r1, r5, #3
 800aa44:	2000      	movs	r0, #0
 800aa46:	428c      	cmp	r4, r1
 800aa48:	d304      	bcc.n	800aa54 <__mdiff+0xf0>
 800aa4a:	0021      	movs	r1, r4
 800aa4c:	3103      	adds	r1, #3
 800aa4e:	1b49      	subs	r1, r1, r5
 800aa50:	0889      	lsrs	r1, r1, #2
 800aa52:	0088      	lsls	r0, r1, #2
 800aa54:	181b      	adds	r3, r3, r0
 800aa56:	3b04      	subs	r3, #4
 800aa58:	6819      	ldr	r1, [r3, #0]
 800aa5a:	2900      	cmp	r1, #0
 800aa5c:	d010      	beq.n	800aa80 <__mdiff+0x11c>
 800aa5e:	9b00      	ldr	r3, [sp, #0]
 800aa60:	6113      	str	r3, [r2, #16]
 800aa62:	e798      	b.n	800a996 <__mdiff+0x32>
 800aa64:	4684      	mov	ip, r0
 800aa66:	ce02      	ldmia	r6!, {r1}
 800aa68:	b288      	uxth	r0, r1
 800aa6a:	4460      	add	r0, ip
 800aa6c:	1400      	asrs	r0, r0, #16
 800aa6e:	0c0c      	lsrs	r4, r1, #16
 800aa70:	1904      	adds	r4, r0, r4
 800aa72:	4461      	add	r1, ip
 800aa74:	1420      	asrs	r0, r4, #16
 800aa76:	b289      	uxth	r1, r1
 800aa78:	0424      	lsls	r4, r4, #16
 800aa7a:	4321      	orrs	r1, r4
 800aa7c:	c702      	stmia	r7!, {r1}
 800aa7e:	e7dc      	b.n	800aa3a <__mdiff+0xd6>
 800aa80:	9900      	ldr	r1, [sp, #0]
 800aa82:	3901      	subs	r1, #1
 800aa84:	9100      	str	r1, [sp, #0]
 800aa86:	e7e6      	b.n	800aa56 <__mdiff+0xf2>
 800aa88:	0800b8c8 	.word	0x0800b8c8
 800aa8c:	0800b8ea 	.word	0x0800b8ea
 800aa90:	00000237 	.word	0x00000237
 800aa94:	00000245 	.word	0x00000245

0800aa98 <__d2b>:
 800aa98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa9a:	2101      	movs	r1, #1
 800aa9c:	0016      	movs	r6, r2
 800aa9e:	001f      	movs	r7, r3
 800aaa0:	f7ff fcbe 	bl	800a420 <_Balloc>
 800aaa4:	1e04      	subs	r4, r0, #0
 800aaa6:	d105      	bne.n	800aab4 <__d2b+0x1c>
 800aaa8:	0022      	movs	r2, r4
 800aaaa:	4b25      	ldr	r3, [pc, #148]	@ (800ab40 <__d2b+0xa8>)
 800aaac:	4825      	ldr	r0, [pc, #148]	@ (800ab44 <__d2b+0xac>)
 800aaae:	4926      	ldr	r1, [pc, #152]	@ (800ab48 <__d2b+0xb0>)
 800aab0:	f000 f940 	bl	800ad34 <__assert_func>
 800aab4:	033b      	lsls	r3, r7, #12
 800aab6:	007d      	lsls	r5, r7, #1
 800aab8:	0b1b      	lsrs	r3, r3, #12
 800aaba:	0d6d      	lsrs	r5, r5, #21
 800aabc:	d002      	beq.n	800aac4 <__d2b+0x2c>
 800aabe:	2280      	movs	r2, #128	@ 0x80
 800aac0:	0352      	lsls	r2, r2, #13
 800aac2:	4313      	orrs	r3, r2
 800aac4:	9301      	str	r3, [sp, #4]
 800aac6:	2e00      	cmp	r6, #0
 800aac8:	d025      	beq.n	800ab16 <__d2b+0x7e>
 800aaca:	4668      	mov	r0, sp
 800aacc:	9600      	str	r6, [sp, #0]
 800aace:	f7ff fd74 	bl	800a5ba <__lo0bits>
 800aad2:	9b01      	ldr	r3, [sp, #4]
 800aad4:	9900      	ldr	r1, [sp, #0]
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d01b      	beq.n	800ab12 <__d2b+0x7a>
 800aada:	2220      	movs	r2, #32
 800aadc:	001e      	movs	r6, r3
 800aade:	1a12      	subs	r2, r2, r0
 800aae0:	4096      	lsls	r6, r2
 800aae2:	0032      	movs	r2, r6
 800aae4:	40c3      	lsrs	r3, r0
 800aae6:	430a      	orrs	r2, r1
 800aae8:	6162      	str	r2, [r4, #20]
 800aaea:	9301      	str	r3, [sp, #4]
 800aaec:	9e01      	ldr	r6, [sp, #4]
 800aaee:	61a6      	str	r6, [r4, #24]
 800aaf0:	1e73      	subs	r3, r6, #1
 800aaf2:	419e      	sbcs	r6, r3
 800aaf4:	3601      	adds	r6, #1
 800aaf6:	6126      	str	r6, [r4, #16]
 800aaf8:	2d00      	cmp	r5, #0
 800aafa:	d014      	beq.n	800ab26 <__d2b+0x8e>
 800aafc:	2635      	movs	r6, #53	@ 0x35
 800aafe:	4b13      	ldr	r3, [pc, #76]	@ (800ab4c <__d2b+0xb4>)
 800ab00:	18ed      	adds	r5, r5, r3
 800ab02:	9b08      	ldr	r3, [sp, #32]
 800ab04:	182d      	adds	r5, r5, r0
 800ab06:	601d      	str	r5, [r3, #0]
 800ab08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab0a:	1a36      	subs	r6, r6, r0
 800ab0c:	601e      	str	r6, [r3, #0]
 800ab0e:	0020      	movs	r0, r4
 800ab10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ab12:	6161      	str	r1, [r4, #20]
 800ab14:	e7ea      	b.n	800aaec <__d2b+0x54>
 800ab16:	a801      	add	r0, sp, #4
 800ab18:	f7ff fd4f 	bl	800a5ba <__lo0bits>
 800ab1c:	9b01      	ldr	r3, [sp, #4]
 800ab1e:	2601      	movs	r6, #1
 800ab20:	6163      	str	r3, [r4, #20]
 800ab22:	3020      	adds	r0, #32
 800ab24:	e7e7      	b.n	800aaf6 <__d2b+0x5e>
 800ab26:	4b0a      	ldr	r3, [pc, #40]	@ (800ab50 <__d2b+0xb8>)
 800ab28:	18c0      	adds	r0, r0, r3
 800ab2a:	9b08      	ldr	r3, [sp, #32]
 800ab2c:	6018      	str	r0, [r3, #0]
 800ab2e:	4b09      	ldr	r3, [pc, #36]	@ (800ab54 <__d2b+0xbc>)
 800ab30:	18f3      	adds	r3, r6, r3
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	18e3      	adds	r3, r4, r3
 800ab36:	6958      	ldr	r0, [r3, #20]
 800ab38:	f7ff fd1e 	bl	800a578 <__hi0bits>
 800ab3c:	0176      	lsls	r6, r6, #5
 800ab3e:	e7e3      	b.n	800ab08 <__d2b+0x70>
 800ab40:	0800b8c8 	.word	0x0800b8c8
 800ab44:	0800b8ea 	.word	0x0800b8ea
 800ab48:	0000030f 	.word	0x0000030f
 800ab4c:	fffffbcd 	.word	0xfffffbcd
 800ab50:	fffffbce 	.word	0xfffffbce
 800ab54:	3fffffff 	.word	0x3fffffff

0800ab58 <__sread>:
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	000c      	movs	r4, r1
 800ab5c:	250e      	movs	r5, #14
 800ab5e:	5f49      	ldrsh	r1, [r1, r5]
 800ab60:	f000 f89c 	bl	800ac9c <_read_r>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	db03      	blt.n	800ab70 <__sread+0x18>
 800ab68:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ab6a:	181b      	adds	r3, r3, r0
 800ab6c:	6563      	str	r3, [r4, #84]	@ 0x54
 800ab6e:	bd70      	pop	{r4, r5, r6, pc}
 800ab70:	89a3      	ldrh	r3, [r4, #12]
 800ab72:	4a02      	ldr	r2, [pc, #8]	@ (800ab7c <__sread+0x24>)
 800ab74:	4013      	ands	r3, r2
 800ab76:	81a3      	strh	r3, [r4, #12]
 800ab78:	e7f9      	b.n	800ab6e <__sread+0x16>
 800ab7a:	46c0      	nop			@ (mov r8, r8)
 800ab7c:	ffffefff 	.word	0xffffefff

0800ab80 <__swrite>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	001f      	movs	r7, r3
 800ab84:	898b      	ldrh	r3, [r1, #12]
 800ab86:	0005      	movs	r5, r0
 800ab88:	000c      	movs	r4, r1
 800ab8a:	0016      	movs	r6, r2
 800ab8c:	05db      	lsls	r3, r3, #23
 800ab8e:	d505      	bpl.n	800ab9c <__swrite+0x1c>
 800ab90:	230e      	movs	r3, #14
 800ab92:	5ec9      	ldrsh	r1, [r1, r3]
 800ab94:	2200      	movs	r2, #0
 800ab96:	2302      	movs	r3, #2
 800ab98:	f000 f86c 	bl	800ac74 <_lseek_r>
 800ab9c:	89a3      	ldrh	r3, [r4, #12]
 800ab9e:	4a05      	ldr	r2, [pc, #20]	@ (800abb4 <__swrite+0x34>)
 800aba0:	0028      	movs	r0, r5
 800aba2:	4013      	ands	r3, r2
 800aba4:	81a3      	strh	r3, [r4, #12]
 800aba6:	0032      	movs	r2, r6
 800aba8:	230e      	movs	r3, #14
 800abaa:	5ee1      	ldrsh	r1, [r4, r3]
 800abac:	003b      	movs	r3, r7
 800abae:	f000 f89b 	bl	800ace8 <_write_r>
 800abb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abb4:	ffffefff 	.word	0xffffefff

0800abb8 <__sseek>:
 800abb8:	b570      	push	{r4, r5, r6, lr}
 800abba:	000c      	movs	r4, r1
 800abbc:	250e      	movs	r5, #14
 800abbe:	5f49      	ldrsh	r1, [r1, r5]
 800abc0:	f000 f858 	bl	800ac74 <_lseek_r>
 800abc4:	89a3      	ldrh	r3, [r4, #12]
 800abc6:	1c42      	adds	r2, r0, #1
 800abc8:	d103      	bne.n	800abd2 <__sseek+0x1a>
 800abca:	4a05      	ldr	r2, [pc, #20]	@ (800abe0 <__sseek+0x28>)
 800abcc:	4013      	ands	r3, r2
 800abce:	81a3      	strh	r3, [r4, #12]
 800abd0:	bd70      	pop	{r4, r5, r6, pc}
 800abd2:	2280      	movs	r2, #128	@ 0x80
 800abd4:	0152      	lsls	r2, r2, #5
 800abd6:	4313      	orrs	r3, r2
 800abd8:	81a3      	strh	r3, [r4, #12]
 800abda:	6560      	str	r0, [r4, #84]	@ 0x54
 800abdc:	e7f8      	b.n	800abd0 <__sseek+0x18>
 800abde:	46c0      	nop			@ (mov r8, r8)
 800abe0:	ffffefff 	.word	0xffffefff

0800abe4 <__sclose>:
 800abe4:	b510      	push	{r4, lr}
 800abe6:	230e      	movs	r3, #14
 800abe8:	5ec9      	ldrsh	r1, [r1, r3]
 800abea:	f000 f891 	bl	800ad10 <_close_r>
 800abee:	bd10      	pop	{r4, pc}

0800abf0 <_realloc_r>:
 800abf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abf2:	0006      	movs	r6, r0
 800abf4:	000c      	movs	r4, r1
 800abf6:	0015      	movs	r5, r2
 800abf8:	2900      	cmp	r1, #0
 800abfa:	d105      	bne.n	800ac08 <_realloc_r+0x18>
 800abfc:	0011      	movs	r1, r2
 800abfe:	f7ff facd 	bl	800a19c <_malloc_r>
 800ac02:	0004      	movs	r4, r0
 800ac04:	0020      	movs	r0, r4
 800ac06:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac08:	2a00      	cmp	r2, #0
 800ac0a:	d103      	bne.n	800ac14 <_realloc_r+0x24>
 800ac0c:	f000 f8de 	bl	800adcc <_free_r>
 800ac10:	002c      	movs	r4, r5
 800ac12:	e7f7      	b.n	800ac04 <_realloc_r+0x14>
 800ac14:	f000 f936 	bl	800ae84 <_malloc_usable_size_r>
 800ac18:	0007      	movs	r7, r0
 800ac1a:	4285      	cmp	r5, r0
 800ac1c:	d802      	bhi.n	800ac24 <_realloc_r+0x34>
 800ac1e:	0843      	lsrs	r3, r0, #1
 800ac20:	42ab      	cmp	r3, r5
 800ac22:	d3ef      	bcc.n	800ac04 <_realloc_r+0x14>
 800ac24:	0029      	movs	r1, r5
 800ac26:	0030      	movs	r0, r6
 800ac28:	f7ff fab8 	bl	800a19c <_malloc_r>
 800ac2c:	9001      	str	r0, [sp, #4]
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d101      	bne.n	800ac36 <_realloc_r+0x46>
 800ac32:	9c01      	ldr	r4, [sp, #4]
 800ac34:	e7e6      	b.n	800ac04 <_realloc_r+0x14>
 800ac36:	002a      	movs	r2, r5
 800ac38:	42bd      	cmp	r5, r7
 800ac3a:	d900      	bls.n	800ac3e <_realloc_r+0x4e>
 800ac3c:	003a      	movs	r2, r7
 800ac3e:	0021      	movs	r1, r4
 800ac40:	9801      	ldr	r0, [sp, #4]
 800ac42:	f7fe faa2 	bl	800918a <memcpy>
 800ac46:	0021      	movs	r1, r4
 800ac48:	0030      	movs	r0, r6
 800ac4a:	f000 f8bf 	bl	800adcc <_free_r>
 800ac4e:	e7f0      	b.n	800ac32 <_realloc_r+0x42>

0800ac50 <memmove>:
 800ac50:	b510      	push	{r4, lr}
 800ac52:	4288      	cmp	r0, r1
 800ac54:	d902      	bls.n	800ac5c <memmove+0xc>
 800ac56:	188b      	adds	r3, r1, r2
 800ac58:	4298      	cmp	r0, r3
 800ac5a:	d308      	bcc.n	800ac6e <memmove+0x1e>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d007      	beq.n	800ac72 <memmove+0x22>
 800ac62:	5ccc      	ldrb	r4, [r1, r3]
 800ac64:	54c4      	strb	r4, [r0, r3]
 800ac66:	3301      	adds	r3, #1
 800ac68:	e7f9      	b.n	800ac5e <memmove+0xe>
 800ac6a:	5c8b      	ldrb	r3, [r1, r2]
 800ac6c:	5483      	strb	r3, [r0, r2]
 800ac6e:	3a01      	subs	r2, #1
 800ac70:	d2fb      	bcs.n	800ac6a <memmove+0x1a>
 800ac72:	bd10      	pop	{r4, pc}

0800ac74 <_lseek_r>:
 800ac74:	b570      	push	{r4, r5, r6, lr}
 800ac76:	0004      	movs	r4, r0
 800ac78:	0008      	movs	r0, r1
 800ac7a:	0011      	movs	r1, r2
 800ac7c:	001a      	movs	r2, r3
 800ac7e:	2300      	movs	r3, #0
 800ac80:	4d05      	ldr	r5, [pc, #20]	@ (800ac98 <_lseek_r+0x24>)
 800ac82:	602b      	str	r3, [r5, #0]
 800ac84:	f7fa fb96 	bl	80053b4 <_lseek>
 800ac88:	1c43      	adds	r3, r0, #1
 800ac8a:	d103      	bne.n	800ac94 <_lseek_r+0x20>
 800ac8c:	682b      	ldr	r3, [r5, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d000      	beq.n	800ac94 <_lseek_r+0x20>
 800ac92:	6023      	str	r3, [r4, #0]
 800ac94:	bd70      	pop	{r4, r5, r6, pc}
 800ac96:	46c0      	nop			@ (mov r8, r8)
 800ac98:	200004fc 	.word	0x200004fc

0800ac9c <_read_r>:
 800ac9c:	b570      	push	{r4, r5, r6, lr}
 800ac9e:	0004      	movs	r4, r0
 800aca0:	0008      	movs	r0, r1
 800aca2:	0011      	movs	r1, r2
 800aca4:	001a      	movs	r2, r3
 800aca6:	2300      	movs	r3, #0
 800aca8:	4d05      	ldr	r5, [pc, #20]	@ (800acc0 <_read_r+0x24>)
 800acaa:	602b      	str	r3, [r5, #0]
 800acac:	f7fa fb28 	bl	8005300 <_read>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d103      	bne.n	800acbc <_read_r+0x20>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d000      	beq.n	800acbc <_read_r+0x20>
 800acba:	6023      	str	r3, [r4, #0]
 800acbc:	bd70      	pop	{r4, r5, r6, pc}
 800acbe:	46c0      	nop			@ (mov r8, r8)
 800acc0:	200004fc 	.word	0x200004fc

0800acc4 <_sbrk_r>:
 800acc4:	2300      	movs	r3, #0
 800acc6:	b570      	push	{r4, r5, r6, lr}
 800acc8:	4d06      	ldr	r5, [pc, #24]	@ (800ace4 <_sbrk_r+0x20>)
 800acca:	0004      	movs	r4, r0
 800accc:	0008      	movs	r0, r1
 800acce:	602b      	str	r3, [r5, #0]
 800acd0:	f7fa fb7c 	bl	80053cc <_sbrk>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d103      	bne.n	800ace0 <_sbrk_r+0x1c>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d000      	beq.n	800ace0 <_sbrk_r+0x1c>
 800acde:	6023      	str	r3, [r4, #0]
 800ace0:	bd70      	pop	{r4, r5, r6, pc}
 800ace2:	46c0      	nop			@ (mov r8, r8)
 800ace4:	200004fc 	.word	0x200004fc

0800ace8 <_write_r>:
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	0004      	movs	r4, r0
 800acec:	0008      	movs	r0, r1
 800acee:	0011      	movs	r1, r2
 800acf0:	001a      	movs	r2, r3
 800acf2:	2300      	movs	r3, #0
 800acf4:	4d05      	ldr	r5, [pc, #20]	@ (800ad0c <_write_r+0x24>)
 800acf6:	602b      	str	r3, [r5, #0]
 800acf8:	f7fa fb1f 	bl	800533a <_write>
 800acfc:	1c43      	adds	r3, r0, #1
 800acfe:	d103      	bne.n	800ad08 <_write_r+0x20>
 800ad00:	682b      	ldr	r3, [r5, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d000      	beq.n	800ad08 <_write_r+0x20>
 800ad06:	6023      	str	r3, [r4, #0]
 800ad08:	bd70      	pop	{r4, r5, r6, pc}
 800ad0a:	46c0      	nop			@ (mov r8, r8)
 800ad0c:	200004fc 	.word	0x200004fc

0800ad10 <_close_r>:
 800ad10:	2300      	movs	r3, #0
 800ad12:	b570      	push	{r4, r5, r6, lr}
 800ad14:	4d06      	ldr	r5, [pc, #24]	@ (800ad30 <_close_r+0x20>)
 800ad16:	0004      	movs	r4, r0
 800ad18:	0008      	movs	r0, r1
 800ad1a:	602b      	str	r3, [r5, #0]
 800ad1c:	f7fa fb29 	bl	8005372 <_close>
 800ad20:	1c43      	adds	r3, r0, #1
 800ad22:	d103      	bne.n	800ad2c <_close_r+0x1c>
 800ad24:	682b      	ldr	r3, [r5, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d000      	beq.n	800ad2c <_close_r+0x1c>
 800ad2a:	6023      	str	r3, [r4, #0]
 800ad2c:	bd70      	pop	{r4, r5, r6, pc}
 800ad2e:	46c0      	nop			@ (mov r8, r8)
 800ad30:	200004fc 	.word	0x200004fc

0800ad34 <__assert_func>:
 800ad34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ad36:	0014      	movs	r4, r2
 800ad38:	001a      	movs	r2, r3
 800ad3a:	4b09      	ldr	r3, [pc, #36]	@ (800ad60 <__assert_func+0x2c>)
 800ad3c:	0005      	movs	r5, r0
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	000e      	movs	r6, r1
 800ad42:	68d8      	ldr	r0, [r3, #12]
 800ad44:	4b07      	ldr	r3, [pc, #28]	@ (800ad64 <__assert_func+0x30>)
 800ad46:	2c00      	cmp	r4, #0
 800ad48:	d101      	bne.n	800ad4e <__assert_func+0x1a>
 800ad4a:	4b07      	ldr	r3, [pc, #28]	@ (800ad68 <__assert_func+0x34>)
 800ad4c:	001c      	movs	r4, r3
 800ad4e:	4907      	ldr	r1, [pc, #28]	@ (800ad6c <__assert_func+0x38>)
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	9402      	str	r4, [sp, #8]
 800ad54:	002b      	movs	r3, r5
 800ad56:	9600      	str	r6, [sp, #0]
 800ad58:	f000 f89c 	bl	800ae94 <fiprintf>
 800ad5c:	f000 f8b7 	bl	800aece <abort>
 800ad60:	20000018 	.word	0x20000018
 800ad64:	0800b94d 	.word	0x0800b94d
 800ad68:	0800b988 	.word	0x0800b988
 800ad6c:	0800b95a 	.word	0x0800b95a

0800ad70 <_calloc_r>:
 800ad70:	b570      	push	{r4, r5, r6, lr}
 800ad72:	0c0b      	lsrs	r3, r1, #16
 800ad74:	0c15      	lsrs	r5, r2, #16
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d11e      	bne.n	800adb8 <_calloc_r+0x48>
 800ad7a:	2d00      	cmp	r5, #0
 800ad7c:	d10c      	bne.n	800ad98 <_calloc_r+0x28>
 800ad7e:	b289      	uxth	r1, r1
 800ad80:	b294      	uxth	r4, r2
 800ad82:	434c      	muls	r4, r1
 800ad84:	0021      	movs	r1, r4
 800ad86:	f7ff fa09 	bl	800a19c <_malloc_r>
 800ad8a:	1e05      	subs	r5, r0, #0
 800ad8c:	d01b      	beq.n	800adc6 <_calloc_r+0x56>
 800ad8e:	0022      	movs	r2, r4
 800ad90:	2100      	movs	r1, #0
 800ad92:	f7fe f9b5 	bl	8009100 <memset>
 800ad96:	e016      	b.n	800adc6 <_calloc_r+0x56>
 800ad98:	1c2b      	adds	r3, r5, #0
 800ad9a:	1c0c      	adds	r4, r1, #0
 800ad9c:	b289      	uxth	r1, r1
 800ad9e:	b292      	uxth	r2, r2
 800ada0:	434a      	muls	r2, r1
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	b2a1      	uxth	r1, r4
 800ada6:	4359      	muls	r1, r3
 800ada8:	0c14      	lsrs	r4, r2, #16
 800adaa:	190c      	adds	r4, r1, r4
 800adac:	0c23      	lsrs	r3, r4, #16
 800adae:	d107      	bne.n	800adc0 <_calloc_r+0x50>
 800adb0:	0424      	lsls	r4, r4, #16
 800adb2:	b292      	uxth	r2, r2
 800adb4:	4314      	orrs	r4, r2
 800adb6:	e7e5      	b.n	800ad84 <_calloc_r+0x14>
 800adb8:	2d00      	cmp	r5, #0
 800adba:	d101      	bne.n	800adc0 <_calloc_r+0x50>
 800adbc:	1c14      	adds	r4, r2, #0
 800adbe:	e7ed      	b.n	800ad9c <_calloc_r+0x2c>
 800adc0:	230c      	movs	r3, #12
 800adc2:	2500      	movs	r5, #0
 800adc4:	6003      	str	r3, [r0, #0]
 800adc6:	0028      	movs	r0, r5
 800adc8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800adcc <_free_r>:
 800adcc:	b570      	push	{r4, r5, r6, lr}
 800adce:	0005      	movs	r5, r0
 800add0:	1e0c      	subs	r4, r1, #0
 800add2:	d010      	beq.n	800adf6 <_free_r+0x2a>
 800add4:	3c04      	subs	r4, #4
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	da00      	bge.n	800adde <_free_r+0x12>
 800addc:	18e4      	adds	r4, r4, r3
 800adde:	0028      	movs	r0, r5
 800ade0:	f7ff fb0e 	bl	800a400 <__malloc_lock>
 800ade4:	4a1d      	ldr	r2, [pc, #116]	@ (800ae5c <_free_r+0x90>)
 800ade6:	6813      	ldr	r3, [r2, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d105      	bne.n	800adf8 <_free_r+0x2c>
 800adec:	6063      	str	r3, [r4, #4]
 800adee:	6014      	str	r4, [r2, #0]
 800adf0:	0028      	movs	r0, r5
 800adf2:	f7ff fb0d 	bl	800a410 <__malloc_unlock>
 800adf6:	bd70      	pop	{r4, r5, r6, pc}
 800adf8:	42a3      	cmp	r3, r4
 800adfa:	d908      	bls.n	800ae0e <_free_r+0x42>
 800adfc:	6820      	ldr	r0, [r4, #0]
 800adfe:	1821      	adds	r1, r4, r0
 800ae00:	428b      	cmp	r3, r1
 800ae02:	d1f3      	bne.n	800adec <_free_r+0x20>
 800ae04:	6819      	ldr	r1, [r3, #0]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	1809      	adds	r1, r1, r0
 800ae0a:	6021      	str	r1, [r4, #0]
 800ae0c:	e7ee      	b.n	800adec <_free_r+0x20>
 800ae0e:	001a      	movs	r2, r3
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <_free_r+0x4e>
 800ae16:	42a3      	cmp	r3, r4
 800ae18:	d9f9      	bls.n	800ae0e <_free_r+0x42>
 800ae1a:	6811      	ldr	r1, [r2, #0]
 800ae1c:	1850      	adds	r0, r2, r1
 800ae1e:	42a0      	cmp	r0, r4
 800ae20:	d10b      	bne.n	800ae3a <_free_r+0x6e>
 800ae22:	6820      	ldr	r0, [r4, #0]
 800ae24:	1809      	adds	r1, r1, r0
 800ae26:	1850      	adds	r0, r2, r1
 800ae28:	6011      	str	r1, [r2, #0]
 800ae2a:	4283      	cmp	r3, r0
 800ae2c:	d1e0      	bne.n	800adf0 <_free_r+0x24>
 800ae2e:	6818      	ldr	r0, [r3, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	1841      	adds	r1, r0, r1
 800ae34:	6011      	str	r1, [r2, #0]
 800ae36:	6053      	str	r3, [r2, #4]
 800ae38:	e7da      	b.n	800adf0 <_free_r+0x24>
 800ae3a:	42a0      	cmp	r0, r4
 800ae3c:	d902      	bls.n	800ae44 <_free_r+0x78>
 800ae3e:	230c      	movs	r3, #12
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	e7d5      	b.n	800adf0 <_free_r+0x24>
 800ae44:	6820      	ldr	r0, [r4, #0]
 800ae46:	1821      	adds	r1, r4, r0
 800ae48:	428b      	cmp	r3, r1
 800ae4a:	d103      	bne.n	800ae54 <_free_r+0x88>
 800ae4c:	6819      	ldr	r1, [r3, #0]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	1809      	adds	r1, r1, r0
 800ae52:	6021      	str	r1, [r4, #0]
 800ae54:	6063      	str	r3, [r4, #4]
 800ae56:	6054      	str	r4, [r2, #4]
 800ae58:	e7ca      	b.n	800adf0 <_free_r+0x24>
 800ae5a:	46c0      	nop			@ (mov r8, r8)
 800ae5c:	200004f8 	.word	0x200004f8

0800ae60 <__ascii_mbtowc>:
 800ae60:	b082      	sub	sp, #8
 800ae62:	2900      	cmp	r1, #0
 800ae64:	d100      	bne.n	800ae68 <__ascii_mbtowc+0x8>
 800ae66:	a901      	add	r1, sp, #4
 800ae68:	1e10      	subs	r0, r2, #0
 800ae6a:	d006      	beq.n	800ae7a <__ascii_mbtowc+0x1a>
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d006      	beq.n	800ae7e <__ascii_mbtowc+0x1e>
 800ae70:	7813      	ldrb	r3, [r2, #0]
 800ae72:	600b      	str	r3, [r1, #0]
 800ae74:	7810      	ldrb	r0, [r2, #0]
 800ae76:	1e43      	subs	r3, r0, #1
 800ae78:	4198      	sbcs	r0, r3
 800ae7a:	b002      	add	sp, #8
 800ae7c:	4770      	bx	lr
 800ae7e:	2002      	movs	r0, #2
 800ae80:	4240      	negs	r0, r0
 800ae82:	e7fa      	b.n	800ae7a <__ascii_mbtowc+0x1a>

0800ae84 <_malloc_usable_size_r>:
 800ae84:	1f0b      	subs	r3, r1, #4
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	1f18      	subs	r0, r3, #4
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	da01      	bge.n	800ae92 <_malloc_usable_size_r+0xe>
 800ae8e:	580b      	ldr	r3, [r1, r0]
 800ae90:	18c0      	adds	r0, r0, r3
 800ae92:	4770      	bx	lr

0800ae94 <fiprintf>:
 800ae94:	b40e      	push	{r1, r2, r3}
 800ae96:	b517      	push	{r0, r1, r2, r4, lr}
 800ae98:	4c05      	ldr	r4, [pc, #20]	@ (800aeb0 <fiprintf+0x1c>)
 800ae9a:	ab05      	add	r3, sp, #20
 800ae9c:	cb04      	ldmia	r3!, {r2}
 800ae9e:	0001      	movs	r1, r0
 800aea0:	6820      	ldr	r0, [r4, #0]
 800aea2:	9301      	str	r3, [sp, #4]
 800aea4:	f000 f842 	bl	800af2c <_vfiprintf_r>
 800aea8:	bc1e      	pop	{r1, r2, r3, r4}
 800aeaa:	bc08      	pop	{r3}
 800aeac:	b003      	add	sp, #12
 800aeae:	4718      	bx	r3
 800aeb0:	20000018 	.word	0x20000018

0800aeb4 <__ascii_wctomb>:
 800aeb4:	0003      	movs	r3, r0
 800aeb6:	1e08      	subs	r0, r1, #0
 800aeb8:	d005      	beq.n	800aec6 <__ascii_wctomb+0x12>
 800aeba:	2aff      	cmp	r2, #255	@ 0xff
 800aebc:	d904      	bls.n	800aec8 <__ascii_wctomb+0x14>
 800aebe:	228a      	movs	r2, #138	@ 0x8a
 800aec0:	2001      	movs	r0, #1
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	4240      	negs	r0, r0
 800aec6:	4770      	bx	lr
 800aec8:	2001      	movs	r0, #1
 800aeca:	700a      	strb	r2, [r1, #0]
 800aecc:	e7fb      	b.n	800aec6 <__ascii_wctomb+0x12>

0800aece <abort>:
 800aece:	2006      	movs	r0, #6
 800aed0:	b510      	push	{r4, lr}
 800aed2:	f000 fa7b 	bl	800b3cc <raise>
 800aed6:	2001      	movs	r0, #1
 800aed8:	f7fa fa05 	bl	80052e6 <_exit>

0800aedc <__sfputc_r>:
 800aedc:	6893      	ldr	r3, [r2, #8]
 800aede:	b510      	push	{r4, lr}
 800aee0:	3b01      	subs	r3, #1
 800aee2:	6093      	str	r3, [r2, #8]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	da04      	bge.n	800aef2 <__sfputc_r+0x16>
 800aee8:	6994      	ldr	r4, [r2, #24]
 800aeea:	42a3      	cmp	r3, r4
 800aeec:	db07      	blt.n	800aefe <__sfputc_r+0x22>
 800aeee:	290a      	cmp	r1, #10
 800aef0:	d005      	beq.n	800aefe <__sfputc_r+0x22>
 800aef2:	6813      	ldr	r3, [r2, #0]
 800aef4:	1c58      	adds	r0, r3, #1
 800aef6:	6010      	str	r0, [r2, #0]
 800aef8:	7019      	strb	r1, [r3, #0]
 800aefa:	0008      	movs	r0, r1
 800aefc:	bd10      	pop	{r4, pc}
 800aefe:	f000 f931 	bl	800b164 <__swbuf_r>
 800af02:	0001      	movs	r1, r0
 800af04:	e7f9      	b.n	800aefa <__sfputc_r+0x1e>

0800af06 <__sfputs_r>:
 800af06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af08:	0006      	movs	r6, r0
 800af0a:	000f      	movs	r7, r1
 800af0c:	0014      	movs	r4, r2
 800af0e:	18d5      	adds	r5, r2, r3
 800af10:	42ac      	cmp	r4, r5
 800af12:	d101      	bne.n	800af18 <__sfputs_r+0x12>
 800af14:	2000      	movs	r0, #0
 800af16:	e007      	b.n	800af28 <__sfputs_r+0x22>
 800af18:	7821      	ldrb	r1, [r4, #0]
 800af1a:	003a      	movs	r2, r7
 800af1c:	0030      	movs	r0, r6
 800af1e:	f7ff ffdd 	bl	800aedc <__sfputc_r>
 800af22:	3401      	adds	r4, #1
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d1f3      	bne.n	800af10 <__sfputs_r+0xa>
 800af28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af2c <_vfiprintf_r>:
 800af2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af2e:	b0a1      	sub	sp, #132	@ 0x84
 800af30:	000f      	movs	r7, r1
 800af32:	0015      	movs	r5, r2
 800af34:	001e      	movs	r6, r3
 800af36:	9003      	str	r0, [sp, #12]
 800af38:	2800      	cmp	r0, #0
 800af3a:	d004      	beq.n	800af46 <_vfiprintf_r+0x1a>
 800af3c:	6a03      	ldr	r3, [r0, #32]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d101      	bne.n	800af46 <_vfiprintf_r+0x1a>
 800af42:	f7fe f8a9 	bl	8009098 <__sinit>
 800af46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af48:	07db      	lsls	r3, r3, #31
 800af4a:	d405      	bmi.n	800af58 <_vfiprintf_r+0x2c>
 800af4c:	89bb      	ldrh	r3, [r7, #12]
 800af4e:	059b      	lsls	r3, r3, #22
 800af50:	d402      	bmi.n	800af58 <_vfiprintf_r+0x2c>
 800af52:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800af54:	f7fe f907 	bl	8009166 <__retarget_lock_acquire_recursive>
 800af58:	89bb      	ldrh	r3, [r7, #12]
 800af5a:	071b      	lsls	r3, r3, #28
 800af5c:	d502      	bpl.n	800af64 <_vfiprintf_r+0x38>
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d113      	bne.n	800af8c <_vfiprintf_r+0x60>
 800af64:	0039      	movs	r1, r7
 800af66:	9803      	ldr	r0, [sp, #12]
 800af68:	f000 f93e 	bl	800b1e8 <__swsetup_r>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d00d      	beq.n	800af8c <_vfiprintf_r+0x60>
 800af70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af72:	07db      	lsls	r3, r3, #31
 800af74:	d503      	bpl.n	800af7e <_vfiprintf_r+0x52>
 800af76:	2001      	movs	r0, #1
 800af78:	4240      	negs	r0, r0
 800af7a:	b021      	add	sp, #132	@ 0x84
 800af7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af7e:	89bb      	ldrh	r3, [r7, #12]
 800af80:	059b      	lsls	r3, r3, #22
 800af82:	d4f8      	bmi.n	800af76 <_vfiprintf_r+0x4a>
 800af84:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800af86:	f7fe f8ef 	bl	8009168 <__retarget_lock_release_recursive>
 800af8a:	e7f4      	b.n	800af76 <_vfiprintf_r+0x4a>
 800af8c:	2300      	movs	r3, #0
 800af8e:	ac08      	add	r4, sp, #32
 800af90:	6163      	str	r3, [r4, #20]
 800af92:	3320      	adds	r3, #32
 800af94:	7663      	strb	r3, [r4, #25]
 800af96:	3310      	adds	r3, #16
 800af98:	76a3      	strb	r3, [r4, #26]
 800af9a:	9607      	str	r6, [sp, #28]
 800af9c:	002e      	movs	r6, r5
 800af9e:	7833      	ldrb	r3, [r6, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d001      	beq.n	800afa8 <_vfiprintf_r+0x7c>
 800afa4:	2b25      	cmp	r3, #37	@ 0x25
 800afa6:	d148      	bne.n	800b03a <_vfiprintf_r+0x10e>
 800afa8:	1b73      	subs	r3, r6, r5
 800afaa:	9305      	str	r3, [sp, #20]
 800afac:	42ae      	cmp	r6, r5
 800afae:	d00b      	beq.n	800afc8 <_vfiprintf_r+0x9c>
 800afb0:	002a      	movs	r2, r5
 800afb2:	0039      	movs	r1, r7
 800afb4:	9803      	ldr	r0, [sp, #12]
 800afb6:	f7ff ffa6 	bl	800af06 <__sfputs_r>
 800afba:	3001      	adds	r0, #1
 800afbc:	d100      	bne.n	800afc0 <_vfiprintf_r+0x94>
 800afbe:	e0ae      	b.n	800b11e <_vfiprintf_r+0x1f2>
 800afc0:	6963      	ldr	r3, [r4, #20]
 800afc2:	9a05      	ldr	r2, [sp, #20]
 800afc4:	189b      	adds	r3, r3, r2
 800afc6:	6163      	str	r3, [r4, #20]
 800afc8:	7833      	ldrb	r3, [r6, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d100      	bne.n	800afd0 <_vfiprintf_r+0xa4>
 800afce:	e0a6      	b.n	800b11e <_vfiprintf_r+0x1f2>
 800afd0:	2201      	movs	r2, #1
 800afd2:	2300      	movs	r3, #0
 800afd4:	4252      	negs	r2, r2
 800afd6:	6062      	str	r2, [r4, #4]
 800afd8:	a904      	add	r1, sp, #16
 800afda:	3254      	adds	r2, #84	@ 0x54
 800afdc:	1852      	adds	r2, r2, r1
 800afde:	1c75      	adds	r5, r6, #1
 800afe0:	6023      	str	r3, [r4, #0]
 800afe2:	60e3      	str	r3, [r4, #12]
 800afe4:	60a3      	str	r3, [r4, #8]
 800afe6:	7013      	strb	r3, [r2, #0]
 800afe8:	65a3      	str	r3, [r4, #88]	@ 0x58
 800afea:	4b59      	ldr	r3, [pc, #356]	@ (800b150 <_vfiprintf_r+0x224>)
 800afec:	2205      	movs	r2, #5
 800afee:	0018      	movs	r0, r3
 800aff0:	7829      	ldrb	r1, [r5, #0]
 800aff2:	9305      	str	r3, [sp, #20]
 800aff4:	f7fe f8be 	bl	8009174 <memchr>
 800aff8:	1c6e      	adds	r6, r5, #1
 800affa:	2800      	cmp	r0, #0
 800affc:	d11f      	bne.n	800b03e <_vfiprintf_r+0x112>
 800affe:	6822      	ldr	r2, [r4, #0]
 800b000:	06d3      	lsls	r3, r2, #27
 800b002:	d504      	bpl.n	800b00e <_vfiprintf_r+0xe2>
 800b004:	2353      	movs	r3, #83	@ 0x53
 800b006:	a904      	add	r1, sp, #16
 800b008:	185b      	adds	r3, r3, r1
 800b00a:	2120      	movs	r1, #32
 800b00c:	7019      	strb	r1, [r3, #0]
 800b00e:	0713      	lsls	r3, r2, #28
 800b010:	d504      	bpl.n	800b01c <_vfiprintf_r+0xf0>
 800b012:	2353      	movs	r3, #83	@ 0x53
 800b014:	a904      	add	r1, sp, #16
 800b016:	185b      	adds	r3, r3, r1
 800b018:	212b      	movs	r1, #43	@ 0x2b
 800b01a:	7019      	strb	r1, [r3, #0]
 800b01c:	782b      	ldrb	r3, [r5, #0]
 800b01e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b020:	d016      	beq.n	800b050 <_vfiprintf_r+0x124>
 800b022:	002e      	movs	r6, r5
 800b024:	2100      	movs	r1, #0
 800b026:	200a      	movs	r0, #10
 800b028:	68e3      	ldr	r3, [r4, #12]
 800b02a:	7832      	ldrb	r2, [r6, #0]
 800b02c:	1c75      	adds	r5, r6, #1
 800b02e:	3a30      	subs	r2, #48	@ 0x30
 800b030:	2a09      	cmp	r2, #9
 800b032:	d950      	bls.n	800b0d6 <_vfiprintf_r+0x1aa>
 800b034:	2900      	cmp	r1, #0
 800b036:	d111      	bne.n	800b05c <_vfiprintf_r+0x130>
 800b038:	e017      	b.n	800b06a <_vfiprintf_r+0x13e>
 800b03a:	3601      	adds	r6, #1
 800b03c:	e7af      	b.n	800af9e <_vfiprintf_r+0x72>
 800b03e:	9b05      	ldr	r3, [sp, #20]
 800b040:	6822      	ldr	r2, [r4, #0]
 800b042:	1ac0      	subs	r0, r0, r3
 800b044:	2301      	movs	r3, #1
 800b046:	4083      	lsls	r3, r0
 800b048:	4313      	orrs	r3, r2
 800b04a:	0035      	movs	r5, r6
 800b04c:	6023      	str	r3, [r4, #0]
 800b04e:	e7cc      	b.n	800afea <_vfiprintf_r+0xbe>
 800b050:	9b07      	ldr	r3, [sp, #28]
 800b052:	1d19      	adds	r1, r3, #4
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	9107      	str	r1, [sp, #28]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	db01      	blt.n	800b060 <_vfiprintf_r+0x134>
 800b05c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b05e:	e004      	b.n	800b06a <_vfiprintf_r+0x13e>
 800b060:	425b      	negs	r3, r3
 800b062:	60e3      	str	r3, [r4, #12]
 800b064:	2302      	movs	r3, #2
 800b066:	4313      	orrs	r3, r2
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	7833      	ldrb	r3, [r6, #0]
 800b06c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b06e:	d10c      	bne.n	800b08a <_vfiprintf_r+0x15e>
 800b070:	7873      	ldrb	r3, [r6, #1]
 800b072:	2b2a      	cmp	r3, #42	@ 0x2a
 800b074:	d134      	bne.n	800b0e0 <_vfiprintf_r+0x1b4>
 800b076:	9b07      	ldr	r3, [sp, #28]
 800b078:	3602      	adds	r6, #2
 800b07a:	1d1a      	adds	r2, r3, #4
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	9207      	str	r2, [sp, #28]
 800b080:	2b00      	cmp	r3, #0
 800b082:	da01      	bge.n	800b088 <_vfiprintf_r+0x15c>
 800b084:	2301      	movs	r3, #1
 800b086:	425b      	negs	r3, r3
 800b088:	9309      	str	r3, [sp, #36]	@ 0x24
 800b08a:	4d32      	ldr	r5, [pc, #200]	@ (800b154 <_vfiprintf_r+0x228>)
 800b08c:	2203      	movs	r2, #3
 800b08e:	0028      	movs	r0, r5
 800b090:	7831      	ldrb	r1, [r6, #0]
 800b092:	f7fe f86f 	bl	8009174 <memchr>
 800b096:	2800      	cmp	r0, #0
 800b098:	d006      	beq.n	800b0a8 <_vfiprintf_r+0x17c>
 800b09a:	2340      	movs	r3, #64	@ 0x40
 800b09c:	1b40      	subs	r0, r0, r5
 800b09e:	4083      	lsls	r3, r0
 800b0a0:	6822      	ldr	r2, [r4, #0]
 800b0a2:	3601      	adds	r6, #1
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	6023      	str	r3, [r4, #0]
 800b0a8:	7831      	ldrb	r1, [r6, #0]
 800b0aa:	2206      	movs	r2, #6
 800b0ac:	482a      	ldr	r0, [pc, #168]	@ (800b158 <_vfiprintf_r+0x22c>)
 800b0ae:	1c75      	adds	r5, r6, #1
 800b0b0:	7621      	strb	r1, [r4, #24]
 800b0b2:	f7fe f85f 	bl	8009174 <memchr>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d040      	beq.n	800b13c <_vfiprintf_r+0x210>
 800b0ba:	4b28      	ldr	r3, [pc, #160]	@ (800b15c <_vfiprintf_r+0x230>)
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d122      	bne.n	800b106 <_vfiprintf_r+0x1da>
 800b0c0:	2207      	movs	r2, #7
 800b0c2:	9b07      	ldr	r3, [sp, #28]
 800b0c4:	3307      	adds	r3, #7
 800b0c6:	4393      	bics	r3, r2
 800b0c8:	3308      	adds	r3, #8
 800b0ca:	9307      	str	r3, [sp, #28]
 800b0cc:	6963      	ldr	r3, [r4, #20]
 800b0ce:	9a04      	ldr	r2, [sp, #16]
 800b0d0:	189b      	adds	r3, r3, r2
 800b0d2:	6163      	str	r3, [r4, #20]
 800b0d4:	e762      	b.n	800af9c <_vfiprintf_r+0x70>
 800b0d6:	4343      	muls	r3, r0
 800b0d8:	002e      	movs	r6, r5
 800b0da:	2101      	movs	r1, #1
 800b0dc:	189b      	adds	r3, r3, r2
 800b0de:	e7a4      	b.n	800b02a <_vfiprintf_r+0xfe>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	200a      	movs	r0, #10
 800b0e4:	0019      	movs	r1, r3
 800b0e6:	3601      	adds	r6, #1
 800b0e8:	6063      	str	r3, [r4, #4]
 800b0ea:	7832      	ldrb	r2, [r6, #0]
 800b0ec:	1c75      	adds	r5, r6, #1
 800b0ee:	3a30      	subs	r2, #48	@ 0x30
 800b0f0:	2a09      	cmp	r2, #9
 800b0f2:	d903      	bls.n	800b0fc <_vfiprintf_r+0x1d0>
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d0c8      	beq.n	800b08a <_vfiprintf_r+0x15e>
 800b0f8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b0fa:	e7c6      	b.n	800b08a <_vfiprintf_r+0x15e>
 800b0fc:	4341      	muls	r1, r0
 800b0fe:	002e      	movs	r6, r5
 800b100:	2301      	movs	r3, #1
 800b102:	1889      	adds	r1, r1, r2
 800b104:	e7f1      	b.n	800b0ea <_vfiprintf_r+0x1be>
 800b106:	aa07      	add	r2, sp, #28
 800b108:	9200      	str	r2, [sp, #0]
 800b10a:	0021      	movs	r1, r4
 800b10c:	003a      	movs	r2, r7
 800b10e:	4b14      	ldr	r3, [pc, #80]	@ (800b160 <_vfiprintf_r+0x234>)
 800b110:	9803      	ldr	r0, [sp, #12]
 800b112:	f7fd fb41 	bl	8008798 <_printf_float>
 800b116:	9004      	str	r0, [sp, #16]
 800b118:	9b04      	ldr	r3, [sp, #16]
 800b11a:	3301      	adds	r3, #1
 800b11c:	d1d6      	bne.n	800b0cc <_vfiprintf_r+0x1a0>
 800b11e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b120:	07db      	lsls	r3, r3, #31
 800b122:	d405      	bmi.n	800b130 <_vfiprintf_r+0x204>
 800b124:	89bb      	ldrh	r3, [r7, #12]
 800b126:	059b      	lsls	r3, r3, #22
 800b128:	d402      	bmi.n	800b130 <_vfiprintf_r+0x204>
 800b12a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800b12c:	f7fe f81c 	bl	8009168 <__retarget_lock_release_recursive>
 800b130:	89bb      	ldrh	r3, [r7, #12]
 800b132:	065b      	lsls	r3, r3, #25
 800b134:	d500      	bpl.n	800b138 <_vfiprintf_r+0x20c>
 800b136:	e71e      	b.n	800af76 <_vfiprintf_r+0x4a>
 800b138:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b13a:	e71e      	b.n	800af7a <_vfiprintf_r+0x4e>
 800b13c:	aa07      	add	r2, sp, #28
 800b13e:	9200      	str	r2, [sp, #0]
 800b140:	0021      	movs	r1, r4
 800b142:	003a      	movs	r2, r7
 800b144:	4b06      	ldr	r3, [pc, #24]	@ (800b160 <_vfiprintf_r+0x234>)
 800b146:	9803      	ldr	r0, [sp, #12]
 800b148:	f7fd fdd4 	bl	8008cf4 <_printf_i>
 800b14c:	e7e3      	b.n	800b116 <_vfiprintf_r+0x1ea>
 800b14e:	46c0      	nop			@ (mov r8, r8)
 800b150:	0800b8d9 	.word	0x0800b8d9
 800b154:	0800b8df 	.word	0x0800b8df
 800b158:	0800b8e3 	.word	0x0800b8e3
 800b15c:	08008799 	.word	0x08008799
 800b160:	0800af07 	.word	0x0800af07

0800b164 <__swbuf_r>:
 800b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b166:	0006      	movs	r6, r0
 800b168:	000d      	movs	r5, r1
 800b16a:	0014      	movs	r4, r2
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d004      	beq.n	800b17a <__swbuf_r+0x16>
 800b170:	6a03      	ldr	r3, [r0, #32]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d101      	bne.n	800b17a <__swbuf_r+0x16>
 800b176:	f7fd ff8f 	bl	8009098 <__sinit>
 800b17a:	69a3      	ldr	r3, [r4, #24]
 800b17c:	60a3      	str	r3, [r4, #8]
 800b17e:	89a3      	ldrh	r3, [r4, #12]
 800b180:	071b      	lsls	r3, r3, #28
 800b182:	d502      	bpl.n	800b18a <__swbuf_r+0x26>
 800b184:	6923      	ldr	r3, [r4, #16]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d109      	bne.n	800b19e <__swbuf_r+0x3a>
 800b18a:	0021      	movs	r1, r4
 800b18c:	0030      	movs	r0, r6
 800b18e:	f000 f82b 	bl	800b1e8 <__swsetup_r>
 800b192:	2800      	cmp	r0, #0
 800b194:	d003      	beq.n	800b19e <__swbuf_r+0x3a>
 800b196:	2501      	movs	r5, #1
 800b198:	426d      	negs	r5, r5
 800b19a:	0028      	movs	r0, r5
 800b19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b19e:	6923      	ldr	r3, [r4, #16]
 800b1a0:	6820      	ldr	r0, [r4, #0]
 800b1a2:	b2ef      	uxtb	r7, r5
 800b1a4:	1ac0      	subs	r0, r0, r3
 800b1a6:	6963      	ldr	r3, [r4, #20]
 800b1a8:	b2ed      	uxtb	r5, r5
 800b1aa:	4283      	cmp	r3, r0
 800b1ac:	dc05      	bgt.n	800b1ba <__swbuf_r+0x56>
 800b1ae:	0021      	movs	r1, r4
 800b1b0:	0030      	movs	r0, r6
 800b1b2:	f7ff f8f9 	bl	800a3a8 <_fflush_r>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d1ed      	bne.n	800b196 <__swbuf_r+0x32>
 800b1ba:	68a3      	ldr	r3, [r4, #8]
 800b1bc:	3001      	adds	r0, #1
 800b1be:	3b01      	subs	r3, #1
 800b1c0:	60a3      	str	r3, [r4, #8]
 800b1c2:	6823      	ldr	r3, [r4, #0]
 800b1c4:	1c5a      	adds	r2, r3, #1
 800b1c6:	6022      	str	r2, [r4, #0]
 800b1c8:	701f      	strb	r7, [r3, #0]
 800b1ca:	6963      	ldr	r3, [r4, #20]
 800b1cc:	4283      	cmp	r3, r0
 800b1ce:	d004      	beq.n	800b1da <__swbuf_r+0x76>
 800b1d0:	89a3      	ldrh	r3, [r4, #12]
 800b1d2:	07db      	lsls	r3, r3, #31
 800b1d4:	d5e1      	bpl.n	800b19a <__swbuf_r+0x36>
 800b1d6:	2d0a      	cmp	r5, #10
 800b1d8:	d1df      	bne.n	800b19a <__swbuf_r+0x36>
 800b1da:	0021      	movs	r1, r4
 800b1dc:	0030      	movs	r0, r6
 800b1de:	f7ff f8e3 	bl	800a3a8 <_fflush_r>
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	d0d9      	beq.n	800b19a <__swbuf_r+0x36>
 800b1e6:	e7d6      	b.n	800b196 <__swbuf_r+0x32>

0800b1e8 <__swsetup_r>:
 800b1e8:	4b2d      	ldr	r3, [pc, #180]	@ (800b2a0 <__swsetup_r+0xb8>)
 800b1ea:	b570      	push	{r4, r5, r6, lr}
 800b1ec:	0005      	movs	r5, r0
 800b1ee:	6818      	ldr	r0, [r3, #0]
 800b1f0:	000c      	movs	r4, r1
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	d004      	beq.n	800b200 <__swsetup_r+0x18>
 800b1f6:	6a03      	ldr	r3, [r0, #32]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <__swsetup_r+0x18>
 800b1fc:	f7fd ff4c 	bl	8009098 <__sinit>
 800b200:	220c      	movs	r2, #12
 800b202:	5ea3      	ldrsh	r3, [r4, r2]
 800b204:	071a      	lsls	r2, r3, #28
 800b206:	d423      	bmi.n	800b250 <__swsetup_r+0x68>
 800b208:	06da      	lsls	r2, r3, #27
 800b20a:	d407      	bmi.n	800b21c <__swsetup_r+0x34>
 800b20c:	2209      	movs	r2, #9
 800b20e:	602a      	str	r2, [r5, #0]
 800b210:	2240      	movs	r2, #64	@ 0x40
 800b212:	2001      	movs	r0, #1
 800b214:	4313      	orrs	r3, r2
 800b216:	81a3      	strh	r3, [r4, #12]
 800b218:	4240      	negs	r0, r0
 800b21a:	e03a      	b.n	800b292 <__swsetup_r+0xaa>
 800b21c:	075b      	lsls	r3, r3, #29
 800b21e:	d513      	bpl.n	800b248 <__swsetup_r+0x60>
 800b220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b222:	2900      	cmp	r1, #0
 800b224:	d008      	beq.n	800b238 <__swsetup_r+0x50>
 800b226:	0023      	movs	r3, r4
 800b228:	3344      	adds	r3, #68	@ 0x44
 800b22a:	4299      	cmp	r1, r3
 800b22c:	d002      	beq.n	800b234 <__swsetup_r+0x4c>
 800b22e:	0028      	movs	r0, r5
 800b230:	f7ff fdcc 	bl	800adcc <_free_r>
 800b234:	2300      	movs	r3, #0
 800b236:	6363      	str	r3, [r4, #52]	@ 0x34
 800b238:	2224      	movs	r2, #36	@ 0x24
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	4393      	bics	r3, r2
 800b23e:	81a3      	strh	r3, [r4, #12]
 800b240:	2300      	movs	r3, #0
 800b242:	6063      	str	r3, [r4, #4]
 800b244:	6923      	ldr	r3, [r4, #16]
 800b246:	6023      	str	r3, [r4, #0]
 800b248:	2308      	movs	r3, #8
 800b24a:	89a2      	ldrh	r2, [r4, #12]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	81a3      	strh	r3, [r4, #12]
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d10b      	bne.n	800b26e <__swsetup_r+0x86>
 800b256:	21a0      	movs	r1, #160	@ 0xa0
 800b258:	2280      	movs	r2, #128	@ 0x80
 800b25a:	89a3      	ldrh	r3, [r4, #12]
 800b25c:	0089      	lsls	r1, r1, #2
 800b25e:	0092      	lsls	r2, r2, #2
 800b260:	400b      	ands	r3, r1
 800b262:	4293      	cmp	r3, r2
 800b264:	d003      	beq.n	800b26e <__swsetup_r+0x86>
 800b266:	0021      	movs	r1, r4
 800b268:	0028      	movs	r0, r5
 800b26a:	f000 f845 	bl	800b2f8 <__smakebuf_r>
 800b26e:	220c      	movs	r2, #12
 800b270:	5ea3      	ldrsh	r3, [r4, r2]
 800b272:	2101      	movs	r1, #1
 800b274:	001a      	movs	r2, r3
 800b276:	400a      	ands	r2, r1
 800b278:	420b      	tst	r3, r1
 800b27a:	d00b      	beq.n	800b294 <__swsetup_r+0xac>
 800b27c:	2200      	movs	r2, #0
 800b27e:	60a2      	str	r2, [r4, #8]
 800b280:	6962      	ldr	r2, [r4, #20]
 800b282:	4252      	negs	r2, r2
 800b284:	61a2      	str	r2, [r4, #24]
 800b286:	2000      	movs	r0, #0
 800b288:	6922      	ldr	r2, [r4, #16]
 800b28a:	4282      	cmp	r2, r0
 800b28c:	d101      	bne.n	800b292 <__swsetup_r+0xaa>
 800b28e:	061a      	lsls	r2, r3, #24
 800b290:	d4be      	bmi.n	800b210 <__swsetup_r+0x28>
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	0799      	lsls	r1, r3, #30
 800b296:	d400      	bmi.n	800b29a <__swsetup_r+0xb2>
 800b298:	6962      	ldr	r2, [r4, #20]
 800b29a:	60a2      	str	r2, [r4, #8]
 800b29c:	e7f3      	b.n	800b286 <__swsetup_r+0x9e>
 800b29e:	46c0      	nop			@ (mov r8, r8)
 800b2a0:	20000018 	.word	0x20000018

0800b2a4 <__swhatbuf_r>:
 800b2a4:	b570      	push	{r4, r5, r6, lr}
 800b2a6:	000e      	movs	r6, r1
 800b2a8:	001d      	movs	r5, r3
 800b2aa:	230e      	movs	r3, #14
 800b2ac:	5ec9      	ldrsh	r1, [r1, r3]
 800b2ae:	0014      	movs	r4, r2
 800b2b0:	b096      	sub	sp, #88	@ 0x58
 800b2b2:	2900      	cmp	r1, #0
 800b2b4:	da0c      	bge.n	800b2d0 <__swhatbuf_r+0x2c>
 800b2b6:	89b2      	ldrh	r2, [r6, #12]
 800b2b8:	2380      	movs	r3, #128	@ 0x80
 800b2ba:	0011      	movs	r1, r2
 800b2bc:	4019      	ands	r1, r3
 800b2be:	421a      	tst	r2, r3
 800b2c0:	d114      	bne.n	800b2ec <__swhatbuf_r+0x48>
 800b2c2:	2380      	movs	r3, #128	@ 0x80
 800b2c4:	00db      	lsls	r3, r3, #3
 800b2c6:	2000      	movs	r0, #0
 800b2c8:	6029      	str	r1, [r5, #0]
 800b2ca:	6023      	str	r3, [r4, #0]
 800b2cc:	b016      	add	sp, #88	@ 0x58
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
 800b2d0:	466a      	mov	r2, sp
 800b2d2:	f000 f8ad 	bl	800b430 <_fstat_r>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	dbed      	blt.n	800b2b6 <__swhatbuf_r+0x12>
 800b2da:	23f0      	movs	r3, #240	@ 0xf0
 800b2dc:	9901      	ldr	r1, [sp, #4]
 800b2de:	021b      	lsls	r3, r3, #8
 800b2e0:	4019      	ands	r1, r3
 800b2e2:	4b04      	ldr	r3, [pc, #16]	@ (800b2f4 <__swhatbuf_r+0x50>)
 800b2e4:	18c9      	adds	r1, r1, r3
 800b2e6:	424b      	negs	r3, r1
 800b2e8:	4159      	adcs	r1, r3
 800b2ea:	e7ea      	b.n	800b2c2 <__swhatbuf_r+0x1e>
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	2340      	movs	r3, #64	@ 0x40
 800b2f0:	e7e9      	b.n	800b2c6 <__swhatbuf_r+0x22>
 800b2f2:	46c0      	nop			@ (mov r8, r8)
 800b2f4:	ffffe000 	.word	0xffffe000

0800b2f8 <__smakebuf_r>:
 800b2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2fa:	2602      	movs	r6, #2
 800b2fc:	898b      	ldrh	r3, [r1, #12]
 800b2fe:	0005      	movs	r5, r0
 800b300:	000c      	movs	r4, r1
 800b302:	b085      	sub	sp, #20
 800b304:	4233      	tst	r3, r6
 800b306:	d007      	beq.n	800b318 <__smakebuf_r+0x20>
 800b308:	0023      	movs	r3, r4
 800b30a:	3347      	adds	r3, #71	@ 0x47
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	6123      	str	r3, [r4, #16]
 800b310:	2301      	movs	r3, #1
 800b312:	6163      	str	r3, [r4, #20]
 800b314:	b005      	add	sp, #20
 800b316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b318:	ab03      	add	r3, sp, #12
 800b31a:	aa02      	add	r2, sp, #8
 800b31c:	f7ff ffc2 	bl	800b2a4 <__swhatbuf_r>
 800b320:	9f02      	ldr	r7, [sp, #8]
 800b322:	9001      	str	r0, [sp, #4]
 800b324:	0039      	movs	r1, r7
 800b326:	0028      	movs	r0, r5
 800b328:	f7fe ff38 	bl	800a19c <_malloc_r>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d108      	bne.n	800b342 <__smakebuf_r+0x4a>
 800b330:	220c      	movs	r2, #12
 800b332:	5ea3      	ldrsh	r3, [r4, r2]
 800b334:	059a      	lsls	r2, r3, #22
 800b336:	d4ed      	bmi.n	800b314 <__smakebuf_r+0x1c>
 800b338:	2203      	movs	r2, #3
 800b33a:	4393      	bics	r3, r2
 800b33c:	431e      	orrs	r6, r3
 800b33e:	81a6      	strh	r6, [r4, #12]
 800b340:	e7e2      	b.n	800b308 <__smakebuf_r+0x10>
 800b342:	2380      	movs	r3, #128	@ 0x80
 800b344:	89a2      	ldrh	r2, [r4, #12]
 800b346:	6020      	str	r0, [r4, #0]
 800b348:	4313      	orrs	r3, r2
 800b34a:	81a3      	strh	r3, [r4, #12]
 800b34c:	9b03      	ldr	r3, [sp, #12]
 800b34e:	6120      	str	r0, [r4, #16]
 800b350:	6167      	str	r7, [r4, #20]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00c      	beq.n	800b370 <__smakebuf_r+0x78>
 800b356:	0028      	movs	r0, r5
 800b358:	230e      	movs	r3, #14
 800b35a:	5ee1      	ldrsh	r1, [r4, r3]
 800b35c:	f000 f840 	bl	800b3e0 <_isatty_r>
 800b360:	2800      	cmp	r0, #0
 800b362:	d005      	beq.n	800b370 <__smakebuf_r+0x78>
 800b364:	2303      	movs	r3, #3
 800b366:	89a2      	ldrh	r2, [r4, #12]
 800b368:	439a      	bics	r2, r3
 800b36a:	3b02      	subs	r3, #2
 800b36c:	4313      	orrs	r3, r2
 800b36e:	81a3      	strh	r3, [r4, #12]
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	9a01      	ldr	r2, [sp, #4]
 800b374:	4313      	orrs	r3, r2
 800b376:	81a3      	strh	r3, [r4, #12]
 800b378:	e7cc      	b.n	800b314 <__smakebuf_r+0x1c>

0800b37a <_raise_r>:
 800b37a:	b570      	push	{r4, r5, r6, lr}
 800b37c:	0004      	movs	r4, r0
 800b37e:	000d      	movs	r5, r1
 800b380:	291f      	cmp	r1, #31
 800b382:	d904      	bls.n	800b38e <_raise_r+0x14>
 800b384:	2316      	movs	r3, #22
 800b386:	6003      	str	r3, [r0, #0]
 800b388:	2001      	movs	r0, #1
 800b38a:	4240      	negs	r0, r0
 800b38c:	bd70      	pop	{r4, r5, r6, pc}
 800b38e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <_raise_r+0x24>
 800b394:	008a      	lsls	r2, r1, #2
 800b396:	189b      	adds	r3, r3, r2
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	2a00      	cmp	r2, #0
 800b39c:	d108      	bne.n	800b3b0 <_raise_r+0x36>
 800b39e:	0020      	movs	r0, r4
 800b3a0:	f000 f842 	bl	800b428 <_getpid_r>
 800b3a4:	002a      	movs	r2, r5
 800b3a6:	0001      	movs	r1, r0
 800b3a8:	0020      	movs	r0, r4
 800b3aa:	f000 f82b 	bl	800b404 <_kill_r>
 800b3ae:	e7ed      	b.n	800b38c <_raise_r+0x12>
 800b3b0:	2a01      	cmp	r2, #1
 800b3b2:	d009      	beq.n	800b3c8 <_raise_r+0x4e>
 800b3b4:	1c51      	adds	r1, r2, #1
 800b3b6:	d103      	bne.n	800b3c0 <_raise_r+0x46>
 800b3b8:	2316      	movs	r3, #22
 800b3ba:	6003      	str	r3, [r0, #0]
 800b3bc:	2001      	movs	r0, #1
 800b3be:	e7e5      	b.n	800b38c <_raise_r+0x12>
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	0028      	movs	r0, r5
 800b3c4:	6019      	str	r1, [r3, #0]
 800b3c6:	4790      	blx	r2
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	e7df      	b.n	800b38c <_raise_r+0x12>

0800b3cc <raise>:
 800b3cc:	b510      	push	{r4, lr}
 800b3ce:	4b03      	ldr	r3, [pc, #12]	@ (800b3dc <raise+0x10>)
 800b3d0:	0001      	movs	r1, r0
 800b3d2:	6818      	ldr	r0, [r3, #0]
 800b3d4:	f7ff ffd1 	bl	800b37a <_raise_r>
 800b3d8:	bd10      	pop	{r4, pc}
 800b3da:	46c0      	nop			@ (mov r8, r8)
 800b3dc:	20000018 	.word	0x20000018

0800b3e0 <_isatty_r>:
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	b570      	push	{r4, r5, r6, lr}
 800b3e4:	4d06      	ldr	r5, [pc, #24]	@ (800b400 <_isatty_r+0x20>)
 800b3e6:	0004      	movs	r4, r0
 800b3e8:	0008      	movs	r0, r1
 800b3ea:	602b      	str	r3, [r5, #0]
 800b3ec:	f7f9 ffd9 	bl	80053a2 <_isatty>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	d103      	bne.n	800b3fc <_isatty_r+0x1c>
 800b3f4:	682b      	ldr	r3, [r5, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d000      	beq.n	800b3fc <_isatty_r+0x1c>
 800b3fa:	6023      	str	r3, [r4, #0]
 800b3fc:	bd70      	pop	{r4, r5, r6, pc}
 800b3fe:	46c0      	nop			@ (mov r8, r8)
 800b400:	200004fc 	.word	0x200004fc

0800b404 <_kill_r>:
 800b404:	2300      	movs	r3, #0
 800b406:	b570      	push	{r4, r5, r6, lr}
 800b408:	4d06      	ldr	r5, [pc, #24]	@ (800b424 <_kill_r+0x20>)
 800b40a:	0004      	movs	r4, r0
 800b40c:	0008      	movs	r0, r1
 800b40e:	0011      	movs	r1, r2
 800b410:	602b      	str	r3, [r5, #0]
 800b412:	f7f9 ff58 	bl	80052c6 <_kill>
 800b416:	1c43      	adds	r3, r0, #1
 800b418:	d103      	bne.n	800b422 <_kill_r+0x1e>
 800b41a:	682b      	ldr	r3, [r5, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d000      	beq.n	800b422 <_kill_r+0x1e>
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	bd70      	pop	{r4, r5, r6, pc}
 800b424:	200004fc 	.word	0x200004fc

0800b428 <_getpid_r>:
 800b428:	b510      	push	{r4, lr}
 800b42a:	f7f9 ff46 	bl	80052ba <_getpid>
 800b42e:	bd10      	pop	{r4, pc}

0800b430 <_fstat_r>:
 800b430:	2300      	movs	r3, #0
 800b432:	b570      	push	{r4, r5, r6, lr}
 800b434:	4d06      	ldr	r5, [pc, #24]	@ (800b450 <_fstat_r+0x20>)
 800b436:	0004      	movs	r4, r0
 800b438:	0008      	movs	r0, r1
 800b43a:	0011      	movs	r1, r2
 800b43c:	602b      	str	r3, [r5, #0]
 800b43e:	f7f9 ffa2 	bl	8005386 <_fstat>
 800b442:	1c43      	adds	r3, r0, #1
 800b444:	d103      	bne.n	800b44e <_fstat_r+0x1e>
 800b446:	682b      	ldr	r3, [r5, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d000      	beq.n	800b44e <_fstat_r+0x1e>
 800b44c:	6023      	str	r3, [r4, #0]
 800b44e:	bd70      	pop	{r4, r5, r6, pc}
 800b450:	200004fc 	.word	0x200004fc

0800b454 <_init>:
 800b454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b456:	46c0      	nop			@ (mov r8, r8)
 800b458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b45a:	bc08      	pop	{r3}
 800b45c:	469e      	mov	lr, r3
 800b45e:	4770      	bx	lr

0800b460 <_fini>:
 800b460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b462:	46c0      	nop			@ (mov r8, r8)
 800b464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b466:	bc08      	pop	{r3}
 800b468:	469e      	mov	lr, r3
 800b46a:	4770      	bx	lr
