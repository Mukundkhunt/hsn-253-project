
hsn-253-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5a4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc4  0800e660  0800e660  0000f660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f224  0800f224  000111d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f224  0800f224  00010224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f22c  0800f22c  000111d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f22c  0800f22c  0001022c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f230  0800f230  00010230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800f234  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  200001d4  0800f408  000111d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  0800f408  0001193c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013045  00000000  00000000  000111fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad2  00000000  00000000  00024241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00026d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c82  00000000  00000000  00027cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab51  00000000  00000000  00028972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146ca  00000000  00000000  000434c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2a3c  00000000  00000000  00057b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa5c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005008  00000000  00000000  000fa60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000ff614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d4 	.word	0x200001d4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800e648 	.word	0x0800e648

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001d8 	.word	0x200001d8
 8000100:	0800e648 	.word	0x0800e648

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			@ (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	@ 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	@ 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	@ 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f002 f937 	bl	80026c0 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f002 f87b 	bl	8002558 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f002 f929 	bl	80026c0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f002 f91f 	bl	80026c0 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f002 f8a5 	bl	80025e0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f002 f89b 	bl	80025e0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fcaf 	bl	8000e24 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc37 	bl	8000d44 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fca1 	bl	8000e24 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fc97 	bl	8000e24 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc45 	bl	8000d94 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc3b 	bl	8000d94 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	@ (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f81e 	bl	800059c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_f2uiz>:
 800056c:	219e      	movs	r1, #158	@ 0x9e
 800056e:	b510      	push	{r4, lr}
 8000570:	05c9      	lsls	r1, r1, #23
 8000572:	1c04      	adds	r4, r0, #0
 8000574:	f7ff ffd0 	bl	8000518 <__aeabi_fcmpge>
 8000578:	2800      	cmp	r0, #0
 800057a:	d103      	bne.n	8000584 <__aeabi_f2uiz+0x18>
 800057c:	1c20      	adds	r0, r4, #0
 800057e:	f001 f857 	bl	8001630 <__aeabi_f2iz>
 8000582:	bd10      	pop	{r4, pc}
 8000584:	219e      	movs	r1, #158	@ 0x9e
 8000586:	1c20      	adds	r0, r4, #0
 8000588:	05c9      	lsls	r1, r1, #23
 800058a:	f000 fded 	bl	8001168 <__aeabi_fsub>
 800058e:	f001 f84f 	bl	8001630 <__aeabi_f2iz>
 8000592:	2380      	movs	r3, #128	@ 0x80
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	469c      	mov	ip, r3
 8000598:	4460      	add	r0, ip
 800059a:	e7f2      	b.n	8000582 <__aeabi_f2uiz+0x16>

0800059c <__udivmoddi4>:
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	4657      	mov	r7, sl
 80005a0:	464e      	mov	r6, r9
 80005a2:	4645      	mov	r5, r8
 80005a4:	46de      	mov	lr, fp
 80005a6:	b5e0      	push	{r5, r6, r7, lr}
 80005a8:	0004      	movs	r4, r0
 80005aa:	000d      	movs	r5, r1
 80005ac:	4692      	mov	sl, r2
 80005ae:	4699      	mov	r9, r3
 80005b0:	b083      	sub	sp, #12
 80005b2:	428b      	cmp	r3, r1
 80005b4:	d830      	bhi.n	8000618 <__udivmoddi4+0x7c>
 80005b6:	d02d      	beq.n	8000614 <__udivmoddi4+0x78>
 80005b8:	4649      	mov	r1, r9
 80005ba:	4650      	mov	r0, sl
 80005bc:	f003 f8f4 	bl	80037a8 <__clzdi2>
 80005c0:	0029      	movs	r1, r5
 80005c2:	0006      	movs	r6, r0
 80005c4:	0020      	movs	r0, r4
 80005c6:	f003 f8ef 	bl	80037a8 <__clzdi2>
 80005ca:	1a33      	subs	r3, r6, r0
 80005cc:	4698      	mov	r8, r3
 80005ce:	3b20      	subs	r3, #32
 80005d0:	d434      	bmi.n	800063c <__udivmoddi4+0xa0>
 80005d2:	469b      	mov	fp, r3
 80005d4:	4653      	mov	r3, sl
 80005d6:	465a      	mov	r2, fp
 80005d8:	4093      	lsls	r3, r2
 80005da:	4642      	mov	r2, r8
 80005dc:	001f      	movs	r7, r3
 80005de:	4653      	mov	r3, sl
 80005e0:	4093      	lsls	r3, r2
 80005e2:	001e      	movs	r6, r3
 80005e4:	42af      	cmp	r7, r5
 80005e6:	d83b      	bhi.n	8000660 <__udivmoddi4+0xc4>
 80005e8:	42af      	cmp	r7, r5
 80005ea:	d100      	bne.n	80005ee <__udivmoddi4+0x52>
 80005ec:	e079      	b.n	80006e2 <__udivmoddi4+0x146>
 80005ee:	465b      	mov	r3, fp
 80005f0:	1ba4      	subs	r4, r4, r6
 80005f2:	41bd      	sbcs	r5, r7
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	da00      	bge.n	80005fa <__udivmoddi4+0x5e>
 80005f8:	e076      	b.n	80006e8 <__udivmoddi4+0x14c>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2300      	movs	r3, #0
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	465a      	mov	r2, fp
 8000606:	4093      	lsls	r3, r2
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	4642      	mov	r2, r8
 800060e:	4093      	lsls	r3, r2
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	e029      	b.n	8000668 <__udivmoddi4+0xcc>
 8000614:	4282      	cmp	r2, r0
 8000616:	d9cf      	bls.n	80005b8 <__udivmoddi4+0x1c>
 8000618:	2200      	movs	r2, #0
 800061a:	2300      	movs	r3, #0
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <__udivmoddi4+0x8e>
 8000626:	601c      	str	r4, [r3, #0]
 8000628:	605d      	str	r5, [r3, #4]
 800062a:	9800      	ldr	r0, [sp, #0]
 800062c:	9901      	ldr	r1, [sp, #4]
 800062e:	b003      	add	sp, #12
 8000630:	bcf0      	pop	{r4, r5, r6, r7}
 8000632:	46bb      	mov	fp, r7
 8000634:	46b2      	mov	sl, r6
 8000636:	46a9      	mov	r9, r5
 8000638:	46a0      	mov	r8, r4
 800063a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800063c:	4642      	mov	r2, r8
 800063e:	469b      	mov	fp, r3
 8000640:	2320      	movs	r3, #32
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	4652      	mov	r2, sl
 8000646:	40da      	lsrs	r2, r3
 8000648:	4641      	mov	r1, r8
 800064a:	0013      	movs	r3, r2
 800064c:	464a      	mov	r2, r9
 800064e:	408a      	lsls	r2, r1
 8000650:	0017      	movs	r7, r2
 8000652:	4642      	mov	r2, r8
 8000654:	431f      	orrs	r7, r3
 8000656:	4653      	mov	r3, sl
 8000658:	4093      	lsls	r3, r2
 800065a:	001e      	movs	r6, r3
 800065c:	42af      	cmp	r7, r5
 800065e:	d9c3      	bls.n	80005e8 <__udivmoddi4+0x4c>
 8000660:	2200      	movs	r2, #0
 8000662:	2300      	movs	r3, #0
 8000664:	9200      	str	r2, [sp, #0]
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	4643      	mov	r3, r8
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0d8      	beq.n	8000620 <__udivmoddi4+0x84>
 800066e:	07fb      	lsls	r3, r7, #31
 8000670:	0872      	lsrs	r2, r6, #1
 8000672:	431a      	orrs	r2, r3
 8000674:	4646      	mov	r6, r8
 8000676:	087b      	lsrs	r3, r7, #1
 8000678:	e00e      	b.n	8000698 <__udivmoddi4+0xfc>
 800067a:	42ab      	cmp	r3, r5
 800067c:	d101      	bne.n	8000682 <__udivmoddi4+0xe6>
 800067e:	42a2      	cmp	r2, r4
 8000680:	d80c      	bhi.n	800069c <__udivmoddi4+0x100>
 8000682:	1aa4      	subs	r4, r4, r2
 8000684:	419d      	sbcs	r5, r3
 8000686:	2001      	movs	r0, #1
 8000688:	1924      	adds	r4, r4, r4
 800068a:	416d      	adcs	r5, r5
 800068c:	2100      	movs	r1, #0
 800068e:	3e01      	subs	r6, #1
 8000690:	1824      	adds	r4, r4, r0
 8000692:	414d      	adcs	r5, r1
 8000694:	2e00      	cmp	r6, #0
 8000696:	d006      	beq.n	80006a6 <__udivmoddi4+0x10a>
 8000698:	42ab      	cmp	r3, r5
 800069a:	d9ee      	bls.n	800067a <__udivmoddi4+0xde>
 800069c:	3e01      	subs	r6, #1
 800069e:	1924      	adds	r4, r4, r4
 80006a0:	416d      	adcs	r5, r5
 80006a2:	2e00      	cmp	r6, #0
 80006a4:	d1f8      	bne.n	8000698 <__udivmoddi4+0xfc>
 80006a6:	9800      	ldr	r0, [sp, #0]
 80006a8:	9901      	ldr	r1, [sp, #4]
 80006aa:	465b      	mov	r3, fp
 80006ac:	1900      	adds	r0, r0, r4
 80006ae:	4169      	adcs	r1, r5
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db24      	blt.n	80006fe <__udivmoddi4+0x162>
 80006b4:	002b      	movs	r3, r5
 80006b6:	465a      	mov	r2, fp
 80006b8:	4644      	mov	r4, r8
 80006ba:	40d3      	lsrs	r3, r2
 80006bc:	002a      	movs	r2, r5
 80006be:	40e2      	lsrs	r2, r4
 80006c0:	001c      	movs	r4, r3
 80006c2:	465b      	mov	r3, fp
 80006c4:	0015      	movs	r5, r2
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	db2a      	blt.n	8000720 <__udivmoddi4+0x184>
 80006ca:	0026      	movs	r6, r4
 80006cc:	409e      	lsls	r6, r3
 80006ce:	0033      	movs	r3, r6
 80006d0:	0026      	movs	r6, r4
 80006d2:	4647      	mov	r7, r8
 80006d4:	40be      	lsls	r6, r7
 80006d6:	0032      	movs	r2, r6
 80006d8:	1a80      	subs	r0, r0, r2
 80006da:	4199      	sbcs	r1, r3
 80006dc:	9000      	str	r0, [sp, #0]
 80006de:	9101      	str	r1, [sp, #4]
 80006e0:	e79e      	b.n	8000620 <__udivmoddi4+0x84>
 80006e2:	42a3      	cmp	r3, r4
 80006e4:	d8bc      	bhi.n	8000660 <__udivmoddi4+0xc4>
 80006e6:	e782      	b.n	80005ee <__udivmoddi4+0x52>
 80006e8:	4642      	mov	r2, r8
 80006ea:	2320      	movs	r3, #32
 80006ec:	2100      	movs	r1, #0
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	9100      	str	r1, [sp, #0]
 80006f4:	9201      	str	r2, [sp, #4]
 80006f6:	2201      	movs	r2, #1
 80006f8:	40da      	lsrs	r2, r3
 80006fa:	9201      	str	r2, [sp, #4]
 80006fc:	e785      	b.n	800060a <__udivmoddi4+0x6e>
 80006fe:	4642      	mov	r2, r8
 8000700:	2320      	movs	r3, #32
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	002a      	movs	r2, r5
 8000706:	4646      	mov	r6, r8
 8000708:	409a      	lsls	r2, r3
 800070a:	0023      	movs	r3, r4
 800070c:	40f3      	lsrs	r3, r6
 800070e:	4644      	mov	r4, r8
 8000710:	4313      	orrs	r3, r2
 8000712:	002a      	movs	r2, r5
 8000714:	40e2      	lsrs	r2, r4
 8000716:	001c      	movs	r4, r3
 8000718:	465b      	mov	r3, fp
 800071a:	0015      	movs	r5, r2
 800071c:	2b00      	cmp	r3, #0
 800071e:	dad4      	bge.n	80006ca <__udivmoddi4+0x12e>
 8000720:	4642      	mov	r2, r8
 8000722:	002f      	movs	r7, r5
 8000724:	2320      	movs	r3, #32
 8000726:	0026      	movs	r6, r4
 8000728:	4097      	lsls	r7, r2
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	40de      	lsrs	r6, r3
 800072e:	003b      	movs	r3, r7
 8000730:	4333      	orrs	r3, r6
 8000732:	e7cd      	b.n	80006d0 <__udivmoddi4+0x134>

08000734 <__aeabi_fadd>:
 8000734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000736:	024b      	lsls	r3, r1, #9
 8000738:	0a5a      	lsrs	r2, r3, #9
 800073a:	4694      	mov	ip, r2
 800073c:	004a      	lsls	r2, r1, #1
 800073e:	0fc9      	lsrs	r1, r1, #31
 8000740:	46ce      	mov	lr, r9
 8000742:	4647      	mov	r7, r8
 8000744:	4689      	mov	r9, r1
 8000746:	0045      	lsls	r5, r0, #1
 8000748:	0246      	lsls	r6, r0, #9
 800074a:	0e2d      	lsrs	r5, r5, #24
 800074c:	0e12      	lsrs	r2, r2, #24
 800074e:	b580      	push	{r7, lr}
 8000750:	0999      	lsrs	r1, r3, #6
 8000752:	0a77      	lsrs	r7, r6, #9
 8000754:	0fc4      	lsrs	r4, r0, #31
 8000756:	09b6      	lsrs	r6, r6, #6
 8000758:	1aab      	subs	r3, r5, r2
 800075a:	454c      	cmp	r4, r9
 800075c:	d020      	beq.n	80007a0 <__aeabi_fadd+0x6c>
 800075e:	2b00      	cmp	r3, #0
 8000760:	dd0c      	ble.n	800077c <__aeabi_fadd+0x48>
 8000762:	2a00      	cmp	r2, #0
 8000764:	d134      	bne.n	80007d0 <__aeabi_fadd+0x9c>
 8000766:	2900      	cmp	r1, #0
 8000768:	d02a      	beq.n	80007c0 <__aeabi_fadd+0x8c>
 800076a:	1e5a      	subs	r2, r3, #1
 800076c:	2b01      	cmp	r3, #1
 800076e:	d100      	bne.n	8000772 <__aeabi_fadd+0x3e>
 8000770:	e08f      	b.n	8000892 <__aeabi_fadd+0x15e>
 8000772:	2bff      	cmp	r3, #255	@ 0xff
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x44>
 8000776:	e0cd      	b.n	8000914 <__aeabi_fadd+0x1e0>
 8000778:	0013      	movs	r3, r2
 800077a:	e02f      	b.n	80007dc <__aeabi_fadd+0xa8>
 800077c:	2b00      	cmp	r3, #0
 800077e:	d060      	beq.n	8000842 <__aeabi_fadd+0x10e>
 8000780:	1b53      	subs	r3, r2, r5
 8000782:	2d00      	cmp	r5, #0
 8000784:	d000      	beq.n	8000788 <__aeabi_fadd+0x54>
 8000786:	e0ee      	b.n	8000966 <__aeabi_fadd+0x232>
 8000788:	2e00      	cmp	r6, #0
 800078a:	d100      	bne.n	800078e <__aeabi_fadd+0x5a>
 800078c:	e13e      	b.n	8000a0c <__aeabi_fadd+0x2d8>
 800078e:	1e5c      	subs	r4, r3, #1
 8000790:	2b01      	cmp	r3, #1
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x62>
 8000794:	e16b      	b.n	8000a6e <__aeabi_fadd+0x33a>
 8000796:	2bff      	cmp	r3, #255	@ 0xff
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x68>
 800079a:	e0b9      	b.n	8000910 <__aeabi_fadd+0x1dc>
 800079c:	0023      	movs	r3, r4
 800079e:	e0e7      	b.n	8000970 <__aeabi_fadd+0x23c>
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dc00      	bgt.n	80007a6 <__aeabi_fadd+0x72>
 80007a4:	e0a4      	b.n	80008f0 <__aeabi_fadd+0x1bc>
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d069      	beq.n	800087e <__aeabi_fadd+0x14a>
 80007aa:	2dff      	cmp	r5, #255	@ 0xff
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fadd+0x7c>
 80007ae:	e0b1      	b.n	8000914 <__aeabi_fadd+0x1e0>
 80007b0:	2280      	movs	r2, #128	@ 0x80
 80007b2:	04d2      	lsls	r2, r2, #19
 80007b4:	4311      	orrs	r1, r2
 80007b6:	2b1b      	cmp	r3, #27
 80007b8:	dc00      	bgt.n	80007bc <__aeabi_fadd+0x88>
 80007ba:	e0e9      	b.n	8000990 <__aeabi_fadd+0x25c>
 80007bc:	002b      	movs	r3, r5
 80007be:	3605      	adds	r6, #5
 80007c0:	08f7      	lsrs	r7, r6, #3
 80007c2:	2bff      	cmp	r3, #255	@ 0xff
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fadd+0x94>
 80007c6:	e0a5      	b.n	8000914 <__aeabi_fadd+0x1e0>
 80007c8:	027a      	lsls	r2, r7, #9
 80007ca:	0a52      	lsrs	r2, r2, #9
 80007cc:	b2d8      	uxtb	r0, r3
 80007ce:	e030      	b.n	8000832 <__aeabi_fadd+0xfe>
 80007d0:	2dff      	cmp	r5, #255	@ 0xff
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fadd+0xa2>
 80007d4:	e09e      	b.n	8000914 <__aeabi_fadd+0x1e0>
 80007d6:	2280      	movs	r2, #128	@ 0x80
 80007d8:	04d2      	lsls	r2, r2, #19
 80007da:	4311      	orrs	r1, r2
 80007dc:	2001      	movs	r0, #1
 80007de:	2b1b      	cmp	r3, #27
 80007e0:	dc08      	bgt.n	80007f4 <__aeabi_fadd+0xc0>
 80007e2:	0008      	movs	r0, r1
 80007e4:	2220      	movs	r2, #32
 80007e6:	40d8      	lsrs	r0, r3
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	4099      	lsls	r1, r3
 80007ec:	000b      	movs	r3, r1
 80007ee:	1e5a      	subs	r2, r3, #1
 80007f0:	4193      	sbcs	r3, r2
 80007f2:	4318      	orrs	r0, r3
 80007f4:	1a36      	subs	r6, r6, r0
 80007f6:	0173      	lsls	r3, r6, #5
 80007f8:	d400      	bmi.n	80007fc <__aeabi_fadd+0xc8>
 80007fa:	e071      	b.n	80008e0 <__aeabi_fadd+0x1ac>
 80007fc:	01b6      	lsls	r6, r6, #6
 80007fe:	09b7      	lsrs	r7, r6, #6
 8000800:	0038      	movs	r0, r7
 8000802:	f002 ffb3 	bl	800376c <__clzsi2>
 8000806:	003b      	movs	r3, r7
 8000808:	3805      	subs	r0, #5
 800080a:	4083      	lsls	r3, r0
 800080c:	4285      	cmp	r5, r0
 800080e:	dd4d      	ble.n	80008ac <__aeabi_fadd+0x178>
 8000810:	4eb4      	ldr	r6, [pc, #720]	@ (8000ae4 <__aeabi_fadd+0x3b0>)
 8000812:	1a2d      	subs	r5, r5, r0
 8000814:	401e      	ands	r6, r3
 8000816:	075a      	lsls	r2, r3, #29
 8000818:	d068      	beq.n	80008ec <__aeabi_fadd+0x1b8>
 800081a:	220f      	movs	r2, #15
 800081c:	4013      	ands	r3, r2
 800081e:	2b04      	cmp	r3, #4
 8000820:	d064      	beq.n	80008ec <__aeabi_fadd+0x1b8>
 8000822:	3604      	adds	r6, #4
 8000824:	0173      	lsls	r3, r6, #5
 8000826:	d561      	bpl.n	80008ec <__aeabi_fadd+0x1b8>
 8000828:	1c68      	adds	r0, r5, #1
 800082a:	2dfe      	cmp	r5, #254	@ 0xfe
 800082c:	d154      	bne.n	80008d8 <__aeabi_fadd+0x1a4>
 800082e:	20ff      	movs	r0, #255	@ 0xff
 8000830:	2200      	movs	r2, #0
 8000832:	05c0      	lsls	r0, r0, #23
 8000834:	4310      	orrs	r0, r2
 8000836:	07e4      	lsls	r4, r4, #31
 8000838:	4320      	orrs	r0, r4
 800083a:	bcc0      	pop	{r6, r7}
 800083c:	46b9      	mov	r9, r7
 800083e:	46b0      	mov	r8, r6
 8000840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000842:	22fe      	movs	r2, #254	@ 0xfe
 8000844:	4690      	mov	r8, r2
 8000846:	1c68      	adds	r0, r5, #1
 8000848:	0002      	movs	r2, r0
 800084a:	4640      	mov	r0, r8
 800084c:	4210      	tst	r0, r2
 800084e:	d16b      	bne.n	8000928 <__aeabi_fadd+0x1f4>
 8000850:	2d00      	cmp	r5, #0
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0x122>
 8000854:	e0dd      	b.n	8000a12 <__aeabi_fadd+0x2de>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d100      	bne.n	800085c <__aeabi_fadd+0x128>
 800085a:	e102      	b.n	8000a62 <__aeabi_fadd+0x32e>
 800085c:	2900      	cmp	r1, #0
 800085e:	d0b3      	beq.n	80007c8 <__aeabi_fadd+0x94>
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	1a77      	subs	r7, r6, r1
 8000864:	04d2      	lsls	r2, r2, #19
 8000866:	4217      	tst	r7, r2
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x138>
 800086a:	e136      	b.n	8000ada <__aeabi_fadd+0x3a6>
 800086c:	464c      	mov	r4, r9
 800086e:	1b8e      	subs	r6, r1, r6
 8000870:	d061      	beq.n	8000936 <__aeabi_fadd+0x202>
 8000872:	2001      	movs	r0, #1
 8000874:	4216      	tst	r6, r2
 8000876:	d130      	bne.n	80008da <__aeabi_fadd+0x1a6>
 8000878:	2300      	movs	r3, #0
 800087a:	08f7      	lsrs	r7, r6, #3
 800087c:	e7a4      	b.n	80007c8 <__aeabi_fadd+0x94>
 800087e:	2900      	cmp	r1, #0
 8000880:	d09e      	beq.n	80007c0 <__aeabi_fadd+0x8c>
 8000882:	1e5a      	subs	r2, r3, #1
 8000884:	2b01      	cmp	r3, #1
 8000886:	d100      	bne.n	800088a <__aeabi_fadd+0x156>
 8000888:	e0ca      	b.n	8000a20 <__aeabi_fadd+0x2ec>
 800088a:	2bff      	cmp	r3, #255	@ 0xff
 800088c:	d042      	beq.n	8000914 <__aeabi_fadd+0x1e0>
 800088e:	0013      	movs	r3, r2
 8000890:	e791      	b.n	80007b6 <__aeabi_fadd+0x82>
 8000892:	1a71      	subs	r1, r6, r1
 8000894:	014b      	lsls	r3, r1, #5
 8000896:	d400      	bmi.n	800089a <__aeabi_fadd+0x166>
 8000898:	e0d1      	b.n	8000a3e <__aeabi_fadd+0x30a>
 800089a:	018f      	lsls	r7, r1, #6
 800089c:	09bf      	lsrs	r7, r7, #6
 800089e:	0038      	movs	r0, r7
 80008a0:	f002 ff64 	bl	800376c <__clzsi2>
 80008a4:	003b      	movs	r3, r7
 80008a6:	3805      	subs	r0, #5
 80008a8:	4083      	lsls	r3, r0
 80008aa:	2501      	movs	r5, #1
 80008ac:	2220      	movs	r2, #32
 80008ae:	1b40      	subs	r0, r0, r5
 80008b0:	3001      	adds	r0, #1
 80008b2:	1a12      	subs	r2, r2, r0
 80008b4:	001e      	movs	r6, r3
 80008b6:	4093      	lsls	r3, r2
 80008b8:	40c6      	lsrs	r6, r0
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	4193      	sbcs	r3, r2
 80008be:	431e      	orrs	r6, r3
 80008c0:	d039      	beq.n	8000936 <__aeabi_fadd+0x202>
 80008c2:	0773      	lsls	r3, r6, #29
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x194>
 80008c6:	e11b      	b.n	8000b00 <__aeabi_fadd+0x3cc>
 80008c8:	230f      	movs	r3, #15
 80008ca:	2500      	movs	r5, #0
 80008cc:	4033      	ands	r3, r6
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d1a7      	bne.n	8000822 <__aeabi_fadd+0xee>
 80008d2:	2001      	movs	r0, #1
 80008d4:	0172      	lsls	r2, r6, #5
 80008d6:	d57c      	bpl.n	80009d2 <__aeabi_fadd+0x29e>
 80008d8:	b2c0      	uxtb	r0, r0
 80008da:	01b2      	lsls	r2, r6, #6
 80008dc:	0a52      	lsrs	r2, r2, #9
 80008de:	e7a8      	b.n	8000832 <__aeabi_fadd+0xfe>
 80008e0:	0773      	lsls	r3, r6, #29
 80008e2:	d003      	beq.n	80008ec <__aeabi_fadd+0x1b8>
 80008e4:	230f      	movs	r3, #15
 80008e6:	4033      	ands	r3, r6
 80008e8:	2b04      	cmp	r3, #4
 80008ea:	d19a      	bne.n	8000822 <__aeabi_fadd+0xee>
 80008ec:	002b      	movs	r3, r5
 80008ee:	e767      	b.n	80007c0 <__aeabi_fadd+0x8c>
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d023      	beq.n	800093c <__aeabi_fadd+0x208>
 80008f4:	1b53      	subs	r3, r2, r5
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	d17b      	bne.n	80009f2 <__aeabi_fadd+0x2be>
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x1cc>
 80008fe:	e086      	b.n	8000a0e <__aeabi_fadd+0x2da>
 8000900:	1e5d      	subs	r5, r3, #1
 8000902:	2b01      	cmp	r3, #1
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x1d4>
 8000906:	e08b      	b.n	8000a20 <__aeabi_fadd+0x2ec>
 8000908:	2bff      	cmp	r3, #255	@ 0xff
 800090a:	d002      	beq.n	8000912 <__aeabi_fadd+0x1de>
 800090c:	002b      	movs	r3, r5
 800090e:	e075      	b.n	80009fc <__aeabi_fadd+0x2c8>
 8000910:	464c      	mov	r4, r9
 8000912:	4667      	mov	r7, ip
 8000914:	2f00      	cmp	r7, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x1e6>
 8000918:	e789      	b.n	800082e <__aeabi_fadd+0xfa>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	433a      	orrs	r2, r7
 8000920:	0252      	lsls	r2, r2, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a52      	lsrs	r2, r2, #9
 8000926:	e784      	b.n	8000832 <__aeabi_fadd+0xfe>
 8000928:	1a77      	subs	r7, r6, r1
 800092a:	017b      	lsls	r3, r7, #5
 800092c:	d46b      	bmi.n	8000a06 <__aeabi_fadd+0x2d2>
 800092e:	2f00      	cmp	r7, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_fadd+0x200>
 8000932:	e765      	b.n	8000800 <__aeabi_fadd+0xcc>
 8000934:	2400      	movs	r4, #0
 8000936:	2000      	movs	r0, #0
 8000938:	2200      	movs	r2, #0
 800093a:	e77a      	b.n	8000832 <__aeabi_fadd+0xfe>
 800093c:	22fe      	movs	r2, #254	@ 0xfe
 800093e:	1c6b      	adds	r3, r5, #1
 8000940:	421a      	tst	r2, r3
 8000942:	d149      	bne.n	80009d8 <__aeabi_fadd+0x2a4>
 8000944:	2d00      	cmp	r5, #0
 8000946:	d000      	beq.n	800094a <__aeabi_fadd+0x216>
 8000948:	e09f      	b.n	8000a8a <__aeabi_fadd+0x356>
 800094a:	2e00      	cmp	r6, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_fadd+0x21c>
 800094e:	e0ba      	b.n	8000ac6 <__aeabi_fadd+0x392>
 8000950:	2900      	cmp	r1, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_fadd+0x222>
 8000954:	e0cf      	b.n	8000af6 <__aeabi_fadd+0x3c2>
 8000956:	1872      	adds	r2, r6, r1
 8000958:	0153      	lsls	r3, r2, #5
 800095a:	d400      	bmi.n	800095e <__aeabi_fadd+0x22a>
 800095c:	e0cd      	b.n	8000afa <__aeabi_fadd+0x3c6>
 800095e:	0192      	lsls	r2, r2, #6
 8000960:	2001      	movs	r0, #1
 8000962:	0a52      	lsrs	r2, r2, #9
 8000964:	e765      	b.n	8000832 <__aeabi_fadd+0xfe>
 8000966:	2aff      	cmp	r2, #255	@ 0xff
 8000968:	d0d2      	beq.n	8000910 <__aeabi_fadd+0x1dc>
 800096a:	2080      	movs	r0, #128	@ 0x80
 800096c:	04c0      	lsls	r0, r0, #19
 800096e:	4306      	orrs	r6, r0
 8000970:	2001      	movs	r0, #1
 8000972:	2b1b      	cmp	r3, #27
 8000974:	dc08      	bgt.n	8000988 <__aeabi_fadd+0x254>
 8000976:	0030      	movs	r0, r6
 8000978:	2420      	movs	r4, #32
 800097a:	40d8      	lsrs	r0, r3
 800097c:	1ae3      	subs	r3, r4, r3
 800097e:	409e      	lsls	r6, r3
 8000980:	0033      	movs	r3, r6
 8000982:	1e5c      	subs	r4, r3, #1
 8000984:	41a3      	sbcs	r3, r4
 8000986:	4318      	orrs	r0, r3
 8000988:	464c      	mov	r4, r9
 800098a:	0015      	movs	r5, r2
 800098c:	1a0e      	subs	r6, r1, r0
 800098e:	e732      	b.n	80007f6 <__aeabi_fadd+0xc2>
 8000990:	0008      	movs	r0, r1
 8000992:	2220      	movs	r2, #32
 8000994:	40d8      	lsrs	r0, r3
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	4099      	lsls	r1, r3
 800099a:	000b      	movs	r3, r1
 800099c:	1e5a      	subs	r2, r3, #1
 800099e:	4193      	sbcs	r3, r2
 80009a0:	4303      	orrs	r3, r0
 80009a2:	18f6      	adds	r6, r6, r3
 80009a4:	0173      	lsls	r3, r6, #5
 80009a6:	d59b      	bpl.n	80008e0 <__aeabi_fadd+0x1ac>
 80009a8:	3501      	adds	r5, #1
 80009aa:	2dff      	cmp	r5, #255	@ 0xff
 80009ac:	d100      	bne.n	80009b0 <__aeabi_fadd+0x27c>
 80009ae:	e73e      	b.n	800082e <__aeabi_fadd+0xfa>
 80009b0:	2301      	movs	r3, #1
 80009b2:	494d      	ldr	r1, [pc, #308]	@ (8000ae8 <__aeabi_fadd+0x3b4>)
 80009b4:	0872      	lsrs	r2, r6, #1
 80009b6:	4033      	ands	r3, r6
 80009b8:	400a      	ands	r2, r1
 80009ba:	431a      	orrs	r2, r3
 80009bc:	0016      	movs	r6, r2
 80009be:	0753      	lsls	r3, r2, #29
 80009c0:	d004      	beq.n	80009cc <__aeabi_fadd+0x298>
 80009c2:	230f      	movs	r3, #15
 80009c4:	4013      	ands	r3, r2
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d000      	beq.n	80009cc <__aeabi_fadd+0x298>
 80009ca:	e72a      	b.n	8000822 <__aeabi_fadd+0xee>
 80009cc:	0173      	lsls	r3, r6, #5
 80009ce:	d500      	bpl.n	80009d2 <__aeabi_fadd+0x29e>
 80009d0:	e72a      	b.n	8000828 <__aeabi_fadd+0xf4>
 80009d2:	002b      	movs	r3, r5
 80009d4:	08f7      	lsrs	r7, r6, #3
 80009d6:	e6f7      	b.n	80007c8 <__aeabi_fadd+0x94>
 80009d8:	2bff      	cmp	r3, #255	@ 0xff
 80009da:	d100      	bne.n	80009de <__aeabi_fadd+0x2aa>
 80009dc:	e727      	b.n	800082e <__aeabi_fadd+0xfa>
 80009de:	1871      	adds	r1, r6, r1
 80009e0:	0849      	lsrs	r1, r1, #1
 80009e2:	074a      	lsls	r2, r1, #29
 80009e4:	d02f      	beq.n	8000a46 <__aeabi_fadd+0x312>
 80009e6:	220f      	movs	r2, #15
 80009e8:	400a      	ands	r2, r1
 80009ea:	2a04      	cmp	r2, #4
 80009ec:	d02b      	beq.n	8000a46 <__aeabi_fadd+0x312>
 80009ee:	1d0e      	adds	r6, r1, #4
 80009f0:	e6e6      	b.n	80007c0 <__aeabi_fadd+0x8c>
 80009f2:	2aff      	cmp	r2, #255	@ 0xff
 80009f4:	d08d      	beq.n	8000912 <__aeabi_fadd+0x1de>
 80009f6:	2080      	movs	r0, #128	@ 0x80
 80009f8:	04c0      	lsls	r0, r0, #19
 80009fa:	4306      	orrs	r6, r0
 80009fc:	2b1b      	cmp	r3, #27
 80009fe:	dd24      	ble.n	8000a4a <__aeabi_fadd+0x316>
 8000a00:	0013      	movs	r3, r2
 8000a02:	1d4e      	adds	r6, r1, #5
 8000a04:	e6dc      	b.n	80007c0 <__aeabi_fadd+0x8c>
 8000a06:	464c      	mov	r4, r9
 8000a08:	1b8f      	subs	r7, r1, r6
 8000a0a:	e6f9      	b.n	8000800 <__aeabi_fadd+0xcc>
 8000a0c:	464c      	mov	r4, r9
 8000a0e:	000e      	movs	r6, r1
 8000a10:	e6d6      	b.n	80007c0 <__aeabi_fadd+0x8c>
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d149      	bne.n	8000aaa <__aeabi_fadd+0x376>
 8000a16:	2900      	cmp	r1, #0
 8000a18:	d068      	beq.n	8000aec <__aeabi_fadd+0x3b8>
 8000a1a:	4667      	mov	r7, ip
 8000a1c:	464c      	mov	r4, r9
 8000a1e:	e77c      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000a20:	1870      	adds	r0, r6, r1
 8000a22:	0143      	lsls	r3, r0, #5
 8000a24:	d574      	bpl.n	8000b10 <__aeabi_fadd+0x3dc>
 8000a26:	4930      	ldr	r1, [pc, #192]	@ (8000ae8 <__aeabi_fadd+0x3b4>)
 8000a28:	0840      	lsrs	r0, r0, #1
 8000a2a:	4001      	ands	r1, r0
 8000a2c:	0743      	lsls	r3, r0, #29
 8000a2e:	d009      	beq.n	8000a44 <__aeabi_fadd+0x310>
 8000a30:	230f      	movs	r3, #15
 8000a32:	4003      	ands	r3, r0
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	d005      	beq.n	8000a44 <__aeabi_fadd+0x310>
 8000a38:	2302      	movs	r3, #2
 8000a3a:	1d0e      	adds	r6, r1, #4
 8000a3c:	e6c0      	b.n	80007c0 <__aeabi_fadd+0x8c>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	08cf      	lsrs	r7, r1, #3
 8000a42:	e6c1      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000a44:	2302      	movs	r3, #2
 8000a46:	08cf      	lsrs	r7, r1, #3
 8000a48:	e6be      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000a4a:	2520      	movs	r5, #32
 8000a4c:	0030      	movs	r0, r6
 8000a4e:	40d8      	lsrs	r0, r3
 8000a50:	1aeb      	subs	r3, r5, r3
 8000a52:	409e      	lsls	r6, r3
 8000a54:	0033      	movs	r3, r6
 8000a56:	1e5d      	subs	r5, r3, #1
 8000a58:	41ab      	sbcs	r3, r5
 8000a5a:	4303      	orrs	r3, r0
 8000a5c:	0015      	movs	r5, r2
 8000a5e:	185e      	adds	r6, r3, r1
 8000a60:	e7a0      	b.n	80009a4 <__aeabi_fadd+0x270>
 8000a62:	2900      	cmp	r1, #0
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fadd+0x334>
 8000a66:	e765      	b.n	8000934 <__aeabi_fadd+0x200>
 8000a68:	464c      	mov	r4, r9
 8000a6a:	4667      	mov	r7, ip
 8000a6c:	e6ac      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000a6e:	1b8f      	subs	r7, r1, r6
 8000a70:	017b      	lsls	r3, r7, #5
 8000a72:	d52e      	bpl.n	8000ad2 <__aeabi_fadd+0x39e>
 8000a74:	01bf      	lsls	r7, r7, #6
 8000a76:	09bf      	lsrs	r7, r7, #6
 8000a78:	0038      	movs	r0, r7
 8000a7a:	f002 fe77 	bl	800376c <__clzsi2>
 8000a7e:	003b      	movs	r3, r7
 8000a80:	3805      	subs	r0, #5
 8000a82:	4083      	lsls	r3, r0
 8000a84:	464c      	mov	r4, r9
 8000a86:	3501      	adds	r5, #1
 8000a88:	e710      	b.n	80008ac <__aeabi_fadd+0x178>
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fadd+0x35c>
 8000a8e:	e740      	b.n	8000912 <__aeabi_fadd+0x1de>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	d100      	bne.n	8000a96 <__aeabi_fadd+0x362>
 8000a94:	e741      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000a96:	2380      	movs	r3, #128	@ 0x80
 8000a98:	03db      	lsls	r3, r3, #15
 8000a9a:	429f      	cmp	r7, r3
 8000a9c:	d200      	bcs.n	8000aa0 <__aeabi_fadd+0x36c>
 8000a9e:	e73c      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000aa0:	459c      	cmp	ip, r3
 8000aa2:	d300      	bcc.n	8000aa6 <__aeabi_fadd+0x372>
 8000aa4:	e739      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000aa6:	4667      	mov	r7, ip
 8000aa8:	e737      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_fadd+0x37c>
 8000aae:	e734      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000ab0:	2380      	movs	r3, #128	@ 0x80
 8000ab2:	03db      	lsls	r3, r3, #15
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	d200      	bcs.n	8000aba <__aeabi_fadd+0x386>
 8000ab8:	e72f      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000aba:	459c      	cmp	ip, r3
 8000abc:	d300      	bcc.n	8000ac0 <__aeabi_fadd+0x38c>
 8000abe:	e72c      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000ac0:	464c      	mov	r4, r9
 8000ac2:	4667      	mov	r7, ip
 8000ac4:	e729      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000ac6:	2900      	cmp	r1, #0
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fadd+0x398>
 8000aca:	e734      	b.n	8000936 <__aeabi_fadd+0x202>
 8000acc:	2300      	movs	r3, #0
 8000ace:	08cf      	lsrs	r7, r1, #3
 8000ad0:	e67a      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000ad2:	464c      	mov	r4, r9
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	08ff      	lsrs	r7, r7, #3
 8000ad8:	e676      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000ada:	2f00      	cmp	r7, #0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_fadd+0x3ac>
 8000ade:	e729      	b.n	8000934 <__aeabi_fadd+0x200>
 8000ae0:	08ff      	lsrs	r7, r7, #3
 8000ae2:	e671      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000ae4:	fbffffff 	.word	0xfbffffff
 8000ae8:	7dffffff 	.word	0x7dffffff
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	2400      	movs	r4, #0
 8000af0:	20ff      	movs	r0, #255	@ 0xff
 8000af2:	03d2      	lsls	r2, r2, #15
 8000af4:	e69d      	b.n	8000832 <__aeabi_fadd+0xfe>
 8000af6:	2300      	movs	r3, #0
 8000af8:	e666      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000afa:	2300      	movs	r3, #0
 8000afc:	08d7      	lsrs	r7, r2, #3
 8000afe:	e663      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000b00:	2001      	movs	r0, #1
 8000b02:	0172      	lsls	r2, r6, #5
 8000b04:	d500      	bpl.n	8000b08 <__aeabi_fadd+0x3d4>
 8000b06:	e6e7      	b.n	80008d8 <__aeabi_fadd+0x1a4>
 8000b08:	0031      	movs	r1, r6
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	08cf      	lsrs	r7, r1, #3
 8000b0e:	e65b      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000b10:	2301      	movs	r3, #1
 8000b12:	08c7      	lsrs	r7, r0, #3
 8000b14:	e658      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000b16:	46c0      	nop			@ (mov r8, r8)

08000b18 <__aeabi_fdiv>:
 8000b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1a:	4646      	mov	r6, r8
 8000b1c:	464f      	mov	r7, r9
 8000b1e:	46d6      	mov	lr, sl
 8000b20:	0245      	lsls	r5, r0, #9
 8000b22:	b5c0      	push	{r6, r7, lr}
 8000b24:	0fc3      	lsrs	r3, r0, #31
 8000b26:	0047      	lsls	r7, r0, #1
 8000b28:	4698      	mov	r8, r3
 8000b2a:	1c0e      	adds	r6, r1, #0
 8000b2c:	0a6d      	lsrs	r5, r5, #9
 8000b2e:	0e3f      	lsrs	r7, r7, #24
 8000b30:	d05b      	beq.n	8000bea <__aeabi_fdiv+0xd2>
 8000b32:	2fff      	cmp	r7, #255	@ 0xff
 8000b34:	d021      	beq.n	8000b7a <__aeabi_fdiv+0x62>
 8000b36:	2380      	movs	r3, #128	@ 0x80
 8000b38:	00ed      	lsls	r5, r5, #3
 8000b3a:	04db      	lsls	r3, r3, #19
 8000b3c:	431d      	orrs	r5, r3
 8000b3e:	2300      	movs	r3, #0
 8000b40:	4699      	mov	r9, r3
 8000b42:	469a      	mov	sl, r3
 8000b44:	3f7f      	subs	r7, #127	@ 0x7f
 8000b46:	0274      	lsls	r4, r6, #9
 8000b48:	0073      	lsls	r3, r6, #1
 8000b4a:	0a64      	lsrs	r4, r4, #9
 8000b4c:	0e1b      	lsrs	r3, r3, #24
 8000b4e:	0ff6      	lsrs	r6, r6, #31
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d020      	beq.n	8000b96 <__aeabi_fdiv+0x7e>
 8000b54:	2bff      	cmp	r3, #255	@ 0xff
 8000b56:	d043      	beq.n	8000be0 <__aeabi_fdiv+0xc8>
 8000b58:	2280      	movs	r2, #128	@ 0x80
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	00e4      	lsls	r4, r4, #3
 8000b5e:	04d2      	lsls	r2, r2, #19
 8000b60:	4314      	orrs	r4, r2
 8000b62:	3b7f      	subs	r3, #127	@ 0x7f
 8000b64:	4642      	mov	r2, r8
 8000b66:	1aff      	subs	r7, r7, r3
 8000b68:	464b      	mov	r3, r9
 8000b6a:	4072      	eors	r2, r6
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d900      	bls.n	8000b72 <__aeabi_fdiv+0x5a>
 8000b70:	e09d      	b.n	8000cae <__aeabi_fdiv+0x196>
 8000b72:	4971      	ldr	r1, [pc, #452]	@ (8000d38 <__aeabi_fdiv+0x220>)
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	58cb      	ldr	r3, [r1, r3]
 8000b78:	469f      	mov	pc, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d15a      	bne.n	8000c34 <__aeabi_fdiv+0x11c>
 8000b7e:	2308      	movs	r3, #8
 8000b80:	4699      	mov	r9, r3
 8000b82:	3b06      	subs	r3, #6
 8000b84:	0274      	lsls	r4, r6, #9
 8000b86:	469a      	mov	sl, r3
 8000b88:	0073      	lsls	r3, r6, #1
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	0a64      	lsrs	r4, r4, #9
 8000b8e:	0e1b      	lsrs	r3, r3, #24
 8000b90:	0ff6      	lsrs	r6, r6, #31
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1de      	bne.n	8000b54 <__aeabi_fdiv+0x3c>
 8000b96:	2c00      	cmp	r4, #0
 8000b98:	d13b      	bne.n	8000c12 <__aeabi_fdiv+0xfa>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	4642      	mov	r2, r8
 8000b9e:	4649      	mov	r1, r9
 8000ba0:	4072      	eors	r2, r6
 8000ba2:	4319      	orrs	r1, r3
 8000ba4:	290e      	cmp	r1, #14
 8000ba6:	d818      	bhi.n	8000bda <__aeabi_fdiv+0xc2>
 8000ba8:	4864      	ldr	r0, [pc, #400]	@ (8000d3c <__aeabi_fdiv+0x224>)
 8000baa:	0089      	lsls	r1, r1, #2
 8000bac:	5841      	ldr	r1, [r0, r1]
 8000bae:	468f      	mov	pc, r1
 8000bb0:	4653      	mov	r3, sl
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fdiv+0xa0>
 8000bb6:	e0b8      	b.n	8000d2a <__aeabi_fdiv+0x212>
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d06e      	beq.n	8000c9a <__aeabi_fdiv+0x182>
 8000bbc:	4642      	mov	r2, r8
 8000bbe:	002c      	movs	r4, r5
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d140      	bne.n	8000c46 <__aeabi_fdiv+0x12e>
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	2400      	movs	r4, #0
 8000bc8:	05c0      	lsls	r0, r0, #23
 8000bca:	4320      	orrs	r0, r4
 8000bcc:	07d2      	lsls	r2, r2, #31
 8000bce:	4310      	orrs	r0, r2
 8000bd0:	bce0      	pop	{r5, r6, r7}
 8000bd2:	46ba      	mov	sl, r7
 8000bd4:	46b1      	mov	r9, r6
 8000bd6:	46a8      	mov	r8, r5
 8000bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bda:	20ff      	movs	r0, #255	@ 0xff
 8000bdc:	2400      	movs	r4, #0
 8000bde:	e7f3      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	d120      	bne.n	8000c26 <__aeabi_fdiv+0x10e>
 8000be4:	2302      	movs	r3, #2
 8000be6:	3fff      	subs	r7, #255	@ 0xff
 8000be8:	e7d8      	b.n	8000b9c <__aeabi_fdiv+0x84>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d105      	bne.n	8000bfa <__aeabi_fdiv+0xe2>
 8000bee:	2304      	movs	r3, #4
 8000bf0:	4699      	mov	r9, r3
 8000bf2:	3b03      	subs	r3, #3
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	e7a5      	b.n	8000b46 <__aeabi_fdiv+0x2e>
 8000bfa:	0028      	movs	r0, r5
 8000bfc:	f002 fdb6 	bl	800376c <__clzsi2>
 8000c00:	2776      	movs	r7, #118	@ 0x76
 8000c02:	1f43      	subs	r3, r0, #5
 8000c04:	409d      	lsls	r5, r3
 8000c06:	2300      	movs	r3, #0
 8000c08:	427f      	negs	r7, r7
 8000c0a:	4699      	mov	r9, r3
 8000c0c:	469a      	mov	sl, r3
 8000c0e:	1a3f      	subs	r7, r7, r0
 8000c10:	e799      	b.n	8000b46 <__aeabi_fdiv+0x2e>
 8000c12:	0020      	movs	r0, r4
 8000c14:	f002 fdaa 	bl	800376c <__clzsi2>
 8000c18:	1f43      	subs	r3, r0, #5
 8000c1a:	409c      	lsls	r4, r3
 8000c1c:	2376      	movs	r3, #118	@ 0x76
 8000c1e:	425b      	negs	r3, r3
 8000c20:	1a1b      	subs	r3, r3, r0
 8000c22:	2000      	movs	r0, #0
 8000c24:	e79e      	b.n	8000b64 <__aeabi_fdiv+0x4c>
 8000c26:	2303      	movs	r3, #3
 8000c28:	464a      	mov	r2, r9
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	4691      	mov	r9, r2
 8000c2e:	2003      	movs	r0, #3
 8000c30:	33fc      	adds	r3, #252	@ 0xfc
 8000c32:	e797      	b.n	8000b64 <__aeabi_fdiv+0x4c>
 8000c34:	230c      	movs	r3, #12
 8000c36:	4699      	mov	r9, r3
 8000c38:	3b09      	subs	r3, #9
 8000c3a:	27ff      	movs	r7, #255	@ 0xff
 8000c3c:	469a      	mov	sl, r3
 8000c3e:	e782      	b.n	8000b46 <__aeabi_fdiv+0x2e>
 8000c40:	2803      	cmp	r0, #3
 8000c42:	d02c      	beq.n	8000c9e <__aeabi_fdiv+0x186>
 8000c44:	0032      	movs	r2, r6
 8000c46:	0038      	movs	r0, r7
 8000c48:	307f      	adds	r0, #127	@ 0x7f
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	dd47      	ble.n	8000cde <__aeabi_fdiv+0x1c6>
 8000c4e:	0763      	lsls	r3, r4, #29
 8000c50:	d004      	beq.n	8000c5c <__aeabi_fdiv+0x144>
 8000c52:	230f      	movs	r3, #15
 8000c54:	4023      	ands	r3, r4
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d000      	beq.n	8000c5c <__aeabi_fdiv+0x144>
 8000c5a:	3404      	adds	r4, #4
 8000c5c:	0123      	lsls	r3, r4, #4
 8000c5e:	d503      	bpl.n	8000c68 <__aeabi_fdiv+0x150>
 8000c60:	0038      	movs	r0, r7
 8000c62:	4b37      	ldr	r3, [pc, #220]	@ (8000d40 <__aeabi_fdiv+0x228>)
 8000c64:	3080      	adds	r0, #128	@ 0x80
 8000c66:	401c      	ands	r4, r3
 8000c68:	28fe      	cmp	r0, #254	@ 0xfe
 8000c6a:	dcb6      	bgt.n	8000bda <__aeabi_fdiv+0xc2>
 8000c6c:	01a4      	lsls	r4, r4, #6
 8000c6e:	0a64      	lsrs	r4, r4, #9
 8000c70:	b2c0      	uxtb	r0, r0
 8000c72:	e7a9      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000c74:	2480      	movs	r4, #128	@ 0x80
 8000c76:	2200      	movs	r2, #0
 8000c78:	20ff      	movs	r0, #255	@ 0xff
 8000c7a:	03e4      	lsls	r4, r4, #15
 8000c7c:	e7a4      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000c7e:	2380      	movs	r3, #128	@ 0x80
 8000c80:	03db      	lsls	r3, r3, #15
 8000c82:	421d      	tst	r5, r3
 8000c84:	d001      	beq.n	8000c8a <__aeabi_fdiv+0x172>
 8000c86:	421c      	tst	r4, r3
 8000c88:	d00b      	beq.n	8000ca2 <__aeabi_fdiv+0x18a>
 8000c8a:	2480      	movs	r4, #128	@ 0x80
 8000c8c:	03e4      	lsls	r4, r4, #15
 8000c8e:	432c      	orrs	r4, r5
 8000c90:	0264      	lsls	r4, r4, #9
 8000c92:	4642      	mov	r2, r8
 8000c94:	20ff      	movs	r0, #255	@ 0xff
 8000c96:	0a64      	lsrs	r4, r4, #9
 8000c98:	e796      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000c9a:	4646      	mov	r6, r8
 8000c9c:	002c      	movs	r4, r5
 8000c9e:	2380      	movs	r3, #128	@ 0x80
 8000ca0:	03db      	lsls	r3, r3, #15
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	0264      	lsls	r4, r4, #9
 8000ca6:	0032      	movs	r2, r6
 8000ca8:	20ff      	movs	r0, #255	@ 0xff
 8000caa:	0a64      	lsrs	r4, r4, #9
 8000cac:	e78c      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000cae:	016d      	lsls	r5, r5, #5
 8000cb0:	0160      	lsls	r0, r4, #5
 8000cb2:	4285      	cmp	r5, r0
 8000cb4:	d22d      	bcs.n	8000d12 <__aeabi_fdiv+0x1fa>
 8000cb6:	231b      	movs	r3, #27
 8000cb8:	2400      	movs	r4, #0
 8000cba:	3f01      	subs	r7, #1
 8000cbc:	2601      	movs	r6, #1
 8000cbe:	0029      	movs	r1, r5
 8000cc0:	0064      	lsls	r4, r4, #1
 8000cc2:	006d      	lsls	r5, r5, #1
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	db01      	blt.n	8000ccc <__aeabi_fdiv+0x1b4>
 8000cc8:	4285      	cmp	r5, r0
 8000cca:	d301      	bcc.n	8000cd0 <__aeabi_fdiv+0x1b8>
 8000ccc:	1a2d      	subs	r5, r5, r0
 8000cce:	4334      	orrs	r4, r6
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f3      	bne.n	8000cbe <__aeabi_fdiv+0x1a6>
 8000cd6:	1e6b      	subs	r3, r5, #1
 8000cd8:	419d      	sbcs	r5, r3
 8000cda:	432c      	orrs	r4, r5
 8000cdc:	e7b3      	b.n	8000c46 <__aeabi_fdiv+0x12e>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	1a1b      	subs	r3, r3, r0
 8000ce2:	2b1b      	cmp	r3, #27
 8000ce4:	dd00      	ble.n	8000ce8 <__aeabi_fdiv+0x1d0>
 8000ce6:	e76d      	b.n	8000bc4 <__aeabi_fdiv+0xac>
 8000ce8:	0021      	movs	r1, r4
 8000cea:	379e      	adds	r7, #158	@ 0x9e
 8000cec:	40d9      	lsrs	r1, r3
 8000cee:	40bc      	lsls	r4, r7
 8000cf0:	000b      	movs	r3, r1
 8000cf2:	1e61      	subs	r1, r4, #1
 8000cf4:	418c      	sbcs	r4, r1
 8000cf6:	4323      	orrs	r3, r4
 8000cf8:	0759      	lsls	r1, r3, #29
 8000cfa:	d004      	beq.n	8000d06 <__aeabi_fdiv+0x1ee>
 8000cfc:	210f      	movs	r1, #15
 8000cfe:	4019      	ands	r1, r3
 8000d00:	2904      	cmp	r1, #4
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fdiv+0x1ee>
 8000d04:	3304      	adds	r3, #4
 8000d06:	0159      	lsls	r1, r3, #5
 8000d08:	d413      	bmi.n	8000d32 <__aeabi_fdiv+0x21a>
 8000d0a:	019b      	lsls	r3, r3, #6
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	0a5c      	lsrs	r4, r3, #9
 8000d10:	e75a      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000d12:	231a      	movs	r3, #26
 8000d14:	2401      	movs	r4, #1
 8000d16:	1a2d      	subs	r5, r5, r0
 8000d18:	e7d0      	b.n	8000cbc <__aeabi_fdiv+0x1a4>
 8000d1a:	1e98      	subs	r0, r3, #2
 8000d1c:	4243      	negs	r3, r0
 8000d1e:	4158      	adcs	r0, r3
 8000d20:	4240      	negs	r0, r0
 8000d22:	0032      	movs	r2, r6
 8000d24:	2400      	movs	r4, #0
 8000d26:	b2c0      	uxtb	r0, r0
 8000d28:	e74e      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000d2a:	4642      	mov	r2, r8
 8000d2c:	20ff      	movs	r0, #255	@ 0xff
 8000d2e:	2400      	movs	r4, #0
 8000d30:	e74a      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000d32:	2001      	movs	r0, #1
 8000d34:	2400      	movs	r4, #0
 8000d36:	e747      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000d38:	0800ecf8 	.word	0x0800ecf8
 8000d3c:	0800ed38 	.word	0x0800ed38
 8000d40:	f7ffffff 	.word	0xf7ffffff

08000d44 <__eqsf2>:
 8000d44:	b570      	push	{r4, r5, r6, lr}
 8000d46:	0042      	lsls	r2, r0, #1
 8000d48:	024e      	lsls	r6, r1, #9
 8000d4a:	004c      	lsls	r4, r1, #1
 8000d4c:	0245      	lsls	r5, r0, #9
 8000d4e:	0a6d      	lsrs	r5, r5, #9
 8000d50:	0e12      	lsrs	r2, r2, #24
 8000d52:	0fc3      	lsrs	r3, r0, #31
 8000d54:	0a76      	lsrs	r6, r6, #9
 8000d56:	0e24      	lsrs	r4, r4, #24
 8000d58:	0fc9      	lsrs	r1, r1, #31
 8000d5a:	2aff      	cmp	r2, #255	@ 0xff
 8000d5c:	d010      	beq.n	8000d80 <__eqsf2+0x3c>
 8000d5e:	2cff      	cmp	r4, #255	@ 0xff
 8000d60:	d00c      	beq.n	8000d7c <__eqsf2+0x38>
 8000d62:	2001      	movs	r0, #1
 8000d64:	42a2      	cmp	r2, r4
 8000d66:	d10a      	bne.n	8000d7e <__eqsf2+0x3a>
 8000d68:	42b5      	cmp	r5, r6
 8000d6a:	d108      	bne.n	8000d7e <__eqsf2+0x3a>
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d00f      	beq.n	8000d90 <__eqsf2+0x4c>
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d104      	bne.n	8000d7e <__eqsf2+0x3a>
 8000d74:	0028      	movs	r0, r5
 8000d76:	1e43      	subs	r3, r0, #1
 8000d78:	4198      	sbcs	r0, r3
 8000d7a:	e000      	b.n	8000d7e <__eqsf2+0x3a>
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	2001      	movs	r0, #1
 8000d82:	2cff      	cmp	r4, #255	@ 0xff
 8000d84:	d1fb      	bne.n	8000d7e <__eqsf2+0x3a>
 8000d86:	4335      	orrs	r5, r6
 8000d88:	d1f9      	bne.n	8000d7e <__eqsf2+0x3a>
 8000d8a:	404b      	eors	r3, r1
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	e7f6      	b.n	8000d7e <__eqsf2+0x3a>
 8000d90:	2000      	movs	r0, #0
 8000d92:	e7f4      	b.n	8000d7e <__eqsf2+0x3a>

08000d94 <__gesf2>:
 8000d94:	b530      	push	{r4, r5, lr}
 8000d96:	0042      	lsls	r2, r0, #1
 8000d98:	0244      	lsls	r4, r0, #9
 8000d9a:	024d      	lsls	r5, r1, #9
 8000d9c:	0fc3      	lsrs	r3, r0, #31
 8000d9e:	0048      	lsls	r0, r1, #1
 8000da0:	0a64      	lsrs	r4, r4, #9
 8000da2:	0e12      	lsrs	r2, r2, #24
 8000da4:	0a6d      	lsrs	r5, r5, #9
 8000da6:	0e00      	lsrs	r0, r0, #24
 8000da8:	0fc9      	lsrs	r1, r1, #31
 8000daa:	2aff      	cmp	r2, #255	@ 0xff
 8000dac:	d018      	beq.n	8000de0 <__gesf2+0x4c>
 8000dae:	28ff      	cmp	r0, #255	@ 0xff
 8000db0:	d00a      	beq.n	8000dc8 <__gesf2+0x34>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d11e      	bne.n	8000df4 <__gesf2+0x60>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	d10a      	bne.n	8000dd0 <__gesf2+0x3c>
 8000dba:	2d00      	cmp	r5, #0
 8000dbc:	d029      	beq.n	8000e12 <__gesf2+0x7e>
 8000dbe:	2c00      	cmp	r4, #0
 8000dc0:	d12d      	bne.n	8000e1e <__gesf2+0x8a>
 8000dc2:	0048      	lsls	r0, r1, #1
 8000dc4:	3801      	subs	r0, #1
 8000dc6:	bd30      	pop	{r4, r5, pc}
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d125      	bne.n	8000e18 <__gesf2+0x84>
 8000dcc:	2a00      	cmp	r2, #0
 8000dce:	d101      	bne.n	8000dd4 <__gesf2+0x40>
 8000dd0:	2c00      	cmp	r4, #0
 8000dd2:	d0f6      	beq.n	8000dc2 <__gesf2+0x2e>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d019      	beq.n	8000e0c <__gesf2+0x78>
 8000dd8:	2001      	movs	r0, #1
 8000dda:	425b      	negs	r3, r3
 8000ddc:	4318      	orrs	r0, r3
 8000dde:	e7f2      	b.n	8000dc6 <__gesf2+0x32>
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	d119      	bne.n	8000e18 <__gesf2+0x84>
 8000de4:	28ff      	cmp	r0, #255	@ 0xff
 8000de6:	d1f7      	bne.n	8000dd8 <__gesf2+0x44>
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	d115      	bne.n	8000e18 <__gesf2+0x84>
 8000dec:	2000      	movs	r0, #0
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d1f2      	bne.n	8000dd8 <__gesf2+0x44>
 8000df2:	e7e8      	b.n	8000dc6 <__gesf2+0x32>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d0ef      	beq.n	8000dd8 <__gesf2+0x44>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d1ed      	bne.n	8000dd8 <__gesf2+0x44>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	dceb      	bgt.n	8000dd8 <__gesf2+0x44>
 8000e00:	db04      	blt.n	8000e0c <__gesf2+0x78>
 8000e02:	42ac      	cmp	r4, r5
 8000e04:	d8e8      	bhi.n	8000dd8 <__gesf2+0x44>
 8000e06:	2000      	movs	r0, #0
 8000e08:	42ac      	cmp	r4, r5
 8000e0a:	d2dc      	bcs.n	8000dc6 <__gesf2+0x32>
 8000e0c:	0058      	lsls	r0, r3, #1
 8000e0e:	3801      	subs	r0, #1
 8000e10:	e7d9      	b.n	8000dc6 <__gesf2+0x32>
 8000e12:	2c00      	cmp	r4, #0
 8000e14:	d0d7      	beq.n	8000dc6 <__gesf2+0x32>
 8000e16:	e7df      	b.n	8000dd8 <__gesf2+0x44>
 8000e18:	2002      	movs	r0, #2
 8000e1a:	4240      	negs	r0, r0
 8000e1c:	e7d3      	b.n	8000dc6 <__gesf2+0x32>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d1da      	bne.n	8000dd8 <__gesf2+0x44>
 8000e22:	e7ee      	b.n	8000e02 <__gesf2+0x6e>

08000e24 <__lesf2>:
 8000e24:	b530      	push	{r4, r5, lr}
 8000e26:	0042      	lsls	r2, r0, #1
 8000e28:	0244      	lsls	r4, r0, #9
 8000e2a:	024d      	lsls	r5, r1, #9
 8000e2c:	0fc3      	lsrs	r3, r0, #31
 8000e2e:	0048      	lsls	r0, r1, #1
 8000e30:	0a64      	lsrs	r4, r4, #9
 8000e32:	0e12      	lsrs	r2, r2, #24
 8000e34:	0a6d      	lsrs	r5, r5, #9
 8000e36:	0e00      	lsrs	r0, r0, #24
 8000e38:	0fc9      	lsrs	r1, r1, #31
 8000e3a:	2aff      	cmp	r2, #255	@ 0xff
 8000e3c:	d017      	beq.n	8000e6e <__lesf2+0x4a>
 8000e3e:	28ff      	cmp	r0, #255	@ 0xff
 8000e40:	d00a      	beq.n	8000e58 <__lesf2+0x34>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d11b      	bne.n	8000e7e <__lesf2+0x5a>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d10a      	bne.n	8000e60 <__lesf2+0x3c>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	d01d      	beq.n	8000e8a <__lesf2+0x66>
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	d12d      	bne.n	8000eae <__lesf2+0x8a>
 8000e52:	0048      	lsls	r0, r1, #1
 8000e54:	3801      	subs	r0, #1
 8000e56:	e011      	b.n	8000e7c <__lesf2+0x58>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d10e      	bne.n	8000e7a <__lesf2+0x56>
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d101      	bne.n	8000e64 <__lesf2+0x40>
 8000e60:	2c00      	cmp	r4, #0
 8000e62:	d0f6      	beq.n	8000e52 <__lesf2+0x2e>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d10c      	bne.n	8000e82 <__lesf2+0x5e>
 8000e68:	0058      	lsls	r0, r3, #1
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e006      	b.n	8000e7c <__lesf2+0x58>
 8000e6e:	2c00      	cmp	r4, #0
 8000e70:	d103      	bne.n	8000e7a <__lesf2+0x56>
 8000e72:	28ff      	cmp	r0, #255	@ 0xff
 8000e74:	d105      	bne.n	8000e82 <__lesf2+0x5e>
 8000e76:	2d00      	cmp	r5, #0
 8000e78:	d015      	beq.n	8000ea6 <__lesf2+0x82>
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	bd30      	pop	{r4, r5, pc}
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d106      	bne.n	8000e90 <__lesf2+0x6c>
 8000e82:	2001      	movs	r0, #1
 8000e84:	425b      	negs	r3, r3
 8000e86:	4318      	orrs	r0, r3
 8000e88:	e7f8      	b.n	8000e7c <__lesf2+0x58>
 8000e8a:	2c00      	cmp	r4, #0
 8000e8c:	d0f6      	beq.n	8000e7c <__lesf2+0x58>
 8000e8e:	e7f8      	b.n	8000e82 <__lesf2+0x5e>
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d1f6      	bne.n	8000e82 <__lesf2+0x5e>
 8000e94:	4282      	cmp	r2, r0
 8000e96:	dcf4      	bgt.n	8000e82 <__lesf2+0x5e>
 8000e98:	dbe6      	blt.n	8000e68 <__lesf2+0x44>
 8000e9a:	42ac      	cmp	r4, r5
 8000e9c:	d8f1      	bhi.n	8000e82 <__lesf2+0x5e>
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	42ac      	cmp	r4, r5
 8000ea2:	d2eb      	bcs.n	8000e7c <__lesf2+0x58>
 8000ea4:	e7e0      	b.n	8000e68 <__lesf2+0x44>
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d1ea      	bne.n	8000e82 <__lesf2+0x5e>
 8000eac:	e7e6      	b.n	8000e7c <__lesf2+0x58>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d1e7      	bne.n	8000e82 <__lesf2+0x5e>
 8000eb2:	e7f2      	b.n	8000e9a <__lesf2+0x76>

08000eb4 <__aeabi_fmul>:
 8000eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb6:	464f      	mov	r7, r9
 8000eb8:	4646      	mov	r6, r8
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	0044      	lsls	r4, r0, #1
 8000ebe:	b5c0      	push	{r6, r7, lr}
 8000ec0:	0246      	lsls	r6, r0, #9
 8000ec2:	1c0f      	adds	r7, r1, #0
 8000ec4:	0a76      	lsrs	r6, r6, #9
 8000ec6:	0e24      	lsrs	r4, r4, #24
 8000ec8:	0fc5      	lsrs	r5, r0, #31
 8000eca:	2c00      	cmp	r4, #0
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fmul+0x1c>
 8000ece:	e0da      	b.n	8001086 <__aeabi_fmul+0x1d2>
 8000ed0:	2cff      	cmp	r4, #255	@ 0xff
 8000ed2:	d074      	beq.n	8000fbe <__aeabi_fmul+0x10a>
 8000ed4:	2380      	movs	r3, #128	@ 0x80
 8000ed6:	00f6      	lsls	r6, r6, #3
 8000ed8:	04db      	lsls	r3, r3, #19
 8000eda:	431e      	orrs	r6, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	4699      	mov	r9, r3
 8000ee0:	469a      	mov	sl, r3
 8000ee2:	3c7f      	subs	r4, #127	@ 0x7f
 8000ee4:	027b      	lsls	r3, r7, #9
 8000ee6:	0a5b      	lsrs	r3, r3, #9
 8000ee8:	4698      	mov	r8, r3
 8000eea:	007b      	lsls	r3, r7, #1
 8000eec:	0e1b      	lsrs	r3, r3, #24
 8000eee:	0fff      	lsrs	r7, r7, #31
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d074      	beq.n	8000fde <__aeabi_fmul+0x12a>
 8000ef4:	2bff      	cmp	r3, #255	@ 0xff
 8000ef6:	d100      	bne.n	8000efa <__aeabi_fmul+0x46>
 8000ef8:	e08e      	b.n	8001018 <__aeabi_fmul+0x164>
 8000efa:	4642      	mov	r2, r8
 8000efc:	2180      	movs	r1, #128	@ 0x80
 8000efe:	00d2      	lsls	r2, r2, #3
 8000f00:	04c9      	lsls	r1, r1, #19
 8000f02:	4311      	orrs	r1, r2
 8000f04:	3b7f      	subs	r3, #127	@ 0x7f
 8000f06:	002a      	movs	r2, r5
 8000f08:	18e4      	adds	r4, r4, r3
 8000f0a:	464b      	mov	r3, r9
 8000f0c:	407a      	eors	r2, r7
 8000f0e:	4688      	mov	r8, r1
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	2b0a      	cmp	r3, #10
 8000f14:	dc75      	bgt.n	8001002 <__aeabi_fmul+0x14e>
 8000f16:	464b      	mov	r3, r9
 8000f18:	2000      	movs	r0, #0
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	dd0f      	ble.n	8000f3e <__aeabi_fmul+0x8a>
 8000f1e:	4649      	mov	r1, r9
 8000f20:	2301      	movs	r3, #1
 8000f22:	408b      	lsls	r3, r1
 8000f24:	21a6      	movs	r1, #166	@ 0xa6
 8000f26:	00c9      	lsls	r1, r1, #3
 8000f28:	420b      	tst	r3, r1
 8000f2a:	d169      	bne.n	8001000 <__aeabi_fmul+0x14c>
 8000f2c:	2190      	movs	r1, #144	@ 0x90
 8000f2e:	0089      	lsls	r1, r1, #2
 8000f30:	420b      	tst	r3, r1
 8000f32:	d000      	beq.n	8000f36 <__aeabi_fmul+0x82>
 8000f34:	e100      	b.n	8001138 <__aeabi_fmul+0x284>
 8000f36:	2188      	movs	r1, #136	@ 0x88
 8000f38:	4219      	tst	r1, r3
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_fmul+0x8a>
 8000f3c:	e0f5      	b.n	800112a <__aeabi_fmul+0x276>
 8000f3e:	4641      	mov	r1, r8
 8000f40:	0409      	lsls	r1, r1, #16
 8000f42:	0c09      	lsrs	r1, r1, #16
 8000f44:	4643      	mov	r3, r8
 8000f46:	0008      	movs	r0, r1
 8000f48:	0c35      	lsrs	r5, r6, #16
 8000f4a:	0436      	lsls	r6, r6, #16
 8000f4c:	0c1b      	lsrs	r3, r3, #16
 8000f4e:	0c36      	lsrs	r6, r6, #16
 8000f50:	4370      	muls	r0, r6
 8000f52:	4369      	muls	r1, r5
 8000f54:	435e      	muls	r6, r3
 8000f56:	435d      	muls	r5, r3
 8000f58:	1876      	adds	r6, r6, r1
 8000f5a:	0c03      	lsrs	r3, r0, #16
 8000f5c:	199b      	adds	r3, r3, r6
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d903      	bls.n	8000f6a <__aeabi_fmul+0xb6>
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	0249      	lsls	r1, r1, #9
 8000f66:	468c      	mov	ip, r1
 8000f68:	4465      	add	r5, ip
 8000f6a:	0400      	lsls	r0, r0, #16
 8000f6c:	0419      	lsls	r1, r3, #16
 8000f6e:	0c00      	lsrs	r0, r0, #16
 8000f70:	1809      	adds	r1, r1, r0
 8000f72:	018e      	lsls	r6, r1, #6
 8000f74:	1e70      	subs	r0, r6, #1
 8000f76:	4186      	sbcs	r6, r0
 8000f78:	0c1b      	lsrs	r3, r3, #16
 8000f7a:	0e89      	lsrs	r1, r1, #26
 8000f7c:	195b      	adds	r3, r3, r5
 8000f7e:	430e      	orrs	r6, r1
 8000f80:	019b      	lsls	r3, r3, #6
 8000f82:	431e      	orrs	r6, r3
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	d46c      	bmi.n	8001062 <__aeabi_fmul+0x1ae>
 8000f88:	0023      	movs	r3, r4
 8000f8a:	337f      	adds	r3, #127	@ 0x7f
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_fmul+0xde>
 8000f90:	e0b1      	b.n	80010f6 <__aeabi_fmul+0x242>
 8000f92:	0015      	movs	r5, r2
 8000f94:	0771      	lsls	r1, r6, #29
 8000f96:	d00b      	beq.n	8000fb0 <__aeabi_fmul+0xfc>
 8000f98:	200f      	movs	r0, #15
 8000f9a:	0021      	movs	r1, r4
 8000f9c:	4030      	ands	r0, r6
 8000f9e:	2804      	cmp	r0, #4
 8000fa0:	d006      	beq.n	8000fb0 <__aeabi_fmul+0xfc>
 8000fa2:	3604      	adds	r6, #4
 8000fa4:	0132      	lsls	r2, r6, #4
 8000fa6:	d503      	bpl.n	8000fb0 <__aeabi_fmul+0xfc>
 8000fa8:	4b6e      	ldr	r3, [pc, #440]	@ (8001164 <__aeabi_fmul+0x2b0>)
 8000faa:	401e      	ands	r6, r3
 8000fac:	000b      	movs	r3, r1
 8000fae:	3380      	adds	r3, #128	@ 0x80
 8000fb0:	2bfe      	cmp	r3, #254	@ 0xfe
 8000fb2:	dd00      	ble.n	8000fb6 <__aeabi_fmul+0x102>
 8000fb4:	e0bd      	b.n	8001132 <__aeabi_fmul+0x27e>
 8000fb6:	01b2      	lsls	r2, r6, #6
 8000fb8:	0a52      	lsrs	r2, r2, #9
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	e048      	b.n	8001050 <__aeabi_fmul+0x19c>
 8000fbe:	2e00      	cmp	r6, #0
 8000fc0:	d000      	beq.n	8000fc4 <__aeabi_fmul+0x110>
 8000fc2:	e092      	b.n	80010ea <__aeabi_fmul+0x236>
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	4699      	mov	r9, r3
 8000fc8:	3b06      	subs	r3, #6
 8000fca:	469a      	mov	sl, r3
 8000fcc:	027b      	lsls	r3, r7, #9
 8000fce:	0a5b      	lsrs	r3, r3, #9
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	007b      	lsls	r3, r7, #1
 8000fd4:	24ff      	movs	r4, #255	@ 0xff
 8000fd6:	0e1b      	lsrs	r3, r3, #24
 8000fd8:	0fff      	lsrs	r7, r7, #31
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d18a      	bne.n	8000ef4 <__aeabi_fmul+0x40>
 8000fde:	4642      	mov	r2, r8
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	d164      	bne.n	80010ae <__aeabi_fmul+0x1fa>
 8000fe4:	4649      	mov	r1, r9
 8000fe6:	3201      	adds	r2, #1
 8000fe8:	4311      	orrs	r1, r2
 8000fea:	4689      	mov	r9, r1
 8000fec:	290a      	cmp	r1, #10
 8000fee:	dc08      	bgt.n	8001002 <__aeabi_fmul+0x14e>
 8000ff0:	407d      	eors	r5, r7
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	b2ea      	uxtb	r2, r5
 8000ff6:	2902      	cmp	r1, #2
 8000ff8:	dc91      	bgt.n	8000f1e <__aeabi_fmul+0x6a>
 8000ffa:	0015      	movs	r5, r2
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	e027      	b.n	8001050 <__aeabi_fmul+0x19c>
 8001000:	0015      	movs	r5, r2
 8001002:	4653      	mov	r3, sl
 8001004:	2b02      	cmp	r3, #2
 8001006:	d100      	bne.n	800100a <__aeabi_fmul+0x156>
 8001008:	e093      	b.n	8001132 <__aeabi_fmul+0x27e>
 800100a:	2b03      	cmp	r3, #3
 800100c:	d01a      	beq.n	8001044 <__aeabi_fmul+0x190>
 800100e:	2b01      	cmp	r3, #1
 8001010:	d12c      	bne.n	800106c <__aeabi_fmul+0x1b8>
 8001012:	2300      	movs	r3, #0
 8001014:	2200      	movs	r2, #0
 8001016:	e01b      	b.n	8001050 <__aeabi_fmul+0x19c>
 8001018:	4643      	mov	r3, r8
 800101a:	34ff      	adds	r4, #255	@ 0xff
 800101c:	2b00      	cmp	r3, #0
 800101e:	d055      	beq.n	80010cc <__aeabi_fmul+0x218>
 8001020:	2103      	movs	r1, #3
 8001022:	464b      	mov	r3, r9
 8001024:	430b      	orrs	r3, r1
 8001026:	0019      	movs	r1, r3
 8001028:	2b0a      	cmp	r3, #10
 800102a:	dc00      	bgt.n	800102e <__aeabi_fmul+0x17a>
 800102c:	e092      	b.n	8001154 <__aeabi_fmul+0x2a0>
 800102e:	2b0f      	cmp	r3, #15
 8001030:	d000      	beq.n	8001034 <__aeabi_fmul+0x180>
 8001032:	e08c      	b.n	800114e <__aeabi_fmul+0x29a>
 8001034:	2280      	movs	r2, #128	@ 0x80
 8001036:	03d2      	lsls	r2, r2, #15
 8001038:	4216      	tst	r6, r2
 800103a:	d003      	beq.n	8001044 <__aeabi_fmul+0x190>
 800103c:	4643      	mov	r3, r8
 800103e:	4213      	tst	r3, r2
 8001040:	d100      	bne.n	8001044 <__aeabi_fmul+0x190>
 8001042:	e07d      	b.n	8001140 <__aeabi_fmul+0x28c>
 8001044:	2280      	movs	r2, #128	@ 0x80
 8001046:	03d2      	lsls	r2, r2, #15
 8001048:	4332      	orrs	r2, r6
 800104a:	0252      	lsls	r2, r2, #9
 800104c:	0a52      	lsrs	r2, r2, #9
 800104e:	23ff      	movs	r3, #255	@ 0xff
 8001050:	05d8      	lsls	r0, r3, #23
 8001052:	07ed      	lsls	r5, r5, #31
 8001054:	4310      	orrs	r0, r2
 8001056:	4328      	orrs	r0, r5
 8001058:	bce0      	pop	{r5, r6, r7}
 800105a:	46ba      	mov	sl, r7
 800105c:	46b1      	mov	r9, r6
 800105e:	46a8      	mov	r8, r5
 8001060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001062:	2301      	movs	r3, #1
 8001064:	0015      	movs	r5, r2
 8001066:	0871      	lsrs	r1, r6, #1
 8001068:	401e      	ands	r6, r3
 800106a:	430e      	orrs	r6, r1
 800106c:	0023      	movs	r3, r4
 800106e:	3380      	adds	r3, #128	@ 0x80
 8001070:	1c61      	adds	r1, r4, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	dd41      	ble.n	80010fa <__aeabi_fmul+0x246>
 8001076:	0772      	lsls	r2, r6, #29
 8001078:	d094      	beq.n	8000fa4 <__aeabi_fmul+0xf0>
 800107a:	220f      	movs	r2, #15
 800107c:	4032      	ands	r2, r6
 800107e:	2a04      	cmp	r2, #4
 8001080:	d000      	beq.n	8001084 <__aeabi_fmul+0x1d0>
 8001082:	e78e      	b.n	8000fa2 <__aeabi_fmul+0xee>
 8001084:	e78e      	b.n	8000fa4 <__aeabi_fmul+0xf0>
 8001086:	2e00      	cmp	r6, #0
 8001088:	d105      	bne.n	8001096 <__aeabi_fmul+0x1e2>
 800108a:	2304      	movs	r3, #4
 800108c:	4699      	mov	r9, r3
 800108e:	3b03      	subs	r3, #3
 8001090:	2400      	movs	r4, #0
 8001092:	469a      	mov	sl, r3
 8001094:	e726      	b.n	8000ee4 <__aeabi_fmul+0x30>
 8001096:	0030      	movs	r0, r6
 8001098:	f002 fb68 	bl	800376c <__clzsi2>
 800109c:	2476      	movs	r4, #118	@ 0x76
 800109e:	1f43      	subs	r3, r0, #5
 80010a0:	409e      	lsls	r6, r3
 80010a2:	2300      	movs	r3, #0
 80010a4:	4264      	negs	r4, r4
 80010a6:	4699      	mov	r9, r3
 80010a8:	469a      	mov	sl, r3
 80010aa:	1a24      	subs	r4, r4, r0
 80010ac:	e71a      	b.n	8000ee4 <__aeabi_fmul+0x30>
 80010ae:	4640      	mov	r0, r8
 80010b0:	f002 fb5c 	bl	800376c <__clzsi2>
 80010b4:	464b      	mov	r3, r9
 80010b6:	1a24      	subs	r4, r4, r0
 80010b8:	3c76      	subs	r4, #118	@ 0x76
 80010ba:	2b0a      	cmp	r3, #10
 80010bc:	dca1      	bgt.n	8001002 <__aeabi_fmul+0x14e>
 80010be:	4643      	mov	r3, r8
 80010c0:	3805      	subs	r0, #5
 80010c2:	4083      	lsls	r3, r0
 80010c4:	407d      	eors	r5, r7
 80010c6:	4698      	mov	r8, r3
 80010c8:	b2ea      	uxtb	r2, r5
 80010ca:	e724      	b.n	8000f16 <__aeabi_fmul+0x62>
 80010cc:	464a      	mov	r2, r9
 80010ce:	3302      	adds	r3, #2
 80010d0:	4313      	orrs	r3, r2
 80010d2:	002a      	movs	r2, r5
 80010d4:	407a      	eors	r2, r7
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	2b0a      	cmp	r3, #10
 80010da:	dc92      	bgt.n	8001002 <__aeabi_fmul+0x14e>
 80010dc:	4649      	mov	r1, r9
 80010de:	0015      	movs	r5, r2
 80010e0:	2900      	cmp	r1, #0
 80010e2:	d026      	beq.n	8001132 <__aeabi_fmul+0x27e>
 80010e4:	4699      	mov	r9, r3
 80010e6:	2002      	movs	r0, #2
 80010e8:	e719      	b.n	8000f1e <__aeabi_fmul+0x6a>
 80010ea:	230c      	movs	r3, #12
 80010ec:	4699      	mov	r9, r3
 80010ee:	3b09      	subs	r3, #9
 80010f0:	24ff      	movs	r4, #255	@ 0xff
 80010f2:	469a      	mov	sl, r3
 80010f4:	e6f6      	b.n	8000ee4 <__aeabi_fmul+0x30>
 80010f6:	0015      	movs	r5, r2
 80010f8:	0021      	movs	r1, r4
 80010fa:	2201      	movs	r2, #1
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b1b      	cmp	r3, #27
 8001100:	dd00      	ble.n	8001104 <__aeabi_fmul+0x250>
 8001102:	e786      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001104:	319e      	adds	r1, #158	@ 0x9e
 8001106:	0032      	movs	r2, r6
 8001108:	408e      	lsls	r6, r1
 800110a:	40da      	lsrs	r2, r3
 800110c:	1e73      	subs	r3, r6, #1
 800110e:	419e      	sbcs	r6, r3
 8001110:	4332      	orrs	r2, r6
 8001112:	0753      	lsls	r3, r2, #29
 8001114:	d004      	beq.n	8001120 <__aeabi_fmul+0x26c>
 8001116:	230f      	movs	r3, #15
 8001118:	4013      	ands	r3, r2
 800111a:	2b04      	cmp	r3, #4
 800111c:	d000      	beq.n	8001120 <__aeabi_fmul+0x26c>
 800111e:	3204      	adds	r2, #4
 8001120:	0153      	lsls	r3, r2, #5
 8001122:	d510      	bpl.n	8001146 <__aeabi_fmul+0x292>
 8001124:	2301      	movs	r3, #1
 8001126:	2200      	movs	r2, #0
 8001128:	e792      	b.n	8001050 <__aeabi_fmul+0x19c>
 800112a:	003d      	movs	r5, r7
 800112c:	4646      	mov	r6, r8
 800112e:	4682      	mov	sl, r0
 8001130:	e767      	b.n	8001002 <__aeabi_fmul+0x14e>
 8001132:	23ff      	movs	r3, #255	@ 0xff
 8001134:	2200      	movs	r2, #0
 8001136:	e78b      	b.n	8001050 <__aeabi_fmul+0x19c>
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	2500      	movs	r5, #0
 800113c:	03d2      	lsls	r2, r2, #15
 800113e:	e786      	b.n	800104e <__aeabi_fmul+0x19a>
 8001140:	003d      	movs	r5, r7
 8001142:	431a      	orrs	r2, r3
 8001144:	e783      	b.n	800104e <__aeabi_fmul+0x19a>
 8001146:	0192      	lsls	r2, r2, #6
 8001148:	2300      	movs	r3, #0
 800114a:	0a52      	lsrs	r2, r2, #9
 800114c:	e780      	b.n	8001050 <__aeabi_fmul+0x19c>
 800114e:	003d      	movs	r5, r7
 8001150:	4646      	mov	r6, r8
 8001152:	e777      	b.n	8001044 <__aeabi_fmul+0x190>
 8001154:	002a      	movs	r2, r5
 8001156:	2301      	movs	r3, #1
 8001158:	407a      	eors	r2, r7
 800115a:	408b      	lsls	r3, r1
 800115c:	2003      	movs	r0, #3
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	e6e9      	b.n	8000f36 <__aeabi_fmul+0x82>
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	f7ffffff 	.word	0xf7ffffff

08001168 <__aeabi_fsub>:
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116a:	4647      	mov	r7, r8
 800116c:	46ce      	mov	lr, r9
 800116e:	0243      	lsls	r3, r0, #9
 8001170:	b580      	push	{r7, lr}
 8001172:	0a5f      	lsrs	r7, r3, #9
 8001174:	099b      	lsrs	r3, r3, #6
 8001176:	0045      	lsls	r5, r0, #1
 8001178:	004a      	lsls	r2, r1, #1
 800117a:	469c      	mov	ip, r3
 800117c:	024b      	lsls	r3, r1, #9
 800117e:	0fc4      	lsrs	r4, r0, #31
 8001180:	0fce      	lsrs	r6, r1, #31
 8001182:	0e2d      	lsrs	r5, r5, #24
 8001184:	0a58      	lsrs	r0, r3, #9
 8001186:	0e12      	lsrs	r2, r2, #24
 8001188:	0999      	lsrs	r1, r3, #6
 800118a:	2aff      	cmp	r2, #255	@ 0xff
 800118c:	d06b      	beq.n	8001266 <__aeabi_fsub+0xfe>
 800118e:	2301      	movs	r3, #1
 8001190:	405e      	eors	r6, r3
 8001192:	1aab      	subs	r3, r5, r2
 8001194:	42b4      	cmp	r4, r6
 8001196:	d04b      	beq.n	8001230 <__aeabi_fsub+0xc8>
 8001198:	2b00      	cmp	r3, #0
 800119a:	dc00      	bgt.n	800119e <__aeabi_fsub+0x36>
 800119c:	e0ff      	b.n	800139e <__aeabi_fsub+0x236>
 800119e:	2a00      	cmp	r2, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x3c>
 80011a2:	e088      	b.n	80012b6 <__aeabi_fsub+0x14e>
 80011a4:	2dff      	cmp	r5, #255	@ 0xff
 80011a6:	d100      	bne.n	80011aa <__aeabi_fsub+0x42>
 80011a8:	e0ef      	b.n	800138a <__aeabi_fsub+0x222>
 80011aa:	2280      	movs	r2, #128	@ 0x80
 80011ac:	04d2      	lsls	r2, r2, #19
 80011ae:	4311      	orrs	r1, r2
 80011b0:	2001      	movs	r0, #1
 80011b2:	2b1b      	cmp	r3, #27
 80011b4:	dc08      	bgt.n	80011c8 <__aeabi_fsub+0x60>
 80011b6:	0008      	movs	r0, r1
 80011b8:	2220      	movs	r2, #32
 80011ba:	40d8      	lsrs	r0, r3
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	4099      	lsls	r1, r3
 80011c0:	000b      	movs	r3, r1
 80011c2:	1e5a      	subs	r2, r3, #1
 80011c4:	4193      	sbcs	r3, r2
 80011c6:	4318      	orrs	r0, r3
 80011c8:	4663      	mov	r3, ip
 80011ca:	1a1b      	subs	r3, r3, r0
 80011cc:	469c      	mov	ip, r3
 80011ce:	4663      	mov	r3, ip
 80011d0:	015b      	lsls	r3, r3, #5
 80011d2:	d400      	bmi.n	80011d6 <__aeabi_fsub+0x6e>
 80011d4:	e0cd      	b.n	8001372 <__aeabi_fsub+0x20a>
 80011d6:	4663      	mov	r3, ip
 80011d8:	019f      	lsls	r7, r3, #6
 80011da:	09bf      	lsrs	r7, r7, #6
 80011dc:	0038      	movs	r0, r7
 80011de:	f002 fac5 	bl	800376c <__clzsi2>
 80011e2:	003b      	movs	r3, r7
 80011e4:	3805      	subs	r0, #5
 80011e6:	4083      	lsls	r3, r0
 80011e8:	4285      	cmp	r5, r0
 80011ea:	dc00      	bgt.n	80011ee <__aeabi_fsub+0x86>
 80011ec:	e0a2      	b.n	8001334 <__aeabi_fsub+0x1cc>
 80011ee:	4ab7      	ldr	r2, [pc, #732]	@ (80014cc <__aeabi_fsub+0x364>)
 80011f0:	1a2d      	subs	r5, r5, r0
 80011f2:	401a      	ands	r2, r3
 80011f4:	4694      	mov	ip, r2
 80011f6:	075a      	lsls	r2, r3, #29
 80011f8:	d100      	bne.n	80011fc <__aeabi_fsub+0x94>
 80011fa:	e0c3      	b.n	8001384 <__aeabi_fsub+0x21c>
 80011fc:	220f      	movs	r2, #15
 80011fe:	4013      	ands	r3, r2
 8001200:	2b04      	cmp	r3, #4
 8001202:	d100      	bne.n	8001206 <__aeabi_fsub+0x9e>
 8001204:	e0be      	b.n	8001384 <__aeabi_fsub+0x21c>
 8001206:	2304      	movs	r3, #4
 8001208:	4698      	mov	r8, r3
 800120a:	44c4      	add	ip, r8
 800120c:	4663      	mov	r3, ip
 800120e:	015b      	lsls	r3, r3, #5
 8001210:	d400      	bmi.n	8001214 <__aeabi_fsub+0xac>
 8001212:	e0b7      	b.n	8001384 <__aeabi_fsub+0x21c>
 8001214:	1c68      	adds	r0, r5, #1
 8001216:	2dfe      	cmp	r5, #254	@ 0xfe
 8001218:	d000      	beq.n	800121c <__aeabi_fsub+0xb4>
 800121a:	e0a5      	b.n	8001368 <__aeabi_fsub+0x200>
 800121c:	20ff      	movs	r0, #255	@ 0xff
 800121e:	2200      	movs	r2, #0
 8001220:	05c0      	lsls	r0, r0, #23
 8001222:	4310      	orrs	r0, r2
 8001224:	07e4      	lsls	r4, r4, #31
 8001226:	4320      	orrs	r0, r4
 8001228:	bcc0      	pop	{r6, r7}
 800122a:	46b9      	mov	r9, r7
 800122c:	46b0      	mov	r8, r6
 800122e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001230:	2b00      	cmp	r3, #0
 8001232:	dc00      	bgt.n	8001236 <__aeabi_fsub+0xce>
 8001234:	e1eb      	b.n	800160e <__aeabi_fsub+0x4a6>
 8001236:	2a00      	cmp	r2, #0
 8001238:	d046      	beq.n	80012c8 <__aeabi_fsub+0x160>
 800123a:	2dff      	cmp	r5, #255	@ 0xff
 800123c:	d100      	bne.n	8001240 <__aeabi_fsub+0xd8>
 800123e:	e0a4      	b.n	800138a <__aeabi_fsub+0x222>
 8001240:	2280      	movs	r2, #128	@ 0x80
 8001242:	04d2      	lsls	r2, r2, #19
 8001244:	4311      	orrs	r1, r2
 8001246:	2b1b      	cmp	r3, #27
 8001248:	dc00      	bgt.n	800124c <__aeabi_fsub+0xe4>
 800124a:	e0fb      	b.n	8001444 <__aeabi_fsub+0x2dc>
 800124c:	2305      	movs	r3, #5
 800124e:	4698      	mov	r8, r3
 8001250:	002b      	movs	r3, r5
 8001252:	44c4      	add	ip, r8
 8001254:	4662      	mov	r2, ip
 8001256:	08d7      	lsrs	r7, r2, #3
 8001258:	2bff      	cmp	r3, #255	@ 0xff
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0xf6>
 800125c:	e095      	b.n	800138a <__aeabi_fsub+0x222>
 800125e:	027a      	lsls	r2, r7, #9
 8001260:	0a52      	lsrs	r2, r2, #9
 8001262:	b2d8      	uxtb	r0, r3
 8001264:	e7dc      	b.n	8001220 <__aeabi_fsub+0xb8>
 8001266:	002b      	movs	r3, r5
 8001268:	3bff      	subs	r3, #255	@ 0xff
 800126a:	4699      	mov	r9, r3
 800126c:	2900      	cmp	r1, #0
 800126e:	d118      	bne.n	80012a2 <__aeabi_fsub+0x13a>
 8001270:	2301      	movs	r3, #1
 8001272:	405e      	eors	r6, r3
 8001274:	42b4      	cmp	r4, r6
 8001276:	d100      	bne.n	800127a <__aeabi_fsub+0x112>
 8001278:	e0ca      	b.n	8001410 <__aeabi_fsub+0x2a8>
 800127a:	464b      	mov	r3, r9
 800127c:	2b00      	cmp	r3, #0
 800127e:	d02d      	beq.n	80012dc <__aeabi_fsub+0x174>
 8001280:	2d00      	cmp	r5, #0
 8001282:	d000      	beq.n	8001286 <__aeabi_fsub+0x11e>
 8001284:	e13c      	b.n	8001500 <__aeabi_fsub+0x398>
 8001286:	23ff      	movs	r3, #255	@ 0xff
 8001288:	4664      	mov	r4, ip
 800128a:	2c00      	cmp	r4, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_fsub+0x128>
 800128e:	e15f      	b.n	8001550 <__aeabi_fsub+0x3e8>
 8001290:	1e5d      	subs	r5, r3, #1
 8001292:	2b01      	cmp	r3, #1
 8001294:	d100      	bne.n	8001298 <__aeabi_fsub+0x130>
 8001296:	e174      	b.n	8001582 <__aeabi_fsub+0x41a>
 8001298:	0034      	movs	r4, r6
 800129a:	2bff      	cmp	r3, #255	@ 0xff
 800129c:	d074      	beq.n	8001388 <__aeabi_fsub+0x220>
 800129e:	002b      	movs	r3, r5
 80012a0:	e103      	b.n	80014aa <__aeabi_fsub+0x342>
 80012a2:	42b4      	cmp	r4, r6
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x140>
 80012a6:	e09c      	b.n	80013e2 <__aeabi_fsub+0x27a>
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d017      	beq.n	80012dc <__aeabi_fsub+0x174>
 80012ac:	2d00      	cmp	r5, #0
 80012ae:	d0ea      	beq.n	8001286 <__aeabi_fsub+0x11e>
 80012b0:	0007      	movs	r7, r0
 80012b2:	0034      	movs	r4, r6
 80012b4:	e06c      	b.n	8001390 <__aeabi_fsub+0x228>
 80012b6:	2900      	cmp	r1, #0
 80012b8:	d0cc      	beq.n	8001254 <__aeabi_fsub+0xec>
 80012ba:	1e5a      	subs	r2, r3, #1
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d02b      	beq.n	8001318 <__aeabi_fsub+0x1b0>
 80012c0:	2bff      	cmp	r3, #255	@ 0xff
 80012c2:	d062      	beq.n	800138a <__aeabi_fsub+0x222>
 80012c4:	0013      	movs	r3, r2
 80012c6:	e773      	b.n	80011b0 <__aeabi_fsub+0x48>
 80012c8:	2900      	cmp	r1, #0
 80012ca:	d0c3      	beq.n	8001254 <__aeabi_fsub+0xec>
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d100      	bne.n	80012d4 <__aeabi_fsub+0x16c>
 80012d2:	e11e      	b.n	8001512 <__aeabi_fsub+0x3aa>
 80012d4:	2bff      	cmp	r3, #255	@ 0xff
 80012d6:	d058      	beq.n	800138a <__aeabi_fsub+0x222>
 80012d8:	0013      	movs	r3, r2
 80012da:	e7b4      	b.n	8001246 <__aeabi_fsub+0xde>
 80012dc:	22fe      	movs	r2, #254	@ 0xfe
 80012de:	1c6b      	adds	r3, r5, #1
 80012e0:	421a      	tst	r2, r3
 80012e2:	d10d      	bne.n	8001300 <__aeabi_fsub+0x198>
 80012e4:	2d00      	cmp	r5, #0
 80012e6:	d060      	beq.n	80013aa <__aeabi_fsub+0x242>
 80012e8:	4663      	mov	r3, ip
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_fsub+0x188>
 80012ee:	e120      	b.n	8001532 <__aeabi_fsub+0x3ca>
 80012f0:	2900      	cmp	r1, #0
 80012f2:	d000      	beq.n	80012f6 <__aeabi_fsub+0x18e>
 80012f4:	e128      	b.n	8001548 <__aeabi_fsub+0x3e0>
 80012f6:	2280      	movs	r2, #128	@ 0x80
 80012f8:	2400      	movs	r4, #0
 80012fa:	20ff      	movs	r0, #255	@ 0xff
 80012fc:	03d2      	lsls	r2, r2, #15
 80012fe:	e78f      	b.n	8001220 <__aeabi_fsub+0xb8>
 8001300:	4663      	mov	r3, ip
 8001302:	1a5f      	subs	r7, r3, r1
 8001304:	017b      	lsls	r3, r7, #5
 8001306:	d500      	bpl.n	800130a <__aeabi_fsub+0x1a2>
 8001308:	e0fe      	b.n	8001508 <__aeabi_fsub+0x3a0>
 800130a:	2f00      	cmp	r7, #0
 800130c:	d000      	beq.n	8001310 <__aeabi_fsub+0x1a8>
 800130e:	e765      	b.n	80011dc <__aeabi_fsub+0x74>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2200      	movs	r2, #0
 8001316:	e783      	b.n	8001220 <__aeabi_fsub+0xb8>
 8001318:	4663      	mov	r3, ip
 800131a:	1a59      	subs	r1, r3, r1
 800131c:	014b      	lsls	r3, r1, #5
 800131e:	d400      	bmi.n	8001322 <__aeabi_fsub+0x1ba>
 8001320:	e119      	b.n	8001556 <__aeabi_fsub+0x3ee>
 8001322:	018f      	lsls	r7, r1, #6
 8001324:	09bf      	lsrs	r7, r7, #6
 8001326:	0038      	movs	r0, r7
 8001328:	f002 fa20 	bl	800376c <__clzsi2>
 800132c:	003b      	movs	r3, r7
 800132e:	3805      	subs	r0, #5
 8001330:	4083      	lsls	r3, r0
 8001332:	2501      	movs	r5, #1
 8001334:	2220      	movs	r2, #32
 8001336:	1b40      	subs	r0, r0, r5
 8001338:	3001      	adds	r0, #1
 800133a:	1a12      	subs	r2, r2, r0
 800133c:	0019      	movs	r1, r3
 800133e:	4093      	lsls	r3, r2
 8001340:	40c1      	lsrs	r1, r0
 8001342:	1e5a      	subs	r2, r3, #1
 8001344:	4193      	sbcs	r3, r2
 8001346:	4319      	orrs	r1, r3
 8001348:	468c      	mov	ip, r1
 800134a:	1e0b      	subs	r3, r1, #0
 800134c:	d0e1      	beq.n	8001312 <__aeabi_fsub+0x1aa>
 800134e:	075b      	lsls	r3, r3, #29
 8001350:	d100      	bne.n	8001354 <__aeabi_fsub+0x1ec>
 8001352:	e152      	b.n	80015fa <__aeabi_fsub+0x492>
 8001354:	230f      	movs	r3, #15
 8001356:	2500      	movs	r5, #0
 8001358:	400b      	ands	r3, r1
 800135a:	2b04      	cmp	r3, #4
 800135c:	d000      	beq.n	8001360 <__aeabi_fsub+0x1f8>
 800135e:	e752      	b.n	8001206 <__aeabi_fsub+0x9e>
 8001360:	2001      	movs	r0, #1
 8001362:	014a      	lsls	r2, r1, #5
 8001364:	d400      	bmi.n	8001368 <__aeabi_fsub+0x200>
 8001366:	e092      	b.n	800148e <__aeabi_fsub+0x326>
 8001368:	b2c0      	uxtb	r0, r0
 800136a:	4663      	mov	r3, ip
 800136c:	019a      	lsls	r2, r3, #6
 800136e:	0a52      	lsrs	r2, r2, #9
 8001370:	e756      	b.n	8001220 <__aeabi_fsub+0xb8>
 8001372:	4663      	mov	r3, ip
 8001374:	075b      	lsls	r3, r3, #29
 8001376:	d005      	beq.n	8001384 <__aeabi_fsub+0x21c>
 8001378:	230f      	movs	r3, #15
 800137a:	4662      	mov	r2, ip
 800137c:	4013      	ands	r3, r2
 800137e:	2b04      	cmp	r3, #4
 8001380:	d000      	beq.n	8001384 <__aeabi_fsub+0x21c>
 8001382:	e740      	b.n	8001206 <__aeabi_fsub+0x9e>
 8001384:	002b      	movs	r3, r5
 8001386:	e765      	b.n	8001254 <__aeabi_fsub+0xec>
 8001388:	0007      	movs	r7, r0
 800138a:	2f00      	cmp	r7, #0
 800138c:	d100      	bne.n	8001390 <__aeabi_fsub+0x228>
 800138e:	e745      	b.n	800121c <__aeabi_fsub+0xb4>
 8001390:	2280      	movs	r2, #128	@ 0x80
 8001392:	03d2      	lsls	r2, r2, #15
 8001394:	433a      	orrs	r2, r7
 8001396:	0252      	lsls	r2, r2, #9
 8001398:	20ff      	movs	r0, #255	@ 0xff
 800139a:	0a52      	lsrs	r2, r2, #9
 800139c:	e740      	b.n	8001220 <__aeabi_fsub+0xb8>
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d179      	bne.n	8001496 <__aeabi_fsub+0x32e>
 80013a2:	22fe      	movs	r2, #254	@ 0xfe
 80013a4:	1c6b      	adds	r3, r5, #1
 80013a6:	421a      	tst	r2, r3
 80013a8:	d1aa      	bne.n	8001300 <__aeabi_fsub+0x198>
 80013aa:	4663      	mov	r3, ip
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d100      	bne.n	80013b2 <__aeabi_fsub+0x24a>
 80013b0:	e0f5      	b.n	800159e <__aeabi_fsub+0x436>
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d100      	bne.n	80013b8 <__aeabi_fsub+0x250>
 80013b6:	e0d1      	b.n	800155c <__aeabi_fsub+0x3f4>
 80013b8:	1a5f      	subs	r7, r3, r1
 80013ba:	2380      	movs	r3, #128	@ 0x80
 80013bc:	04db      	lsls	r3, r3, #19
 80013be:	421f      	tst	r7, r3
 80013c0:	d100      	bne.n	80013c4 <__aeabi_fsub+0x25c>
 80013c2:	e10e      	b.n	80015e2 <__aeabi_fsub+0x47a>
 80013c4:	4662      	mov	r2, ip
 80013c6:	2401      	movs	r4, #1
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4694      	mov	ip, r2
 80013cc:	2000      	movs	r0, #0
 80013ce:	4034      	ands	r4, r6
 80013d0:	2a00      	cmp	r2, #0
 80013d2:	d100      	bne.n	80013d6 <__aeabi_fsub+0x26e>
 80013d4:	e724      	b.n	8001220 <__aeabi_fsub+0xb8>
 80013d6:	2001      	movs	r0, #1
 80013d8:	421a      	tst	r2, r3
 80013da:	d1c6      	bne.n	800136a <__aeabi_fsub+0x202>
 80013dc:	2300      	movs	r3, #0
 80013de:	08d7      	lsrs	r7, r2, #3
 80013e0:	e73d      	b.n	800125e <__aeabi_fsub+0xf6>
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d017      	beq.n	8001416 <__aeabi_fsub+0x2ae>
 80013e6:	2d00      	cmp	r5, #0
 80013e8:	d000      	beq.n	80013ec <__aeabi_fsub+0x284>
 80013ea:	e0af      	b.n	800154c <__aeabi_fsub+0x3e4>
 80013ec:	23ff      	movs	r3, #255	@ 0xff
 80013ee:	4665      	mov	r5, ip
 80013f0:	2d00      	cmp	r5, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_fsub+0x28e>
 80013f4:	e0ad      	b.n	8001552 <__aeabi_fsub+0x3ea>
 80013f6:	1e5e      	subs	r6, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d100      	bne.n	80013fe <__aeabi_fsub+0x296>
 80013fc:	e089      	b.n	8001512 <__aeabi_fsub+0x3aa>
 80013fe:	2bff      	cmp	r3, #255	@ 0xff
 8001400:	d0c2      	beq.n	8001388 <__aeabi_fsub+0x220>
 8001402:	2e1b      	cmp	r6, #27
 8001404:	dc00      	bgt.n	8001408 <__aeabi_fsub+0x2a0>
 8001406:	e0ab      	b.n	8001560 <__aeabi_fsub+0x3f8>
 8001408:	1d4b      	adds	r3, r1, #5
 800140a:	469c      	mov	ip, r3
 800140c:	0013      	movs	r3, r2
 800140e:	e721      	b.n	8001254 <__aeabi_fsub+0xec>
 8001410:	464b      	mov	r3, r9
 8001412:	2b00      	cmp	r3, #0
 8001414:	d170      	bne.n	80014f8 <__aeabi_fsub+0x390>
 8001416:	22fe      	movs	r2, #254	@ 0xfe
 8001418:	1c6b      	adds	r3, r5, #1
 800141a:	421a      	tst	r2, r3
 800141c:	d15e      	bne.n	80014dc <__aeabi_fsub+0x374>
 800141e:	2d00      	cmp	r5, #0
 8001420:	d000      	beq.n	8001424 <__aeabi_fsub+0x2bc>
 8001422:	e0c3      	b.n	80015ac <__aeabi_fsub+0x444>
 8001424:	4663      	mov	r3, ip
 8001426:	2b00      	cmp	r3, #0
 8001428:	d100      	bne.n	800142c <__aeabi_fsub+0x2c4>
 800142a:	e0d0      	b.n	80015ce <__aeabi_fsub+0x466>
 800142c:	2900      	cmp	r1, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_fsub+0x2ca>
 8001430:	e094      	b.n	800155c <__aeabi_fsub+0x3f4>
 8001432:	000a      	movs	r2, r1
 8001434:	4462      	add	r2, ip
 8001436:	0153      	lsls	r3, r2, #5
 8001438:	d400      	bmi.n	800143c <__aeabi_fsub+0x2d4>
 800143a:	e0d8      	b.n	80015ee <__aeabi_fsub+0x486>
 800143c:	0192      	lsls	r2, r2, #6
 800143e:	2001      	movs	r0, #1
 8001440:	0a52      	lsrs	r2, r2, #9
 8001442:	e6ed      	b.n	8001220 <__aeabi_fsub+0xb8>
 8001444:	0008      	movs	r0, r1
 8001446:	2220      	movs	r2, #32
 8001448:	40d8      	lsrs	r0, r3
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	4099      	lsls	r1, r3
 800144e:	000b      	movs	r3, r1
 8001450:	1e5a      	subs	r2, r3, #1
 8001452:	4193      	sbcs	r3, r2
 8001454:	4303      	orrs	r3, r0
 8001456:	449c      	add	ip, r3
 8001458:	4663      	mov	r3, ip
 800145a:	015b      	lsls	r3, r3, #5
 800145c:	d589      	bpl.n	8001372 <__aeabi_fsub+0x20a>
 800145e:	3501      	adds	r5, #1
 8001460:	2dff      	cmp	r5, #255	@ 0xff
 8001462:	d100      	bne.n	8001466 <__aeabi_fsub+0x2fe>
 8001464:	e6da      	b.n	800121c <__aeabi_fsub+0xb4>
 8001466:	4662      	mov	r2, ip
 8001468:	2301      	movs	r3, #1
 800146a:	4919      	ldr	r1, [pc, #100]	@ (80014d0 <__aeabi_fsub+0x368>)
 800146c:	4013      	ands	r3, r2
 800146e:	0852      	lsrs	r2, r2, #1
 8001470:	400a      	ands	r2, r1
 8001472:	431a      	orrs	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	4694      	mov	ip, r2
 8001478:	075b      	lsls	r3, r3, #29
 800147a:	d004      	beq.n	8001486 <__aeabi_fsub+0x31e>
 800147c:	230f      	movs	r3, #15
 800147e:	4013      	ands	r3, r2
 8001480:	2b04      	cmp	r3, #4
 8001482:	d000      	beq.n	8001486 <__aeabi_fsub+0x31e>
 8001484:	e6bf      	b.n	8001206 <__aeabi_fsub+0x9e>
 8001486:	4663      	mov	r3, ip
 8001488:	015b      	lsls	r3, r3, #5
 800148a:	d500      	bpl.n	800148e <__aeabi_fsub+0x326>
 800148c:	e6c2      	b.n	8001214 <__aeabi_fsub+0xac>
 800148e:	4663      	mov	r3, ip
 8001490:	08df      	lsrs	r7, r3, #3
 8001492:	002b      	movs	r3, r5
 8001494:	e6e3      	b.n	800125e <__aeabi_fsub+0xf6>
 8001496:	1b53      	subs	r3, r2, r5
 8001498:	2d00      	cmp	r5, #0
 800149a:	d100      	bne.n	800149e <__aeabi_fsub+0x336>
 800149c:	e6f4      	b.n	8001288 <__aeabi_fsub+0x120>
 800149e:	2080      	movs	r0, #128	@ 0x80
 80014a0:	4664      	mov	r4, ip
 80014a2:	04c0      	lsls	r0, r0, #19
 80014a4:	4304      	orrs	r4, r0
 80014a6:	46a4      	mov	ip, r4
 80014a8:	0034      	movs	r4, r6
 80014aa:	2001      	movs	r0, #1
 80014ac:	2b1b      	cmp	r3, #27
 80014ae:	dc09      	bgt.n	80014c4 <__aeabi_fsub+0x35c>
 80014b0:	2520      	movs	r5, #32
 80014b2:	4660      	mov	r0, ip
 80014b4:	40d8      	lsrs	r0, r3
 80014b6:	1aeb      	subs	r3, r5, r3
 80014b8:	4665      	mov	r5, ip
 80014ba:	409d      	lsls	r5, r3
 80014bc:	002b      	movs	r3, r5
 80014be:	1e5d      	subs	r5, r3, #1
 80014c0:	41ab      	sbcs	r3, r5
 80014c2:	4318      	orrs	r0, r3
 80014c4:	1a0b      	subs	r3, r1, r0
 80014c6:	469c      	mov	ip, r3
 80014c8:	0015      	movs	r5, r2
 80014ca:	e680      	b.n	80011ce <__aeabi_fsub+0x66>
 80014cc:	fbffffff 	.word	0xfbffffff
 80014d0:	7dffffff 	.word	0x7dffffff
 80014d4:	22fe      	movs	r2, #254	@ 0xfe
 80014d6:	1c6b      	adds	r3, r5, #1
 80014d8:	4213      	tst	r3, r2
 80014da:	d0a3      	beq.n	8001424 <__aeabi_fsub+0x2bc>
 80014dc:	2bff      	cmp	r3, #255	@ 0xff
 80014de:	d100      	bne.n	80014e2 <__aeabi_fsub+0x37a>
 80014e0:	e69c      	b.n	800121c <__aeabi_fsub+0xb4>
 80014e2:	4461      	add	r1, ip
 80014e4:	0849      	lsrs	r1, r1, #1
 80014e6:	074a      	lsls	r2, r1, #29
 80014e8:	d049      	beq.n	800157e <__aeabi_fsub+0x416>
 80014ea:	220f      	movs	r2, #15
 80014ec:	400a      	ands	r2, r1
 80014ee:	2a04      	cmp	r2, #4
 80014f0:	d045      	beq.n	800157e <__aeabi_fsub+0x416>
 80014f2:	1d0a      	adds	r2, r1, #4
 80014f4:	4694      	mov	ip, r2
 80014f6:	e6ad      	b.n	8001254 <__aeabi_fsub+0xec>
 80014f8:	2d00      	cmp	r5, #0
 80014fa:	d100      	bne.n	80014fe <__aeabi_fsub+0x396>
 80014fc:	e776      	b.n	80013ec <__aeabi_fsub+0x284>
 80014fe:	e68d      	b.n	800121c <__aeabi_fsub+0xb4>
 8001500:	0034      	movs	r4, r6
 8001502:	20ff      	movs	r0, #255	@ 0xff
 8001504:	2200      	movs	r2, #0
 8001506:	e68b      	b.n	8001220 <__aeabi_fsub+0xb8>
 8001508:	4663      	mov	r3, ip
 800150a:	2401      	movs	r4, #1
 800150c:	1acf      	subs	r7, r1, r3
 800150e:	4034      	ands	r4, r6
 8001510:	e664      	b.n	80011dc <__aeabi_fsub+0x74>
 8001512:	4461      	add	r1, ip
 8001514:	014b      	lsls	r3, r1, #5
 8001516:	d56d      	bpl.n	80015f4 <__aeabi_fsub+0x48c>
 8001518:	0848      	lsrs	r0, r1, #1
 800151a:	4944      	ldr	r1, [pc, #272]	@ (800162c <__aeabi_fsub+0x4c4>)
 800151c:	4001      	ands	r1, r0
 800151e:	0743      	lsls	r3, r0, #29
 8001520:	d02c      	beq.n	800157c <__aeabi_fsub+0x414>
 8001522:	230f      	movs	r3, #15
 8001524:	4003      	ands	r3, r0
 8001526:	2b04      	cmp	r3, #4
 8001528:	d028      	beq.n	800157c <__aeabi_fsub+0x414>
 800152a:	1d0b      	adds	r3, r1, #4
 800152c:	469c      	mov	ip, r3
 800152e:	2302      	movs	r3, #2
 8001530:	e690      	b.n	8001254 <__aeabi_fsub+0xec>
 8001532:	2900      	cmp	r1, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x3d0>
 8001536:	e72b      	b.n	8001390 <__aeabi_fsub+0x228>
 8001538:	2380      	movs	r3, #128	@ 0x80
 800153a:	03db      	lsls	r3, r3, #15
 800153c:	429f      	cmp	r7, r3
 800153e:	d200      	bcs.n	8001542 <__aeabi_fsub+0x3da>
 8001540:	e726      	b.n	8001390 <__aeabi_fsub+0x228>
 8001542:	4298      	cmp	r0, r3
 8001544:	d300      	bcc.n	8001548 <__aeabi_fsub+0x3e0>
 8001546:	e723      	b.n	8001390 <__aeabi_fsub+0x228>
 8001548:	2401      	movs	r4, #1
 800154a:	4034      	ands	r4, r6
 800154c:	0007      	movs	r7, r0
 800154e:	e71f      	b.n	8001390 <__aeabi_fsub+0x228>
 8001550:	0034      	movs	r4, r6
 8001552:	468c      	mov	ip, r1
 8001554:	e67e      	b.n	8001254 <__aeabi_fsub+0xec>
 8001556:	2301      	movs	r3, #1
 8001558:	08cf      	lsrs	r7, r1, #3
 800155a:	e680      	b.n	800125e <__aeabi_fsub+0xf6>
 800155c:	2300      	movs	r3, #0
 800155e:	e67e      	b.n	800125e <__aeabi_fsub+0xf6>
 8001560:	2020      	movs	r0, #32
 8001562:	4665      	mov	r5, ip
 8001564:	1b80      	subs	r0, r0, r6
 8001566:	4085      	lsls	r5, r0
 8001568:	4663      	mov	r3, ip
 800156a:	0028      	movs	r0, r5
 800156c:	40f3      	lsrs	r3, r6
 800156e:	1e45      	subs	r5, r0, #1
 8001570:	41a8      	sbcs	r0, r5
 8001572:	4303      	orrs	r3, r0
 8001574:	469c      	mov	ip, r3
 8001576:	0015      	movs	r5, r2
 8001578:	448c      	add	ip, r1
 800157a:	e76d      	b.n	8001458 <__aeabi_fsub+0x2f0>
 800157c:	2302      	movs	r3, #2
 800157e:	08cf      	lsrs	r7, r1, #3
 8001580:	e66d      	b.n	800125e <__aeabi_fsub+0xf6>
 8001582:	1b0f      	subs	r7, r1, r4
 8001584:	017b      	lsls	r3, r7, #5
 8001586:	d528      	bpl.n	80015da <__aeabi_fsub+0x472>
 8001588:	01bf      	lsls	r7, r7, #6
 800158a:	09bf      	lsrs	r7, r7, #6
 800158c:	0038      	movs	r0, r7
 800158e:	f002 f8ed 	bl	800376c <__clzsi2>
 8001592:	003b      	movs	r3, r7
 8001594:	3805      	subs	r0, #5
 8001596:	4083      	lsls	r3, r0
 8001598:	0034      	movs	r4, r6
 800159a:	2501      	movs	r5, #1
 800159c:	e6ca      	b.n	8001334 <__aeabi_fsub+0x1cc>
 800159e:	2900      	cmp	r1, #0
 80015a0:	d100      	bne.n	80015a4 <__aeabi_fsub+0x43c>
 80015a2:	e6b5      	b.n	8001310 <__aeabi_fsub+0x1a8>
 80015a4:	2401      	movs	r4, #1
 80015a6:	0007      	movs	r7, r0
 80015a8:	4034      	ands	r4, r6
 80015aa:	e658      	b.n	800125e <__aeabi_fsub+0xf6>
 80015ac:	4663      	mov	r3, ip
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d100      	bne.n	80015b4 <__aeabi_fsub+0x44c>
 80015b2:	e6e9      	b.n	8001388 <__aeabi_fsub+0x220>
 80015b4:	2900      	cmp	r1, #0
 80015b6:	d100      	bne.n	80015ba <__aeabi_fsub+0x452>
 80015b8:	e6ea      	b.n	8001390 <__aeabi_fsub+0x228>
 80015ba:	2380      	movs	r3, #128	@ 0x80
 80015bc:	03db      	lsls	r3, r3, #15
 80015be:	429f      	cmp	r7, r3
 80015c0:	d200      	bcs.n	80015c4 <__aeabi_fsub+0x45c>
 80015c2:	e6e5      	b.n	8001390 <__aeabi_fsub+0x228>
 80015c4:	4298      	cmp	r0, r3
 80015c6:	d300      	bcc.n	80015ca <__aeabi_fsub+0x462>
 80015c8:	e6e2      	b.n	8001390 <__aeabi_fsub+0x228>
 80015ca:	0007      	movs	r7, r0
 80015cc:	e6e0      	b.n	8001390 <__aeabi_fsub+0x228>
 80015ce:	2900      	cmp	r1, #0
 80015d0:	d100      	bne.n	80015d4 <__aeabi_fsub+0x46c>
 80015d2:	e69e      	b.n	8001312 <__aeabi_fsub+0x1aa>
 80015d4:	2300      	movs	r3, #0
 80015d6:	08cf      	lsrs	r7, r1, #3
 80015d8:	e641      	b.n	800125e <__aeabi_fsub+0xf6>
 80015da:	0034      	movs	r4, r6
 80015dc:	2301      	movs	r3, #1
 80015de:	08ff      	lsrs	r7, r7, #3
 80015e0:	e63d      	b.n	800125e <__aeabi_fsub+0xf6>
 80015e2:	2f00      	cmp	r7, #0
 80015e4:	d100      	bne.n	80015e8 <__aeabi_fsub+0x480>
 80015e6:	e693      	b.n	8001310 <__aeabi_fsub+0x1a8>
 80015e8:	2300      	movs	r3, #0
 80015ea:	08ff      	lsrs	r7, r7, #3
 80015ec:	e637      	b.n	800125e <__aeabi_fsub+0xf6>
 80015ee:	2300      	movs	r3, #0
 80015f0:	08d7      	lsrs	r7, r2, #3
 80015f2:	e634      	b.n	800125e <__aeabi_fsub+0xf6>
 80015f4:	2301      	movs	r3, #1
 80015f6:	08cf      	lsrs	r7, r1, #3
 80015f8:	e631      	b.n	800125e <__aeabi_fsub+0xf6>
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	000b      	movs	r3, r1
 80015fe:	04d2      	lsls	r2, r2, #19
 8001600:	2001      	movs	r0, #1
 8001602:	4013      	ands	r3, r2
 8001604:	4211      	tst	r1, r2
 8001606:	d000      	beq.n	800160a <__aeabi_fsub+0x4a2>
 8001608:	e6ae      	b.n	8001368 <__aeabi_fsub+0x200>
 800160a:	08cf      	lsrs	r7, r1, #3
 800160c:	e627      	b.n	800125e <__aeabi_fsub+0xf6>
 800160e:	2b00      	cmp	r3, #0
 8001610:	d100      	bne.n	8001614 <__aeabi_fsub+0x4ac>
 8001612:	e75f      	b.n	80014d4 <__aeabi_fsub+0x36c>
 8001614:	1b56      	subs	r6, r2, r5
 8001616:	2d00      	cmp	r5, #0
 8001618:	d101      	bne.n	800161e <__aeabi_fsub+0x4b6>
 800161a:	0033      	movs	r3, r6
 800161c:	e6e7      	b.n	80013ee <__aeabi_fsub+0x286>
 800161e:	2380      	movs	r3, #128	@ 0x80
 8001620:	4660      	mov	r0, ip
 8001622:	04db      	lsls	r3, r3, #19
 8001624:	4318      	orrs	r0, r3
 8001626:	4684      	mov	ip, r0
 8001628:	e6eb      	b.n	8001402 <__aeabi_fsub+0x29a>
 800162a:	46c0      	nop			@ (mov r8, r8)
 800162c:	7dffffff 	.word	0x7dffffff

08001630 <__aeabi_f2iz>:
 8001630:	0241      	lsls	r1, r0, #9
 8001632:	0042      	lsls	r2, r0, #1
 8001634:	0fc3      	lsrs	r3, r0, #31
 8001636:	0a49      	lsrs	r1, r1, #9
 8001638:	2000      	movs	r0, #0
 800163a:	0e12      	lsrs	r2, r2, #24
 800163c:	2a7e      	cmp	r2, #126	@ 0x7e
 800163e:	dd03      	ble.n	8001648 <__aeabi_f2iz+0x18>
 8001640:	2a9d      	cmp	r2, #157	@ 0x9d
 8001642:	dd02      	ble.n	800164a <__aeabi_f2iz+0x1a>
 8001644:	4a09      	ldr	r2, [pc, #36]	@ (800166c <__aeabi_f2iz+0x3c>)
 8001646:	1898      	adds	r0, r3, r2
 8001648:	4770      	bx	lr
 800164a:	2080      	movs	r0, #128	@ 0x80
 800164c:	0400      	lsls	r0, r0, #16
 800164e:	4301      	orrs	r1, r0
 8001650:	2a95      	cmp	r2, #149	@ 0x95
 8001652:	dc07      	bgt.n	8001664 <__aeabi_f2iz+0x34>
 8001654:	2096      	movs	r0, #150	@ 0x96
 8001656:	1a82      	subs	r2, r0, r2
 8001658:	40d1      	lsrs	r1, r2
 800165a:	4248      	negs	r0, r1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f3      	bne.n	8001648 <__aeabi_f2iz+0x18>
 8001660:	0008      	movs	r0, r1
 8001662:	e7f1      	b.n	8001648 <__aeabi_f2iz+0x18>
 8001664:	3a96      	subs	r2, #150	@ 0x96
 8001666:	4091      	lsls	r1, r2
 8001668:	e7f7      	b.n	800165a <__aeabi_f2iz+0x2a>
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	7fffffff 	.word	0x7fffffff

08001670 <__aeabi_i2f>:
 8001670:	b570      	push	{r4, r5, r6, lr}
 8001672:	2800      	cmp	r0, #0
 8001674:	d012      	beq.n	800169c <__aeabi_i2f+0x2c>
 8001676:	17c3      	asrs	r3, r0, #31
 8001678:	18c5      	adds	r5, r0, r3
 800167a:	405d      	eors	r5, r3
 800167c:	0fc4      	lsrs	r4, r0, #31
 800167e:	0028      	movs	r0, r5
 8001680:	f002 f874 	bl	800376c <__clzsi2>
 8001684:	239e      	movs	r3, #158	@ 0x9e
 8001686:	1a1b      	subs	r3, r3, r0
 8001688:	2b96      	cmp	r3, #150	@ 0x96
 800168a:	dc0f      	bgt.n	80016ac <__aeabi_i2f+0x3c>
 800168c:	2808      	cmp	r0, #8
 800168e:	d038      	beq.n	8001702 <__aeabi_i2f+0x92>
 8001690:	3808      	subs	r0, #8
 8001692:	4085      	lsls	r5, r0
 8001694:	026d      	lsls	r5, r5, #9
 8001696:	0a6d      	lsrs	r5, r5, #9
 8001698:	b2d8      	uxtb	r0, r3
 800169a:	e002      	b.n	80016a2 <__aeabi_i2f+0x32>
 800169c:	2400      	movs	r4, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	2500      	movs	r5, #0
 80016a2:	05c0      	lsls	r0, r0, #23
 80016a4:	4328      	orrs	r0, r5
 80016a6:	07e4      	lsls	r4, r4, #31
 80016a8:	4320      	orrs	r0, r4
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
 80016ac:	2b99      	cmp	r3, #153	@ 0x99
 80016ae:	dc14      	bgt.n	80016da <__aeabi_i2f+0x6a>
 80016b0:	1f42      	subs	r2, r0, #5
 80016b2:	4095      	lsls	r5, r2
 80016b4:	002a      	movs	r2, r5
 80016b6:	4915      	ldr	r1, [pc, #84]	@ (800170c <__aeabi_i2f+0x9c>)
 80016b8:	4011      	ands	r1, r2
 80016ba:	0755      	lsls	r5, r2, #29
 80016bc:	d01c      	beq.n	80016f8 <__aeabi_i2f+0x88>
 80016be:	250f      	movs	r5, #15
 80016c0:	402a      	ands	r2, r5
 80016c2:	2a04      	cmp	r2, #4
 80016c4:	d018      	beq.n	80016f8 <__aeabi_i2f+0x88>
 80016c6:	3104      	adds	r1, #4
 80016c8:	08ca      	lsrs	r2, r1, #3
 80016ca:	0149      	lsls	r1, r1, #5
 80016cc:	d515      	bpl.n	80016fa <__aeabi_i2f+0x8a>
 80016ce:	239f      	movs	r3, #159	@ 0x9f
 80016d0:	0252      	lsls	r2, r2, #9
 80016d2:	1a18      	subs	r0, r3, r0
 80016d4:	0a55      	lsrs	r5, r2, #9
 80016d6:	b2c0      	uxtb	r0, r0
 80016d8:	e7e3      	b.n	80016a2 <__aeabi_i2f+0x32>
 80016da:	2205      	movs	r2, #5
 80016dc:	0029      	movs	r1, r5
 80016de:	1a12      	subs	r2, r2, r0
 80016e0:	40d1      	lsrs	r1, r2
 80016e2:	0002      	movs	r2, r0
 80016e4:	321b      	adds	r2, #27
 80016e6:	4095      	lsls	r5, r2
 80016e8:	002a      	movs	r2, r5
 80016ea:	1e55      	subs	r5, r2, #1
 80016ec:	41aa      	sbcs	r2, r5
 80016ee:	430a      	orrs	r2, r1
 80016f0:	4906      	ldr	r1, [pc, #24]	@ (800170c <__aeabi_i2f+0x9c>)
 80016f2:	4011      	ands	r1, r2
 80016f4:	0755      	lsls	r5, r2, #29
 80016f6:	d1e2      	bne.n	80016be <__aeabi_i2f+0x4e>
 80016f8:	08ca      	lsrs	r2, r1, #3
 80016fa:	0252      	lsls	r2, r2, #9
 80016fc:	0a55      	lsrs	r5, r2, #9
 80016fe:	b2d8      	uxtb	r0, r3
 8001700:	e7cf      	b.n	80016a2 <__aeabi_i2f+0x32>
 8001702:	026d      	lsls	r5, r5, #9
 8001704:	0a6d      	lsrs	r5, r5, #9
 8001706:	308e      	adds	r0, #142	@ 0x8e
 8001708:	e7cb      	b.n	80016a2 <__aeabi_i2f+0x32>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	fbffffff 	.word	0xfbffffff

08001710 <__aeabi_ui2f>:
 8001710:	b510      	push	{r4, lr}
 8001712:	1e04      	subs	r4, r0, #0
 8001714:	d00d      	beq.n	8001732 <__aeabi_ui2f+0x22>
 8001716:	f002 f829 	bl	800376c <__clzsi2>
 800171a:	239e      	movs	r3, #158	@ 0x9e
 800171c:	1a1b      	subs	r3, r3, r0
 800171e:	2b96      	cmp	r3, #150	@ 0x96
 8001720:	dc0c      	bgt.n	800173c <__aeabi_ui2f+0x2c>
 8001722:	2808      	cmp	r0, #8
 8001724:	d034      	beq.n	8001790 <__aeabi_ui2f+0x80>
 8001726:	3808      	subs	r0, #8
 8001728:	4084      	lsls	r4, r0
 800172a:	0264      	lsls	r4, r4, #9
 800172c:	0a64      	lsrs	r4, r4, #9
 800172e:	b2d8      	uxtb	r0, r3
 8001730:	e001      	b.n	8001736 <__aeabi_ui2f+0x26>
 8001732:	2000      	movs	r0, #0
 8001734:	2400      	movs	r4, #0
 8001736:	05c0      	lsls	r0, r0, #23
 8001738:	4320      	orrs	r0, r4
 800173a:	bd10      	pop	{r4, pc}
 800173c:	2b99      	cmp	r3, #153	@ 0x99
 800173e:	dc13      	bgt.n	8001768 <__aeabi_ui2f+0x58>
 8001740:	1f42      	subs	r2, r0, #5
 8001742:	4094      	lsls	r4, r2
 8001744:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <__aeabi_ui2f+0x88>)
 8001746:	4022      	ands	r2, r4
 8001748:	0761      	lsls	r1, r4, #29
 800174a:	d01c      	beq.n	8001786 <__aeabi_ui2f+0x76>
 800174c:	210f      	movs	r1, #15
 800174e:	4021      	ands	r1, r4
 8001750:	2904      	cmp	r1, #4
 8001752:	d018      	beq.n	8001786 <__aeabi_ui2f+0x76>
 8001754:	3204      	adds	r2, #4
 8001756:	08d4      	lsrs	r4, r2, #3
 8001758:	0152      	lsls	r2, r2, #5
 800175a:	d515      	bpl.n	8001788 <__aeabi_ui2f+0x78>
 800175c:	239f      	movs	r3, #159	@ 0x9f
 800175e:	0264      	lsls	r4, r4, #9
 8001760:	1a18      	subs	r0, r3, r0
 8001762:	0a64      	lsrs	r4, r4, #9
 8001764:	b2c0      	uxtb	r0, r0
 8001766:	e7e6      	b.n	8001736 <__aeabi_ui2f+0x26>
 8001768:	0002      	movs	r2, r0
 800176a:	0021      	movs	r1, r4
 800176c:	321b      	adds	r2, #27
 800176e:	4091      	lsls	r1, r2
 8001770:	000a      	movs	r2, r1
 8001772:	1e51      	subs	r1, r2, #1
 8001774:	418a      	sbcs	r2, r1
 8001776:	2105      	movs	r1, #5
 8001778:	1a09      	subs	r1, r1, r0
 800177a:	40cc      	lsrs	r4, r1
 800177c:	4314      	orrs	r4, r2
 800177e:	4a06      	ldr	r2, [pc, #24]	@ (8001798 <__aeabi_ui2f+0x88>)
 8001780:	4022      	ands	r2, r4
 8001782:	0761      	lsls	r1, r4, #29
 8001784:	d1e2      	bne.n	800174c <__aeabi_ui2f+0x3c>
 8001786:	08d4      	lsrs	r4, r2, #3
 8001788:	0264      	lsls	r4, r4, #9
 800178a:	0a64      	lsrs	r4, r4, #9
 800178c:	b2d8      	uxtb	r0, r3
 800178e:	e7d2      	b.n	8001736 <__aeabi_ui2f+0x26>
 8001790:	0264      	lsls	r4, r4, #9
 8001792:	0a64      	lsrs	r4, r4, #9
 8001794:	308e      	adds	r0, #142	@ 0x8e
 8001796:	e7ce      	b.n	8001736 <__aeabi_ui2f+0x26>
 8001798:	fbffffff 	.word	0xfbffffff

0800179c <__aeabi_dadd>:
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179e:	464f      	mov	r7, r9
 80017a0:	4646      	mov	r6, r8
 80017a2:	46d6      	mov	lr, sl
 80017a4:	b5c0      	push	{r6, r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	9000      	str	r0, [sp, #0]
 80017aa:	9101      	str	r1, [sp, #4]
 80017ac:	030e      	lsls	r6, r1, #12
 80017ae:	004c      	lsls	r4, r1, #1
 80017b0:	0fcd      	lsrs	r5, r1, #31
 80017b2:	0a71      	lsrs	r1, r6, #9
 80017b4:	9e00      	ldr	r6, [sp, #0]
 80017b6:	005f      	lsls	r7, r3, #1
 80017b8:	0f76      	lsrs	r6, r6, #29
 80017ba:	430e      	orrs	r6, r1
 80017bc:	9900      	ldr	r1, [sp, #0]
 80017be:	9200      	str	r2, [sp, #0]
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	00c9      	lsls	r1, r1, #3
 80017c4:	4689      	mov	r9, r1
 80017c6:	0319      	lsls	r1, r3, #12
 80017c8:	0d7b      	lsrs	r3, r7, #21
 80017ca:	4698      	mov	r8, r3
 80017cc:	9b01      	ldr	r3, [sp, #4]
 80017ce:	0a49      	lsrs	r1, r1, #9
 80017d0:	0fdb      	lsrs	r3, r3, #31
 80017d2:	469c      	mov	ip, r3
 80017d4:	9b00      	ldr	r3, [sp, #0]
 80017d6:	9a00      	ldr	r2, [sp, #0]
 80017d8:	0f5b      	lsrs	r3, r3, #29
 80017da:	430b      	orrs	r3, r1
 80017dc:	4641      	mov	r1, r8
 80017de:	0d64      	lsrs	r4, r4, #21
 80017e0:	00d2      	lsls	r2, r2, #3
 80017e2:	1a61      	subs	r1, r4, r1
 80017e4:	4565      	cmp	r5, ip
 80017e6:	d100      	bne.n	80017ea <__aeabi_dadd+0x4e>
 80017e8:	e0a6      	b.n	8001938 <__aeabi_dadd+0x19c>
 80017ea:	2900      	cmp	r1, #0
 80017ec:	dd72      	ble.n	80018d4 <__aeabi_dadd+0x138>
 80017ee:	4647      	mov	r7, r8
 80017f0:	2f00      	cmp	r7, #0
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dadd+0x5a>
 80017f4:	e0dd      	b.n	80019b2 <__aeabi_dadd+0x216>
 80017f6:	4fcc      	ldr	r7, [pc, #816]	@ (8001b28 <__aeabi_dadd+0x38c>)
 80017f8:	42bc      	cmp	r4, r7
 80017fa:	d100      	bne.n	80017fe <__aeabi_dadd+0x62>
 80017fc:	e19a      	b.n	8001b34 <__aeabi_dadd+0x398>
 80017fe:	2701      	movs	r7, #1
 8001800:	2938      	cmp	r1, #56	@ 0x38
 8001802:	dc17      	bgt.n	8001834 <__aeabi_dadd+0x98>
 8001804:	2780      	movs	r7, #128	@ 0x80
 8001806:	043f      	lsls	r7, r7, #16
 8001808:	433b      	orrs	r3, r7
 800180a:	291f      	cmp	r1, #31
 800180c:	dd00      	ble.n	8001810 <__aeabi_dadd+0x74>
 800180e:	e1dd      	b.n	8001bcc <__aeabi_dadd+0x430>
 8001810:	2720      	movs	r7, #32
 8001812:	1a78      	subs	r0, r7, r1
 8001814:	001f      	movs	r7, r3
 8001816:	4087      	lsls	r7, r0
 8001818:	46ba      	mov	sl, r7
 800181a:	0017      	movs	r7, r2
 800181c:	40cf      	lsrs	r7, r1
 800181e:	4684      	mov	ip, r0
 8001820:	0038      	movs	r0, r7
 8001822:	4657      	mov	r7, sl
 8001824:	4307      	orrs	r7, r0
 8001826:	4660      	mov	r0, ip
 8001828:	4082      	lsls	r2, r0
 800182a:	40cb      	lsrs	r3, r1
 800182c:	1e50      	subs	r0, r2, #1
 800182e:	4182      	sbcs	r2, r0
 8001830:	1af6      	subs	r6, r6, r3
 8001832:	4317      	orrs	r7, r2
 8001834:	464b      	mov	r3, r9
 8001836:	1bdf      	subs	r7, r3, r7
 8001838:	45b9      	cmp	r9, r7
 800183a:	4180      	sbcs	r0, r0
 800183c:	4240      	negs	r0, r0
 800183e:	1a36      	subs	r6, r6, r0
 8001840:	0233      	lsls	r3, r6, #8
 8001842:	d400      	bmi.n	8001846 <__aeabi_dadd+0xaa>
 8001844:	e0ff      	b.n	8001a46 <__aeabi_dadd+0x2aa>
 8001846:	0276      	lsls	r6, r6, #9
 8001848:	0a76      	lsrs	r6, r6, #9
 800184a:	2e00      	cmp	r6, #0
 800184c:	d100      	bne.n	8001850 <__aeabi_dadd+0xb4>
 800184e:	e13c      	b.n	8001aca <__aeabi_dadd+0x32e>
 8001850:	0030      	movs	r0, r6
 8001852:	f001 ff8b 	bl	800376c <__clzsi2>
 8001856:	0003      	movs	r3, r0
 8001858:	3b08      	subs	r3, #8
 800185a:	2120      	movs	r1, #32
 800185c:	0038      	movs	r0, r7
 800185e:	1aca      	subs	r2, r1, r3
 8001860:	40d0      	lsrs	r0, r2
 8001862:	409e      	lsls	r6, r3
 8001864:	0002      	movs	r2, r0
 8001866:	409f      	lsls	r7, r3
 8001868:	4332      	orrs	r2, r6
 800186a:	429c      	cmp	r4, r3
 800186c:	dd00      	ble.n	8001870 <__aeabi_dadd+0xd4>
 800186e:	e1a6      	b.n	8001bbe <__aeabi_dadd+0x422>
 8001870:	1b18      	subs	r0, r3, r4
 8001872:	3001      	adds	r0, #1
 8001874:	1a09      	subs	r1, r1, r0
 8001876:	003e      	movs	r6, r7
 8001878:	408f      	lsls	r7, r1
 800187a:	40c6      	lsrs	r6, r0
 800187c:	1e7b      	subs	r3, r7, #1
 800187e:	419f      	sbcs	r7, r3
 8001880:	0013      	movs	r3, r2
 8001882:	408b      	lsls	r3, r1
 8001884:	4337      	orrs	r7, r6
 8001886:	431f      	orrs	r7, r3
 8001888:	40c2      	lsrs	r2, r0
 800188a:	003b      	movs	r3, r7
 800188c:	0016      	movs	r6, r2
 800188e:	2400      	movs	r4, #0
 8001890:	4313      	orrs	r3, r2
 8001892:	d100      	bne.n	8001896 <__aeabi_dadd+0xfa>
 8001894:	e1df      	b.n	8001c56 <__aeabi_dadd+0x4ba>
 8001896:	077b      	lsls	r3, r7, #29
 8001898:	d100      	bne.n	800189c <__aeabi_dadd+0x100>
 800189a:	e332      	b.n	8001f02 <__aeabi_dadd+0x766>
 800189c:	230f      	movs	r3, #15
 800189e:	003a      	movs	r2, r7
 80018a0:	403b      	ands	r3, r7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d004      	beq.n	80018b0 <__aeabi_dadd+0x114>
 80018a6:	1d3a      	adds	r2, r7, #4
 80018a8:	42ba      	cmp	r2, r7
 80018aa:	41bf      	sbcs	r7, r7
 80018ac:	427f      	negs	r7, r7
 80018ae:	19f6      	adds	r6, r6, r7
 80018b0:	0233      	lsls	r3, r6, #8
 80018b2:	d400      	bmi.n	80018b6 <__aeabi_dadd+0x11a>
 80018b4:	e323      	b.n	8001efe <__aeabi_dadd+0x762>
 80018b6:	4b9c      	ldr	r3, [pc, #624]	@ (8001b28 <__aeabi_dadd+0x38c>)
 80018b8:	3401      	adds	r4, #1
 80018ba:	429c      	cmp	r4, r3
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dadd+0x124>
 80018be:	e0b4      	b.n	8001a2a <__aeabi_dadd+0x28e>
 80018c0:	4b9a      	ldr	r3, [pc, #616]	@ (8001b2c <__aeabi_dadd+0x390>)
 80018c2:	0564      	lsls	r4, r4, #21
 80018c4:	401e      	ands	r6, r3
 80018c6:	0d64      	lsrs	r4, r4, #21
 80018c8:	0777      	lsls	r7, r6, #29
 80018ca:	08d2      	lsrs	r2, r2, #3
 80018cc:	0276      	lsls	r6, r6, #9
 80018ce:	4317      	orrs	r7, r2
 80018d0:	0b36      	lsrs	r6, r6, #12
 80018d2:	e0ac      	b.n	8001a2e <__aeabi_dadd+0x292>
 80018d4:	2900      	cmp	r1, #0
 80018d6:	d100      	bne.n	80018da <__aeabi_dadd+0x13e>
 80018d8:	e07e      	b.n	80019d8 <__aeabi_dadd+0x23c>
 80018da:	4641      	mov	r1, r8
 80018dc:	1b09      	subs	r1, r1, r4
 80018de:	2c00      	cmp	r4, #0
 80018e0:	d000      	beq.n	80018e4 <__aeabi_dadd+0x148>
 80018e2:	e160      	b.n	8001ba6 <__aeabi_dadd+0x40a>
 80018e4:	0034      	movs	r4, r6
 80018e6:	4648      	mov	r0, r9
 80018e8:	4304      	orrs	r4, r0
 80018ea:	d100      	bne.n	80018ee <__aeabi_dadd+0x152>
 80018ec:	e1c9      	b.n	8001c82 <__aeabi_dadd+0x4e6>
 80018ee:	1e4c      	subs	r4, r1, #1
 80018f0:	2901      	cmp	r1, #1
 80018f2:	d100      	bne.n	80018f6 <__aeabi_dadd+0x15a>
 80018f4:	e22e      	b.n	8001d54 <__aeabi_dadd+0x5b8>
 80018f6:	4d8c      	ldr	r5, [pc, #560]	@ (8001b28 <__aeabi_dadd+0x38c>)
 80018f8:	42a9      	cmp	r1, r5
 80018fa:	d100      	bne.n	80018fe <__aeabi_dadd+0x162>
 80018fc:	e224      	b.n	8001d48 <__aeabi_dadd+0x5ac>
 80018fe:	2701      	movs	r7, #1
 8001900:	2c38      	cmp	r4, #56	@ 0x38
 8001902:	dc11      	bgt.n	8001928 <__aeabi_dadd+0x18c>
 8001904:	0021      	movs	r1, r4
 8001906:	291f      	cmp	r1, #31
 8001908:	dd00      	ble.n	800190c <__aeabi_dadd+0x170>
 800190a:	e20b      	b.n	8001d24 <__aeabi_dadd+0x588>
 800190c:	2420      	movs	r4, #32
 800190e:	0037      	movs	r7, r6
 8001910:	4648      	mov	r0, r9
 8001912:	1a64      	subs	r4, r4, r1
 8001914:	40a7      	lsls	r7, r4
 8001916:	40c8      	lsrs	r0, r1
 8001918:	4307      	orrs	r7, r0
 800191a:	4648      	mov	r0, r9
 800191c:	40a0      	lsls	r0, r4
 800191e:	40ce      	lsrs	r6, r1
 8001920:	1e44      	subs	r4, r0, #1
 8001922:	41a0      	sbcs	r0, r4
 8001924:	1b9b      	subs	r3, r3, r6
 8001926:	4307      	orrs	r7, r0
 8001928:	1bd7      	subs	r7, r2, r7
 800192a:	42ba      	cmp	r2, r7
 800192c:	4192      	sbcs	r2, r2
 800192e:	4252      	negs	r2, r2
 8001930:	4665      	mov	r5, ip
 8001932:	4644      	mov	r4, r8
 8001934:	1a9e      	subs	r6, r3, r2
 8001936:	e783      	b.n	8001840 <__aeabi_dadd+0xa4>
 8001938:	2900      	cmp	r1, #0
 800193a:	dc00      	bgt.n	800193e <__aeabi_dadd+0x1a2>
 800193c:	e09c      	b.n	8001a78 <__aeabi_dadd+0x2dc>
 800193e:	4647      	mov	r7, r8
 8001940:	2f00      	cmp	r7, #0
 8001942:	d167      	bne.n	8001a14 <__aeabi_dadd+0x278>
 8001944:	001f      	movs	r7, r3
 8001946:	4317      	orrs	r7, r2
 8001948:	d100      	bne.n	800194c <__aeabi_dadd+0x1b0>
 800194a:	e0e4      	b.n	8001b16 <__aeabi_dadd+0x37a>
 800194c:	1e48      	subs	r0, r1, #1
 800194e:	2901      	cmp	r1, #1
 8001950:	d100      	bne.n	8001954 <__aeabi_dadd+0x1b8>
 8001952:	e19b      	b.n	8001c8c <__aeabi_dadd+0x4f0>
 8001954:	4f74      	ldr	r7, [pc, #464]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001956:	42b9      	cmp	r1, r7
 8001958:	d100      	bne.n	800195c <__aeabi_dadd+0x1c0>
 800195a:	e0eb      	b.n	8001b34 <__aeabi_dadd+0x398>
 800195c:	2701      	movs	r7, #1
 800195e:	0001      	movs	r1, r0
 8001960:	2838      	cmp	r0, #56	@ 0x38
 8001962:	dc11      	bgt.n	8001988 <__aeabi_dadd+0x1ec>
 8001964:	291f      	cmp	r1, #31
 8001966:	dd00      	ble.n	800196a <__aeabi_dadd+0x1ce>
 8001968:	e1c7      	b.n	8001cfa <__aeabi_dadd+0x55e>
 800196a:	2720      	movs	r7, #32
 800196c:	1a78      	subs	r0, r7, r1
 800196e:	001f      	movs	r7, r3
 8001970:	4684      	mov	ip, r0
 8001972:	4087      	lsls	r7, r0
 8001974:	0010      	movs	r0, r2
 8001976:	40c8      	lsrs	r0, r1
 8001978:	4307      	orrs	r7, r0
 800197a:	4660      	mov	r0, ip
 800197c:	4082      	lsls	r2, r0
 800197e:	40cb      	lsrs	r3, r1
 8001980:	1e50      	subs	r0, r2, #1
 8001982:	4182      	sbcs	r2, r0
 8001984:	18f6      	adds	r6, r6, r3
 8001986:	4317      	orrs	r7, r2
 8001988:	444f      	add	r7, r9
 800198a:	454f      	cmp	r7, r9
 800198c:	4180      	sbcs	r0, r0
 800198e:	4240      	negs	r0, r0
 8001990:	1836      	adds	r6, r6, r0
 8001992:	0233      	lsls	r3, r6, #8
 8001994:	d557      	bpl.n	8001a46 <__aeabi_dadd+0x2aa>
 8001996:	4b64      	ldr	r3, [pc, #400]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001998:	3401      	adds	r4, #1
 800199a:	429c      	cmp	r4, r3
 800199c:	d045      	beq.n	8001a2a <__aeabi_dadd+0x28e>
 800199e:	2101      	movs	r1, #1
 80019a0:	4b62      	ldr	r3, [pc, #392]	@ (8001b2c <__aeabi_dadd+0x390>)
 80019a2:	087a      	lsrs	r2, r7, #1
 80019a4:	401e      	ands	r6, r3
 80019a6:	4039      	ands	r1, r7
 80019a8:	430a      	orrs	r2, r1
 80019aa:	07f7      	lsls	r7, r6, #31
 80019ac:	4317      	orrs	r7, r2
 80019ae:	0876      	lsrs	r6, r6, #1
 80019b0:	e771      	b.n	8001896 <__aeabi_dadd+0xfa>
 80019b2:	001f      	movs	r7, r3
 80019b4:	4317      	orrs	r7, r2
 80019b6:	d100      	bne.n	80019ba <__aeabi_dadd+0x21e>
 80019b8:	e0ad      	b.n	8001b16 <__aeabi_dadd+0x37a>
 80019ba:	1e4f      	subs	r7, r1, #1
 80019bc:	46bc      	mov	ip, r7
 80019be:	2901      	cmp	r1, #1
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dadd+0x228>
 80019c2:	e182      	b.n	8001cca <__aeabi_dadd+0x52e>
 80019c4:	4f58      	ldr	r7, [pc, #352]	@ (8001b28 <__aeabi_dadd+0x38c>)
 80019c6:	42b9      	cmp	r1, r7
 80019c8:	d100      	bne.n	80019cc <__aeabi_dadd+0x230>
 80019ca:	e190      	b.n	8001cee <__aeabi_dadd+0x552>
 80019cc:	4661      	mov	r1, ip
 80019ce:	2701      	movs	r7, #1
 80019d0:	2938      	cmp	r1, #56	@ 0x38
 80019d2:	dd00      	ble.n	80019d6 <__aeabi_dadd+0x23a>
 80019d4:	e72e      	b.n	8001834 <__aeabi_dadd+0x98>
 80019d6:	e718      	b.n	800180a <__aeabi_dadd+0x6e>
 80019d8:	4f55      	ldr	r7, [pc, #340]	@ (8001b30 <__aeabi_dadd+0x394>)
 80019da:	1c61      	adds	r1, r4, #1
 80019dc:	4239      	tst	r1, r7
 80019de:	d000      	beq.n	80019e2 <__aeabi_dadd+0x246>
 80019e0:	e0d0      	b.n	8001b84 <__aeabi_dadd+0x3e8>
 80019e2:	0031      	movs	r1, r6
 80019e4:	4648      	mov	r0, r9
 80019e6:	001f      	movs	r7, r3
 80019e8:	4301      	orrs	r1, r0
 80019ea:	4317      	orrs	r7, r2
 80019ec:	2c00      	cmp	r4, #0
 80019ee:	d000      	beq.n	80019f2 <__aeabi_dadd+0x256>
 80019f0:	e13d      	b.n	8001c6e <__aeabi_dadd+0x4d2>
 80019f2:	2900      	cmp	r1, #0
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dadd+0x25c>
 80019f6:	e1bc      	b.n	8001d72 <__aeabi_dadd+0x5d6>
 80019f8:	2f00      	cmp	r7, #0
 80019fa:	d000      	beq.n	80019fe <__aeabi_dadd+0x262>
 80019fc:	e1bf      	b.n	8001d7e <__aeabi_dadd+0x5e2>
 80019fe:	464b      	mov	r3, r9
 8001a00:	2100      	movs	r1, #0
 8001a02:	08d8      	lsrs	r0, r3, #3
 8001a04:	0777      	lsls	r7, r6, #29
 8001a06:	4307      	orrs	r7, r0
 8001a08:	08f0      	lsrs	r0, r6, #3
 8001a0a:	0306      	lsls	r6, r0, #12
 8001a0c:	054c      	lsls	r4, r1, #21
 8001a0e:	0b36      	lsrs	r6, r6, #12
 8001a10:	0d64      	lsrs	r4, r4, #21
 8001a12:	e00c      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001a14:	4f44      	ldr	r7, [pc, #272]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001a16:	42bc      	cmp	r4, r7
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dadd+0x280>
 8001a1a:	e08b      	b.n	8001b34 <__aeabi_dadd+0x398>
 8001a1c:	2701      	movs	r7, #1
 8001a1e:	2938      	cmp	r1, #56	@ 0x38
 8001a20:	dcb2      	bgt.n	8001988 <__aeabi_dadd+0x1ec>
 8001a22:	2780      	movs	r7, #128	@ 0x80
 8001a24:	043f      	lsls	r7, r7, #16
 8001a26:	433b      	orrs	r3, r7
 8001a28:	e79c      	b.n	8001964 <__aeabi_dadd+0x1c8>
 8001a2a:	2600      	movs	r6, #0
 8001a2c:	2700      	movs	r7, #0
 8001a2e:	0524      	lsls	r4, r4, #20
 8001a30:	4334      	orrs	r4, r6
 8001a32:	07ed      	lsls	r5, r5, #31
 8001a34:	432c      	orrs	r4, r5
 8001a36:	0038      	movs	r0, r7
 8001a38:	0021      	movs	r1, r4
 8001a3a:	b002      	add	sp, #8
 8001a3c:	bce0      	pop	{r5, r6, r7}
 8001a3e:	46ba      	mov	sl, r7
 8001a40:	46b1      	mov	r9, r6
 8001a42:	46a8      	mov	r8, r5
 8001a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a46:	077b      	lsls	r3, r7, #29
 8001a48:	d004      	beq.n	8001a54 <__aeabi_dadd+0x2b8>
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	403b      	ands	r3, r7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d000      	beq.n	8001a54 <__aeabi_dadd+0x2b8>
 8001a52:	e728      	b.n	80018a6 <__aeabi_dadd+0x10a>
 8001a54:	08f8      	lsrs	r0, r7, #3
 8001a56:	4b34      	ldr	r3, [pc, #208]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001a58:	0777      	lsls	r7, r6, #29
 8001a5a:	4307      	orrs	r7, r0
 8001a5c:	08f0      	lsrs	r0, r6, #3
 8001a5e:	429c      	cmp	r4, r3
 8001a60:	d000      	beq.n	8001a64 <__aeabi_dadd+0x2c8>
 8001a62:	e24a      	b.n	8001efa <__aeabi_dadd+0x75e>
 8001a64:	003b      	movs	r3, r7
 8001a66:	4303      	orrs	r3, r0
 8001a68:	d059      	beq.n	8001b1e <__aeabi_dadd+0x382>
 8001a6a:	2680      	movs	r6, #128	@ 0x80
 8001a6c:	0336      	lsls	r6, r6, #12
 8001a6e:	4306      	orrs	r6, r0
 8001a70:	0336      	lsls	r6, r6, #12
 8001a72:	4c2d      	ldr	r4, [pc, #180]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001a74:	0b36      	lsrs	r6, r6, #12
 8001a76:	e7da      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001a78:	2900      	cmp	r1, #0
 8001a7a:	d061      	beq.n	8001b40 <__aeabi_dadd+0x3a4>
 8001a7c:	4641      	mov	r1, r8
 8001a7e:	1b09      	subs	r1, r1, r4
 8001a80:	2c00      	cmp	r4, #0
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dadd+0x2ea>
 8001a84:	e0b9      	b.n	8001bfa <__aeabi_dadd+0x45e>
 8001a86:	4c28      	ldr	r4, [pc, #160]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001a88:	45a0      	cmp	r8, r4
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dadd+0x2f2>
 8001a8c:	e1a5      	b.n	8001dda <__aeabi_dadd+0x63e>
 8001a8e:	2701      	movs	r7, #1
 8001a90:	2938      	cmp	r1, #56	@ 0x38
 8001a92:	dc13      	bgt.n	8001abc <__aeabi_dadd+0x320>
 8001a94:	2480      	movs	r4, #128	@ 0x80
 8001a96:	0424      	lsls	r4, r4, #16
 8001a98:	4326      	orrs	r6, r4
 8001a9a:	291f      	cmp	r1, #31
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dadd+0x304>
 8001a9e:	e1c8      	b.n	8001e32 <__aeabi_dadd+0x696>
 8001aa0:	2420      	movs	r4, #32
 8001aa2:	0037      	movs	r7, r6
 8001aa4:	4648      	mov	r0, r9
 8001aa6:	1a64      	subs	r4, r4, r1
 8001aa8:	40a7      	lsls	r7, r4
 8001aaa:	40c8      	lsrs	r0, r1
 8001aac:	4307      	orrs	r7, r0
 8001aae:	4648      	mov	r0, r9
 8001ab0:	40a0      	lsls	r0, r4
 8001ab2:	40ce      	lsrs	r6, r1
 8001ab4:	1e44      	subs	r4, r0, #1
 8001ab6:	41a0      	sbcs	r0, r4
 8001ab8:	199b      	adds	r3, r3, r6
 8001aba:	4307      	orrs	r7, r0
 8001abc:	18bf      	adds	r7, r7, r2
 8001abe:	4297      	cmp	r7, r2
 8001ac0:	4192      	sbcs	r2, r2
 8001ac2:	4252      	negs	r2, r2
 8001ac4:	4644      	mov	r4, r8
 8001ac6:	18d6      	adds	r6, r2, r3
 8001ac8:	e763      	b.n	8001992 <__aeabi_dadd+0x1f6>
 8001aca:	0038      	movs	r0, r7
 8001acc:	f001 fe4e 	bl	800376c <__clzsi2>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	3318      	adds	r3, #24
 8001ad4:	2b1f      	cmp	r3, #31
 8001ad6:	dc00      	bgt.n	8001ada <__aeabi_dadd+0x33e>
 8001ad8:	e6bf      	b.n	800185a <__aeabi_dadd+0xbe>
 8001ada:	003a      	movs	r2, r7
 8001adc:	3808      	subs	r0, #8
 8001ade:	4082      	lsls	r2, r0
 8001ae0:	429c      	cmp	r4, r3
 8001ae2:	dd00      	ble.n	8001ae6 <__aeabi_dadd+0x34a>
 8001ae4:	e083      	b.n	8001bee <__aeabi_dadd+0x452>
 8001ae6:	1b1b      	subs	r3, r3, r4
 8001ae8:	1c58      	adds	r0, r3, #1
 8001aea:	281f      	cmp	r0, #31
 8001aec:	dc00      	bgt.n	8001af0 <__aeabi_dadd+0x354>
 8001aee:	e1b4      	b.n	8001e5a <__aeabi_dadd+0x6be>
 8001af0:	0017      	movs	r7, r2
 8001af2:	3b1f      	subs	r3, #31
 8001af4:	40df      	lsrs	r7, r3
 8001af6:	2820      	cmp	r0, #32
 8001af8:	d005      	beq.n	8001b06 <__aeabi_dadd+0x36a>
 8001afa:	2340      	movs	r3, #64	@ 0x40
 8001afc:	1a1b      	subs	r3, r3, r0
 8001afe:	409a      	lsls	r2, r3
 8001b00:	1e53      	subs	r3, r2, #1
 8001b02:	419a      	sbcs	r2, r3
 8001b04:	4317      	orrs	r7, r2
 8001b06:	2400      	movs	r4, #0
 8001b08:	2f00      	cmp	r7, #0
 8001b0a:	d00a      	beq.n	8001b22 <__aeabi_dadd+0x386>
 8001b0c:	077b      	lsls	r3, r7, #29
 8001b0e:	d000      	beq.n	8001b12 <__aeabi_dadd+0x376>
 8001b10:	e6c4      	b.n	800189c <__aeabi_dadd+0x100>
 8001b12:	0026      	movs	r6, r4
 8001b14:	e79e      	b.n	8001a54 <__aeabi_dadd+0x2b8>
 8001b16:	464b      	mov	r3, r9
 8001b18:	000c      	movs	r4, r1
 8001b1a:	08d8      	lsrs	r0, r3, #3
 8001b1c:	e79b      	b.n	8001a56 <__aeabi_dadd+0x2ba>
 8001b1e:	2700      	movs	r7, #0
 8001b20:	4c01      	ldr	r4, [pc, #4]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001b22:	2600      	movs	r6, #0
 8001b24:	e783      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	000007ff 	.word	0x000007ff
 8001b2c:	ff7fffff 	.word	0xff7fffff
 8001b30:	000007fe 	.word	0x000007fe
 8001b34:	464b      	mov	r3, r9
 8001b36:	0777      	lsls	r7, r6, #29
 8001b38:	08d8      	lsrs	r0, r3, #3
 8001b3a:	4307      	orrs	r7, r0
 8001b3c:	08f0      	lsrs	r0, r6, #3
 8001b3e:	e791      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001b40:	4fcd      	ldr	r7, [pc, #820]	@ (8001e78 <__aeabi_dadd+0x6dc>)
 8001b42:	1c61      	adds	r1, r4, #1
 8001b44:	4239      	tst	r1, r7
 8001b46:	d16b      	bne.n	8001c20 <__aeabi_dadd+0x484>
 8001b48:	0031      	movs	r1, r6
 8001b4a:	4648      	mov	r0, r9
 8001b4c:	4301      	orrs	r1, r0
 8001b4e:	2c00      	cmp	r4, #0
 8001b50:	d000      	beq.n	8001b54 <__aeabi_dadd+0x3b8>
 8001b52:	e14b      	b.n	8001dec <__aeabi_dadd+0x650>
 8001b54:	001f      	movs	r7, r3
 8001b56:	4317      	orrs	r7, r2
 8001b58:	2900      	cmp	r1, #0
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dadd+0x3c2>
 8001b5c:	e181      	b.n	8001e62 <__aeabi_dadd+0x6c6>
 8001b5e:	2f00      	cmp	r7, #0
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dadd+0x3c8>
 8001b62:	e74c      	b.n	80019fe <__aeabi_dadd+0x262>
 8001b64:	444a      	add	r2, r9
 8001b66:	454a      	cmp	r2, r9
 8001b68:	4180      	sbcs	r0, r0
 8001b6a:	18f6      	adds	r6, r6, r3
 8001b6c:	4240      	negs	r0, r0
 8001b6e:	1836      	adds	r6, r6, r0
 8001b70:	0233      	lsls	r3, r6, #8
 8001b72:	d500      	bpl.n	8001b76 <__aeabi_dadd+0x3da>
 8001b74:	e1b0      	b.n	8001ed8 <__aeabi_dadd+0x73c>
 8001b76:	0017      	movs	r7, r2
 8001b78:	4691      	mov	r9, r2
 8001b7a:	4337      	orrs	r7, r6
 8001b7c:	d000      	beq.n	8001b80 <__aeabi_dadd+0x3e4>
 8001b7e:	e73e      	b.n	80019fe <__aeabi_dadd+0x262>
 8001b80:	2600      	movs	r6, #0
 8001b82:	e754      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001b84:	4649      	mov	r1, r9
 8001b86:	1a89      	subs	r1, r1, r2
 8001b88:	4688      	mov	r8, r1
 8001b8a:	45c1      	cmp	r9, r8
 8001b8c:	41bf      	sbcs	r7, r7
 8001b8e:	1af1      	subs	r1, r6, r3
 8001b90:	427f      	negs	r7, r7
 8001b92:	1bc9      	subs	r1, r1, r7
 8001b94:	020f      	lsls	r7, r1, #8
 8001b96:	d461      	bmi.n	8001c5c <__aeabi_dadd+0x4c0>
 8001b98:	4647      	mov	r7, r8
 8001b9a:	430f      	orrs	r7, r1
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dadd+0x404>
 8001b9e:	e0bd      	b.n	8001d1c <__aeabi_dadd+0x580>
 8001ba0:	000e      	movs	r6, r1
 8001ba2:	4647      	mov	r7, r8
 8001ba4:	e651      	b.n	800184a <__aeabi_dadd+0xae>
 8001ba6:	4cb5      	ldr	r4, [pc, #724]	@ (8001e7c <__aeabi_dadd+0x6e0>)
 8001ba8:	45a0      	cmp	r8, r4
 8001baa:	d100      	bne.n	8001bae <__aeabi_dadd+0x412>
 8001bac:	e100      	b.n	8001db0 <__aeabi_dadd+0x614>
 8001bae:	2701      	movs	r7, #1
 8001bb0:	2938      	cmp	r1, #56	@ 0x38
 8001bb2:	dd00      	ble.n	8001bb6 <__aeabi_dadd+0x41a>
 8001bb4:	e6b8      	b.n	8001928 <__aeabi_dadd+0x18c>
 8001bb6:	2480      	movs	r4, #128	@ 0x80
 8001bb8:	0424      	lsls	r4, r4, #16
 8001bba:	4326      	orrs	r6, r4
 8001bbc:	e6a3      	b.n	8001906 <__aeabi_dadd+0x16a>
 8001bbe:	4eb0      	ldr	r6, [pc, #704]	@ (8001e80 <__aeabi_dadd+0x6e4>)
 8001bc0:	1ae4      	subs	r4, r4, r3
 8001bc2:	4016      	ands	r6, r2
 8001bc4:	077b      	lsls	r3, r7, #29
 8001bc6:	d000      	beq.n	8001bca <__aeabi_dadd+0x42e>
 8001bc8:	e73f      	b.n	8001a4a <__aeabi_dadd+0x2ae>
 8001bca:	e743      	b.n	8001a54 <__aeabi_dadd+0x2b8>
 8001bcc:	000f      	movs	r7, r1
 8001bce:	0018      	movs	r0, r3
 8001bd0:	3f20      	subs	r7, #32
 8001bd2:	40f8      	lsrs	r0, r7
 8001bd4:	4684      	mov	ip, r0
 8001bd6:	2920      	cmp	r1, #32
 8001bd8:	d003      	beq.n	8001be2 <__aeabi_dadd+0x446>
 8001bda:	2740      	movs	r7, #64	@ 0x40
 8001bdc:	1a79      	subs	r1, r7, r1
 8001bde:	408b      	lsls	r3, r1
 8001be0:	431a      	orrs	r2, r3
 8001be2:	1e53      	subs	r3, r2, #1
 8001be4:	419a      	sbcs	r2, r3
 8001be6:	4663      	mov	r3, ip
 8001be8:	0017      	movs	r7, r2
 8001bea:	431f      	orrs	r7, r3
 8001bec:	e622      	b.n	8001834 <__aeabi_dadd+0x98>
 8001bee:	48a4      	ldr	r0, [pc, #656]	@ (8001e80 <__aeabi_dadd+0x6e4>)
 8001bf0:	1ae1      	subs	r1, r4, r3
 8001bf2:	4010      	ands	r0, r2
 8001bf4:	0747      	lsls	r7, r0, #29
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	e707      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001bfa:	0034      	movs	r4, r6
 8001bfc:	4648      	mov	r0, r9
 8001bfe:	4304      	orrs	r4, r0
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dadd+0x468>
 8001c02:	e0fa      	b.n	8001dfa <__aeabi_dadd+0x65e>
 8001c04:	1e4c      	subs	r4, r1, #1
 8001c06:	2901      	cmp	r1, #1
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dadd+0x470>
 8001c0a:	e0d7      	b.n	8001dbc <__aeabi_dadd+0x620>
 8001c0c:	4f9b      	ldr	r7, [pc, #620]	@ (8001e7c <__aeabi_dadd+0x6e0>)
 8001c0e:	42b9      	cmp	r1, r7
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dadd+0x478>
 8001c12:	e0e2      	b.n	8001dda <__aeabi_dadd+0x63e>
 8001c14:	2701      	movs	r7, #1
 8001c16:	2c38      	cmp	r4, #56	@ 0x38
 8001c18:	dd00      	ble.n	8001c1c <__aeabi_dadd+0x480>
 8001c1a:	e74f      	b.n	8001abc <__aeabi_dadd+0x320>
 8001c1c:	0021      	movs	r1, r4
 8001c1e:	e73c      	b.n	8001a9a <__aeabi_dadd+0x2fe>
 8001c20:	4c96      	ldr	r4, [pc, #600]	@ (8001e7c <__aeabi_dadd+0x6e0>)
 8001c22:	42a1      	cmp	r1, r4
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dadd+0x48c>
 8001c26:	e0dd      	b.n	8001de4 <__aeabi_dadd+0x648>
 8001c28:	444a      	add	r2, r9
 8001c2a:	454a      	cmp	r2, r9
 8001c2c:	4180      	sbcs	r0, r0
 8001c2e:	18f3      	adds	r3, r6, r3
 8001c30:	4240      	negs	r0, r0
 8001c32:	1818      	adds	r0, r3, r0
 8001c34:	07c7      	lsls	r7, r0, #31
 8001c36:	0852      	lsrs	r2, r2, #1
 8001c38:	4317      	orrs	r7, r2
 8001c3a:	0846      	lsrs	r6, r0, #1
 8001c3c:	0752      	lsls	r2, r2, #29
 8001c3e:	d005      	beq.n	8001c4c <__aeabi_dadd+0x4b0>
 8001c40:	220f      	movs	r2, #15
 8001c42:	000c      	movs	r4, r1
 8001c44:	403a      	ands	r2, r7
 8001c46:	2a04      	cmp	r2, #4
 8001c48:	d000      	beq.n	8001c4c <__aeabi_dadd+0x4b0>
 8001c4a:	e62c      	b.n	80018a6 <__aeabi_dadd+0x10a>
 8001c4c:	0776      	lsls	r6, r6, #29
 8001c4e:	08ff      	lsrs	r7, r7, #3
 8001c50:	4337      	orrs	r7, r6
 8001c52:	0900      	lsrs	r0, r0, #4
 8001c54:	e6d9      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001c56:	2700      	movs	r7, #0
 8001c58:	2600      	movs	r6, #0
 8001c5a:	e6e8      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001c5c:	4649      	mov	r1, r9
 8001c5e:	1a57      	subs	r7, r2, r1
 8001c60:	42ba      	cmp	r2, r7
 8001c62:	4192      	sbcs	r2, r2
 8001c64:	1b9e      	subs	r6, r3, r6
 8001c66:	4252      	negs	r2, r2
 8001c68:	4665      	mov	r5, ip
 8001c6a:	1ab6      	subs	r6, r6, r2
 8001c6c:	e5ed      	b.n	800184a <__aeabi_dadd+0xae>
 8001c6e:	2900      	cmp	r1, #0
 8001c70:	d000      	beq.n	8001c74 <__aeabi_dadd+0x4d8>
 8001c72:	e0c6      	b.n	8001e02 <__aeabi_dadd+0x666>
 8001c74:	2f00      	cmp	r7, #0
 8001c76:	d167      	bne.n	8001d48 <__aeabi_dadd+0x5ac>
 8001c78:	2680      	movs	r6, #128	@ 0x80
 8001c7a:	2500      	movs	r5, #0
 8001c7c:	4c7f      	ldr	r4, [pc, #508]	@ (8001e7c <__aeabi_dadd+0x6e0>)
 8001c7e:	0336      	lsls	r6, r6, #12
 8001c80:	e6d5      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001c82:	4665      	mov	r5, ip
 8001c84:	000c      	movs	r4, r1
 8001c86:	001e      	movs	r6, r3
 8001c88:	08d0      	lsrs	r0, r2, #3
 8001c8a:	e6e4      	b.n	8001a56 <__aeabi_dadd+0x2ba>
 8001c8c:	444a      	add	r2, r9
 8001c8e:	454a      	cmp	r2, r9
 8001c90:	4180      	sbcs	r0, r0
 8001c92:	18f3      	adds	r3, r6, r3
 8001c94:	4240      	negs	r0, r0
 8001c96:	1818      	adds	r0, r3, r0
 8001c98:	0011      	movs	r1, r2
 8001c9a:	0203      	lsls	r3, r0, #8
 8001c9c:	d400      	bmi.n	8001ca0 <__aeabi_dadd+0x504>
 8001c9e:	e096      	b.n	8001dce <__aeabi_dadd+0x632>
 8001ca0:	4b77      	ldr	r3, [pc, #476]	@ (8001e80 <__aeabi_dadd+0x6e4>)
 8001ca2:	0849      	lsrs	r1, r1, #1
 8001ca4:	4018      	ands	r0, r3
 8001ca6:	07c3      	lsls	r3, r0, #31
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	0844      	lsrs	r4, r0, #1
 8001cac:	0749      	lsls	r1, r1, #29
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_dadd+0x516>
 8001cb0:	e129      	b.n	8001f06 <__aeabi_dadd+0x76a>
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	2a04      	cmp	r2, #4
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dadd+0x520>
 8001cba:	e0ea      	b.n	8001e92 <__aeabi_dadd+0x6f6>
 8001cbc:	1d1f      	adds	r7, r3, #4
 8001cbe:	429f      	cmp	r7, r3
 8001cc0:	41b6      	sbcs	r6, r6
 8001cc2:	4276      	negs	r6, r6
 8001cc4:	1936      	adds	r6, r6, r4
 8001cc6:	2402      	movs	r4, #2
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x2b8>
 8001cca:	4649      	mov	r1, r9
 8001ccc:	1a8f      	subs	r7, r1, r2
 8001cce:	45b9      	cmp	r9, r7
 8001cd0:	4180      	sbcs	r0, r0
 8001cd2:	1af6      	subs	r6, r6, r3
 8001cd4:	4240      	negs	r0, r0
 8001cd6:	1a36      	subs	r6, r6, r0
 8001cd8:	0233      	lsls	r3, r6, #8
 8001cda:	d406      	bmi.n	8001cea <__aeabi_dadd+0x54e>
 8001cdc:	0773      	lsls	r3, r6, #29
 8001cde:	08ff      	lsrs	r7, r7, #3
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	431f      	orrs	r7, r3
 8001ce4:	08f0      	lsrs	r0, r6, #3
 8001ce6:	e690      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001ce8:	4665      	mov	r5, ip
 8001cea:	2401      	movs	r4, #1
 8001cec:	e5ab      	b.n	8001846 <__aeabi_dadd+0xaa>
 8001cee:	464b      	mov	r3, r9
 8001cf0:	0777      	lsls	r7, r6, #29
 8001cf2:	08d8      	lsrs	r0, r3, #3
 8001cf4:	4307      	orrs	r7, r0
 8001cf6:	08f0      	lsrs	r0, r6, #3
 8001cf8:	e6b4      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001cfa:	000f      	movs	r7, r1
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	3f20      	subs	r7, #32
 8001d00:	40f8      	lsrs	r0, r7
 8001d02:	4684      	mov	ip, r0
 8001d04:	2920      	cmp	r1, #32
 8001d06:	d003      	beq.n	8001d10 <__aeabi_dadd+0x574>
 8001d08:	2740      	movs	r7, #64	@ 0x40
 8001d0a:	1a79      	subs	r1, r7, r1
 8001d0c:	408b      	lsls	r3, r1
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	1e53      	subs	r3, r2, #1
 8001d12:	419a      	sbcs	r2, r3
 8001d14:	4663      	mov	r3, ip
 8001d16:	0017      	movs	r7, r2
 8001d18:	431f      	orrs	r7, r3
 8001d1a:	e635      	b.n	8001988 <__aeabi_dadd+0x1ec>
 8001d1c:	2500      	movs	r5, #0
 8001d1e:	2400      	movs	r4, #0
 8001d20:	2600      	movs	r6, #0
 8001d22:	e684      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001d24:	000c      	movs	r4, r1
 8001d26:	0035      	movs	r5, r6
 8001d28:	3c20      	subs	r4, #32
 8001d2a:	40e5      	lsrs	r5, r4
 8001d2c:	2920      	cmp	r1, #32
 8001d2e:	d005      	beq.n	8001d3c <__aeabi_dadd+0x5a0>
 8001d30:	2440      	movs	r4, #64	@ 0x40
 8001d32:	1a61      	subs	r1, r4, r1
 8001d34:	408e      	lsls	r6, r1
 8001d36:	4649      	mov	r1, r9
 8001d38:	4331      	orrs	r1, r6
 8001d3a:	4689      	mov	r9, r1
 8001d3c:	4648      	mov	r0, r9
 8001d3e:	1e41      	subs	r1, r0, #1
 8001d40:	4188      	sbcs	r0, r1
 8001d42:	0007      	movs	r7, r0
 8001d44:	432f      	orrs	r7, r5
 8001d46:	e5ef      	b.n	8001928 <__aeabi_dadd+0x18c>
 8001d48:	08d2      	lsrs	r2, r2, #3
 8001d4a:	075f      	lsls	r7, r3, #29
 8001d4c:	4665      	mov	r5, ip
 8001d4e:	4317      	orrs	r7, r2
 8001d50:	08d8      	lsrs	r0, r3, #3
 8001d52:	e687      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001d54:	1a17      	subs	r7, r2, r0
 8001d56:	42ba      	cmp	r2, r7
 8001d58:	4192      	sbcs	r2, r2
 8001d5a:	1b9e      	subs	r6, r3, r6
 8001d5c:	4252      	negs	r2, r2
 8001d5e:	1ab6      	subs	r6, r6, r2
 8001d60:	0233      	lsls	r3, r6, #8
 8001d62:	d4c1      	bmi.n	8001ce8 <__aeabi_dadd+0x54c>
 8001d64:	0773      	lsls	r3, r6, #29
 8001d66:	08ff      	lsrs	r7, r7, #3
 8001d68:	4665      	mov	r5, ip
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	431f      	orrs	r7, r3
 8001d6e:	08f0      	lsrs	r0, r6, #3
 8001d70:	e64b      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001d72:	2f00      	cmp	r7, #0
 8001d74:	d07b      	beq.n	8001e6e <__aeabi_dadd+0x6d2>
 8001d76:	4665      	mov	r5, ip
 8001d78:	001e      	movs	r6, r3
 8001d7a:	4691      	mov	r9, r2
 8001d7c:	e63f      	b.n	80019fe <__aeabi_dadd+0x262>
 8001d7e:	1a81      	subs	r1, r0, r2
 8001d80:	4688      	mov	r8, r1
 8001d82:	45c1      	cmp	r9, r8
 8001d84:	41a4      	sbcs	r4, r4
 8001d86:	1af1      	subs	r1, r6, r3
 8001d88:	4264      	negs	r4, r4
 8001d8a:	1b09      	subs	r1, r1, r4
 8001d8c:	2480      	movs	r4, #128	@ 0x80
 8001d8e:	0424      	lsls	r4, r4, #16
 8001d90:	4221      	tst	r1, r4
 8001d92:	d077      	beq.n	8001e84 <__aeabi_dadd+0x6e8>
 8001d94:	1a10      	subs	r0, r2, r0
 8001d96:	4282      	cmp	r2, r0
 8001d98:	4192      	sbcs	r2, r2
 8001d9a:	0007      	movs	r7, r0
 8001d9c:	1b9e      	subs	r6, r3, r6
 8001d9e:	4252      	negs	r2, r2
 8001da0:	1ab6      	subs	r6, r6, r2
 8001da2:	4337      	orrs	r7, r6
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dadd+0x60c>
 8001da6:	e0a0      	b.n	8001eea <__aeabi_dadd+0x74e>
 8001da8:	4665      	mov	r5, ip
 8001daa:	2400      	movs	r4, #0
 8001dac:	2600      	movs	r6, #0
 8001dae:	e63e      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001db0:	075f      	lsls	r7, r3, #29
 8001db2:	08d2      	lsrs	r2, r2, #3
 8001db4:	4665      	mov	r5, ip
 8001db6:	4317      	orrs	r7, r2
 8001db8:	08d8      	lsrs	r0, r3, #3
 8001dba:	e653      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001dbc:	1881      	adds	r1, r0, r2
 8001dbe:	4291      	cmp	r1, r2
 8001dc0:	4192      	sbcs	r2, r2
 8001dc2:	18f0      	adds	r0, r6, r3
 8001dc4:	4252      	negs	r2, r2
 8001dc6:	1880      	adds	r0, r0, r2
 8001dc8:	0203      	lsls	r3, r0, #8
 8001dca:	d500      	bpl.n	8001dce <__aeabi_dadd+0x632>
 8001dcc:	e768      	b.n	8001ca0 <__aeabi_dadd+0x504>
 8001dce:	0747      	lsls	r7, r0, #29
 8001dd0:	08c9      	lsrs	r1, r1, #3
 8001dd2:	430f      	orrs	r7, r1
 8001dd4:	08c0      	lsrs	r0, r0, #3
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	e617      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001dda:	08d2      	lsrs	r2, r2, #3
 8001ddc:	075f      	lsls	r7, r3, #29
 8001dde:	4317      	orrs	r7, r2
 8001de0:	08d8      	lsrs	r0, r3, #3
 8001de2:	e63f      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001de4:	000c      	movs	r4, r1
 8001de6:	2600      	movs	r6, #0
 8001de8:	2700      	movs	r7, #0
 8001dea:	e620      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001dec:	2900      	cmp	r1, #0
 8001dee:	d156      	bne.n	8001e9e <__aeabi_dadd+0x702>
 8001df0:	075f      	lsls	r7, r3, #29
 8001df2:	08d2      	lsrs	r2, r2, #3
 8001df4:	4317      	orrs	r7, r2
 8001df6:	08d8      	lsrs	r0, r3, #3
 8001df8:	e634      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	001e      	movs	r6, r3
 8001dfe:	08d0      	lsrs	r0, r2, #3
 8001e00:	e629      	b.n	8001a56 <__aeabi_dadd+0x2ba>
 8001e02:	08c1      	lsrs	r1, r0, #3
 8001e04:	0770      	lsls	r0, r6, #29
 8001e06:	4301      	orrs	r1, r0
 8001e08:	08f0      	lsrs	r0, r6, #3
 8001e0a:	2f00      	cmp	r7, #0
 8001e0c:	d062      	beq.n	8001ed4 <__aeabi_dadd+0x738>
 8001e0e:	2480      	movs	r4, #128	@ 0x80
 8001e10:	0324      	lsls	r4, r4, #12
 8001e12:	4220      	tst	r0, r4
 8001e14:	d007      	beq.n	8001e26 <__aeabi_dadd+0x68a>
 8001e16:	08de      	lsrs	r6, r3, #3
 8001e18:	4226      	tst	r6, r4
 8001e1a:	d104      	bne.n	8001e26 <__aeabi_dadd+0x68a>
 8001e1c:	4665      	mov	r5, ip
 8001e1e:	0030      	movs	r0, r6
 8001e20:	08d1      	lsrs	r1, r2, #3
 8001e22:	075b      	lsls	r3, r3, #29
 8001e24:	4319      	orrs	r1, r3
 8001e26:	0f4f      	lsrs	r7, r1, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	08c9      	lsrs	r1, r1, #3
 8001e2c:	077f      	lsls	r7, r7, #29
 8001e2e:	430f      	orrs	r7, r1
 8001e30:	e618      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001e32:	000c      	movs	r4, r1
 8001e34:	0030      	movs	r0, r6
 8001e36:	3c20      	subs	r4, #32
 8001e38:	40e0      	lsrs	r0, r4
 8001e3a:	4684      	mov	ip, r0
 8001e3c:	2920      	cmp	r1, #32
 8001e3e:	d005      	beq.n	8001e4c <__aeabi_dadd+0x6b0>
 8001e40:	2440      	movs	r4, #64	@ 0x40
 8001e42:	1a61      	subs	r1, r4, r1
 8001e44:	408e      	lsls	r6, r1
 8001e46:	4649      	mov	r1, r9
 8001e48:	4331      	orrs	r1, r6
 8001e4a:	4689      	mov	r9, r1
 8001e4c:	4648      	mov	r0, r9
 8001e4e:	1e41      	subs	r1, r0, #1
 8001e50:	4188      	sbcs	r0, r1
 8001e52:	4661      	mov	r1, ip
 8001e54:	0007      	movs	r7, r0
 8001e56:	430f      	orrs	r7, r1
 8001e58:	e630      	b.n	8001abc <__aeabi_dadd+0x320>
 8001e5a:	2120      	movs	r1, #32
 8001e5c:	2700      	movs	r7, #0
 8001e5e:	1a09      	subs	r1, r1, r0
 8001e60:	e50e      	b.n	8001880 <__aeabi_dadd+0xe4>
 8001e62:	001e      	movs	r6, r3
 8001e64:	2f00      	cmp	r7, #0
 8001e66:	d000      	beq.n	8001e6a <__aeabi_dadd+0x6ce>
 8001e68:	e522      	b.n	80018b0 <__aeabi_dadd+0x114>
 8001e6a:	2400      	movs	r4, #0
 8001e6c:	e758      	b.n	8001d20 <__aeabi_dadd+0x584>
 8001e6e:	2500      	movs	r5, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	2600      	movs	r6, #0
 8001e74:	e5db      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	000007fe 	.word	0x000007fe
 8001e7c:	000007ff 	.word	0x000007ff
 8001e80:	ff7fffff 	.word	0xff7fffff
 8001e84:	4647      	mov	r7, r8
 8001e86:	430f      	orrs	r7, r1
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dadd+0x6f0>
 8001e8a:	e747      	b.n	8001d1c <__aeabi_dadd+0x580>
 8001e8c:	000e      	movs	r6, r1
 8001e8e:	46c1      	mov	r9, r8
 8001e90:	e5b5      	b.n	80019fe <__aeabi_dadd+0x262>
 8001e92:	08df      	lsrs	r7, r3, #3
 8001e94:	0764      	lsls	r4, r4, #29
 8001e96:	2102      	movs	r1, #2
 8001e98:	4327      	orrs	r7, r4
 8001e9a:	0900      	lsrs	r0, r0, #4
 8001e9c:	e5b5      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	08c0      	lsrs	r0, r0, #3
 8001ea2:	0777      	lsls	r7, r6, #29
 8001ea4:	4307      	orrs	r7, r0
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	08f0      	lsrs	r0, r6, #3
 8001eaa:	2900      	cmp	r1, #0
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dadd+0x714>
 8001eae:	e5d9      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001eb0:	2180      	movs	r1, #128	@ 0x80
 8001eb2:	0309      	lsls	r1, r1, #12
 8001eb4:	4208      	tst	r0, r1
 8001eb6:	d007      	beq.n	8001ec8 <__aeabi_dadd+0x72c>
 8001eb8:	08dc      	lsrs	r4, r3, #3
 8001eba:	420c      	tst	r4, r1
 8001ebc:	d104      	bne.n	8001ec8 <__aeabi_dadd+0x72c>
 8001ebe:	08d2      	lsrs	r2, r2, #3
 8001ec0:	075b      	lsls	r3, r3, #29
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	0017      	movs	r7, r2
 8001ec6:	0020      	movs	r0, r4
 8001ec8:	0f7b      	lsrs	r3, r7, #29
 8001eca:	00ff      	lsls	r7, r7, #3
 8001ecc:	08ff      	lsrs	r7, r7, #3
 8001ece:	075b      	lsls	r3, r3, #29
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e5c7      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001ed4:	000f      	movs	r7, r1
 8001ed6:	e5c5      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <__aeabi_dadd+0x788>)
 8001eda:	08d2      	lsrs	r2, r2, #3
 8001edc:	4033      	ands	r3, r6
 8001ede:	075f      	lsls	r7, r3, #29
 8001ee0:	025b      	lsls	r3, r3, #9
 8001ee2:	2401      	movs	r4, #1
 8001ee4:	4317      	orrs	r7, r2
 8001ee6:	0b1e      	lsrs	r6, r3, #12
 8001ee8:	e5a1      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001eea:	4226      	tst	r6, r4
 8001eec:	d012      	beq.n	8001f14 <__aeabi_dadd+0x778>
 8001eee:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <__aeabi_dadd+0x788>)
 8001ef0:	4665      	mov	r5, ip
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	2401      	movs	r4, #1
 8001ef6:	401e      	ands	r6, r3
 8001ef8:	e4e6      	b.n	80018c8 <__aeabi_dadd+0x12c>
 8001efa:	0021      	movs	r1, r4
 8001efc:	e585      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001efe:	0017      	movs	r7, r2
 8001f00:	e5a8      	b.n	8001a54 <__aeabi_dadd+0x2b8>
 8001f02:	003a      	movs	r2, r7
 8001f04:	e4d4      	b.n	80018b0 <__aeabi_dadd+0x114>
 8001f06:	08db      	lsrs	r3, r3, #3
 8001f08:	0764      	lsls	r4, r4, #29
 8001f0a:	431c      	orrs	r4, r3
 8001f0c:	0027      	movs	r7, r4
 8001f0e:	2102      	movs	r1, #2
 8001f10:	0900      	lsrs	r0, r0, #4
 8001f12:	e57a      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001f14:	08c0      	lsrs	r0, r0, #3
 8001f16:	0777      	lsls	r7, r6, #29
 8001f18:	4307      	orrs	r7, r0
 8001f1a:	4665      	mov	r5, ip
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	08f0      	lsrs	r0, r6, #3
 8001f20:	e573      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	ff7fffff 	.word	0xff7fffff

08001f28 <__aeabi_ddiv>:
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	46de      	mov	lr, fp
 8001f2c:	4645      	mov	r5, r8
 8001f2e:	4657      	mov	r7, sl
 8001f30:	464e      	mov	r6, r9
 8001f32:	b5e0      	push	{r5, r6, r7, lr}
 8001f34:	b087      	sub	sp, #28
 8001f36:	9200      	str	r2, [sp, #0]
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	030b      	lsls	r3, r1, #12
 8001f3c:	0b1b      	lsrs	r3, r3, #12
 8001f3e:	469b      	mov	fp, r3
 8001f40:	0fca      	lsrs	r2, r1, #31
 8001f42:	004b      	lsls	r3, r1, #1
 8001f44:	0004      	movs	r4, r0
 8001f46:	4680      	mov	r8, r0
 8001f48:	0d5b      	lsrs	r3, r3, #21
 8001f4a:	9202      	str	r2, [sp, #8]
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_ddiv+0x28>
 8001f4e:	e098      	b.n	8002082 <__aeabi_ddiv+0x15a>
 8001f50:	4a7c      	ldr	r2, [pc, #496]	@ (8002144 <__aeabi_ddiv+0x21c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d037      	beq.n	8001fc6 <__aeabi_ddiv+0x9e>
 8001f56:	4659      	mov	r1, fp
 8001f58:	0f42      	lsrs	r2, r0, #29
 8001f5a:	00c9      	lsls	r1, r1, #3
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	2180      	movs	r1, #128	@ 0x80
 8001f60:	0409      	lsls	r1, r1, #16
 8001f62:	4311      	orrs	r1, r2
 8001f64:	00c2      	lsls	r2, r0, #3
 8001f66:	4690      	mov	r8, r2
 8001f68:	4a77      	ldr	r2, [pc, #476]	@ (8002148 <__aeabi_ddiv+0x220>)
 8001f6a:	4689      	mov	r9, r1
 8001f6c:	4692      	mov	sl, r2
 8001f6e:	449a      	add	sl, r3
 8001f70:	2300      	movs	r3, #0
 8001f72:	2400      	movs	r4, #0
 8001f74:	9303      	str	r3, [sp, #12]
 8001f76:	9e00      	ldr	r6, [sp, #0]
 8001f78:	9f01      	ldr	r7, [sp, #4]
 8001f7a:	033b      	lsls	r3, r7, #12
 8001f7c:	0b1b      	lsrs	r3, r3, #12
 8001f7e:	469b      	mov	fp, r3
 8001f80:	007b      	lsls	r3, r7, #1
 8001f82:	0030      	movs	r0, r6
 8001f84:	0d5b      	lsrs	r3, r3, #21
 8001f86:	0ffd      	lsrs	r5, r7, #31
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d059      	beq.n	8002040 <__aeabi_ddiv+0x118>
 8001f8c:	4a6d      	ldr	r2, [pc, #436]	@ (8002144 <__aeabi_ddiv+0x21c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d048      	beq.n	8002024 <__aeabi_ddiv+0xfc>
 8001f92:	4659      	mov	r1, fp
 8001f94:	0f72      	lsrs	r2, r6, #29
 8001f96:	00c9      	lsls	r1, r1, #3
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	2180      	movs	r1, #128	@ 0x80
 8001f9c:	0409      	lsls	r1, r1, #16
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	468b      	mov	fp, r1
 8001fa2:	4969      	ldr	r1, [pc, #420]	@ (8002148 <__aeabi_ddiv+0x220>)
 8001fa4:	00f2      	lsls	r2, r6, #3
 8001fa6:	468c      	mov	ip, r1
 8001fa8:	4651      	mov	r1, sl
 8001faa:	4463      	add	r3, ip
 8001fac:	1acb      	subs	r3, r1, r3
 8001fae:	469a      	mov	sl, r3
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	9e02      	ldr	r6, [sp, #8]
 8001fb4:	406e      	eors	r6, r5
 8001fb6:	b2f6      	uxtb	r6, r6
 8001fb8:	2c0f      	cmp	r4, #15
 8001fba:	d900      	bls.n	8001fbe <__aeabi_ddiv+0x96>
 8001fbc:	e0ce      	b.n	800215c <__aeabi_ddiv+0x234>
 8001fbe:	4b63      	ldr	r3, [pc, #396]	@ (800214c <__aeabi_ddiv+0x224>)
 8001fc0:	00a4      	lsls	r4, r4, #2
 8001fc2:	591b      	ldr	r3, [r3, r4]
 8001fc4:	469f      	mov	pc, r3
 8001fc6:	465a      	mov	r2, fp
 8001fc8:	4302      	orrs	r2, r0
 8001fca:	4691      	mov	r9, r2
 8001fcc:	d000      	beq.n	8001fd0 <__aeabi_ddiv+0xa8>
 8001fce:	e090      	b.n	80020f2 <__aeabi_ddiv+0x1ca>
 8001fd0:	469a      	mov	sl, r3
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	4690      	mov	r8, r2
 8001fd6:	2408      	movs	r4, #8
 8001fd8:	9303      	str	r3, [sp, #12]
 8001fda:	e7cc      	b.n	8001f76 <__aeabi_ddiv+0x4e>
 8001fdc:	46cb      	mov	fp, r9
 8001fde:	4642      	mov	r2, r8
 8001fe0:	9d02      	ldr	r5, [sp, #8]
 8001fe2:	9903      	ldr	r1, [sp, #12]
 8001fe4:	2902      	cmp	r1, #2
 8001fe6:	d100      	bne.n	8001fea <__aeabi_ddiv+0xc2>
 8001fe8:	e1de      	b.n	80023a8 <__aeabi_ddiv+0x480>
 8001fea:	2903      	cmp	r1, #3
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_ddiv+0xc8>
 8001fee:	e08d      	b.n	800210c <__aeabi_ddiv+0x1e4>
 8001ff0:	2901      	cmp	r1, #1
 8001ff2:	d000      	beq.n	8001ff6 <__aeabi_ddiv+0xce>
 8001ff4:	e179      	b.n	80022ea <__aeabi_ddiv+0x3c2>
 8001ff6:	002e      	movs	r6, r5
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	4690      	mov	r8, r2
 8002000:	051b      	lsls	r3, r3, #20
 8002002:	4323      	orrs	r3, r4
 8002004:	07f6      	lsls	r6, r6, #31
 8002006:	4333      	orrs	r3, r6
 8002008:	4640      	mov	r0, r8
 800200a:	0019      	movs	r1, r3
 800200c:	b007      	add	sp, #28
 800200e:	bcf0      	pop	{r4, r5, r6, r7}
 8002010:	46bb      	mov	fp, r7
 8002012:	46b2      	mov	sl, r6
 8002014:	46a9      	mov	r9, r5
 8002016:	46a0      	mov	r8, r4
 8002018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800201a:	2200      	movs	r2, #0
 800201c:	2400      	movs	r4, #0
 800201e:	4690      	mov	r8, r2
 8002020:	4b48      	ldr	r3, [pc, #288]	@ (8002144 <__aeabi_ddiv+0x21c>)
 8002022:	e7ed      	b.n	8002000 <__aeabi_ddiv+0xd8>
 8002024:	465a      	mov	r2, fp
 8002026:	9b00      	ldr	r3, [sp, #0]
 8002028:	431a      	orrs	r2, r3
 800202a:	4b49      	ldr	r3, [pc, #292]	@ (8002150 <__aeabi_ddiv+0x228>)
 800202c:	469c      	mov	ip, r3
 800202e:	44e2      	add	sl, ip
 8002030:	2a00      	cmp	r2, #0
 8002032:	d159      	bne.n	80020e8 <__aeabi_ddiv+0x1c0>
 8002034:	2302      	movs	r3, #2
 8002036:	431c      	orrs	r4, r3
 8002038:	2300      	movs	r3, #0
 800203a:	2102      	movs	r1, #2
 800203c:	469b      	mov	fp, r3
 800203e:	e7b8      	b.n	8001fb2 <__aeabi_ddiv+0x8a>
 8002040:	465a      	mov	r2, fp
 8002042:	9b00      	ldr	r3, [sp, #0]
 8002044:	431a      	orrs	r2, r3
 8002046:	d049      	beq.n	80020dc <__aeabi_ddiv+0x1b4>
 8002048:	465b      	mov	r3, fp
 800204a:	2b00      	cmp	r3, #0
 800204c:	d100      	bne.n	8002050 <__aeabi_ddiv+0x128>
 800204e:	e19c      	b.n	800238a <__aeabi_ddiv+0x462>
 8002050:	4658      	mov	r0, fp
 8002052:	f001 fb8b 	bl	800376c <__clzsi2>
 8002056:	0002      	movs	r2, r0
 8002058:	0003      	movs	r3, r0
 800205a:	3a0b      	subs	r2, #11
 800205c:	271d      	movs	r7, #29
 800205e:	9e00      	ldr	r6, [sp, #0]
 8002060:	1aba      	subs	r2, r7, r2
 8002062:	0019      	movs	r1, r3
 8002064:	4658      	mov	r0, fp
 8002066:	40d6      	lsrs	r6, r2
 8002068:	3908      	subs	r1, #8
 800206a:	4088      	lsls	r0, r1
 800206c:	0032      	movs	r2, r6
 800206e:	4302      	orrs	r2, r0
 8002070:	4693      	mov	fp, r2
 8002072:	9a00      	ldr	r2, [sp, #0]
 8002074:	408a      	lsls	r2, r1
 8002076:	4937      	ldr	r1, [pc, #220]	@ (8002154 <__aeabi_ddiv+0x22c>)
 8002078:	4453      	add	r3, sl
 800207a:	468a      	mov	sl, r1
 800207c:	2100      	movs	r1, #0
 800207e:	449a      	add	sl, r3
 8002080:	e797      	b.n	8001fb2 <__aeabi_ddiv+0x8a>
 8002082:	465b      	mov	r3, fp
 8002084:	4303      	orrs	r3, r0
 8002086:	4699      	mov	r9, r3
 8002088:	d021      	beq.n	80020ce <__aeabi_ddiv+0x1a6>
 800208a:	465b      	mov	r3, fp
 800208c:	2b00      	cmp	r3, #0
 800208e:	d100      	bne.n	8002092 <__aeabi_ddiv+0x16a>
 8002090:	e169      	b.n	8002366 <__aeabi_ddiv+0x43e>
 8002092:	4658      	mov	r0, fp
 8002094:	f001 fb6a 	bl	800376c <__clzsi2>
 8002098:	230b      	movs	r3, #11
 800209a:	425b      	negs	r3, r3
 800209c:	469c      	mov	ip, r3
 800209e:	0002      	movs	r2, r0
 80020a0:	4484      	add	ip, r0
 80020a2:	4666      	mov	r6, ip
 80020a4:	231d      	movs	r3, #29
 80020a6:	1b9b      	subs	r3, r3, r6
 80020a8:	0026      	movs	r6, r4
 80020aa:	0011      	movs	r1, r2
 80020ac:	4658      	mov	r0, fp
 80020ae:	40de      	lsrs	r6, r3
 80020b0:	3908      	subs	r1, #8
 80020b2:	4088      	lsls	r0, r1
 80020b4:	0033      	movs	r3, r6
 80020b6:	4303      	orrs	r3, r0
 80020b8:	4699      	mov	r9, r3
 80020ba:	0023      	movs	r3, r4
 80020bc:	408b      	lsls	r3, r1
 80020be:	4698      	mov	r8, r3
 80020c0:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <__aeabi_ddiv+0x230>)
 80020c2:	2400      	movs	r4, #0
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	469a      	mov	sl, r3
 80020c8:	2300      	movs	r3, #0
 80020ca:	9303      	str	r3, [sp, #12]
 80020cc:	e753      	b.n	8001f76 <__aeabi_ddiv+0x4e>
 80020ce:	2300      	movs	r3, #0
 80020d0:	4698      	mov	r8, r3
 80020d2:	469a      	mov	sl, r3
 80020d4:	3301      	adds	r3, #1
 80020d6:	2404      	movs	r4, #4
 80020d8:	9303      	str	r3, [sp, #12]
 80020da:	e74c      	b.n	8001f76 <__aeabi_ddiv+0x4e>
 80020dc:	2301      	movs	r3, #1
 80020de:	431c      	orrs	r4, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	2101      	movs	r1, #1
 80020e4:	469b      	mov	fp, r3
 80020e6:	e764      	b.n	8001fb2 <__aeabi_ddiv+0x8a>
 80020e8:	2303      	movs	r3, #3
 80020ea:	0032      	movs	r2, r6
 80020ec:	2103      	movs	r1, #3
 80020ee:	431c      	orrs	r4, r3
 80020f0:	e75f      	b.n	8001fb2 <__aeabi_ddiv+0x8a>
 80020f2:	469a      	mov	sl, r3
 80020f4:	2303      	movs	r3, #3
 80020f6:	46d9      	mov	r9, fp
 80020f8:	240c      	movs	r4, #12
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e73b      	b.n	8001f76 <__aeabi_ddiv+0x4e>
 80020fe:	2300      	movs	r3, #0
 8002100:	2480      	movs	r4, #128	@ 0x80
 8002102:	4698      	mov	r8, r3
 8002104:	2600      	movs	r6, #0
 8002106:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <__aeabi_ddiv+0x21c>)
 8002108:	0324      	lsls	r4, r4, #12
 800210a:	e779      	b.n	8002000 <__aeabi_ddiv+0xd8>
 800210c:	2480      	movs	r4, #128	@ 0x80
 800210e:	465b      	mov	r3, fp
 8002110:	0324      	lsls	r4, r4, #12
 8002112:	431c      	orrs	r4, r3
 8002114:	0324      	lsls	r4, r4, #12
 8002116:	002e      	movs	r6, r5
 8002118:	4690      	mov	r8, r2
 800211a:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <__aeabi_ddiv+0x21c>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e76f      	b.n	8002000 <__aeabi_ddiv+0xd8>
 8002120:	2480      	movs	r4, #128	@ 0x80
 8002122:	464b      	mov	r3, r9
 8002124:	0324      	lsls	r4, r4, #12
 8002126:	4223      	tst	r3, r4
 8002128:	d002      	beq.n	8002130 <__aeabi_ddiv+0x208>
 800212a:	465b      	mov	r3, fp
 800212c:	4223      	tst	r3, r4
 800212e:	d0f0      	beq.n	8002112 <__aeabi_ddiv+0x1ea>
 8002130:	2480      	movs	r4, #128	@ 0x80
 8002132:	464b      	mov	r3, r9
 8002134:	0324      	lsls	r4, r4, #12
 8002136:	431c      	orrs	r4, r3
 8002138:	0324      	lsls	r4, r4, #12
 800213a:	9e02      	ldr	r6, [sp, #8]
 800213c:	4b01      	ldr	r3, [pc, #4]	@ (8002144 <__aeabi_ddiv+0x21c>)
 800213e:	0b24      	lsrs	r4, r4, #12
 8002140:	e75e      	b.n	8002000 <__aeabi_ddiv+0xd8>
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	000007ff 	.word	0x000007ff
 8002148:	fffffc01 	.word	0xfffffc01
 800214c:	0800ed74 	.word	0x0800ed74
 8002150:	fffff801 	.word	0xfffff801
 8002154:	000003f3 	.word	0x000003f3
 8002158:	fffffc0d 	.word	0xfffffc0d
 800215c:	45cb      	cmp	fp, r9
 800215e:	d200      	bcs.n	8002162 <__aeabi_ddiv+0x23a>
 8002160:	e0f8      	b.n	8002354 <__aeabi_ddiv+0x42c>
 8002162:	d100      	bne.n	8002166 <__aeabi_ddiv+0x23e>
 8002164:	e0f3      	b.n	800234e <__aeabi_ddiv+0x426>
 8002166:	2301      	movs	r3, #1
 8002168:	425b      	negs	r3, r3
 800216a:	469c      	mov	ip, r3
 800216c:	4644      	mov	r4, r8
 800216e:	4648      	mov	r0, r9
 8002170:	2500      	movs	r5, #0
 8002172:	44e2      	add	sl, ip
 8002174:	465b      	mov	r3, fp
 8002176:	0e17      	lsrs	r7, r2, #24
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	431f      	orrs	r7, r3
 800217c:	0c19      	lsrs	r1, r3, #16
 800217e:	043b      	lsls	r3, r7, #16
 8002180:	0212      	lsls	r2, r2, #8
 8002182:	9700      	str	r7, [sp, #0]
 8002184:	0c1f      	lsrs	r7, r3, #16
 8002186:	4691      	mov	r9, r2
 8002188:	9102      	str	r1, [sp, #8]
 800218a:	9703      	str	r7, [sp, #12]
 800218c:	f7fe f866 	bl	800025c <__aeabi_uidivmod>
 8002190:	0002      	movs	r2, r0
 8002192:	437a      	muls	r2, r7
 8002194:	040b      	lsls	r3, r1, #16
 8002196:	0c21      	lsrs	r1, r4, #16
 8002198:	4680      	mov	r8, r0
 800219a:	4319      	orrs	r1, r3
 800219c:	428a      	cmp	r2, r1
 800219e:	d909      	bls.n	80021b4 <__aeabi_ddiv+0x28c>
 80021a0:	9f00      	ldr	r7, [sp, #0]
 80021a2:	2301      	movs	r3, #1
 80021a4:	46bc      	mov	ip, r7
 80021a6:	425b      	negs	r3, r3
 80021a8:	4461      	add	r1, ip
 80021aa:	469c      	mov	ip, r3
 80021ac:	44e0      	add	r8, ip
 80021ae:	428f      	cmp	r7, r1
 80021b0:	d800      	bhi.n	80021b4 <__aeabi_ddiv+0x28c>
 80021b2:	e15c      	b.n	800246e <__aeabi_ddiv+0x546>
 80021b4:	1a88      	subs	r0, r1, r2
 80021b6:	9902      	ldr	r1, [sp, #8]
 80021b8:	f7fe f850 	bl	800025c <__aeabi_uidivmod>
 80021bc:	9a03      	ldr	r2, [sp, #12]
 80021be:	0424      	lsls	r4, r4, #16
 80021c0:	4342      	muls	r2, r0
 80021c2:	0409      	lsls	r1, r1, #16
 80021c4:	0c24      	lsrs	r4, r4, #16
 80021c6:	0003      	movs	r3, r0
 80021c8:	430c      	orrs	r4, r1
 80021ca:	42a2      	cmp	r2, r4
 80021cc:	d906      	bls.n	80021dc <__aeabi_ddiv+0x2b4>
 80021ce:	9900      	ldr	r1, [sp, #0]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	468c      	mov	ip, r1
 80021d4:	4464      	add	r4, ip
 80021d6:	42a1      	cmp	r1, r4
 80021d8:	d800      	bhi.n	80021dc <__aeabi_ddiv+0x2b4>
 80021da:	e142      	b.n	8002462 <__aeabi_ddiv+0x53a>
 80021dc:	1aa0      	subs	r0, r4, r2
 80021de:	4642      	mov	r2, r8
 80021e0:	0412      	lsls	r2, r2, #16
 80021e2:	431a      	orrs	r2, r3
 80021e4:	4693      	mov	fp, r2
 80021e6:	464b      	mov	r3, r9
 80021e8:	4659      	mov	r1, fp
 80021ea:	0c1b      	lsrs	r3, r3, #16
 80021ec:	001f      	movs	r7, r3
 80021ee:	9304      	str	r3, [sp, #16]
 80021f0:	040b      	lsls	r3, r1, #16
 80021f2:	4649      	mov	r1, r9
 80021f4:	0409      	lsls	r1, r1, #16
 80021f6:	0c09      	lsrs	r1, r1, #16
 80021f8:	000c      	movs	r4, r1
 80021fa:	0c1b      	lsrs	r3, r3, #16
 80021fc:	435c      	muls	r4, r3
 80021fe:	0c12      	lsrs	r2, r2, #16
 8002200:	437b      	muls	r3, r7
 8002202:	4688      	mov	r8, r1
 8002204:	4351      	muls	r1, r2
 8002206:	437a      	muls	r2, r7
 8002208:	0c27      	lsrs	r7, r4, #16
 800220a:	46bc      	mov	ip, r7
 800220c:	185b      	adds	r3, r3, r1
 800220e:	4463      	add	r3, ip
 8002210:	4299      	cmp	r1, r3
 8002212:	d903      	bls.n	800221c <__aeabi_ddiv+0x2f4>
 8002214:	2180      	movs	r1, #128	@ 0x80
 8002216:	0249      	lsls	r1, r1, #9
 8002218:	468c      	mov	ip, r1
 800221a:	4462      	add	r2, ip
 800221c:	0c19      	lsrs	r1, r3, #16
 800221e:	0424      	lsls	r4, r4, #16
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	0c24      	lsrs	r4, r4, #16
 8002224:	188a      	adds	r2, r1, r2
 8002226:	191c      	adds	r4, r3, r4
 8002228:	4290      	cmp	r0, r2
 800222a:	d302      	bcc.n	8002232 <__aeabi_ddiv+0x30a>
 800222c:	d116      	bne.n	800225c <__aeabi_ddiv+0x334>
 800222e:	42a5      	cmp	r5, r4
 8002230:	d214      	bcs.n	800225c <__aeabi_ddiv+0x334>
 8002232:	465b      	mov	r3, fp
 8002234:	9f00      	ldr	r7, [sp, #0]
 8002236:	3b01      	subs	r3, #1
 8002238:	444d      	add	r5, r9
 800223a:	9305      	str	r3, [sp, #20]
 800223c:	454d      	cmp	r5, r9
 800223e:	419b      	sbcs	r3, r3
 8002240:	46bc      	mov	ip, r7
 8002242:	425b      	negs	r3, r3
 8002244:	4463      	add	r3, ip
 8002246:	18c0      	adds	r0, r0, r3
 8002248:	4287      	cmp	r7, r0
 800224a:	d300      	bcc.n	800224e <__aeabi_ddiv+0x326>
 800224c:	e102      	b.n	8002454 <__aeabi_ddiv+0x52c>
 800224e:	4282      	cmp	r2, r0
 8002250:	d900      	bls.n	8002254 <__aeabi_ddiv+0x32c>
 8002252:	e129      	b.n	80024a8 <__aeabi_ddiv+0x580>
 8002254:	d100      	bne.n	8002258 <__aeabi_ddiv+0x330>
 8002256:	e124      	b.n	80024a2 <__aeabi_ddiv+0x57a>
 8002258:	9b05      	ldr	r3, [sp, #20]
 800225a:	469b      	mov	fp, r3
 800225c:	1b2c      	subs	r4, r5, r4
 800225e:	42a5      	cmp	r5, r4
 8002260:	41ad      	sbcs	r5, r5
 8002262:	9b00      	ldr	r3, [sp, #0]
 8002264:	1a80      	subs	r0, r0, r2
 8002266:	426d      	negs	r5, r5
 8002268:	1b40      	subs	r0, r0, r5
 800226a:	4283      	cmp	r3, r0
 800226c:	d100      	bne.n	8002270 <__aeabi_ddiv+0x348>
 800226e:	e10f      	b.n	8002490 <__aeabi_ddiv+0x568>
 8002270:	9902      	ldr	r1, [sp, #8]
 8002272:	f7fd fff3 	bl	800025c <__aeabi_uidivmod>
 8002276:	9a03      	ldr	r2, [sp, #12]
 8002278:	040b      	lsls	r3, r1, #16
 800227a:	4342      	muls	r2, r0
 800227c:	0c21      	lsrs	r1, r4, #16
 800227e:	0005      	movs	r5, r0
 8002280:	4319      	orrs	r1, r3
 8002282:	428a      	cmp	r2, r1
 8002284:	d900      	bls.n	8002288 <__aeabi_ddiv+0x360>
 8002286:	e0cb      	b.n	8002420 <__aeabi_ddiv+0x4f8>
 8002288:	1a88      	subs	r0, r1, r2
 800228a:	9902      	ldr	r1, [sp, #8]
 800228c:	f7fd ffe6 	bl	800025c <__aeabi_uidivmod>
 8002290:	9a03      	ldr	r2, [sp, #12]
 8002292:	0424      	lsls	r4, r4, #16
 8002294:	4342      	muls	r2, r0
 8002296:	0409      	lsls	r1, r1, #16
 8002298:	0c24      	lsrs	r4, r4, #16
 800229a:	0003      	movs	r3, r0
 800229c:	430c      	orrs	r4, r1
 800229e:	42a2      	cmp	r2, r4
 80022a0:	d900      	bls.n	80022a4 <__aeabi_ddiv+0x37c>
 80022a2:	e0ca      	b.n	800243a <__aeabi_ddiv+0x512>
 80022a4:	4641      	mov	r1, r8
 80022a6:	1aa4      	subs	r4, r4, r2
 80022a8:	042a      	lsls	r2, r5, #16
 80022aa:	431a      	orrs	r2, r3
 80022ac:	9f04      	ldr	r7, [sp, #16]
 80022ae:	0413      	lsls	r3, r2, #16
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	4359      	muls	r1, r3
 80022b4:	4640      	mov	r0, r8
 80022b6:	437b      	muls	r3, r7
 80022b8:	469c      	mov	ip, r3
 80022ba:	0c15      	lsrs	r5, r2, #16
 80022bc:	4368      	muls	r0, r5
 80022be:	0c0b      	lsrs	r3, r1, #16
 80022c0:	4484      	add	ip, r0
 80022c2:	4463      	add	r3, ip
 80022c4:	437d      	muls	r5, r7
 80022c6:	4298      	cmp	r0, r3
 80022c8:	d903      	bls.n	80022d2 <__aeabi_ddiv+0x3aa>
 80022ca:	2080      	movs	r0, #128	@ 0x80
 80022cc:	0240      	lsls	r0, r0, #9
 80022ce:	4684      	mov	ip, r0
 80022d0:	4465      	add	r5, ip
 80022d2:	0c18      	lsrs	r0, r3, #16
 80022d4:	0409      	lsls	r1, r1, #16
 80022d6:	041b      	lsls	r3, r3, #16
 80022d8:	0c09      	lsrs	r1, r1, #16
 80022da:	1940      	adds	r0, r0, r5
 80022dc:	185b      	adds	r3, r3, r1
 80022de:	4284      	cmp	r4, r0
 80022e0:	d327      	bcc.n	8002332 <__aeabi_ddiv+0x40a>
 80022e2:	d023      	beq.n	800232c <__aeabi_ddiv+0x404>
 80022e4:	2301      	movs	r3, #1
 80022e6:	0035      	movs	r5, r6
 80022e8:	431a      	orrs	r2, r3
 80022ea:	4b94      	ldr	r3, [pc, #592]	@ (800253c <__aeabi_ddiv+0x614>)
 80022ec:	4453      	add	r3, sl
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	dd60      	ble.n	80023b4 <__aeabi_ddiv+0x48c>
 80022f2:	0751      	lsls	r1, r2, #29
 80022f4:	d000      	beq.n	80022f8 <__aeabi_ddiv+0x3d0>
 80022f6:	e086      	b.n	8002406 <__aeabi_ddiv+0x4de>
 80022f8:	002e      	movs	r6, r5
 80022fa:	08d1      	lsrs	r1, r2, #3
 80022fc:	465a      	mov	r2, fp
 80022fe:	01d2      	lsls	r2, r2, #7
 8002300:	d506      	bpl.n	8002310 <__aeabi_ddiv+0x3e8>
 8002302:	465a      	mov	r2, fp
 8002304:	4b8e      	ldr	r3, [pc, #568]	@ (8002540 <__aeabi_ddiv+0x618>)
 8002306:	401a      	ands	r2, r3
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	4693      	mov	fp, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4453      	add	r3, sl
 8002310:	4a8c      	ldr	r2, [pc, #560]	@ (8002544 <__aeabi_ddiv+0x61c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	dd00      	ble.n	8002318 <__aeabi_ddiv+0x3f0>
 8002316:	e680      	b.n	800201a <__aeabi_ddiv+0xf2>
 8002318:	465a      	mov	r2, fp
 800231a:	0752      	lsls	r2, r2, #29
 800231c:	430a      	orrs	r2, r1
 800231e:	4690      	mov	r8, r2
 8002320:	465a      	mov	r2, fp
 8002322:	055b      	lsls	r3, r3, #21
 8002324:	0254      	lsls	r4, r2, #9
 8002326:	0b24      	lsrs	r4, r4, #12
 8002328:	0d5b      	lsrs	r3, r3, #21
 800232a:	e669      	b.n	8002000 <__aeabi_ddiv+0xd8>
 800232c:	0035      	movs	r5, r6
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0db      	beq.n	80022ea <__aeabi_ddiv+0x3c2>
 8002332:	9d00      	ldr	r5, [sp, #0]
 8002334:	1e51      	subs	r1, r2, #1
 8002336:	46ac      	mov	ip, r5
 8002338:	4464      	add	r4, ip
 800233a:	42ac      	cmp	r4, r5
 800233c:	d200      	bcs.n	8002340 <__aeabi_ddiv+0x418>
 800233e:	e09e      	b.n	800247e <__aeabi_ddiv+0x556>
 8002340:	4284      	cmp	r4, r0
 8002342:	d200      	bcs.n	8002346 <__aeabi_ddiv+0x41e>
 8002344:	e0e1      	b.n	800250a <__aeabi_ddiv+0x5e2>
 8002346:	d100      	bne.n	800234a <__aeabi_ddiv+0x422>
 8002348:	e0ee      	b.n	8002528 <__aeabi_ddiv+0x600>
 800234a:	000a      	movs	r2, r1
 800234c:	e7ca      	b.n	80022e4 <__aeabi_ddiv+0x3bc>
 800234e:	4542      	cmp	r2, r8
 8002350:	d900      	bls.n	8002354 <__aeabi_ddiv+0x42c>
 8002352:	e708      	b.n	8002166 <__aeabi_ddiv+0x23e>
 8002354:	464b      	mov	r3, r9
 8002356:	07dc      	lsls	r4, r3, #31
 8002358:	0858      	lsrs	r0, r3, #1
 800235a:	4643      	mov	r3, r8
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	431c      	orrs	r4, r3
 8002360:	4643      	mov	r3, r8
 8002362:	07dd      	lsls	r5, r3, #31
 8002364:	e706      	b.n	8002174 <__aeabi_ddiv+0x24c>
 8002366:	f001 fa01 	bl	800376c <__clzsi2>
 800236a:	2315      	movs	r3, #21
 800236c:	469c      	mov	ip, r3
 800236e:	4484      	add	ip, r0
 8002370:	0002      	movs	r2, r0
 8002372:	4663      	mov	r3, ip
 8002374:	3220      	adds	r2, #32
 8002376:	2b1c      	cmp	r3, #28
 8002378:	dc00      	bgt.n	800237c <__aeabi_ddiv+0x454>
 800237a:	e692      	b.n	80020a2 <__aeabi_ddiv+0x17a>
 800237c:	0023      	movs	r3, r4
 800237e:	3808      	subs	r0, #8
 8002380:	4083      	lsls	r3, r0
 8002382:	4699      	mov	r9, r3
 8002384:	2300      	movs	r3, #0
 8002386:	4698      	mov	r8, r3
 8002388:	e69a      	b.n	80020c0 <__aeabi_ddiv+0x198>
 800238a:	f001 f9ef 	bl	800376c <__clzsi2>
 800238e:	0002      	movs	r2, r0
 8002390:	0003      	movs	r3, r0
 8002392:	3215      	adds	r2, #21
 8002394:	3320      	adds	r3, #32
 8002396:	2a1c      	cmp	r2, #28
 8002398:	dc00      	bgt.n	800239c <__aeabi_ddiv+0x474>
 800239a:	e65f      	b.n	800205c <__aeabi_ddiv+0x134>
 800239c:	9900      	ldr	r1, [sp, #0]
 800239e:	3808      	subs	r0, #8
 80023a0:	4081      	lsls	r1, r0
 80023a2:	2200      	movs	r2, #0
 80023a4:	468b      	mov	fp, r1
 80023a6:	e666      	b.n	8002076 <__aeabi_ddiv+0x14e>
 80023a8:	2200      	movs	r2, #0
 80023aa:	002e      	movs	r6, r5
 80023ac:	2400      	movs	r4, #0
 80023ae:	4690      	mov	r8, r2
 80023b0:	4b65      	ldr	r3, [pc, #404]	@ (8002548 <__aeabi_ddiv+0x620>)
 80023b2:	e625      	b.n	8002000 <__aeabi_ddiv+0xd8>
 80023b4:	002e      	movs	r6, r5
 80023b6:	2101      	movs	r1, #1
 80023b8:	1ac9      	subs	r1, r1, r3
 80023ba:	2938      	cmp	r1, #56	@ 0x38
 80023bc:	dd00      	ble.n	80023c0 <__aeabi_ddiv+0x498>
 80023be:	e61b      	b.n	8001ff8 <__aeabi_ddiv+0xd0>
 80023c0:	291f      	cmp	r1, #31
 80023c2:	dc7e      	bgt.n	80024c2 <__aeabi_ddiv+0x59a>
 80023c4:	4861      	ldr	r0, [pc, #388]	@ (800254c <__aeabi_ddiv+0x624>)
 80023c6:	0014      	movs	r4, r2
 80023c8:	4450      	add	r0, sl
 80023ca:	465b      	mov	r3, fp
 80023cc:	4082      	lsls	r2, r0
 80023ce:	4083      	lsls	r3, r0
 80023d0:	40cc      	lsrs	r4, r1
 80023d2:	1e50      	subs	r0, r2, #1
 80023d4:	4182      	sbcs	r2, r0
 80023d6:	4323      	orrs	r3, r4
 80023d8:	431a      	orrs	r2, r3
 80023da:	465b      	mov	r3, fp
 80023dc:	40cb      	lsrs	r3, r1
 80023de:	0751      	lsls	r1, r2, #29
 80023e0:	d009      	beq.n	80023f6 <__aeabi_ddiv+0x4ce>
 80023e2:	210f      	movs	r1, #15
 80023e4:	4011      	ands	r1, r2
 80023e6:	2904      	cmp	r1, #4
 80023e8:	d005      	beq.n	80023f6 <__aeabi_ddiv+0x4ce>
 80023ea:	1d11      	adds	r1, r2, #4
 80023ec:	4291      	cmp	r1, r2
 80023ee:	4192      	sbcs	r2, r2
 80023f0:	4252      	negs	r2, r2
 80023f2:	189b      	adds	r3, r3, r2
 80023f4:	000a      	movs	r2, r1
 80023f6:	0219      	lsls	r1, r3, #8
 80023f8:	d400      	bmi.n	80023fc <__aeabi_ddiv+0x4d4>
 80023fa:	e09b      	b.n	8002534 <__aeabi_ddiv+0x60c>
 80023fc:	2200      	movs	r2, #0
 80023fe:	2301      	movs	r3, #1
 8002400:	2400      	movs	r4, #0
 8002402:	4690      	mov	r8, r2
 8002404:	e5fc      	b.n	8002000 <__aeabi_ddiv+0xd8>
 8002406:	210f      	movs	r1, #15
 8002408:	4011      	ands	r1, r2
 800240a:	2904      	cmp	r1, #4
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x4e8>
 800240e:	e773      	b.n	80022f8 <__aeabi_ddiv+0x3d0>
 8002410:	1d11      	adds	r1, r2, #4
 8002412:	4291      	cmp	r1, r2
 8002414:	4192      	sbcs	r2, r2
 8002416:	4252      	negs	r2, r2
 8002418:	002e      	movs	r6, r5
 800241a:	08c9      	lsrs	r1, r1, #3
 800241c:	4493      	add	fp, r2
 800241e:	e76d      	b.n	80022fc <__aeabi_ddiv+0x3d4>
 8002420:	9b00      	ldr	r3, [sp, #0]
 8002422:	3d01      	subs	r5, #1
 8002424:	469c      	mov	ip, r3
 8002426:	4461      	add	r1, ip
 8002428:	428b      	cmp	r3, r1
 800242a:	d900      	bls.n	800242e <__aeabi_ddiv+0x506>
 800242c:	e72c      	b.n	8002288 <__aeabi_ddiv+0x360>
 800242e:	428a      	cmp	r2, r1
 8002430:	d800      	bhi.n	8002434 <__aeabi_ddiv+0x50c>
 8002432:	e729      	b.n	8002288 <__aeabi_ddiv+0x360>
 8002434:	1e85      	subs	r5, r0, #2
 8002436:	4461      	add	r1, ip
 8002438:	e726      	b.n	8002288 <__aeabi_ddiv+0x360>
 800243a:	9900      	ldr	r1, [sp, #0]
 800243c:	3b01      	subs	r3, #1
 800243e:	468c      	mov	ip, r1
 8002440:	4464      	add	r4, ip
 8002442:	42a1      	cmp	r1, r4
 8002444:	d900      	bls.n	8002448 <__aeabi_ddiv+0x520>
 8002446:	e72d      	b.n	80022a4 <__aeabi_ddiv+0x37c>
 8002448:	42a2      	cmp	r2, r4
 800244a:	d800      	bhi.n	800244e <__aeabi_ddiv+0x526>
 800244c:	e72a      	b.n	80022a4 <__aeabi_ddiv+0x37c>
 800244e:	1e83      	subs	r3, r0, #2
 8002450:	4464      	add	r4, ip
 8002452:	e727      	b.n	80022a4 <__aeabi_ddiv+0x37c>
 8002454:	4287      	cmp	r7, r0
 8002456:	d000      	beq.n	800245a <__aeabi_ddiv+0x532>
 8002458:	e6fe      	b.n	8002258 <__aeabi_ddiv+0x330>
 800245a:	45a9      	cmp	r9, r5
 800245c:	d900      	bls.n	8002460 <__aeabi_ddiv+0x538>
 800245e:	e6fb      	b.n	8002258 <__aeabi_ddiv+0x330>
 8002460:	e6f5      	b.n	800224e <__aeabi_ddiv+0x326>
 8002462:	42a2      	cmp	r2, r4
 8002464:	d800      	bhi.n	8002468 <__aeabi_ddiv+0x540>
 8002466:	e6b9      	b.n	80021dc <__aeabi_ddiv+0x2b4>
 8002468:	1e83      	subs	r3, r0, #2
 800246a:	4464      	add	r4, ip
 800246c:	e6b6      	b.n	80021dc <__aeabi_ddiv+0x2b4>
 800246e:	428a      	cmp	r2, r1
 8002470:	d800      	bhi.n	8002474 <__aeabi_ddiv+0x54c>
 8002472:	e69f      	b.n	80021b4 <__aeabi_ddiv+0x28c>
 8002474:	46bc      	mov	ip, r7
 8002476:	1e83      	subs	r3, r0, #2
 8002478:	4698      	mov	r8, r3
 800247a:	4461      	add	r1, ip
 800247c:	e69a      	b.n	80021b4 <__aeabi_ddiv+0x28c>
 800247e:	000a      	movs	r2, r1
 8002480:	4284      	cmp	r4, r0
 8002482:	d000      	beq.n	8002486 <__aeabi_ddiv+0x55e>
 8002484:	e72e      	b.n	80022e4 <__aeabi_ddiv+0x3bc>
 8002486:	454b      	cmp	r3, r9
 8002488:	d000      	beq.n	800248c <__aeabi_ddiv+0x564>
 800248a:	e72b      	b.n	80022e4 <__aeabi_ddiv+0x3bc>
 800248c:	0035      	movs	r5, r6
 800248e:	e72c      	b.n	80022ea <__aeabi_ddiv+0x3c2>
 8002490:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <__aeabi_ddiv+0x614>)
 8002492:	4a2f      	ldr	r2, [pc, #188]	@ (8002550 <__aeabi_ddiv+0x628>)
 8002494:	4453      	add	r3, sl
 8002496:	4592      	cmp	sl, r2
 8002498:	db43      	blt.n	8002522 <__aeabi_ddiv+0x5fa>
 800249a:	2201      	movs	r2, #1
 800249c:	2100      	movs	r1, #0
 800249e:	4493      	add	fp, r2
 80024a0:	e72c      	b.n	80022fc <__aeabi_ddiv+0x3d4>
 80024a2:	42ac      	cmp	r4, r5
 80024a4:	d800      	bhi.n	80024a8 <__aeabi_ddiv+0x580>
 80024a6:	e6d7      	b.n	8002258 <__aeabi_ddiv+0x330>
 80024a8:	2302      	movs	r3, #2
 80024aa:	425b      	negs	r3, r3
 80024ac:	469c      	mov	ip, r3
 80024ae:	9900      	ldr	r1, [sp, #0]
 80024b0:	444d      	add	r5, r9
 80024b2:	454d      	cmp	r5, r9
 80024b4:	419b      	sbcs	r3, r3
 80024b6:	44e3      	add	fp, ip
 80024b8:	468c      	mov	ip, r1
 80024ba:	425b      	negs	r3, r3
 80024bc:	4463      	add	r3, ip
 80024be:	18c0      	adds	r0, r0, r3
 80024c0:	e6cc      	b.n	800225c <__aeabi_ddiv+0x334>
 80024c2:	201f      	movs	r0, #31
 80024c4:	4240      	negs	r0, r0
 80024c6:	1ac3      	subs	r3, r0, r3
 80024c8:	4658      	mov	r0, fp
 80024ca:	40d8      	lsrs	r0, r3
 80024cc:	2920      	cmp	r1, #32
 80024ce:	d004      	beq.n	80024da <__aeabi_ddiv+0x5b2>
 80024d0:	4659      	mov	r1, fp
 80024d2:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <__aeabi_ddiv+0x62c>)
 80024d4:	4453      	add	r3, sl
 80024d6:	4099      	lsls	r1, r3
 80024d8:	430a      	orrs	r2, r1
 80024da:	1e53      	subs	r3, r2, #1
 80024dc:	419a      	sbcs	r2, r3
 80024de:	2307      	movs	r3, #7
 80024e0:	0019      	movs	r1, r3
 80024e2:	4302      	orrs	r2, r0
 80024e4:	2400      	movs	r4, #0
 80024e6:	4011      	ands	r1, r2
 80024e8:	4213      	tst	r3, r2
 80024ea:	d009      	beq.n	8002500 <__aeabi_ddiv+0x5d8>
 80024ec:	3308      	adds	r3, #8
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d01d      	beq.n	8002530 <__aeabi_ddiv+0x608>
 80024f4:	1d13      	adds	r3, r2, #4
 80024f6:	4293      	cmp	r3, r2
 80024f8:	4189      	sbcs	r1, r1
 80024fa:	001a      	movs	r2, r3
 80024fc:	4249      	negs	r1, r1
 80024fe:	0749      	lsls	r1, r1, #29
 8002500:	08d2      	lsrs	r2, r2, #3
 8002502:	430a      	orrs	r2, r1
 8002504:	4690      	mov	r8, r2
 8002506:	2300      	movs	r3, #0
 8002508:	e57a      	b.n	8002000 <__aeabi_ddiv+0xd8>
 800250a:	4649      	mov	r1, r9
 800250c:	9f00      	ldr	r7, [sp, #0]
 800250e:	004d      	lsls	r5, r1, #1
 8002510:	454d      	cmp	r5, r9
 8002512:	4189      	sbcs	r1, r1
 8002514:	46bc      	mov	ip, r7
 8002516:	4249      	negs	r1, r1
 8002518:	4461      	add	r1, ip
 800251a:	46a9      	mov	r9, r5
 800251c:	3a02      	subs	r2, #2
 800251e:	1864      	adds	r4, r4, r1
 8002520:	e7ae      	b.n	8002480 <__aeabi_ddiv+0x558>
 8002522:	2201      	movs	r2, #1
 8002524:	4252      	negs	r2, r2
 8002526:	e746      	b.n	80023b6 <__aeabi_ddiv+0x48e>
 8002528:	4599      	cmp	r9, r3
 800252a:	d3ee      	bcc.n	800250a <__aeabi_ddiv+0x5e2>
 800252c:	000a      	movs	r2, r1
 800252e:	e7aa      	b.n	8002486 <__aeabi_ddiv+0x55e>
 8002530:	2100      	movs	r1, #0
 8002532:	e7e5      	b.n	8002500 <__aeabi_ddiv+0x5d8>
 8002534:	0759      	lsls	r1, r3, #29
 8002536:	025b      	lsls	r3, r3, #9
 8002538:	0b1c      	lsrs	r4, r3, #12
 800253a:	e7e1      	b.n	8002500 <__aeabi_ddiv+0x5d8>
 800253c:	000003ff 	.word	0x000003ff
 8002540:	feffffff 	.word	0xfeffffff
 8002544:	000007fe 	.word	0x000007fe
 8002548:	000007ff 	.word	0x000007ff
 800254c:	0000041e 	.word	0x0000041e
 8002550:	fffffc02 	.word	0xfffffc02
 8002554:	0000043e 	.word	0x0000043e

08002558 <__eqdf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	46de      	mov	lr, fp
 800255e:	464e      	mov	r6, r9
 8002560:	4645      	mov	r5, r8
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	0004      	movs	r4, r0
 8002568:	0fe8      	lsrs	r0, r5, #31
 800256a:	4683      	mov	fp, r0
 800256c:	0309      	lsls	r1, r1, #12
 800256e:	0fd8      	lsrs	r0, r3, #31
 8002570:	0b09      	lsrs	r1, r1, #12
 8002572:	4682      	mov	sl, r0
 8002574:	4819      	ldr	r0, [pc, #100]	@ (80025dc <__eqdf2+0x84>)
 8002576:	468c      	mov	ip, r1
 8002578:	031f      	lsls	r7, r3, #12
 800257a:	0069      	lsls	r1, r5, #1
 800257c:	005e      	lsls	r6, r3, #1
 800257e:	0d49      	lsrs	r1, r1, #21
 8002580:	0b3f      	lsrs	r7, r7, #12
 8002582:	0d76      	lsrs	r6, r6, #21
 8002584:	4281      	cmp	r1, r0
 8002586:	d018      	beq.n	80025ba <__eqdf2+0x62>
 8002588:	4286      	cmp	r6, r0
 800258a:	d00f      	beq.n	80025ac <__eqdf2+0x54>
 800258c:	2001      	movs	r0, #1
 800258e:	42b1      	cmp	r1, r6
 8002590:	d10d      	bne.n	80025ae <__eqdf2+0x56>
 8002592:	45bc      	cmp	ip, r7
 8002594:	d10b      	bne.n	80025ae <__eqdf2+0x56>
 8002596:	4294      	cmp	r4, r2
 8002598:	d109      	bne.n	80025ae <__eqdf2+0x56>
 800259a:	45d3      	cmp	fp, sl
 800259c:	d01c      	beq.n	80025d8 <__eqdf2+0x80>
 800259e:	2900      	cmp	r1, #0
 80025a0:	d105      	bne.n	80025ae <__eqdf2+0x56>
 80025a2:	4660      	mov	r0, ip
 80025a4:	4320      	orrs	r0, r4
 80025a6:	1e43      	subs	r3, r0, #1
 80025a8:	4198      	sbcs	r0, r3
 80025aa:	e000      	b.n	80025ae <__eqdf2+0x56>
 80025ac:	2001      	movs	r0, #1
 80025ae:	bcf0      	pop	{r4, r5, r6, r7}
 80025b0:	46bb      	mov	fp, r7
 80025b2:	46b2      	mov	sl, r6
 80025b4:	46a9      	mov	r9, r5
 80025b6:	46a0      	mov	r8, r4
 80025b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ba:	2001      	movs	r0, #1
 80025bc:	428e      	cmp	r6, r1
 80025be:	d1f6      	bne.n	80025ae <__eqdf2+0x56>
 80025c0:	4661      	mov	r1, ip
 80025c2:	4339      	orrs	r1, r7
 80025c4:	000f      	movs	r7, r1
 80025c6:	4317      	orrs	r7, r2
 80025c8:	4327      	orrs	r7, r4
 80025ca:	d1f0      	bne.n	80025ae <__eqdf2+0x56>
 80025cc:	465b      	mov	r3, fp
 80025ce:	4652      	mov	r2, sl
 80025d0:	1a98      	subs	r0, r3, r2
 80025d2:	1e43      	subs	r3, r0, #1
 80025d4:	4198      	sbcs	r0, r3
 80025d6:	e7ea      	b.n	80025ae <__eqdf2+0x56>
 80025d8:	2000      	movs	r0, #0
 80025da:	e7e8      	b.n	80025ae <__eqdf2+0x56>
 80025dc:	000007ff 	.word	0x000007ff

080025e0 <__gedf2>:
 80025e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e2:	4657      	mov	r7, sl
 80025e4:	464e      	mov	r6, r9
 80025e6:	4645      	mov	r5, r8
 80025e8:	46de      	mov	lr, fp
 80025ea:	b5e0      	push	{r5, r6, r7, lr}
 80025ec:	000d      	movs	r5, r1
 80025ee:	030e      	lsls	r6, r1, #12
 80025f0:	0049      	lsls	r1, r1, #1
 80025f2:	0d49      	lsrs	r1, r1, #21
 80025f4:	468a      	mov	sl, r1
 80025f6:	0fdf      	lsrs	r7, r3, #31
 80025f8:	0fe9      	lsrs	r1, r5, #31
 80025fa:	46bc      	mov	ip, r7
 80025fc:	b083      	sub	sp, #12
 80025fe:	4f2f      	ldr	r7, [pc, #188]	@ (80026bc <__gedf2+0xdc>)
 8002600:	0004      	movs	r4, r0
 8002602:	4680      	mov	r8, r0
 8002604:	9101      	str	r1, [sp, #4]
 8002606:	0058      	lsls	r0, r3, #1
 8002608:	0319      	lsls	r1, r3, #12
 800260a:	4691      	mov	r9, r2
 800260c:	0b36      	lsrs	r6, r6, #12
 800260e:	0b09      	lsrs	r1, r1, #12
 8002610:	0d40      	lsrs	r0, r0, #21
 8002612:	45ba      	cmp	sl, r7
 8002614:	d01d      	beq.n	8002652 <__gedf2+0x72>
 8002616:	42b8      	cmp	r0, r7
 8002618:	d00d      	beq.n	8002636 <__gedf2+0x56>
 800261a:	4657      	mov	r7, sl
 800261c:	2f00      	cmp	r7, #0
 800261e:	d12a      	bne.n	8002676 <__gedf2+0x96>
 8002620:	4334      	orrs	r4, r6
 8002622:	2800      	cmp	r0, #0
 8002624:	d124      	bne.n	8002670 <__gedf2+0x90>
 8002626:	430a      	orrs	r2, r1
 8002628:	d036      	beq.n	8002698 <__gedf2+0xb8>
 800262a:	2c00      	cmp	r4, #0
 800262c:	d141      	bne.n	80026b2 <__gedf2+0xd2>
 800262e:	4663      	mov	r3, ip
 8002630:	0058      	lsls	r0, r3, #1
 8002632:	3801      	subs	r0, #1
 8002634:	e015      	b.n	8002662 <__gedf2+0x82>
 8002636:	4311      	orrs	r1, r2
 8002638:	d138      	bne.n	80026ac <__gedf2+0xcc>
 800263a:	4653      	mov	r3, sl
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <__gedf2+0x64>
 8002640:	4326      	orrs	r6, r4
 8002642:	d0f4      	beq.n	800262e <__gedf2+0x4e>
 8002644:	9b01      	ldr	r3, [sp, #4]
 8002646:	4563      	cmp	r3, ip
 8002648:	d107      	bne.n	800265a <__gedf2+0x7a>
 800264a:	9b01      	ldr	r3, [sp, #4]
 800264c:	0058      	lsls	r0, r3, #1
 800264e:	3801      	subs	r0, #1
 8002650:	e007      	b.n	8002662 <__gedf2+0x82>
 8002652:	4326      	orrs	r6, r4
 8002654:	d12a      	bne.n	80026ac <__gedf2+0xcc>
 8002656:	4550      	cmp	r0, sl
 8002658:	d021      	beq.n	800269e <__gedf2+0xbe>
 800265a:	2001      	movs	r0, #1
 800265c:	9b01      	ldr	r3, [sp, #4]
 800265e:	425f      	negs	r7, r3
 8002660:	4338      	orrs	r0, r7
 8002662:	b003      	add	sp, #12
 8002664:	bcf0      	pop	{r4, r5, r6, r7}
 8002666:	46bb      	mov	fp, r7
 8002668:	46b2      	mov	sl, r6
 800266a:	46a9      	mov	r9, r5
 800266c:	46a0      	mov	r8, r4
 800266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002670:	2c00      	cmp	r4, #0
 8002672:	d0dc      	beq.n	800262e <__gedf2+0x4e>
 8002674:	e7e6      	b.n	8002644 <__gedf2+0x64>
 8002676:	2800      	cmp	r0, #0
 8002678:	d0ef      	beq.n	800265a <__gedf2+0x7a>
 800267a:	9b01      	ldr	r3, [sp, #4]
 800267c:	4563      	cmp	r3, ip
 800267e:	d1ec      	bne.n	800265a <__gedf2+0x7a>
 8002680:	4582      	cmp	sl, r0
 8002682:	dcea      	bgt.n	800265a <__gedf2+0x7a>
 8002684:	dbe1      	blt.n	800264a <__gedf2+0x6a>
 8002686:	428e      	cmp	r6, r1
 8002688:	d8e7      	bhi.n	800265a <__gedf2+0x7a>
 800268a:	d1de      	bne.n	800264a <__gedf2+0x6a>
 800268c:	45c8      	cmp	r8, r9
 800268e:	d8e4      	bhi.n	800265a <__gedf2+0x7a>
 8002690:	2000      	movs	r0, #0
 8002692:	45c8      	cmp	r8, r9
 8002694:	d2e5      	bcs.n	8002662 <__gedf2+0x82>
 8002696:	e7d8      	b.n	800264a <__gedf2+0x6a>
 8002698:	2c00      	cmp	r4, #0
 800269a:	d0e2      	beq.n	8002662 <__gedf2+0x82>
 800269c:	e7dd      	b.n	800265a <__gedf2+0x7a>
 800269e:	4311      	orrs	r1, r2
 80026a0:	d104      	bne.n	80026ac <__gedf2+0xcc>
 80026a2:	9b01      	ldr	r3, [sp, #4]
 80026a4:	4563      	cmp	r3, ip
 80026a6:	d1d8      	bne.n	800265a <__gedf2+0x7a>
 80026a8:	2000      	movs	r0, #0
 80026aa:	e7da      	b.n	8002662 <__gedf2+0x82>
 80026ac:	2002      	movs	r0, #2
 80026ae:	4240      	negs	r0, r0
 80026b0:	e7d7      	b.n	8002662 <__gedf2+0x82>
 80026b2:	9b01      	ldr	r3, [sp, #4]
 80026b4:	4563      	cmp	r3, ip
 80026b6:	d0e6      	beq.n	8002686 <__gedf2+0xa6>
 80026b8:	e7cf      	b.n	800265a <__gedf2+0x7a>
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	000007ff 	.word	0x000007ff

080026c0 <__ledf2>:
 80026c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c2:	4657      	mov	r7, sl
 80026c4:	464e      	mov	r6, r9
 80026c6:	4645      	mov	r5, r8
 80026c8:	46de      	mov	lr, fp
 80026ca:	b5e0      	push	{r5, r6, r7, lr}
 80026cc:	000d      	movs	r5, r1
 80026ce:	030e      	lsls	r6, r1, #12
 80026d0:	0049      	lsls	r1, r1, #1
 80026d2:	0d49      	lsrs	r1, r1, #21
 80026d4:	468a      	mov	sl, r1
 80026d6:	0fdf      	lsrs	r7, r3, #31
 80026d8:	0fe9      	lsrs	r1, r5, #31
 80026da:	46bc      	mov	ip, r7
 80026dc:	b083      	sub	sp, #12
 80026de:	4f2e      	ldr	r7, [pc, #184]	@ (8002798 <__ledf2+0xd8>)
 80026e0:	0004      	movs	r4, r0
 80026e2:	4680      	mov	r8, r0
 80026e4:	9101      	str	r1, [sp, #4]
 80026e6:	0058      	lsls	r0, r3, #1
 80026e8:	0319      	lsls	r1, r3, #12
 80026ea:	4691      	mov	r9, r2
 80026ec:	0b36      	lsrs	r6, r6, #12
 80026ee:	0b09      	lsrs	r1, r1, #12
 80026f0:	0d40      	lsrs	r0, r0, #21
 80026f2:	45ba      	cmp	sl, r7
 80026f4:	d01e      	beq.n	8002734 <__ledf2+0x74>
 80026f6:	42b8      	cmp	r0, r7
 80026f8:	d00d      	beq.n	8002716 <__ledf2+0x56>
 80026fa:	4657      	mov	r7, sl
 80026fc:	2f00      	cmp	r7, #0
 80026fe:	d127      	bne.n	8002750 <__ledf2+0x90>
 8002700:	4334      	orrs	r4, r6
 8002702:	2800      	cmp	r0, #0
 8002704:	d133      	bne.n	800276e <__ledf2+0xae>
 8002706:	430a      	orrs	r2, r1
 8002708:	d034      	beq.n	8002774 <__ledf2+0xb4>
 800270a:	2c00      	cmp	r4, #0
 800270c:	d140      	bne.n	8002790 <__ledf2+0xd0>
 800270e:	4663      	mov	r3, ip
 8002710:	0058      	lsls	r0, r3, #1
 8002712:	3801      	subs	r0, #1
 8002714:	e015      	b.n	8002742 <__ledf2+0x82>
 8002716:	4311      	orrs	r1, r2
 8002718:	d112      	bne.n	8002740 <__ledf2+0x80>
 800271a:	4653      	mov	r3, sl
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <__ledf2+0x64>
 8002720:	4326      	orrs	r6, r4
 8002722:	d0f4      	beq.n	800270e <__ledf2+0x4e>
 8002724:	9b01      	ldr	r3, [sp, #4]
 8002726:	4563      	cmp	r3, ip
 8002728:	d01d      	beq.n	8002766 <__ledf2+0xa6>
 800272a:	2001      	movs	r0, #1
 800272c:	9b01      	ldr	r3, [sp, #4]
 800272e:	425f      	negs	r7, r3
 8002730:	4338      	orrs	r0, r7
 8002732:	e006      	b.n	8002742 <__ledf2+0x82>
 8002734:	4326      	orrs	r6, r4
 8002736:	d103      	bne.n	8002740 <__ledf2+0x80>
 8002738:	4550      	cmp	r0, sl
 800273a:	d1f6      	bne.n	800272a <__ledf2+0x6a>
 800273c:	4311      	orrs	r1, r2
 800273e:	d01c      	beq.n	800277a <__ledf2+0xba>
 8002740:	2002      	movs	r0, #2
 8002742:	b003      	add	sp, #12
 8002744:	bcf0      	pop	{r4, r5, r6, r7}
 8002746:	46bb      	mov	fp, r7
 8002748:	46b2      	mov	sl, r6
 800274a:	46a9      	mov	r9, r5
 800274c:	46a0      	mov	r8, r4
 800274e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002750:	2800      	cmp	r0, #0
 8002752:	d0ea      	beq.n	800272a <__ledf2+0x6a>
 8002754:	9b01      	ldr	r3, [sp, #4]
 8002756:	4563      	cmp	r3, ip
 8002758:	d1e7      	bne.n	800272a <__ledf2+0x6a>
 800275a:	4582      	cmp	sl, r0
 800275c:	dce5      	bgt.n	800272a <__ledf2+0x6a>
 800275e:	db02      	blt.n	8002766 <__ledf2+0xa6>
 8002760:	428e      	cmp	r6, r1
 8002762:	d8e2      	bhi.n	800272a <__ledf2+0x6a>
 8002764:	d00e      	beq.n	8002784 <__ledf2+0xc4>
 8002766:	9b01      	ldr	r3, [sp, #4]
 8002768:	0058      	lsls	r0, r3, #1
 800276a:	3801      	subs	r0, #1
 800276c:	e7e9      	b.n	8002742 <__ledf2+0x82>
 800276e:	2c00      	cmp	r4, #0
 8002770:	d0cd      	beq.n	800270e <__ledf2+0x4e>
 8002772:	e7d7      	b.n	8002724 <__ledf2+0x64>
 8002774:	2c00      	cmp	r4, #0
 8002776:	d0e4      	beq.n	8002742 <__ledf2+0x82>
 8002778:	e7d7      	b.n	800272a <__ledf2+0x6a>
 800277a:	9b01      	ldr	r3, [sp, #4]
 800277c:	2000      	movs	r0, #0
 800277e:	4563      	cmp	r3, ip
 8002780:	d0df      	beq.n	8002742 <__ledf2+0x82>
 8002782:	e7d2      	b.n	800272a <__ledf2+0x6a>
 8002784:	45c8      	cmp	r8, r9
 8002786:	d8d0      	bhi.n	800272a <__ledf2+0x6a>
 8002788:	2000      	movs	r0, #0
 800278a:	45c8      	cmp	r8, r9
 800278c:	d2d9      	bcs.n	8002742 <__ledf2+0x82>
 800278e:	e7ea      	b.n	8002766 <__ledf2+0xa6>
 8002790:	9b01      	ldr	r3, [sp, #4]
 8002792:	4563      	cmp	r3, ip
 8002794:	d0e4      	beq.n	8002760 <__ledf2+0xa0>
 8002796:	e7c8      	b.n	800272a <__ledf2+0x6a>
 8002798:	000007ff 	.word	0x000007ff

0800279c <__aeabi_dmul>:
 800279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279e:	4657      	mov	r7, sl
 80027a0:	464e      	mov	r6, r9
 80027a2:	46de      	mov	lr, fp
 80027a4:	4645      	mov	r5, r8
 80027a6:	b5e0      	push	{r5, r6, r7, lr}
 80027a8:	001f      	movs	r7, r3
 80027aa:	030b      	lsls	r3, r1, #12
 80027ac:	0b1b      	lsrs	r3, r3, #12
 80027ae:	0016      	movs	r6, r2
 80027b0:	469a      	mov	sl, r3
 80027b2:	0fca      	lsrs	r2, r1, #31
 80027b4:	004b      	lsls	r3, r1, #1
 80027b6:	0004      	movs	r4, r0
 80027b8:	4691      	mov	r9, r2
 80027ba:	b085      	sub	sp, #20
 80027bc:	0d5b      	lsrs	r3, r3, #21
 80027be:	d100      	bne.n	80027c2 <__aeabi_dmul+0x26>
 80027c0:	e1cf      	b.n	8002b62 <__aeabi_dmul+0x3c6>
 80027c2:	4acd      	ldr	r2, [pc, #820]	@ (8002af8 <__aeabi_dmul+0x35c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d055      	beq.n	8002874 <__aeabi_dmul+0xd8>
 80027c8:	4651      	mov	r1, sl
 80027ca:	0f42      	lsrs	r2, r0, #29
 80027cc:	00c9      	lsls	r1, r1, #3
 80027ce:	430a      	orrs	r2, r1
 80027d0:	2180      	movs	r1, #128	@ 0x80
 80027d2:	0409      	lsls	r1, r1, #16
 80027d4:	4311      	orrs	r1, r2
 80027d6:	00c2      	lsls	r2, r0, #3
 80027d8:	4690      	mov	r8, r2
 80027da:	4ac8      	ldr	r2, [pc, #800]	@ (8002afc <__aeabi_dmul+0x360>)
 80027dc:	468a      	mov	sl, r1
 80027de:	4693      	mov	fp, r2
 80027e0:	449b      	add	fp, r3
 80027e2:	2300      	movs	r3, #0
 80027e4:	2500      	movs	r5, #0
 80027e6:	9302      	str	r3, [sp, #8]
 80027e8:	033c      	lsls	r4, r7, #12
 80027ea:	007b      	lsls	r3, r7, #1
 80027ec:	0ffa      	lsrs	r2, r7, #31
 80027ee:	9601      	str	r6, [sp, #4]
 80027f0:	0b24      	lsrs	r4, r4, #12
 80027f2:	0d5b      	lsrs	r3, r3, #21
 80027f4:	9200      	str	r2, [sp, #0]
 80027f6:	d100      	bne.n	80027fa <__aeabi_dmul+0x5e>
 80027f8:	e188      	b.n	8002b0c <__aeabi_dmul+0x370>
 80027fa:	4abf      	ldr	r2, [pc, #764]	@ (8002af8 <__aeabi_dmul+0x35c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d100      	bne.n	8002802 <__aeabi_dmul+0x66>
 8002800:	e092      	b.n	8002928 <__aeabi_dmul+0x18c>
 8002802:	4abe      	ldr	r2, [pc, #760]	@ (8002afc <__aeabi_dmul+0x360>)
 8002804:	4694      	mov	ip, r2
 8002806:	4463      	add	r3, ip
 8002808:	449b      	add	fp, r3
 800280a:	2d0a      	cmp	r5, #10
 800280c:	dc42      	bgt.n	8002894 <__aeabi_dmul+0xf8>
 800280e:	00e4      	lsls	r4, r4, #3
 8002810:	0f73      	lsrs	r3, r6, #29
 8002812:	4323      	orrs	r3, r4
 8002814:	2480      	movs	r4, #128	@ 0x80
 8002816:	4649      	mov	r1, r9
 8002818:	0424      	lsls	r4, r4, #16
 800281a:	431c      	orrs	r4, r3
 800281c:	00f3      	lsls	r3, r6, #3
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	9b00      	ldr	r3, [sp, #0]
 8002822:	2000      	movs	r0, #0
 8002824:	4059      	eors	r1, r3
 8002826:	b2cb      	uxtb	r3, r1
 8002828:	9303      	str	r3, [sp, #12]
 800282a:	2d02      	cmp	r5, #2
 800282c:	dc00      	bgt.n	8002830 <__aeabi_dmul+0x94>
 800282e:	e094      	b.n	800295a <__aeabi_dmul+0x1be>
 8002830:	2301      	movs	r3, #1
 8002832:	40ab      	lsls	r3, r5
 8002834:	001d      	movs	r5, r3
 8002836:	23a6      	movs	r3, #166	@ 0xa6
 8002838:	002a      	movs	r2, r5
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	401a      	ands	r2, r3
 800283e:	421d      	tst	r5, r3
 8002840:	d000      	beq.n	8002844 <__aeabi_dmul+0xa8>
 8002842:	e229      	b.n	8002c98 <__aeabi_dmul+0x4fc>
 8002844:	2390      	movs	r3, #144	@ 0x90
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	421d      	tst	r5, r3
 800284a:	d100      	bne.n	800284e <__aeabi_dmul+0xb2>
 800284c:	e24d      	b.n	8002cea <__aeabi_dmul+0x54e>
 800284e:	2300      	movs	r3, #0
 8002850:	2480      	movs	r4, #128	@ 0x80
 8002852:	4699      	mov	r9, r3
 8002854:	0324      	lsls	r4, r4, #12
 8002856:	4ba8      	ldr	r3, [pc, #672]	@ (8002af8 <__aeabi_dmul+0x35c>)
 8002858:	0010      	movs	r0, r2
 800285a:	464a      	mov	r2, r9
 800285c:	051b      	lsls	r3, r3, #20
 800285e:	4323      	orrs	r3, r4
 8002860:	07d2      	lsls	r2, r2, #31
 8002862:	4313      	orrs	r3, r2
 8002864:	0019      	movs	r1, r3
 8002866:	b005      	add	sp, #20
 8002868:	bcf0      	pop	{r4, r5, r6, r7}
 800286a:	46bb      	mov	fp, r7
 800286c:	46b2      	mov	sl, r6
 800286e:	46a9      	mov	r9, r5
 8002870:	46a0      	mov	r8, r4
 8002872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002874:	4652      	mov	r2, sl
 8002876:	4302      	orrs	r2, r0
 8002878:	4690      	mov	r8, r2
 800287a:	d000      	beq.n	800287e <__aeabi_dmul+0xe2>
 800287c:	e1ac      	b.n	8002bd8 <__aeabi_dmul+0x43c>
 800287e:	469b      	mov	fp, r3
 8002880:	2302      	movs	r3, #2
 8002882:	4692      	mov	sl, r2
 8002884:	2508      	movs	r5, #8
 8002886:	9302      	str	r3, [sp, #8]
 8002888:	e7ae      	b.n	80027e8 <__aeabi_dmul+0x4c>
 800288a:	9b00      	ldr	r3, [sp, #0]
 800288c:	46a2      	mov	sl, r4
 800288e:	4699      	mov	r9, r3
 8002890:	9b01      	ldr	r3, [sp, #4]
 8002892:	4698      	mov	r8, r3
 8002894:	9b02      	ldr	r3, [sp, #8]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d100      	bne.n	800289c <__aeabi_dmul+0x100>
 800289a:	e1ca      	b.n	8002c32 <__aeabi_dmul+0x496>
 800289c:	2b03      	cmp	r3, #3
 800289e:	d100      	bne.n	80028a2 <__aeabi_dmul+0x106>
 80028a0:	e192      	b.n	8002bc8 <__aeabi_dmul+0x42c>
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d110      	bne.n	80028c8 <__aeabi_dmul+0x12c>
 80028a6:	2300      	movs	r3, #0
 80028a8:	2400      	movs	r4, #0
 80028aa:	2200      	movs	r2, #0
 80028ac:	e7d4      	b.n	8002858 <__aeabi_dmul+0xbc>
 80028ae:	2201      	movs	r2, #1
 80028b0:	087b      	lsrs	r3, r7, #1
 80028b2:	403a      	ands	r2, r7
 80028b4:	4313      	orrs	r3, r2
 80028b6:	4652      	mov	r2, sl
 80028b8:	07d2      	lsls	r2, r2, #31
 80028ba:	4313      	orrs	r3, r2
 80028bc:	4698      	mov	r8, r3
 80028be:	4653      	mov	r3, sl
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	469a      	mov	sl, r3
 80028c4:	9b03      	ldr	r3, [sp, #12]
 80028c6:	4699      	mov	r9, r3
 80028c8:	465b      	mov	r3, fp
 80028ca:	1c58      	adds	r0, r3, #1
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	445b      	add	r3, fp
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	dc00      	bgt.n	80028d8 <__aeabi_dmul+0x13c>
 80028d6:	e1b1      	b.n	8002c3c <__aeabi_dmul+0x4a0>
 80028d8:	4642      	mov	r2, r8
 80028da:	0752      	lsls	r2, r2, #29
 80028dc:	d00b      	beq.n	80028f6 <__aeabi_dmul+0x15a>
 80028de:	220f      	movs	r2, #15
 80028e0:	4641      	mov	r1, r8
 80028e2:	400a      	ands	r2, r1
 80028e4:	2a04      	cmp	r2, #4
 80028e6:	d006      	beq.n	80028f6 <__aeabi_dmul+0x15a>
 80028e8:	4642      	mov	r2, r8
 80028ea:	1d11      	adds	r1, r2, #4
 80028ec:	4541      	cmp	r1, r8
 80028ee:	4192      	sbcs	r2, r2
 80028f0:	4688      	mov	r8, r1
 80028f2:	4252      	negs	r2, r2
 80028f4:	4492      	add	sl, r2
 80028f6:	4652      	mov	r2, sl
 80028f8:	01d2      	lsls	r2, r2, #7
 80028fa:	d506      	bpl.n	800290a <__aeabi_dmul+0x16e>
 80028fc:	4652      	mov	r2, sl
 80028fe:	4b80      	ldr	r3, [pc, #512]	@ (8002b00 <__aeabi_dmul+0x364>)
 8002900:	401a      	ands	r2, r3
 8002902:	2380      	movs	r3, #128	@ 0x80
 8002904:	4692      	mov	sl, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	18c3      	adds	r3, r0, r3
 800290a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b04 <__aeabi_dmul+0x368>)
 800290c:	4293      	cmp	r3, r2
 800290e:	dd00      	ble.n	8002912 <__aeabi_dmul+0x176>
 8002910:	e18f      	b.n	8002c32 <__aeabi_dmul+0x496>
 8002912:	4642      	mov	r2, r8
 8002914:	08d1      	lsrs	r1, r2, #3
 8002916:	4652      	mov	r2, sl
 8002918:	0752      	lsls	r2, r2, #29
 800291a:	430a      	orrs	r2, r1
 800291c:	4651      	mov	r1, sl
 800291e:	055b      	lsls	r3, r3, #21
 8002920:	024c      	lsls	r4, r1, #9
 8002922:	0b24      	lsrs	r4, r4, #12
 8002924:	0d5b      	lsrs	r3, r3, #21
 8002926:	e797      	b.n	8002858 <__aeabi_dmul+0xbc>
 8002928:	4b73      	ldr	r3, [pc, #460]	@ (8002af8 <__aeabi_dmul+0x35c>)
 800292a:	4326      	orrs	r6, r4
 800292c:	469c      	mov	ip, r3
 800292e:	44e3      	add	fp, ip
 8002930:	2e00      	cmp	r6, #0
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x19a>
 8002934:	e16f      	b.n	8002c16 <__aeabi_dmul+0x47a>
 8002936:	2303      	movs	r3, #3
 8002938:	4649      	mov	r1, r9
 800293a:	431d      	orrs	r5, r3
 800293c:	9b00      	ldr	r3, [sp, #0]
 800293e:	4059      	eors	r1, r3
 8002940:	b2cb      	uxtb	r3, r1
 8002942:	9303      	str	r3, [sp, #12]
 8002944:	2d0a      	cmp	r5, #10
 8002946:	dd00      	ble.n	800294a <__aeabi_dmul+0x1ae>
 8002948:	e133      	b.n	8002bb2 <__aeabi_dmul+0x416>
 800294a:	2301      	movs	r3, #1
 800294c:	40ab      	lsls	r3, r5
 800294e:	001d      	movs	r5, r3
 8002950:	2303      	movs	r3, #3
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	2288      	movs	r2, #136	@ 0x88
 8002956:	422a      	tst	r2, r5
 8002958:	d197      	bne.n	800288a <__aeabi_dmul+0xee>
 800295a:	4642      	mov	r2, r8
 800295c:	4643      	mov	r3, r8
 800295e:	0412      	lsls	r2, r2, #16
 8002960:	0c12      	lsrs	r2, r2, #16
 8002962:	0016      	movs	r6, r2
 8002964:	9801      	ldr	r0, [sp, #4]
 8002966:	0c1d      	lsrs	r5, r3, #16
 8002968:	0c03      	lsrs	r3, r0, #16
 800296a:	0400      	lsls	r0, r0, #16
 800296c:	0c00      	lsrs	r0, r0, #16
 800296e:	4346      	muls	r6, r0
 8002970:	46b4      	mov	ip, r6
 8002972:	001e      	movs	r6, r3
 8002974:	436e      	muls	r6, r5
 8002976:	9600      	str	r6, [sp, #0]
 8002978:	0016      	movs	r6, r2
 800297a:	0007      	movs	r7, r0
 800297c:	435e      	muls	r6, r3
 800297e:	4661      	mov	r1, ip
 8002980:	46b0      	mov	r8, r6
 8002982:	436f      	muls	r7, r5
 8002984:	0c0e      	lsrs	r6, r1, #16
 8002986:	44b8      	add	r8, r7
 8002988:	4446      	add	r6, r8
 800298a:	42b7      	cmp	r7, r6
 800298c:	d905      	bls.n	800299a <__aeabi_dmul+0x1fe>
 800298e:	2180      	movs	r1, #128	@ 0x80
 8002990:	0249      	lsls	r1, r1, #9
 8002992:	4688      	mov	r8, r1
 8002994:	9f00      	ldr	r7, [sp, #0]
 8002996:	4447      	add	r7, r8
 8002998:	9700      	str	r7, [sp, #0]
 800299a:	4661      	mov	r1, ip
 800299c:	0409      	lsls	r1, r1, #16
 800299e:	0c09      	lsrs	r1, r1, #16
 80029a0:	0c37      	lsrs	r7, r6, #16
 80029a2:	0436      	lsls	r6, r6, #16
 80029a4:	468c      	mov	ip, r1
 80029a6:	0031      	movs	r1, r6
 80029a8:	4461      	add	r1, ip
 80029aa:	9101      	str	r1, [sp, #4]
 80029ac:	0011      	movs	r1, r2
 80029ae:	0c26      	lsrs	r6, r4, #16
 80029b0:	0424      	lsls	r4, r4, #16
 80029b2:	0c24      	lsrs	r4, r4, #16
 80029b4:	4361      	muls	r1, r4
 80029b6:	468c      	mov	ip, r1
 80029b8:	0021      	movs	r1, r4
 80029ba:	4369      	muls	r1, r5
 80029bc:	4689      	mov	r9, r1
 80029be:	4661      	mov	r1, ip
 80029c0:	0c09      	lsrs	r1, r1, #16
 80029c2:	4688      	mov	r8, r1
 80029c4:	4372      	muls	r2, r6
 80029c6:	444a      	add	r2, r9
 80029c8:	4442      	add	r2, r8
 80029ca:	4375      	muls	r5, r6
 80029cc:	4591      	cmp	r9, r2
 80029ce:	d903      	bls.n	80029d8 <__aeabi_dmul+0x23c>
 80029d0:	2180      	movs	r1, #128	@ 0x80
 80029d2:	0249      	lsls	r1, r1, #9
 80029d4:	4688      	mov	r8, r1
 80029d6:	4445      	add	r5, r8
 80029d8:	0c11      	lsrs	r1, r2, #16
 80029da:	4688      	mov	r8, r1
 80029dc:	4661      	mov	r1, ip
 80029de:	0409      	lsls	r1, r1, #16
 80029e0:	0c09      	lsrs	r1, r1, #16
 80029e2:	468c      	mov	ip, r1
 80029e4:	0412      	lsls	r2, r2, #16
 80029e6:	4462      	add	r2, ip
 80029e8:	18b9      	adds	r1, r7, r2
 80029ea:	9102      	str	r1, [sp, #8]
 80029ec:	4651      	mov	r1, sl
 80029ee:	0c09      	lsrs	r1, r1, #16
 80029f0:	468c      	mov	ip, r1
 80029f2:	4651      	mov	r1, sl
 80029f4:	040f      	lsls	r7, r1, #16
 80029f6:	0c3f      	lsrs	r7, r7, #16
 80029f8:	0039      	movs	r1, r7
 80029fa:	4341      	muls	r1, r0
 80029fc:	4445      	add	r5, r8
 80029fe:	4688      	mov	r8, r1
 8002a00:	4661      	mov	r1, ip
 8002a02:	4341      	muls	r1, r0
 8002a04:	468a      	mov	sl, r1
 8002a06:	4641      	mov	r1, r8
 8002a08:	4660      	mov	r0, ip
 8002a0a:	0c09      	lsrs	r1, r1, #16
 8002a0c:	4689      	mov	r9, r1
 8002a0e:	4358      	muls	r0, r3
 8002a10:	437b      	muls	r3, r7
 8002a12:	4453      	add	r3, sl
 8002a14:	444b      	add	r3, r9
 8002a16:	459a      	cmp	sl, r3
 8002a18:	d903      	bls.n	8002a22 <__aeabi_dmul+0x286>
 8002a1a:	2180      	movs	r1, #128	@ 0x80
 8002a1c:	0249      	lsls	r1, r1, #9
 8002a1e:	4689      	mov	r9, r1
 8002a20:	4448      	add	r0, r9
 8002a22:	0c19      	lsrs	r1, r3, #16
 8002a24:	4689      	mov	r9, r1
 8002a26:	4641      	mov	r1, r8
 8002a28:	0409      	lsls	r1, r1, #16
 8002a2a:	0c09      	lsrs	r1, r1, #16
 8002a2c:	4688      	mov	r8, r1
 8002a2e:	0039      	movs	r1, r7
 8002a30:	4361      	muls	r1, r4
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	4443      	add	r3, r8
 8002a36:	4688      	mov	r8, r1
 8002a38:	4661      	mov	r1, ip
 8002a3a:	434c      	muls	r4, r1
 8002a3c:	4371      	muls	r1, r6
 8002a3e:	468c      	mov	ip, r1
 8002a40:	4641      	mov	r1, r8
 8002a42:	4377      	muls	r7, r6
 8002a44:	0c0e      	lsrs	r6, r1, #16
 8002a46:	193f      	adds	r7, r7, r4
 8002a48:	19f6      	adds	r6, r6, r7
 8002a4a:	4448      	add	r0, r9
 8002a4c:	42b4      	cmp	r4, r6
 8002a4e:	d903      	bls.n	8002a58 <__aeabi_dmul+0x2bc>
 8002a50:	2180      	movs	r1, #128	@ 0x80
 8002a52:	0249      	lsls	r1, r1, #9
 8002a54:	4689      	mov	r9, r1
 8002a56:	44cc      	add	ip, r9
 8002a58:	9902      	ldr	r1, [sp, #8]
 8002a5a:	9f00      	ldr	r7, [sp, #0]
 8002a5c:	4689      	mov	r9, r1
 8002a5e:	0431      	lsls	r1, r6, #16
 8002a60:	444f      	add	r7, r9
 8002a62:	4689      	mov	r9, r1
 8002a64:	4641      	mov	r1, r8
 8002a66:	4297      	cmp	r7, r2
 8002a68:	4192      	sbcs	r2, r2
 8002a6a:	040c      	lsls	r4, r1, #16
 8002a6c:	0c24      	lsrs	r4, r4, #16
 8002a6e:	444c      	add	r4, r9
 8002a70:	18ff      	adds	r7, r7, r3
 8002a72:	4252      	negs	r2, r2
 8002a74:	1964      	adds	r4, r4, r5
 8002a76:	18a1      	adds	r1, r4, r2
 8002a78:	429f      	cmp	r7, r3
 8002a7a:	419b      	sbcs	r3, r3
 8002a7c:	4688      	mov	r8, r1
 8002a7e:	4682      	mov	sl, r0
 8002a80:	425b      	negs	r3, r3
 8002a82:	4699      	mov	r9, r3
 8002a84:	4590      	cmp	r8, r2
 8002a86:	4192      	sbcs	r2, r2
 8002a88:	42ac      	cmp	r4, r5
 8002a8a:	41a4      	sbcs	r4, r4
 8002a8c:	44c2      	add	sl, r8
 8002a8e:	44d1      	add	r9, sl
 8002a90:	4252      	negs	r2, r2
 8002a92:	4264      	negs	r4, r4
 8002a94:	4314      	orrs	r4, r2
 8002a96:	4599      	cmp	r9, r3
 8002a98:	419b      	sbcs	r3, r3
 8002a9a:	4582      	cmp	sl, r0
 8002a9c:	4192      	sbcs	r2, r2
 8002a9e:	425b      	negs	r3, r3
 8002aa0:	4252      	negs	r2, r2
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	464a      	mov	r2, r9
 8002aa6:	0c36      	lsrs	r6, r6, #16
 8002aa8:	19a4      	adds	r4, r4, r6
 8002aaa:	18e3      	adds	r3, r4, r3
 8002aac:	4463      	add	r3, ip
 8002aae:	025b      	lsls	r3, r3, #9
 8002ab0:	0dd2      	lsrs	r2, r2, #23
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	9901      	ldr	r1, [sp, #4]
 8002ab6:	4692      	mov	sl, r2
 8002ab8:	027a      	lsls	r2, r7, #9
 8002aba:	430a      	orrs	r2, r1
 8002abc:	1e50      	subs	r0, r2, #1
 8002abe:	4182      	sbcs	r2, r0
 8002ac0:	0dff      	lsrs	r7, r7, #23
 8002ac2:	4317      	orrs	r7, r2
 8002ac4:	464a      	mov	r2, r9
 8002ac6:	0252      	lsls	r2, r2, #9
 8002ac8:	4317      	orrs	r7, r2
 8002aca:	46b8      	mov	r8, r7
 8002acc:	01db      	lsls	r3, r3, #7
 8002ace:	d500      	bpl.n	8002ad2 <__aeabi_dmul+0x336>
 8002ad0:	e6ed      	b.n	80028ae <__aeabi_dmul+0x112>
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <__aeabi_dmul+0x36c>)
 8002ad4:	9a03      	ldr	r2, [sp, #12]
 8002ad6:	445b      	add	r3, fp
 8002ad8:	4691      	mov	r9, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	dc00      	bgt.n	8002ae0 <__aeabi_dmul+0x344>
 8002ade:	e0ac      	b.n	8002c3a <__aeabi_dmul+0x49e>
 8002ae0:	003a      	movs	r2, r7
 8002ae2:	0752      	lsls	r2, r2, #29
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dmul+0x34c>
 8002ae6:	e710      	b.n	800290a <__aeabi_dmul+0x16e>
 8002ae8:	220f      	movs	r2, #15
 8002aea:	4658      	mov	r0, fp
 8002aec:	403a      	ands	r2, r7
 8002aee:	2a04      	cmp	r2, #4
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dmul+0x358>
 8002af2:	e6f9      	b.n	80028e8 <__aeabi_dmul+0x14c>
 8002af4:	e709      	b.n	800290a <__aeabi_dmul+0x16e>
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	000007ff 	.word	0x000007ff
 8002afc:	fffffc01 	.word	0xfffffc01
 8002b00:	feffffff 	.word	0xfeffffff
 8002b04:	000007fe 	.word	0x000007fe
 8002b08:	000003ff 	.word	0x000003ff
 8002b0c:	0022      	movs	r2, r4
 8002b0e:	4332      	orrs	r2, r6
 8002b10:	d06f      	beq.n	8002bf2 <__aeabi_dmul+0x456>
 8002b12:	2c00      	cmp	r4, #0
 8002b14:	d100      	bne.n	8002b18 <__aeabi_dmul+0x37c>
 8002b16:	e0c2      	b.n	8002c9e <__aeabi_dmul+0x502>
 8002b18:	0020      	movs	r0, r4
 8002b1a:	f000 fe27 	bl	800376c <__clzsi2>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	0003      	movs	r3, r0
 8002b22:	3a0b      	subs	r2, #11
 8002b24:	201d      	movs	r0, #29
 8002b26:	1a82      	subs	r2, r0, r2
 8002b28:	0030      	movs	r0, r6
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	40d0      	lsrs	r0, r2
 8002b2e:	3908      	subs	r1, #8
 8002b30:	408c      	lsls	r4, r1
 8002b32:	0002      	movs	r2, r0
 8002b34:	4322      	orrs	r2, r4
 8002b36:	0034      	movs	r4, r6
 8002b38:	408c      	lsls	r4, r1
 8002b3a:	4659      	mov	r1, fp
 8002b3c:	1acb      	subs	r3, r1, r3
 8002b3e:	4986      	ldr	r1, [pc, #536]	@ (8002d58 <__aeabi_dmul+0x5bc>)
 8002b40:	468b      	mov	fp, r1
 8002b42:	449b      	add	fp, r3
 8002b44:	2d0a      	cmp	r5, #10
 8002b46:	dd00      	ble.n	8002b4a <__aeabi_dmul+0x3ae>
 8002b48:	e6a4      	b.n	8002894 <__aeabi_dmul+0xf8>
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	9b00      	ldr	r3, [sp, #0]
 8002b4e:	9401      	str	r4, [sp, #4]
 8002b50:	4059      	eors	r1, r3
 8002b52:	b2cb      	uxtb	r3, r1
 8002b54:	0014      	movs	r4, r2
 8002b56:	2000      	movs	r0, #0
 8002b58:	9303      	str	r3, [sp, #12]
 8002b5a:	2d02      	cmp	r5, #2
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dmul+0x3c4>
 8002b5e:	e667      	b.n	8002830 <__aeabi_dmul+0x94>
 8002b60:	e6fb      	b.n	800295a <__aeabi_dmul+0x1be>
 8002b62:	4653      	mov	r3, sl
 8002b64:	4303      	orrs	r3, r0
 8002b66:	4698      	mov	r8, r3
 8002b68:	d03c      	beq.n	8002be4 <__aeabi_dmul+0x448>
 8002b6a:	4653      	mov	r3, sl
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d100      	bne.n	8002b72 <__aeabi_dmul+0x3d6>
 8002b70:	e0a3      	b.n	8002cba <__aeabi_dmul+0x51e>
 8002b72:	4650      	mov	r0, sl
 8002b74:	f000 fdfa 	bl	800376c <__clzsi2>
 8002b78:	230b      	movs	r3, #11
 8002b7a:	425b      	negs	r3, r3
 8002b7c:	469c      	mov	ip, r3
 8002b7e:	0002      	movs	r2, r0
 8002b80:	4484      	add	ip, r0
 8002b82:	0011      	movs	r1, r2
 8002b84:	4650      	mov	r0, sl
 8002b86:	3908      	subs	r1, #8
 8002b88:	4088      	lsls	r0, r1
 8002b8a:	231d      	movs	r3, #29
 8002b8c:	4680      	mov	r8, r0
 8002b8e:	4660      	mov	r0, ip
 8002b90:	1a1b      	subs	r3, r3, r0
 8002b92:	0020      	movs	r0, r4
 8002b94:	40d8      	lsrs	r0, r3
 8002b96:	0003      	movs	r3, r0
 8002b98:	4640      	mov	r0, r8
 8002b9a:	4303      	orrs	r3, r0
 8002b9c:	469a      	mov	sl, r3
 8002b9e:	0023      	movs	r3, r4
 8002ba0:	408b      	lsls	r3, r1
 8002ba2:	4698      	mov	r8, r3
 8002ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8002d58 <__aeabi_dmul+0x5bc>)
 8002ba6:	2500      	movs	r5, #0
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	469b      	mov	fp, r3
 8002bac:	2300      	movs	r3, #0
 8002bae:	9302      	str	r3, [sp, #8]
 8002bb0:	e61a      	b.n	80027e8 <__aeabi_dmul+0x4c>
 8002bb2:	2d0f      	cmp	r5, #15
 8002bb4:	d000      	beq.n	8002bb8 <__aeabi_dmul+0x41c>
 8002bb6:	e0c9      	b.n	8002d4c <__aeabi_dmul+0x5b0>
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	4652      	mov	r2, sl
 8002bbc:	031b      	lsls	r3, r3, #12
 8002bbe:	421a      	tst	r2, r3
 8002bc0:	d002      	beq.n	8002bc8 <__aeabi_dmul+0x42c>
 8002bc2:	421c      	tst	r4, r3
 8002bc4:	d100      	bne.n	8002bc8 <__aeabi_dmul+0x42c>
 8002bc6:	e092      	b.n	8002cee <__aeabi_dmul+0x552>
 8002bc8:	2480      	movs	r4, #128	@ 0x80
 8002bca:	4653      	mov	r3, sl
 8002bcc:	0324      	lsls	r4, r4, #12
 8002bce:	431c      	orrs	r4, r3
 8002bd0:	0324      	lsls	r4, r4, #12
 8002bd2:	4642      	mov	r2, r8
 8002bd4:	0b24      	lsrs	r4, r4, #12
 8002bd6:	e63e      	b.n	8002856 <__aeabi_dmul+0xba>
 8002bd8:	469b      	mov	fp, r3
 8002bda:	2303      	movs	r3, #3
 8002bdc:	4680      	mov	r8, r0
 8002bde:	250c      	movs	r5, #12
 8002be0:	9302      	str	r3, [sp, #8]
 8002be2:	e601      	b.n	80027e8 <__aeabi_dmul+0x4c>
 8002be4:	2300      	movs	r3, #0
 8002be6:	469a      	mov	sl, r3
 8002be8:	469b      	mov	fp, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	2504      	movs	r5, #4
 8002bee:	9302      	str	r3, [sp, #8]
 8002bf0:	e5fa      	b.n	80027e8 <__aeabi_dmul+0x4c>
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	430d      	orrs	r5, r1
 8002bf6:	2d0a      	cmp	r5, #10
 8002bf8:	dd00      	ble.n	8002bfc <__aeabi_dmul+0x460>
 8002bfa:	e64b      	b.n	8002894 <__aeabi_dmul+0xf8>
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	9800      	ldr	r0, [sp, #0]
 8002c00:	4041      	eors	r1, r0
 8002c02:	b2c9      	uxtb	r1, r1
 8002c04:	9103      	str	r1, [sp, #12]
 8002c06:	2d02      	cmp	r5, #2
 8002c08:	dc00      	bgt.n	8002c0c <__aeabi_dmul+0x470>
 8002c0a:	e096      	b.n	8002d3a <__aeabi_dmul+0x59e>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2400      	movs	r4, #0
 8002c10:	2001      	movs	r0, #1
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	e60c      	b.n	8002830 <__aeabi_dmul+0x94>
 8002c16:	4649      	mov	r1, r9
 8002c18:	2302      	movs	r3, #2
 8002c1a:	9a00      	ldr	r2, [sp, #0]
 8002c1c:	432b      	orrs	r3, r5
 8002c1e:	4051      	eors	r1, r2
 8002c20:	b2ca      	uxtb	r2, r1
 8002c22:	9203      	str	r2, [sp, #12]
 8002c24:	2b0a      	cmp	r3, #10
 8002c26:	dd00      	ble.n	8002c2a <__aeabi_dmul+0x48e>
 8002c28:	e634      	b.n	8002894 <__aeabi_dmul+0xf8>
 8002c2a:	2d00      	cmp	r5, #0
 8002c2c:	d157      	bne.n	8002cde <__aeabi_dmul+0x542>
 8002c2e:	9b03      	ldr	r3, [sp, #12]
 8002c30:	4699      	mov	r9, r3
 8002c32:	2400      	movs	r4, #0
 8002c34:	2200      	movs	r2, #0
 8002c36:	4b49      	ldr	r3, [pc, #292]	@ (8002d5c <__aeabi_dmul+0x5c0>)
 8002c38:	e60e      	b.n	8002858 <__aeabi_dmul+0xbc>
 8002c3a:	4658      	mov	r0, fp
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	1ac9      	subs	r1, r1, r3
 8002c40:	2938      	cmp	r1, #56	@ 0x38
 8002c42:	dd00      	ble.n	8002c46 <__aeabi_dmul+0x4aa>
 8002c44:	e62f      	b.n	80028a6 <__aeabi_dmul+0x10a>
 8002c46:	291f      	cmp	r1, #31
 8002c48:	dd56      	ble.n	8002cf8 <__aeabi_dmul+0x55c>
 8002c4a:	221f      	movs	r2, #31
 8002c4c:	4654      	mov	r4, sl
 8002c4e:	4252      	negs	r2, r2
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	40dc      	lsrs	r4, r3
 8002c54:	2920      	cmp	r1, #32
 8002c56:	d007      	beq.n	8002c68 <__aeabi_dmul+0x4cc>
 8002c58:	4b41      	ldr	r3, [pc, #260]	@ (8002d60 <__aeabi_dmul+0x5c4>)
 8002c5a:	4642      	mov	r2, r8
 8002c5c:	469c      	mov	ip, r3
 8002c5e:	4653      	mov	r3, sl
 8002c60:	4460      	add	r0, ip
 8002c62:	4083      	lsls	r3, r0
 8002c64:	431a      	orrs	r2, r3
 8002c66:	4690      	mov	r8, r2
 8002c68:	4642      	mov	r2, r8
 8002c6a:	2107      	movs	r1, #7
 8002c6c:	1e53      	subs	r3, r2, #1
 8002c6e:	419a      	sbcs	r2, r3
 8002c70:	000b      	movs	r3, r1
 8002c72:	4322      	orrs	r2, r4
 8002c74:	4013      	ands	r3, r2
 8002c76:	2400      	movs	r4, #0
 8002c78:	4211      	tst	r1, r2
 8002c7a:	d009      	beq.n	8002c90 <__aeabi_dmul+0x4f4>
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d05d      	beq.n	8002d40 <__aeabi_dmul+0x5a4>
 8002c84:	1d11      	adds	r1, r2, #4
 8002c86:	4291      	cmp	r1, r2
 8002c88:	419b      	sbcs	r3, r3
 8002c8a:	000a      	movs	r2, r1
 8002c8c:	425b      	negs	r3, r3
 8002c8e:	075b      	lsls	r3, r3, #29
 8002c90:	08d2      	lsrs	r2, r2, #3
 8002c92:	431a      	orrs	r2, r3
 8002c94:	2300      	movs	r3, #0
 8002c96:	e5df      	b.n	8002858 <__aeabi_dmul+0xbc>
 8002c98:	9b03      	ldr	r3, [sp, #12]
 8002c9a:	4699      	mov	r9, r3
 8002c9c:	e5fa      	b.n	8002894 <__aeabi_dmul+0xf8>
 8002c9e:	9801      	ldr	r0, [sp, #4]
 8002ca0:	f000 fd64 	bl	800376c <__clzsi2>
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3215      	adds	r2, #21
 8002caa:	3320      	adds	r3, #32
 8002cac:	2a1c      	cmp	r2, #28
 8002cae:	dc00      	bgt.n	8002cb2 <__aeabi_dmul+0x516>
 8002cb0:	e738      	b.n	8002b24 <__aeabi_dmul+0x388>
 8002cb2:	9a01      	ldr	r2, [sp, #4]
 8002cb4:	3808      	subs	r0, #8
 8002cb6:	4082      	lsls	r2, r0
 8002cb8:	e73f      	b.n	8002b3a <__aeabi_dmul+0x39e>
 8002cba:	f000 fd57 	bl	800376c <__clzsi2>
 8002cbe:	2315      	movs	r3, #21
 8002cc0:	469c      	mov	ip, r3
 8002cc2:	4484      	add	ip, r0
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	4663      	mov	r3, ip
 8002cc8:	3220      	adds	r2, #32
 8002cca:	2b1c      	cmp	r3, #28
 8002ccc:	dc00      	bgt.n	8002cd0 <__aeabi_dmul+0x534>
 8002cce:	e758      	b.n	8002b82 <__aeabi_dmul+0x3e6>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	4698      	mov	r8, r3
 8002cd4:	0023      	movs	r3, r4
 8002cd6:	3808      	subs	r0, #8
 8002cd8:	4083      	lsls	r3, r0
 8002cda:	469a      	mov	sl, r3
 8002cdc:	e762      	b.n	8002ba4 <__aeabi_dmul+0x408>
 8002cde:	001d      	movs	r5, r3
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2400      	movs	r4, #0
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	e5a2      	b.n	8002830 <__aeabi_dmul+0x94>
 8002cea:	9002      	str	r0, [sp, #8]
 8002cec:	e632      	b.n	8002954 <__aeabi_dmul+0x1b8>
 8002cee:	431c      	orrs	r4, r3
 8002cf0:	9b00      	ldr	r3, [sp, #0]
 8002cf2:	9a01      	ldr	r2, [sp, #4]
 8002cf4:	4699      	mov	r9, r3
 8002cf6:	e5ae      	b.n	8002856 <__aeabi_dmul+0xba>
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <__aeabi_dmul+0x5c8>)
 8002cfa:	4652      	mov	r2, sl
 8002cfc:	18c3      	adds	r3, r0, r3
 8002cfe:	4640      	mov	r0, r8
 8002d00:	409a      	lsls	r2, r3
 8002d02:	40c8      	lsrs	r0, r1
 8002d04:	4302      	orrs	r2, r0
 8002d06:	4640      	mov	r0, r8
 8002d08:	4098      	lsls	r0, r3
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	1e58      	subs	r0, r3, #1
 8002d0e:	4183      	sbcs	r3, r0
 8002d10:	4654      	mov	r4, sl
 8002d12:	431a      	orrs	r2, r3
 8002d14:	40cc      	lsrs	r4, r1
 8002d16:	0753      	lsls	r3, r2, #29
 8002d18:	d009      	beq.n	8002d2e <__aeabi_dmul+0x592>
 8002d1a:	230f      	movs	r3, #15
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d005      	beq.n	8002d2e <__aeabi_dmul+0x592>
 8002d22:	1d13      	adds	r3, r2, #4
 8002d24:	4293      	cmp	r3, r2
 8002d26:	4192      	sbcs	r2, r2
 8002d28:	4252      	negs	r2, r2
 8002d2a:	18a4      	adds	r4, r4, r2
 8002d2c:	001a      	movs	r2, r3
 8002d2e:	0223      	lsls	r3, r4, #8
 8002d30:	d508      	bpl.n	8002d44 <__aeabi_dmul+0x5a8>
 8002d32:	2301      	movs	r3, #1
 8002d34:	2400      	movs	r4, #0
 8002d36:	2200      	movs	r2, #0
 8002d38:	e58e      	b.n	8002858 <__aeabi_dmul+0xbc>
 8002d3a:	4689      	mov	r9, r1
 8002d3c:	2400      	movs	r4, #0
 8002d3e:	e58b      	b.n	8002858 <__aeabi_dmul+0xbc>
 8002d40:	2300      	movs	r3, #0
 8002d42:	e7a5      	b.n	8002c90 <__aeabi_dmul+0x4f4>
 8002d44:	0763      	lsls	r3, r4, #29
 8002d46:	0264      	lsls	r4, r4, #9
 8002d48:	0b24      	lsrs	r4, r4, #12
 8002d4a:	e7a1      	b.n	8002c90 <__aeabi_dmul+0x4f4>
 8002d4c:	9b00      	ldr	r3, [sp, #0]
 8002d4e:	46a2      	mov	sl, r4
 8002d50:	4699      	mov	r9, r3
 8002d52:	9b01      	ldr	r3, [sp, #4]
 8002d54:	4698      	mov	r8, r3
 8002d56:	e737      	b.n	8002bc8 <__aeabi_dmul+0x42c>
 8002d58:	fffffc0d 	.word	0xfffffc0d
 8002d5c:	000007ff 	.word	0x000007ff
 8002d60:	0000043e 	.word	0x0000043e
 8002d64:	0000041e 	.word	0x0000041e

08002d68 <__aeabi_dsub>:
 8002d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6a:	4657      	mov	r7, sl
 8002d6c:	464e      	mov	r6, r9
 8002d6e:	4645      	mov	r5, r8
 8002d70:	46de      	mov	lr, fp
 8002d72:	b5e0      	push	{r5, r6, r7, lr}
 8002d74:	b083      	sub	sp, #12
 8002d76:	9000      	str	r0, [sp, #0]
 8002d78:	9101      	str	r1, [sp, #4]
 8002d7a:	030c      	lsls	r4, r1, #12
 8002d7c:	004d      	lsls	r5, r1, #1
 8002d7e:	0fce      	lsrs	r6, r1, #31
 8002d80:	0a61      	lsrs	r1, r4, #9
 8002d82:	9c00      	ldr	r4, [sp, #0]
 8002d84:	005f      	lsls	r7, r3, #1
 8002d86:	0f64      	lsrs	r4, r4, #29
 8002d88:	430c      	orrs	r4, r1
 8002d8a:	9900      	ldr	r1, [sp, #0]
 8002d8c:	9200      	str	r2, [sp, #0]
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	00c8      	lsls	r0, r1, #3
 8002d92:	0319      	lsls	r1, r3, #12
 8002d94:	0d7b      	lsrs	r3, r7, #21
 8002d96:	4699      	mov	r9, r3
 8002d98:	9b01      	ldr	r3, [sp, #4]
 8002d9a:	4fcc      	ldr	r7, [pc, #816]	@ (80030cc <__aeabi_dsub+0x364>)
 8002d9c:	0fdb      	lsrs	r3, r3, #31
 8002d9e:	469c      	mov	ip, r3
 8002da0:	0a4b      	lsrs	r3, r1, #9
 8002da2:	9900      	ldr	r1, [sp, #0]
 8002da4:	4680      	mov	r8, r0
 8002da6:	0f49      	lsrs	r1, r1, #29
 8002da8:	4319      	orrs	r1, r3
 8002daa:	9b00      	ldr	r3, [sp, #0]
 8002dac:	468b      	mov	fp, r1
 8002dae:	00da      	lsls	r2, r3, #3
 8002db0:	4692      	mov	sl, r2
 8002db2:	0d6d      	lsrs	r5, r5, #21
 8002db4:	45b9      	cmp	r9, r7
 8002db6:	d100      	bne.n	8002dba <__aeabi_dsub+0x52>
 8002db8:	e0bf      	b.n	8002f3a <__aeabi_dsub+0x1d2>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4661      	mov	r1, ip
 8002dbe:	4059      	eors	r1, r3
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	468c      	mov	ip, r1
 8002dc4:	1aeb      	subs	r3, r5, r3
 8002dc6:	428e      	cmp	r6, r1
 8002dc8:	d075      	beq.n	8002eb6 <__aeabi_dsub+0x14e>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	dc00      	bgt.n	8002dd0 <__aeabi_dsub+0x68>
 8002dce:	e2a3      	b.n	8003318 <__aeabi_dsub+0x5b0>
 8002dd0:	4649      	mov	r1, r9
 8002dd2:	2900      	cmp	r1, #0
 8002dd4:	d100      	bne.n	8002dd8 <__aeabi_dsub+0x70>
 8002dd6:	e0ce      	b.n	8002f76 <__aeabi_dsub+0x20e>
 8002dd8:	42bd      	cmp	r5, r7
 8002dda:	d100      	bne.n	8002dde <__aeabi_dsub+0x76>
 8002ddc:	e200      	b.n	80031e0 <__aeabi_dsub+0x478>
 8002dde:	2701      	movs	r7, #1
 8002de0:	2b38      	cmp	r3, #56	@ 0x38
 8002de2:	dc19      	bgt.n	8002e18 <__aeabi_dsub+0xb0>
 8002de4:	2780      	movs	r7, #128	@ 0x80
 8002de6:	4659      	mov	r1, fp
 8002de8:	043f      	lsls	r7, r7, #16
 8002dea:	4339      	orrs	r1, r7
 8002dec:	468b      	mov	fp, r1
 8002dee:	2b1f      	cmp	r3, #31
 8002df0:	dd00      	ble.n	8002df4 <__aeabi_dsub+0x8c>
 8002df2:	e1fa      	b.n	80031ea <__aeabi_dsub+0x482>
 8002df4:	2720      	movs	r7, #32
 8002df6:	1af9      	subs	r1, r7, r3
 8002df8:	468c      	mov	ip, r1
 8002dfa:	4659      	mov	r1, fp
 8002dfc:	4667      	mov	r7, ip
 8002dfe:	40b9      	lsls	r1, r7
 8002e00:	000f      	movs	r7, r1
 8002e02:	0011      	movs	r1, r2
 8002e04:	40d9      	lsrs	r1, r3
 8002e06:	430f      	orrs	r7, r1
 8002e08:	4661      	mov	r1, ip
 8002e0a:	408a      	lsls	r2, r1
 8002e0c:	1e51      	subs	r1, r2, #1
 8002e0e:	418a      	sbcs	r2, r1
 8002e10:	4659      	mov	r1, fp
 8002e12:	40d9      	lsrs	r1, r3
 8002e14:	4317      	orrs	r7, r2
 8002e16:	1a64      	subs	r4, r4, r1
 8002e18:	1bc7      	subs	r7, r0, r7
 8002e1a:	42b8      	cmp	r0, r7
 8002e1c:	4180      	sbcs	r0, r0
 8002e1e:	4240      	negs	r0, r0
 8002e20:	1a24      	subs	r4, r4, r0
 8002e22:	0223      	lsls	r3, r4, #8
 8002e24:	d400      	bmi.n	8002e28 <__aeabi_dsub+0xc0>
 8002e26:	e140      	b.n	80030aa <__aeabi_dsub+0x342>
 8002e28:	0264      	lsls	r4, r4, #9
 8002e2a:	0a64      	lsrs	r4, r4, #9
 8002e2c:	2c00      	cmp	r4, #0
 8002e2e:	d100      	bne.n	8002e32 <__aeabi_dsub+0xca>
 8002e30:	e154      	b.n	80030dc <__aeabi_dsub+0x374>
 8002e32:	0020      	movs	r0, r4
 8002e34:	f000 fc9a 	bl	800376c <__clzsi2>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	3b08      	subs	r3, #8
 8002e3c:	2120      	movs	r1, #32
 8002e3e:	0038      	movs	r0, r7
 8002e40:	1aca      	subs	r2, r1, r3
 8002e42:	40d0      	lsrs	r0, r2
 8002e44:	409c      	lsls	r4, r3
 8002e46:	0002      	movs	r2, r0
 8002e48:	409f      	lsls	r7, r3
 8002e4a:	4322      	orrs	r2, r4
 8002e4c:	429d      	cmp	r5, r3
 8002e4e:	dd00      	ble.n	8002e52 <__aeabi_dsub+0xea>
 8002e50:	e1a6      	b.n	80031a0 <__aeabi_dsub+0x438>
 8002e52:	1b58      	subs	r0, r3, r5
 8002e54:	3001      	adds	r0, #1
 8002e56:	1a09      	subs	r1, r1, r0
 8002e58:	003c      	movs	r4, r7
 8002e5a:	408f      	lsls	r7, r1
 8002e5c:	40c4      	lsrs	r4, r0
 8002e5e:	1e7b      	subs	r3, r7, #1
 8002e60:	419f      	sbcs	r7, r3
 8002e62:	0013      	movs	r3, r2
 8002e64:	408b      	lsls	r3, r1
 8002e66:	4327      	orrs	r7, r4
 8002e68:	431f      	orrs	r7, r3
 8002e6a:	40c2      	lsrs	r2, r0
 8002e6c:	003b      	movs	r3, r7
 8002e6e:	0014      	movs	r4, r2
 8002e70:	2500      	movs	r5, #0
 8002e72:	4313      	orrs	r3, r2
 8002e74:	d100      	bne.n	8002e78 <__aeabi_dsub+0x110>
 8002e76:	e1f7      	b.n	8003268 <__aeabi_dsub+0x500>
 8002e78:	077b      	lsls	r3, r7, #29
 8002e7a:	d100      	bne.n	8002e7e <__aeabi_dsub+0x116>
 8002e7c:	e377      	b.n	800356e <__aeabi_dsub+0x806>
 8002e7e:	230f      	movs	r3, #15
 8002e80:	0038      	movs	r0, r7
 8002e82:	403b      	ands	r3, r7
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d004      	beq.n	8002e92 <__aeabi_dsub+0x12a>
 8002e88:	1d38      	adds	r0, r7, #4
 8002e8a:	42b8      	cmp	r0, r7
 8002e8c:	41bf      	sbcs	r7, r7
 8002e8e:	427f      	negs	r7, r7
 8002e90:	19e4      	adds	r4, r4, r7
 8002e92:	0223      	lsls	r3, r4, #8
 8002e94:	d400      	bmi.n	8002e98 <__aeabi_dsub+0x130>
 8002e96:	e368      	b.n	800356a <__aeabi_dsub+0x802>
 8002e98:	4b8c      	ldr	r3, [pc, #560]	@ (80030cc <__aeabi_dsub+0x364>)
 8002e9a:	3501      	adds	r5, #1
 8002e9c:	429d      	cmp	r5, r3
 8002e9e:	d100      	bne.n	8002ea2 <__aeabi_dsub+0x13a>
 8002ea0:	e0f4      	b.n	800308c <__aeabi_dsub+0x324>
 8002ea2:	4b8b      	ldr	r3, [pc, #556]	@ (80030d0 <__aeabi_dsub+0x368>)
 8002ea4:	056d      	lsls	r5, r5, #21
 8002ea6:	401c      	ands	r4, r3
 8002ea8:	0d6d      	lsrs	r5, r5, #21
 8002eaa:	0767      	lsls	r7, r4, #29
 8002eac:	08c0      	lsrs	r0, r0, #3
 8002eae:	0264      	lsls	r4, r4, #9
 8002eb0:	4307      	orrs	r7, r0
 8002eb2:	0b24      	lsrs	r4, r4, #12
 8002eb4:	e0ec      	b.n	8003090 <__aeabi_dsub+0x328>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	dc00      	bgt.n	8002ebc <__aeabi_dsub+0x154>
 8002eba:	e329      	b.n	8003510 <__aeabi_dsub+0x7a8>
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	2900      	cmp	r1, #0
 8002ec0:	d000      	beq.n	8002ec4 <__aeabi_dsub+0x15c>
 8002ec2:	e0d6      	b.n	8003072 <__aeabi_dsub+0x30a>
 8002ec4:	4659      	mov	r1, fp
 8002ec6:	4311      	orrs	r1, r2
 8002ec8:	d100      	bne.n	8002ecc <__aeabi_dsub+0x164>
 8002eca:	e12e      	b.n	800312a <__aeabi_dsub+0x3c2>
 8002ecc:	1e59      	subs	r1, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d100      	bne.n	8002ed4 <__aeabi_dsub+0x16c>
 8002ed2:	e1e6      	b.n	80032a2 <__aeabi_dsub+0x53a>
 8002ed4:	42bb      	cmp	r3, r7
 8002ed6:	d100      	bne.n	8002eda <__aeabi_dsub+0x172>
 8002ed8:	e182      	b.n	80031e0 <__aeabi_dsub+0x478>
 8002eda:	2701      	movs	r7, #1
 8002edc:	000b      	movs	r3, r1
 8002ede:	2938      	cmp	r1, #56	@ 0x38
 8002ee0:	dc14      	bgt.n	8002f0c <__aeabi_dsub+0x1a4>
 8002ee2:	2b1f      	cmp	r3, #31
 8002ee4:	dd00      	ble.n	8002ee8 <__aeabi_dsub+0x180>
 8002ee6:	e23c      	b.n	8003362 <__aeabi_dsub+0x5fa>
 8002ee8:	2720      	movs	r7, #32
 8002eea:	1af9      	subs	r1, r7, r3
 8002eec:	468c      	mov	ip, r1
 8002eee:	4659      	mov	r1, fp
 8002ef0:	4667      	mov	r7, ip
 8002ef2:	40b9      	lsls	r1, r7
 8002ef4:	000f      	movs	r7, r1
 8002ef6:	0011      	movs	r1, r2
 8002ef8:	40d9      	lsrs	r1, r3
 8002efa:	430f      	orrs	r7, r1
 8002efc:	4661      	mov	r1, ip
 8002efe:	408a      	lsls	r2, r1
 8002f00:	1e51      	subs	r1, r2, #1
 8002f02:	418a      	sbcs	r2, r1
 8002f04:	4659      	mov	r1, fp
 8002f06:	40d9      	lsrs	r1, r3
 8002f08:	4317      	orrs	r7, r2
 8002f0a:	1864      	adds	r4, r4, r1
 8002f0c:	183f      	adds	r7, r7, r0
 8002f0e:	4287      	cmp	r7, r0
 8002f10:	4180      	sbcs	r0, r0
 8002f12:	4240      	negs	r0, r0
 8002f14:	1824      	adds	r4, r4, r0
 8002f16:	0223      	lsls	r3, r4, #8
 8002f18:	d400      	bmi.n	8002f1c <__aeabi_dsub+0x1b4>
 8002f1a:	e0c6      	b.n	80030aa <__aeabi_dsub+0x342>
 8002f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80030cc <__aeabi_dsub+0x364>)
 8002f1e:	3501      	adds	r5, #1
 8002f20:	429d      	cmp	r5, r3
 8002f22:	d100      	bne.n	8002f26 <__aeabi_dsub+0x1be>
 8002f24:	e0b2      	b.n	800308c <__aeabi_dsub+0x324>
 8002f26:	2101      	movs	r1, #1
 8002f28:	4b69      	ldr	r3, [pc, #420]	@ (80030d0 <__aeabi_dsub+0x368>)
 8002f2a:	087a      	lsrs	r2, r7, #1
 8002f2c:	401c      	ands	r4, r3
 8002f2e:	4039      	ands	r1, r7
 8002f30:	430a      	orrs	r2, r1
 8002f32:	07e7      	lsls	r7, r4, #31
 8002f34:	4317      	orrs	r7, r2
 8002f36:	0864      	lsrs	r4, r4, #1
 8002f38:	e79e      	b.n	8002e78 <__aeabi_dsub+0x110>
 8002f3a:	4b66      	ldr	r3, [pc, #408]	@ (80030d4 <__aeabi_dsub+0x36c>)
 8002f3c:	4311      	orrs	r1, r2
 8002f3e:	468a      	mov	sl, r1
 8002f40:	18eb      	adds	r3, r5, r3
 8002f42:	2900      	cmp	r1, #0
 8002f44:	d028      	beq.n	8002f98 <__aeabi_dsub+0x230>
 8002f46:	4566      	cmp	r6, ip
 8002f48:	d02c      	beq.n	8002fa4 <__aeabi_dsub+0x23c>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d05b      	beq.n	8003006 <__aeabi_dsub+0x29e>
 8002f4e:	2d00      	cmp	r5, #0
 8002f50:	d100      	bne.n	8002f54 <__aeabi_dsub+0x1ec>
 8002f52:	e12c      	b.n	80031ae <__aeabi_dsub+0x446>
 8002f54:	465b      	mov	r3, fp
 8002f56:	4666      	mov	r6, ip
 8002f58:	075f      	lsls	r7, r3, #29
 8002f5a:	08d2      	lsrs	r2, r2, #3
 8002f5c:	4317      	orrs	r7, r2
 8002f5e:	08dd      	lsrs	r5, r3, #3
 8002f60:	003b      	movs	r3, r7
 8002f62:	432b      	orrs	r3, r5
 8002f64:	d100      	bne.n	8002f68 <__aeabi_dsub+0x200>
 8002f66:	e0e2      	b.n	800312e <__aeabi_dsub+0x3c6>
 8002f68:	2480      	movs	r4, #128	@ 0x80
 8002f6a:	0324      	lsls	r4, r4, #12
 8002f6c:	432c      	orrs	r4, r5
 8002f6e:	0324      	lsls	r4, r4, #12
 8002f70:	4d56      	ldr	r5, [pc, #344]	@ (80030cc <__aeabi_dsub+0x364>)
 8002f72:	0b24      	lsrs	r4, r4, #12
 8002f74:	e08c      	b.n	8003090 <__aeabi_dsub+0x328>
 8002f76:	4659      	mov	r1, fp
 8002f78:	4311      	orrs	r1, r2
 8002f7a:	d100      	bne.n	8002f7e <__aeabi_dsub+0x216>
 8002f7c:	e0d5      	b.n	800312a <__aeabi_dsub+0x3c2>
 8002f7e:	1e59      	subs	r1, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d100      	bne.n	8002f86 <__aeabi_dsub+0x21e>
 8002f84:	e1b9      	b.n	80032fa <__aeabi_dsub+0x592>
 8002f86:	42bb      	cmp	r3, r7
 8002f88:	d100      	bne.n	8002f8c <__aeabi_dsub+0x224>
 8002f8a:	e1b1      	b.n	80032f0 <__aeabi_dsub+0x588>
 8002f8c:	2701      	movs	r7, #1
 8002f8e:	000b      	movs	r3, r1
 8002f90:	2938      	cmp	r1, #56	@ 0x38
 8002f92:	dd00      	ble.n	8002f96 <__aeabi_dsub+0x22e>
 8002f94:	e740      	b.n	8002e18 <__aeabi_dsub+0xb0>
 8002f96:	e72a      	b.n	8002dee <__aeabi_dsub+0x86>
 8002f98:	4661      	mov	r1, ip
 8002f9a:	2701      	movs	r7, #1
 8002f9c:	4079      	eors	r1, r7
 8002f9e:	468c      	mov	ip, r1
 8002fa0:	4566      	cmp	r6, ip
 8002fa2:	d1d2      	bne.n	8002f4a <__aeabi_dsub+0x1e2>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x242>
 8002fa8:	e0c5      	b.n	8003136 <__aeabi_dsub+0x3ce>
 8002faa:	2d00      	cmp	r5, #0
 8002fac:	d000      	beq.n	8002fb0 <__aeabi_dsub+0x248>
 8002fae:	e155      	b.n	800325c <__aeabi_dsub+0x4f4>
 8002fb0:	464b      	mov	r3, r9
 8002fb2:	0025      	movs	r5, r4
 8002fb4:	4305      	orrs	r5, r0
 8002fb6:	d100      	bne.n	8002fba <__aeabi_dsub+0x252>
 8002fb8:	e212      	b.n	80033e0 <__aeabi_dsub+0x678>
 8002fba:	1e59      	subs	r1, r3, #1
 8002fbc:	468c      	mov	ip, r1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d100      	bne.n	8002fc4 <__aeabi_dsub+0x25c>
 8002fc2:	e249      	b.n	8003458 <__aeabi_dsub+0x6f0>
 8002fc4:	4d41      	ldr	r5, [pc, #260]	@ (80030cc <__aeabi_dsub+0x364>)
 8002fc6:	42ab      	cmp	r3, r5
 8002fc8:	d100      	bne.n	8002fcc <__aeabi_dsub+0x264>
 8002fca:	e28f      	b.n	80034ec <__aeabi_dsub+0x784>
 8002fcc:	2701      	movs	r7, #1
 8002fce:	2938      	cmp	r1, #56	@ 0x38
 8002fd0:	dc11      	bgt.n	8002ff6 <__aeabi_dsub+0x28e>
 8002fd2:	4663      	mov	r3, ip
 8002fd4:	2b1f      	cmp	r3, #31
 8002fd6:	dd00      	ble.n	8002fda <__aeabi_dsub+0x272>
 8002fd8:	e25b      	b.n	8003492 <__aeabi_dsub+0x72a>
 8002fda:	4661      	mov	r1, ip
 8002fdc:	2320      	movs	r3, #32
 8002fde:	0027      	movs	r7, r4
 8002fe0:	1a5b      	subs	r3, r3, r1
 8002fe2:	0005      	movs	r5, r0
 8002fe4:	4098      	lsls	r0, r3
 8002fe6:	409f      	lsls	r7, r3
 8002fe8:	40cd      	lsrs	r5, r1
 8002fea:	1e43      	subs	r3, r0, #1
 8002fec:	4198      	sbcs	r0, r3
 8002fee:	40cc      	lsrs	r4, r1
 8002ff0:	432f      	orrs	r7, r5
 8002ff2:	4307      	orrs	r7, r0
 8002ff4:	44a3      	add	fp, r4
 8002ff6:	18bf      	adds	r7, r7, r2
 8002ff8:	4297      	cmp	r7, r2
 8002ffa:	4192      	sbcs	r2, r2
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	445a      	add	r2, fp
 8003000:	0014      	movs	r4, r2
 8003002:	464d      	mov	r5, r9
 8003004:	e787      	b.n	8002f16 <__aeabi_dsub+0x1ae>
 8003006:	4f34      	ldr	r7, [pc, #208]	@ (80030d8 <__aeabi_dsub+0x370>)
 8003008:	1c6b      	adds	r3, r5, #1
 800300a:	423b      	tst	r3, r7
 800300c:	d000      	beq.n	8003010 <__aeabi_dsub+0x2a8>
 800300e:	e0b6      	b.n	800317e <__aeabi_dsub+0x416>
 8003010:	4659      	mov	r1, fp
 8003012:	0023      	movs	r3, r4
 8003014:	4311      	orrs	r1, r2
 8003016:	000f      	movs	r7, r1
 8003018:	4303      	orrs	r3, r0
 800301a:	2d00      	cmp	r5, #0
 800301c:	d000      	beq.n	8003020 <__aeabi_dsub+0x2b8>
 800301e:	e126      	b.n	800326e <__aeabi_dsub+0x506>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d100      	bne.n	8003026 <__aeabi_dsub+0x2be>
 8003024:	e1c0      	b.n	80033a8 <__aeabi_dsub+0x640>
 8003026:	2900      	cmp	r1, #0
 8003028:	d100      	bne.n	800302c <__aeabi_dsub+0x2c4>
 800302a:	e0a1      	b.n	8003170 <__aeabi_dsub+0x408>
 800302c:	1a83      	subs	r3, r0, r2
 800302e:	4698      	mov	r8, r3
 8003030:	465b      	mov	r3, fp
 8003032:	4540      	cmp	r0, r8
 8003034:	41ad      	sbcs	r5, r5
 8003036:	1ae3      	subs	r3, r4, r3
 8003038:	426d      	negs	r5, r5
 800303a:	1b5b      	subs	r3, r3, r5
 800303c:	2580      	movs	r5, #128	@ 0x80
 800303e:	042d      	lsls	r5, r5, #16
 8003040:	422b      	tst	r3, r5
 8003042:	d100      	bne.n	8003046 <__aeabi_dsub+0x2de>
 8003044:	e14b      	b.n	80032de <__aeabi_dsub+0x576>
 8003046:	465b      	mov	r3, fp
 8003048:	1a10      	subs	r0, r2, r0
 800304a:	4282      	cmp	r2, r0
 800304c:	4192      	sbcs	r2, r2
 800304e:	1b1c      	subs	r4, r3, r4
 8003050:	0007      	movs	r7, r0
 8003052:	2601      	movs	r6, #1
 8003054:	4663      	mov	r3, ip
 8003056:	4252      	negs	r2, r2
 8003058:	1aa4      	subs	r4, r4, r2
 800305a:	4327      	orrs	r7, r4
 800305c:	401e      	ands	r6, r3
 800305e:	2f00      	cmp	r7, #0
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x2fc>
 8003062:	e142      	b.n	80032ea <__aeabi_dsub+0x582>
 8003064:	422c      	tst	r4, r5
 8003066:	d100      	bne.n	800306a <__aeabi_dsub+0x302>
 8003068:	e26d      	b.n	8003546 <__aeabi_dsub+0x7de>
 800306a:	4b19      	ldr	r3, [pc, #100]	@ (80030d0 <__aeabi_dsub+0x368>)
 800306c:	2501      	movs	r5, #1
 800306e:	401c      	ands	r4, r3
 8003070:	e71b      	b.n	8002eaa <__aeabi_dsub+0x142>
 8003072:	42bd      	cmp	r5, r7
 8003074:	d100      	bne.n	8003078 <__aeabi_dsub+0x310>
 8003076:	e13b      	b.n	80032f0 <__aeabi_dsub+0x588>
 8003078:	2701      	movs	r7, #1
 800307a:	2b38      	cmp	r3, #56	@ 0x38
 800307c:	dd00      	ble.n	8003080 <__aeabi_dsub+0x318>
 800307e:	e745      	b.n	8002f0c <__aeabi_dsub+0x1a4>
 8003080:	2780      	movs	r7, #128	@ 0x80
 8003082:	4659      	mov	r1, fp
 8003084:	043f      	lsls	r7, r7, #16
 8003086:	4339      	orrs	r1, r7
 8003088:	468b      	mov	fp, r1
 800308a:	e72a      	b.n	8002ee2 <__aeabi_dsub+0x17a>
 800308c:	2400      	movs	r4, #0
 800308e:	2700      	movs	r7, #0
 8003090:	052d      	lsls	r5, r5, #20
 8003092:	4325      	orrs	r5, r4
 8003094:	07f6      	lsls	r6, r6, #31
 8003096:	4335      	orrs	r5, r6
 8003098:	0038      	movs	r0, r7
 800309a:	0029      	movs	r1, r5
 800309c:	b003      	add	sp, #12
 800309e:	bcf0      	pop	{r4, r5, r6, r7}
 80030a0:	46bb      	mov	fp, r7
 80030a2:	46b2      	mov	sl, r6
 80030a4:	46a9      	mov	r9, r5
 80030a6:	46a0      	mov	r8, r4
 80030a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030aa:	077b      	lsls	r3, r7, #29
 80030ac:	d004      	beq.n	80030b8 <__aeabi_dsub+0x350>
 80030ae:	230f      	movs	r3, #15
 80030b0:	403b      	ands	r3, r7
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d000      	beq.n	80030b8 <__aeabi_dsub+0x350>
 80030b6:	e6e7      	b.n	8002e88 <__aeabi_dsub+0x120>
 80030b8:	002b      	movs	r3, r5
 80030ba:	08f8      	lsrs	r0, r7, #3
 80030bc:	4a03      	ldr	r2, [pc, #12]	@ (80030cc <__aeabi_dsub+0x364>)
 80030be:	0767      	lsls	r7, r4, #29
 80030c0:	4307      	orrs	r7, r0
 80030c2:	08e5      	lsrs	r5, r4, #3
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d100      	bne.n	80030ca <__aeabi_dsub+0x362>
 80030c8:	e74a      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80030ca:	e0a5      	b.n	8003218 <__aeabi_dsub+0x4b0>
 80030cc:	000007ff 	.word	0x000007ff
 80030d0:	ff7fffff 	.word	0xff7fffff
 80030d4:	fffff801 	.word	0xfffff801
 80030d8:	000007fe 	.word	0x000007fe
 80030dc:	0038      	movs	r0, r7
 80030de:	f000 fb45 	bl	800376c <__clzsi2>
 80030e2:	0003      	movs	r3, r0
 80030e4:	3318      	adds	r3, #24
 80030e6:	2b1f      	cmp	r3, #31
 80030e8:	dc00      	bgt.n	80030ec <__aeabi_dsub+0x384>
 80030ea:	e6a7      	b.n	8002e3c <__aeabi_dsub+0xd4>
 80030ec:	003a      	movs	r2, r7
 80030ee:	3808      	subs	r0, #8
 80030f0:	4082      	lsls	r2, r0
 80030f2:	429d      	cmp	r5, r3
 80030f4:	dd00      	ble.n	80030f8 <__aeabi_dsub+0x390>
 80030f6:	e08a      	b.n	800320e <__aeabi_dsub+0x4a6>
 80030f8:	1b5b      	subs	r3, r3, r5
 80030fa:	1c58      	adds	r0, r3, #1
 80030fc:	281f      	cmp	r0, #31
 80030fe:	dc00      	bgt.n	8003102 <__aeabi_dsub+0x39a>
 8003100:	e1d8      	b.n	80034b4 <__aeabi_dsub+0x74c>
 8003102:	0017      	movs	r7, r2
 8003104:	3b1f      	subs	r3, #31
 8003106:	40df      	lsrs	r7, r3
 8003108:	2820      	cmp	r0, #32
 800310a:	d005      	beq.n	8003118 <__aeabi_dsub+0x3b0>
 800310c:	2340      	movs	r3, #64	@ 0x40
 800310e:	1a1b      	subs	r3, r3, r0
 8003110:	409a      	lsls	r2, r3
 8003112:	1e53      	subs	r3, r2, #1
 8003114:	419a      	sbcs	r2, r3
 8003116:	4317      	orrs	r7, r2
 8003118:	2500      	movs	r5, #0
 800311a:	2f00      	cmp	r7, #0
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x3b8>
 800311e:	e0e5      	b.n	80032ec <__aeabi_dsub+0x584>
 8003120:	077b      	lsls	r3, r7, #29
 8003122:	d000      	beq.n	8003126 <__aeabi_dsub+0x3be>
 8003124:	e6ab      	b.n	8002e7e <__aeabi_dsub+0x116>
 8003126:	002c      	movs	r4, r5
 8003128:	e7c6      	b.n	80030b8 <__aeabi_dsub+0x350>
 800312a:	08c0      	lsrs	r0, r0, #3
 800312c:	e7c6      	b.n	80030bc <__aeabi_dsub+0x354>
 800312e:	2700      	movs	r7, #0
 8003130:	2400      	movs	r4, #0
 8003132:	4dd1      	ldr	r5, [pc, #836]	@ (8003478 <__aeabi_dsub+0x710>)
 8003134:	e7ac      	b.n	8003090 <__aeabi_dsub+0x328>
 8003136:	4fd1      	ldr	r7, [pc, #836]	@ (800347c <__aeabi_dsub+0x714>)
 8003138:	1c6b      	adds	r3, r5, #1
 800313a:	423b      	tst	r3, r7
 800313c:	d171      	bne.n	8003222 <__aeabi_dsub+0x4ba>
 800313e:	0023      	movs	r3, r4
 8003140:	4303      	orrs	r3, r0
 8003142:	2d00      	cmp	r5, #0
 8003144:	d000      	beq.n	8003148 <__aeabi_dsub+0x3e0>
 8003146:	e14e      	b.n	80033e6 <__aeabi_dsub+0x67e>
 8003148:	4657      	mov	r7, sl
 800314a:	2b00      	cmp	r3, #0
 800314c:	d100      	bne.n	8003150 <__aeabi_dsub+0x3e8>
 800314e:	e1b5      	b.n	80034bc <__aeabi_dsub+0x754>
 8003150:	2f00      	cmp	r7, #0
 8003152:	d00d      	beq.n	8003170 <__aeabi_dsub+0x408>
 8003154:	1883      	adds	r3, r0, r2
 8003156:	4283      	cmp	r3, r0
 8003158:	4180      	sbcs	r0, r0
 800315a:	445c      	add	r4, fp
 800315c:	4240      	negs	r0, r0
 800315e:	1824      	adds	r4, r4, r0
 8003160:	0222      	lsls	r2, r4, #8
 8003162:	d500      	bpl.n	8003166 <__aeabi_dsub+0x3fe>
 8003164:	e1c8      	b.n	80034f8 <__aeabi_dsub+0x790>
 8003166:	001f      	movs	r7, r3
 8003168:	4698      	mov	r8, r3
 800316a:	4327      	orrs	r7, r4
 800316c:	d100      	bne.n	8003170 <__aeabi_dsub+0x408>
 800316e:	e0bc      	b.n	80032ea <__aeabi_dsub+0x582>
 8003170:	4643      	mov	r3, r8
 8003172:	0767      	lsls	r7, r4, #29
 8003174:	08db      	lsrs	r3, r3, #3
 8003176:	431f      	orrs	r7, r3
 8003178:	08e5      	lsrs	r5, r4, #3
 800317a:	2300      	movs	r3, #0
 800317c:	e04c      	b.n	8003218 <__aeabi_dsub+0x4b0>
 800317e:	1a83      	subs	r3, r0, r2
 8003180:	4698      	mov	r8, r3
 8003182:	465b      	mov	r3, fp
 8003184:	4540      	cmp	r0, r8
 8003186:	41bf      	sbcs	r7, r7
 8003188:	1ae3      	subs	r3, r4, r3
 800318a:	427f      	negs	r7, r7
 800318c:	1bdb      	subs	r3, r3, r7
 800318e:	021f      	lsls	r7, r3, #8
 8003190:	d47c      	bmi.n	800328c <__aeabi_dsub+0x524>
 8003192:	4647      	mov	r7, r8
 8003194:	431f      	orrs	r7, r3
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x432>
 8003198:	e0a6      	b.n	80032e8 <__aeabi_dsub+0x580>
 800319a:	001c      	movs	r4, r3
 800319c:	4647      	mov	r7, r8
 800319e:	e645      	b.n	8002e2c <__aeabi_dsub+0xc4>
 80031a0:	4cb7      	ldr	r4, [pc, #732]	@ (8003480 <__aeabi_dsub+0x718>)
 80031a2:	1aed      	subs	r5, r5, r3
 80031a4:	4014      	ands	r4, r2
 80031a6:	077b      	lsls	r3, r7, #29
 80031a8:	d000      	beq.n	80031ac <__aeabi_dsub+0x444>
 80031aa:	e780      	b.n	80030ae <__aeabi_dsub+0x346>
 80031ac:	e784      	b.n	80030b8 <__aeabi_dsub+0x350>
 80031ae:	464b      	mov	r3, r9
 80031b0:	0025      	movs	r5, r4
 80031b2:	4305      	orrs	r5, r0
 80031b4:	d066      	beq.n	8003284 <__aeabi_dsub+0x51c>
 80031b6:	1e5f      	subs	r7, r3, #1
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d100      	bne.n	80031be <__aeabi_dsub+0x456>
 80031bc:	e0fc      	b.n	80033b8 <__aeabi_dsub+0x650>
 80031be:	4dae      	ldr	r5, [pc, #696]	@ (8003478 <__aeabi_dsub+0x710>)
 80031c0:	42ab      	cmp	r3, r5
 80031c2:	d100      	bne.n	80031c6 <__aeabi_dsub+0x45e>
 80031c4:	e15e      	b.n	8003484 <__aeabi_dsub+0x71c>
 80031c6:	4666      	mov	r6, ip
 80031c8:	2f38      	cmp	r7, #56	@ 0x38
 80031ca:	dc00      	bgt.n	80031ce <__aeabi_dsub+0x466>
 80031cc:	e0b4      	b.n	8003338 <__aeabi_dsub+0x5d0>
 80031ce:	2001      	movs	r0, #1
 80031d0:	1a17      	subs	r7, r2, r0
 80031d2:	42ba      	cmp	r2, r7
 80031d4:	4192      	sbcs	r2, r2
 80031d6:	465b      	mov	r3, fp
 80031d8:	4252      	negs	r2, r2
 80031da:	464d      	mov	r5, r9
 80031dc:	1a9c      	subs	r4, r3, r2
 80031de:	e620      	b.n	8002e22 <__aeabi_dsub+0xba>
 80031e0:	0767      	lsls	r7, r4, #29
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	4307      	orrs	r7, r0
 80031e6:	08e5      	lsrs	r5, r4, #3
 80031e8:	e6ba      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80031ea:	001f      	movs	r7, r3
 80031ec:	4659      	mov	r1, fp
 80031ee:	3f20      	subs	r7, #32
 80031f0:	40f9      	lsrs	r1, r7
 80031f2:	000f      	movs	r7, r1
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d005      	beq.n	8003204 <__aeabi_dsub+0x49c>
 80031f8:	2140      	movs	r1, #64	@ 0x40
 80031fa:	1acb      	subs	r3, r1, r3
 80031fc:	4659      	mov	r1, fp
 80031fe:	4099      	lsls	r1, r3
 8003200:	430a      	orrs	r2, r1
 8003202:	4692      	mov	sl, r2
 8003204:	4653      	mov	r3, sl
 8003206:	1e5a      	subs	r2, r3, #1
 8003208:	4193      	sbcs	r3, r2
 800320a:	431f      	orrs	r7, r3
 800320c:	e604      	b.n	8002e18 <__aeabi_dsub+0xb0>
 800320e:	1aeb      	subs	r3, r5, r3
 8003210:	4d9b      	ldr	r5, [pc, #620]	@ (8003480 <__aeabi_dsub+0x718>)
 8003212:	4015      	ands	r5, r2
 8003214:	076f      	lsls	r7, r5, #29
 8003216:	08ed      	lsrs	r5, r5, #3
 8003218:	032c      	lsls	r4, r5, #12
 800321a:	055d      	lsls	r5, r3, #21
 800321c:	0b24      	lsrs	r4, r4, #12
 800321e:	0d6d      	lsrs	r5, r5, #21
 8003220:	e736      	b.n	8003090 <__aeabi_dsub+0x328>
 8003222:	4d95      	ldr	r5, [pc, #596]	@ (8003478 <__aeabi_dsub+0x710>)
 8003224:	42ab      	cmp	r3, r5
 8003226:	d100      	bne.n	800322a <__aeabi_dsub+0x4c2>
 8003228:	e0d6      	b.n	80033d8 <__aeabi_dsub+0x670>
 800322a:	1882      	adds	r2, r0, r2
 800322c:	0021      	movs	r1, r4
 800322e:	4282      	cmp	r2, r0
 8003230:	4180      	sbcs	r0, r0
 8003232:	4459      	add	r1, fp
 8003234:	4240      	negs	r0, r0
 8003236:	1808      	adds	r0, r1, r0
 8003238:	07c7      	lsls	r7, r0, #31
 800323a:	0852      	lsrs	r2, r2, #1
 800323c:	4317      	orrs	r7, r2
 800323e:	0844      	lsrs	r4, r0, #1
 8003240:	0752      	lsls	r2, r2, #29
 8003242:	d400      	bmi.n	8003246 <__aeabi_dsub+0x4de>
 8003244:	e185      	b.n	8003552 <__aeabi_dsub+0x7ea>
 8003246:	220f      	movs	r2, #15
 8003248:	001d      	movs	r5, r3
 800324a:	403a      	ands	r2, r7
 800324c:	2a04      	cmp	r2, #4
 800324e:	d000      	beq.n	8003252 <__aeabi_dsub+0x4ea>
 8003250:	e61a      	b.n	8002e88 <__aeabi_dsub+0x120>
 8003252:	08ff      	lsrs	r7, r7, #3
 8003254:	0764      	lsls	r4, r4, #29
 8003256:	4327      	orrs	r7, r4
 8003258:	0905      	lsrs	r5, r0, #4
 800325a:	e7dd      	b.n	8003218 <__aeabi_dsub+0x4b0>
 800325c:	465b      	mov	r3, fp
 800325e:	08d2      	lsrs	r2, r2, #3
 8003260:	075f      	lsls	r7, r3, #29
 8003262:	4317      	orrs	r7, r2
 8003264:	08dd      	lsrs	r5, r3, #3
 8003266:	e67b      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 8003268:	2700      	movs	r7, #0
 800326a:	2400      	movs	r4, #0
 800326c:	e710      	b.n	8003090 <__aeabi_dsub+0x328>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d000      	beq.n	8003274 <__aeabi_dsub+0x50c>
 8003272:	e0d6      	b.n	8003422 <__aeabi_dsub+0x6ba>
 8003274:	2900      	cmp	r1, #0
 8003276:	d000      	beq.n	800327a <__aeabi_dsub+0x512>
 8003278:	e12f      	b.n	80034da <__aeabi_dsub+0x772>
 800327a:	2480      	movs	r4, #128	@ 0x80
 800327c:	2600      	movs	r6, #0
 800327e:	4d7e      	ldr	r5, [pc, #504]	@ (8003478 <__aeabi_dsub+0x710>)
 8003280:	0324      	lsls	r4, r4, #12
 8003282:	e705      	b.n	8003090 <__aeabi_dsub+0x328>
 8003284:	4666      	mov	r6, ip
 8003286:	465c      	mov	r4, fp
 8003288:	08d0      	lsrs	r0, r2, #3
 800328a:	e717      	b.n	80030bc <__aeabi_dsub+0x354>
 800328c:	465b      	mov	r3, fp
 800328e:	1a17      	subs	r7, r2, r0
 8003290:	42ba      	cmp	r2, r7
 8003292:	4192      	sbcs	r2, r2
 8003294:	1b1c      	subs	r4, r3, r4
 8003296:	2601      	movs	r6, #1
 8003298:	4663      	mov	r3, ip
 800329a:	4252      	negs	r2, r2
 800329c:	1aa4      	subs	r4, r4, r2
 800329e:	401e      	ands	r6, r3
 80032a0:	e5c4      	b.n	8002e2c <__aeabi_dsub+0xc4>
 80032a2:	1883      	adds	r3, r0, r2
 80032a4:	4283      	cmp	r3, r0
 80032a6:	4180      	sbcs	r0, r0
 80032a8:	445c      	add	r4, fp
 80032aa:	4240      	negs	r0, r0
 80032ac:	1825      	adds	r5, r4, r0
 80032ae:	022a      	lsls	r2, r5, #8
 80032b0:	d400      	bmi.n	80032b4 <__aeabi_dsub+0x54c>
 80032b2:	e0da      	b.n	800346a <__aeabi_dsub+0x702>
 80032b4:	4a72      	ldr	r2, [pc, #456]	@ (8003480 <__aeabi_dsub+0x718>)
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	4015      	ands	r5, r2
 80032ba:	07ea      	lsls	r2, r5, #31
 80032bc:	431a      	orrs	r2, r3
 80032be:	0869      	lsrs	r1, r5, #1
 80032c0:	075b      	lsls	r3, r3, #29
 80032c2:	d400      	bmi.n	80032c6 <__aeabi_dsub+0x55e>
 80032c4:	e14a      	b.n	800355c <__aeabi_dsub+0x7f4>
 80032c6:	230f      	movs	r3, #15
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d100      	bne.n	80032d0 <__aeabi_dsub+0x568>
 80032ce:	e0fc      	b.n	80034ca <__aeabi_dsub+0x762>
 80032d0:	1d17      	adds	r7, r2, #4
 80032d2:	4297      	cmp	r7, r2
 80032d4:	41a4      	sbcs	r4, r4
 80032d6:	4264      	negs	r4, r4
 80032d8:	2502      	movs	r5, #2
 80032da:	1864      	adds	r4, r4, r1
 80032dc:	e6ec      	b.n	80030b8 <__aeabi_dsub+0x350>
 80032de:	4647      	mov	r7, r8
 80032e0:	001c      	movs	r4, r3
 80032e2:	431f      	orrs	r7, r3
 80032e4:	d000      	beq.n	80032e8 <__aeabi_dsub+0x580>
 80032e6:	e743      	b.n	8003170 <__aeabi_dsub+0x408>
 80032e8:	2600      	movs	r6, #0
 80032ea:	2500      	movs	r5, #0
 80032ec:	2400      	movs	r4, #0
 80032ee:	e6cf      	b.n	8003090 <__aeabi_dsub+0x328>
 80032f0:	08c0      	lsrs	r0, r0, #3
 80032f2:	0767      	lsls	r7, r4, #29
 80032f4:	4307      	orrs	r7, r0
 80032f6:	08e5      	lsrs	r5, r4, #3
 80032f8:	e632      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80032fa:	1a87      	subs	r7, r0, r2
 80032fc:	465b      	mov	r3, fp
 80032fe:	42b8      	cmp	r0, r7
 8003300:	4180      	sbcs	r0, r0
 8003302:	1ae4      	subs	r4, r4, r3
 8003304:	4240      	negs	r0, r0
 8003306:	1a24      	subs	r4, r4, r0
 8003308:	0223      	lsls	r3, r4, #8
 800330a:	d428      	bmi.n	800335e <__aeabi_dsub+0x5f6>
 800330c:	0763      	lsls	r3, r4, #29
 800330e:	08ff      	lsrs	r7, r7, #3
 8003310:	431f      	orrs	r7, r3
 8003312:	08e5      	lsrs	r5, r4, #3
 8003314:	2301      	movs	r3, #1
 8003316:	e77f      	b.n	8003218 <__aeabi_dsub+0x4b0>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d100      	bne.n	800331e <__aeabi_dsub+0x5b6>
 800331c:	e673      	b.n	8003006 <__aeabi_dsub+0x29e>
 800331e:	464b      	mov	r3, r9
 8003320:	1b5f      	subs	r7, r3, r5
 8003322:	003b      	movs	r3, r7
 8003324:	2d00      	cmp	r5, #0
 8003326:	d100      	bne.n	800332a <__aeabi_dsub+0x5c2>
 8003328:	e742      	b.n	80031b0 <__aeabi_dsub+0x448>
 800332a:	2f38      	cmp	r7, #56	@ 0x38
 800332c:	dd00      	ble.n	8003330 <__aeabi_dsub+0x5c8>
 800332e:	e0ec      	b.n	800350a <__aeabi_dsub+0x7a2>
 8003330:	2380      	movs	r3, #128	@ 0x80
 8003332:	000e      	movs	r6, r1
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	431c      	orrs	r4, r3
 8003338:	2f1f      	cmp	r7, #31
 800333a:	dc25      	bgt.n	8003388 <__aeabi_dsub+0x620>
 800333c:	2520      	movs	r5, #32
 800333e:	0023      	movs	r3, r4
 8003340:	1bed      	subs	r5, r5, r7
 8003342:	0001      	movs	r1, r0
 8003344:	40a8      	lsls	r0, r5
 8003346:	40ab      	lsls	r3, r5
 8003348:	40f9      	lsrs	r1, r7
 800334a:	1e45      	subs	r5, r0, #1
 800334c:	41a8      	sbcs	r0, r5
 800334e:	430b      	orrs	r3, r1
 8003350:	40fc      	lsrs	r4, r7
 8003352:	4318      	orrs	r0, r3
 8003354:	465b      	mov	r3, fp
 8003356:	1b1b      	subs	r3, r3, r4
 8003358:	469b      	mov	fp, r3
 800335a:	e739      	b.n	80031d0 <__aeabi_dsub+0x468>
 800335c:	4666      	mov	r6, ip
 800335e:	2501      	movs	r5, #1
 8003360:	e562      	b.n	8002e28 <__aeabi_dsub+0xc0>
 8003362:	001f      	movs	r7, r3
 8003364:	4659      	mov	r1, fp
 8003366:	3f20      	subs	r7, #32
 8003368:	40f9      	lsrs	r1, r7
 800336a:	468c      	mov	ip, r1
 800336c:	2b20      	cmp	r3, #32
 800336e:	d005      	beq.n	800337c <__aeabi_dsub+0x614>
 8003370:	2740      	movs	r7, #64	@ 0x40
 8003372:	4659      	mov	r1, fp
 8003374:	1afb      	subs	r3, r7, r3
 8003376:	4099      	lsls	r1, r3
 8003378:	430a      	orrs	r2, r1
 800337a:	4692      	mov	sl, r2
 800337c:	4657      	mov	r7, sl
 800337e:	1e7b      	subs	r3, r7, #1
 8003380:	419f      	sbcs	r7, r3
 8003382:	4663      	mov	r3, ip
 8003384:	431f      	orrs	r7, r3
 8003386:	e5c1      	b.n	8002f0c <__aeabi_dsub+0x1a4>
 8003388:	003b      	movs	r3, r7
 800338a:	0025      	movs	r5, r4
 800338c:	3b20      	subs	r3, #32
 800338e:	40dd      	lsrs	r5, r3
 8003390:	2f20      	cmp	r7, #32
 8003392:	d004      	beq.n	800339e <__aeabi_dsub+0x636>
 8003394:	2340      	movs	r3, #64	@ 0x40
 8003396:	1bdb      	subs	r3, r3, r7
 8003398:	409c      	lsls	r4, r3
 800339a:	4320      	orrs	r0, r4
 800339c:	4680      	mov	r8, r0
 800339e:	4640      	mov	r0, r8
 80033a0:	1e43      	subs	r3, r0, #1
 80033a2:	4198      	sbcs	r0, r3
 80033a4:	4328      	orrs	r0, r5
 80033a6:	e713      	b.n	80031d0 <__aeabi_dsub+0x468>
 80033a8:	2900      	cmp	r1, #0
 80033aa:	d09d      	beq.n	80032e8 <__aeabi_dsub+0x580>
 80033ac:	2601      	movs	r6, #1
 80033ae:	4663      	mov	r3, ip
 80033b0:	465c      	mov	r4, fp
 80033b2:	4690      	mov	r8, r2
 80033b4:	401e      	ands	r6, r3
 80033b6:	e6db      	b.n	8003170 <__aeabi_dsub+0x408>
 80033b8:	1a17      	subs	r7, r2, r0
 80033ba:	465b      	mov	r3, fp
 80033bc:	42ba      	cmp	r2, r7
 80033be:	4192      	sbcs	r2, r2
 80033c0:	1b1c      	subs	r4, r3, r4
 80033c2:	4252      	negs	r2, r2
 80033c4:	1aa4      	subs	r4, r4, r2
 80033c6:	0223      	lsls	r3, r4, #8
 80033c8:	d4c8      	bmi.n	800335c <__aeabi_dsub+0x5f4>
 80033ca:	0763      	lsls	r3, r4, #29
 80033cc:	08ff      	lsrs	r7, r7, #3
 80033ce:	431f      	orrs	r7, r3
 80033d0:	4666      	mov	r6, ip
 80033d2:	2301      	movs	r3, #1
 80033d4:	08e5      	lsrs	r5, r4, #3
 80033d6:	e71f      	b.n	8003218 <__aeabi_dsub+0x4b0>
 80033d8:	001d      	movs	r5, r3
 80033da:	2400      	movs	r4, #0
 80033dc:	2700      	movs	r7, #0
 80033de:	e657      	b.n	8003090 <__aeabi_dsub+0x328>
 80033e0:	465c      	mov	r4, fp
 80033e2:	08d0      	lsrs	r0, r2, #3
 80033e4:	e66a      	b.n	80030bc <__aeabi_dsub+0x354>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d100      	bne.n	80033ec <__aeabi_dsub+0x684>
 80033ea:	e737      	b.n	800325c <__aeabi_dsub+0x4f4>
 80033ec:	4653      	mov	r3, sl
 80033ee:	08c0      	lsrs	r0, r0, #3
 80033f0:	0767      	lsls	r7, r4, #29
 80033f2:	4307      	orrs	r7, r0
 80033f4:	08e5      	lsrs	r5, r4, #3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d100      	bne.n	80033fc <__aeabi_dsub+0x694>
 80033fa:	e5b1      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80033fc:	2380      	movs	r3, #128	@ 0x80
 80033fe:	031b      	lsls	r3, r3, #12
 8003400:	421d      	tst	r5, r3
 8003402:	d008      	beq.n	8003416 <__aeabi_dsub+0x6ae>
 8003404:	4659      	mov	r1, fp
 8003406:	08c8      	lsrs	r0, r1, #3
 8003408:	4218      	tst	r0, r3
 800340a:	d104      	bne.n	8003416 <__aeabi_dsub+0x6ae>
 800340c:	08d2      	lsrs	r2, r2, #3
 800340e:	0749      	lsls	r1, r1, #29
 8003410:	430a      	orrs	r2, r1
 8003412:	0017      	movs	r7, r2
 8003414:	0005      	movs	r5, r0
 8003416:	0f7b      	lsrs	r3, r7, #29
 8003418:	00ff      	lsls	r7, r7, #3
 800341a:	08ff      	lsrs	r7, r7, #3
 800341c:	075b      	lsls	r3, r3, #29
 800341e:	431f      	orrs	r7, r3
 8003420:	e59e      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 8003422:	08c0      	lsrs	r0, r0, #3
 8003424:	0763      	lsls	r3, r4, #29
 8003426:	4318      	orrs	r0, r3
 8003428:	08e5      	lsrs	r5, r4, #3
 800342a:	2900      	cmp	r1, #0
 800342c:	d053      	beq.n	80034d6 <__aeabi_dsub+0x76e>
 800342e:	2380      	movs	r3, #128	@ 0x80
 8003430:	031b      	lsls	r3, r3, #12
 8003432:	421d      	tst	r5, r3
 8003434:	d00a      	beq.n	800344c <__aeabi_dsub+0x6e4>
 8003436:	4659      	mov	r1, fp
 8003438:	08cc      	lsrs	r4, r1, #3
 800343a:	421c      	tst	r4, r3
 800343c:	d106      	bne.n	800344c <__aeabi_dsub+0x6e4>
 800343e:	2601      	movs	r6, #1
 8003440:	4663      	mov	r3, ip
 8003442:	0025      	movs	r5, r4
 8003444:	08d0      	lsrs	r0, r2, #3
 8003446:	0749      	lsls	r1, r1, #29
 8003448:	4308      	orrs	r0, r1
 800344a:	401e      	ands	r6, r3
 800344c:	0f47      	lsrs	r7, r0, #29
 800344e:	00c0      	lsls	r0, r0, #3
 8003450:	08c0      	lsrs	r0, r0, #3
 8003452:	077f      	lsls	r7, r7, #29
 8003454:	4307      	orrs	r7, r0
 8003456:	e583      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 8003458:	1883      	adds	r3, r0, r2
 800345a:	4293      	cmp	r3, r2
 800345c:	4192      	sbcs	r2, r2
 800345e:	445c      	add	r4, fp
 8003460:	4252      	negs	r2, r2
 8003462:	18a5      	adds	r5, r4, r2
 8003464:	022a      	lsls	r2, r5, #8
 8003466:	d500      	bpl.n	800346a <__aeabi_dsub+0x702>
 8003468:	e724      	b.n	80032b4 <__aeabi_dsub+0x54c>
 800346a:	076f      	lsls	r7, r5, #29
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	431f      	orrs	r7, r3
 8003470:	08ed      	lsrs	r5, r5, #3
 8003472:	2301      	movs	r3, #1
 8003474:	e6d0      	b.n	8003218 <__aeabi_dsub+0x4b0>
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	000007ff 	.word	0x000007ff
 800347c:	000007fe 	.word	0x000007fe
 8003480:	ff7fffff 	.word	0xff7fffff
 8003484:	465b      	mov	r3, fp
 8003486:	08d2      	lsrs	r2, r2, #3
 8003488:	075f      	lsls	r7, r3, #29
 800348a:	4666      	mov	r6, ip
 800348c:	4317      	orrs	r7, r2
 800348e:	08dd      	lsrs	r5, r3, #3
 8003490:	e566      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 8003492:	0025      	movs	r5, r4
 8003494:	3b20      	subs	r3, #32
 8003496:	40dd      	lsrs	r5, r3
 8003498:	4663      	mov	r3, ip
 800349a:	2b20      	cmp	r3, #32
 800349c:	d005      	beq.n	80034aa <__aeabi_dsub+0x742>
 800349e:	2340      	movs	r3, #64	@ 0x40
 80034a0:	4661      	mov	r1, ip
 80034a2:	1a5b      	subs	r3, r3, r1
 80034a4:	409c      	lsls	r4, r3
 80034a6:	4320      	orrs	r0, r4
 80034a8:	4680      	mov	r8, r0
 80034aa:	4647      	mov	r7, r8
 80034ac:	1e7b      	subs	r3, r7, #1
 80034ae:	419f      	sbcs	r7, r3
 80034b0:	432f      	orrs	r7, r5
 80034b2:	e5a0      	b.n	8002ff6 <__aeabi_dsub+0x28e>
 80034b4:	2120      	movs	r1, #32
 80034b6:	2700      	movs	r7, #0
 80034b8:	1a09      	subs	r1, r1, r0
 80034ba:	e4d2      	b.n	8002e62 <__aeabi_dsub+0xfa>
 80034bc:	2f00      	cmp	r7, #0
 80034be:	d100      	bne.n	80034c2 <__aeabi_dsub+0x75a>
 80034c0:	e713      	b.n	80032ea <__aeabi_dsub+0x582>
 80034c2:	465c      	mov	r4, fp
 80034c4:	0017      	movs	r7, r2
 80034c6:	2500      	movs	r5, #0
 80034c8:	e5f6      	b.n	80030b8 <__aeabi_dsub+0x350>
 80034ca:	08d7      	lsrs	r7, r2, #3
 80034cc:	0749      	lsls	r1, r1, #29
 80034ce:	2302      	movs	r3, #2
 80034d0:	430f      	orrs	r7, r1
 80034d2:	092d      	lsrs	r5, r5, #4
 80034d4:	e6a0      	b.n	8003218 <__aeabi_dsub+0x4b0>
 80034d6:	0007      	movs	r7, r0
 80034d8:	e542      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80034da:	465b      	mov	r3, fp
 80034dc:	2601      	movs	r6, #1
 80034de:	075f      	lsls	r7, r3, #29
 80034e0:	08dd      	lsrs	r5, r3, #3
 80034e2:	4663      	mov	r3, ip
 80034e4:	08d2      	lsrs	r2, r2, #3
 80034e6:	4317      	orrs	r7, r2
 80034e8:	401e      	ands	r6, r3
 80034ea:	e539      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80034ec:	465b      	mov	r3, fp
 80034ee:	08d2      	lsrs	r2, r2, #3
 80034f0:	075f      	lsls	r7, r3, #29
 80034f2:	4317      	orrs	r7, r2
 80034f4:	08dd      	lsrs	r5, r3, #3
 80034f6:	e533      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80034f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003574 <__aeabi_dsub+0x80c>)
 80034fa:	08db      	lsrs	r3, r3, #3
 80034fc:	4022      	ands	r2, r4
 80034fe:	0757      	lsls	r7, r2, #29
 8003500:	0252      	lsls	r2, r2, #9
 8003502:	2501      	movs	r5, #1
 8003504:	431f      	orrs	r7, r3
 8003506:	0b14      	lsrs	r4, r2, #12
 8003508:	e5c2      	b.n	8003090 <__aeabi_dsub+0x328>
 800350a:	000e      	movs	r6, r1
 800350c:	2001      	movs	r0, #1
 800350e:	e65f      	b.n	80031d0 <__aeabi_dsub+0x468>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00d      	beq.n	8003530 <__aeabi_dsub+0x7c8>
 8003514:	464b      	mov	r3, r9
 8003516:	1b5b      	subs	r3, r3, r5
 8003518:	469c      	mov	ip, r3
 800351a:	2d00      	cmp	r5, #0
 800351c:	d100      	bne.n	8003520 <__aeabi_dsub+0x7b8>
 800351e:	e548      	b.n	8002fb2 <__aeabi_dsub+0x24a>
 8003520:	2701      	movs	r7, #1
 8003522:	2b38      	cmp	r3, #56	@ 0x38
 8003524:	dd00      	ble.n	8003528 <__aeabi_dsub+0x7c0>
 8003526:	e566      	b.n	8002ff6 <__aeabi_dsub+0x28e>
 8003528:	2380      	movs	r3, #128	@ 0x80
 800352a:	041b      	lsls	r3, r3, #16
 800352c:	431c      	orrs	r4, r3
 800352e:	e550      	b.n	8002fd2 <__aeabi_dsub+0x26a>
 8003530:	1c6b      	adds	r3, r5, #1
 8003532:	4d11      	ldr	r5, [pc, #68]	@ (8003578 <__aeabi_dsub+0x810>)
 8003534:	422b      	tst	r3, r5
 8003536:	d000      	beq.n	800353a <__aeabi_dsub+0x7d2>
 8003538:	e673      	b.n	8003222 <__aeabi_dsub+0x4ba>
 800353a:	4659      	mov	r1, fp
 800353c:	0023      	movs	r3, r4
 800353e:	4311      	orrs	r1, r2
 8003540:	468a      	mov	sl, r1
 8003542:	4303      	orrs	r3, r0
 8003544:	e600      	b.n	8003148 <__aeabi_dsub+0x3e0>
 8003546:	0767      	lsls	r7, r4, #29
 8003548:	08c0      	lsrs	r0, r0, #3
 800354a:	2300      	movs	r3, #0
 800354c:	4307      	orrs	r7, r0
 800354e:	08e5      	lsrs	r5, r4, #3
 8003550:	e662      	b.n	8003218 <__aeabi_dsub+0x4b0>
 8003552:	0764      	lsls	r4, r4, #29
 8003554:	08ff      	lsrs	r7, r7, #3
 8003556:	4327      	orrs	r7, r4
 8003558:	0905      	lsrs	r5, r0, #4
 800355a:	e65d      	b.n	8003218 <__aeabi_dsub+0x4b0>
 800355c:	08d2      	lsrs	r2, r2, #3
 800355e:	0749      	lsls	r1, r1, #29
 8003560:	4311      	orrs	r1, r2
 8003562:	000f      	movs	r7, r1
 8003564:	2302      	movs	r3, #2
 8003566:	092d      	lsrs	r5, r5, #4
 8003568:	e656      	b.n	8003218 <__aeabi_dsub+0x4b0>
 800356a:	0007      	movs	r7, r0
 800356c:	e5a4      	b.n	80030b8 <__aeabi_dsub+0x350>
 800356e:	0038      	movs	r0, r7
 8003570:	e48f      	b.n	8002e92 <__aeabi_dsub+0x12a>
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	ff7fffff 	.word	0xff7fffff
 8003578:	000007fe 	.word	0x000007fe

0800357c <__aeabi_dcmpun>:
 800357c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800357e:	46c6      	mov	lr, r8
 8003580:	031e      	lsls	r6, r3, #12
 8003582:	0b36      	lsrs	r6, r6, #12
 8003584:	46b0      	mov	r8, r6
 8003586:	4e0d      	ldr	r6, [pc, #52]	@ (80035bc <__aeabi_dcmpun+0x40>)
 8003588:	030c      	lsls	r4, r1, #12
 800358a:	004d      	lsls	r5, r1, #1
 800358c:	005f      	lsls	r7, r3, #1
 800358e:	b500      	push	{lr}
 8003590:	0b24      	lsrs	r4, r4, #12
 8003592:	0d6d      	lsrs	r5, r5, #21
 8003594:	0d7f      	lsrs	r7, r7, #21
 8003596:	42b5      	cmp	r5, r6
 8003598:	d00b      	beq.n	80035b2 <__aeabi_dcmpun+0x36>
 800359a:	4908      	ldr	r1, [pc, #32]	@ (80035bc <__aeabi_dcmpun+0x40>)
 800359c:	2000      	movs	r0, #0
 800359e:	428f      	cmp	r7, r1
 80035a0:	d104      	bne.n	80035ac <__aeabi_dcmpun+0x30>
 80035a2:	4646      	mov	r6, r8
 80035a4:	4316      	orrs	r6, r2
 80035a6:	0030      	movs	r0, r6
 80035a8:	1e43      	subs	r3, r0, #1
 80035aa:	4198      	sbcs	r0, r3
 80035ac:	bc80      	pop	{r7}
 80035ae:	46b8      	mov	r8, r7
 80035b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b2:	4304      	orrs	r4, r0
 80035b4:	2001      	movs	r0, #1
 80035b6:	2c00      	cmp	r4, #0
 80035b8:	d1f8      	bne.n	80035ac <__aeabi_dcmpun+0x30>
 80035ba:	e7ee      	b.n	800359a <__aeabi_dcmpun+0x1e>
 80035bc:	000007ff 	.word	0x000007ff

080035c0 <__aeabi_d2iz>:
 80035c0:	000b      	movs	r3, r1
 80035c2:	0002      	movs	r2, r0
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	4d16      	ldr	r5, [pc, #88]	@ (8003620 <__aeabi_d2iz+0x60>)
 80035c8:	030c      	lsls	r4, r1, #12
 80035ca:	b082      	sub	sp, #8
 80035cc:	0049      	lsls	r1, r1, #1
 80035ce:	2000      	movs	r0, #0
 80035d0:	9200      	str	r2, [sp, #0]
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	0b24      	lsrs	r4, r4, #12
 80035d6:	0d49      	lsrs	r1, r1, #21
 80035d8:	0fde      	lsrs	r6, r3, #31
 80035da:	42a9      	cmp	r1, r5
 80035dc:	dd04      	ble.n	80035e8 <__aeabi_d2iz+0x28>
 80035de:	4811      	ldr	r0, [pc, #68]	@ (8003624 <__aeabi_d2iz+0x64>)
 80035e0:	4281      	cmp	r1, r0
 80035e2:	dd03      	ble.n	80035ec <__aeabi_d2iz+0x2c>
 80035e4:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <__aeabi_d2iz+0x68>)
 80035e6:	18f0      	adds	r0, r6, r3
 80035e8:	b002      	add	sp, #8
 80035ea:	bd70      	pop	{r4, r5, r6, pc}
 80035ec:	2080      	movs	r0, #128	@ 0x80
 80035ee:	0340      	lsls	r0, r0, #13
 80035f0:	4320      	orrs	r0, r4
 80035f2:	4c0e      	ldr	r4, [pc, #56]	@ (800362c <__aeabi_d2iz+0x6c>)
 80035f4:	1a64      	subs	r4, r4, r1
 80035f6:	2c1f      	cmp	r4, #31
 80035f8:	dd08      	ble.n	800360c <__aeabi_d2iz+0x4c>
 80035fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003630 <__aeabi_d2iz+0x70>)
 80035fc:	1a5b      	subs	r3, r3, r1
 80035fe:	40d8      	lsrs	r0, r3
 8003600:	0003      	movs	r3, r0
 8003602:	4258      	negs	r0, r3
 8003604:	2e00      	cmp	r6, #0
 8003606:	d1ef      	bne.n	80035e8 <__aeabi_d2iz+0x28>
 8003608:	0018      	movs	r0, r3
 800360a:	e7ed      	b.n	80035e8 <__aeabi_d2iz+0x28>
 800360c:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <__aeabi_d2iz+0x74>)
 800360e:	9a00      	ldr	r2, [sp, #0]
 8003610:	469c      	mov	ip, r3
 8003612:	0003      	movs	r3, r0
 8003614:	4461      	add	r1, ip
 8003616:	408b      	lsls	r3, r1
 8003618:	40e2      	lsrs	r2, r4
 800361a:	4313      	orrs	r3, r2
 800361c:	e7f1      	b.n	8003602 <__aeabi_d2iz+0x42>
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	000003fe 	.word	0x000003fe
 8003624:	0000041d 	.word	0x0000041d
 8003628:	7fffffff 	.word	0x7fffffff
 800362c:	00000433 	.word	0x00000433
 8003630:	00000413 	.word	0x00000413
 8003634:	fffffbed 	.word	0xfffffbed

08003638 <__aeabi_i2d>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	2800      	cmp	r0, #0
 800363c:	d016      	beq.n	800366c <__aeabi_i2d+0x34>
 800363e:	17c3      	asrs	r3, r0, #31
 8003640:	18c5      	adds	r5, r0, r3
 8003642:	405d      	eors	r5, r3
 8003644:	0fc4      	lsrs	r4, r0, #31
 8003646:	0028      	movs	r0, r5
 8003648:	f000 f890 	bl	800376c <__clzsi2>
 800364c:	4b10      	ldr	r3, [pc, #64]	@ (8003690 <__aeabi_i2d+0x58>)
 800364e:	1a1b      	subs	r3, r3, r0
 8003650:	055b      	lsls	r3, r3, #21
 8003652:	0d5b      	lsrs	r3, r3, #21
 8003654:	280a      	cmp	r0, #10
 8003656:	dc14      	bgt.n	8003682 <__aeabi_i2d+0x4a>
 8003658:	0002      	movs	r2, r0
 800365a:	002e      	movs	r6, r5
 800365c:	3215      	adds	r2, #21
 800365e:	4096      	lsls	r6, r2
 8003660:	220b      	movs	r2, #11
 8003662:	1a12      	subs	r2, r2, r0
 8003664:	40d5      	lsrs	r5, r2
 8003666:	032d      	lsls	r5, r5, #12
 8003668:	0b2d      	lsrs	r5, r5, #12
 800366a:	e003      	b.n	8003674 <__aeabi_i2d+0x3c>
 800366c:	2400      	movs	r4, #0
 800366e:	2300      	movs	r3, #0
 8003670:	2500      	movs	r5, #0
 8003672:	2600      	movs	r6, #0
 8003674:	051b      	lsls	r3, r3, #20
 8003676:	432b      	orrs	r3, r5
 8003678:	07e4      	lsls	r4, r4, #31
 800367a:	4323      	orrs	r3, r4
 800367c:	0030      	movs	r0, r6
 800367e:	0019      	movs	r1, r3
 8003680:	bd70      	pop	{r4, r5, r6, pc}
 8003682:	380b      	subs	r0, #11
 8003684:	4085      	lsls	r5, r0
 8003686:	032d      	lsls	r5, r5, #12
 8003688:	2600      	movs	r6, #0
 800368a:	0b2d      	lsrs	r5, r5, #12
 800368c:	e7f2      	b.n	8003674 <__aeabi_i2d+0x3c>
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	0000041e 	.word	0x0000041e

08003694 <__aeabi_ui2d>:
 8003694:	b510      	push	{r4, lr}
 8003696:	1e04      	subs	r4, r0, #0
 8003698:	d010      	beq.n	80036bc <__aeabi_ui2d+0x28>
 800369a:	f000 f867 	bl	800376c <__clzsi2>
 800369e:	4b0e      	ldr	r3, [pc, #56]	@ (80036d8 <__aeabi_ui2d+0x44>)
 80036a0:	1a1b      	subs	r3, r3, r0
 80036a2:	055b      	lsls	r3, r3, #21
 80036a4:	0d5b      	lsrs	r3, r3, #21
 80036a6:	280a      	cmp	r0, #10
 80036a8:	dc0f      	bgt.n	80036ca <__aeabi_ui2d+0x36>
 80036aa:	220b      	movs	r2, #11
 80036ac:	0021      	movs	r1, r4
 80036ae:	1a12      	subs	r2, r2, r0
 80036b0:	40d1      	lsrs	r1, r2
 80036b2:	3015      	adds	r0, #21
 80036b4:	030a      	lsls	r2, r1, #12
 80036b6:	4084      	lsls	r4, r0
 80036b8:	0b12      	lsrs	r2, r2, #12
 80036ba:	e001      	b.n	80036c0 <__aeabi_ui2d+0x2c>
 80036bc:	2300      	movs	r3, #0
 80036be:	2200      	movs	r2, #0
 80036c0:	051b      	lsls	r3, r3, #20
 80036c2:	4313      	orrs	r3, r2
 80036c4:	0020      	movs	r0, r4
 80036c6:	0019      	movs	r1, r3
 80036c8:	bd10      	pop	{r4, pc}
 80036ca:	0022      	movs	r2, r4
 80036cc:	380b      	subs	r0, #11
 80036ce:	4082      	lsls	r2, r0
 80036d0:	0312      	lsls	r2, r2, #12
 80036d2:	2400      	movs	r4, #0
 80036d4:	0b12      	lsrs	r2, r2, #12
 80036d6:	e7f3      	b.n	80036c0 <__aeabi_ui2d+0x2c>
 80036d8:	0000041e 	.word	0x0000041e

080036dc <__aeabi_f2d>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	0242      	lsls	r2, r0, #9
 80036e0:	0043      	lsls	r3, r0, #1
 80036e2:	0fc4      	lsrs	r4, r0, #31
 80036e4:	20fe      	movs	r0, #254	@ 0xfe
 80036e6:	0e1b      	lsrs	r3, r3, #24
 80036e8:	1c59      	adds	r1, r3, #1
 80036ea:	0a55      	lsrs	r5, r2, #9
 80036ec:	4208      	tst	r0, r1
 80036ee:	d00c      	beq.n	800370a <__aeabi_f2d+0x2e>
 80036f0:	21e0      	movs	r1, #224	@ 0xe0
 80036f2:	0089      	lsls	r1, r1, #2
 80036f4:	468c      	mov	ip, r1
 80036f6:	076d      	lsls	r5, r5, #29
 80036f8:	0b12      	lsrs	r2, r2, #12
 80036fa:	4463      	add	r3, ip
 80036fc:	051b      	lsls	r3, r3, #20
 80036fe:	4313      	orrs	r3, r2
 8003700:	07e4      	lsls	r4, r4, #31
 8003702:	4323      	orrs	r3, r4
 8003704:	0028      	movs	r0, r5
 8003706:	0019      	movs	r1, r3
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	2b00      	cmp	r3, #0
 800370c:	d114      	bne.n	8003738 <__aeabi_f2d+0x5c>
 800370e:	2d00      	cmp	r5, #0
 8003710:	d01b      	beq.n	800374a <__aeabi_f2d+0x6e>
 8003712:	0028      	movs	r0, r5
 8003714:	f000 f82a 	bl	800376c <__clzsi2>
 8003718:	280a      	cmp	r0, #10
 800371a:	dc1c      	bgt.n	8003756 <__aeabi_f2d+0x7a>
 800371c:	230b      	movs	r3, #11
 800371e:	002a      	movs	r2, r5
 8003720:	1a1b      	subs	r3, r3, r0
 8003722:	40da      	lsrs	r2, r3
 8003724:	0003      	movs	r3, r0
 8003726:	3315      	adds	r3, #21
 8003728:	409d      	lsls	r5, r3
 800372a:	4b0e      	ldr	r3, [pc, #56]	@ (8003764 <__aeabi_f2d+0x88>)
 800372c:	0312      	lsls	r2, r2, #12
 800372e:	1a1b      	subs	r3, r3, r0
 8003730:	055b      	lsls	r3, r3, #21
 8003732:	0b12      	lsrs	r2, r2, #12
 8003734:	0d5b      	lsrs	r3, r3, #21
 8003736:	e7e1      	b.n	80036fc <__aeabi_f2d+0x20>
 8003738:	2d00      	cmp	r5, #0
 800373a:	d009      	beq.n	8003750 <__aeabi_f2d+0x74>
 800373c:	0b13      	lsrs	r3, r2, #12
 800373e:	2280      	movs	r2, #128	@ 0x80
 8003740:	0312      	lsls	r2, r2, #12
 8003742:	431a      	orrs	r2, r3
 8003744:	076d      	lsls	r5, r5, #29
 8003746:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <__aeabi_f2d+0x8c>)
 8003748:	e7d8      	b.n	80036fc <__aeabi_f2d+0x20>
 800374a:	2300      	movs	r3, #0
 800374c:	2200      	movs	r2, #0
 800374e:	e7d5      	b.n	80036fc <__aeabi_f2d+0x20>
 8003750:	2200      	movs	r2, #0
 8003752:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <__aeabi_f2d+0x8c>)
 8003754:	e7d2      	b.n	80036fc <__aeabi_f2d+0x20>
 8003756:	0003      	movs	r3, r0
 8003758:	002a      	movs	r2, r5
 800375a:	3b0b      	subs	r3, #11
 800375c:	409a      	lsls	r2, r3
 800375e:	2500      	movs	r5, #0
 8003760:	e7e3      	b.n	800372a <__aeabi_f2d+0x4e>
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	00000389 	.word	0x00000389
 8003768:	000007ff 	.word	0x000007ff

0800376c <__clzsi2>:
 800376c:	211c      	movs	r1, #28
 800376e:	2301      	movs	r3, #1
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	4298      	cmp	r0, r3
 8003774:	d301      	bcc.n	800377a <__clzsi2+0xe>
 8003776:	0c00      	lsrs	r0, r0, #16
 8003778:	3910      	subs	r1, #16
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	4298      	cmp	r0, r3
 800377e:	d301      	bcc.n	8003784 <__clzsi2+0x18>
 8003780:	0a00      	lsrs	r0, r0, #8
 8003782:	3908      	subs	r1, #8
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	4298      	cmp	r0, r3
 8003788:	d301      	bcc.n	800378e <__clzsi2+0x22>
 800378a:	0900      	lsrs	r0, r0, #4
 800378c:	3904      	subs	r1, #4
 800378e:	a202      	add	r2, pc, #8	@ (adr r2, 8003798 <__clzsi2+0x2c>)
 8003790:	5c10      	ldrb	r0, [r2, r0]
 8003792:	1840      	adds	r0, r0, r1
 8003794:	4770      	bx	lr
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	02020304 	.word	0x02020304
 800379c:	01010101 	.word	0x01010101
	...

080037a8 <__clzdi2>:
 80037a8:	b510      	push	{r4, lr}
 80037aa:	2900      	cmp	r1, #0
 80037ac:	d103      	bne.n	80037b6 <__clzdi2+0xe>
 80037ae:	f7ff ffdd 	bl	800376c <__clzsi2>
 80037b2:	3020      	adds	r0, #32
 80037b4:	e002      	b.n	80037bc <__clzdi2+0x14>
 80037b6:	0008      	movs	r0, r1
 80037b8:	f7ff ffd8 	bl	800376c <__clzsi2>
 80037bc:	bd10      	pop	{r4, pc}
 80037be:	46c0      	nop			@ (mov r8, r8)

080037c0 <SX1262_Get_st>:

HAL_StatusTypeDef err22 = 0;

//**************************************************************************************************************************************************************//
SX1262 *SX1262_Get_st(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
	return(&SX_stc);
 80037c4:	4b01      	ldr	r3, [pc, #4]	@ (80037cc <SX1262_Get_st+0xc>)
}
 80037c6:	0018      	movs	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000208 	.word	0x20000208

080037d0 <SX1262_CSLow>:

//**************************************************************************************************************************************************************//
// sets the CS pin low
void SX1262_CSLow(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SX_stc.NSS_Port, (int)SX_stc.NSS_Pin, GPIO_PIN_RESET);
 80037d4:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <SX1262_CSLow+0x1c>)
 80037d6:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80037d8:	4b04      	ldr	r3, [pc, #16]	@ (80037ec <SX1262_CSLow+0x1c>)
 80037da:	2270      	movs	r2, #112	@ 0x70
 80037dc:	5a9b      	ldrh	r3, [r3, r2]
 80037de:	2200      	movs	r2, #0
 80037e0:	0019      	movs	r1, r3
 80037e2:	f004 f964 	bl	8007aae <HAL_GPIO_WritePin>
}
 80037e6:	46c0      	nop			@ (mov r8, r8)
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000208 	.word	0x20000208

080037f0 <SX1262_CSHigh>:

//**************************************************************************************************************************************************************//
// sets the CS pin high
void SX1262_CSHigh(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SX_stc.NSS_Port, (int)SX_stc.NSS_Pin, GPIO_PIN_SET);
 80037f4:	4b05      	ldr	r3, [pc, #20]	@ (800380c <SX1262_CSHigh+0x1c>)
 80037f6:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80037f8:	4b04      	ldr	r3, [pc, #16]	@ (800380c <SX1262_CSHigh+0x1c>)
 80037fa:	2270      	movs	r2, #112	@ 0x70
 80037fc:	5a9b      	ldrh	r3, [r3, r2]
 80037fe:	2201      	movs	r2, #1
 8003800:	0019      	movs	r1, r3
 8003802:	f004 f954 	bl	8007aae <HAL_GPIO_WritePin>
}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	20000208 	.word	0x20000208

08003810 <SX1262_BusyWait>:
}

//**************************************************************************************************************************************************************//
// wait for mdule to be free
void SX1262_BusyWait(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(SX_stc.Busy_Port,SX_stc.Busy_Pin)) 
 8003814:	e008      	b.n	8003828 <SX1262_BusyWait+0x18>
	{
		HAL_GPIO_ReadPin(SX_stc.Busy_Port, SX_stc.Busy_Pin);
 8003816:	4b0c      	ldr	r3, [pc, #48]	@ (8003848 <SX1262_BusyWait+0x38>)
 8003818:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800381a:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <SX1262_BusyWait+0x38>)
 800381c:	2178      	movs	r1, #120	@ 0x78
 800381e:	5a5b      	ldrh	r3, [r3, r1]
 8003820:	0019      	movs	r1, r3
 8003822:	0010      	movs	r0, r2
 8003824:	f004 f926 	bl	8007a74 <HAL_GPIO_ReadPin>
	while(HAL_GPIO_ReadPin(SX_stc.Busy_Port,SX_stc.Busy_Pin)) 
 8003828:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <SX1262_BusyWait+0x38>)
 800382a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800382c:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <SX1262_BusyWait+0x38>)
 800382e:	2178      	movs	r1, #120	@ 0x78
 8003830:	5a5b      	ldrh	r3, [r3, r1]
 8003832:	0019      	movs	r1, r3
 8003834:	0010      	movs	r0, r2
 8003836:	f004 f91d 	bl	8007a74 <HAL_GPIO_ReadPin>
 800383a:	1e03      	subs	r3, r0, #0
 800383c:	d1eb      	bne.n	8003816 <SX1262_BusyWait+0x6>
	}
}
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	46c0      	nop			@ (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	20000208 	.word	0x20000208

0800384c <SX1262_Set_Command>:
}

//**************************************************************************************************************************************************************//
// set command function
void SX1262_Set_Command(uint8_t *cmnd_, uint8_t *ans_, uint16_t Len,uint32_t Time_out ,uint16_t Delay)
{
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b087      	sub	sp, #28
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	1dbb      	adds	r3, r7, #6
 800385a:	801a      	strh	r2, [r3, #0]
	SX1262_BusyWait();
 800385c:	f7ff ffd8 	bl	8003810 <SX1262_BusyWait>

	SX1262_CSLow();
 8003860:	f7ff ffb6 	bl	80037d0 <SX1262_CSLow>
	err22 = HAL_SPI_TransmitReceive(&SX_stc.SPI, cmnd_, ans_, Len, Time_out); // 1 command byte, 1 wait, 2 response
 8003864:	1dbb      	adds	r3, r7, #6
 8003866:	881c      	ldrh	r4, [r3, #0]
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	68f9      	ldr	r1, [r7, #12]
 800386c:	480c      	ldr	r0, [pc, #48]	@ (80038a0 <SX1262_Set_Command+0x54>)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	0023      	movs	r3, r4
 8003874:	f005 ff54 	bl	8009720 <HAL_SPI_TransmitReceive>
 8003878:	0003      	movs	r3, r0
 800387a:	001a      	movs	r2, r3
 800387c:	4b09      	ldr	r3, [pc, #36]	@ (80038a4 <SX1262_Set_Command+0x58>)
 800387e:	701a      	strb	r2, [r3, #0]
	SX1262_CSHigh();
 8003880:	f7ff ffb6 	bl	80037f0 <SX1262_CSHigh>
	
	if(Delay)
 8003884:	2220      	movs	r2, #32
 8003886:	18bb      	adds	r3, r7, r2
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <SX1262_Set_Command+0x4c>
	{
		HAL_Delay(Delay);
 800388e:	18bb      	adds	r3, r7, r2
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	0018      	movs	r0, r3
 8003894:	f003 feb2 	bl	80075fc <HAL_Delay>
	}
}
 8003898:	46c0      	nop			@ (mov r8, r8)
 800389a:	46bd      	mov	sp, r7
 800389c:	b005      	add	sp, #20
 800389e:	bd90      	pop	{r4, r7, pc}
 80038a0:	20000208 	.word	0x20000208
 80038a4:	200005e2 	.word	0x200005e2

080038a8 <SX1262_Transmit>:
}


//**************************************************************************************************************************************************************//
//Transmit data using LORA module
void SX1262_Transmit(uint8_t* data, uint8_t len){
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	000a      	movs	r2, r1
 80038b2:	1cfb      	adds	r3, r7, #3
 80038b4:	701a      	strb	r2, [r3, #0]
	

	uint8_t counter =5;
 80038b6:	230f      	movs	r3, #15
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	2205      	movs	r2, #5
 80038bc:	701a      	strb	r2, [r3, #0]
	
	//==================================================================
		cmnd[0] = 0x8C;          //Opcode for "SetPacketParameters"
 80038be:	4b3f      	ldr	r3, [pc, #252]	@ (80039bc <SX1262_Transmit+0x114>)
 80038c0:	228c      	movs	r2, #140	@ 0x8c
 80038c2:	701a      	strb	r2, [r3, #0]
		cmnd[1] = 0x00;          //PacketParam1 = Preamble Len MSB
 80038c4:	4b3d      	ldr	r3, [pc, #244]	@ (80039bc <SX1262_Transmit+0x114>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	705a      	strb	r2, [r3, #1]
		cmnd[2] = 0x0C;          //PacketParam2 = Preamble Len LSB
 80038ca:	4b3c      	ldr	r3, [pc, #240]	@ (80039bc <SX1262_Transmit+0x114>)
 80038cc:	220c      	movs	r2, #12
 80038ce:	709a      	strb	r2, [r3, #2]
		cmnd[3] = 0x00;          //PacketParam3 = Header Type. 0x00 = Variable Len, 0x01 = Fixed Length
 80038d0:	4b3a      	ldr	r3, [pc, #232]	@ (80039bc <SX1262_Transmit+0x114>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	70da      	strb	r2, [r3, #3]
		cmnd[4] = len;          //PacketParam4 = Payload Length (Max is 255 bytes)
 80038d6:	4b39      	ldr	r3, [pc, #228]	@ (80039bc <SX1262_Transmit+0x114>)
 80038d8:	1cfa      	adds	r2, r7, #3
 80038da:	7812      	ldrb	r2, [r2, #0]
 80038dc:	711a      	strb	r2, [r3, #4]
		cmnd[5] = 0x00;          //PacketParam5 = CRC Type. 0x00 = Off, 0x01 = on
 80038de:	4b37      	ldr	r3, [pc, #220]	@ (80039bc <SX1262_Transmit+0x114>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	715a      	strb	r2, [r3, #5]
		cmnd[6] = 0x00;          //PacketParam6 = Invert IQ.  0x00 = Standard, 0x01 = Inverted
 80038e4:	4b35      	ldr	r3, [pc, #212]	@ (80039bc <SX1262_Transmit+0x114>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	719a      	strb	r2, [r3, #6]
		SX1262_Set_Command(cmnd,answ,7,100,0);
 80038ea:	4935      	ldr	r1, [pc, #212]	@ (80039c0 <SX1262_Transmit+0x118>)
 80038ec:	4833      	ldr	r0, [pc, #204]	@ (80039bc <SX1262_Transmit+0x114>)
 80038ee:	2300      	movs	r3, #0
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	2364      	movs	r3, #100	@ 0x64
 80038f4:	2207      	movs	r2, #7
 80038f6:	f7ff ffa9 	bl	800384c <SX1262_Set_Command>
	
		//==================================================================
		SX1262_waitForRadioCommandCompletion(100);  //Give time for radio to process the command
 80038fa:	2064      	movs	r0, #100	@ 0x64
 80038fc:	f000 f8d2 	bl	8003aa4 <SX1262_waitForRadioCommandCompletion>
	  //==================================================================
		//Write the payload to the buffer
		//  Reminder: PayloadLength is defined in setPacketParams
		cmnd[0] = 0x0E,          //Opcode for WriteBuffer command _ Write data into the FIFO
 8003900:	4b2e      	ldr	r3, [pc, #184]	@ (80039bc <SX1262_Transmit+0x114>)
 8003902:	220e      	movs	r2, #14
 8003904:	701a      	strb	r2, [r3, #0]
		cmnd[1] = 0x00;          //Dummy byte before writing payload
 8003906:	4b2d      	ldr	r3, [pc, #180]	@ (80039bc <SX1262_Transmit+0x114>)
 8003908:	2200      	movs	r2, #0
 800390a:	705a      	strb	r2, [r3, #1]
		
		SX1262_BusyWait();
 800390c:	f7ff ff80 	bl	8003810 <SX1262_BusyWait>

		SX1262_CSLow();
 8003910:	f7ff ff5e 	bl	80037d0 <SX1262_CSLow>
		
		err22 = HAL_SPI_TransmitReceive(&SX_stc.SPI, cmnd,answ,2 , 100);
 8003914:	4a2a      	ldr	r2, [pc, #168]	@ (80039c0 <SX1262_Transmit+0x118>)
 8003916:	4929      	ldr	r1, [pc, #164]	@ (80039bc <SX1262_Transmit+0x114>)
 8003918:	482a      	ldr	r0, [pc, #168]	@ (80039c4 <SX1262_Transmit+0x11c>)
 800391a:	2364      	movs	r3, #100	@ 0x64
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2302      	movs	r3, #2
 8003920:	f005 fefe 	bl	8009720 <HAL_SPI_TransmitReceive>
 8003924:	0003      	movs	r3, r0
 8003926:	001a      	movs	r2, r3
 8003928:	4b27      	ldr	r3, [pc, #156]	@ (80039c8 <SX1262_Transmit+0x120>)
 800392a:	701a      	strb	r2, [r3, #0]
		err22 = HAL_SPI_TransmitReceive(&SX_stc.SPI,data,answ,len+1, 100);
 800392c:	1cfb      	adds	r3, r7, #3
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	b29b      	uxth	r3, r3
 8003932:	3301      	adds	r3, #1
 8003934:	b29b      	uxth	r3, r3
 8003936:	4a22      	ldr	r2, [pc, #136]	@ (80039c0 <SX1262_Transmit+0x118>)
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	4822      	ldr	r0, [pc, #136]	@ (80039c4 <SX1262_Transmit+0x11c>)
 800393c:	2464      	movs	r4, #100	@ 0x64
 800393e:	9400      	str	r4, [sp, #0]
 8003940:	f005 feee 	bl	8009720 <HAL_SPI_TransmitReceive>
 8003944:	0003      	movs	r3, r0
 8003946:	001a      	movs	r2, r3
 8003948:	4b1f      	ldr	r3, [pc, #124]	@ (80039c8 <SX1262_Transmit+0x120>)
 800394a:	701a      	strb	r2, [r3, #0]
		
		SX1262_CSHigh();
 800394c:	f7ff ff50 	bl	80037f0 <SX1262_CSHigh>

		SX1262_BusyWait();
 8003950:	f7ff ff5e 	bl	8003810 <SX1262_BusyWait>
		//==================================================================
		SX1262_waitForRadioCommandCompletion(100);  //Give time for radio to process the command
 8003954:	2064      	movs	r0, #100	@ 0x64
 8003956:	f000 f8a5 	bl	8003aa4 <SX1262_waitForRadioCommandCompletion>
	  //==================================================================
		//Transmit!
  // An interrupt will be triggered if we surpass our timeout
		cmnd[0] = 0x83;          //Opcode for SetTx command
 800395a:	4b18      	ldr	r3, [pc, #96]	@ (80039bc <SX1262_Transmit+0x114>)
 800395c:	2283      	movs	r2, #131	@ 0x83
 800395e:	701a      	strb	r2, [r3, #0]
		cmnd[1] = 0xFF;          //Timeout (3-byte number)
 8003960:	4b16      	ldr	r3, [pc, #88]	@ (80039bc <SX1262_Transmit+0x114>)
 8003962:	22ff      	movs	r2, #255	@ 0xff
 8003964:	705a      	strb	r2, [r3, #1]
		cmnd[2] = 0xFF;          //Timeout (3-byte number)
 8003966:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <SX1262_Transmit+0x114>)
 8003968:	22ff      	movs	r2, #255	@ 0xff
 800396a:	709a      	strb	r2, [r3, #2]
		cmnd[3] = 0xFF;          //Timeout (3-byte number)
 800396c:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <SX1262_Transmit+0x114>)
 800396e:	22ff      	movs	r2, #255	@ 0xff
 8003970:	70da      	strb	r2, [r3, #3]
		
		SX1262_Set_Command(cmnd,answ,4,100,0);
 8003972:	4913      	ldr	r1, [pc, #76]	@ (80039c0 <SX1262_Transmit+0x118>)
 8003974:	4811      	ldr	r0, [pc, #68]	@ (80039bc <SX1262_Transmit+0x114>)
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2364      	movs	r3, #100	@ 0x64
 800397c:	2204      	movs	r2, #4
 800397e:	f7ff ff65 	bl	800384c <SX1262_Set_Command>
		//==================================================================
		SX1262_waitForRadioCommandCompletion(500);  //Give time for radio to process the command
 8003982:	23fa      	movs	r3, #250	@ 0xfa
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	0018      	movs	r0, r3
 8003988:	f000 f88c 	bl	8003aa4 <SX1262_waitForRadioCommandCompletion>
		//==================================================================
		
		while(SX1262_getstatus() != 0x06 && counter--){HAL_Delay(10);};
 800398c:	e002      	b.n	8003994 <SX1262_Transmit+0xec>
 800398e:	200a      	movs	r0, #10
 8003990:	f003 fe34 	bl	80075fc <HAL_Delay>
 8003994:	f000 f8e8 	bl	8003b68 <SX1262_getstatus>
 8003998:	0003      	movs	r3, r0
 800399a:	2b06      	cmp	r3, #6
 800399c:	d007      	beq.n	80039ae <SX1262_Transmit+0x106>
 800399e:	220f      	movs	r2, #15
 80039a0:	18bb      	adds	r3, r7, r2
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	18ba      	adds	r2, r7, r2
 80039a6:	1e59      	subs	r1, r3, #1
 80039a8:	7011      	strb	r1, [r2, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1ef      	bne.n	800398e <SX1262_Transmit+0xe6>
		
		//Remember that we are in Tx mode.  If we want to receive a packet, we need to switch into receiving mode
		inReceiveMode = 0;	
 80039ae:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <SX1262_Transmit+0x124>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
}
 80039b4:	46c0      	nop			@ (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b005      	add	sp, #20
 80039ba:	bd90      	pop	{r4, r7, pc}
 80039bc:	200001f0 	.word	0x200001f0
 80039c0:	200001fc 	.word	0x200001fc
 80039c4:	20000208 	.word	0x20000208
 80039c8:	200005e2 	.word	0x200005e2
 80039cc:	200005e0 	.word	0x200005e0

080039d0 <SX1262_Init>:

//**************************************************************************************************************************************************************//
//Initialize module
void SX1262_Init(void){
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af02      	add	r7, sp, #8

	// Toggle reset
	SX1262_CSHigh();
 80039d6:	f7ff ff0b 	bl	80037f0 <SX1262_CSHigh>
	
	HAL_GPIO_WritePin(SX_stc.Reset_Port,SX_stc.Reset_Pin, GPIO_PIN_RESET);
 80039da:	4b1a      	ldr	r3, [pc, #104]	@ (8003a44 <SX1262_Init+0x74>)
 80039dc:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80039de:	4b19      	ldr	r3, [pc, #100]	@ (8003a44 <SX1262_Init+0x74>)
 80039e0:	2268      	movs	r2, #104	@ 0x68
 80039e2:	5a9b      	ldrh	r3, [r3, r2]
 80039e4:	2200      	movs	r2, #0
 80039e6:	0019      	movs	r1, r3
 80039e8:	f004 f861 	bl	8007aae <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80039ec:	2032      	movs	r0, #50	@ 0x32
 80039ee:	f003 fe05 	bl	80075fc <HAL_Delay>
	HAL_GPIO_WritePin(SX_stc.Reset_Port, SX_stc.Reset_Pin, GPIO_PIN_SET);
 80039f2:	4b14      	ldr	r3, [pc, #80]	@ (8003a44 <SX1262_Init+0x74>)
 80039f4:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 80039f6:	4b13      	ldr	r3, [pc, #76]	@ (8003a44 <SX1262_Init+0x74>)
 80039f8:	2268      	movs	r2, #104	@ 0x68
 80039fa:	5a9b      	ldrh	r3, [r3, r2]
 80039fc:	2201      	movs	r2, #1
 80039fe:	0019      	movs	r1, r3
 8003a00:	f004 f855 	bl	8007aae <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003a04:	2064      	movs	r0, #100	@ 0x64
 8003a06:	f003 fdf9 	bl	80075fc <HAL_Delay>

	//==================================================================
	 // SetDIO3asTCXOCtrl SPI Transaction
		cmnd[0] = 0x97;        // 0x97 is  SetDIO3asTCXOCtrl
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <SX1262_Init+0x78>)
 8003a0c:	2297      	movs	r2, #151	@ 0x97
 8003a0e:	701a      	strb	r2, [r3, #0]
		cmnd[1] = 0x00;        //  DIO3 outputs 1.6 V to supply the TCXO
 8003a10:	4b0d      	ldr	r3, [pc, #52]	@ (8003a48 <SX1262_Init+0x78>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	705a      	strb	r2, [r3, #1]
		cmnd[2] = 0x00;
 8003a16:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <SX1262_Init+0x78>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	709a      	strb	r2, [r3, #2]
		cmnd[3] = 0x00;
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <SX1262_Init+0x78>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	70da      	strb	r2, [r3, #3]
		SX1262_Set_Command(cmnd,answ,4,100,10);
 8003a22:	490a      	ldr	r1, [pc, #40]	@ (8003a4c <SX1262_Init+0x7c>)
 8003a24:	4808      	ldr	r0, [pc, #32]	@ (8003a48 <SX1262_Init+0x78>)
 8003a26:	230a      	movs	r3, #10
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	2364      	movs	r3, #100	@ 0x64
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	f7ff ff0d 	bl	800384c <SX1262_Set_Command>
		//err22 = getstatus(SX);
		//==================================================================
	
	if(SX1262_Check_Correct() == 0)
 8003a32:	f000 f80d 	bl	8003a50 <SX1262_Check_Correct>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d101      	bne.n	8003a3e <SX1262_Init+0x6e>
	{
		SX1262_Radio_essental_Config();
 8003a3a:	f000 f8c3 	bl	8003bc4 <SX1262_Radio_essental_Config>
	}
}
 8003a3e:	46c0      	nop			@ (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000208 	.word	0x20000208
 8003a48:	200001f0 	.word	0x200001f0
 8003a4c:	200001fc 	.word	0x200001fc

08003a50 <SX1262_Check_Correct>:


//**************************************************************************************************************************************************************//
//check if module is working or not
uint8_t SX1262_Check_Correct(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af02      	add	r7, sp, #8

	cmnd[0] = 0x1D; //OpCode for "read register"
 8003a56:	4b10      	ldr	r3, [pc, #64]	@ (8003a98 <SX1262_Check_Correct+0x48>)
 8003a58:	221d      	movs	r2, #29
 8003a5a:	701a      	strb	r2, [r3, #0]
	cmnd[1] = 0x07;
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a98 <SX1262_Check_Correct+0x48>)
 8003a5e:	2207      	movs	r2, #7
 8003a60:	705a      	strb	r2, [r3, #1]
	cmnd[2] = 0x40;
 8003a62:	4b0d      	ldr	r3, [pc, #52]	@ (8003a98 <SX1262_Check_Correct+0x48>)
 8003a64:	2240      	movs	r2, #64	@ 0x40
 8003a66:	709a      	strb	r2, [r3, #2]
	
	SX1262_Set_Command(cmnd,answ,5,100,0);
 8003a68:	490c      	ldr	r1, [pc, #48]	@ (8003a9c <SX1262_Check_Correct+0x4c>)
 8003a6a:	480b      	ldr	r0, [pc, #44]	@ (8003a98 <SX1262_Check_Correct+0x48>)
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	2364      	movs	r3, #100	@ 0x64
 8003a72:	2205      	movs	r2, #5
 8003a74:	f7ff feea 	bl	800384c <SX1262_Set_Command>

	if(err22)
 8003a78:	4b09      	ldr	r3, [pc, #36]	@ (8003aa0 <SX1262_Check_Correct+0x50>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <SX1262_Check_Correct+0x34>
	{
		return(2);
 8003a80:	2302      	movs	r3, #2
 8003a82:	e006      	b.n	8003a92 <SX1262_Check_Correct+0x42>
	}
	
	if(answ[4] == 0x14)
 8003a84:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <SX1262_Check_Correct+0x4c>)
 8003a86:	791b      	ldrb	r3, [r3, #4]
 8003a88:	2b14      	cmp	r3, #20
 8003a8a:	d101      	bne.n	8003a90 <SX1262_Check_Correct+0x40>
	{
		return(0);
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <SX1262_Check_Correct+0x42>
	}
	else
	{
		return(1);
 8003a90:	2301      	movs	r3, #1
	}
	
}
 8003a92:	0018      	movs	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	200001f0 	.word	0x200001f0
 8003a9c:	200001fc 	.word	0x200001fc
 8003aa0:	200005e2 	.word	0x200005e2

08003aa4 <SX1262_waitForRadioCommandCompletion>:
	
//**************************************************************************************************************************************************************//
//wait for module to execute commands
uint8_t SX1262_waitForRadioCommandCompletion(uint32_t timeout) 
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	6078      	str	r0, [r7, #4]

  uint32_t startTime = HAL_GetTick();
 8003aac:	f003 fd9c 	bl	80075e8 <HAL_GetTick>
 8003ab0:	0003      	movs	r3, r0
 8003ab2:	613b      	str	r3, [r7, #16]
  uint8_t dataTransmitted = 0;
 8003ab4:	2317      	movs	r3, #23
 8003ab6:	18fb      	adds	r3, r7, r3
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]

  //Keep checking radio status until it has completed
  while (!dataTransmitted) {
 8003abc:	e046      	b.n	8003b4c <SX1262_waitForRadioCommandCompletion+0xa8>
    //3ms delay gives inconsistent results.  4ms seems stable.  Using 5ms to be safe
    //HAL_Delay(50);

    //Ask the radio for a status update
    //==================================================================
		cmnd[0] = 0xC0;          //Opcode for "getStatus" command
 8003abe:	4b28      	ldr	r3, [pc, #160]	@ (8003b60 <SX1262_waitForRadioCommandCompletion+0xbc>)
 8003ac0:	22c0      	movs	r2, #192	@ 0xc0
 8003ac2:	701a      	strb	r2, [r3, #0]
    cmnd[1] = 0x00;          //Dummy byte, status will overwrite this byte
 8003ac4:	4b26      	ldr	r3, [pc, #152]	@ (8003b60 <SX1262_waitForRadioCommandCompletion+0xbc>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	705a      	strb	r2, [r3, #1]
		
		SX1262_Set_Command(cmnd,answ,2,100,0);
 8003aca:	4926      	ldr	r1, [pc, #152]	@ (8003b64 <SX1262_waitForRadioCommandCompletion+0xc0>)
 8003acc:	4824      	ldr	r0, [pc, #144]	@ (8003b60 <SX1262_waitForRadioCommandCompletion+0xbc>)
 8003ace:	2300      	movs	r3, #0
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	2364      	movs	r3, #100	@ 0x64
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	f7ff feb9 	bl	800384c <SX1262_Set_Command>
		
    //Parse out the status (see datasheet for what each bit means)
    uint8_t chipMode = (answ[1] >> 4) & 0x7;     //Chip mode is bits [6:4] (3-bits)
 8003ada:	4b22      	ldr	r3, [pc, #136]	@ (8003b64 <SX1262_waitForRadioCommandCompletion+0xc0>)
 8003adc:	785b      	ldrb	r3, [r3, #1]
 8003ade:	091b      	lsrs	r3, r3, #4
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	230f      	movs	r3, #15
 8003ae4:	18fb      	adds	r3, r7, r3
 8003ae6:	2107      	movs	r1, #7
 8003ae8:	400a      	ands	r2, r1
 8003aea:	701a      	strb	r2, [r3, #0]
    uint8_t commandStatus = (answ[1] >> 1) & 0x7;//Command status is bits [3:1] (3-bits)
 8003aec:	4b1d      	ldr	r3, [pc, #116]	@ (8003b64 <SX1262_waitForRadioCommandCompletion+0xc0>)
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	085b      	lsrs	r3, r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	200e      	movs	r0, #14
 8003af6:	183b      	adds	r3, r7, r0
 8003af8:	2107      	movs	r1, #7
 8003afa:	400a      	ands	r2, r1
 8003afc:	701a      	strb	r2, [r3, #0]
    
    //Status 0, 1, 2 mean we're still busy.  Anything else means we're done.
    //Commands 3-6 = command timeout, command processing error, failure to execute command, and Tx Done (respoectively)
    if (commandStatus != 0 && commandStatus != 1 && commandStatus != 2) {
 8003afe:	183b      	adds	r3, r7, r0
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00b      	beq.n	8003b1e <SX1262_waitForRadioCommandCompletion+0x7a>
 8003b06:	183b      	adds	r3, r7, r0
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d007      	beq.n	8003b1e <SX1262_waitForRadioCommandCompletion+0x7a>
 8003b0e:	183b      	adds	r3, r7, r0
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d003      	beq.n	8003b1e <SX1262_waitForRadioCommandCompletion+0x7a>
      dataTransmitted = 1;
 8003b16:	2317      	movs	r3, #23
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
    }

    //If we're in standby mode, we don't need to wait at all
    //0x03 = STBY_XOSC, 0x02= STBY_RC
    if (chipMode == 0x03 || chipMode == 0x02) {
 8003b1e:	220f      	movs	r2, #15
 8003b20:	18bb      	adds	r3, r7, r2
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	d003      	beq.n	8003b30 <SX1262_waitForRadioCommandCompletion+0x8c>
 8003b28:	18bb      	adds	r3, r7, r2
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d103      	bne.n	8003b38 <SX1262_waitForRadioCommandCompletion+0x94>
      dataTransmitted = 1;
 8003b30:	2317      	movs	r3, #23
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
    }

    //Avoid infinite loop by implementing a timeout
    if (HAL_GetTick() - startTime >= timeout) {
 8003b38:	f003 fd56 	bl	80075e8 <HAL_GetTick>
 8003b3c:	0002      	movs	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d801      	bhi.n	8003b4c <SX1262_waitForRadioCommandCompletion+0xa8>
      return 1;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e005      	b.n	8003b58 <SX1262_waitForRadioCommandCompletion+0xb4>
  while (!dataTransmitted) {
 8003b4c:	2317      	movs	r3, #23
 8003b4e:	18fb      	adds	r3, r7, r3
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0b3      	beq.n	8003abe <SX1262_waitForRadioCommandCompletion+0x1a>
    }
  }

  //We did it!
  return 0;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b006      	add	sp, #24
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	200001f0 	.word	0x200001f0
 8003b64:	200001fc 	.word	0x200001fc

08003b68 <SX1262_getstatus>:
}

//**************************************************************************************************************************************************************//
//get module status
uint8_t SX1262_getstatus(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af02      	add	r7, sp, #8
		uint8_t cmnd2[2] = {0xC0,0x00};          //Opcode for "getStatus" command
 8003b6e:	1d3b      	adds	r3, r7, #4
 8003b70:	22c0      	movs	r2, #192	@ 0xc0
 8003b72:	801a      	strh	r2, [r3, #0]
		uint8_t answ2[2] = {0};          //Opcode for "getStatus" command
 8003b74:	003b      	movs	r3, r7
 8003b76:	2200      	movs	r2, #0
 8003b78:	801a      	strh	r2, [r3, #0]
      //Dummy byte, status will overwrite this byte
		SX1262_Set_Command(cmnd2,answ2,2,100,0);
 8003b7a:	0039      	movs	r1, r7
 8003b7c:	1d38      	adds	r0, r7, #4
 8003b7e:	2300      	movs	r3, #0
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2364      	movs	r3, #100	@ 0x64
 8003b84:	2202      	movs	r2, #2
 8003b86:	f7ff fe61 	bl	800384c <SX1262_Set_Command>
		
    //Parse out the status (see datasheet for what each bit means)
    uint8_t chipMode = (answ2[1] >> 4) & 0x7;     //Chip mode is bits [6:4] (3-bits)
 8003b8a:	003b      	movs	r3, r7
 8003b8c:	785b      	ldrb	r3, [r3, #1]
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	2107      	movs	r1, #7
 8003b96:	400a      	ands	r2, r1
 8003b98:	701a      	strb	r2, [r3, #0]
    uint8_t commandStatus = (answ2[1] >> 1) & 0x7;//Command status is bits [3:1] (3-bits)
 8003b9a:	003b      	movs	r3, r7
 8003b9c:	785b      	ldrb	r3, [r3, #1]
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	1dbb      	adds	r3, r7, #6
 8003ba4:	2107      	movs	r1, #7
 8003ba6:	400a      	ands	r2, r1
 8003ba8:	701a      	strb	r2, [r3, #0]
		Status_Now = chipMode;
 8003baa:	4b05      	ldr	r3, [pc, #20]	@ (8003bc0 <SX1262_getstatus+0x58>)
 8003bac:	1dfa      	adds	r2, r7, #7
 8003bae:	7812      	ldrb	r2, [r2, #0]
 8003bb0:	701a      	strb	r2, [r3, #0]
		
		return(commandStatus);
 8003bb2:	1dbb      	adds	r3, r7, #6
 8003bb4:	781b      	ldrb	r3, [r3, #0]
}
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	b002      	add	sp, #8
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	200005e1 	.word	0x200005e1

08003bc4 <SX1262_Radio_essental_Config>:

//**************************************************************************************************************************************************************//
void SX1262_Radio_essental_Config(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af02      	add	r7, sp, #8
		//==================================================================
		//"SetDIO2AsRfSwitchCtrl"
		//Tell DIO2 to control the RF switch so we don't have to do it manually
		cmnd[0] = 0x9D;		//Opcode for "SetDIO2AsRfSwitchCtrl"
 8003bca:	4b61      	ldr	r3, [pc, #388]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003bcc:	229d      	movs	r2, #157	@ 0x9d
 8003bce:	701a      	strb	r2, [r3, #0]
		cmnd[1] = 0x01;   //Enable
 8003bd0:	4b5f      	ldr	r3, [pc, #380]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	705a      	strb	r2, [r3, #1]
	
		SX1262_Set_Command(cmnd,answ,2,100,10);
 8003bd6:	495f      	ldr	r1, [pc, #380]	@ (8003d54 <SX1262_Radio_essental_Config+0x190>)
 8003bd8:	485d      	ldr	r0, [pc, #372]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003bda:	230a      	movs	r3, #10
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	2364      	movs	r3, #100	@ 0x64
 8003be0:	2202      	movs	r2, #2
 8003be2:	f7ff fe33 	bl	800384c <SX1262_Set_Command>
		//==================================================================
		//Opcode for "SetPacketType"
		cmnd[0] =  0x8A;          //Opcode for "SetPacketType"
 8003be6:	4b5a      	ldr	r3, [pc, #360]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003be8:	228a      	movs	r2, #138	@ 0x8a
 8003bea:	701a      	strb	r2, [r3, #0]
		cmnd[1] =  0x01;          //Packet Type: 0x00=GFSK, 0x01=LoRa
 8003bec:	4b58      	ldr	r3, [pc, #352]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	705a      	strb	r2, [r3, #1]
		
		SX1262_Set_Command(cmnd,answ,2,100,10);
 8003bf2:	4958      	ldr	r1, [pc, #352]	@ (8003d54 <SX1262_Radio_essental_Config+0x190>)
 8003bf4:	4856      	ldr	r0, [pc, #344]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003bf6:	230a      	movs	r3, #10
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2364      	movs	r3, #100	@ 0x64
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	f7ff fe25 	bl	800384c <SX1262_Set_Command>

		//==================================================================
		//set freq for 433000000  => 0x1B100000
		cmnd[0] =  0x86;  //Opcode for set RF Frequencty
 8003c02:	4b53      	ldr	r3, [pc, #332]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c04:	2286      	movs	r2, #134	@ 0x86
 8003c06:	701a      	strb	r2, [r3, #0]
		cmnd[1] =  0x1B;
 8003c08:	4b51      	ldr	r3, [pc, #324]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c0a:	221b      	movs	r2, #27
 8003c0c:	705a      	strb	r2, [r3, #1]
		cmnd[2] =  0x10;
 8003c0e:	4b50      	ldr	r3, [pc, #320]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c10:	2210      	movs	r2, #16
 8003c12:	709a      	strb	r2, [r3, #2]
		cmnd[3] =  0x00;
 8003c14:	4b4e      	ldr	r3, [pc, #312]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	70da      	strb	r2, [r3, #3]
		cmnd[4] =  0x00;
 8003c1a:	4b4d      	ldr	r3, [pc, #308]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	711a      	strb	r2, [r3, #4]
		
		SX1262_Set_Command(cmnd,answ,5,100,10);
 8003c20:	494c      	ldr	r1, [pc, #304]	@ (8003d54 <SX1262_Radio_essental_Config+0x190>)
 8003c22:	484b      	ldr	r0, [pc, #300]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c24:	230a      	movs	r3, #10
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	2364      	movs	r3, #100	@ 0x64
 8003c2a:	2205      	movs	r2, #5
 8003c2c:	f7ff fe0e 	bl	800384c <SX1262_Set_Command>
		//==================================================================
		 //Set Rx Timeout to reset on SyncWord or Header detection
		cmnd[0] = 0x9F;          //Opcode for "StopTimerOnPreamble"
 8003c30:	4b47      	ldr	r3, [pc, #284]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c32:	229f      	movs	r2, #159	@ 0x9f
 8003c34:	701a      	strb	r2, [r3, #0]
		cmnd[1] = 0x00;          //Stop timer on:  0x00=SyncWord or header detection, 0x01=preamble detection  SPI.transfer(spiBuff,2);
 8003c36:	4b46      	ldr	r3, [pc, #280]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	705a      	strb	r2, [r3, #1]
	
		SX1262_Set_Command(cmnd,answ,2,100,10);
 8003c3c:	4945      	ldr	r1, [pc, #276]	@ (8003d54 <SX1262_Radio_essental_Config+0x190>)
 8003c3e:	4844      	ldr	r0, [pc, #272]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c40:	230a      	movs	r3, #10
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	2364      	movs	r3, #100	@ 0x64
 8003c46:	2202      	movs	r2, #2
 8003c48:	f7ff fe00 	bl	800384c <SX1262_Set_Command>
		//==================================================================
		//Set modulation parameters is just one more SPI command, but since it
  //is often called frequently when changing the radio config, it's broken up into its own function
		
		cmnd[0] = 0x8B; //Opcode for "SetModulationParameters"
 8003c4c:	4b40      	ldr	r3, [pc, #256]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c4e:	228b      	movs	r2, #139	@ 0x8b
 8003c50:	701a      	strb	r2, [r3, #0]
		cmnd[1] =  7;   //ModParam1 = Spreading Factor.  Can be SF5-SF12, written in hex (0x05-0x0C)
 8003c52:	4b3f      	ldr	r3, [pc, #252]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c54:	2207      	movs	r2, #7
 8003c56:	705a      	strb	r2, [r3, #1]
		cmnd[2] =  5;   //ModParam2 = Bandwidth.  See Datasheet 13.4.5.2 for details. 0x00=7.81khz (slowest)
 8003c58:	4b3d      	ldr	r3, [pc, #244]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c5a:	2205      	movs	r2, #5
 8003c5c:	709a      	strb	r2, [r3, #2]
		cmnd[3] =  1;   //ModParam3 = CodingRate.  Semtech recommends CR_4_5 (which is 0x01).  Options are 0x01-0x04, which correspond to coding rate 5-8 respectively
 8003c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	70da      	strb	r2, [r3, #3]
		cmnd[4] =  0;   //LowDataRateOptimize.  0x00 = 0ff, 0x01 = On.  Required to be on for SF11 + SF12
 8003c64:	4b3a      	ldr	r3, [pc, #232]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	711a      	strb	r2, [r3, #4]
		
		SX1262_Set_Command(cmnd,answ,5,100,10);
 8003c6a:	493a      	ldr	r1, [pc, #232]	@ (8003d54 <SX1262_Radio_essental_Config+0x190>)
 8003c6c:	4838      	ldr	r0, [pc, #224]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c6e:	230a      	movs	r3, #10
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	2364      	movs	r3, #100	@ 0x64
 8003c74:	2205      	movs	r2, #5
 8003c76:	f7ff fde9 	bl	800384c <SX1262_Set_Command>
		//==================================================================
		// Set PA Config
  // See datasheet 13.1.4 for descriptions and optimal settings recommendations
		cmnd[0] = 0x95;          //Opcode for "SetPaConfig"
 8003c7a:	4b35      	ldr	r3, [pc, #212]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c7c:	2295      	movs	r2, #149	@ 0x95
 8003c7e:	701a      	strb	r2, [r3, #0]
		cmnd[1] = 0x04;          //paDutyCycle. See datasheet, set in conjuntion with hpMax
 8003c80:	4b33      	ldr	r3, [pc, #204]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c82:	2204      	movs	r2, #4
 8003c84:	705a      	strb	r2, [r3, #1]
		cmnd[2] = 0x07;          //hpMax.  Basically Tx power.  0x00-0x07 where 0x07 is max power
 8003c86:	4b32      	ldr	r3, [pc, #200]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c88:	2207      	movs	r2, #7
 8003c8a:	709a      	strb	r2, [r3, #2]
		cmnd[3] = 0x00;          //device select: 0x00 = SX1262, 0x01 = SX1261
 8003c8c:	4b30      	ldr	r3, [pc, #192]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	70da      	strb	r2, [r3, #3]
		cmnd[4] = 0x01;          //paLut (reserved, always set to 1)
 8003c92:	4b2f      	ldr	r3, [pc, #188]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	711a      	strb	r2, [r3, #4]
		
		SX1262_Set_Command(cmnd,answ,5,100,10);
 8003c98:	492e      	ldr	r1, [pc, #184]	@ (8003d54 <SX1262_Radio_essental_Config+0x190>)
 8003c9a:	482d      	ldr	r0, [pc, #180]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003c9c:	230a      	movs	r3, #10
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2364      	movs	r3, #100	@ 0x64
 8003ca2:	2205      	movs	r2, #5
 8003ca4:	f7ff fdd2 	bl	800384c <SX1262_Set_Command>
		//==================================================================
		 // Set TX Params
  // See datasheet 13.4.4 for details
		cmnd[0] = 0x8E;          //Opcode for SetTxParams
 8003ca8:	4b29      	ldr	r3, [pc, #164]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003caa:	228e      	movs	r2, #142	@ 0x8e
 8003cac:	701a      	strb	r2, [r3, #0]
		cmnd[1] = 22;            //Power.  Can be -17(0xEF) to +14x0E in Low Pow mode.  -9(0xF7) to 22(0x16) in high power mode
 8003cae:	4b28      	ldr	r3, [pc, #160]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003cb0:	2216      	movs	r2, #22
 8003cb2:	705a      	strb	r2, [r3, #1]
		cmnd[2] = 0x02;          //Ramp time. Lookup table.  See table 13-41. 0x02="40uS"
 8003cb4:	4b26      	ldr	r3, [pc, #152]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	709a      	strb	r2, [r3, #2]
		
		SX1262_Set_Command(cmnd,answ,3,100,10);
 8003cba:	4926      	ldr	r1, [pc, #152]	@ (8003d54 <SX1262_Radio_essental_Config+0x190>)
 8003cbc:	4824      	ldr	r0, [pc, #144]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003cbe:	230a      	movs	r3, #10
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	2364      	movs	r3, #100	@ 0x64
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	f7ff fdc1 	bl	800384c <SX1262_Set_Command>
		//==================================================================
		//Set LoRa Symbol Number timeout
  //How many symbols are needed for a good receive.
  //Symbols are preamble symbols
		cmnd[0] = 0xA0;          //Opcode for "SetLoRaSymbNumTimeout"
 8003cca:	4b21      	ldr	r3, [pc, #132]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003ccc:	22a0      	movs	r2, #160	@ 0xa0
 8003cce:	701a      	strb	r2, [r3, #0]
		cmnd[1] = 0x00;          //Number of symbols.  Ping-pong example from Semtech uses 5
 8003cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	705a      	strb	r2, [r3, #1]
		
		SX1262_Set_Command(cmnd,answ,2,100,10);
 8003cd6:	491f      	ldr	r1, [pc, #124]	@ (8003d54 <SX1262_Radio_essental_Config+0x190>)
 8003cd8:	481d      	ldr	r0, [pc, #116]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003cda:	230a      	movs	r3, #10
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	2364      	movs	r3, #100	@ 0x64
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f7ff fdb3 	bl	800384c <SX1262_Set_Command>
		//==================================================================
		 //Enable interrupts
		cmnd[0] = 0x08;        //0x08 is the opcode for "SetDioIrqParams"
 8003ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003ce8:	2208      	movs	r2, #8
 8003cea:	701a      	strb	r2, [r3, #0]
		cmnd[1] = 0x00;        //IRQMask MSB.  IRQMask is "what interrupts are enabled"
 8003cec:	4b18      	ldr	r3, [pc, #96]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	705a      	strb	r2, [r3, #1]
		cmnd[2] = 0x02;        //IRQMask LSB         See datasheet table 13-29 for details
 8003cf2:	4b17      	ldr	r3, [pc, #92]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	709a      	strb	r2, [r3, #2]
		cmnd[3] = 0xFF;        //DIO1 mask MSB.  Of the interrupts detected, which should be triggered on DIO1 pin
 8003cf8:	4b15      	ldr	r3, [pc, #84]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003cfa:	22ff      	movs	r2, #255	@ 0xff
 8003cfc:	70da      	strb	r2, [r3, #3]
		cmnd[4] = 0xFF;        //DIO1 Mask LSB
 8003cfe:	4b14      	ldr	r3, [pc, #80]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003d00:	22ff      	movs	r2, #255	@ 0xff
 8003d02:	711a      	strb	r2, [r3, #4]
		cmnd[5] = 0x00;        //DIO2 Mask MSB
 8003d04:	4b12      	ldr	r3, [pc, #72]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	715a      	strb	r2, [r3, #5]
		cmnd[6] = 0x00;        //DIO2 Mask LSB
 8003d0a:	4b11      	ldr	r3, [pc, #68]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	719a      	strb	r2, [r3, #6]
		cmnd[7] = 0x00;        //DIO3 Mask MSB
 8003d10:	4b0f      	ldr	r3, [pc, #60]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	71da      	strb	r2, [r3, #7]
		cmnd[8] = 0x00;        //DIO3 Mask LSB
 8003d16:	4b0e      	ldr	r3, [pc, #56]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	721a      	strb	r2, [r3, #8]
		
		SX1262_Set_Command(cmnd,answ,9,100,10);
 8003d1c:	490d      	ldr	r1, [pc, #52]	@ (8003d54 <SX1262_Radio_essental_Config+0x190>)
 8003d1e:	480c      	ldr	r0, [pc, #48]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003d20:	230a      	movs	r3, #10
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	2364      	movs	r3, #100	@ 0x64
 8003d26:	2209      	movs	r2, #9
 8003d28:	f7ff fd90 	bl	800384c <SX1262_Set_Command>

		//==================================================================
	 // SetRxTxFallbackMode
		cmnd[0] = 0x93;        // 0x93 is  setfallbackMode
 8003d2c:	4b08      	ldr	r3, [pc, #32]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003d2e:	2293      	movs	r2, #147	@ 0x93
 8003d30:	701a      	strb	r2, [r3, #0]
		cmnd[1] = 0x30;        // The radio goes into STDBY_XOSC mode after Tx or Rx
 8003d32:	4b07      	ldr	r3, [pc, #28]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003d34:	2230      	movs	r2, #48	@ 0x30
 8003d36:	705a      	strb	r2, [r3, #1]
		
		SX1262_Set_Command(cmnd,answ,2,100,10);
 8003d38:	4906      	ldr	r1, [pc, #24]	@ (8003d54 <SX1262_Radio_essental_Config+0x190>)
 8003d3a:	4805      	ldr	r0, [pc, #20]	@ (8003d50 <SX1262_Radio_essental_Config+0x18c>)
 8003d3c:	230a      	movs	r3, #10
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	2364      	movs	r3, #100	@ 0x64
 8003d42:	2202      	movs	r2, #2
 8003d44:	f7ff fd82 	bl	800384c <SX1262_Set_Command>
	//==================================================================
}
 8003d48:	46c0      	nop			@ (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	200001f0 	.word	0x200001f0
 8003d54:	200001fc 	.word	0x200001fc

08003d58 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8003d58:	b5b0      	push	{r4, r5, r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	0018      	movs	r0, r3
 8003d64:	f000 f93a 	bl	8003fdc <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	250f      	movs	r5, #15
 8003d6c:	197c      	adds	r4, r7, r5
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	20d0      	movs	r0, #208	@ 0xd0
 8003d74:	f000 f8d8 	bl	8003f28 <bme68x_get_regs>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 8003d7c:	197b      	adds	r3, r7, r5
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b25b      	sxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d11b      	bne.n	8003dbe <bme68x_init+0x66>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b61      	cmp	r3, #97	@ 0x61
 8003d8c:	d113      	bne.n	8003db6 <bme68x_init+0x5e>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8003d8e:	197c      	adds	r4, r7, r5
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	0018      	movs	r0, r3
 8003d94:	f002 fae8 	bl	8006368 <read_variant_id>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8003d9c:	197b      	adds	r3, r7, r5
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	b25b      	sxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10b      	bne.n	8003dbe <bme68x_init+0x66>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8003da6:	197c      	adds	r4, r7, r5
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	0018      	movs	r0, r3
 8003dac:	f002 f9a5 	bl	80060fa <get_calib_data>
 8003db0:	0003      	movs	r3, r0
 8003db2:	7023      	strb	r3, [r4, #0]
 8003db4:	e003      	b.n	8003dbe <bme68x_init+0x66>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 8003db6:	230f      	movs	r3, #15
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	22fd      	movs	r2, #253	@ 0xfd
 8003dbc:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8003dbe:	230f      	movs	r3, #15
 8003dc0:	18fb      	adds	r3, r7, r3
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	b25b      	sxtb	r3, r3
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b004      	add	sp, #16
 8003dcc:	bdb0      	pop	{r4, r5, r7, pc}

08003dce <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8003dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd0:	b08b      	sub	sp, #44	@ 0x2c
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	607a      	str	r2, [r7, #4]
 8003dda:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8003ddc:	2310      	movs	r3, #16
 8003dde:	18fb      	adds	r3, r7, r3
 8003de0:	0018      	movs	r0, r3
 8003de2:	2314      	movs	r3, #20
 8003de4:	001a      	movs	r2, r3
 8003de6:	2100      	movs	r1, #0
 8003de8:	f007 fdb0 	bl	800b94c <memset>
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003dec:	2527      	movs	r5, #39	@ 0x27
 8003dee:	197c      	adds	r4, r7, r5
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	0018      	movs	r0, r3
 8003df4:	f001 feff 	bl	8005bf6 <null_ptr_check>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8003dfc:	197b      	adds	r3, r7, r5
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	b25b      	sxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d000      	beq.n	8003e08 <bme68x_set_regs+0x3a>
 8003e06:	e083      	b.n	8003f10 <bme68x_set_regs+0x142>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d100      	bne.n	8003e10 <bme68x_set_regs+0x42>
 8003e0e:	e07f      	b.n	8003f10 <bme68x_set_regs+0x142>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d100      	bne.n	8003e18 <bme68x_set_regs+0x4a>
 8003e16:	e07b      	b.n	8003f10 <bme68x_set_regs+0x142>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d100      	bne.n	8003e20 <bme68x_set_regs+0x52>
 8003e1e:	e070      	b.n	8003f02 <bme68x_set_regs+0x134>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b0a      	cmp	r3, #10
 8003e24:	d900      	bls.n	8003e28 <bme68x_set_regs+0x5a>
 8003e26:	e06c      	b.n	8003f02 <bme68x_set_regs+0x134>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8003e28:	2324      	movs	r3, #36	@ 0x24
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	801a      	strh	r2, [r3, #0]
 8003e30:	e03f      	b.n	8003eb2 <bme68x_set_regs+0xe4>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	7b1b      	ldrb	r3, [r3, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d11d      	bne.n	8003e76 <bme68x_set_regs+0xa8>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8003e3a:	2524      	movs	r5, #36	@ 0x24
 8003e3c:	197b      	adds	r3, r7, r5
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	18d3      	adds	r3, r2, r3
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	2227      	movs	r2, #39	@ 0x27
 8003e48:	18bc      	adds	r4, r7, r2
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	0011      	movs	r1, r2
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f001 fde3 	bl	8005a1a <set_mem_page>
 8003e54:	0003      	movs	r3, r0
 8003e56:	7023      	strb	r3, [r4, #0]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 8003e58:	197b      	adds	r3, r7, r5
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	18d3      	adds	r3, r2, r3
 8003e60:	781a      	ldrb	r2, [r3, #0]
 8003e62:	197b      	adds	r3, r7, r5
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	217f      	movs	r1, #127	@ 0x7f
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	b2d1      	uxtb	r1, r2
 8003e6e:	2210      	movs	r2, #16
 8003e70:	18ba      	adds	r2, r7, r2
 8003e72:	54d1      	strb	r1, [r2, r3]
 8003e74:	e00b      	b.n	8003e8e <bme68x_set_regs+0xc0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8003e76:	2124      	movs	r1, #36	@ 0x24
 8003e78:	187b      	adds	r3, r7, r1
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	18d2      	adds	r2, r2, r3
 8003e80:	187b      	adds	r3, r7, r1
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	005b      	lsls	r3, r3, #1
 8003e86:	7811      	ldrb	r1, [r2, #0]
 8003e88:	2210      	movs	r2, #16
 8003e8a:	18ba      	adds	r2, r7, r2
 8003e8c:	54d1      	strb	r1, [r2, r3]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8003e8e:	2024      	movs	r0, #36	@ 0x24
 8003e90:	183b      	adds	r3, r7, r0
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	18d2      	adds	r2, r2, r3
 8003e98:	183b      	adds	r3, r7, r0
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	7811      	ldrb	r1, [r2, #0]
 8003ea2:	2210      	movs	r2, #16
 8003ea4:	18ba      	adds	r2, r7, r2
 8003ea6:	54d1      	strb	r1, [r2, r3]
            for (index = 0; index < len; index++)
 8003ea8:	183b      	adds	r3, r7, r0
 8003eaa:	881a      	ldrh	r2, [r3, #0]
 8003eac:	183b      	adds	r3, r7, r0
 8003eae:	3201      	adds	r2, #1
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	2324      	movs	r3, #36	@ 0x24
 8003eb4:	18fb      	adds	r3, r7, r3
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d8b9      	bhi.n	8003e32 <bme68x_set_regs+0x64>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8003ebe:	2627      	movs	r6, #39	@ 0x27
 8003ec0:	19bb      	adds	r3, r7, r6
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	b25b      	sxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d120      	bne.n	8003f0c <bme68x_set_regs+0x13e>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003ece:	2110      	movs	r1, #16
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	7818      	ldrb	r0, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	1e5a      	subs	r2, r3, #1
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685d      	ldr	r5, [r3, #4]
 8003ede:	187b      	adds	r3, r7, r1
 8003ee0:	1c59      	adds	r1, r3, #1
 8003ee2:	002b      	movs	r3, r5
 8003ee4:	47a0      	blx	r4
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	0019      	movs	r1, r3
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	224c      	movs	r2, #76	@ 0x4c
 8003eee:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	224c      	movs	r2, #76	@ 0x4c
 8003ef4:	569b      	ldrsb	r3, [r3, r2]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d008      	beq.n	8003f0c <bme68x_set_regs+0x13e>
                {
                    rslt = BME68X_E_COM_FAIL;
 8003efa:	19bb      	adds	r3, r7, r6
 8003efc:	22fe      	movs	r2, #254	@ 0xfe
 8003efe:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8003f00:	e004      	b.n	8003f0c <bme68x_set_regs+0x13e>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8003f02:	2327      	movs	r3, #39	@ 0x27
 8003f04:	18fb      	adds	r3, r7, r3
 8003f06:	22fc      	movs	r2, #252	@ 0xfc
 8003f08:	701a      	strb	r2, [r3, #0]
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8003f0a:	e005      	b.n	8003f18 <bme68x_set_regs+0x14a>
            if (rslt == BME68X_OK)
 8003f0c:	46c0      	nop			@ (mov r8, r8)
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8003f0e:	e003      	b.n	8003f18 <bme68x_set_regs+0x14a>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003f10:	2327      	movs	r3, #39	@ 0x27
 8003f12:	18fb      	adds	r3, r7, r3
 8003f14:	22ff      	movs	r2, #255	@ 0xff
 8003f16:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003f18:	2327      	movs	r3, #39	@ 0x27
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	b25b      	sxtb	r3, r3
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b00b      	add	sp, #44	@ 0x2c
 8003f26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f28 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8003f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	250f      	movs	r5, #15
 8003f36:	197b      	adds	r3, r7, r5
 8003f38:	1c02      	adds	r2, r0, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003f3c:	2617      	movs	r6, #23
 8003f3e:	19bc      	adds	r4, r7, r6
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	0018      	movs	r0, r3
 8003f44:	f001 fe57 	bl	8005bf6 <null_ptr_check>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_data)
 8003f4c:	19bb      	adds	r3, r7, r6
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d136      	bne.n	8003fc4 <bme68x_get_regs+0x9c>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d033      	beq.n	8003fc4 <bme68x_get_regs+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	7b1b      	ldrb	r3, [r3, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d115      	bne.n	8003f90 <bme68x_get_regs+0x68>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8003f64:	19bc      	adds	r4, r7, r6
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	197b      	adds	r3, r7, r5
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	0011      	movs	r1, r2
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f001 fd53 	bl	8005a1a <set_mem_page>
 8003f74:	0003      	movs	r3, r0
 8003f76:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8003f78:	19bb      	adds	r3, r7, r6
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	b25b      	sxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <bme68x_get_regs+0x68>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8003f82:	197b      	adds	r3, r7, r5
 8003f84:	197a      	adds	r2, r7, r5
 8003f86:	7812      	ldrb	r2, [r2, #0]
 8003f88:	2180      	movs	r1, #128	@ 0x80
 8003f8a:	4249      	negs	r1, r1
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	701a      	strb	r2, [r3, #0]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685d      	ldr	r5, [r3, #4]
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	230f      	movs	r3, #15
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	7818      	ldrb	r0, [r3, #0]
 8003fa2:	002b      	movs	r3, r5
 8003fa4:	47a0      	blx	r4
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	0019      	movs	r1, r3
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	224c      	movs	r2, #76	@ 0x4c
 8003fae:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	224c      	movs	r2, #76	@ 0x4c
 8003fb4:	569b      	ldrsb	r3, [r3, r2]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <bme68x_get_regs+0xa4>
        {
            rslt = BME68X_E_COM_FAIL;
 8003fba:	2317      	movs	r3, #23
 8003fbc:	18fb      	adds	r3, r7, r3
 8003fbe:	22fe      	movs	r2, #254	@ 0xfe
 8003fc0:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != 0)
 8003fc2:	e003      	b.n	8003fcc <bme68x_get_regs+0xa4>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003fc4:	2317      	movs	r3, #23
 8003fc6:	18fb      	adds	r3, r7, r3
 8003fc8:	22ff      	movs	r2, #255	@ 0xff
 8003fca:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003fcc:	2317      	movs	r3, #23
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	b25b      	sxtb	r3, r3
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b007      	add	sp, #28
 8003fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fdc <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8003fdc:	b5b0      	push	{r4, r5, r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8003fe4:	230e      	movs	r3, #14
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	22e0      	movs	r2, #224	@ 0xe0
 8003fea:	701a      	strb	r2, [r3, #0]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8003fec:	230d      	movs	r3, #13
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	22b6      	movs	r2, #182	@ 0xb6
 8003ff2:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003ff4:	250f      	movs	r5, #15
 8003ff6:	197c      	adds	r4, r7, r5
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	0018      	movs	r0, r3
 8003ffc:	f001 fdfb 	bl	8005bf6 <null_ptr_check>
 8004000:	0003      	movs	r3, r0
 8004002:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8004004:	002a      	movs	r2, r5
 8004006:	18bb      	adds	r3, r7, r2
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	b25b      	sxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d133      	bne.n	8004078 <bme68x_soft_reset+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	7b1b      	ldrb	r3, [r3, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d106      	bne.n	8004026 <bme68x_soft_reset+0x4a>
        {
            rslt = get_mem_page(dev);
 8004018:	18bc      	adds	r4, r7, r2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f001 fd79 	bl	8005b14 <get_mem_page>
 8004022:	0003      	movs	r3, r0
 8004024:	7023      	strb	r3, [r4, #0]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8004026:	250f      	movs	r5, #15
 8004028:	197b      	adds	r3, r7, r5
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	b25b      	sxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d122      	bne.n	8004078 <bme68x_soft_reset+0x9c>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8004032:	197c      	adds	r4, r7, r5
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	220d      	movs	r2, #13
 8004038:	18b9      	adds	r1, r7, r2
 800403a:	220e      	movs	r2, #14
 800403c:	18b8      	adds	r0, r7, r2
 800403e:	2201      	movs	r2, #1
 8004040:	f7ff fec5 	bl	8003dce <bme68x_set_regs>
 8004044:	0003      	movs	r3, r0
 8004046:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8004048:	002c      	movs	r4, r5
 800404a:	193b      	adds	r3, r7, r4
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	b25b      	sxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d111      	bne.n	8004078 <bme68x_soft_reset+0x9c>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	480a      	ldr	r0, [pc, #40]	@ (8004088 <bme68x_soft_reset+0xac>)
 800405e:	0019      	movs	r1, r3
 8004060:	4790      	blx	r2

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	7b1b      	ldrb	r3, [r3, #12]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d106      	bne.n	8004078 <bme68x_soft_reset+0x9c>
                {
                    rslt = get_mem_page(dev);
 800406a:	193c      	adds	r4, r7, r4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	0018      	movs	r0, r3
 8004070:	f001 fd50 	bl	8005b14 <get_mem_page>
 8004074:	0003      	movs	r3, r0
 8004076:	7023      	strb	r3, [r4, #0]
                }
            }
        }
    }

    return rslt;
 8004078:	230f      	movs	r3, #15
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	b25b      	sxtb	r3, r3
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	b004      	add	sp, #16
 8004086:	bdb0      	pop	{r4, r5, r7, pc}
 8004088:	00002710 	.word	0x00002710

0800408c <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 800408c:	b5b0      	push	{r4, r5, r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8004096:	231e      	movs	r3, #30
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	231d      	movs	r3, #29
 80040a0:	18fb      	adds	r3, r7, r3
 80040a2:	2201      	movs	r2, #1
 80040a4:	701a      	strb	r2, [r3, #0]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 80040a6:	2314      	movs	r3, #20
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	4a9f      	ldr	r2, [pc, #636]	@ (8004328 <bme68x_set_conf+0x29c>)
 80040ac:	6811      	ldr	r1, [r2, #0]
 80040ae:	6019      	str	r1, [r3, #0]
 80040b0:	7912      	ldrb	r2, [r2, #4]
 80040b2:	711a      	strb	r2, [r3, #4]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 80040b4:	230c      	movs	r3, #12
 80040b6:	18fb      	adds	r3, r7, r3
 80040b8:	0018      	movs	r0, r3
 80040ba:	2305      	movs	r3, #5
 80040bc:	001a      	movs	r2, r3
 80040be:	2100      	movs	r1, #0
 80040c0:	f007 fc44 	bl	800b94c <memset>

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 80040c4:	251f      	movs	r5, #31
 80040c6:	197c      	adds	r4, r7, r5
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	231c      	movs	r3, #28
 80040cc:	18fb      	adds	r3, r7, r3
 80040ce:	0011      	movs	r1, r2
 80040d0:	0018      	movs	r0, r3
 80040d2:	f000 f9ab 	bl	800442c <bme68x_get_op_mode>
 80040d6:	0003      	movs	r3, r0
 80040d8:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 80040da:	197b      	adds	r3, r7, r5
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	b25b      	sxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d107      	bne.n	80040f4 <bme68x_set_conf+0x68>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80040e4:	197c      	adds	r4, r7, r5
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	0019      	movs	r1, r3
 80040ea:	2000      	movs	r0, #0
 80040ec:	f000 f91e 	bl	800432c <bme68x_set_op_mode>
 80040f0:	0003      	movs	r3, r0
 80040f2:	7023      	strb	r3, [r4, #0]
    }

    if (conf == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d104      	bne.n	8004104 <bme68x_set_conf+0x78>
    {
        rslt = BME68X_E_NULL_PTR;
 80040fa:	231f      	movs	r3, #31
 80040fc:	18fb      	adds	r3, r7, r3
 80040fe:	22ff      	movs	r2, #255	@ 0xff
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e0e2      	b.n	80042ca <bme68x_set_conf+0x23e>
    }
    else if (rslt == BME68X_OK)
 8004104:	251f      	movs	r5, #31
 8004106:	197b      	adds	r3, r7, r5
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	b25b      	sxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d000      	beq.n	8004112 <bme68x_set_conf+0x86>
 8004110:	e0db      	b.n	80042ca <bme68x_set_conf+0x23e>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8004112:	2314      	movs	r3, #20
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	7818      	ldrb	r0, [r3, #0]
 8004118:	197c      	adds	r4, r7, r5
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	220c      	movs	r2, #12
 800411e:	18b9      	adds	r1, r7, r2
 8004120:	2205      	movs	r2, #5
 8004122:	f7ff ff01 	bl	8003f28 <bme68x_get_regs>
 8004126:	0003      	movs	r3, r0
 8004128:	7023      	strb	r3, [r4, #0]
        dev->info_msg = BME68X_OK;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	224d      	movs	r2, #77	@ 0x4d
 800412e:	2100      	movs	r1, #0
 8004130:	5499      	strb	r1, [r3, r2]
        if (rslt == BME68X_OK)
 8004132:	197b      	adds	r3, r7, r5
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	b25b      	sxtb	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d109      	bne.n	8004150 <bme68x_set_conf+0xc4>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3303      	adds	r3, #3
 8004140:	197c      	adds	r4, r7, r5
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	2107      	movs	r1, #7
 8004146:	0018      	movs	r0, r3
 8004148:	f001 fd1c 	bl	8005b84 <boundary_check>
 800414c:	0003      	movs	r3, r0
 800414e:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8004150:	221f      	movs	r2, #31
 8004152:	18bb      	adds	r3, r7, r2
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	b25b      	sxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d109      	bne.n	8004170 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3301      	adds	r3, #1
 8004160:	18bc      	adds	r4, r7, r2
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	2105      	movs	r1, #5
 8004166:	0018      	movs	r0, r3
 8004168:	f001 fd0c 	bl	8005b84 <boundary_check>
 800416c:	0003      	movs	r3, r0
 800416e:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8004170:	221f      	movs	r2, #31
 8004172:	18bb      	adds	r3, r7, r2
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	b25b      	sxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d109      	bne.n	8004190 <bme68x_set_conf+0x104>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3302      	adds	r3, #2
 8004180:	18bc      	adds	r4, r7, r2
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	2105      	movs	r1, #5
 8004186:	0018      	movs	r0, r3
 8004188:	f001 fcfc 	bl	8005b84 <boundary_check>
 800418c:	0003      	movs	r3, r0
 800418e:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8004190:	221f      	movs	r2, #31
 8004192:	18bb      	adds	r3, r7, r2
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	b25b      	sxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d108      	bne.n	80041ae <bme68x_set_conf+0x122>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	18bc      	adds	r4, r7, r2
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	2105      	movs	r1, #5
 80041a4:	0018      	movs	r0, r3
 80041a6:	f001 fced 	bl	8005b84 <boundary_check>
 80041aa:	0003      	movs	r3, r0
 80041ac:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 80041ae:	221f      	movs	r2, #31
 80041b0:	18bb      	adds	r3, r7, r2
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b25b      	sxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <bme68x_set_conf+0x142>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	3304      	adds	r3, #4
 80041be:	18bc      	adds	r4, r7, r2
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	2108      	movs	r1, #8
 80041c4:	0018      	movs	r0, r3
 80041c6:	f001 fcdd 	bl	8005b84 <boundary_check>
 80041ca:	0003      	movs	r3, r0
 80041cc:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 80041ce:	231f      	movs	r3, #31
 80041d0:	18fb      	adds	r3, r7, r3
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	b25b      	sxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d177      	bne.n	80042ca <bme68x_set_conf+0x23e>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 80041da:	200c      	movs	r0, #12
 80041dc:	183b      	adds	r3, r7, r0
 80041de:	791b      	ldrb	r3, [r3, #4]
 80041e0:	b25b      	sxtb	r3, r3
 80041e2:	221c      	movs	r2, #28
 80041e4:	4393      	bics	r3, r2
 80041e6:	b25a      	sxtb	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	78db      	ldrb	r3, [r3, #3]
 80041ec:	b25b      	sxtb	r3, r3
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	b25b      	sxtb	r3, r3
 80041f2:	211c      	movs	r1, #28
 80041f4:	400b      	ands	r3, r1
 80041f6:	b25b      	sxtb	r3, r3
 80041f8:	4313      	orrs	r3, r2
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	183b      	adds	r3, r7, r0
 8004200:	711a      	strb	r2, [r3, #4]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8004202:	183b      	adds	r3, r7, r0
 8004204:	78db      	ldrb	r3, [r3, #3]
 8004206:	b25b      	sxtb	r3, r3
 8004208:	221f      	movs	r2, #31
 800420a:	4013      	ands	r3, r2
 800420c:	b25a      	sxtb	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	785b      	ldrb	r3, [r3, #1]
 8004212:	b25b      	sxtb	r3, r3
 8004214:	015b      	lsls	r3, r3, #5
 8004216:	b25b      	sxtb	r3, r3
 8004218:	4313      	orrs	r3, r2
 800421a:	b25b      	sxtb	r3, r3
 800421c:	b2da      	uxtb	r2, r3
 800421e:	183b      	adds	r3, r7, r0
 8004220:	70da      	strb	r2, [r3, #3]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8004222:	183b      	adds	r3, r7, r0
 8004224:	78db      	ldrb	r3, [r3, #3]
 8004226:	b25b      	sxtb	r3, r3
 8004228:	221c      	movs	r2, #28
 800422a:	4393      	bics	r3, r2
 800422c:	b25a      	sxtb	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	789b      	ldrb	r3, [r3, #2]
 8004232:	b25b      	sxtb	r3, r3
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	b25b      	sxtb	r3, r3
 8004238:	211c      	movs	r1, #28
 800423a:	400b      	ands	r3, r1
 800423c:	b25b      	sxtb	r3, r3
 800423e:	4313      	orrs	r3, r2
 8004240:	b25b      	sxtb	r3, r3
 8004242:	b2da      	uxtb	r2, r3
 8004244:	183b      	adds	r3, r7, r0
 8004246:	70da      	strb	r2, [r3, #3]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8004248:	183b      	adds	r3, r7, r0
 800424a:	785b      	ldrb	r3, [r3, #1]
 800424c:	b25b      	sxtb	r3, r3
 800424e:	2207      	movs	r2, #7
 8004250:	4393      	bics	r3, r2
 8004252:	b25a      	sxtb	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	b25b      	sxtb	r3, r3
 800425a:	2107      	movs	r1, #7
 800425c:	400b      	ands	r3, r1
 800425e:	b25b      	sxtb	r3, r3
 8004260:	4313      	orrs	r3, r2
 8004262:	b25b      	sxtb	r3, r3
 8004264:	b2da      	uxtb	r2, r3
 8004266:	183b      	adds	r3, r7, r0
 8004268:	705a      	strb	r2, [r3, #1]
            if (conf->odr != BME68X_ODR_NONE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	791b      	ldrb	r3, [r3, #4]
 800426e:	2b08      	cmp	r3, #8
 8004270:	d008      	beq.n	8004284 <bme68x_set_conf+0x1f8>
            {
                odr20 = conf->odr;
 8004272:	231e      	movs	r3, #30
 8004274:	18fb      	adds	r3, r7, r3
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	7912      	ldrb	r2, [r2, #4]
 800427a:	701a      	strb	r2, [r3, #0]
                odr3 = 0;
 800427c:	231d      	movs	r3, #29
 800427e:	18fb      	adds	r3, r7, r3
 8004280:	2200      	movs	r2, #0
 8004282:	701a      	strb	r2, [r3, #0]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8004284:	210c      	movs	r1, #12
 8004286:	187b      	adds	r3, r7, r1
 8004288:	791b      	ldrb	r3, [r3, #4]
 800428a:	b25b      	sxtb	r3, r3
 800428c:	221f      	movs	r2, #31
 800428e:	4013      	ands	r3, r2
 8004290:	b25a      	sxtb	r2, r3
 8004292:	231e      	movs	r3, #30
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	b25b      	sxtb	r3, r3
 800429a:	015b      	lsls	r3, r3, #5
 800429c:	b25b      	sxtb	r3, r3
 800429e:	4313      	orrs	r3, r2
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	187b      	adds	r3, r7, r1
 80042a6:	711a      	strb	r2, [r3, #4]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 80042a8:	187b      	adds	r3, r7, r1
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b25b      	sxtb	r3, r3
 80042ae:	227f      	movs	r2, #127	@ 0x7f
 80042b0:	4013      	ands	r3, r2
 80042b2:	b25a      	sxtb	r2, r3
 80042b4:	231d      	movs	r3, #29
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	b25b      	sxtb	r3, r3
 80042bc:	01db      	lsls	r3, r3, #7
 80042be:	b25b      	sxtb	r3, r3
 80042c0:	4313      	orrs	r3, r2
 80042c2:	b25b      	sxtb	r3, r3
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	187b      	adds	r3, r7, r1
 80042c8:	701a      	strb	r2, [r3, #0]
        }
    }

    if (rslt == BME68X_OK)
 80042ca:	221f      	movs	r2, #31
 80042cc:	18bb      	adds	r3, r7, r2
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	b25b      	sxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10a      	bne.n	80042ec <bme68x_set_conf+0x260>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 80042d6:	18bc      	adds	r4, r7, r2
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	220c      	movs	r2, #12
 80042dc:	18b9      	adds	r1, r7, r2
 80042de:	2214      	movs	r2, #20
 80042e0:	18b8      	adds	r0, r7, r2
 80042e2:	2205      	movs	r2, #5
 80042e4:	f7ff fd73 	bl	8003dce <bme68x_set_regs>
 80042e8:	0003      	movs	r3, r0
 80042ea:	7023      	strb	r3, [r4, #0]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80042ec:	221c      	movs	r2, #28
 80042ee:	18bb      	adds	r3, r7, r2
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00f      	beq.n	8004316 <bme68x_set_conf+0x28a>
 80042f6:	211f      	movs	r1, #31
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b25b      	sxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <bme68x_set_conf+0x28a>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8004302:	18bb      	adds	r3, r7, r2
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	187c      	adds	r4, r7, r1
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	0011      	movs	r1, r2
 800430c:	0018      	movs	r0, r3
 800430e:	f000 f80d 	bl	800432c <bme68x_set_op_mode>
 8004312:	0003      	movs	r3, r0
 8004314:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8004316:	231f      	movs	r3, #31
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	b25b      	sxtb	r3, r3
}
 800431e:	0018      	movs	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	b008      	add	sp, #32
 8004324:	bdb0      	pop	{r4, r5, r7, pc}
 8004326:	46c0      	nop			@ (mov r8, r8)
 8004328:	0800e660 	.word	0x0800e660

0800432c <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 800432c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	0002      	movs	r2, r0
 8004334:	6039      	str	r1, [r7, #0]
 8004336:	1dfb      	adds	r3, r7, #7
 8004338:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 800433a:	230e      	movs	r3, #14
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	2200      	movs	r2, #0
 8004340:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8004342:	230c      	movs	r3, #12
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	2274      	movs	r2, #116	@ 0x74
 8004348:	701a      	strb	r2, [r3, #0]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 800434a:	260f      	movs	r6, #15
 800434c:	19bc      	adds	r4, r7, r6
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	250d      	movs	r5, #13
 8004352:	1979      	adds	r1, r7, r5
 8004354:	2201      	movs	r2, #1
 8004356:	2074      	movs	r0, #116	@ 0x74
 8004358:	f7ff fde6 	bl	8003f28 <bme68x_get_regs>
 800435c:	0003      	movs	r3, r0
 800435e:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 8004360:	0034      	movs	r4, r6
 8004362:	193b      	adds	r3, r7, r4
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	b25b      	sxtb	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d123      	bne.n	80043b4 <bme68x_set_op_mode+0x88>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 800436c:	0028      	movs	r0, r5
 800436e:	183b      	adds	r3, r7, r0
 8004370:	781a      	ldrb	r2, [r3, #0]
 8004372:	250e      	movs	r5, #14
 8004374:	197b      	adds	r3, r7, r5
 8004376:	2103      	movs	r1, #3
 8004378:	400a      	ands	r2, r1
 800437a:	701a      	strb	r2, [r3, #0]
            if (pow_mode != BME68X_SLEEP_MODE)
 800437c:	197b      	adds	r3, r7, r5
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d017      	beq.n	80043b4 <bme68x_set_op_mode+0x88>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8004384:	183b      	adds	r3, r7, r0
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2203      	movs	r2, #3
 800438a:	4393      	bics	r3, r2
 800438c:	b2da      	uxtb	r2, r3
 800438e:	183b      	adds	r3, r7, r0
 8004390:	701a      	strb	r2, [r3, #0]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8004392:	193c      	adds	r4, r7, r4
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	1839      	adds	r1, r7, r0
 8004398:	220c      	movs	r2, #12
 800439a:	18b8      	adds	r0, r7, r2
 800439c:	2201      	movs	r2, #1
 800439e:	f7ff fd16 	bl	8003dce <bme68x_set_regs>
 80043a2:	0003      	movs	r3, r0
 80043a4:	7023      	strb	r3, [r4, #0]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	481e      	ldr	r0, [pc, #120]	@ (8004428 <bme68x_set_op_mode+0xfc>)
 80043b0:	0019      	movs	r1, r3
 80043b2:	4790      	blx	r2
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 80043b4:	230e      	movs	r3, #14
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <bme68x_set_op_mode+0x9e>
 80043be:	230f      	movs	r3, #15
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	b25b      	sxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0bf      	beq.n	800434a <bme68x_set_op_mode+0x1e>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 80043ca:	1dfb      	adds	r3, r7, #7
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d021      	beq.n	8004416 <bme68x_set_op_mode+0xea>
 80043d2:	240f      	movs	r4, #15
 80043d4:	193b      	adds	r3, r7, r4
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	b25b      	sxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d11b      	bne.n	8004416 <bme68x_set_op_mode+0xea>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 80043de:	200d      	movs	r0, #13
 80043e0:	183b      	adds	r3, r7, r0
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	b25b      	sxtb	r3, r3
 80043e6:	2203      	movs	r2, #3
 80043e8:	4393      	bics	r3, r2
 80043ea:	b25a      	sxtb	r2, r3
 80043ec:	1dfb      	adds	r3, r7, #7
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	b25b      	sxtb	r3, r3
 80043f2:	2103      	movs	r1, #3
 80043f4:	400b      	ands	r3, r1
 80043f6:	b25b      	sxtb	r3, r3
 80043f8:	4313      	orrs	r3, r2
 80043fa:	b25b      	sxtb	r3, r3
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	183b      	adds	r3, r7, r0
 8004400:	701a      	strb	r2, [r3, #0]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8004402:	193c      	adds	r4, r7, r4
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	1839      	adds	r1, r7, r0
 8004408:	220c      	movs	r2, #12
 800440a:	18b8      	adds	r0, r7, r2
 800440c:	2201      	movs	r2, #1
 800440e:	f7ff fcde 	bl	8003dce <bme68x_set_regs>
 8004412:	0003      	movs	r3, r0
 8004414:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8004416:	230f      	movs	r3, #15
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	b25b      	sxtb	r3, r3
}
 800441e:	0018      	movs	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	b005      	add	sp, #20
 8004424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	00002710 	.word	0x00002710

0800442c <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 800442c:	b5b0      	push	{r4, r5, r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d012      	beq.n	8004462 <bme68x_get_op_mode+0x36>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 800443c:	230f      	movs	r3, #15
 800443e:	18fc      	adds	r4, r7, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	250e      	movs	r5, #14
 8004444:	1979      	adds	r1, r7, r5
 8004446:	2201      	movs	r2, #1
 8004448:	2074      	movs	r0, #116	@ 0x74
 800444a:	f7ff fd6d 	bl	8003f28 <bme68x_get_regs>
 800444e:	0003      	movs	r3, r0
 8004450:	7023      	strb	r3, [r4, #0]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8004452:	197b      	adds	r3, r7, r5
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2203      	movs	r2, #3
 8004458:	4013      	ands	r3, r2
 800445a:	b2da      	uxtb	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	e003      	b.n	800446a <bme68x_get_op_mode+0x3e>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8004462:	230f      	movs	r3, #15
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	22ff      	movs	r2, #255	@ 0xff
 8004468:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800446a:	230f      	movs	r3, #15
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	b25b      	sxtb	r3, r3
}
 8004472:	0018      	movs	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	b004      	add	sp, #16
 8004478:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800447c <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 800447c:	b5b0      	push	{r4, r5, r7, lr}
 800447e:	b08a      	sub	sp, #40	@ 0x28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	230f      	movs	r3, #15
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	1c02      	adds	r2, r0, #0
 800448c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 800448e:	2300      	movs	r3, #0
 8004490:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8004492:	2314      	movs	r3, #20
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	4a37      	ldr	r2, [pc, #220]	@ (8004574 <bme68x_get_meas_dur+0xf8>)
 8004498:	6811      	ldr	r1, [r2, #0]
 800449a:	6019      	str	r1, [r3, #0]
 800449c:	8892      	ldrh	r2, [r2, #4]
 800449e:	809a      	strh	r2, [r3, #4]

    if (conf != NULL)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d061      	beq.n	800456a <bme68x_get_meas_dur+0xee>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	3301      	adds	r3, #1
 80044aa:	2527      	movs	r5, #39	@ 0x27
 80044ac:	197c      	adds	r4, r7, r5
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	2105      	movs	r1, #5
 80044b2:	0018      	movs	r0, r3
 80044b4:	f001 fb66 	bl	8005b84 <boundary_check>
 80044b8:	0003      	movs	r3, r0
 80044ba:	7023      	strb	r3, [r4, #0]

        if (rslt == BME68X_OK)
 80044bc:	002a      	movs	r2, r5
 80044be:	18bb      	adds	r3, r7, r2
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	b25b      	sxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <bme68x_get_meas_dur+0x60>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	3302      	adds	r3, #2
 80044cc:	18bc      	adds	r4, r7, r2
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	2105      	movs	r1, #5
 80044d2:	0018      	movs	r0, r3
 80044d4:	f001 fb56 	bl	8005b84 <boundary_check>
 80044d8:	0003      	movs	r3, r0
 80044da:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 80044dc:	2227      	movs	r2, #39	@ 0x27
 80044de:	18bb      	adds	r3, r7, r2
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	b25b      	sxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d108      	bne.n	80044fa <bme68x_get_meas_dur+0x7e>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	18bc      	adds	r4, r7, r2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	2105      	movs	r1, #5
 80044f0:	0018      	movs	r0, r3
 80044f2:	f001 fb47 	bl	8005b84 <boundary_check>
 80044f6:	0003      	movs	r3, r0
 80044f8:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 80044fa:	2327      	movs	r3, #39	@ 0x27
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	b25b      	sxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d131      	bne.n	800456a <bme68x_get_meas_dur+0xee>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	785b      	ldrb	r3, [r3, #1]
 800450a:	001a      	movs	r2, r3
 800450c:	2114      	movs	r1, #20
 800450e:	187b      	adds	r3, r7, r1
 8004510:	5c9b      	ldrb	r3, [r3, r2]
 8004512:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	789b      	ldrb	r3, [r3, #2]
 8004518:	001a      	movs	r2, r3
 800451a:	187b      	adds	r3, r7, r1
 800451c:	5c9b      	ldrb	r3, [r3, r2]
 800451e:	001a      	movs	r2, r3
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	189b      	adds	r3, r3, r2
 8004524:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	001a      	movs	r2, r3
 800452c:	187b      	adds	r3, r7, r1
 800452e:	5c9b      	ldrb	r3, [r3, r2]
 8004530:	001a      	movs	r2, r3
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	189b      	adds	r3, r3, r2
 8004536:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	4a0f      	ldr	r2, [pc, #60]	@ (8004578 <bme68x_get_meas_dur+0xfc>)
 800453c:	4353      	muls	r3, r2
 800453e:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	4a0e      	ldr	r2, [pc, #56]	@ (800457c <bme68x_get_meas_dur+0x100>)
 8004544:	4694      	mov	ip, r2
 8004546:	4463      	add	r3, ip
 8004548:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	4a0c      	ldr	r2, [pc, #48]	@ (8004580 <bme68x_get_meas_dur+0x104>)
 800454e:	4694      	mov	ip, r2
 8004550:	4463      	add	r3, ip
 8004552:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8004554:	230f      	movs	r3, #15
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d005      	beq.n	800456a <bme68x_get_meas_dur+0xee>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	22fa      	movs	r2, #250	@ 0xfa
 8004562:	0092      	lsls	r2, r2, #2
 8004564:	4694      	mov	ip, r2
 8004566:	4463      	add	r3, ip
 8004568:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 800456a:	6a3b      	ldr	r3, [r7, #32]
}
 800456c:	0018      	movs	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	b00a      	add	sp, #40	@ 0x28
 8004572:	bdb0      	pop	{r4, r5, r7, pc}
 8004574:	0800e668 	.word	0x0800e668
 8004578:	000007ab 	.word	0x000007ab
 800457c:	00000774 	.word	0x00000774
 8004580:	00000951 	.word	0x00000951

08004584 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8004584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004586:	b09b      	sub	sp, #108	@ 0x6c
 8004588:	af00      	add	r7, sp, #0
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	260f      	movs	r6, #15
 8004592:	19bb      	adds	r3, r7, r6
 8004594:	1c02      	adds	r2, r0, #0
 8004596:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8004598:	2366      	movs	r3, #102	@ 0x66
 800459a:	18fb      	adds	r3, r7, r3
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]
 80045a0:	2365      	movs	r3, #101	@ 0x65
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
 80045a8:	2364      	movs	r3, #100	@ 0x64
 80045aa:	18fb      	adds	r3, r7, r3
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *field_ptr[3] = { 0 };
 80045b0:	2458      	movs	r4, #88	@ 0x58
 80045b2:	193b      	adds	r3, r7, r4
 80045b4:	0018      	movs	r0, r3
 80045b6:	230c      	movs	r3, #12
 80045b8:	001a      	movs	r2, r3
 80045ba:	2100      	movs	r1, #0
 80045bc:	f007 f9c6 	bl	800b94c <memset>
    struct bme68x_data field_data[3] = { { 0 } };
 80045c0:	2510      	movs	r5, #16
 80045c2:	197b      	adds	r3, r7, r5
 80045c4:	0018      	movs	r0, r3
 80045c6:	2348      	movs	r3, #72	@ 0x48
 80045c8:	001a      	movs	r2, r3
 80045ca:	2100      	movs	r1, #0
 80045cc:	f007 f9be 	bl	800b94c <memset>

    field_ptr[0] = &field_data[0];
 80045d0:	193b      	adds	r3, r7, r4
 80045d2:	0029      	movs	r1, r5
 80045d4:	187a      	adds	r2, r7, r1
 80045d6:	601a      	str	r2, [r3, #0]
    field_ptr[1] = &field_data[1];
 80045d8:	193b      	adds	r3, r7, r4
 80045da:	187a      	adds	r2, r7, r1
 80045dc:	3218      	adds	r2, #24
 80045de:	605a      	str	r2, [r3, #4]
    field_ptr[2] = &field_data[2];
 80045e0:	193b      	adds	r3, r7, r4
 80045e2:	187a      	adds	r2, r7, r1
 80045e4:	3230      	adds	r2, #48	@ 0x30
 80045e6:	609a      	str	r2, [r3, #8]

    rslt = null_ptr_check(dev);
 80045e8:	2567      	movs	r5, #103	@ 0x67
 80045ea:	197c      	adds	r4, r7, r5
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	0018      	movs	r0, r3
 80045f0:	f001 fb01 	bl	8005bf6 <null_ptr_check>
 80045f4:	0003      	movs	r3, r0
 80045f6:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && (data != NULL))
 80045f8:	002a      	movs	r2, r5
 80045fa:	18bb      	adds	r3, r7, r2
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	b25b      	sxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d000      	beq.n	8004606 <bme68x_get_data+0x82>
 8004604:	e0e3      	b.n	80047ce <bme68x_get_data+0x24a>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d100      	bne.n	800460e <bme68x_get_data+0x8a>
 800460c:	e0df      	b.n	80047ce <bme68x_get_data+0x24a>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 800460e:	19bb      	adds	r3, r7, r6
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d122      	bne.n	800465c <bme68x_get_data+0xd8>
        {
            rslt = read_field_data(0, data, dev);
 8004616:	0015      	movs	r5, r2
 8004618:	18bc      	adds	r4, r7, r2
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	0019      	movs	r1, r3
 8004620:	2000      	movs	r0, #0
 8004622:	f000 fe67 	bl	80052f4 <read_field_data>
 8004626:	0003      	movs	r3, r0
 8004628:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 800462a:	197b      	adds	r3, r7, r5
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	b25b      	sxtb	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d000      	beq.n	8004636 <bme68x_get_data+0xb2>
 8004634:	e0bd      	b.n	80047b2 <bme68x_get_data+0x22e>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	b25b      	sxtb	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	da04      	bge.n	800464a <bme68x_get_data+0xc6>
                {
                    new_fields = 1;
 8004640:	2364      	movs	r3, #100	@ 0x64
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e0b3      	b.n	80047b2 <bme68x_get_data+0x22e>
                }
                else
                {
                    new_fields = 0;
 800464a:	2364      	movs	r3, #100	@ 0x64
 800464c:	18fb      	adds	r3, r7, r3
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
                    rslt = BME68X_W_NO_NEW_DATA;
 8004652:	2367      	movs	r3, #103	@ 0x67
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	2202      	movs	r2, #2
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	e0aa      	b.n	80047b2 <bme68x_get_data+0x22e>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 800465c:	220f      	movs	r2, #15
 800465e:	18bb      	adds	r3, r7, r2
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d004      	beq.n	8004670 <bme68x_get_data+0xec>
 8004666:	18bb      	adds	r3, r7, r2
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b03      	cmp	r3, #3
 800466c:	d000      	beq.n	8004670 <bme68x_get_data+0xec>
 800466e:	e09c      	b.n	80047aa <bme68x_get_data+0x226>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8004670:	2367      	movs	r3, #103	@ 0x67
 8004672:	18fc      	adds	r4, r7, r3
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	2358      	movs	r3, #88	@ 0x58
 8004678:	18fb      	adds	r3, r7, r3
 800467a:	0011      	movs	r1, r2
 800467c:	0018      	movs	r0, r3
 800467e:	f000 ffb9 	bl	80055f4 <read_all_field_data>
 8004682:	0003      	movs	r3, r0
 8004684:	7023      	strb	r3, [r4, #0]

            new_fields = 0;
 8004686:	2364      	movs	r3, #100	@ 0x64
 8004688:	18fb      	adds	r3, r7, r3
 800468a:	2200      	movs	r2, #0
 800468c:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 800468e:	2366      	movs	r3, #102	@ 0x66
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e016      	b.n	80046c6 <bme68x_get_data+0x142>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8004698:	2366      	movs	r3, #102	@ 0x66
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	2358      	movs	r3, #88	@ 0x58
 80046a0:	18fb      	adds	r3, r7, r3
 80046a2:	0092      	lsls	r2, r2, #2
 80046a4:	58d3      	ldr	r3, [r2, r3]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	b25b      	sxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	da05      	bge.n	80046ba <bme68x_get_data+0x136>
                {
                    new_fields++;
 80046ae:	2164      	movs	r1, #100	@ 0x64
 80046b0:	187b      	adds	r3, r7, r1
 80046b2:	781a      	ldrb	r2, [r3, #0]
 80046b4:	187b      	adds	r3, r7, r1
 80046b6:	3201      	adds	r2, #1
 80046b8:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80046ba:	2166      	movs	r1, #102	@ 0x66
 80046bc:	187b      	adds	r3, r7, r1
 80046be:	781a      	ldrb	r2, [r3, #0]
 80046c0:	187b      	adds	r3, r7, r1
 80046c2:	3201      	adds	r2, #1
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	2366      	movs	r3, #102	@ 0x66
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d805      	bhi.n	80046dc <bme68x_get_data+0x158>
 80046d0:	2367      	movs	r3, #103	@ 0x67
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b25b      	sxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0dd      	beq.n	8004698 <bme68x_get_data+0x114>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80046dc:	2366      	movs	r3, #102	@ 0x66
 80046de:	18fb      	adds	r3, r7, r3
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
 80046e4:	e022      	b.n	800472c <bme68x_get_data+0x1a8>
            {
                for (j = i + 1; j < 3; j++)
 80046e6:	2365      	movs	r3, #101	@ 0x65
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	2266      	movs	r2, #102	@ 0x66
 80046ec:	18ba      	adds	r2, r7, r2
 80046ee:	7812      	ldrb	r2, [r2, #0]
 80046f0:	3201      	adds	r2, #1
 80046f2:	701a      	strb	r2, [r3, #0]
 80046f4:	e00f      	b.n	8004716 <bme68x_get_data+0x192>
                {
                    sort_sensor_data(i, j, field_ptr);
 80046f6:	2358      	movs	r3, #88	@ 0x58
 80046f8:	18fa      	adds	r2, r7, r3
 80046fa:	2465      	movs	r4, #101	@ 0x65
 80046fc:	193b      	adds	r3, r7, r4
 80046fe:	7819      	ldrb	r1, [r3, #0]
 8004700:	2366      	movs	r3, #102	@ 0x66
 8004702:	18fb      	adds	r3, r7, r3
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	0018      	movs	r0, r3
 8004708:	f001 fc62 	bl	8005fd0 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 800470c:	193b      	adds	r3, r7, r4
 800470e:	781a      	ldrb	r2, [r3, #0]
 8004710:	193b      	adds	r3, r7, r4
 8004712:	3201      	adds	r2, #1
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	2365      	movs	r3, #101	@ 0x65
 8004718:	18fb      	adds	r3, r7, r3
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d9ea      	bls.n	80046f6 <bme68x_get_data+0x172>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8004720:	2166      	movs	r1, #102	@ 0x66
 8004722:	187b      	adds	r3, r7, r1
 8004724:	781a      	ldrb	r2, [r3, #0]
 8004726:	187b      	adds	r3, r7, r1
 8004728:	3201      	adds	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
 800472c:	2366      	movs	r3, #102	@ 0x66
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d805      	bhi.n	8004742 <bme68x_get_data+0x1be>
 8004736:	2367      	movs	r3, #103	@ 0x67
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	b25b      	sxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0d1      	beq.n	80046e6 <bme68x_get_data+0x162>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8004742:	2366      	movs	r3, #102	@ 0x66
 8004744:	18fb      	adds	r3, r7, r3
 8004746:	2200      	movs	r2, #0
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	e019      	b.n	8004780 <bme68x_get_data+0x1fc>
            {
                data[i] = *field_ptr[i];
 800474c:	2566      	movs	r5, #102	@ 0x66
 800474e:	197b      	adds	r3, r7, r5
 8004750:	781a      	ldrb	r2, [r3, #0]
 8004752:	2358      	movs	r3, #88	@ 0x58
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	0092      	lsls	r2, r2, #2
 8004758:	58d1      	ldr	r1, [r2, r3]
 800475a:	197b      	adds	r3, r7, r5
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	0013      	movs	r3, r2
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	189b      	adds	r3, r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	001a      	movs	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	189b      	adds	r3, r3, r2
 800476c:	000a      	movs	r2, r1
 800476e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004770:	c313      	stmia	r3!, {r0, r1, r4}
 8004772:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004774:	c313      	stmia	r3!, {r0, r1, r4}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8004776:	197b      	adds	r3, r7, r5
 8004778:	781a      	ldrb	r2, [r3, #0]
 800477a:	197b      	adds	r3, r7, r5
 800477c:	3201      	adds	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	2366      	movs	r3, #102	@ 0x66
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d805      	bhi.n	8004796 <bme68x_get_data+0x212>
 800478a:	2367      	movs	r3, #103	@ 0x67
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	b25b      	sxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0da      	beq.n	800474c <bme68x_get_data+0x1c8>
            }

            if (new_fields == 0)
 8004796:	2364      	movs	r3, #100	@ 0x64
 8004798:	18fb      	adds	r3, r7, r3
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d108      	bne.n	80047b2 <bme68x_get_data+0x22e>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 80047a0:	2367      	movs	r3, #103	@ 0x67
 80047a2:	18fb      	adds	r3, r7, r3
 80047a4:	2202      	movs	r2, #2
 80047a6:	701a      	strb	r2, [r3, #0]
            if (new_fields == 0)
 80047a8:	e003      	b.n	80047b2 <bme68x_get_data+0x22e>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 80047aa:	2367      	movs	r3, #103	@ 0x67
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	2201      	movs	r2, #1
 80047b0:	701a      	strb	r2, [r3, #0]
        }

        if (n_data == NULL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d104      	bne.n	80047c2 <bme68x_get_data+0x23e>
        {
            rslt = BME68X_E_NULL_PTR;
 80047b8:	2367      	movs	r3, #103	@ 0x67
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	22ff      	movs	r2, #255	@ 0xff
 80047be:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 80047c0:	e009      	b.n	80047d6 <bme68x_get_data+0x252>
        }
        else
        {
            *n_data = new_fields;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2264      	movs	r2, #100	@ 0x64
 80047c6:	18ba      	adds	r2, r7, r2
 80047c8:	7812      	ldrb	r2, [r2, #0]
 80047ca:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 80047cc:	e003      	b.n	80047d6 <bme68x_get_data+0x252>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80047ce:	2367      	movs	r3, #103	@ 0x67
 80047d0:	18fb      	adds	r3, r7, r3
 80047d2:	22ff      	movs	r2, #255	@ 0xff
 80047d4:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80047d6:	2367      	movs	r3, #103	@ 0x67
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	b25b      	sxtb	r3, r3
}
 80047de:	0018      	movs	r0, r3
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b01b      	add	sp, #108	@ 0x6c
 80047e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080047e8 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 80047e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ea:	b089      	sub	sp, #36	@ 0x24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
 80047f2:	260f      	movs	r6, #15
 80047f4:	19bb      	adds	r3, r7, r6
 80047f6:	1c02      	adds	r2, r0, #0
 80047f8:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t nb_conv = 0;
 80047fa:	231c      	movs	r3, #28
 80047fc:	18fb      	adds	r3, r7, r3
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]
    uint8_t hctrl, run_gas = 0;
 8004802:	221d      	movs	r2, #29
 8004804:	18bb      	adds	r3, r7, r2
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 800480a:	2214      	movs	r2, #20
 800480c:	18bb      	adds	r3, r7, r2
 800480e:	4a53      	ldr	r2, [pc, #332]	@ (800495c <bme68x_set_heatr_conf+0x174>)
 8004810:	801a      	strh	r2, [r3, #0]

    if (conf != NULL)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d100      	bne.n	800481a <bme68x_set_heatr_conf+0x32>
 8004818:	e094      	b.n	8004944 <bme68x_set_heatr_conf+0x15c>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 800481a:	251f      	movs	r5, #31
 800481c:	197c      	adds	r4, r7, r5
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	0019      	movs	r1, r3
 8004822:	2000      	movs	r0, #0
 8004824:	f7ff fd82 	bl	800432c <bme68x_set_op_mode>
 8004828:	0003      	movs	r3, r0
 800482a:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 800482c:	197b      	adds	r3, r7, r5
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	b25b      	sxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10b      	bne.n	800484e <bme68x_set_heatr_conf+0x66>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 8004836:	197c      	adds	r4, r7, r5
 8004838:	687d      	ldr	r5, [r7, #4]
 800483a:	231c      	movs	r3, #28
 800483c:	18fa      	adds	r2, r7, r3
 800483e:	19bb      	adds	r3, r7, r6
 8004840:	7819      	ldrb	r1, [r3, #0]
 8004842:	68b8      	ldr	r0, [r7, #8]
 8004844:	002b      	movs	r3, r5
 8004846:	f001 f9f9 	bl	8005c3c <set_conf>
 800484a:	0003      	movs	r3, r0
 800484c:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 800484e:	251f      	movs	r5, #31
 8004850:	197b      	adds	r3, r7, r5
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	b25b      	sxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d000      	beq.n	800485c <bme68x_set_heatr_conf+0x74>
 800485a:	e077      	b.n	800494c <bme68x_set_heatr_conf+0x164>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 800485c:	197c      	adds	r4, r7, r5
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2218      	movs	r2, #24
 8004862:	18b9      	adds	r1, r7, r2
 8004864:	2202      	movs	r2, #2
 8004866:	2070      	movs	r0, #112	@ 0x70
 8004868:	f7ff fb5e 	bl	8003f28 <bme68x_get_regs>
 800486c:	0003      	movs	r3, r0
 800486e:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8004870:	197b      	adds	r3, r7, r5
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	b25b      	sxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d168      	bne.n	800494c <bme68x_set_heatr_conf+0x164>
            {
                if (conf->enable == BME68X_ENABLE)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d111      	bne.n	80048a6 <bme68x_set_heatr_conf+0xbe>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8004882:	231e      	movs	r3, #30
 8004884:	18fb      	adds	r3, r7, r3
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d104      	bne.n	800489c <bme68x_set_heatr_conf+0xb4>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8004892:	231d      	movs	r3, #29
 8004894:	18fb      	adds	r3, r7, r3
 8004896:	2202      	movs	r2, #2
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	e00c      	b.n	80048b6 <bme68x_set_heatr_conf+0xce>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 800489c:	231d      	movs	r3, #29
 800489e:	18fb      	adds	r3, r7, r3
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]
 80048a4:	e007      	b.n	80048b6 <bme68x_set_heatr_conf+0xce>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 80048a6:	231e      	movs	r3, #30
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	2201      	movs	r2, #1
 80048ac:	701a      	strb	r2, [r3, #0]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 80048ae:	231d      	movs	r3, #29
 80048b0:	18fb      	adds	r3, r7, r3
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 80048b6:	2018      	movs	r0, #24
 80048b8:	183b      	adds	r3, r7, r0
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	b25b      	sxtb	r3, r3
 80048be:	2208      	movs	r2, #8
 80048c0:	4393      	bics	r3, r2
 80048c2:	b25a      	sxtb	r2, r3
 80048c4:	231e      	movs	r3, #30
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	b25b      	sxtb	r3, r3
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	b25b      	sxtb	r3, r3
 80048d0:	2108      	movs	r1, #8
 80048d2:	400b      	ands	r3, r1
 80048d4:	b25b      	sxtb	r3, r3
 80048d6:	4313      	orrs	r3, r2
 80048d8:	b25b      	sxtb	r3, r3
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	183b      	adds	r3, r7, r0
 80048de:	701a      	strb	r2, [r3, #0]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 80048e0:	183b      	adds	r3, r7, r0
 80048e2:	785b      	ldrb	r3, [r3, #1]
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	220f      	movs	r2, #15
 80048e8:	4393      	bics	r3, r2
 80048ea:	b25a      	sxtb	r2, r3
 80048ec:	231c      	movs	r3, #28
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	b25b      	sxtb	r3, r3
 80048f4:	210f      	movs	r1, #15
 80048f6:	400b      	ands	r3, r1
 80048f8:	b25b      	sxtb	r3, r3
 80048fa:	4313      	orrs	r3, r2
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	183b      	adds	r3, r7, r0
 8004902:	705a      	strb	r2, [r3, #1]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8004904:	183b      	adds	r3, r7, r0
 8004906:	785b      	ldrb	r3, [r3, #1]
 8004908:	b25b      	sxtb	r3, r3
 800490a:	2230      	movs	r2, #48	@ 0x30
 800490c:	4393      	bics	r3, r2
 800490e:	b25a      	sxtb	r2, r3
 8004910:	231d      	movs	r3, #29
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	b25b      	sxtb	r3, r3
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	b25b      	sxtb	r3, r3
 800491c:	2130      	movs	r1, #48	@ 0x30
 800491e:	400b      	ands	r3, r1
 8004920:	b25b      	sxtb	r3, r3
 8004922:	4313      	orrs	r3, r2
 8004924:	b25b      	sxtb	r3, r3
 8004926:	b2da      	uxtb	r2, r3
 8004928:	183b      	adds	r3, r7, r0
 800492a:	705a      	strb	r2, [r3, #1]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 800492c:	231f      	movs	r3, #31
 800492e:	18fc      	adds	r4, r7, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	1839      	adds	r1, r7, r0
 8004934:	2214      	movs	r2, #20
 8004936:	18b8      	adds	r0, r7, r2
 8004938:	2202      	movs	r2, #2
 800493a:	f7ff fa48 	bl	8003dce <bme68x_set_regs>
 800493e:	0003      	movs	r3, r0
 8004940:	7023      	strb	r3, [r4, #0]
 8004942:	e003      	b.n	800494c <bme68x_set_heatr_conf+0x164>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8004944:	231f      	movs	r3, #31
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	22ff      	movs	r2, #255	@ 0xff
 800494a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800494c:	231f      	movs	r3, #31
 800494e:	18fb      	adds	r3, r7, r3
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	b25b      	sxtb	r3, r3
}
 8004954:	0018      	movs	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	b009      	add	sp, #36	@ 0x24
 800495a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800495c:	00007170 	.word	0x00007170

08004960 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 8004960:	b5b0      	push	{r4, r5, r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc fed0 	bl	8001710 <__aeabi_ui2f>
 8004970:	1c03      	adds	r3, r0, #0
 8004972:	218d      	movs	r1, #141	@ 0x8d
 8004974:	05c9      	lsls	r1, r1, #23
 8004976:	1c18      	adds	r0, r3, #0
 8004978:	f7fc f8ce 	bl	8000b18 <__aeabi_fdiv>
 800497c:	1c03      	adds	r3, r0, #0
 800497e:	1c1c      	adds	r4, r3, #0
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	8bdb      	ldrh	r3, [r3, #30]
 8004984:	0018      	movs	r0, r3
 8004986:	f7fc fec3 	bl	8001710 <__aeabi_ui2f>
 800498a:	1c03      	adds	r3, r0, #0
 800498c:	2189      	movs	r1, #137	@ 0x89
 800498e:	05c9      	lsls	r1, r1, #23
 8004990:	1c18      	adds	r0, r3, #0
 8004992:	f7fc f8c1 	bl	8000b18 <__aeabi_fdiv>
 8004996:	1c03      	adds	r3, r0, #0
 8004998:	1c19      	adds	r1, r3, #0
 800499a:	1c20      	adds	r0, r4, #0
 800499c:	f7fc fbe4 	bl	8001168 <__aeabi_fsub>
 80049a0:	1c03      	adds	r3, r0, #0
 80049a2:	1c1c      	adds	r4, r3, #0
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2220      	movs	r2, #32
 80049a8:	5e9b      	ldrsh	r3, [r3, r2]
 80049aa:	0018      	movs	r0, r3
 80049ac:	f7fc fe60 	bl	8001670 <__aeabi_i2f>
 80049b0:	1c03      	adds	r3, r0, #0
 80049b2:	1c19      	adds	r1, r3, #0
 80049b4:	1c20      	adds	r0, r4, #0
 80049b6:	f7fc fa7d 	bl	8000eb4 <__aeabi_fmul>
 80049ba:	1c03      	adds	r3, r0, #0
 80049bc:	617b      	str	r3, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fc fea6 	bl	8001710 <__aeabi_ui2f>
 80049c4:	1c03      	adds	r3, r0, #0
 80049c6:	2190      	movs	r1, #144	@ 0x90
 80049c8:	05c9      	lsls	r1, r1, #23
 80049ca:	1c18      	adds	r0, r3, #0
 80049cc:	f7fc f8a4 	bl	8000b18 <__aeabi_fdiv>
 80049d0:	1c03      	adds	r3, r0, #0
 80049d2:	1c1c      	adds	r4, r3, #0
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	8bdb      	ldrh	r3, [r3, #30]
 80049d8:	0018      	movs	r0, r3
 80049da:	f7fc fe99 	bl	8001710 <__aeabi_ui2f>
 80049de:	1c03      	adds	r3, r0, #0
 80049e0:	218c      	movs	r1, #140	@ 0x8c
 80049e2:	05c9      	lsls	r1, r1, #23
 80049e4:	1c18      	adds	r0, r3, #0
 80049e6:	f7fc f897 	bl	8000b18 <__aeabi_fdiv>
 80049ea:	1c03      	adds	r3, r0, #0
 80049ec:	1c19      	adds	r1, r3, #0
 80049ee:	1c20      	adds	r0, r4, #0
 80049f0:	f7fc fbba 	bl	8001168 <__aeabi_fsub>
 80049f4:	1c03      	adds	r3, r0, #0
 80049f6:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7fc fe89 	bl	8001710 <__aeabi_ui2f>
 80049fe:	1c03      	adds	r3, r0, #0
 8004a00:	2190      	movs	r1, #144	@ 0x90
 8004a02:	05c9      	lsls	r1, r1, #23
 8004a04:	1c18      	adds	r0, r3, #0
 8004a06:	f7fc f887 	bl	8000b18 <__aeabi_fdiv>
 8004a0a:	1c03      	adds	r3, r0, #0
 8004a0c:	1c1d      	adds	r5, r3, #0
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	8bdb      	ldrh	r3, [r3, #30]
 8004a12:	0018      	movs	r0, r3
 8004a14:	f7fc fe7c 	bl	8001710 <__aeabi_ui2f>
 8004a18:	1c03      	adds	r3, r0, #0
 8004a1a:	218c      	movs	r1, #140	@ 0x8c
 8004a1c:	05c9      	lsls	r1, r1, #23
 8004a1e:	1c18      	adds	r0, r3, #0
 8004a20:	f7fc f87a 	bl	8000b18 <__aeabi_fdiv>
 8004a24:	1c03      	adds	r3, r0, #0
 8004a26:	1c19      	adds	r1, r3, #0
 8004a28:	1c28      	adds	r0, r5, #0
 8004a2a:	f7fc fb9d 	bl	8001168 <__aeabi_fsub>
 8004a2e:	1c03      	adds	r3, r0, #0
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8004a30:	1c19      	adds	r1, r3, #0
 8004a32:	1c20      	adds	r0, r4, #0
 8004a34:	f7fc fa3e 	bl	8000eb4 <__aeabi_fmul>
 8004a38:	1c03      	adds	r3, r0, #0
 8004a3a:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2222      	movs	r2, #34	@ 0x22
 8004a40:	569b      	ldrsb	r3, [r3, r2]
 8004a42:	0018      	movs	r0, r3
 8004a44:	f7fc fe14 	bl	8001670 <__aeabi_i2f>
 8004a48:	1c03      	adds	r3, r0, #0
 8004a4a:	2183      	movs	r1, #131	@ 0x83
 8004a4c:	05c9      	lsls	r1, r1, #23
 8004a4e:	1c18      	adds	r0, r3, #0
 8004a50:	f7fc fa30 	bl	8000eb4 <__aeabi_fmul>
 8004a54:	1c03      	adds	r3, r0, #0
    var2 =
 8004a56:	1c19      	adds	r1, r3, #0
 8004a58:	1c20      	adds	r0, r4, #0
 8004a5a:	f7fc fa2b 	bl	8000eb4 <__aeabi_fmul>
 8004a5e:	1c03      	adds	r3, r0, #0
 8004a60:	613b      	str	r3, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 8004a62:	6939      	ldr	r1, [r7, #16]
 8004a64:	6978      	ldr	r0, [r7, #20]
 8004a66:	f7fb fe65 	bl	8000734 <__aeabi_fadd>
 8004a6a:	1c03      	adds	r3, r0, #0
 8004a6c:	1c1a      	adds	r2, r3, #0
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	639a      	str	r2, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a76:	4905      	ldr	r1, [pc, #20]	@ (8004a8c <calc_temperature+0x12c>)
 8004a78:	1c18      	adds	r0, r3, #0
 8004a7a:	f7fc f84d 	bl	8000b18 <__aeabi_fdiv>
 8004a7e:	1c03      	adds	r3, r0, #0
 8004a80:	60fb      	str	r3, [r7, #12]

    return calc_temp;
 8004a82:	68fb      	ldr	r3, [r7, #12]
}
 8004a84:	1c18      	adds	r0, r3, #0
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b006      	add	sp, #24
 8004a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a8c:	45a00000 	.word	0x45a00000

08004a90 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	2180      	movs	r1, #128	@ 0x80
 8004aa0:	05c9      	lsls	r1, r1, #23
 8004aa2:	1c18      	adds	r0, r3, #0
 8004aa4:	f7fc f838 	bl	8000b18 <__aeabi_fdiv>
 8004aa8:	1c03      	adds	r3, r0, #0
 8004aaa:	49a7      	ldr	r1, [pc, #668]	@ (8004d48 <calc_pressure+0x2b8>)
 8004aac:	1c18      	adds	r0, r3, #0
 8004aae:	f7fc fb5b 	bl	8001168 <__aeabi_fsub>
 8004ab2:	1c03      	adds	r3, r0, #0
 8004ab4:	613b      	str	r3, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 8004ab6:	6939      	ldr	r1, [r7, #16]
 8004ab8:	6938      	ldr	r0, [r7, #16]
 8004aba:	f7fc f9fb 	bl	8000eb4 <__aeabi_fmul>
 8004abe:	1c03      	adds	r3, r0, #0
 8004ac0:	1c1c      	adds	r4, r3, #0
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	222e      	movs	r2, #46	@ 0x2e
 8004ac6:	569b      	ldrsb	r3, [r3, r2]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fc fdd1 	bl	8001670 <__aeabi_i2f>
 8004ace:	1c03      	adds	r3, r0, #0
 8004ad0:	2190      	movs	r1, #144	@ 0x90
 8004ad2:	05c9      	lsls	r1, r1, #23
 8004ad4:	1c18      	adds	r0, r3, #0
 8004ad6:	f7fc f81f 	bl	8000b18 <__aeabi_fdiv>
 8004ada:	1c03      	adds	r3, r0, #0
 8004adc:	1c19      	adds	r1, r3, #0
 8004ade:	1c20      	adds	r0, r4, #0
 8004ae0:	f7fc f9e8 	bl	8000eb4 <__aeabi_fmul>
 8004ae4:	1c03      	adds	r3, r0, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	222c      	movs	r2, #44	@ 0x2c
 8004aec:	5e9b      	ldrsh	r3, [r3, r2]
 8004aee:	0018      	movs	r0, r3
 8004af0:	f7fc fdbe 	bl	8001670 <__aeabi_i2f>
 8004af4:	1c03      	adds	r3, r0, #0
 8004af6:	6939      	ldr	r1, [r7, #16]
 8004af8:	1c18      	adds	r0, r3, #0
 8004afa:	f7fc f9db 	bl	8000eb4 <__aeabi_fmul>
 8004afe:	1c03      	adds	r3, r0, #0
 8004b00:	1c19      	adds	r1, r3, #0
 8004b02:	1c18      	adds	r0, r3, #0
 8004b04:	f7fb fe16 	bl	8000734 <__aeabi_fadd>
 8004b08:	1c03      	adds	r3, r0, #0
 8004b0a:	1c19      	adds	r1, r3, #0
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f7fb fe11 	bl	8000734 <__aeabi_fadd>
 8004b12:	1c03      	adds	r3, r0, #0
 8004b14:	60fb      	str	r3, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8004b16:	2181      	movs	r1, #129	@ 0x81
 8004b18:	05c9      	lsls	r1, r1, #23
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f7fb fffc 	bl	8000b18 <__aeabi_fdiv>
 8004b20:	1c03      	adds	r3, r0, #0
 8004b22:	1c1c      	adds	r4, r3, #0
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	222a      	movs	r2, #42	@ 0x2a
 8004b28:	5e9b      	ldrsh	r3, [r3, r2]
 8004b2a:	0018      	movs	r0, r3
 8004b2c:	f7fc fda0 	bl	8001670 <__aeabi_i2f>
 8004b30:	1c03      	adds	r3, r0, #0
 8004b32:	218f      	movs	r1, #143	@ 0x8f
 8004b34:	05c9      	lsls	r1, r1, #23
 8004b36:	1c18      	adds	r0, r3, #0
 8004b38:	f7fc f9bc 	bl	8000eb4 <__aeabi_fmul>
 8004b3c:	1c03      	adds	r3, r0, #0
 8004b3e:	1c19      	adds	r1, r3, #0
 8004b40:	1c20      	adds	r0, r4, #0
 8004b42:	f7fb fdf7 	bl	8000734 <__aeabi_fadd>
 8004b46:	1c03      	adds	r3, r0, #0
 8004b48:	60fb      	str	r3, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2228      	movs	r2, #40	@ 0x28
 8004b4e:	569b      	ldrsb	r3, [r3, r2]
 8004b50:	0018      	movs	r0, r3
 8004b52:	f7fc fd8d 	bl	8001670 <__aeabi_i2f>
 8004b56:	1c03      	adds	r3, r0, #0
 8004b58:	6939      	ldr	r1, [r7, #16]
 8004b5a:	1c18      	adds	r0, r3, #0
 8004b5c:	f7fc f9aa 	bl	8000eb4 <__aeabi_fmul>
 8004b60:	1c03      	adds	r3, r0, #0
 8004b62:	6939      	ldr	r1, [r7, #16]
 8004b64:	1c18      	adds	r0, r3, #0
 8004b66:	f7fc f9a5 	bl	8000eb4 <__aeabi_fmul>
 8004b6a:	1c03      	adds	r3, r0, #0
 8004b6c:	218d      	movs	r1, #141	@ 0x8d
 8004b6e:	05c9      	lsls	r1, r1, #23
 8004b70:	1c18      	adds	r0, r3, #0
 8004b72:	f7fb ffd1 	bl	8000b18 <__aeabi_fdiv>
 8004b76:	1c03      	adds	r3, r0, #0
 8004b78:	1c1c      	adds	r4, r3, #0
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2226      	movs	r2, #38	@ 0x26
 8004b7e:	5e9b      	ldrsh	r3, [r3, r2]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f7fc fd75 	bl	8001670 <__aeabi_i2f>
 8004b86:	1c03      	adds	r3, r0, #0
 8004b88:	6939      	ldr	r1, [r7, #16]
 8004b8a:	1c18      	adds	r0, r3, #0
 8004b8c:	f7fc f992 	bl	8000eb4 <__aeabi_fmul>
 8004b90:	1c03      	adds	r3, r0, #0
 8004b92:	1c19      	adds	r1, r3, #0
 8004b94:	1c20      	adds	r0, r4, #0
 8004b96:	f7fb fdcd 	bl	8000734 <__aeabi_fadd>
 8004b9a:	1c03      	adds	r3, r0, #0
 8004b9c:	2192      	movs	r1, #146	@ 0x92
 8004b9e:	05c9      	lsls	r1, r1, #23
 8004ba0:	1c18      	adds	r0, r3, #0
 8004ba2:	f7fb ffb9 	bl	8000b18 <__aeabi_fdiv>
 8004ba6:	1c03      	adds	r3, r0, #0
 8004ba8:	613b      	str	r3, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8004baa:	218e      	movs	r1, #142	@ 0x8e
 8004bac:	05c9      	lsls	r1, r1, #23
 8004bae:	6938      	ldr	r0, [r7, #16]
 8004bb0:	f7fb ffb2 	bl	8000b18 <__aeabi_fdiv>
 8004bb4:	1c03      	adds	r3, r0, #0
 8004bb6:	21fe      	movs	r1, #254	@ 0xfe
 8004bb8:	0589      	lsls	r1, r1, #22
 8004bba:	1c18      	adds	r0, r3, #0
 8004bbc:	f7fb fdba 	bl	8000734 <__aeabi_fadd>
 8004bc0:	1c03      	adds	r3, r0, #0
 8004bc2:	1c1c      	adds	r4, r3, #0
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7fc fda1 	bl	8001710 <__aeabi_ui2f>
 8004bce:	1c03      	adds	r3, r0, #0
 8004bd0:	1c19      	adds	r1, r3, #0
 8004bd2:	1c20      	adds	r0, r4, #0
 8004bd4:	f7fc f96e 	bl	8000eb4 <__aeabi_fmul>
 8004bd8:	1c03      	adds	r3, r0, #0
 8004bda:	613b      	str	r3, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7fc fd97 	bl	8001710 <__aeabi_ui2f>
 8004be2:	1c03      	adds	r3, r0, #0
 8004be4:	1c19      	adds	r1, r3, #0
 8004be6:	2093      	movs	r0, #147	@ 0x93
 8004be8:	05c0      	lsls	r0, r0, #23
 8004bea:	f7fc fabd 	bl	8001168 <__aeabi_fsub>
 8004bee:	1c03      	adds	r3, r0, #0
 8004bf0:	617b      	str	r3, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8004bf2:	6938      	ldr	r0, [r7, #16]
 8004bf4:	f7fc fd1c 	bl	8001630 <__aeabi_f2iz>
 8004bf8:	1e03      	subs	r3, r0, #0
 8004bfa:	d100      	bne.n	8004bfe <calc_pressure+0x16e>
 8004bfc:	e09c      	b.n	8004d38 <calc_pressure+0x2a8>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8004bfe:	218b      	movs	r1, #139	@ 0x8b
 8004c00:	05c9      	lsls	r1, r1, #23
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f7fb ff88 	bl	8000b18 <__aeabi_fdiv>
 8004c08:	1c03      	adds	r3, r0, #0
 8004c0a:	1c19      	adds	r1, r3, #0
 8004c0c:	6978      	ldr	r0, [r7, #20]
 8004c0e:	f7fc faab 	bl	8001168 <__aeabi_fsub>
 8004c12:	1c03      	adds	r3, r0, #0
 8004c14:	494d      	ldr	r1, [pc, #308]	@ (8004d4c <calc_pressure+0x2bc>)
 8004c16:	1c18      	adds	r0, r3, #0
 8004c18:	f7fc f94c 	bl	8000eb4 <__aeabi_fmul>
 8004c1c:	1c03      	adds	r3, r0, #0
 8004c1e:	6939      	ldr	r1, [r7, #16]
 8004c20:	1c18      	adds	r0, r3, #0
 8004c22:	f7fb ff79 	bl	8000b18 <__aeabi_fdiv>
 8004c26:	1c03      	adds	r3, r0, #0
 8004c28:	617b      	str	r3, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2232      	movs	r2, #50	@ 0x32
 8004c2e:	5e9b      	ldrsh	r3, [r3, r2]
 8004c30:	0018      	movs	r0, r3
 8004c32:	f7fc fd1d 	bl	8001670 <__aeabi_i2f>
 8004c36:	1c03      	adds	r3, r0, #0
 8004c38:	6979      	ldr	r1, [r7, #20]
 8004c3a:	1c18      	adds	r0, r3, #0
 8004c3c:	f7fc f93a 	bl	8000eb4 <__aeabi_fmul>
 8004c40:	1c03      	adds	r3, r0, #0
 8004c42:	6979      	ldr	r1, [r7, #20]
 8004c44:	1c18      	adds	r0, r3, #0
 8004c46:	f7fc f935 	bl	8000eb4 <__aeabi_fmul>
 8004c4a:	1c03      	adds	r3, r0, #0
 8004c4c:	219e      	movs	r1, #158	@ 0x9e
 8004c4e:	05c9      	lsls	r1, r1, #23
 8004c50:	1c18      	adds	r0, r3, #0
 8004c52:	f7fb ff61 	bl	8000b18 <__aeabi_fdiv>
 8004c56:	1c03      	adds	r3, r0, #0
 8004c58:	613b      	str	r3, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2230      	movs	r2, #48	@ 0x30
 8004c5e:	5e9b      	ldrsh	r3, [r3, r2]
 8004c60:	0018      	movs	r0, r3
 8004c62:	f7fc fd05 	bl	8001670 <__aeabi_i2f>
 8004c66:	1c03      	adds	r3, r0, #0
 8004c68:	218e      	movs	r1, #142	@ 0x8e
 8004c6a:	05c9      	lsls	r1, r1, #23
 8004c6c:	1c18      	adds	r0, r3, #0
 8004c6e:	f7fb ff53 	bl	8000b18 <__aeabi_fdiv>
 8004c72:	1c03      	adds	r3, r0, #0
 8004c74:	1c19      	adds	r1, r3, #0
 8004c76:	6978      	ldr	r0, [r7, #20]
 8004c78:	f7fc f91c 	bl	8000eb4 <__aeabi_fmul>
 8004c7c:	1c03      	adds	r3, r0, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8004c80:	2187      	movs	r1, #135	@ 0x87
 8004c82:	05c9      	lsls	r1, r1, #23
 8004c84:	6978      	ldr	r0, [r7, #20]
 8004c86:	f7fb ff47 	bl	8000b18 <__aeabi_fdiv>
 8004c8a:	1c03      	adds	r3, r0, #0
 8004c8c:	1c1c      	adds	r4, r3, #0
 8004c8e:	2187      	movs	r1, #135	@ 0x87
 8004c90:	05c9      	lsls	r1, r1, #23
 8004c92:	6978      	ldr	r0, [r7, #20]
 8004c94:	f7fb ff40 	bl	8000b18 <__aeabi_fdiv>
 8004c98:	1c03      	adds	r3, r0, #0
 8004c9a:	1c19      	adds	r1, r3, #0
 8004c9c:	1c20      	adds	r0, r4, #0
 8004c9e:	f7fc f909 	bl	8000eb4 <__aeabi_fmul>
 8004ca2:	1c03      	adds	r3, r0, #0
 8004ca4:	1c1c      	adds	r4, r3, #0
 8004ca6:	2187      	movs	r1, #135	@ 0x87
 8004ca8:	05c9      	lsls	r1, r1, #23
 8004caa:	6978      	ldr	r0, [r7, #20]
 8004cac:	f7fb ff34 	bl	8000b18 <__aeabi_fdiv>
 8004cb0:	1c03      	adds	r3, r0, #0
 8004cb2:	1c19      	adds	r1, r3, #0
 8004cb4:	1c20      	adds	r0, r4, #0
 8004cb6:	f7fc f8fd 	bl	8000eb4 <__aeabi_fmul>
 8004cba:	1c03      	adds	r3, r0, #0
 8004cbc:	1c1c      	adds	r4, r3, #0
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2234      	movs	r2, #52	@ 0x34
 8004cc2:	5c9b      	ldrb	r3, [r3, r2]
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f7fc fcd3 	bl	8001670 <__aeabi_i2f>
 8004cca:	1c03      	adds	r3, r0, #0
 8004ccc:	2190      	movs	r1, #144	@ 0x90
 8004cce:	05c9      	lsls	r1, r1, #23
 8004cd0:	1c18      	adds	r0, r3, #0
 8004cd2:	f7fb ff21 	bl	8000b18 <__aeabi_fdiv>
 8004cd6:	1c03      	adds	r3, r0, #0
 8004cd8:	1c19      	adds	r1, r3, #0
 8004cda:	1c20      	adds	r0, r4, #0
 8004cdc:	f7fc f8ea 	bl	8000eb4 <__aeabi_fmul>
 8004ce0:	1c03      	adds	r3, r0, #0
 8004ce2:	60bb      	str	r3, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8004ce4:	68f9      	ldr	r1, [r7, #12]
 8004ce6:	6938      	ldr	r0, [r7, #16]
 8004ce8:	f7fb fd24 	bl	8000734 <__aeabi_fadd>
 8004cec:	1c03      	adds	r3, r0, #0
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	1c18      	adds	r0, r3, #0
 8004cf2:	f7fb fd1f 	bl	8000734 <__aeabi_fadd>
 8004cf6:	1c03      	adds	r3, r0, #0
 8004cf8:	1c1c      	adds	r4, r3, #0
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	222f      	movs	r2, #47	@ 0x2f
 8004cfe:	569b      	ldrsb	r3, [r3, r2]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f7fc fcb5 	bl	8001670 <__aeabi_i2f>
 8004d06:	1c03      	adds	r3, r0, #0
 8004d08:	2186      	movs	r1, #134	@ 0x86
 8004d0a:	05c9      	lsls	r1, r1, #23
 8004d0c:	1c18      	adds	r0, r3, #0
 8004d0e:	f7fc f8d1 	bl	8000eb4 <__aeabi_fmul>
 8004d12:	1c03      	adds	r3, r0, #0
 8004d14:	1c19      	adds	r1, r3, #0
 8004d16:	1c20      	adds	r0, r4, #0
 8004d18:	f7fb fd0c 	bl	8000734 <__aeabi_fadd>
 8004d1c:	1c03      	adds	r3, r0, #0
 8004d1e:	2183      	movs	r1, #131	@ 0x83
 8004d20:	05c9      	lsls	r1, r1, #23
 8004d22:	1c18      	adds	r0, r3, #0
 8004d24:	f7fb fef8 	bl	8000b18 <__aeabi_fdiv>
 8004d28:	1c03      	adds	r3, r0, #0
 8004d2a:	1c19      	adds	r1, r3, #0
 8004d2c:	6978      	ldr	r0, [r7, #20]
 8004d2e:	f7fb fd01 	bl	8000734 <__aeabi_fadd>
 8004d32:	1c03      	adds	r3, r0, #0
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	e001      	b.n	8004d3c <calc_pressure+0x2ac>
    }
    else
    {
        calc_pres = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8004d3c:	697b      	ldr	r3, [r7, #20]
}
 8004d3e:	1c18      	adds	r0, r3, #0
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b007      	add	sp, #28
 8004d44:	bd90      	pop	{r4, r7, pc}
 8004d46:	46c0      	nop			@ (mov r8, r8)
 8004d48:	477a0000 	.word	0x477a0000
 8004d4c:	45c35000 	.word	0x45c35000

08004d50 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8004d50:	b5b0      	push	{r4, r5, r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	0002      	movs	r2, r0
 8004d58:	6039      	str	r1, [r7, #0]
 8004d5a:	1dbb      	adds	r3, r7, #6
 8004d5c:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d62:	4967      	ldr	r1, [pc, #412]	@ (8004f00 <calc_humidity+0x1b0>)
 8004d64:	1c18      	adds	r0, r3, #0
 8004d66:	f7fb fed7 	bl	8000b18 <__aeabi_fdiv>
 8004d6a:	1c03      	adds	r3, r0, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8004d6e:	1dbb      	adds	r3, r7, #6
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	0018      	movs	r0, r3
 8004d74:	f7fc fccc 	bl	8001710 <__aeabi_ui2f>
 8004d78:	1c04      	adds	r4, r0, #0
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	8a1b      	ldrh	r3, [r3, #16]
 8004d7e:	0018      	movs	r0, r3
 8004d80:	f7fc fcc6 	bl	8001710 <__aeabi_ui2f>
 8004d84:	1c03      	adds	r3, r0, #0
 8004d86:	2183      	movs	r1, #131	@ 0x83
 8004d88:	05c9      	lsls	r1, r1, #23
 8004d8a:	1c18      	adds	r0, r3, #0
 8004d8c:	f7fc f892 	bl	8000eb4 <__aeabi_fmul>
 8004d90:	1c03      	adds	r3, r0, #0
 8004d92:	1c1d      	adds	r5, r3, #0
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	7d1b      	ldrb	r3, [r3, #20]
 8004d98:	b25b      	sxtb	r3, r3
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f7fc fc68 	bl	8001670 <__aeabi_i2f>
 8004da0:	1c03      	adds	r3, r0, #0
 8004da2:	2180      	movs	r1, #128	@ 0x80
 8004da4:	05c9      	lsls	r1, r1, #23
 8004da6:	1c18      	adds	r0, r3, #0
 8004da8:	f7fb feb6 	bl	8000b18 <__aeabi_fdiv>
 8004dac:	1c03      	adds	r3, r0, #0
 8004dae:	69b9      	ldr	r1, [r7, #24]
 8004db0:	1c18      	adds	r0, r3, #0
 8004db2:	f7fc f87f 	bl	8000eb4 <__aeabi_fmul>
 8004db6:	1c03      	adds	r3, r0, #0
 8004db8:	1c19      	adds	r1, r3, #0
 8004dba:	1c28      	adds	r0, r5, #0
 8004dbc:	f7fb fcba 	bl	8000734 <__aeabi_fadd>
 8004dc0:	1c03      	adds	r3, r0, #0
    var1 = (float)((float)hum_adc) -
 8004dc2:	1c19      	adds	r1, r3, #0
 8004dc4:	1c20      	adds	r0, r4, #0
 8004dc6:	f7fc f9cf 	bl	8001168 <__aeabi_fsub>
 8004dca:	1c03      	adds	r3, r0, #0
 8004dcc:	617b      	str	r3, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	8a5b      	ldrh	r3, [r3, #18]
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f7fc fc9c 	bl	8001710 <__aeabi_ui2f>
 8004dd8:	1c03      	adds	r3, r0, #0
 8004dda:	2191      	movs	r1, #145	@ 0x91
 8004ddc:	05c9      	lsls	r1, r1, #23
 8004dde:	1c18      	adds	r0, r3, #0
 8004de0:	f7fb fe9a 	bl	8000b18 <__aeabi_fdiv>
 8004de4:	1c03      	adds	r3, r0, #0
 8004de6:	1c1c      	adds	r4, r3, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	7d5b      	ldrb	r3, [r3, #21]
 8004dec:	b25b      	sxtb	r3, r3
 8004dee:	0018      	movs	r0, r3
 8004df0:	f7fc fc3e 	bl	8001670 <__aeabi_i2f>
 8004df4:	1c03      	adds	r3, r0, #0
 8004df6:	218d      	movs	r1, #141	@ 0x8d
 8004df8:	05c9      	lsls	r1, r1, #23
 8004dfa:	1c18      	adds	r0, r3, #0
 8004dfc:	f7fb fe8c 	bl	8000b18 <__aeabi_fdiv>
 8004e00:	1c03      	adds	r3, r0, #0
 8004e02:	69b9      	ldr	r1, [r7, #24]
 8004e04:	1c18      	adds	r0, r3, #0
 8004e06:	f7fc f855 	bl	8000eb4 <__aeabi_fmul>
 8004e0a:	1c03      	adds	r3, r0, #0
 8004e0c:	21fe      	movs	r1, #254	@ 0xfe
 8004e0e:	0589      	lsls	r1, r1, #22
 8004e10:	1c18      	adds	r0, r3, #0
 8004e12:	f7fb fc8f 	bl	8000734 <__aeabi_fadd>
 8004e16:	1c03      	adds	r3, r0, #0
 8004e18:	1c1d      	adds	r5, r3, #0
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	7d9b      	ldrb	r3, [r3, #22]
 8004e1e:	b25b      	sxtb	r3, r3
 8004e20:	0018      	movs	r0, r3
 8004e22:	f7fc fc25 	bl	8001670 <__aeabi_i2f>
 8004e26:	1c03      	adds	r3, r0, #0
 8004e28:	2193      	movs	r1, #147	@ 0x93
 8004e2a:	05c9      	lsls	r1, r1, #23
 8004e2c:	1c18      	adds	r0, r3, #0
 8004e2e:	f7fb fe73 	bl	8000b18 <__aeabi_fdiv>
 8004e32:	1c03      	adds	r3, r0, #0
 8004e34:	69b9      	ldr	r1, [r7, #24]
 8004e36:	1c18      	adds	r0, r3, #0
 8004e38:	f7fc f83c 	bl	8000eb4 <__aeabi_fmul>
 8004e3c:	1c03      	adds	r3, r0, #0
 8004e3e:	69b9      	ldr	r1, [r7, #24]
 8004e40:	1c18      	adds	r0, r3, #0
 8004e42:	f7fc f837 	bl	8000eb4 <__aeabi_fmul>
 8004e46:	1c03      	adds	r3, r0, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8004e48:	1c19      	adds	r1, r3, #0
 8004e4a:	1c28      	adds	r0, r5, #0
 8004e4c:	f7fb fc72 	bl	8000734 <__aeabi_fadd>
 8004e50:	1c03      	adds	r3, r0, #0
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8004e52:	1c19      	adds	r1, r3, #0
 8004e54:	1c20      	adds	r0, r4, #0
 8004e56:	f7fc f82d 	bl	8000eb4 <__aeabi_fmul>
 8004e5a:	1c03      	adds	r3, r0, #0
    var2 = var1 *
 8004e5c:	1c19      	adds	r1, r3, #0
 8004e5e:	6978      	ldr	r0, [r7, #20]
 8004e60:	f7fc f828 	bl	8000eb4 <__aeabi_fmul>
 8004e64:	1c03      	adds	r3, r0, #0
 8004e66:	613b      	str	r3, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	7ddb      	ldrb	r3, [r3, #23]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f7fc fc4f 	bl	8001710 <__aeabi_ui2f>
 8004e72:	1c03      	adds	r3, r0, #0
 8004e74:	218d      	movs	r1, #141	@ 0x8d
 8004e76:	05c9      	lsls	r1, r1, #23
 8004e78:	1c18      	adds	r0, r3, #0
 8004e7a:	f7fb fe4d 	bl	8000b18 <__aeabi_fdiv>
 8004e7e:	1c03      	adds	r3, r0, #0
 8004e80:	60fb      	str	r3, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	7e1b      	ldrb	r3, [r3, #24]
 8004e86:	b25b      	sxtb	r3, r3
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7fc fbf1 	bl	8001670 <__aeabi_i2f>
 8004e8e:	1c03      	adds	r3, r0, #0
 8004e90:	2194      	movs	r1, #148	@ 0x94
 8004e92:	05c9      	lsls	r1, r1, #23
 8004e94:	1c18      	adds	r0, r3, #0
 8004e96:	f7fb fe3f 	bl	8000b18 <__aeabi_fdiv>
 8004e9a:	1c03      	adds	r3, r0, #0
 8004e9c:	60bb      	str	r3, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8004e9e:	69b9      	ldr	r1, [r7, #24]
 8004ea0:	68b8      	ldr	r0, [r7, #8]
 8004ea2:	f7fc f807 	bl	8000eb4 <__aeabi_fmul>
 8004ea6:	1c03      	adds	r3, r0, #0
 8004ea8:	68f9      	ldr	r1, [r7, #12]
 8004eaa:	1c18      	adds	r0, r3, #0
 8004eac:	f7fb fc42 	bl	8000734 <__aeabi_fadd>
 8004eb0:	1c03      	adds	r3, r0, #0
 8004eb2:	6939      	ldr	r1, [r7, #16]
 8004eb4:	1c18      	adds	r0, r3, #0
 8004eb6:	f7fb fffd 	bl	8000eb4 <__aeabi_fmul>
 8004eba:	1c03      	adds	r3, r0, #0
 8004ebc:	6939      	ldr	r1, [r7, #16]
 8004ebe:	1c18      	adds	r0, r3, #0
 8004ec0:	f7fb fff8 	bl	8000eb4 <__aeabi_fmul>
 8004ec4:	1c03      	adds	r3, r0, #0
 8004ec6:	1c19      	adds	r1, r3, #0
 8004ec8:	6938      	ldr	r0, [r7, #16]
 8004eca:	f7fb fc33 	bl	8000734 <__aeabi_fadd>
 8004ece:	1c03      	adds	r3, r0, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
    if (calc_hum > 100.0f)
 8004ed2:	490c      	ldr	r1, [pc, #48]	@ (8004f04 <calc_humidity+0x1b4>)
 8004ed4:	69f8      	ldr	r0, [r7, #28]
 8004ed6:	f7fb fb15 	bl	8000504 <__aeabi_fcmpgt>
 8004eda:	1e03      	subs	r3, r0, #0
 8004edc:	d002      	beq.n	8004ee4 <calc_humidity+0x194>
    {
        calc_hum = 100.0f;
 8004ede:	4b09      	ldr	r3, [pc, #36]	@ (8004f04 <calc_humidity+0x1b4>)
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	e007      	b.n	8004ef4 <calc_humidity+0x1a4>
    }
    else if (calc_hum < 0.0f)
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	69f8      	ldr	r0, [r7, #28]
 8004ee8:	f7fb faf8 	bl	80004dc <__aeabi_fcmplt>
 8004eec:	1e03      	subs	r3, r0, #0
 8004eee:	d001      	beq.n	8004ef4 <calc_humidity+0x1a4>
    {
        calc_hum = 0.0f;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8004ef4:	69fb      	ldr	r3, [r7, #28]
}
 8004ef6:	1c18      	adds	r0, r3, #0
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b008      	add	sp, #32
 8004efc:	bdb0      	pop	{r4, r5, r7, pc}
 8004efe:	46c0      	nop			@ (mov r8, r8)
 8004f00:	45a00000 	.word	0x45a00000
 8004f04:	42c80000 	.word	0x42c80000

08004f08 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8004f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f0a:	b0a9      	sub	sp, #164	@ 0xa4
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	603a      	str	r2, [r7, #0]
 8004f10:	1dbb      	adds	r3, r7, #6
 8004f12:	1c02      	adds	r2, r0, #0
 8004f14:	801a      	strh	r2, [r3, #0]
 8004f16:	1d7b      	adds	r3, r7, #5
 8004f18:	1c0a      	adds	r2, r1, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8004f1c:	1dbb      	adds	r3, r7, #6
 8004f1e:	881b      	ldrh	r3, [r3, #0]
 8004f20:	0018      	movs	r0, r3
 8004f22:	f7fc fbf5 	bl	8001710 <__aeabi_ui2f>
 8004f26:	1c03      	adds	r3, r0, #0
 8004f28:	259c      	movs	r5, #156	@ 0x9c
 8004f2a:	197a      	adds	r2, r7, r5
 8004f2c:	6013      	str	r3, [r2, #0]
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8004f2e:	1d7b      	adds	r3, r7, #5
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2201      	movs	r2, #1
 8004f34:	409a      	lsls	r2, r3
 8004f36:	0013      	movs	r3, r2
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7fc fbe9 	bl	8001710 <__aeabi_ui2f>
 8004f3e:	1c03      	adds	r3, r0, #0
 8004f40:	2498      	movs	r4, #152	@ 0x98
 8004f42:	193a      	adds	r2, r7, r4
 8004f44:	6013      	str	r3, [r2, #0]
    const float lookup_k1_range[16] = {
 8004f46:	2648      	movs	r6, #72	@ 0x48
 8004f48:	19ba      	adds	r2, r7, r6
 8004f4a:	4b43      	ldr	r3, [pc, #268]	@ (8005058 <calc_gas_resistance_low+0x150>)
 8004f4c:	0010      	movs	r0, r2
 8004f4e:	0019      	movs	r1, r3
 8004f50:	2340      	movs	r3, #64	@ 0x40
 8004f52:	001a      	movs	r2, r3
 8004f54:	f006 fe01 	bl	800bb5a <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8004f58:	2308      	movs	r3, #8
 8004f5a:	18fa      	adds	r2, r7, r3
 8004f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800505c <calc_gas_resistance_low+0x154>)
 8004f5e:	0010      	movs	r0, r2
 8004f60:	0019      	movs	r1, r3
 8004f62:	2340      	movs	r3, #64	@ 0x40
 8004f64:	001a      	movs	r2, r3
 8004f66:	f006 fdf8 	bl	800bb5a <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	223e      	movs	r2, #62	@ 0x3e
 8004f6e:	569b      	ldrsb	r3, [r3, r2]
 8004f70:	0018      	movs	r0, r3
 8004f72:	f7fc fb7d 	bl	8001670 <__aeabi_i2f>
 8004f76:	1c03      	adds	r3, r0, #0
 8004f78:	4939      	ldr	r1, [pc, #228]	@ (8005060 <calc_gas_resistance_low+0x158>)
 8004f7a:	1c18      	adds	r0, r3, #0
 8004f7c:	f7fb ff9a 	bl	8000eb4 <__aeabi_fmul>
 8004f80:	1c03      	adds	r3, r0, #0
 8004f82:	4938      	ldr	r1, [pc, #224]	@ (8005064 <calc_gas_resistance_low+0x15c>)
 8004f84:	1c18      	adds	r0, r3, #0
 8004f86:	f7fb fbd5 	bl	8000734 <__aeabi_fadd>
 8004f8a:	1c03      	adds	r3, r0, #0
 8004f8c:	2294      	movs	r2, #148	@ 0x94
 8004f8e:	18b9      	adds	r1, r7, r2
 8004f90:	600b      	str	r3, [r1, #0]
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8004f92:	1d7b      	adds	r3, r7, #5
 8004f94:	781a      	ldrb	r2, [r3, #0]
 8004f96:	19bb      	adds	r3, r7, r6
 8004f98:	0092      	lsls	r2, r2, #2
 8004f9a:	58d3      	ldr	r3, [r2, r3]
 8004f9c:	4932      	ldr	r1, [pc, #200]	@ (8005068 <calc_gas_resistance_low+0x160>)
 8004f9e:	1c18      	adds	r0, r3, #0
 8004fa0:	f7fb fdba 	bl	8000b18 <__aeabi_fdiv>
 8004fa4:	1c03      	adds	r3, r0, #0
 8004fa6:	21fe      	movs	r1, #254	@ 0xfe
 8004fa8:	0589      	lsls	r1, r1, #22
 8004faa:	1c18      	adds	r0, r3, #0
 8004fac:	f7fb fbc2 	bl	8000734 <__aeabi_fadd>
 8004fb0:	1c03      	adds	r3, r0, #0
 8004fb2:	1c19      	adds	r1, r3, #0
 8004fb4:	2294      	movs	r2, #148	@ 0x94
 8004fb6:	18ba      	adds	r2, r7, r2
 8004fb8:	6810      	ldr	r0, [r2, #0]
 8004fba:	f7fb ff7b 	bl	8000eb4 <__aeabi_fmul>
 8004fbe:	1c03      	adds	r3, r0, #0
 8004fc0:	2690      	movs	r6, #144	@ 0x90
 8004fc2:	19ba      	adds	r2, r7, r6
 8004fc4:	6013      	str	r3, [r2, #0]
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8004fc6:	1d7b      	adds	r3, r7, #5
 8004fc8:	781a      	ldrb	r2, [r3, #0]
 8004fca:	2308      	movs	r3, #8
 8004fcc:	18fb      	adds	r3, r7, r3
 8004fce:	0092      	lsls	r2, r2, #2
 8004fd0:	58d3      	ldr	r3, [r2, r3]
 8004fd2:	4925      	ldr	r1, [pc, #148]	@ (8005068 <calc_gas_resistance_low+0x160>)
 8004fd4:	1c18      	adds	r0, r3, #0
 8004fd6:	f7fb fd9f 	bl	8000b18 <__aeabi_fdiv>
 8004fda:	1c03      	adds	r3, r0, #0
 8004fdc:	21fe      	movs	r1, #254	@ 0xfe
 8004fde:	0589      	lsls	r1, r1, #22
 8004fe0:	1c18      	adds	r0, r3, #0
 8004fe2:	f7fb fba7 	bl	8000734 <__aeabi_fadd>
 8004fe6:	1c03      	adds	r3, r0, #0
 8004fe8:	228c      	movs	r2, #140	@ 0x8c
 8004fea:	18b9      	adds	r1, r7, r2
 8004fec:	600b      	str	r3, [r1, #0]
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8004fee:	491f      	ldr	r1, [pc, #124]	@ (800506c <calc_gas_resistance_low+0x164>)
 8004ff0:	18bb      	adds	r3, r7, r2
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	f7fb ff5e 	bl	8000eb4 <__aeabi_fmul>
 8004ff8:	1c03      	adds	r3, r0, #0
 8004ffa:	193a      	adds	r2, r7, r4
 8004ffc:	6811      	ldr	r1, [r2, #0]
 8004ffe:	1c18      	adds	r0, r3, #0
 8005000:	f7fb ff58 	bl	8000eb4 <__aeabi_fmul>
 8005004:	1c03      	adds	r3, r0, #0
 8005006:	1c1c      	adds	r4, r3, #0
 8005008:	2188      	movs	r1, #136	@ 0x88
 800500a:	05c9      	lsls	r1, r1, #23
 800500c:	197b      	adds	r3, r7, r5
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	f7fc f8aa 	bl	8001168 <__aeabi_fsub>
 8005014:	1c03      	adds	r3, r0, #0
 8005016:	19ba      	adds	r2, r7, r6
 8005018:	6811      	ldr	r1, [r2, #0]
 800501a:	1c18      	adds	r0, r3, #0
 800501c:	f7fb fd7c 	bl	8000b18 <__aeabi_fdiv>
 8005020:	1c03      	adds	r3, r0, #0
 8005022:	21fe      	movs	r1, #254	@ 0xfe
 8005024:	0589      	lsls	r1, r1, #22
 8005026:	1c18      	adds	r0, r3, #0
 8005028:	f7fb fb84 	bl	8000734 <__aeabi_fadd>
 800502c:	1c03      	adds	r3, r0, #0
 800502e:	1c19      	adds	r1, r3, #0
 8005030:	1c20      	adds	r0, r4, #0
 8005032:	f7fb ff3f 	bl	8000eb4 <__aeabi_fmul>
 8005036:	1c03      	adds	r3, r0, #0
 8005038:	1c19      	adds	r1, r3, #0
 800503a:	20fe      	movs	r0, #254	@ 0xfe
 800503c:	0580      	lsls	r0, r0, #22
 800503e:	f7fb fd6b 	bl	8000b18 <__aeabi_fdiv>
 8005042:	1c03      	adds	r3, r0, #0
 8005044:	2288      	movs	r2, #136	@ 0x88
 8005046:	18b9      	adds	r1, r7, r2
 8005048:	600b      	str	r3, [r1, #0]

    return calc_gas_res;
 800504a:	18bb      	adds	r3, r7, r2
 800504c:	681b      	ldr	r3, [r3, #0]
}
 800504e:	1c18      	adds	r0, r3, #0
 8005050:	46bd      	mov	sp, r7
 8005052:	b029      	add	sp, #164	@ 0xa4
 8005054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005056:	46c0      	nop			@ (mov r8, r8)
 8005058:	0800e670 	.word	0x0800e670
 800505c:	0800e6b0 	.word	0x0800e6b0
 8005060:	40a00000 	.word	0x40a00000
 8005064:	44a78000 	.word	0x44a78000
 8005068:	42c80000 	.word	0x42c80000
 800506c:	340637bd 	.word	0x340637bd

08005070 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8005070:	b590      	push	{r4, r7, lr}
 8005072:	b087      	sub	sp, #28
 8005074:	af00      	add	r7, sp, #0
 8005076:	0002      	movs	r2, r0
 8005078:	1dbb      	adds	r3, r7, #6
 800507a:	801a      	strh	r2, [r3, #0]
 800507c:	1d7b      	adds	r3, r7, #5
 800507e:	1c0a      	adds	r2, r1, #0
 8005080:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8005082:	1d7b      	adds	r3, r7, #5
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2280      	movs	r2, #128	@ 0x80
 8005088:	02d2      	lsls	r2, r2, #11
 800508a:	40da      	lsrs	r2, r3
 800508c:	0013      	movs	r3, r2
 800508e:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8005090:	1dbb      	adds	r3, r7, #6
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	4a13      	ldr	r2, [pc, #76]	@ (80050e4 <calc_gas_resistance_high+0x74>)
 8005096:	4694      	mov	ip, r2
 8005098:	4463      	add	r3, ip
 800509a:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	0013      	movs	r3, r2
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	189b      	adds	r3, r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	2280      	movs	r2, #128	@ 0x80
 80050aa:	0152      	lsls	r2, r2, #5
 80050ac:	4694      	mov	ip, r2
 80050ae:	4463      	add	r3, ip
 80050b0:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 80050b2:	6978      	ldr	r0, [r7, #20]
 80050b4:	f7fc fb2c 	bl	8001710 <__aeabi_ui2f>
 80050b8:	1c03      	adds	r3, r0, #0
 80050ba:	490b      	ldr	r1, [pc, #44]	@ (80050e8 <calc_gas_resistance_high+0x78>)
 80050bc:	1c18      	adds	r0, r3, #0
 80050be:	f7fb fef9 	bl	8000eb4 <__aeabi_fmul>
 80050c2:	1c03      	adds	r3, r0, #0
 80050c4:	1c1c      	adds	r4, r3, #0
 80050c6:	6938      	ldr	r0, [r7, #16]
 80050c8:	f7fc fad2 	bl	8001670 <__aeabi_i2f>
 80050cc:	1c03      	adds	r3, r0, #0
 80050ce:	1c19      	adds	r1, r3, #0
 80050d0:	1c20      	adds	r0, r4, #0
 80050d2:	f7fb fd21 	bl	8000b18 <__aeabi_fdiv>
 80050d6:	1c03      	adds	r3, r0, #0
 80050d8:	60fb      	str	r3, [r7, #12]

    return calc_gas_res;
 80050da:	68fb      	ldr	r3, [r7, #12]
}
 80050dc:	1c18      	adds	r0, r3, #0
 80050de:	46bd      	mov	sp, r7
 80050e0:	b007      	add	sp, #28
 80050e2:	bd90      	pop	{r4, r7, pc}
 80050e4:	fffffe00 	.word	0xfffffe00
 80050e8:	49742400 	.word	0x49742400

080050ec <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 80050ec:	b5b0      	push	{r4, r5, r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	0002      	movs	r2, r0
 80050f4:	6039      	str	r1, [r7, #0]
 80050f6:	1dbb      	adds	r3, r7, #6
 80050f8:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 80050fa:	1dbb      	adds	r3, r7, #6
 80050fc:	881a      	ldrh	r2, [r3, #0]
 80050fe:	23c8      	movs	r3, #200	@ 0xc8
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	429a      	cmp	r2, r3
 8005104:	d903      	bls.n	800510e <calc_res_heat+0x22>
    {
        temp = 400;
 8005106:	1dbb      	adds	r3, r7, #6
 8005108:	22c8      	movs	r2, #200	@ 0xc8
 800510a:	0052      	lsls	r2, r2, #1
 800510c:	801a      	strh	r2, [r3, #0]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	7e5b      	ldrb	r3, [r3, #25]
 8005112:	b25b      	sxtb	r3, r3
 8005114:	0018      	movs	r0, r3
 8005116:	f7fc faab 	bl	8001670 <__aeabi_i2f>
 800511a:	1c03      	adds	r3, r0, #0
 800511c:	2183      	movs	r1, #131	@ 0x83
 800511e:	05c9      	lsls	r1, r1, #23
 8005120:	1c18      	adds	r0, r3, #0
 8005122:	f7fb fcf9 	bl	8000b18 <__aeabi_fdiv>
 8005126:	1c03      	adds	r3, r0, #0
 8005128:	4950      	ldr	r1, [pc, #320]	@ (800526c <calc_res_heat+0x180>)
 800512a:	1c18      	adds	r0, r3, #0
 800512c:	f7fb fb02 	bl	8000734 <__aeabi_fadd>
 8005130:	1c03      	adds	r3, r0, #0
 8005132:	61fb      	str	r3, [r7, #28]
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	221a      	movs	r2, #26
 8005138:	5e9b      	ldrsh	r3, [r3, r2]
 800513a:	0018      	movs	r0, r3
 800513c:	f7fc fa98 	bl	8001670 <__aeabi_i2f>
 8005140:	1c03      	adds	r3, r0, #0
 8005142:	218e      	movs	r1, #142	@ 0x8e
 8005144:	05c9      	lsls	r1, r1, #23
 8005146:	1c18      	adds	r0, r3, #0
 8005148:	f7fb fce6 	bl	8000b18 <__aeabi_fdiv>
 800514c:	1c03      	adds	r3, r0, #0
 800514e:	4948      	ldr	r1, [pc, #288]	@ (8005270 <calc_res_heat+0x184>)
 8005150:	1c18      	adds	r0, r3, #0
 8005152:	f7fb feaf 	bl	8000eb4 <__aeabi_fmul>
 8005156:	1c03      	adds	r3, r0, #0
 8005158:	4946      	ldr	r1, [pc, #280]	@ (8005274 <calc_res_heat+0x188>)
 800515a:	1c18      	adds	r0, r3, #0
 800515c:	f7fb faea 	bl	8000734 <__aeabi_fadd>
 8005160:	1c03      	adds	r3, r0, #0
 8005162:	61bb      	str	r3, [r7, #24]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	7f1b      	ldrb	r3, [r3, #28]
 8005168:	b25b      	sxtb	r3, r3
 800516a:	0018      	movs	r0, r3
 800516c:	f7fc fa80 	bl	8001670 <__aeabi_i2f>
 8005170:	1c03      	adds	r3, r0, #0
 8005172:	2189      	movs	r1, #137	@ 0x89
 8005174:	05c9      	lsls	r1, r1, #23
 8005176:	1c18      	adds	r0, r3, #0
 8005178:	f7fb fcce 	bl	8000b18 <__aeabi_fdiv>
 800517c:	1c03      	adds	r3, r0, #0
 800517e:	617b      	str	r3, [r7, #20]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8005180:	1dbb      	adds	r3, r7, #6
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	0018      	movs	r0, r3
 8005186:	f7fc fac3 	bl	8001710 <__aeabi_ui2f>
 800518a:	1c03      	adds	r3, r0, #0
 800518c:	69b9      	ldr	r1, [r7, #24]
 800518e:	1c18      	adds	r0, r3, #0
 8005190:	f7fb fe90 	bl	8000eb4 <__aeabi_fmul>
 8005194:	1c03      	adds	r3, r0, #0
 8005196:	21fe      	movs	r1, #254	@ 0xfe
 8005198:	0589      	lsls	r1, r1, #22
 800519a:	1c18      	adds	r0, r3, #0
 800519c:	f7fb faca 	bl	8000734 <__aeabi_fadd>
 80051a0:	1c03      	adds	r3, r0, #0
 80051a2:	1c19      	adds	r1, r3, #0
 80051a4:	69f8      	ldr	r0, [r7, #28]
 80051a6:	f7fb fe85 	bl	8000eb4 <__aeabi_fmul>
 80051aa:	1c03      	adds	r3, r0, #0
 80051ac:	613b      	str	r3, [r7, #16]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	7b9b      	ldrb	r3, [r3, #14]
 80051b2:	b25b      	sxtb	r3, r3
 80051b4:	0018      	movs	r0, r3
 80051b6:	f7fc fa5b 	bl	8001670 <__aeabi_i2f>
 80051ba:	1c03      	adds	r3, r0, #0
 80051bc:	6979      	ldr	r1, [r7, #20]
 80051be:	1c18      	adds	r0, r3, #0
 80051c0:	f7fb fe78 	bl	8000eb4 <__aeabi_fmul>
 80051c4:	1c03      	adds	r3, r0, #0
 80051c6:	1c19      	adds	r1, r3, #0
 80051c8:	6938      	ldr	r0, [r7, #16]
 80051ca:	f7fb fab3 	bl	8000734 <__aeabi_fadd>
 80051ce:	1c03      	adds	r3, r0, #0
 80051d0:	60fb      	str	r3, [r7, #12]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	223c      	movs	r2, #60	@ 0x3c
 80051d6:	5c9b      	ldrb	r3, [r3, r2]
 80051d8:	0018      	movs	r0, r3
 80051da:	f7fc fa99 	bl	8001710 <__aeabi_ui2f>
 80051de:	1c03      	adds	r3, r0, #0
 80051e0:	2181      	movs	r1, #129	@ 0x81
 80051e2:	05c9      	lsls	r1, r1, #23
 80051e4:	1c18      	adds	r0, r3, #0
 80051e6:	f7fb faa5 	bl	8000734 <__aeabi_fadd>
 80051ea:	1c03      	adds	r3, r0, #0
 80051ec:	1c19      	adds	r1, r3, #0
 80051ee:	2081      	movs	r0, #129	@ 0x81
 80051f0:	05c0      	lsls	r0, r0, #23
 80051f2:	f7fb fc91 	bl	8000b18 <__aeabi_fdiv>
 80051f6:	1c03      	adds	r3, r0, #0
 80051f8:	68f9      	ldr	r1, [r7, #12]
 80051fa:	1c18      	adds	r0, r3, #0
 80051fc:	f7fb fe5a 	bl	8000eb4 <__aeabi_fmul>
 8005200:	1c03      	adds	r3, r0, #0
 8005202:	1c1c      	adds	r4, r3, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	223d      	movs	r2, #61	@ 0x3d
 8005208:	569b      	ldrsb	r3, [r3, r2]
 800520a:	0018      	movs	r0, r3
 800520c:	f7fc fa30 	bl	8001670 <__aeabi_i2f>
 8005210:	1c03      	adds	r3, r0, #0
 8005212:	4919      	ldr	r1, [pc, #100]	@ (8005278 <calc_res_heat+0x18c>)
 8005214:	1c18      	adds	r0, r3, #0
 8005216:	f7fb fe4d 	bl	8000eb4 <__aeabi_fmul>
 800521a:	1c03      	adds	r3, r0, #0
 800521c:	21fe      	movs	r1, #254	@ 0xfe
 800521e:	0589      	lsls	r1, r1, #22
 8005220:	1c18      	adds	r0, r3, #0
 8005222:	f7fb fa87 	bl	8000734 <__aeabi_fadd>
 8005226:	1c03      	adds	r3, r0, #0
 8005228:	1c19      	adds	r1, r3, #0
 800522a:	20fe      	movs	r0, #254	@ 0xfe
 800522c:	0580      	lsls	r0, r0, #22
 800522e:	f7fb fc73 	bl	8000b18 <__aeabi_fdiv>
 8005232:	1c03      	adds	r3, r0, #0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8005234:	1c19      	adds	r1, r3, #0
 8005236:	1c20      	adds	r0, r4, #0
 8005238:	f7fb fe3c 	bl	8000eb4 <__aeabi_fmul>
 800523c:	1c03      	adds	r3, r0, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 800523e:	490f      	ldr	r1, [pc, #60]	@ (800527c <calc_res_heat+0x190>)
 8005240:	1c18      	adds	r0, r3, #0
 8005242:	f7fb ff91 	bl	8001168 <__aeabi_fsub>
 8005246:	1c03      	adds	r3, r0, #0
        (uint8_t)(3.4f *
 8005248:	490d      	ldr	r1, [pc, #52]	@ (8005280 <calc_res_heat+0x194>)
 800524a:	1c18      	adds	r0, r3, #0
 800524c:	f7fb fe32 	bl	8000eb4 <__aeabi_fmul>
 8005250:	1c03      	adds	r3, r0, #0
    res_heat =
 8005252:	250b      	movs	r5, #11
 8005254:	197c      	adds	r4, r7, r5
 8005256:	1c18      	adds	r0, r3, #0
 8005258:	f7fb f988 	bl	800056c <__aeabi_f2uiz>
 800525c:	0003      	movs	r3, r0
 800525e:	7023      	strb	r3, [r4, #0]
                   25));

    return res_heat;
 8005260:	197b      	adds	r3, r7, r5
 8005262:	781b      	ldrb	r3, [r3, #0]
}
 8005264:	0018      	movs	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	b008      	add	sp, #32
 800526a:	bdb0      	pop	{r4, r5, r7, pc}
 800526c:	42440000 	.word	0x42440000
 8005270:	3a03126f 	.word	0x3a03126f
 8005274:	3b1a0275 	.word	0x3b1a0275
 8005278:	3b03126f 	.word	0x3b03126f
 800527c:	41c80000 	.word	0x41c80000
 8005280:	4059999a 	.word	0x4059999a

08005284 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	0002      	movs	r2, r0
 800528c:	1dbb      	adds	r3, r7, #6
 800528e:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 8005290:	230f      	movs	r3, #15
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	2200      	movs	r2, #0
 8005296:	701a      	strb	r2, [r3, #0]
    uint8_t durval;

    if (dur >= 0xfc0)
 8005298:	1dbb      	adds	r3, r7, #6
 800529a:	881a      	ldrh	r2, [r3, #0]
 800529c:	23fc      	movs	r3, #252	@ 0xfc
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d30f      	bcc.n	80052c4 <calc_gas_wait+0x40>
    {
        durval = 0xff; /* Max duration*/
 80052a4:	230e      	movs	r3, #14
 80052a6:	18fb      	adds	r3, r7, r3
 80052a8:	22ff      	movs	r2, #255	@ 0xff
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	e01a      	b.n	80052e4 <calc_gas_wait+0x60>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 80052ae:	1dbb      	adds	r3, r7, #6
 80052b0:	1dba      	adds	r2, r7, #6
 80052b2:	8812      	ldrh	r2, [r2, #0]
 80052b4:	0892      	lsrs	r2, r2, #2
 80052b6:	801a      	strh	r2, [r3, #0]
            factor += 1;
 80052b8:	220f      	movs	r2, #15
 80052ba:	18bb      	adds	r3, r7, r2
 80052bc:	18ba      	adds	r2, r7, r2
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	3201      	adds	r2, #1
 80052c2:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 80052c4:	1dbb      	adds	r3, r7, #6
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80052ca:	d8f0      	bhi.n	80052ae <calc_gas_wait+0x2a>
        }

        durval = (uint8_t)(dur + (factor * 64));
 80052cc:	1dbb      	adds	r3, r7, #6
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b2d9      	uxtb	r1, r3
 80052d2:	230f      	movs	r3, #15
 80052d4:	18fb      	adds	r3, r7, r3
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	019b      	lsls	r3, r3, #6
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	230e      	movs	r3, #14
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	188a      	adds	r2, r1, r2
 80052e2:	701a      	strb	r2, [r3, #0]
    }

    return durval;
 80052e4:	230e      	movs	r3, #14
 80052e6:	18fb      	adds	r3, r7, r3
 80052e8:	781b      	ldrb	r3, [r3, #0]
}
 80052ea:	0018      	movs	r0, r3
 80052ec:	46bd      	mov	sp, r7
 80052ee:	b004      	add	sp, #16
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 80052f4:	b5b0      	push	{r4, r5, r7, lr}
 80052f6:	b08e      	sub	sp, #56	@ 0x38
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	230f      	movs	r3, #15
 8005300:	18fb      	adds	r3, r7, r3
 8005302:	1c02      	adds	r2, r0, #0
 8005304:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 8005306:	2337      	movs	r3, #55	@ 0x37
 8005308:	18fb      	adds	r3, r7, r3
 800530a:	2200      	movs	r2, #0
 800530c:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 800530e:	2310      	movs	r3, #16
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	0018      	movs	r0, r3
 8005314:	2311      	movs	r3, #17
 8005316:	001a      	movs	r2, r3
 8005318:	2100      	movs	r1, #0
 800531a:	f006 fb17 	bl	800b94c <memset>
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 800531e:	2336      	movs	r3, #54	@ 0x36
 8005320:	18fb      	adds	r3, r7, r3
 8005322:	2205      	movs	r2, #5
 8005324:	701a      	strb	r2, [r3, #0]

    while ((tries) && (rslt == BME68X_OK))
 8005326:	e14e      	b.n	80055c6 <read_field_data+0x2d2>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8005328:	230f      	movs	r3, #15
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	1c1a      	adds	r2, r3, #0
 8005330:	0112      	lsls	r2, r2, #4
 8005332:	18d3      	adds	r3, r2, r3
 8005334:	b2db      	uxtb	r3, r3
 8005336:	331d      	adds	r3, #29
 8005338:	b2d8      	uxtb	r0, r3
 800533a:	2537      	movs	r5, #55	@ 0x37
 800533c:	197c      	adds	r4, r7, r5
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2210      	movs	r2, #16
 8005342:	18b9      	adds	r1, r7, r2
 8005344:	2211      	movs	r2, #17
 8005346:	f7fe fdef 	bl	8003f28 <bme68x_get_regs>
 800534a:	0003      	movs	r3, r0
 800534c:	7023      	strb	r3, [r4, #0]
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d103      	bne.n	800535c <read_field_data+0x68>
        {
            rslt = BME68X_E_NULL_PTR;
 8005354:	197b      	adds	r3, r7, r5
 8005356:	22ff      	movs	r2, #255	@ 0xff
 8005358:	701a      	strb	r2, [r3, #0]
            break;
 800535a:	e140      	b.n	80055de <read_field_data+0x2ea>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 800535c:	2010      	movs	r0, #16
 800535e:	183b      	adds	r3, r7, r0
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	227f      	movs	r2, #127	@ 0x7f
 8005364:	4393      	bics	r3, r2
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 800536c:	183b      	adds	r3, r7, r0
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	220f      	movs	r2, #15
 8005372:	4013      	ands	r3, r2
 8005374:	b2da      	uxtb	r2, r3
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 800537a:	183b      	adds	r3, r7, r0
 800537c:	785a      	ldrb	r2, [r3, #1]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8005382:	183b      	adds	r3, r7, r0
 8005384:	789b      	ldrb	r3, [r3, #2]
 8005386:	031a      	lsls	r2, r3, #12
 8005388:	183b      	adds	r3, r7, r0
 800538a:	78db      	ldrb	r3, [r3, #3]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	4313      	orrs	r3, r2
 8005390:	183a      	adds	r2, r7, r0
 8005392:	7912      	ldrb	r2, [r2, #4]
 8005394:	0912      	lsrs	r2, r2, #4
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	4313      	orrs	r3, r2
 800539a:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 800539c:	183b      	adds	r3, r7, r0
 800539e:	795b      	ldrb	r3, [r3, #5]
 80053a0:	031a      	lsls	r2, r3, #12
 80053a2:	183b      	adds	r3, r7, r0
 80053a4:	799b      	ldrb	r3, [r3, #6]
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	4313      	orrs	r3, r2
 80053aa:	183a      	adds	r2, r7, r0
 80053ac:	79d2      	ldrb	r2, [r2, #7]
 80053ae:	0912      	lsrs	r2, r2, #4
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	4313      	orrs	r3, r2
 80053b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 80053b6:	183b      	adds	r3, r7, r0
 80053b8:	7a1b      	ldrb	r3, [r3, #8]
 80053ba:	021b      	lsls	r3, r3, #8
 80053bc:	b29a      	uxth	r2, r3
 80053be:	183b      	adds	r3, r7, r0
 80053c0:	7a5b      	ldrb	r3, [r3, #9]
 80053c2:	0019      	movs	r1, r3
 80053c4:	232a      	movs	r3, #42	@ 0x2a
 80053c6:	18fb      	adds	r3, r7, r3
 80053c8:	430a      	orrs	r2, r1
 80053ca:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 80053cc:	183b      	adds	r3, r7, r0
 80053ce:	7b5b      	ldrb	r3, [r3, #13]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	183b      	adds	r3, r7, r0
 80053d6:	7b9b      	ldrb	r3, [r3, #14]
 80053d8:	099b      	lsrs	r3, r3, #6
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	0019      	movs	r1, r3
 80053de:	2328      	movs	r3, #40	@ 0x28
 80053e0:	18fb      	adds	r3, r7, r3
 80053e2:	430a      	orrs	r2, r1
 80053e4:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 80053e6:	183b      	adds	r3, r7, r0
 80053e8:	7bdb      	ldrb	r3, [r3, #15]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	183b      	adds	r3, r7, r0
 80053f0:	7c1b      	ldrb	r3, [r3, #16]
 80053f2:	099b      	lsrs	r3, r3, #6
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	0019      	movs	r1, r3
 80053f8:	2326      	movs	r3, #38	@ 0x26
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	430a      	orrs	r2, r1
 80053fe:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8005400:	183b      	adds	r3, r7, r0
 8005402:	7b9a      	ldrb	r2, [r3, #14]
 8005404:	2325      	movs	r3, #37	@ 0x25
 8005406:	18fb      	adds	r3, r7, r3
 8005408:	210f      	movs	r1, #15
 800540a:	400a      	ands	r2, r1
 800540c:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 800540e:	183b      	adds	r3, r7, r0
 8005410:	7c1a      	ldrb	r2, [r3, #16]
 8005412:	2324      	movs	r3, #36	@ 0x24
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	210f      	movs	r1, #15
 8005418:	400a      	ands	r2, r1
 800541a:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d11c      	bne.n	800545e <read_field_data+0x16a>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	b25a      	sxtb	r2, r3
 800542a:	183b      	adds	r3, r7, r0
 800542c:	7c1b      	ldrb	r3, [r3, #16]
 800542e:	b25b      	sxtb	r3, r3
 8005430:	2120      	movs	r1, #32
 8005432:	400b      	ands	r3, r1
 8005434:	b25b      	sxtb	r3, r3
 8005436:	4313      	orrs	r3, r2
 8005438:	b25b      	sxtb	r3, r3
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	b25a      	sxtb	r2, r3
 8005446:	183b      	adds	r3, r7, r0
 8005448:	7c1b      	ldrb	r3, [r3, #16]
 800544a:	b25b      	sxtb	r3, r3
 800544c:	2110      	movs	r1, #16
 800544e:	400b      	ands	r3, r1
 8005450:	b25b      	sxtb	r3, r3
 8005452:	4313      	orrs	r3, r2
 8005454:	b25b      	sxtb	r3, r3
 8005456:	b2da      	uxtb	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	701a      	strb	r2, [r3, #0]
 800545c:	e01c      	b.n	8005498 <read_field_data+0x1a4>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	b25a      	sxtb	r2, r3
 8005464:	2010      	movs	r0, #16
 8005466:	183b      	adds	r3, r7, r0
 8005468:	7b9b      	ldrb	r3, [r3, #14]
 800546a:	b25b      	sxtb	r3, r3
 800546c:	2120      	movs	r1, #32
 800546e:	400b      	ands	r3, r1
 8005470:	b25b      	sxtb	r3, r3
 8005472:	4313      	orrs	r3, r2
 8005474:	b25b      	sxtb	r3, r3
 8005476:	b2da      	uxtb	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	b25a      	sxtb	r2, r3
 8005482:	183b      	adds	r3, r7, r0
 8005484:	7b9b      	ldrb	r3, [r3, #14]
 8005486:	b25b      	sxtb	r3, r3
 8005488:	2110      	movs	r1, #16
 800548a:	400b      	ands	r3, r1
 800548c:	b25b      	sxtb	r3, r3
 800548e:	4313      	orrs	r3, r2
 8005490:	b25b      	sxtb	r3, r3
 8005492:	b2da      	uxtb	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	b25b      	sxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	db00      	blt.n	80054a4 <read_field_data+0x1b0>
 80054a2:	e07d      	b.n	80055a0 <read_field_data+0x2ac>
 80054a4:	2237      	movs	r2, #55	@ 0x37
 80054a6:	18bb      	adds	r3, r7, r2
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	b25b      	sxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d000      	beq.n	80054b2 <read_field_data+0x1be>
 80054b0:	e076      	b.n	80055a0 <read_field_data+0x2ac>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	785b      	ldrb	r3, [r3, #1]
 80054b6:	335a      	adds	r3, #90	@ 0x5a
 80054b8:	b2d8      	uxtb	r0, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	1cd9      	adds	r1, r3, #3
 80054be:	0015      	movs	r5, r2
 80054c0:	18bc      	adds	r4, r7, r2
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f7fe fd2f 	bl	8003f28 <bme68x_get_regs>
 80054ca:	0003      	movs	r3, r0
 80054cc:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 80054ce:	002a      	movs	r2, r5
 80054d0:	18bb      	adds	r3, r7, r2
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b25b      	sxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10c      	bne.n	80054f4 <read_field_data+0x200>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	785b      	ldrb	r3, [r3, #1]
 80054de:	3350      	adds	r3, #80	@ 0x50
 80054e0:	b2d8      	uxtb	r0, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	1d19      	adds	r1, r3, #4
 80054e6:	18bc      	adds	r4, r7, r2
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f7fe fd1c 	bl	8003f28 <bme68x_get_regs>
 80054f0:	0003      	movs	r3, r0
 80054f2:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 80054f4:	2237      	movs	r2, #55	@ 0x37
 80054f6:	18bb      	adds	r3, r7, r2
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10c      	bne.n	800551a <read_field_data+0x226>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	3364      	adds	r3, #100	@ 0x64
 8005506:	b2d8      	uxtb	r0, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	1d59      	adds	r1, r3, #5
 800550c:	18bc      	adds	r4, r7, r2
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f7fe fd09 	bl	8003f28 <bme68x_get_regs>
 8005516:	0003      	movs	r3, r0
 8005518:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 800551a:	2337      	movs	r3, #55	@ 0x37
 800551c:	18fb      	adds	r3, r7, r3
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	b25b      	sxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d13c      	bne.n	80055a0 <read_field_data+0x2ac>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552a:	0011      	movs	r1, r2
 800552c:	0018      	movs	r0, r3
 800552e:	f7ff fa17 	bl	8004960 <calc_temperature>
 8005532:	1c02      	adds	r2, r0, #0
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	609a      	str	r2, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	0011      	movs	r1, r2
 800553e:	0018      	movs	r0, r3
 8005540:	f7ff faa6 	bl	8004a90 <calc_pressure>
 8005544:	1c02      	adds	r2, r0, #0
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	60da      	str	r2, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	232a      	movs	r3, #42	@ 0x2a
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	0011      	movs	r1, r2
 8005554:	0018      	movs	r0, r3
 8005556:	f7ff fbfb 	bl	8004d50 <calc_humidity>
 800555a:	1c02      	adds	r2, r0, #0
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	611a      	str	r2, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d10d      	bne.n	8005584 <read_field_data+0x290>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8005568:	2324      	movs	r3, #36	@ 0x24
 800556a:	18fb      	adds	r3, r7, r3
 800556c:	781a      	ldrb	r2, [r3, #0]
 800556e:	2326      	movs	r3, #38	@ 0x26
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	0011      	movs	r1, r2
 8005576:	0018      	movs	r0, r3
 8005578:	f7ff fd7a 	bl	8005070 <calc_gas_resistance_high>
 800557c:	1c02      	adds	r2, r0, #0
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	615a      	str	r2, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8005582:	e02c      	b.n	80055de <read_field_data+0x2ea>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	2325      	movs	r3, #37	@ 0x25
 8005588:	18fb      	adds	r3, r7, r3
 800558a:	7819      	ldrb	r1, [r3, #0]
 800558c:	2328      	movs	r3, #40	@ 0x28
 800558e:	18fb      	adds	r3, r7, r3
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	0018      	movs	r0, r3
 8005594:	f7ff fcb8 	bl	8004f08 <calc_gas_resistance_low>
 8005598:	1c02      	adds	r2, r0, #0
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	615a      	str	r2, [r3, #20]
                break;
 800559e:	e01e      	b.n	80055de <read_field_data+0x2ea>
            }
        }

        if (rslt == BME68X_OK)
 80055a0:	2337      	movs	r3, #55	@ 0x37
 80055a2:	18fb      	adds	r3, r7, r3
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	b25b      	sxtb	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <read_field_data+0x2c6>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	480e      	ldr	r0, [pc, #56]	@ (80055f0 <read_field_data+0x2fc>)
 80055b6:	0019      	movs	r1, r3
 80055b8:	4790      	blx	r2
        }

        tries--;
 80055ba:	2136      	movs	r1, #54	@ 0x36
 80055bc:	187b      	adds	r3, r7, r1
 80055be:	781a      	ldrb	r2, [r3, #0]
 80055c0:	187b      	adds	r3, r7, r1
 80055c2:	3a01      	subs	r2, #1
 80055c4:	701a      	strb	r2, [r3, #0]
    while ((tries) && (rslt == BME68X_OK))
 80055c6:	2336      	movs	r3, #54	@ 0x36
 80055c8:	18fb      	adds	r3, r7, r3
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d006      	beq.n	80055de <read_field_data+0x2ea>
 80055d0:	2337      	movs	r3, #55	@ 0x37
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	b25b      	sxtb	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d100      	bne.n	80055de <read_field_data+0x2ea>
 80055dc:	e6a4      	b.n	8005328 <read_field_data+0x34>
    }

    return rslt;
 80055de:	2337      	movs	r3, #55	@ 0x37
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	b25b      	sxtb	r3, r3
}
 80055e6:	0018      	movs	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b00e      	add	sp, #56	@ 0x38
 80055ec:	bdb0      	pop	{r4, r5, r7, pc}
 80055ee:	46c0      	nop			@ (mov r8, r8)
 80055f0:	00002710 	.word	0x00002710

080055f4 <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 80055f4:	b5b0      	push	{r4, r5, r7, lr}
 80055f6:	b09c      	sub	sp, #112	@ 0x70
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 80055fe:	246f      	movs	r4, #111	@ 0x6f
 8005600:	193b      	adds	r3, r7, r4
 8005602:	2200      	movs	r2, #0
 8005604:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8005606:	2328      	movs	r3, #40	@ 0x28
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	0018      	movs	r0, r3
 800560c:	2333      	movs	r3, #51	@ 0x33
 800560e:	001a      	movs	r2, r3
 8005610:	2100      	movs	r1, #0
 8005612:	f006 f99b 	bl	800b94c <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8005616:	2308      	movs	r3, #8
 8005618:	18fb      	adds	r3, r7, r3
 800561a:	0018      	movs	r0, r3
 800561c:	231e      	movs	r3, #30
 800561e:	001a      	movs	r2, r3
 8005620:	2100      	movs	r1, #0
 8005622:	f006 f993 	bl	800b94c <memset>
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10c      	bne.n	8005648 <read_all_field_data+0x54>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3304      	adds	r3, #4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d107      	bne.n	8005648 <read_all_field_data+0x54>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3308      	adds	r3, #8
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d102      	bne.n	8005648 <read_all_field_data+0x54>
    {
        rslt = BME68X_E_NULL_PTR;
 8005642:	193b      	adds	r3, r7, r4
 8005644:	22ff      	movs	r2, #255	@ 0xff
 8005646:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BME68X_OK)
 8005648:	226f      	movs	r2, #111	@ 0x6f
 800564a:	18bb      	adds	r3, r7, r2
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	b25b      	sxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <read_all_field_data+0x74>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8005654:	18bc      	adds	r4, r7, r2
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2228      	movs	r2, #40	@ 0x28
 800565a:	18b9      	adds	r1, r7, r2
 800565c:	2233      	movs	r2, #51	@ 0x33
 800565e:	201d      	movs	r0, #29
 8005660:	f7fe fc62 	bl	8003f28 <bme68x_get_regs>
 8005664:	0003      	movs	r3, r0
 8005666:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8005668:	226f      	movs	r2, #111	@ 0x6f
 800566a:	18bb      	adds	r3, r7, r2
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	b25b      	sxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d109      	bne.n	8005688 <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8005674:	18bc      	adds	r4, r7, r2
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2208      	movs	r2, #8
 800567a:	18b9      	adds	r1, r7, r2
 800567c:	221e      	movs	r2, #30
 800567e:	2050      	movs	r0, #80	@ 0x50
 8005680:	f7fe fc52 	bl	8003f28 <bme68x_get_regs>
 8005684:	0003      	movs	r3, r0
 8005686:	7023      	strb	r3, [r4, #0]
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8005688:	236e      	movs	r3, #110	@ 0x6e
 800568a:	18fb      	adds	r3, r7, r3
 800568c:	2200      	movs	r2, #0
 800568e:	701a      	strb	r2, [r3, #0]
 8005690:	e1af      	b.n	80059f2 <read_all_field_data+0x3fe>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 8005692:	206d      	movs	r0, #109	@ 0x6d
 8005694:	183a      	adds	r2, r7, r0
 8005696:	256e      	movs	r5, #110	@ 0x6e
 8005698:	197b      	adds	r3, r7, r5
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	1c19      	adds	r1, r3, #0
 800569e:	0109      	lsls	r1, r1, #4
 80056a0:	18cb      	adds	r3, r1, r3
 80056a2:	7013      	strb	r3, [r2, #0]
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 80056a4:	183b      	adds	r3, r7, r0
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2428      	movs	r4, #40	@ 0x28
 80056aa:	193a      	adds	r2, r7, r4
 80056ac:	5cd2      	ldrb	r2, [r2, r3]
 80056ae:	197b      	adds	r3, r7, r5
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	18cb      	adds	r3, r1, r3
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	217f      	movs	r1, #127	@ 0x7f
 80056bc:	438a      	bics	r2, r1
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 80056c2:	183b      	adds	r3, r7, r0
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	193a      	adds	r2, r7, r4
 80056c8:	5cd2      	ldrb	r2, [r2, r3]
 80056ca:	197b      	adds	r3, r7, r5
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	18cb      	adds	r3, r1, r3
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	210f      	movs	r1, #15
 80056d8:	400a      	ands	r2, r1
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 80056de:	183b      	adds	r3, r7, r0
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	197b      	adds	r3, r7, r5
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	18cb      	adds	r3, r1, r3
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	1939      	adds	r1, r7, r4
 80056f2:	5c8a      	ldrb	r2, [r1, r2]
 80056f4:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 80056f6:	183b      	adds	r3, r7, r0
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	3302      	adds	r3, #2
 80056fc:	193a      	adds	r2, r7, r4
 80056fe:	5cd3      	ldrb	r3, [r2, r3]
 8005700:	031a      	lsls	r2, r3, #12
 8005702:	183b      	adds	r3, r7, r0
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	3303      	adds	r3, #3
 8005708:	1939      	adds	r1, r7, r4
 800570a:	5ccb      	ldrb	r3, [r1, r3]
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8005710:	183a      	adds	r2, r7, r0
 8005712:	7812      	ldrb	r2, [r2, #0]
 8005714:	3204      	adds	r2, #4
 8005716:	1939      	adds	r1, r7, r4
 8005718:	5c8a      	ldrb	r2, [r1, r2]
 800571a:	0912      	lsrs	r2, r2, #4
 800571c:	b2d2      	uxtb	r2, r2
        adc_pres =
 800571e:	4313      	orrs	r3, r2
 8005720:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8005722:	183b      	adds	r3, r7, r0
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	3305      	adds	r3, #5
 8005728:	193a      	adds	r2, r7, r4
 800572a:	5cd3      	ldrb	r3, [r2, r3]
 800572c:	031a      	lsls	r2, r3, #12
 800572e:	183b      	adds	r3, r7, r0
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	3306      	adds	r3, #6
 8005734:	1939      	adds	r1, r7, r4
 8005736:	5ccb      	ldrb	r3, [r1, r3]
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 800573c:	183a      	adds	r2, r7, r0
 800573e:	7812      	ldrb	r2, [r2, #0]
 8005740:	3207      	adds	r2, #7
 8005742:	1939      	adds	r1, r7, r4
 8005744:	5c8a      	ldrb	r2, [r1, r2]
 8005746:	0912      	lsrs	r2, r2, #4
 8005748:	b2d2      	uxtb	r2, r2
        adc_temp =
 800574a:	4313      	orrs	r3, r2
 800574c:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 800574e:	183b      	adds	r3, r7, r0
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	3308      	adds	r3, #8
 8005754:	193a      	adds	r2, r7, r4
 8005756:	5cd3      	ldrb	r3, [r2, r3]
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	b29a      	uxth	r2, r3
 800575c:	183b      	adds	r3, r7, r0
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	3309      	adds	r3, #9
 8005762:	1939      	adds	r1, r7, r4
 8005764:	5ccb      	ldrb	r3, [r1, r3]
 8005766:	0019      	movs	r1, r3
 8005768:	2362      	movs	r3, #98	@ 0x62
 800576a:	18fb      	adds	r3, r7, r3
 800576c:	430a      	orrs	r2, r1
 800576e:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8005770:	183b      	adds	r3, r7, r0
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	330d      	adds	r3, #13
 8005776:	193a      	adds	r2, r7, r4
 8005778:	5cd3      	ldrb	r3, [r2, r3]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	b29a      	uxth	r2, r3
 800577e:	183b      	adds	r3, r7, r0
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	330e      	adds	r3, #14
 8005784:	1939      	adds	r1, r7, r4
 8005786:	5ccb      	ldrb	r3, [r1, r3]
 8005788:	099b      	lsrs	r3, r3, #6
 800578a:	b2db      	uxtb	r3, r3
 800578c:	0019      	movs	r1, r3
 800578e:	2360      	movs	r3, #96	@ 0x60
 8005790:	18fb      	adds	r3, r7, r3
 8005792:	430a      	orrs	r2, r1
 8005794:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8005796:	183b      	adds	r3, r7, r0
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	330f      	adds	r3, #15
 800579c:	193a      	adds	r2, r7, r4
 800579e:	5cd3      	ldrb	r3, [r2, r3]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	183b      	adds	r3, r7, r0
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	3310      	adds	r3, #16
 80057aa:	1939      	adds	r1, r7, r4
 80057ac:	5ccb      	ldrb	r3, [r1, r3]
 80057ae:	099b      	lsrs	r3, r3, #6
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	0019      	movs	r1, r3
 80057b4:	235e      	movs	r3, #94	@ 0x5e
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	430a      	orrs	r2, r1
 80057ba:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 80057bc:	183b      	adds	r3, r7, r0
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	330e      	adds	r3, #14
 80057c2:	193a      	adds	r2, r7, r4
 80057c4:	5cd2      	ldrb	r2, [r2, r3]
 80057c6:	235d      	movs	r3, #93	@ 0x5d
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	210f      	movs	r1, #15
 80057cc:	400a      	ands	r2, r1
 80057ce:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 80057d0:	183b      	adds	r3, r7, r0
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	3310      	adds	r3, #16
 80057d6:	193a      	adds	r2, r7, r4
 80057d8:	5cd2      	ldrb	r2, [r2, r3]
 80057da:	235c      	movs	r3, #92	@ 0x5c
 80057dc:	18fb      	adds	r3, r7, r3
 80057de:	210f      	movs	r1, #15
 80057e0:	400a      	ands	r2, r1
 80057e2:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d136      	bne.n	800585a <read_all_field_data+0x266>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 80057ec:	197b      	adds	r3, r7, r5
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	18d3      	adds	r3, r2, r3
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	b25a      	sxtb	r2, r3
 80057fc:	183b      	adds	r3, r7, r0
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	3310      	adds	r3, #16
 8005802:	1939      	adds	r1, r7, r4
 8005804:	5ccb      	ldrb	r3, [r1, r3]
 8005806:	b25b      	sxtb	r3, r3
 8005808:	2120      	movs	r1, #32
 800580a:	400b      	ands	r3, r1
 800580c:	b25b      	sxtb	r3, r3
 800580e:	4313      	orrs	r3, r2
 8005810:	b259      	sxtb	r1, r3
 8005812:	197b      	adds	r3, r7, r5
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	18d3      	adds	r3, r2, r3
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	b2ca      	uxtb	r2, r1
 8005820:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8005822:	197b      	adds	r3, r7, r5
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	18d3      	adds	r3, r2, r3
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	b25a      	sxtb	r2, r3
 8005832:	183b      	adds	r3, r7, r0
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	3310      	adds	r3, #16
 8005838:	1939      	adds	r1, r7, r4
 800583a:	5ccb      	ldrb	r3, [r1, r3]
 800583c:	b25b      	sxtb	r3, r3
 800583e:	2110      	movs	r1, #16
 8005840:	400b      	ands	r3, r1
 8005842:	b25b      	sxtb	r3, r3
 8005844:	4313      	orrs	r3, r2
 8005846:	b259      	sxtb	r1, r3
 8005848:	197b      	adds	r3, r7, r5
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	18d3      	adds	r3, r2, r3
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	b2ca      	uxtb	r2, r1
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	e038      	b.n	80058cc <read_all_field_data+0x2d8>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 800585a:	206e      	movs	r0, #110	@ 0x6e
 800585c:	183b      	adds	r3, r7, r0
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	18d3      	adds	r3, r2, r3
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	b25a      	sxtb	r2, r3
 800586c:	246d      	movs	r4, #109	@ 0x6d
 800586e:	193b      	adds	r3, r7, r4
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	330e      	adds	r3, #14
 8005874:	2528      	movs	r5, #40	@ 0x28
 8005876:	1979      	adds	r1, r7, r5
 8005878:	5ccb      	ldrb	r3, [r1, r3]
 800587a:	b25b      	sxtb	r3, r3
 800587c:	2120      	movs	r1, #32
 800587e:	400b      	ands	r3, r1
 8005880:	b25b      	sxtb	r3, r3
 8005882:	4313      	orrs	r3, r2
 8005884:	b259      	sxtb	r1, r3
 8005886:	183b      	adds	r3, r7, r0
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	18d3      	adds	r3, r2, r3
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	b2ca      	uxtb	r2, r1
 8005894:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 8005896:	183b      	adds	r3, r7, r0
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	18d3      	adds	r3, r2, r3
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	b25a      	sxtb	r2, r3
 80058a6:	193b      	adds	r3, r7, r4
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	330e      	adds	r3, #14
 80058ac:	1979      	adds	r1, r7, r5
 80058ae:	5ccb      	ldrb	r3, [r1, r3]
 80058b0:	b25b      	sxtb	r3, r3
 80058b2:	2110      	movs	r1, #16
 80058b4:	400b      	ands	r3, r1
 80058b6:	b25b      	sxtb	r3, r3
 80058b8:	4313      	orrs	r3, r2
 80058ba:	b259      	sxtb	r1, r3
 80058bc:	183b      	adds	r3, r7, r0
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	18d3      	adds	r3, r2, r3
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	b2ca      	uxtb	r2, r1
 80058ca:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 80058cc:	256e      	movs	r5, #110	@ 0x6e
 80058ce:	197b      	adds	r3, r7, r5
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	18d3      	adds	r3, r2, r3
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	0019      	movs	r1, r3
 80058de:	197b      	adds	r3, r7, r5
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	18d3      	adds	r3, r2, r3
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2008      	movs	r0, #8
 80058ec:	183a      	adds	r2, r7, r0
 80058ee:	5c52      	ldrb	r2, [r2, r1]
 80058f0:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 80058f2:	197b      	adds	r3, r7, r5
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	18d3      	adds	r3, r2, r3
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	330a      	adds	r3, #10
 8005902:	001a      	movs	r2, r3
 8005904:	197b      	adds	r3, r7, r5
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	18cb      	adds	r3, r1, r3
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	1839      	adds	r1, r7, r0
 8005912:	5c8a      	ldrb	r2, [r1, r2]
 8005914:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8005916:	197b      	adds	r3, r7, r5
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	18d3      	adds	r3, r2, r3
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	3314      	adds	r3, #20
 8005926:	001a      	movs	r2, r3
 8005928:	197b      	adds	r3, r7, r5
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	18cb      	adds	r3, r1, r3
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	1839      	adds	r1, r7, r0
 8005936:	5c8a      	ldrb	r2, [r1, r2]
 8005938:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 800593a:	197b      	adds	r3, r7, r5
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	18d3      	adds	r3, r2, r3
 8005944:	681c      	ldr	r4, [r3, #0]
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800594a:	0011      	movs	r1, r2
 800594c:	0018      	movs	r0, r3
 800594e:	f7ff f807 	bl	8004960 <calc_temperature>
 8005952:	1c03      	adds	r3, r0, #0
 8005954:	60a3      	str	r3, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 8005956:	197b      	adds	r3, r7, r5
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	18d3      	adds	r3, r2, r3
 8005960:	681c      	ldr	r4, [r3, #0]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005966:	0011      	movs	r1, r2
 8005968:	0018      	movs	r0, r3
 800596a:	f7ff f891 	bl	8004a90 <calc_pressure>
 800596e:	1c03      	adds	r3, r0, #0
 8005970:	60e3      	str	r3, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8005972:	197b      	adds	r3, r7, r5
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	18d3      	adds	r3, r2, r3
 800597c:	681c      	ldr	r4, [r3, #0]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	2362      	movs	r3, #98	@ 0x62
 8005982:	18fb      	adds	r3, r7, r3
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	0011      	movs	r1, r2
 8005988:	0018      	movs	r0, r3
 800598a:	f7ff f9e1 	bl	8004d50 <calc_humidity>
 800598e:	1c03      	adds	r3, r0, #0
 8005990:	6123      	str	r3, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d112      	bne.n	80059c0 <read_all_field_data+0x3cc>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 800599a:	197b      	adds	r3, r7, r5
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	18d3      	adds	r3, r2, r3
 80059a4:	681c      	ldr	r4, [r3, #0]
 80059a6:	235c      	movs	r3, #92	@ 0x5c
 80059a8:	18fb      	adds	r3, r7, r3
 80059aa:	781a      	ldrb	r2, [r3, #0]
 80059ac:	235e      	movs	r3, #94	@ 0x5e
 80059ae:	18fb      	adds	r3, r7, r3
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	0011      	movs	r1, r2
 80059b4:	0018      	movs	r0, r3
 80059b6:	f7ff fb5b 	bl	8005070 <calc_gas_resistance_high>
 80059ba:	1c03      	adds	r3, r0, #0
 80059bc:	6163      	str	r3, [r4, #20]
 80059be:	e012      	b.n	80059e6 <read_all_field_data+0x3f2>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 80059c0:	236e      	movs	r3, #110	@ 0x6e
 80059c2:	18fb      	adds	r3, r7, r3
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	18d3      	adds	r3, r2, r3
 80059cc:	681c      	ldr	r4, [r3, #0]
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	235d      	movs	r3, #93	@ 0x5d
 80059d2:	18fb      	adds	r3, r7, r3
 80059d4:	7819      	ldrb	r1, [r3, #0]
 80059d6:	2360      	movs	r3, #96	@ 0x60
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	881b      	ldrh	r3, [r3, #0]
 80059dc:	0018      	movs	r0, r3
 80059de:	f7ff fa93 	bl	8004f08 <calc_gas_resistance_low>
 80059e2:	1c03      	adds	r3, r0, #0
 80059e4:	6163      	str	r3, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80059e6:	216e      	movs	r1, #110	@ 0x6e
 80059e8:	187b      	adds	r3, r7, r1
 80059ea:	781a      	ldrb	r2, [r3, #0]
 80059ec:	187b      	adds	r3, r7, r1
 80059ee:	3201      	adds	r2, #1
 80059f0:	701a      	strb	r2, [r3, #0]
 80059f2:	236e      	movs	r3, #110	@ 0x6e
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d806      	bhi.n	8005a0a <read_all_field_data+0x416>
 80059fc:	236f      	movs	r3, #111	@ 0x6f
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	b25b      	sxtb	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d100      	bne.n	8005a0a <read_all_field_data+0x416>
 8005a08:	e643      	b.n	8005692 <read_all_field_data+0x9e>
        }
    }

    return rslt;
 8005a0a:	236f      	movs	r3, #111	@ 0x6f
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	b25b      	sxtb	r3, r3
}
 8005a12:	0018      	movs	r0, r3
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b01c      	add	sp, #112	@ 0x70
 8005a18:	bdb0      	pop	{r4, r5, r7, pc}

08005a1a <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8005a1a:	b5b0      	push	{r4, r5, r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	0002      	movs	r2, r0
 8005a22:	6039      	str	r1, [r7, #0]
 8005a24:	1dfb      	adds	r3, r7, #7
 8005a26:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 8005a28:	250f      	movs	r5, #15
 8005a2a:	197c      	adds	r4, r7, r5
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f000 f8e1 	bl	8005bf6 <null_ptr_check>
 8005a34:	0003      	movs	r3, r0
 8005a36:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8005a38:	197b      	adds	r3, r7, r5
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d160      	bne.n	8005b04 <set_mem_page+0xea>
    {
        if (reg_addr > 0x7f)
 8005a42:	1dfb      	adds	r3, r7, #7
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	b25b      	sxtb	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	da04      	bge.n	8005a56 <set_mem_page+0x3c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8005a4c:	230e      	movs	r3, #14
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	e003      	b.n	8005a5e <set_mem_page+0x44>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 8005a56:	230e      	movs	r3, #14
 8005a58:	18fb      	adds	r3, r7, r3
 8005a5a:	2210      	movs	r2, #16
 8005a5c:	701a      	strb	r2, [r3, #0]
        }

        if (mem_page != dev->mem_page)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	7b5b      	ldrb	r3, [r3, #13]
 8005a62:	210e      	movs	r1, #14
 8005a64:	187a      	adds	r2, r7, r1
 8005a66:	7812      	ldrb	r2, [r2, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d04b      	beq.n	8005b04 <set_mem_page+0xea>
        {
            dev->mem_page = mem_page;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	187a      	adds	r2, r7, r1
 8005a70:	7812      	ldrb	r2, [r2, #0]
 8005a72:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	220d      	movs	r2, #13
 8005a7e:	18b9      	adds	r1, r7, r2
 8005a80:	2201      	movs	r2, #1
 8005a82:	20f3      	movs	r0, #243	@ 0xf3
 8005a84:	47a0      	blx	r4
 8005a86:	0003      	movs	r3, r0
 8005a88:	0019      	movs	r1, r3
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	224c      	movs	r2, #76	@ 0x4c
 8005a8e:	5499      	strb	r1, [r3, r2]
            if (dev->intf_rslt != 0)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	224c      	movs	r2, #76	@ 0x4c
 8005a94:	569b      	ldrsb	r3, [r3, r2]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <set_mem_page+0x88>
            {
                rslt = BME68X_E_COM_FAIL;
 8005a9a:	230f      	movs	r3, #15
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	22fe      	movs	r2, #254	@ 0xfe
 8005aa0:	701a      	strb	r2, [r3, #0]
            }

            if (rslt == BME68X_OK)
 8005aa2:	250f      	movs	r5, #15
 8005aa4:	197b      	adds	r3, r7, r5
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	b25b      	sxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d12a      	bne.n	8005b04 <set_mem_page+0xea>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8005aae:	210d      	movs	r1, #13
 8005ab0:	187b      	adds	r3, r7, r1
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2210      	movs	r2, #16
 8005ab6:	4393      	bics	r3, r2
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	187b      	adds	r3, r7, r1
 8005abc:	701a      	strb	r2, [r3, #0]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	7b5b      	ldrb	r3, [r3, #13]
 8005ac2:	b25b      	sxtb	r3, r3
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	b25a      	sxtb	r2, r3
 8005aca:	187b      	adds	r3, r7, r1
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	b25b      	sxtb	r3, r3
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	b25b      	sxtb	r3, r3
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	187b      	adds	r3, r7, r1
 8005ad8:	701a      	strb	r2, [r3, #0]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	1879      	adds	r1, r7, r1
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	2073      	movs	r0, #115	@ 0x73
 8005ae8:	47a0      	blx	r4
 8005aea:	0003      	movs	r3, r0
 8005aec:	0019      	movs	r1, r3
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	224c      	movs	r2, #76	@ 0x4c
 8005af2:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	224c      	movs	r2, #76	@ 0x4c
 8005af8:	569b      	ldrsb	r3, [r3, r2]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <set_mem_page+0xea>
                {
                    rslt = BME68X_E_COM_FAIL;
 8005afe:	197b      	adds	r3, r7, r5
 8005b00:	22fe      	movs	r2, #254	@ 0xfe
 8005b02:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    return rslt;
 8005b04:	230f      	movs	r3, #15
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	b25b      	sxtb	r3, r3
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b004      	add	sp, #16
 8005b12:	bdb0      	pop	{r4, r5, r7, pc}

08005b14 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8005b14:	b5b0      	push	{r4, r5, r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8005b1c:	250f      	movs	r5, #15
 8005b1e:	197c      	adds	r4, r7, r5
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	0018      	movs	r0, r3
 8005b24:	f000 f867 	bl	8005bf6 <null_ptr_check>
 8005b28:	0003      	movs	r3, r0
 8005b2a:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8005b2c:	197b      	adds	r3, r7, r5
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	b25b      	sxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d11e      	bne.n	8005b74 <get_mem_page+0x60>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	220e      	movs	r2, #14
 8005b40:	18b9      	adds	r1, r7, r2
 8005b42:	2201      	movs	r2, #1
 8005b44:	20f3      	movs	r0, #243	@ 0xf3
 8005b46:	47a0      	blx	r4
 8005b48:	0003      	movs	r3, r0
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	224c      	movs	r2, #76	@ 0x4c
 8005b50:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	224c      	movs	r2, #76	@ 0x4c
 8005b56:	569b      	ldrsb	r3, [r3, r2]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <get_mem_page+0x50>
        {
            rslt = BME68X_E_COM_FAIL;
 8005b5c:	197b      	adds	r3, r7, r5
 8005b5e:	22fe      	movs	r2, #254	@ 0xfe
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e007      	b.n	8005b74 <get_mem_page+0x60>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8005b64:	230e      	movs	r3, #14
 8005b66:	18fb      	adds	r3, r7, r3
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2210      	movs	r2, #16
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 8005b74:	230f      	movs	r3, #15
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	b25b      	sxtb	r3, r3
}
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b004      	add	sp, #16
 8005b82:	bdb0      	pop	{r4, r5, r7, pc}

08005b84 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 8005b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	607a      	str	r2, [r7, #4]
 8005b8e:	250b      	movs	r5, #11
 8005b90:	197b      	adds	r3, r7, r5
 8005b92:	1c0a      	adds	r2, r1, #0
 8005b94:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8005b96:	2617      	movs	r6, #23
 8005b98:	19bc      	adds	r4, r7, r6
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	0018      	movs	r0, r3
 8005b9e:	f000 f82a 	bl	8005bf6 <null_ptr_check>
 8005ba2:	0003      	movs	r3, r0
 8005ba4:	7023      	strb	r3, [r4, #0]
    if ((value != NULL) && (rslt == BME68X_OK))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d018      	beq.n	8005bde <boundary_check+0x5a>
 8005bac:	19bb      	adds	r3, r7, r6
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	b25b      	sxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d113      	bne.n	8005bde <boundary_check+0x5a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	197a      	adds	r2, r7, r5
 8005bbc:	7812      	ldrb	r2, [r2, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d211      	bcs.n	8005be6 <boundary_check+0x62>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	197a      	adds	r2, r7, r5
 8005bc6:	7812      	ldrb	r2, [r2, #0]
 8005bc8:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	224d      	movs	r2, #77	@ 0x4d
 8005bce:	5c9b      	ldrb	r3, [r3, r2]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	b2d9      	uxtb	r1, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	224d      	movs	r2, #77	@ 0x4d
 8005bda:	5499      	strb	r1, [r3, r2]
        if (*value > max)
 8005bdc:	e003      	b.n	8005be6 <boundary_check+0x62>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8005bde:	2317      	movs	r3, #23
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	22ff      	movs	r2, #255	@ 0xff
 8005be4:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8005be6:	2317      	movs	r3, #23
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	b25b      	sxtb	r3, r3
}
 8005bee:	0018      	movs	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b007      	add	sp, #28
 8005bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bf6 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 8005bfe:	230f      	movs	r3, #15
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	2200      	movs	r2, #0
 8005c04:	701a      	strb	r2, [r3, #0]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <null_ptr_check+0x2e>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <null_ptr_check+0x2e>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <null_ptr_check+0x2e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d103      	bne.n	8005c2c <null_ptr_check+0x36>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8005c24:	230f      	movs	r3, #15
 8005c26:	18fb      	adds	r3, r7, r3
 8005c28:	22ff      	movs	r2, #255	@ 0xff
 8005c2a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8005c2c:	230f      	movs	r3, #15
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	b25b      	sxtb	r3, r3
}
 8005c34:	0018      	movs	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b004      	add	sp, #16
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8005c3c:	b5b0      	push	{r4, r5, r7, lr}
 8005c3e:	b092      	sub	sp, #72	@ 0x48
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	607a      	str	r2, [r7, #4]
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	240b      	movs	r4, #11
 8005c4a:	193b      	adds	r3, r7, r4
 8005c4c:	1c0a      	adds	r2, r1, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 8005c50:	2347      	movs	r3, #71	@ 0x47
 8005c52:	18fb      	adds	r3, r7, r3
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8005c58:	2345      	movs	r3, #69	@ 0x45
 8005c5a:	18fb      	adds	r3, r7, r3
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	701a      	strb	r2, [r3, #0]
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8005c60:	2343      	movs	r3, #67	@ 0x43
 8005c62:	18fb      	adds	r3, r7, r3
 8005c64:	226e      	movs	r2, #110	@ 0x6e
 8005c66:	701a      	strb	r2, [r3, #0]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8005c68:	2338      	movs	r3, #56	@ 0x38
 8005c6a:	18fb      	adds	r3, r7, r3
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	230a      	movs	r3, #10
 8005c70:	001a      	movs	r2, r3
 8005c72:	2100      	movs	r1, #0
 8005c74:	f005 fe6a 	bl	800b94c <memset>
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8005c78:	232c      	movs	r3, #44	@ 0x2c
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	230a      	movs	r3, #10
 8005c80:	001a      	movs	r2, r3
 8005c82:	2100      	movs	r1, #0
 8005c84:	f005 fe62 	bl	800b94c <memset>
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8005c88:	2320      	movs	r3, #32
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	230a      	movs	r3, #10
 8005c90:	001a      	movs	r2, r3
 8005c92:	2100      	movs	r1, #0
 8005c94:	f005 fe5a 	bl	800b94c <memset>
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8005c98:	2314      	movs	r3, #20
 8005c9a:	18fb      	adds	r3, r7, r3
 8005c9c:	0018      	movs	r0, r3
 8005c9e:	230a      	movs	r3, #10
 8005ca0:	001a      	movs	r2, r3
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	f005 fe52 	bl	800b94c <memset>

    switch (op_mode)
 8005ca8:	193b      	adds	r3, r7, r4
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b03      	cmp	r3, #3
 8005cae:	d02d      	beq.n	8005d0c <set_conf+0xd0>
 8005cb0:	dd00      	ble.n	8005cb4 <set_conf+0x78>
 8005cb2:	e10c      	b.n	8005ece <set_conf+0x292>
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d003      	beq.n	8005cc0 <set_conf+0x84>
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d100      	bne.n	8005cbe <set_conf+0x82>
 8005cbc:	e088      	b.n	8005dd0 <set_conf+0x194>
 8005cbe:	e106      	b.n	8005ece <set_conf+0x292>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8005cc0:	2338      	movs	r3, #56	@ 0x38
 8005cc2:	18fb      	adds	r3, r7, r3
 8005cc4:	225a      	movs	r2, #90	@ 0x5a
 8005cc6:	701a      	strb	r2, [r3, #0]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	885b      	ldrh	r3, [r3, #2]
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	0011      	movs	r1, r2
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f7ff fa0b 	bl	80050ec <calc_res_heat>
 8005cd6:	0003      	movs	r3, r0
 8005cd8:	001a      	movs	r2, r3
 8005cda:	232c      	movs	r3, #44	@ 0x2c
 8005cdc:	18fb      	adds	r3, r7, r3
 8005cde:	701a      	strb	r2, [r3, #0]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8005ce0:	2320      	movs	r3, #32
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	2264      	movs	r2, #100	@ 0x64
 8005ce6:	701a      	strb	r2, [r3, #0]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	889b      	ldrh	r3, [r3, #4]
 8005cec:	0018      	movs	r0, r3
 8005cee:	f7ff fac9 	bl	8005284 <calc_gas_wait>
 8005cf2:	0003      	movs	r3, r0
 8005cf4:	001a      	movs	r2, r3
 8005cf6:	2314      	movs	r3, #20
 8005cf8:	18fb      	adds	r3, r7, r3
 8005cfa:	701a      	strb	r2, [r3, #0]
            (*nb_conv) = 0;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8005d02:	2345      	movs	r3, #69	@ 0x45
 8005d04:	18fb      	adds	r3, r7, r3
 8005d06:	2201      	movs	r2, #1
 8005d08:	701a      	strb	r2, [r3, #0]
            break;
 8005d0a:	e0e6      	b.n	8005eda <set_conf+0x29e>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <set_conf+0xe0>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d104      	bne.n	8005d26 <set_conf+0xea>
            {
                rslt = BME68X_E_NULL_PTR;
 8005d1c:	2347      	movs	r3, #71	@ 0x47
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	22ff      	movs	r2, #255	@ 0xff
 8005d22:	701a      	strb	r2, [r3, #0]
                break;
 8005d24:	e0d9      	b.n	8005eda <set_conf+0x29e>
            }

            for (i = 0; i < conf->profile_len; i++)
 8005d26:	2346      	movs	r3, #70	@ 0x46
 8005d28:	18fb      	adds	r3, r7, r3
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	701a      	strb	r2, [r3, #0]
 8005d2e:	e03e      	b.n	8005dae <set_conf+0x172>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8005d30:	2046      	movs	r0, #70	@ 0x46
 8005d32:	183b      	adds	r3, r7, r0
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	183a      	adds	r2, r7, r0
 8005d38:	7812      	ldrb	r2, [r2, #0]
 8005d3a:	325a      	adds	r2, #90	@ 0x5a
 8005d3c:	b2d1      	uxtb	r1, r2
 8005d3e:	2238      	movs	r2, #56	@ 0x38
 8005d40:	18ba      	adds	r2, r7, r2
 8005d42:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	183b      	adds	r3, r7, r0
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	18d3      	adds	r3, r2, r3
 8005d50:	881a      	ldrh	r2, [r3, #0]
 8005d52:	0005      	movs	r5, r0
 8005d54:	183b      	adds	r3, r7, r0
 8005d56:	781c      	ldrb	r4, [r3, #0]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	0019      	movs	r1, r3
 8005d5c:	0010      	movs	r0, r2
 8005d5e:	f7ff f9c5 	bl	80050ec <calc_res_heat>
 8005d62:	0003      	movs	r3, r0
 8005d64:	001a      	movs	r2, r3
 8005d66:	232c      	movs	r3, #44	@ 0x2c
 8005d68:	18fb      	adds	r3, r7, r3
 8005d6a:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8005d6c:	0028      	movs	r0, r5
 8005d6e:	183b      	adds	r3, r7, r0
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	183a      	adds	r2, r7, r0
 8005d74:	7812      	ldrb	r2, [r2, #0]
 8005d76:	3264      	adds	r2, #100	@ 0x64
 8005d78:	b2d1      	uxtb	r1, r2
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	18ba      	adds	r2, r7, r2
 8005d7e:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	183b      	adds	r3, r7, r0
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	18d3      	adds	r3, r2, r3
 8005d8c:	881a      	ldrh	r2, [r3, #0]
 8005d8e:	0005      	movs	r5, r0
 8005d90:	183b      	adds	r3, r7, r0
 8005d92:	781c      	ldrb	r4, [r3, #0]
 8005d94:	0010      	movs	r0, r2
 8005d96:	f7ff fa75 	bl	8005284 <calc_gas_wait>
 8005d9a:	0003      	movs	r3, r0
 8005d9c:	001a      	movs	r2, r3
 8005d9e:	2314      	movs	r3, #20
 8005da0:	18fb      	adds	r3, r7, r3
 8005da2:	551a      	strb	r2, [r3, r4]
            for (i = 0; i < conf->profile_len; i++)
 8005da4:	197b      	adds	r3, r7, r5
 8005da6:	781a      	ldrb	r2, [r3, #0]
 8005da8:	197b      	adds	r3, r7, r5
 8005daa:	3201      	adds	r2, #1
 8005dac:	701a      	strb	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	7c1b      	ldrb	r3, [r3, #16]
 8005db2:	2246      	movs	r2, #70	@ 0x46
 8005db4:	18ba      	adds	r2, r7, r2
 8005db6:	7812      	ldrb	r2, [r2, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d3b9      	bcc.n	8005d30 <set_conf+0xf4>
            }

            (*nb_conv) = conf->profile_len;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	7c1a      	ldrb	r2, [r3, #16]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8005dc4:	2345      	movs	r3, #69	@ 0x45
 8005dc6:	18fb      	adds	r3, r7, r3
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	7c12      	ldrb	r2, [r2, #16]
 8005dcc:	701a      	strb	r2, [r3, #0]
            break;
 8005dce:	e084      	b.n	8005eda <set_conf+0x29e>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <set_conf+0x1a4>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d104      	bne.n	8005dea <set_conf+0x1ae>
            {
                rslt = BME68X_E_NULL_PTR;
 8005de0:	2347      	movs	r3, #71	@ 0x47
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	22ff      	movs	r2, #255	@ 0xff
 8005de6:	701a      	strb	r2, [r3, #0]
                break;
 8005de8:	e077      	b.n	8005eda <set_conf+0x29e>
            }

            if (conf->shared_heatr_dur == 0)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8a5b      	ldrh	r3, [r3, #18]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d103      	bne.n	8005dfa <set_conf+0x1be>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8005df2:	2347      	movs	r3, #71	@ 0x47
 8005df4:	18fb      	adds	r3, r7, r3
 8005df6:	2203      	movs	r2, #3
 8005df8:	701a      	strb	r2, [r3, #0]
            }

            for (i = 0; i < conf->profile_len; i++)
 8005dfa:	2346      	movs	r3, #70	@ 0x46
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	2200      	movs	r2, #0
 8005e00:	701a      	strb	r2, [r3, #0]
 8005e02:	e039      	b.n	8005e78 <set_conf+0x23c>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8005e04:	2046      	movs	r0, #70	@ 0x46
 8005e06:	183b      	adds	r3, r7, r0
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	183a      	adds	r2, r7, r0
 8005e0c:	7812      	ldrb	r2, [r2, #0]
 8005e0e:	325a      	adds	r2, #90	@ 0x5a
 8005e10:	b2d1      	uxtb	r1, r2
 8005e12:	2238      	movs	r2, #56	@ 0x38
 8005e14:	18ba      	adds	r2, r7, r2
 8005e16:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	183b      	adds	r3, r7, r0
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	18d3      	adds	r3, r2, r3
 8005e24:	881a      	ldrh	r2, [r3, #0]
 8005e26:	0005      	movs	r5, r0
 8005e28:	183b      	adds	r3, r7, r0
 8005e2a:	781c      	ldrb	r4, [r3, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	0019      	movs	r1, r3
 8005e30:	0010      	movs	r0, r2
 8005e32:	f7ff f95b 	bl	80050ec <calc_res_heat>
 8005e36:	0003      	movs	r3, r0
 8005e38:	001a      	movs	r2, r3
 8005e3a:	232c      	movs	r3, #44	@ 0x2c
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8005e40:	0028      	movs	r0, r5
 8005e42:	183b      	adds	r3, r7, r0
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	183a      	adds	r2, r7, r0
 8005e48:	7812      	ldrb	r2, [r2, #0]
 8005e4a:	3264      	adds	r2, #100	@ 0x64
 8005e4c:	b2d1      	uxtb	r1, r2
 8005e4e:	2220      	movs	r2, #32
 8005e50:	18ba      	adds	r2, r7, r2
 8005e52:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	183b      	adds	r3, r7, r0
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	18d3      	adds	r3, r2, r3
 8005e60:	881a      	ldrh	r2, [r3, #0]
 8005e62:	183b      	adds	r3, r7, r0
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	b2d1      	uxtb	r1, r2
 8005e68:	2214      	movs	r2, #20
 8005e6a:	18ba      	adds	r2, r7, r2
 8005e6c:	54d1      	strb	r1, [r2, r3]
            for (i = 0; i < conf->profile_len; i++)
 8005e6e:	183b      	adds	r3, r7, r0
 8005e70:	781a      	ldrb	r2, [r3, #0]
 8005e72:	183b      	adds	r3, r7, r0
 8005e74:	3201      	adds	r2, #1
 8005e76:	701a      	strb	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	7c1b      	ldrb	r3, [r3, #16]
 8005e7c:	2246      	movs	r2, #70	@ 0x46
 8005e7e:	18ba      	adds	r2, r7, r2
 8005e80:	7812      	ldrb	r2, [r2, #0]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d3be      	bcc.n	8005e04 <set_conf+0x1c8>
            }

            (*nb_conv) = conf->profile_len;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	7c1a      	ldrb	r2, [r3, #16]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8005e8e:	2345      	movs	r3, #69	@ 0x45
 8005e90:	18fb      	adds	r3, r7, r3
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	7c12      	ldrb	r2, [r2, #16]
 8005e96:	701a      	strb	r2, [r3, #0]
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8a5b      	ldrh	r3, [r3, #18]
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f000 f84b 	bl	8005f38 <calc_heatr_dur_shared>
 8005ea2:	0003      	movs	r3, r0
 8005ea4:	001a      	movs	r2, r3
 8005ea6:	2144      	movs	r1, #68	@ 0x44
 8005ea8:	187b      	adds	r3, r7, r1
 8005eaa:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8005eac:	2247      	movs	r2, #71	@ 0x47
 8005eae:	18bb      	adds	r3, r7, r2
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	b25b      	sxtb	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10f      	bne.n	8005ed8 <set_conf+0x29c>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8005eb8:	18bc      	adds	r4, r7, r2
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	1879      	adds	r1, r7, r1
 8005ebe:	2243      	movs	r2, #67	@ 0x43
 8005ec0:	18b8      	adds	r0, r7, r2
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f7fd ff83 	bl	8003dce <bme68x_set_regs>
 8005ec8:	0003      	movs	r3, r0
 8005eca:	7023      	strb	r3, [r4, #0]
            }

            break;
 8005ecc:	e004      	b.n	8005ed8 <set_conf+0x29c>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8005ece:	2347      	movs	r3, #71	@ 0x47
 8005ed0:	18fb      	adds	r3, r7, r3
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	e000      	b.n	8005eda <set_conf+0x29e>
            break;
 8005ed8:	46c0      	nop			@ (mov r8, r8)
    }

    if (rslt == BME68X_OK)
 8005eda:	2147      	movs	r1, #71	@ 0x47
 8005edc:	187b      	adds	r3, r7, r1
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	b25b      	sxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10c      	bne.n	8005f00 <set_conf+0x2c4>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8005ee6:	2345      	movs	r3, #69	@ 0x45
 8005ee8:	18fb      	adds	r3, r7, r3
 8005eea:	781a      	ldrb	r2, [r3, #0]
 8005eec:	187c      	adds	r4, r7, r1
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	212c      	movs	r1, #44	@ 0x2c
 8005ef2:	1879      	adds	r1, r7, r1
 8005ef4:	2038      	movs	r0, #56	@ 0x38
 8005ef6:	1838      	adds	r0, r7, r0
 8005ef8:	f7fd ff69 	bl	8003dce <bme68x_set_regs>
 8005efc:	0003      	movs	r3, r0
 8005efe:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8005f00:	2147      	movs	r1, #71	@ 0x47
 8005f02:	187b      	adds	r3, r7, r1
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b25b      	sxtb	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10c      	bne.n	8005f26 <set_conf+0x2ea>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8005f0c:	2345      	movs	r3, #69	@ 0x45
 8005f0e:	18fb      	adds	r3, r7, r3
 8005f10:	781a      	ldrb	r2, [r3, #0]
 8005f12:	187c      	adds	r4, r7, r1
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2114      	movs	r1, #20
 8005f18:	1879      	adds	r1, r7, r1
 8005f1a:	2020      	movs	r0, #32
 8005f1c:	1838      	adds	r0, r7, r0
 8005f1e:	f7fd ff56 	bl	8003dce <bme68x_set_regs>
 8005f22:	0003      	movs	r3, r0
 8005f24:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8005f26:	2347      	movs	r3, #71	@ 0x47
 8005f28:	18fb      	adds	r3, r7, r3
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	b25b      	sxtb	r3, r3
}
 8005f2e:	0018      	movs	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	b012      	add	sp, #72	@ 0x48
 8005f34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005f38 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	0002      	movs	r2, r0
 8005f40:	1dbb      	adds	r3, r7, #6
 8005f42:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 8005f44:	230f      	movs	r3, #15
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	2200      	movs	r2, #0
 8005f4a:	701a      	strb	r2, [r3, #0]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8005f4c:	1dbb      	adds	r3, r7, #6
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	4a1e      	ldr	r2, [pc, #120]	@ (8005fcc <calc_heatr_dur_shared+0x94>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d904      	bls.n	8005f60 <calc_heatr_dur_shared+0x28>
    {
        heatdurval = 0xff; /* Max duration */
 8005f56:	230e      	movs	r3, #14
 8005f58:	18fb      	adds	r3, r7, r3
 8005f5a:	22ff      	movs	r2, #255	@ 0xff
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	e02e      	b.n	8005fbe <calc_heatr_dur_shared+0x86>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8005f60:	1dbb      	adds	r3, r7, #6
 8005f62:	881a      	ldrh	r2, [r3, #0]
 8005f64:	0013      	movs	r3, r2
 8005f66:	015b      	lsls	r3, r3, #5
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	189b      	adds	r3, r3, r2
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	001a      	movs	r2, r3
 8005f72:	23de      	movs	r3, #222	@ 0xde
 8005f74:	33ff      	adds	r3, #255	@ 0xff
 8005f76:	0019      	movs	r1, r3
 8005f78:	0010      	movs	r0, r2
 8005f7a:	f7fa f8e9 	bl	8000150 <__udivsi3>
 8005f7e:	0003      	movs	r3, r0
 8005f80:	001a      	movs	r2, r3
 8005f82:	1dbb      	adds	r3, r7, #6
 8005f84:	801a      	strh	r2, [r3, #0]
        while (dur > 0x3F)
 8005f86:	e00a      	b.n	8005f9e <calc_heatr_dur_shared+0x66>
        {
            dur = dur >> 2;
 8005f88:	1dbb      	adds	r3, r7, #6
 8005f8a:	1dba      	adds	r2, r7, #6
 8005f8c:	8812      	ldrh	r2, [r2, #0]
 8005f8e:	0892      	lsrs	r2, r2, #2
 8005f90:	801a      	strh	r2, [r3, #0]
            factor += 1;
 8005f92:	220f      	movs	r2, #15
 8005f94:	18bb      	adds	r3, r7, r2
 8005f96:	18ba      	adds	r2, r7, r2
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	3201      	adds	r2, #1
 8005f9c:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8005f9e:	1dbb      	adds	r3, r7, #6
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	2b3f      	cmp	r3, #63	@ 0x3f
 8005fa4:	d8f0      	bhi.n	8005f88 <calc_heatr_dur_shared+0x50>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8005fa6:	1dbb      	adds	r3, r7, #6
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b2d9      	uxtb	r1, r3
 8005fac:	230f      	movs	r3, #15
 8005fae:	18fb      	adds	r3, r7, r3
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	019b      	lsls	r3, r3, #6
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	230e      	movs	r3, #14
 8005fb8:	18fb      	adds	r3, r7, r3
 8005fba:	188a      	adds	r2, r1, r2
 8005fbc:	701a      	strb	r2, [r3, #0]
    }

    return heatdurval;
 8005fbe:	230e      	movs	r3, #14
 8005fc0:	18fb      	adds	r3, r7, r3
 8005fc2:	781b      	ldrb	r3, [r3, #0]
}
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b004      	add	sp, #16
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	00000782 	.word	0x00000782

08005fd0 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	603a      	str	r2, [r7, #0]
 8005fd8:	1dfb      	adds	r3, r7, #7
 8005fda:	1c02      	adds	r2, r0, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	1dbb      	adds	r3, r7, #6
 8005fe0:	1c0a      	adds	r2, r1, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8005fe4:	1dfb      	adds	r3, r7, #7
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	18d3      	adds	r3, r2, r3
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	789a      	ldrb	r2, [r3, #2]
 8005ff2:	210e      	movs	r1, #14
 8005ff4:	187b      	adds	r3, r7, r1
 8005ff6:	801a      	strh	r2, [r3, #0]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8005ff8:	1dbb      	adds	r3, r7, #6
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	18d3      	adds	r3, r2, r3
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	789a      	ldrb	r2, [r3, #2]
 8006006:	200c      	movs	r0, #12
 8006008:	183b      	adds	r3, r7, r0
 800600a:	801a      	strh	r2, [r3, #0]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 800600c:	1dfb      	adds	r3, r7, #7
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	18d3      	adds	r3, r2, r3
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	b25b      	sxtb	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	da2c      	bge.n	800607a <sort_sensor_data+0xaa>
 8006020:	1dbb      	adds	r3, r7, #6
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	18d3      	adds	r3, r2, r3
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	b25b      	sxtb	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	da22      	bge.n	800607a <sort_sensor_data+0xaa>
    {
        int16_t diff = meas_index2 - meas_index1;
 8006034:	183b      	adds	r3, r7, r0
 8006036:	881a      	ldrh	r2, [r3, #0]
 8006038:	187b      	adds	r3, r7, r1
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	b29a      	uxth	r2, r3
 8006040:	210a      	movs	r1, #10
 8006042:	187b      	adds	r3, r7, r1
 8006044:	801a      	strh	r2, [r3, #0]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8006046:	000a      	movs	r2, r1
 8006048:	18bb      	adds	r3, r7, r2
 800604a:	2100      	movs	r1, #0
 800604c:	5e5b      	ldrsh	r3, [r3, r1]
 800604e:	3302      	adds	r3, #2
 8006050:	db04      	blt.n	800605c <sort_sensor_data+0x8c>
 8006052:	18bb      	adds	r3, r7, r2
 8006054:	2200      	movs	r2, #0
 8006056:	5e9b      	ldrsh	r3, [r3, r2]
 8006058:	2b00      	cmp	r3, #0
 800605a:	db05      	blt.n	8006068 <sort_sensor_data+0x98>
 800605c:	230a      	movs	r3, #10
 800605e:	18fb      	adds	r3, r7, r3
 8006060:	2200      	movs	r2, #0
 8006062:	5e9b      	ldrsh	r3, [r3, r2]
 8006064:	2b02      	cmp	r3, #2
 8006066:	dd1b      	ble.n	80060a0 <sort_sensor_data+0xd0>
        {
            swap_fields(low_index, high_index, field);
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	1dbb      	adds	r3, r7, #6
 800606c:	7819      	ldrb	r1, [r3, #0]
 800606e:	1dfb      	adds	r3, r7, #7
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	0018      	movs	r0, r3
 8006074:	f000 f819 	bl	80060aa <swap_fields>
    {
 8006078:	e012      	b.n	80060a0 <sort_sensor_data+0xd0>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 800607a:	1dbb      	adds	r3, r7, #6
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	18d3      	adds	r3, r2, r3
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	b25b      	sxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	da09      	bge.n	80060a2 <sort_sensor_data+0xd2>
    {
        swap_fields(low_index, high_index, field);
 800608e:	683a      	ldr	r2, [r7, #0]
 8006090:	1dbb      	adds	r3, r7, #6
 8006092:	7819      	ldrb	r1, [r3, #0]
 8006094:	1dfb      	adds	r3, r7, #7
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	0018      	movs	r0, r3
 800609a:	f000 f806 	bl	80060aa <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 800609e:	e000      	b.n	80060a2 <sort_sensor_data+0xd2>
    {
 80060a0:	46c0      	nop			@ (mov r8, r8)
}
 80060a2:	46c0      	nop			@ (mov r8, r8)
 80060a4:	46bd      	mov	sp, r7
 80060a6:	b004      	add	sp, #16
 80060a8:	bd80      	pop	{r7, pc}

080060aa <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	603a      	str	r2, [r7, #0]
 80060b2:	1dfb      	adds	r3, r7, #7
 80060b4:	1c02      	adds	r2, r0, #0
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	1dbb      	adds	r3, r7, #6
 80060ba:	1c0a      	adds	r2, r1, #0
 80060bc:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *temp;

    temp = field[index1];
 80060be:	1dfb      	adds	r3, r7, #7
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	18d3      	adds	r3, r2, r3
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 80060cc:	1dbb      	adds	r3, r7, #6
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	18d2      	adds	r2, r2, r3
 80060d6:	1dfb      	adds	r3, r7, #7
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	18cb      	adds	r3, r1, r3
 80060e0:	6812      	ldr	r2, [r2, #0]
 80060e2:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 80060e4:	1dbb      	adds	r3, r7, #6
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	18d3      	adds	r3, r2, r3
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	601a      	str	r2, [r3, #0]
}
 80060f2:	46c0      	nop			@ (mov r8, r8)
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b004      	add	sp, #16
 80060f8:	bd80      	pop	{r7, pc}

080060fa <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 80060fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060fc:	b08f      	sub	sp, #60	@ 0x3c
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8006102:	2537      	movs	r5, #55	@ 0x37
 8006104:	197c      	adds	r4, r7, r5
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	260c      	movs	r6, #12
 800610a:	19b9      	adds	r1, r7, r6
 800610c:	2217      	movs	r2, #23
 800610e:	208a      	movs	r0, #138	@ 0x8a
 8006110:	f7fd ff0a 	bl	8003f28 <bme68x_get_regs>
 8006114:	0003      	movs	r3, r0
 8006116:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8006118:	197b      	adds	r3, r7, r5
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	b25b      	sxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10b      	bne.n	800613a <get_calib_data+0x40>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8006122:	197c      	adds	r4, r7, r5
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	19bb      	adds	r3, r7, r6
 8006128:	3317      	adds	r3, #23
 800612a:	0019      	movs	r1, r3
 800612c:	0013      	movs	r3, r2
 800612e:	220e      	movs	r2, #14
 8006130:	20e1      	movs	r0, #225	@ 0xe1
 8006132:	f7fd fef9 	bl	8003f28 <bme68x_get_regs>
 8006136:	0003      	movs	r3, r0
 8006138:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 800613a:	2237      	movs	r2, #55	@ 0x37
 800613c:	18bb      	adds	r3, r7, r2
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	b25b      	sxtb	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10c      	bne.n	8006160 <get_calib_data+0x66>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8006146:	18bc      	adds	r4, r7, r2
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	230c      	movs	r3, #12
 800614c:	18fb      	adds	r3, r7, r3
 800614e:	3325      	adds	r3, #37	@ 0x25
 8006150:	0019      	movs	r1, r3
 8006152:	0013      	movs	r3, r2
 8006154:	2205      	movs	r2, #5
 8006156:	2000      	movs	r0, #0
 8006158:	f7fd fee6 	bl	8003f28 <bme68x_get_regs>
 800615c:	0003      	movs	r3, r0
 800615e:	7023      	strb	r3, [r4, #0]
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8006160:	2337      	movs	r3, #55	@ 0x37
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	b25b      	sxtb	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d000      	beq.n	800616e <get_calib_data+0x74>
 800616c:	e0f4      	b.n	8006358 <get_calib_data+0x25e>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 800616e:	210c      	movs	r1, #12
 8006170:	187b      	adds	r3, r7, r1
 8006172:	2220      	movs	r2, #32
 8006174:	5c9b      	ldrb	r3, [r3, r2]
 8006176:	b21b      	sxth	r3, r3
 8006178:	021b      	lsls	r3, r3, #8
 800617a:	b21a      	sxth	r2, r3
 800617c:	187b      	adds	r3, r7, r1
 800617e:	7fdb      	ldrb	r3, [r3, #31]
 8006180:	b21b      	sxth	r3, r3
 8006182:	4313      	orrs	r3, r2
 8006184:	b21b      	sxth	r3, r3
 8006186:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 800618c:	187b      	adds	r3, r7, r1
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	b21b      	sxth	r3, r3
 8006192:	021b      	lsls	r3, r3, #8
 8006194:	b21a      	sxth	r2, r3
 8006196:	187b      	adds	r3, r7, r1
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	b21b      	sxth	r3, r3
 800619c:	4313      	orrs	r3, r2
 800619e:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 80061a4:	0008      	movs	r0, r1
 80061a6:	187b      	adds	r3, r7, r1
 80061a8:	789b      	ldrb	r3, [r3, #2]
 80061aa:	b259      	sxtb	r1, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2222      	movs	r2, #34	@ 0x22
 80061b0:	5499      	strb	r1, [r3, r2]

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 80061b2:	0001      	movs	r1, r0
 80061b4:	187b      	adds	r3, r7, r1
 80061b6:	795b      	ldrb	r3, [r3, #5]
 80061b8:	b21b      	sxth	r3, r3
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	b21a      	sxth	r2, r3
 80061be:	187b      	adds	r3, r7, r1
 80061c0:	791b      	ldrb	r3, [r3, #4]
 80061c2:	b21b      	sxth	r3, r3
 80061c4:	4313      	orrs	r3, r2
 80061c6:	b21b      	sxth	r3, r3
 80061c8:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 80061ce:	187b      	adds	r3, r7, r1
 80061d0:	79db      	ldrb	r3, [r3, #7]
 80061d2:	b21b      	sxth	r3, r3
 80061d4:	021b      	lsls	r3, r3, #8
 80061d6:	b21a      	sxth	r2, r3
 80061d8:	187b      	adds	r3, r7, r1
 80061da:	799b      	ldrb	r3, [r3, #6]
 80061dc:	b21b      	sxth	r3, r3
 80061de:	4313      	orrs	r3, r2
 80061e0:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 80061e6:	0008      	movs	r0, r1
 80061e8:	187b      	adds	r3, r7, r1
 80061ea:	7a1b      	ldrb	r3, [r3, #8]
 80061ec:	b259      	sxtb	r1, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2228      	movs	r2, #40	@ 0x28
 80061f2:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 80061f4:	0001      	movs	r1, r0
 80061f6:	187b      	adds	r3, r7, r1
 80061f8:	7adb      	ldrb	r3, [r3, #11]
 80061fa:	b21b      	sxth	r3, r3
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	b21a      	sxth	r2, r3
 8006200:	187b      	adds	r3, r7, r1
 8006202:	7a9b      	ldrb	r3, [r3, #10]
 8006204:	b21b      	sxth	r3, r3
 8006206:	4313      	orrs	r3, r2
 8006208:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 800620e:	187b      	adds	r3, r7, r1
 8006210:	7b5b      	ldrb	r3, [r3, #13]
 8006212:	b21b      	sxth	r3, r3
 8006214:	021b      	lsls	r3, r3, #8
 8006216:	b21a      	sxth	r2, r3
 8006218:	187b      	adds	r3, r7, r1
 800621a:	7b1b      	ldrb	r3, [r3, #12]
 800621c:	b21b      	sxth	r3, r3
 800621e:	4313      	orrs	r3, r2
 8006220:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8006226:	0008      	movs	r0, r1
 8006228:	183b      	adds	r3, r7, r0
 800622a:	7bdb      	ldrb	r3, [r3, #15]
 800622c:	b259      	sxtb	r1, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	222e      	movs	r2, #46	@ 0x2e
 8006232:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8006234:	183b      	adds	r3, r7, r0
 8006236:	7b9b      	ldrb	r3, [r3, #14]
 8006238:	b259      	sxtb	r1, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	222f      	movs	r2, #47	@ 0x2f
 800623e:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8006240:	183b      	adds	r3, r7, r0
 8006242:	7cdb      	ldrb	r3, [r3, #19]
 8006244:	b21b      	sxth	r3, r3
 8006246:	021b      	lsls	r3, r3, #8
 8006248:	b21a      	sxth	r2, r3
 800624a:	183b      	adds	r3, r7, r0
 800624c:	7c9b      	ldrb	r3, [r3, #18]
 800624e:	b21b      	sxth	r3, r3
 8006250:	4313      	orrs	r3, r2
 8006252:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8006258:	183b      	adds	r3, r7, r0
 800625a:	7d5b      	ldrb	r3, [r3, #21]
 800625c:	b21b      	sxth	r3, r3
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	b21a      	sxth	r2, r3
 8006262:	183b      	adds	r3, r7, r0
 8006264:	7d1b      	ldrb	r3, [r3, #20]
 8006266:	b21b      	sxth	r3, r3
 8006268:	4313      	orrs	r3, r2
 800626a:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8006270:	183b      	adds	r3, r7, r0
 8006272:	7d99      	ldrb	r1, [r3, #22]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2234      	movs	r2, #52	@ 0x34
 8006278:	5499      	strb	r1, [r3, r2]

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 800627a:	183b      	adds	r3, r7, r0
 800627c:	7e5b      	ldrb	r3, [r3, #25]
 800627e:	b21b      	sxth	r3, r3
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8006284:	183b      	adds	r3, r7, r0
 8006286:	7e1b      	ldrb	r3, [r3, #24]
 8006288:	b21b      	sxth	r3, r3
 800628a:	210f      	movs	r1, #15
 800628c:	400b      	ands	r3, r1
 800628e:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8006290:	4313      	orrs	r3, r2
 8006292:	b21b      	sxth	r3, r3
 8006294:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 800629a:	183b      	adds	r3, r7, r0
 800629c:	7ddb      	ldrb	r3, [r3, #23]
 800629e:	b21b      	sxth	r3, r3
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	b21a      	sxth	r2, r3
 80062a4:	183b      	adds	r3, r7, r0
 80062a6:	7e1b      	ldrb	r3, [r3, #24]
 80062a8:	091b      	lsrs	r3, r3, #4
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	b21b      	sxth	r3, r3
 80062ae:	4313      	orrs	r3, r2
 80062b0:	b21b      	sxth	r3, r3
 80062b2:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 80062b8:	183b      	adds	r3, r7, r0
 80062ba:	7e9b      	ldrb	r3, [r3, #26]
 80062bc:	b25a      	sxtb	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 80062c2:	183b      	adds	r3, r7, r0
 80062c4:	7edb      	ldrb	r3, [r3, #27]
 80062c6:	b25a      	sxtb	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 80062cc:	183b      	adds	r3, r7, r0
 80062ce:	7f1b      	ldrb	r3, [r3, #28]
 80062d0:	b25a      	sxtb	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 80062d6:	183b      	adds	r3, r7, r0
 80062d8:	7f5a      	ldrb	r2, [r3, #29]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 80062de:	183b      	adds	r3, r7, r0
 80062e0:	7f9b      	ldrb	r3, [r3, #30]
 80062e2:	b25a      	sxtb	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 80062e8:	183b      	adds	r3, r7, r0
 80062ea:	2223      	movs	r2, #35	@ 0x23
 80062ec:	5c9b      	ldrb	r3, [r3, r2]
 80062ee:	b25a      	sxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 80062f4:	183b      	adds	r3, r7, r0
 80062f6:	2222      	movs	r2, #34	@ 0x22
 80062f8:	5c9b      	ldrb	r3, [r3, r2]
 80062fa:	b21b      	sxth	r3, r3
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	b21a      	sxth	r2, r3
 8006300:	183b      	adds	r3, r7, r0
 8006302:	2121      	movs	r1, #33	@ 0x21
 8006304:	5c5b      	ldrb	r3, [r3, r1]
 8006306:	b21b      	sxth	r3, r3
 8006308:	4313      	orrs	r3, r2
 800630a:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8006310:	183b      	adds	r3, r7, r0
 8006312:	2224      	movs	r2, #36	@ 0x24
 8006314:	5c9b      	ldrb	r3, [r3, r2]
 8006316:	b25a      	sxtb	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 800631c:	183b      	adds	r3, r7, r0
 800631e:	2227      	movs	r2, #39	@ 0x27
 8006320:	5c9b      	ldrb	r3, [r3, r2]
 8006322:	001a      	movs	r2, r3
 8006324:	2330      	movs	r3, #48	@ 0x30
 8006326:	4013      	ands	r3, r2
 8006328:	d500      	bpl.n	800632c <get_calib_data+0x232>
 800632a:	330f      	adds	r3, #15
 800632c:	111b      	asrs	r3, r3, #4
 800632e:	b2d9      	uxtb	r1, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	223c      	movs	r2, #60	@ 0x3c
 8006334:	5499      	strb	r1, [r3, r2]
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8006336:	200c      	movs	r0, #12
 8006338:	183b      	adds	r3, r7, r0
 800633a:	2225      	movs	r2, #37	@ 0x25
 800633c:	5c9b      	ldrb	r3, [r3, r2]
 800633e:	b259      	sxtb	r1, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	223d      	movs	r2, #61	@ 0x3d
 8006344:	5499      	strb	r1, [r3, r2]
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8006346:	183b      	adds	r3, r7, r0
 8006348:	2229      	movs	r2, #41	@ 0x29
 800634a:	5c9b      	ldrb	r3, [r3, r2]
 800634c:	b25b      	sxtb	r3, r3
 800634e:	111b      	asrs	r3, r3, #4
 8006350:	b259      	sxtb	r1, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	223e      	movs	r2, #62	@ 0x3e
 8006356:	5499      	strb	r1, [r3, r2]
    }

    return rslt;
 8006358:	2337      	movs	r3, #55	@ 0x37
 800635a:	18fb      	adds	r3, r7, r3
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	b25b      	sxtb	r3, r3
}
 8006360:	0018      	movs	r0, r3
 8006362:	46bd      	mov	sp, r7
 8006364:	b00f      	add	sp, #60	@ 0x3c
 8006366:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006368 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8006368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8006370:	250e      	movs	r5, #14
 8006372:	197b      	adds	r3, r7, r5
 8006374:	2200      	movs	r2, #0
 8006376:	701a      	strb	r2, [r3, #0]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8006378:	260f      	movs	r6, #15
 800637a:	19bc      	adds	r4, r7, r6
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	1979      	adds	r1, r7, r5
 8006380:	2201      	movs	r2, #1
 8006382:	20f0      	movs	r0, #240	@ 0xf0
 8006384:	f7fd fdd0 	bl	8003f28 <bme68x_get_regs>
 8006388:	0003      	movs	r3, r0
 800638a:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 800638c:	19bb      	adds	r3, r7, r6
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	b25b      	sxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <read_variant_id+0x38>
    {
        dev->variant_id = reg_data;
 8006396:	197b      	adds	r3, r7, r5
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	001a      	movs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 80063a0:	230f      	movs	r3, #15
 80063a2:	18fb      	adds	r3, r7, r3
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	b25b      	sxtb	r3, r3
}
 80063a8:	0018      	movs	r0, r3
 80063aa:	46bd      	mov	sp, r7
 80063ac:	b005      	add	sp, #20
 80063ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063b0 <user_delay_us>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void user_delay_us(uint32_t period, void *intf_ptr)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
    uint32_t start = HAL_GetTick();
 80063ba:	f001 f915 	bl	80075e8 <HAL_GetTick>
 80063be:	0003      	movs	r3, r0
 80063c0:	60fb      	str	r3, [r7, #12]
    while ((HAL_GetTick() - start) * 1000 < period);
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	f001 f910 	bl	80075e8 <HAL_GetTick>
 80063c8:	0002      	movs	r2, r0
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	1ad2      	subs	r2, r2, r3
 80063ce:	0013      	movs	r3, r2
 80063d0:	015b      	lsls	r3, r3, #5
 80063d2:	1a9b      	subs	r3, r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	189b      	adds	r3, r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	001a      	movs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4293      	cmp	r3, r2
 80063e0:	d8f0      	bhi.n	80063c4 <user_delay_us+0x14>
}
 80063e2:	46c0      	nop			@ (mov r8, r8)
 80063e4:	46c0      	nop			@ (mov r8, r8)
 80063e6:	46bd      	mov	sp, r7
 80063e8:	b004      	add	sp, #16
 80063ea:	bd80      	pop	{r7, pc}

080063ec <user_i2c_read>:

static int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 80063ec:	b5b0      	push	{r4, r5, r7, lr}
 80063ee:	b08e      	sub	sp, #56	@ 0x38
 80063f0:	af04      	add	r7, sp, #16
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	210f      	movs	r1, #15
 80063fa:	187b      	adds	r3, r7, r1
 80063fc:	1c02      	adds	r2, r0, #0
 80063fe:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_I2C_Mem_Read(hi2c, BME68X_I2C_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY) != HAL_OK) {
 8006404:	187b      	adds	r3, r7, r1
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	b299      	uxth	r1, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	b29b      	uxth	r3, r3
 800640e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006410:	2201      	movs	r2, #1
 8006412:	4252      	negs	r2, r2
 8006414:	9202      	str	r2, [sp, #8]
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	2301      	movs	r3, #1
 800641e:	000a      	movs	r2, r1
 8006420:	21ee      	movs	r1, #238	@ 0xee
 8006422:	f001 fd35 	bl	8007e90 <HAL_I2C_Mem_Read>
 8006426:	1e03      	subs	r3, r0, #0
 8006428:	d017      	beq.n	800645a <user_i2c_read+0x6e>
        char err[] = "I2C read failed\r\n";
 800642a:	2510      	movs	r5, #16
 800642c:	197b      	adds	r3, r7, r5
 800642e:	4a0d      	ldr	r2, [pc, #52]	@ (8006464 <user_i2c_read+0x78>)
 8006430:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006432:	c313      	stmia	r3!, {r0, r1, r4}
 8006434:	6811      	ldr	r1, [r2, #0]
 8006436:	6019      	str	r1, [r3, #0]
 8006438:	8892      	ldrh	r2, [r2, #4]
 800643a:	809a      	strh	r2, [r3, #4]
        HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 800643c:	197b      	adds	r3, r7, r5
 800643e:	0018      	movs	r0, r3
 8006440:	f7f9 fe6a 	bl	8000118 <strlen>
 8006444:	0003      	movs	r3, r0
 8006446:	b29a      	uxth	r2, r3
 8006448:	2301      	movs	r3, #1
 800644a:	425b      	negs	r3, r3
 800644c:	1979      	adds	r1, r7, r5
 800644e:	4806      	ldr	r0, [pc, #24]	@ (8006468 <user_i2c_read+0x7c>)
 8006450:	f003 fd14 	bl	8009e7c <HAL_UART_Transmit>
        return -1;
 8006454:	2301      	movs	r3, #1
 8006456:	425b      	negs	r3, r3
 8006458:	e000      	b.n	800645c <user_i2c_read+0x70>
    }
    return 0;
 800645a:	2300      	movs	r3, #0
}
 800645c:	0018      	movs	r0, r3
 800645e:	46bd      	mov	sp, r7
 8006460:	b00a      	add	sp, #40	@ 0x28
 8006462:	bdb0      	pop	{r4, r5, r7, pc}
 8006464:	0800e6f0 	.word	0x0800e6f0
 8006468:	2000069c 	.word	0x2000069c

0800646c <user_i2c_write>:

static int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	@ 0x28
 8006470:	af04      	add	r7, sp, #16
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	607a      	str	r2, [r7, #4]
 8006476:	603b      	str	r3, [r7, #0]
 8006478:	210f      	movs	r1, #15
 800647a:	187b      	adds	r3, r7, r1
 800647c:	1c02      	adds	r2, r0, #0
 800647e:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	617b      	str	r3, [r7, #20]
    if (HAL_I2C_Mem_Write(hi2c, BME68X_I2C_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, len, HAL_MAX_DELAY) != HAL_OK)
 8006484:	187b      	adds	r3, r7, r1
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	b299      	uxth	r1, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	b29b      	uxth	r3, r3
 800648e:	6978      	ldr	r0, [r7, #20]
 8006490:	2201      	movs	r2, #1
 8006492:	4252      	negs	r2, r2
 8006494:	9202      	str	r2, [sp, #8]
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	2301      	movs	r3, #1
 800649e:	000a      	movs	r2, r1
 80064a0:	21ee      	movs	r1, #238	@ 0xee
 80064a2:	f001 fbc7 	bl	8007c34 <HAL_I2C_Mem_Write>
 80064a6:	1e03      	subs	r3, r0, #0
 80064a8:	d002      	beq.n	80064b0 <user_i2c_write+0x44>
        return -1;
 80064aa:	2301      	movs	r3, #1
 80064ac:	425b      	negs	r3, r3
 80064ae:	e000      	b.n	80064b2 <user_i2c_write+0x46>
    return 0;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	0018      	movs	r0, r3
 80064b4:	46bd      	mov	sp, r7
 80064b6:	b006      	add	sp, #24
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <log_debug>:

void log_debug(const char *msg) {
 80064bc:	b590      	push	{r4, r7, lr}
 80064be:	b0b7      	sub	sp, #220	@ 0xdc
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
    bool isDebug = true;
 80064c4:	21d7      	movs	r1, #215	@ 0xd7
 80064c6:	187b      	adds	r3, r7, r1
 80064c8:	2201      	movs	r2, #1
 80064ca:	701a      	strb	r2, [r3, #0]
    char buffer[200];
    if(isDebug)
 80064cc:	187b      	adds	r3, r7, r1
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d012      	beq.n	80064fa <log_debug+0x3e>
    {
        snprintf(buffer, sizeof(buffer), "[DEBUG] %s\r\n", msg);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a0b      	ldr	r2, [pc, #44]	@ (8006504 <log_debug+0x48>)
 80064d8:	240c      	movs	r4, #12
 80064da:	1938      	adds	r0, r7, r4
 80064dc:	21c8      	movs	r1, #200	@ 0xc8
 80064de:	f005 f8c3 	bl	800b668 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80064e2:	193b      	adds	r3, r7, r4
 80064e4:	0018      	movs	r0, r3
 80064e6:	f7f9 fe17 	bl	8000118 <strlen>
 80064ea:	0003      	movs	r3, r0
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	2301      	movs	r3, #1
 80064f0:	425b      	negs	r3, r3
 80064f2:	1939      	adds	r1, r7, r4
 80064f4:	4804      	ldr	r0, [pc, #16]	@ (8006508 <log_debug+0x4c>)
 80064f6:	f003 fcc1 	bl	8009e7c <HAL_UART_Transmit>
    }
}
 80064fa:	46c0      	nop			@ (mov r8, r8)
 80064fc:	46bd      	mov	sp, r7
 80064fe:	b037      	add	sp, #220	@ 0xdc
 8006500:	bd90      	pop	{r4, r7, pc}
 8006502:	46c0      	nop			@ (mov r8, r8)
 8006504:	0800e704 	.word	0x0800e704
 8006508:	2000069c 	.word	0x2000069c

0800650c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800650c:	b5b0      	push	{r4, r5, r7, lr}
 800650e:	b0de      	sub	sp, #376	@ 0x178
 8006510:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  log_debug("System Initialization Started");
 8006512:	4bc7      	ldr	r3, [pc, #796]	@ (8006830 <main+0x324>)
 8006514:	0018      	movs	r0, r3
 8006516:	f7ff ffd1 	bl	80064bc <log_debug>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800651a:	f000 ffe9 	bl	80074f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800651e:	f000 fc3f 	bl	8006da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006522:	f000 fd51 	bl	8006fc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8006526:	f000 fd01 	bl	8006f2c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800652a:	f000 fc81 	bl	8006e30 <MX_I2C1_Init>
  MX_SPI1_Init();
 800652e:	f000 fcbf 	bl	8006eb0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // --- SX1262 LoRa HAT Initialization ---
  SX1262_Get_st()->Busy_Pin  = LORA_BUSY_PIN;
 8006532:	f7fd f945 	bl	80037c0 <SX1262_Get_st>
 8006536:	0003      	movs	r3, r0
 8006538:	2278      	movs	r2, #120	@ 0x78
 800653a:	2104      	movs	r1, #4
 800653c:	5299      	strh	r1, [r3, r2]
  SX1262_Get_st()->Busy_Port = LORA_BUSY_PORT;
 800653e:	f7fd f93f 	bl	80037c0 <SX1262_Get_st>
 8006542:	0003      	movs	r3, r0
 8006544:	4abb      	ldr	r2, [pc, #748]	@ (8006834 <main+0x328>)
 8006546:	675a      	str	r2, [r3, #116]	@ 0x74
  SX1262_Get_st()->NSS_Pin   = LORA_NSS_PIN;
 8006548:	f7fd f93a 	bl	80037c0 <SX1262_Get_st>
 800654c:	0003      	movs	r3, r0
 800654e:	2270      	movs	r2, #112	@ 0x70
 8006550:	2101      	movs	r1, #1
 8006552:	5299      	strh	r1, [r3, r2]
  SX1262_Get_st()->NSS_Port  = LORA_NSS_PORT;
 8006554:	f7fd f934 	bl	80037c0 <SX1262_Get_st>
 8006558:	0003      	movs	r3, r0
 800655a:	4ab6      	ldr	r2, [pc, #728]	@ (8006834 <main+0x328>)
 800655c:	66da      	str	r2, [r3, #108]	@ 0x6c
  SX1262_Get_st()->Reset_Pin = LORA_RST_PIN;
 800655e:	f7fd f92f 	bl	80037c0 <SX1262_Get_st>
 8006562:	0003      	movs	r3, r0
 8006564:	2268      	movs	r2, #104	@ 0x68
 8006566:	2102      	movs	r1, #2
 8006568:	5299      	strh	r1, [r3, r2]
  SX1262_Get_st()->Reset_Port= LORA_RST_PORT;
 800656a:	f7fd f929 	bl	80037c0 <SX1262_Get_st>
 800656e:	0003      	movs	r3, r0
 8006570:	4ab0      	ldr	r2, [pc, #704]	@ (8006834 <main+0x328>)
 8006572:	665a      	str	r2, [r3, #100]	@ 0x64
  SX1262_Get_st()->SPI = hspi1;
 8006574:	f7fd f924 	bl	80037c0 <SX1262_Get_st>
 8006578:	0002      	movs	r2, r0
 800657a:	4baf      	ldr	r3, [pc, #700]	@ (8006838 <main+0x32c>)
 800657c:	0010      	movs	r0, r2
 800657e:	0019      	movs	r1, r3
 8006580:	2364      	movs	r3, #100	@ 0x64
 8006582:	001a      	movs	r2, r3
 8006584:	f005 fae9 	bl	800bb5a <memcpy>

  log_debug("Initializing SX1262...");
 8006588:	4bac      	ldr	r3, [pc, #688]	@ (800683c <main+0x330>)
 800658a:	0018      	movs	r0, r3
 800658c:	f7ff ff96 	bl	80064bc <log_debug>
  SX1262_Init();
 8006590:	f7fd fa1e 	bl	80039d0 <SX1262_Init>

  uint8_t status = SX1262_getstatus();
 8006594:	25af      	movs	r5, #175	@ 0xaf
 8006596:	006d      	lsls	r5, r5, #1
 8006598:	197c      	adds	r4, r7, r5
 800659a:	f7fd fae5 	bl	8003b68 <SX1262_getstatus>
 800659e:	0003      	movs	r3, r0
 80065a0:	7023      	strb	r3, [r4, #0]
  char msg[64];
  snprintf(msg, sizeof(msg), "SX1262 status: 0x%02X\r\n", status);
 80065a2:	197b      	adds	r3, r7, r5
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	4aa6      	ldr	r2, [pc, #664]	@ (8006840 <main+0x334>)
 80065a8:	2486      	movs	r4, #134	@ 0x86
 80065aa:	0064      	lsls	r4, r4, #1
 80065ac:	1938      	adds	r0, r7, r4
 80065ae:	2140      	movs	r1, #64	@ 0x40
 80065b0:	f005 f85a 	bl	800b668 <sniprintf>
  log_debug(msg);
 80065b4:	193b      	adds	r3, r7, r4
 80065b6:	0018      	movs	r0, r3
 80065b8:	f7ff ff80 	bl	80064bc <log_debug>

  // --- Test Transmit ---
  uint8_t hello[] = "HELLO";
 80065bc:	1d7b      	adds	r3, r7, #5
 80065be:	33ff      	adds	r3, #255	@ 0xff
 80065c0:	4aa0      	ldr	r2, [pc, #640]	@ (8006844 <main+0x338>)
 80065c2:	6811      	ldr	r1, [r2, #0]
 80065c4:	6019      	str	r1, [r3, #0]
 80065c6:	8892      	ldrh	r2, [r2, #4]
 80065c8:	809a      	strh	r2, [r3, #4]
  SX1262_Transmit(hello, sizeof(hello));
 80065ca:	1d7b      	adds	r3, r7, #5
 80065cc:	33ff      	adds	r3, #255	@ 0xff
 80065ce:	2106      	movs	r1, #6
 80065d0:	0018      	movs	r0, r3
 80065d2:	f7fd f969 	bl	80038a8 <SX1262_Transmit>
  log_debug("SX1262 transmit called (no status)");
 80065d6:	4b9c      	ldr	r3, [pc, #624]	@ (8006848 <main+0x33c>)
 80065d8:	0018      	movs	r0, r3
 80065da:	f7ff ff6f 	bl	80064bc <log_debug>

  log_debug("Initializing BME68x...");
 80065de:	4b9b      	ldr	r3, [pc, #620]	@ (800684c <main+0x340>)
 80065e0:	0018      	movs	r0, r3
 80065e2:	f7ff ff6b 	bl	80064bc <log_debug>

  // Set up BME68x sensor interface
  gas_sensor.intf = BME68X_I2C_INTF;
 80065e6:	4b9a      	ldr	r3, [pc, #616]	@ (8006850 <main+0x344>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	731a      	strb	r2, [r3, #12]
  gas_sensor.read = user_i2c_read;
 80065ec:	4b98      	ldr	r3, [pc, #608]	@ (8006850 <main+0x344>)
 80065ee:	4a99      	ldr	r2, [pc, #612]	@ (8006854 <main+0x348>)
 80065f0:	641a      	str	r2, [r3, #64]	@ 0x40
  gas_sensor.write = user_i2c_write;
 80065f2:	4b97      	ldr	r3, [pc, #604]	@ (8006850 <main+0x344>)
 80065f4:	4a98      	ldr	r2, [pc, #608]	@ (8006858 <main+0x34c>)
 80065f6:	645a      	str	r2, [r3, #68]	@ 0x44
  gas_sensor.delay_us = user_delay_us;
 80065f8:	4b95      	ldr	r3, [pc, #596]	@ (8006850 <main+0x344>)
 80065fa:	4a98      	ldr	r2, [pc, #608]	@ (800685c <main+0x350>)
 80065fc:	649a      	str	r2, [r3, #72]	@ 0x48
  gas_sensor.intf_ptr = &hi2c1;
 80065fe:	4b94      	ldr	r3, [pc, #592]	@ (8006850 <main+0x344>)
 8006600:	4a97      	ldr	r2, [pc, #604]	@ (8006860 <main+0x354>)
 8006602:	605a      	str	r2, [r3, #4]

  rslt = bme68x_init(&gas_sensor);
 8006604:	4b92      	ldr	r3, [pc, #584]	@ (8006850 <main+0x344>)
 8006606:	0018      	movs	r0, r3
 8006608:	f7fd fba6 	bl	8003d58 <bme68x_init>
 800660c:	0003      	movs	r3, r0
 800660e:	001a      	movs	r2, r3
 8006610:	4b94      	ldr	r3, [pc, #592]	@ (8006864 <main+0x358>)
 8006612:	701a      	strb	r2, [r3, #0]
  if (rslt != BME68X_OK) {
 8006614:	4b93      	ldr	r3, [pc, #588]	@ (8006864 <main+0x358>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	b25b      	sxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d005      	beq.n	800662a <main+0x11e>
      log_debug("Sensor initialization failed. Halting.");
 800661e:	4b92      	ldr	r3, [pc, #584]	@ (8006868 <main+0x35c>)
 8006620:	0018      	movs	r0, r3
 8006622:	f7ff ff4b 	bl	80064bc <log_debug>
      while (1);
 8006626:	46c0      	nop			@ (mov r8, r8)
 8006628:	e7fd      	b.n	8006626 <main+0x11a>
  }

  uint8_t chip_id = 0;
 800662a:	1d3b      	adds	r3, r7, #4
 800662c:	33ff      	adds	r3, #255	@ 0xff
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
  rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &chip_id, 1, &gas_sensor);
 8006632:	4b87      	ldr	r3, [pc, #540]	@ (8006850 <main+0x344>)
 8006634:	1d39      	adds	r1, r7, #4
 8006636:	31ff      	adds	r1, #255	@ 0xff
 8006638:	2201      	movs	r2, #1
 800663a:	20d0      	movs	r0, #208	@ 0xd0
 800663c:	f7fd fc74 	bl	8003f28 <bme68x_get_regs>
 8006640:	0003      	movs	r3, r0
 8006642:	001a      	movs	r2, r3
 8006644:	4b87      	ldr	r3, [pc, #540]	@ (8006864 <main+0x358>)
 8006646:	701a      	strb	r2, [r3, #0]
  if (rslt == BME68X_OK) {
 8006648:	4b86      	ldr	r3, [pc, #536]	@ (8006864 <main+0x358>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	b25b      	sxtb	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d111      	bne.n	8006676 <main+0x16a>
      char id_msg[64];
      snprintf(id_msg, sizeof(id_msg), "BME68x Chip ID: 0x%02X (Expected: 0x%02X)", chip_id, BME68X_CHIP_ID);
 8006652:	1d3b      	adds	r3, r7, #4
 8006654:	33ff      	adds	r3, #255	@ 0xff
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	0019      	movs	r1, r3
 800665a:	4a84      	ldr	r2, [pc, #528]	@ (800686c <main+0x360>)
 800665c:	24a4      	movs	r4, #164	@ 0xa4
 800665e:	1938      	adds	r0, r7, r4
 8006660:	2361      	movs	r3, #97	@ 0x61
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	000b      	movs	r3, r1
 8006666:	2140      	movs	r1, #64	@ 0x40
 8006668:	f004 fffe 	bl	800b668 <sniprintf>
      log_debug(id_msg);
 800666c:	193b      	adds	r3, r7, r4
 800666e:	0018      	movs	r0, r3
 8006670:	f7ff ff24 	bl	80064bc <log_debug>
 8006674:	e003      	b.n	800667e <main+0x172>
  } else {
      log_debug("Failed to read Chip ID");
 8006676:	4b7e      	ldr	r3, [pc, #504]	@ (8006870 <main+0x364>)
 8006678:	0018      	movs	r0, r3
 800667a:	f7ff ff1f 	bl	80064bc <log_debug>
  }

  log_debug("Configuring BME68x sensor...");
 800667e:	4b7d      	ldr	r3, [pc, #500]	@ (8006874 <main+0x368>)
 8006680:	0018      	movs	r0, r3
 8006682:	f7ff ff1b 	bl	80064bc <log_debug>

  // Oversampling and filter config
  conf.os_hum = BME68X_OS_2X;
 8006686:	4b7c      	ldr	r3, [pc, #496]	@ (8006878 <main+0x36c>)
 8006688:	2202      	movs	r2, #2
 800668a:	701a      	strb	r2, [r3, #0]
  conf.os_temp = BME68X_OS_8X;
 800668c:	4b7a      	ldr	r3, [pc, #488]	@ (8006878 <main+0x36c>)
 800668e:	2204      	movs	r2, #4
 8006690:	705a      	strb	r2, [r3, #1]
  conf.os_pres = BME68X_OS_4X;
 8006692:	4b79      	ldr	r3, [pc, #484]	@ (8006878 <main+0x36c>)
 8006694:	2203      	movs	r2, #3
 8006696:	709a      	strb	r2, [r3, #2]
  conf.filter = BME68X_FILTER_SIZE_3;
 8006698:	4b77      	ldr	r3, [pc, #476]	@ (8006878 <main+0x36c>)
 800669a:	2202      	movs	r2, #2
 800669c:	70da      	strb	r2, [r3, #3]

  if (bme68x_set_conf(&conf, &gas_sensor) != BME68X_OK)
 800669e:	4a6c      	ldr	r2, [pc, #432]	@ (8006850 <main+0x344>)
 80066a0:	4b75      	ldr	r3, [pc, #468]	@ (8006878 <main+0x36c>)
 80066a2:	0011      	movs	r1, r2
 80066a4:	0018      	movs	r0, r3
 80066a6:	f7fd fcf1 	bl	800408c <bme68x_set_conf>
 80066aa:	1e03      	subs	r3, r0, #0
 80066ac:	d003      	beq.n	80066b6 <main+0x1aa>
      log_debug("Failed to apply sensor config");
 80066ae:	4b73      	ldr	r3, [pc, #460]	@ (800687c <main+0x370>)
 80066b0:	0018      	movs	r0, r3
 80066b2:	f7ff ff03 	bl	80064bc <log_debug>

  // Heater configuration
  heatr_conf.enable = BME68X_ENABLE;
 80066b6:	4b72      	ldr	r3, [pc, #456]	@ (8006880 <main+0x374>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	701a      	strb	r2, [r3, #0]
  heatr_conf.heatr_temp = 300;
 80066bc:	4b70      	ldr	r3, [pc, #448]	@ (8006880 <main+0x374>)
 80066be:	2296      	movs	r2, #150	@ 0x96
 80066c0:	0052      	lsls	r2, r2, #1
 80066c2:	805a      	strh	r2, [r3, #2]
  heatr_conf.heatr_dur = 100;
 80066c4:	4b6e      	ldr	r3, [pc, #440]	@ (8006880 <main+0x374>)
 80066c6:	2264      	movs	r2, #100	@ 0x64
 80066c8:	809a      	strh	r2, [r3, #4]

  if (bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &gas_sensor) != BME68X_OK)
 80066ca:	4a61      	ldr	r2, [pc, #388]	@ (8006850 <main+0x344>)
 80066cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006880 <main+0x374>)
 80066ce:	0019      	movs	r1, r3
 80066d0:	2001      	movs	r0, #1
 80066d2:	f7fe f889 	bl	80047e8 <bme68x_set_heatr_conf>
 80066d6:	1e03      	subs	r3, r0, #0
 80066d8:	d003      	beq.n	80066e2 <main+0x1d6>
      log_debug("Failed to apply heater config");
 80066da:	4b6a      	ldr	r3, [pc, #424]	@ (8006884 <main+0x378>)
 80066dc:	0018      	movs	r0, r3
 80066de:	f7ff feed 	bl	80064bc <log_debug>

  log_debug("BME68x configuration complete.");
 80066e2:	4b69      	ldr	r3, [pc, #420]	@ (8006888 <main+0x37c>)
 80066e4:	0018      	movs	r0, r3
 80066e6:	f7ff fee9 	bl	80064bc <log_debug>

  const char *intro_msg =
 80066ea:	4b68      	ldr	r3, [pc, #416]	@ (800688c <main+0x380>)
 80066ec:	24ac      	movs	r4, #172	@ 0xac
 80066ee:	0064      	lsls	r4, r4, #1
 80066f0:	193a      	adds	r2, r7, r4
 80066f2:	6013      	str	r3, [r2, #0]
    "  mul a b [c ...]  - Multiply numbers\r\n"
    "  div a b [c ...]  - Divide numbers (left to right)\r\n"
    "  e.g., add 2 3 4 gives 9\r\n"
    "\r\nType 'help' to show this message again.\r\n"
    "===============================\r\n";
   HAL_UART_Transmit(&huart2, (uint8_t *)intro_msg, strlen(intro_msg), HAL_MAX_DELAY);
 80066f4:	193b      	adds	r3, r7, r4
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	0018      	movs	r0, r3
 80066fa:	f7f9 fd0d 	bl	8000118 <strlen>
 80066fe:	0003      	movs	r3, r0
 8006700:	b29a      	uxth	r2, r3
 8006702:	2301      	movs	r3, #1
 8006704:	425b      	negs	r3, r3
 8006706:	1939      	adds	r1, r7, r4
 8006708:	6809      	ldr	r1, [r1, #0]
 800670a:	4861      	ldr	r0, [pc, #388]	@ (8006890 <main+0x384>)
 800670c:	f003 fbb6 	bl	8009e7c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      char rx_buffer[32] = {0};
 8006710:	4b60      	ldr	r3, [pc, #384]	@ (8006894 <main+0x388>)
 8006712:	22b8      	movs	r2, #184	@ 0xb8
 8006714:	0052      	lsls	r2, r2, #1
 8006716:	189b      	adds	r3, r3, r2
 8006718:	19db      	adds	r3, r3, r7
 800671a:	0018      	movs	r0, r3
 800671c:	2320      	movs	r3, #32
 800671e:	001a      	movs	r2, r3
 8006720:	2100      	movs	r1, #0
 8006722:	f005 f913 	bl	800b94c <memset>
      uint8_t idx = 0;
 8006726:	2370      	movs	r3, #112	@ 0x70
 8006728:	33ff      	adds	r3, #255	@ 0xff
 800672a:	18fb      	adds	r3, r7, r3
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
      char ch;

      while (1) {
          HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8006730:	2301      	movs	r3, #1
 8006732:	425b      	negs	r3, r3
 8006734:	1cf9      	adds	r1, r7, #3
 8006736:	31ff      	adds	r1, #255	@ 0xff
 8006738:	4855      	ldr	r0, [pc, #340]	@ (8006890 <main+0x384>)
 800673a:	2201      	movs	r2, #1
 800673c:	f003 fc42 	bl	8009fc4 <HAL_UART_Receive>
          HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY); // echo
 8006740:	2301      	movs	r3, #1
 8006742:	425b      	negs	r3, r3
 8006744:	1cf9      	adds	r1, r7, #3
 8006746:	31ff      	adds	r1, #255	@ 0xff
 8006748:	4851      	ldr	r0, [pc, #324]	@ (8006890 <main+0x384>)
 800674a:	2201      	movs	r2, #1
 800674c:	f003 fb96 	bl	8009e7c <HAL_UART_Transmit>

          if (ch == '\r' || ch == '\n') {
 8006750:	1cfb      	adds	r3, r7, #3
 8006752:	33ff      	adds	r3, #255	@ 0xff
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2b0d      	cmp	r3, #13
 8006758:	d004      	beq.n	8006764 <main+0x258>
 800675a:	1cfb      	adds	r3, r7, #3
 800675c:	33ff      	adds	r3, #255	@ 0xff
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b0a      	cmp	r3, #10
 8006762:	d110      	bne.n	8006786 <main+0x27a>
              rx_buffer[idx] = '\0';
 8006764:	2370      	movs	r3, #112	@ 0x70
 8006766:	33ff      	adds	r3, #255	@ 0xff
 8006768:	18fb      	adds	r3, r7, r3
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	4a49      	ldr	r2, [pc, #292]	@ (8006894 <main+0x388>)
 800676e:	21b8      	movs	r1, #184	@ 0xb8
 8006770:	0049      	lsls	r1, r1, #1
 8006772:	1852      	adds	r2, r2, r1
 8006774:	19d2      	adds	r2, r2, r7
 8006776:	2100      	movs	r1, #0
 8006778:	54d1      	strb	r1, [r2, r3]
              break;
 800677a:	46c0      	nop			@ (mov r8, r8)
              rx_buffer[idx++] = ch;
          }
      }

      // Skip if empty input
      if (strlen(rx_buffer) == 0) {
 800677c:	1d3b      	adds	r3, r7, #4
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d116      	bne.n	80067b2 <main+0x2a6>
          continue;
 8006784:	e2fd      	b.n	8006d82 <main+0x876>
          } else if (idx < sizeof(rx_buffer) - 1) {
 8006786:	2270      	movs	r2, #112	@ 0x70
 8006788:	32ff      	adds	r2, #255	@ 0xff
 800678a:	18bb      	adds	r3, r7, r2
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b1e      	cmp	r3, #30
 8006790:	d8ce      	bhi.n	8006730 <main+0x224>
              rx_buffer[idx++] = ch;
 8006792:	18bb      	adds	r3, r7, r2
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	18ba      	adds	r2, r7, r2
 8006798:	1c59      	adds	r1, r3, #1
 800679a:	7011      	strb	r1, [r2, #0]
 800679c:	001a      	movs	r2, r3
 800679e:	1cfb      	adds	r3, r7, #3
 80067a0:	33ff      	adds	r3, #255	@ 0xff
 80067a2:	7819      	ldrb	r1, [r3, #0]
 80067a4:	4b3b      	ldr	r3, [pc, #236]	@ (8006894 <main+0x388>)
 80067a6:	20b8      	movs	r0, #184	@ 0xb8
 80067a8:	0040      	lsls	r0, r0, #1
 80067aa:	181b      	adds	r3, r3, r0
 80067ac:	19db      	adds	r3, r3, r7
 80067ae:	5499      	strb	r1, [r3, r2]
          HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80067b0:	e7be      	b.n	8006730 <main+0x224>
      }

      int duration = 0;
 80067b2:	2300      	movs	r3, #0
 80067b4:	22fc      	movs	r2, #252	@ 0xfc
 80067b6:	18ba      	adds	r2, r7, r2
 80067b8:	6013      	str	r3, [r2, #0]
      char mode[16] = {0};
 80067ba:	23ec      	movs	r3, #236	@ 0xec
 80067bc:	18fb      	adds	r3, r7, r3
 80067be:	0018      	movs	r0, r3
 80067c0:	2310      	movs	r3, #16
 80067c2:	001a      	movs	r2, r3
 80067c4:	2100      	movs	r1, #0
 80067c6:	f005 f8c1 	bl	800b94c <memset>

      if (strcmp(rx_buffer, "help") == 0) {
 80067ca:	4a33      	ldr	r2, [pc, #204]	@ (8006898 <main+0x38c>)
 80067cc:	1d3b      	adds	r3, r7, #4
 80067ce:	0011      	movs	r1, r2
 80067d0:	0018      	movs	r0, r3
 80067d2:	f7f9 fc97 	bl	8000104 <strcmp>
 80067d6:	1e03      	subs	r3, r0, #0
 80067d8:	d110      	bne.n	80067fc <main+0x2f0>
          HAL_UART_Transmit(&huart2, (uint8_t *)intro_msg, strlen(intro_msg), HAL_MAX_DELAY);
 80067da:	24ac      	movs	r4, #172	@ 0xac
 80067dc:	0064      	lsls	r4, r4, #1
 80067de:	193b      	adds	r3, r7, r4
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	0018      	movs	r0, r3
 80067e4:	f7f9 fc98 	bl	8000118 <strlen>
 80067e8:	0003      	movs	r3, r0
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	2301      	movs	r3, #1
 80067ee:	425b      	negs	r3, r3
 80067f0:	1939      	adds	r1, r7, r4
 80067f2:	6809      	ldr	r1, [r1, #0]
 80067f4:	4826      	ldr	r0, [pc, #152]	@ (8006890 <main+0x384>)
 80067f6:	f003 fb41 	bl	8009e7c <HAL_UART_Transmit>
          continue;
 80067fa:	e2c2      	b.n	8006d82 <main+0x876>
      }

      if (strcmp(rx_buffer, "help") == 0) {
 80067fc:	4a26      	ldr	r2, [pc, #152]	@ (8006898 <main+0x38c>)
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	0011      	movs	r1, r2
 8006802:	0018      	movs	r0, r3
 8006804:	f7f9 fc7e 	bl	8000104 <strcmp>
 8006808:	1e03      	subs	r3, r0, #0
 800680a:	d147      	bne.n	800689c <main+0x390>
        HAL_UART_Transmit(&huart2, (uint8_t *)intro_msg, strlen(intro_msg), HAL_MAX_DELAY);
 800680c:	24ac      	movs	r4, #172	@ 0xac
 800680e:	0064      	lsls	r4, r4, #1
 8006810:	193b      	adds	r3, r7, r4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	0018      	movs	r0, r3
 8006816:	f7f9 fc7f 	bl	8000118 <strlen>
 800681a:	0003      	movs	r3, r0
 800681c:	b29a      	uxth	r2, r3
 800681e:	2301      	movs	r3, #1
 8006820:	425b      	negs	r3, r3
 8006822:	1939      	adds	r1, r7, r4
 8006824:	6809      	ldr	r1, [r1, #0]
 8006826:	481a      	ldr	r0, [pc, #104]	@ (8006890 <main+0x384>)
 8006828:	f003 fb28 	bl	8009e7c <HAL_UART_Transmit>
        continue;
 800682c:	e2a9      	b.n	8006d82 <main+0x876>
 800682e:	46c0      	nop			@ (mov r8, r8)
 8006830:	0800e74c 	.word	0x0800e74c
 8006834:	50000400 	.word	0x50000400
 8006838:	20000638 	.word	0x20000638
 800683c:	0800e76c 	.word	0x0800e76c
 8006840:	0800e784 	.word	0x0800e784
 8006844:	0800ece4 	.word	0x0800ece4
 8006848:	0800e79c 	.word	0x0800e79c
 800684c:	0800e7c0 	.word	0x0800e7c0
 8006850:	20000730 	.word	0x20000730
 8006854:	080063ed 	.word	0x080063ed
 8006858:	0800646d 	.word	0x0800646d
 800685c:	080063b1 	.word	0x080063b1
 8006860:	200005e4 	.word	0x200005e4
 8006864:	200007e5 	.word	0x200007e5
 8006868:	0800e7d8 	.word	0x0800e7d8
 800686c:	0800e800 	.word	0x0800e800
 8006870:	0800e82c 	.word	0x0800e82c
 8006874:	0800e844 	.word	0x0800e844
 8006878:	20000780 	.word	0x20000780
 800687c:	0800e864 	.word	0x0800e864
 8006880:	20000788 	.word	0x20000788
 8006884:	0800e884 	.word	0x0800e884
 8006888:	0800e8a4 	.word	0x0800e8a4
 800688c:	0800e8c4 	.word	0x0800e8c4
 8006890:	2000069c 	.word	0x2000069c
 8006894:	fffffe94 	.word	0xfffffe94
 8006898:	0800eb9c 	.word	0x0800eb9c
    }
    
    char copy[64];
    strncpy(copy, rx_buffer, sizeof(copy));
 800689c:	1d39      	adds	r1, r7, #4
 800689e:	2424      	movs	r4, #36	@ 0x24
 80068a0:	193b      	adds	r3, r7, r4
 80068a2:	2240      	movs	r2, #64	@ 0x40
 80068a4:	0018      	movs	r0, r3
 80068a6:	f005 f859 	bl	800b95c <strncpy>
    char *token = strtok(copy, " ");
 80068aa:	4add      	ldr	r2, [pc, #884]	@ (8006c20 <main+0x714>)
 80068ac:	193b      	adds	r3, r7, r4
 80068ae:	0011      	movs	r1, r2
 80068b0:	0018      	movs	r0, r3
 80068b2:	f005 f867 	bl	800b984 <strtok>
 80068b6:	0003      	movs	r3, r0
 80068b8:	22aa      	movs	r2, #170	@ 0xaa
 80068ba:	0052      	lsls	r2, r2, #1
 80068bc:	18b9      	adds	r1, r7, r2
 80068be:	600b      	str	r3, [r1, #0]
    if (!token) continue;
 80068c0:	18bb      	adds	r3, r7, r2
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d100      	bne.n	80068ca <main+0x3be>
 80068c8:	e25a      	b.n	8006d80 <main+0x874>
    
    char op[4];
    strncpy(op, token, sizeof(op));
 80068ca:	18bb      	adds	r3, r7, r2
 80068cc:	6819      	ldr	r1, [r3, #0]
 80068ce:	24e8      	movs	r4, #232	@ 0xe8
 80068d0:	193b      	adds	r3, r7, r4
 80068d2:	2204      	movs	r2, #4
 80068d4:	0018      	movs	r0, r3
 80068d6:	f005 f841 	bl	800b95c <strncpy>
    
    if (strcmp(op, "add") == 0 || strcmp(op, "sub") == 0 || strcmp(op, "mul") == 0 || strcmp(op, "div") == 0) {
 80068da:	4ad2      	ldr	r2, [pc, #840]	@ (8006c24 <main+0x718>)
 80068dc:	193b      	adds	r3, r7, r4
 80068de:	0011      	movs	r1, r2
 80068e0:	0018      	movs	r0, r3
 80068e2:	f7f9 fc0f 	bl	8000104 <strcmp>
 80068e6:	1e03      	subs	r3, r0, #0
 80068e8:	d018      	beq.n	800691c <main+0x410>
 80068ea:	4acf      	ldr	r2, [pc, #828]	@ (8006c28 <main+0x71c>)
 80068ec:	193b      	adds	r3, r7, r4
 80068ee:	0011      	movs	r1, r2
 80068f0:	0018      	movs	r0, r3
 80068f2:	f7f9 fc07 	bl	8000104 <strcmp>
 80068f6:	1e03      	subs	r3, r0, #0
 80068f8:	d010      	beq.n	800691c <main+0x410>
 80068fa:	4acc      	ldr	r2, [pc, #816]	@ (8006c2c <main+0x720>)
 80068fc:	193b      	adds	r3, r7, r4
 80068fe:	0011      	movs	r1, r2
 8006900:	0018      	movs	r0, r3
 8006902:	f7f9 fbff 	bl	8000104 <strcmp>
 8006906:	1e03      	subs	r3, r0, #0
 8006908:	d008      	beq.n	800691c <main+0x410>
 800690a:	4ac9      	ldr	r2, [pc, #804]	@ (8006c30 <main+0x724>)
 800690c:	193b      	adds	r3, r7, r4
 800690e:	0011      	movs	r1, r2
 8006910:	0018      	movs	r0, r3
 8006912:	f7f9 fbf7 	bl	8000104 <strcmp>
 8006916:	1e03      	subs	r3, r0, #0
 8006918:	d000      	beq.n	800691c <main+0x410>
 800691a:	e0b4      	b.n	8006a86 <main+0x57a>
        int result = 0, value;
 800691c:	2300      	movs	r3, #0
 800691e:	22b4      	movs	r2, #180	@ 0xb4
 8006920:	0052      	lsls	r2, r2, #1
 8006922:	18ba      	adds	r2, r7, r2
 8006924:	6013      	str	r3, [r2, #0]
        bool first = true;
 8006926:	2368      	movs	r3, #104	@ 0x68
 8006928:	33ff      	adds	r3, #255	@ 0xff
 800692a:	18fb      	adds	r3, r7, r3
 800692c:	2201      	movs	r2, #1
 800692e:	701a      	strb	r2, [r3, #0]
        while ((token = strtok(NULL, " ")) != NULL) {
 8006930:	e083      	b.n	8006a3a <main+0x52e>
            if (sscanf(token, "%d", &value) != 1) {
 8006932:	23e4      	movs	r3, #228	@ 0xe4
 8006934:	18fa      	adds	r2, r7, r3
 8006936:	49bf      	ldr	r1, [pc, #764]	@ (8006c34 <main+0x728>)
 8006938:	23aa      	movs	r3, #170	@ 0xaa
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	18fb      	adds	r3, r7, r3
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	0018      	movs	r0, r3
 8006942:	f004 fec7 	bl	800b6d4 <siscanf>
 8006946:	0003      	movs	r3, r0
 8006948:	2b01      	cmp	r3, #1
 800694a:	d007      	beq.n	800695c <main+0x450>
                HAL_UART_Transmit(&huart2, (uint8_t *)"Invalid number\r\n", 17, HAL_MAX_DELAY);
 800694c:	2301      	movs	r3, #1
 800694e:	425b      	negs	r3, r3
 8006950:	49b9      	ldr	r1, [pc, #740]	@ (8006c38 <main+0x72c>)
 8006952:	48ba      	ldr	r0, [pc, #744]	@ (8006c3c <main+0x730>)
 8006954:	2211      	movs	r2, #17
 8006956:	f003 fa91 	bl	8009e7c <HAL_UART_Transmit>
                break;
 800695a:	e07d      	b.n	8006a58 <main+0x54c>
            }
    
            if (first) {
 800695c:	2268      	movs	r2, #104	@ 0x68
 800695e:	32ff      	adds	r2, #255	@ 0xff
 8006960:	18bb      	adds	r3, r7, r2
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <main+0x472>
                result = value;
 8006968:	23e4      	movs	r3, #228	@ 0xe4
 800696a:	18fb      	adds	r3, r7, r3
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	21b4      	movs	r1, #180	@ 0xb4
 8006970:	0049      	lsls	r1, r1, #1
 8006972:	1879      	adds	r1, r7, r1
 8006974:	600b      	str	r3, [r1, #0]
                first = false;
 8006976:	18bb      	adds	r3, r7, r2
 8006978:	2200      	movs	r2, #0
 800697a:	701a      	strb	r2, [r3, #0]
                continue;
 800697c:	e05d      	b.n	8006a3a <main+0x52e>
            }
    
            if (strcmp(op, "add") == 0) result += value;
 800697e:	4aa9      	ldr	r2, [pc, #676]	@ (8006c24 <main+0x718>)
 8006980:	23e8      	movs	r3, #232	@ 0xe8
 8006982:	18fb      	adds	r3, r7, r3
 8006984:	0011      	movs	r1, r2
 8006986:	0018      	movs	r0, r3
 8006988:	f7f9 fbbc 	bl	8000104 <strcmp>
 800698c:	1e03      	subs	r3, r0, #0
 800698e:	d10a      	bne.n	80069a6 <main+0x49a>
 8006990:	23e4      	movs	r3, #228	@ 0xe4
 8006992:	18fb      	adds	r3, r7, r3
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	21b4      	movs	r1, #180	@ 0xb4
 8006998:	0049      	lsls	r1, r1, #1
 800699a:	187a      	adds	r2, r7, r1
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	18d3      	adds	r3, r2, r3
 80069a0:	187a      	adds	r2, r7, r1
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	e049      	b.n	8006a3a <main+0x52e>
            else if (strcmp(op, "sub") == 0) result -= value;
 80069a6:	4aa0      	ldr	r2, [pc, #640]	@ (8006c28 <main+0x71c>)
 80069a8:	23e8      	movs	r3, #232	@ 0xe8
 80069aa:	18fb      	adds	r3, r7, r3
 80069ac:	0011      	movs	r1, r2
 80069ae:	0018      	movs	r0, r3
 80069b0:	f7f9 fba8 	bl	8000104 <strcmp>
 80069b4:	1e03      	subs	r3, r0, #0
 80069b6:	d10a      	bne.n	80069ce <main+0x4c2>
 80069b8:	23e4      	movs	r3, #228	@ 0xe4
 80069ba:	18fb      	adds	r3, r7, r3
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	21b4      	movs	r1, #180	@ 0xb4
 80069c0:	0049      	lsls	r1, r1, #1
 80069c2:	187a      	adds	r2, r7, r1
 80069c4:	6812      	ldr	r2, [r2, #0]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	187a      	adds	r2, r7, r1
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	e035      	b.n	8006a3a <main+0x52e>
            else if (strcmp(op, "mul") == 0) result *= value;
 80069ce:	4a97      	ldr	r2, [pc, #604]	@ (8006c2c <main+0x720>)
 80069d0:	23e8      	movs	r3, #232	@ 0xe8
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	0011      	movs	r1, r2
 80069d6:	0018      	movs	r0, r3
 80069d8:	f7f9 fb94 	bl	8000104 <strcmp>
 80069dc:	1e03      	subs	r3, r0, #0
 80069de:	d10a      	bne.n	80069f6 <main+0x4ea>
 80069e0:	23e4      	movs	r3, #228	@ 0xe4
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	21b4      	movs	r1, #180	@ 0xb4
 80069e8:	0049      	lsls	r1, r1, #1
 80069ea:	187b      	adds	r3, r7, r1
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4353      	muls	r3, r2
 80069f0:	187a      	adds	r2, r7, r1
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	e021      	b.n	8006a3a <main+0x52e>
            else if (strcmp(op, "div") == 0) {
 80069f6:	4a8e      	ldr	r2, [pc, #568]	@ (8006c30 <main+0x724>)
 80069f8:	23e8      	movs	r3, #232	@ 0xe8
 80069fa:	18fb      	adds	r3, r7, r3
 80069fc:	0011      	movs	r1, r2
 80069fe:	0018      	movs	r0, r3
 8006a00:	f7f9 fb80 	bl	8000104 <strcmp>
 8006a04:	1e03      	subs	r3, r0, #0
 8006a06:	d118      	bne.n	8006a3a <main+0x52e>
                if (value == 0) {
 8006a08:	23e4      	movs	r3, #228	@ 0xe4
 8006a0a:	18fb      	adds	r3, r7, r3
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <main+0x514>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"Divide by 0\r\n", 14, HAL_MAX_DELAY);
 8006a12:	2301      	movs	r3, #1
 8006a14:	425b      	negs	r3, r3
 8006a16:	498a      	ldr	r1, [pc, #552]	@ (8006c40 <main+0x734>)
 8006a18:	4888      	ldr	r0, [pc, #544]	@ (8006c3c <main+0x730>)
 8006a1a:	220e      	movs	r2, #14
 8006a1c:	f003 fa2e 	bl	8009e7c <HAL_UART_Transmit>
                }
                result /= value;
 8006a20:	23e4      	movs	r3, #228	@ 0xe4
 8006a22:	18fb      	adds	r3, r7, r3
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	0019      	movs	r1, r3
 8006a28:	24b4      	movs	r4, #180	@ 0xb4
 8006a2a:	0064      	lsls	r4, r4, #1
 8006a2c:	193b      	adds	r3, r7, r4
 8006a2e:	6818      	ldr	r0, [r3, #0]
 8006a30:	f7f9 fc18 	bl	8000264 <__divsi3>
 8006a34:	0003      	movs	r3, r0
 8006a36:	193a      	adds	r2, r7, r4
 8006a38:	6013      	str	r3, [r2, #0]
        while ((token = strtok(NULL, " ")) != NULL) {
 8006a3a:	4b79      	ldr	r3, [pc, #484]	@ (8006c20 <main+0x714>)
 8006a3c:	0019      	movs	r1, r3
 8006a3e:	2000      	movs	r0, #0
 8006a40:	f004 ffa0 	bl	800b984 <strtok>
 8006a44:	0003      	movs	r3, r0
 8006a46:	22aa      	movs	r2, #170	@ 0xaa
 8006a48:	0052      	lsls	r2, r2, #1
 8006a4a:	18b9      	adds	r1, r7, r2
 8006a4c:	600b      	str	r3, [r1, #0]
 8006a4e:	18bb      	adds	r3, r7, r2
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d000      	beq.n	8006a58 <main+0x54c>
 8006a56:	e76c      	b.n	8006932 <main+0x426>
            }
        }
    
        char result_msg[64];
        snprintf(result_msg, sizeof(result_msg), "Result: %d\r\n", result);
 8006a58:	23b4      	movs	r3, #180	@ 0xb4
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	18fb      	adds	r3, r7, r3
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a78      	ldr	r2, [pc, #480]	@ (8006c44 <main+0x738>)
 8006a62:	24a4      	movs	r4, #164	@ 0xa4
 8006a64:	1938      	adds	r0, r7, r4
 8006a66:	2140      	movs	r1, #64	@ 0x40
 8006a68:	f004 fdfe 	bl	800b668 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)result_msg, strlen(result_msg), HAL_MAX_DELAY);
 8006a6c:	193b      	adds	r3, r7, r4
 8006a6e:	0018      	movs	r0, r3
 8006a70:	f7f9 fb52 	bl	8000118 <strlen>
 8006a74:	0003      	movs	r3, r0
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	2301      	movs	r3, #1
 8006a7a:	425b      	negs	r3, r3
 8006a7c:	1939      	adds	r1, r7, r4
 8006a7e:	486f      	ldr	r0, [pc, #444]	@ (8006c3c <main+0x730>)
 8006a80:	f003 f9fc 	bl	8009e7c <HAL_UART_Transmit>
        continue;
 8006a84:	e17d      	b.n	8006d82 <main+0x876>
    }

      if (sscanf(rx_buffer, "%d %15s", &duration, mode) != 2) {
 8006a86:	23ec      	movs	r3, #236	@ 0xec
 8006a88:	18fb      	adds	r3, r7, r3
 8006a8a:	22fc      	movs	r2, #252	@ 0xfc
 8006a8c:	18ba      	adds	r2, r7, r2
 8006a8e:	496e      	ldr	r1, [pc, #440]	@ (8006c48 <main+0x73c>)
 8006a90:	1d38      	adds	r0, r7, #4
 8006a92:	f004 fe1f 	bl	800b6d4 <siscanf>
 8006a96:	0003      	movs	r3, r0
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d013      	beq.n	8006ac4 <main+0x5b8>
          const char *msg = "Invalid format. Use: <duration> <mode>\r\n";
 8006a9c:	4b6b      	ldr	r3, [pc, #428]	@ (8006c4c <main+0x740>)
 8006a9e:	24a6      	movs	r4, #166	@ 0xa6
 8006aa0:	0064      	lsls	r4, r4, #1
 8006aa2:	193a      	adds	r2, r7, r4
 8006aa4:	6013      	str	r3, [r2, #0]
          HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8006aa6:	193b      	adds	r3, r7, r4
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f7f9 fb34 	bl	8000118 <strlen>
 8006ab0:	0003      	movs	r3, r0
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	425b      	negs	r3, r3
 8006ab8:	1939      	adds	r1, r7, r4
 8006aba:	6809      	ldr	r1, [r1, #0]
 8006abc:	485f      	ldr	r0, [pc, #380]	@ (8006c3c <main+0x730>)
 8006abe:	f003 f9dd 	bl	8009e7c <HAL_UART_Transmit>
          continue;
 8006ac2:	e15e      	b.n	8006d82 <main+0x876>
      }

      char echo[64];
      snprintf(echo, sizeof(echo), "\r\n> Duration: %d sec | Mode: %s\r\n", duration, mode);
 8006ac4:	23fc      	movs	r3, #252	@ 0xfc
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	6819      	ldr	r1, [r3, #0]
 8006aca:	4a61      	ldr	r2, [pc, #388]	@ (8006c50 <main+0x744>)
 8006acc:	2464      	movs	r4, #100	@ 0x64
 8006ace:	1938      	adds	r0, r7, r4
 8006ad0:	23ec      	movs	r3, #236	@ 0xec
 8006ad2:	18fb      	adds	r3, r7, r3
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	000b      	movs	r3, r1
 8006ad8:	2140      	movs	r1, #64	@ 0x40
 8006ada:	f004 fdc5 	bl	800b668 <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *)echo, strlen(echo), HAL_MAX_DELAY);
 8006ade:	193b      	adds	r3, r7, r4
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f7f9 fb19 	bl	8000118 <strlen>
 8006ae6:	0003      	movs	r3, r0
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	2301      	movs	r3, #1
 8006aec:	425b      	negs	r3, r3
 8006aee:	1939      	adds	r1, r7, r4
 8006af0:	4852      	ldr	r0, [pc, #328]	@ (8006c3c <main+0x730>)
 8006af2:	f003 f9c3 	bl	8009e7c <HAL_UART_Transmit>

      for (int t = 0; t < duration; t++) {
 8006af6:	2300      	movs	r3, #0
 8006af8:	22b0      	movs	r2, #176	@ 0xb0
 8006afa:	0052      	lsls	r2, r2, #1
 8006afc:	18ba      	adds	r2, r7, r2
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	e133      	b.n	8006d6a <main+0x85e>
          rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &gas_sensor);
 8006b02:	4b54      	ldr	r3, [pc, #336]	@ (8006c54 <main+0x748>)
 8006b04:	0019      	movs	r1, r3
 8006b06:	2001      	movs	r0, #1
 8006b08:	f7fd fc10 	bl	800432c <bme68x_set_op_mode>
 8006b0c:	0003      	movs	r3, r0
 8006b0e:	001a      	movs	r2, r3
 8006b10:	4b51      	ldr	r3, [pc, #324]	@ (8006c58 <main+0x74c>)
 8006b12:	701a      	strb	r2, [r3, #0]
          if (rslt != BME68X_OK) {
 8006b14:	4b50      	ldr	r3, [pc, #320]	@ (8006c58 <main+0x74c>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	b25b      	sxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d007      	beq.n	8006b2e <main+0x622>
              HAL_UART_Transmit(&huart2, (uint8_t *)"Set op mode failed\r\n", 21, HAL_MAX_DELAY);
 8006b1e:	2301      	movs	r3, #1
 8006b20:	425b      	negs	r3, r3
 8006b22:	494e      	ldr	r1, [pc, #312]	@ (8006c5c <main+0x750>)
 8006b24:	4845      	ldr	r0, [pc, #276]	@ (8006c3c <main+0x730>)
 8006b26:	2215      	movs	r2, #21
 8006b28:	f003 f9a8 	bl	8009e7c <HAL_UART_Transmit>
              break;
 8006b2c:	e129      	b.n	8006d82 <main+0x876>
          }

          uint32_t meas_dur = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &gas_sensor);
 8006b2e:	4a49      	ldr	r2, [pc, #292]	@ (8006c54 <main+0x748>)
 8006b30:	4b4b      	ldr	r3, [pc, #300]	@ (8006c60 <main+0x754>)
 8006b32:	0019      	movs	r1, r3
 8006b34:	2001      	movs	r0, #1
 8006b36:	f7fd fca1 	bl	800447c <bme68x_get_meas_dur>
 8006b3a:	0003      	movs	r3, r0
 8006b3c:	21a8      	movs	r1, #168	@ 0xa8
 8006b3e:	0049      	lsls	r1, r1, #1
 8006b40:	187a      	adds	r2, r7, r1
 8006b42:	6013      	str	r3, [r2, #0]
          gas_sensor.delay_us(meas_dur + 10000, gas_sensor.intf_ptr);
 8006b44:	4b43      	ldr	r3, [pc, #268]	@ (8006c54 <main+0x748>)
 8006b46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b48:	187b      	adds	r3, r7, r1
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4945      	ldr	r1, [pc, #276]	@ (8006c64 <main+0x758>)
 8006b4e:	1858      	adds	r0, r3, r1
 8006b50:	4b40      	ldr	r3, [pc, #256]	@ (8006c54 <main+0x748>)
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	0019      	movs	r1, r3
 8006b56:	4790      	blx	r2

          rslt = bme68x_get_data(BME68X_FORCED_MODE, data, &n_fields, &gas_sensor);
 8006b58:	4b3e      	ldr	r3, [pc, #248]	@ (8006c54 <main+0x748>)
 8006b5a:	4a43      	ldr	r2, [pc, #268]	@ (8006c68 <main+0x75c>)
 8006b5c:	4943      	ldr	r1, [pc, #268]	@ (8006c6c <main+0x760>)
 8006b5e:	2001      	movs	r0, #1
 8006b60:	f7fd fd10 	bl	8004584 <bme68x_get_data>
 8006b64:	0003      	movs	r3, r0
 8006b66:	001a      	movs	r2, r3
 8006b68:	4b3b      	ldr	r3, [pc, #236]	@ (8006c58 <main+0x74c>)
 8006b6a:	701a      	strb	r2, [r3, #0]

          if (rslt == BME68X_OK && n_fields > 0) {
 8006b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8006c58 <main+0x74c>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	b25b      	sxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d000      	beq.n	8006b78 <main+0x66c>
 8006b76:	e0e5      	b.n	8006d44 <main+0x838>
 8006b78:	4b3b      	ldr	r3, [pc, #236]	@ (8006c68 <main+0x75c>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d100      	bne.n	8006b82 <main+0x676>
 8006b80:	e0e0      	b.n	8006d44 <main+0x838>
              for (uint8_t i = 0; i < n_fields; i++) {
 8006b82:	2360      	movs	r3, #96	@ 0x60
 8006b84:	33ff      	adds	r3, #255	@ 0xff
 8006b86:	18fb      	adds	r3, r7, r3
 8006b88:	2200      	movs	r2, #0
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	e0d0      	b.n	8006d30 <main+0x824>
                  char msg[64];
                  if (strcmp(mode, "temp") == 0) {
 8006b8e:	4a38      	ldr	r2, [pc, #224]	@ (8006c70 <main+0x764>)
 8006b90:	23ec      	movs	r3, #236	@ 0xec
 8006b92:	18fb      	adds	r3, r7, r3
 8006b94:	0011      	movs	r1, r2
 8006b96:	0018      	movs	r0, r3
 8006b98:	f7f9 fab4 	bl	8000104 <strcmp>
 8006b9c:	1e03      	subs	r3, r0, #0
 8006b9e:	d11a      	bne.n	8006bd6 <main+0x6ca>
                      snprintf(msg, sizeof(msg), "Temperature: %.2f °C\r\n", data[i].temperature);
 8006ba0:	2360      	movs	r3, #96	@ 0x60
 8006ba2:	33ff      	adds	r3, #255	@ 0xff
 8006ba4:	18fb      	adds	r3, r7, r3
 8006ba6:	781a      	ldrb	r2, [r3, #0]
 8006ba8:	4930      	ldr	r1, [pc, #192]	@ (8006c6c <main+0x760>)
 8006baa:	0013      	movs	r3, r2
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	189b      	adds	r3, r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	18cb      	adds	r3, r1, r3
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	1c18      	adds	r0, r3, #0
 8006bba:	f7fc fd8f 	bl	80036dc <__aeabi_f2d>
 8006bbe:	0002      	movs	r2, r0
 8006bc0:	000b      	movs	r3, r1
 8006bc2:	492c      	ldr	r1, [pc, #176]	@ (8006c74 <main+0x768>)
 8006bc4:	20a4      	movs	r0, #164	@ 0xa4
 8006bc6:	1838      	adds	r0, r7, r0
 8006bc8:	9200      	str	r2, [sp, #0]
 8006bca:	9301      	str	r3, [sp, #4]
 8006bcc:	000a      	movs	r2, r1
 8006bce:	2140      	movs	r1, #64	@ 0x40
 8006bd0:	f004 fd4a 	bl	800b668 <sniprintf>
 8006bd4:	e08d      	b.n	8006cf2 <main+0x7e6>
                  } else if (strcmp(mode, "humi") == 0) {
 8006bd6:	4a28      	ldr	r2, [pc, #160]	@ (8006c78 <main+0x76c>)
 8006bd8:	23ec      	movs	r3, #236	@ 0xec
 8006bda:	18fb      	adds	r3, r7, r3
 8006bdc:	0011      	movs	r1, r2
 8006bde:	0018      	movs	r0, r3
 8006be0:	f7f9 fa90 	bl	8000104 <strcmp>
 8006be4:	1e03      	subs	r3, r0, #0
 8006be6:	d14b      	bne.n	8006c80 <main+0x774>
                      snprintf(msg, sizeof(msg), "Humidity: %.2f %%\r\n", data[i].humidity);
 8006be8:	2360      	movs	r3, #96	@ 0x60
 8006bea:	33ff      	adds	r3, #255	@ 0xff
 8006bec:	18fb      	adds	r3, r7, r3
 8006bee:	781a      	ldrb	r2, [r3, #0]
 8006bf0:	491e      	ldr	r1, [pc, #120]	@ (8006c6c <main+0x760>)
 8006bf2:	0013      	movs	r3, r2
 8006bf4:	005b      	lsls	r3, r3, #1
 8006bf6:	189b      	adds	r3, r3, r2
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	18cb      	adds	r3, r1, r3
 8006bfc:	3310      	adds	r3, #16
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	1c18      	adds	r0, r3, #0
 8006c02:	f7fc fd6b 	bl	80036dc <__aeabi_f2d>
 8006c06:	0002      	movs	r2, r0
 8006c08:	000b      	movs	r3, r1
 8006c0a:	491c      	ldr	r1, [pc, #112]	@ (8006c7c <main+0x770>)
 8006c0c:	20a4      	movs	r0, #164	@ 0xa4
 8006c0e:	1838      	adds	r0, r7, r0
 8006c10:	9200      	str	r2, [sp, #0]
 8006c12:	9301      	str	r3, [sp, #4]
 8006c14:	000a      	movs	r2, r1
 8006c16:	2140      	movs	r1, #64	@ 0x40
 8006c18:	f004 fd26 	bl	800b668 <sniprintf>
 8006c1c:	e069      	b.n	8006cf2 <main+0x7e6>
 8006c1e:	46c0      	nop			@ (mov r8, r8)
 8006c20:	0800eba4 	.word	0x0800eba4
 8006c24:	0800eba8 	.word	0x0800eba8
 8006c28:	0800ebac 	.word	0x0800ebac
 8006c2c:	0800ebb0 	.word	0x0800ebb0
 8006c30:	0800ebb4 	.word	0x0800ebb4
 8006c34:	0800ebb8 	.word	0x0800ebb8
 8006c38:	0800ebbc 	.word	0x0800ebbc
 8006c3c:	2000069c 	.word	0x2000069c
 8006c40:	0800ebd0 	.word	0x0800ebd0
 8006c44:	0800ebe0 	.word	0x0800ebe0
 8006c48:	0800ebf0 	.word	0x0800ebf0
 8006c4c:	0800ebf8 	.word	0x0800ebf8
 8006c50:	0800ec24 	.word	0x0800ec24
 8006c54:	20000730 	.word	0x20000730
 8006c58:	200007e5 	.word	0x200007e5
 8006c5c:	0800ec48 	.word	0x0800ec48
 8006c60:	20000780 	.word	0x20000780
 8006c64:	00002710 	.word	0x00002710
 8006c68:	200007e4 	.word	0x200007e4
 8006c6c:	2000079c 	.word	0x2000079c
 8006c70:	0800ec60 	.word	0x0800ec60
 8006c74:	0800ec68 	.word	0x0800ec68
 8006c78:	0800ec80 	.word	0x0800ec80
 8006c7c:	0800ec88 	.word	0x0800ec88
                  } else if (strcmp(mode, "press") == 0) {
 8006c80:	4a40      	ldr	r2, [pc, #256]	@ (8006d84 <main+0x878>)
 8006c82:	23ec      	movs	r3, #236	@ 0xec
 8006c84:	18fb      	adds	r3, r7, r3
 8006c86:	0011      	movs	r1, r2
 8006c88:	0018      	movs	r0, r3
 8006c8a:	f7f9 fa3b 	bl	8000104 <strcmp>
 8006c8e:	1e03      	subs	r3, r0, #0
 8006c90:	d11a      	bne.n	8006cc8 <main+0x7bc>
                      snprintf(msg, sizeof(msg), "Pressure: %.2f hPa\r\n", data[i].pressure);
 8006c92:	2360      	movs	r3, #96	@ 0x60
 8006c94:	33ff      	adds	r3, #255	@ 0xff
 8006c96:	18fb      	adds	r3, r7, r3
 8006c98:	781a      	ldrb	r2, [r3, #0]
 8006c9a:	493b      	ldr	r1, [pc, #236]	@ (8006d88 <main+0x87c>)
 8006c9c:	0013      	movs	r3, r2
 8006c9e:	005b      	lsls	r3, r3, #1
 8006ca0:	189b      	adds	r3, r3, r2
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	18cb      	adds	r3, r1, r3
 8006ca6:	330c      	adds	r3, #12
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	1c18      	adds	r0, r3, #0
 8006cac:	f7fc fd16 	bl	80036dc <__aeabi_f2d>
 8006cb0:	0002      	movs	r2, r0
 8006cb2:	000b      	movs	r3, r1
 8006cb4:	4935      	ldr	r1, [pc, #212]	@ (8006d8c <main+0x880>)
 8006cb6:	20a4      	movs	r0, #164	@ 0xa4
 8006cb8:	1838      	adds	r0, r7, r0
 8006cba:	9200      	str	r2, [sp, #0]
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	000a      	movs	r2, r1
 8006cc0:	2140      	movs	r1, #64	@ 0x40
 8006cc2:	f004 fcd1 	bl	800b668 <sniprintf>
 8006cc6:	e014      	b.n	8006cf2 <main+0x7e6>
                  } else {
                      snprintf(msg, sizeof(msg), "Unknown mode: %s\r\n", mode);
 8006cc8:	23ec      	movs	r3, #236	@ 0xec
 8006cca:	18fb      	adds	r3, r7, r3
 8006ccc:	4a30      	ldr	r2, [pc, #192]	@ (8006d90 <main+0x884>)
 8006cce:	24a4      	movs	r4, #164	@ 0xa4
 8006cd0:	1938      	adds	r0, r7, r4
 8006cd2:	2140      	movs	r1, #64	@ 0x40
 8006cd4:	f004 fcc8 	bl	800b668 <sniprintf>
                      HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8006cd8:	193b      	adds	r3, r7, r4
 8006cda:	0018      	movs	r0, r3
 8006cdc:	f7f9 fa1c 	bl	8000118 <strlen>
 8006ce0:	0003      	movs	r3, r0
 8006ce2:	b29a      	uxth	r2, r3
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	425b      	negs	r3, r3
 8006ce8:	1939      	adds	r1, r7, r4
 8006cea:	482a      	ldr	r0, [pc, #168]	@ (8006d94 <main+0x888>)
 8006cec:	f003 f8c6 	bl	8009e7c <HAL_UART_Transmit>
              for (uint8_t i = 0; i < n_fields; i++) {
 8006cf0:	e02f      	b.n	8006d52 <main+0x846>
                      break;
                  }
                  // Transmit over UART (debug/log)
                  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8006cf2:	24a4      	movs	r4, #164	@ 0xa4
 8006cf4:	193b      	adds	r3, r7, r4
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f7f9 fa0e 	bl	8000118 <strlen>
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	2301      	movs	r3, #1
 8006d02:	425b      	negs	r3, r3
 8006d04:	1939      	adds	r1, r7, r4
 8006d06:	4823      	ldr	r0, [pc, #140]	@ (8006d94 <main+0x888>)
 8006d08:	f003 f8b8 	bl	8009e7c <HAL_UART_Transmit>

                  // Transmit over LoRa
                  SX1262_Transmit((uint8_t *)msg, strlen(msg));
 8006d0c:	193b      	adds	r3, r7, r4
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f7f9 fa02 	bl	8000118 <strlen>
 8006d14:	0003      	movs	r3, r0
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	193b      	adds	r3, r7, r4
 8006d1a:	0011      	movs	r1, r2
 8006d1c:	0018      	movs	r0, r3
 8006d1e:	f7fc fdc3 	bl	80038a8 <SX1262_Transmit>
              for (uint8_t i = 0; i < n_fields; i++) {
 8006d22:	2160      	movs	r1, #96	@ 0x60
 8006d24:	31ff      	adds	r1, #255	@ 0xff
 8006d26:	187b      	adds	r3, r7, r1
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	187b      	adds	r3, r7, r1
 8006d2c:	3201      	adds	r2, #1
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	4b19      	ldr	r3, [pc, #100]	@ (8006d98 <main+0x88c>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2260      	movs	r2, #96	@ 0x60
 8006d36:	32ff      	adds	r2, #255	@ 0xff
 8006d38:	18ba      	adds	r2, r7, r2
 8006d3a:	7812      	ldrb	r2, [r2, #0]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d200      	bcs.n	8006d42 <main+0x836>
 8006d40:	e725      	b.n	8006b8e <main+0x682>
 8006d42:	e006      	b.n	8006d52 <main+0x846>
              }
          } else {
              HAL_UART_Transmit(&huart2, (uint8_t *)"Sensor read error\r\n", 20, HAL_MAX_DELAY);
 8006d44:	2301      	movs	r3, #1
 8006d46:	425b      	negs	r3, r3
 8006d48:	4914      	ldr	r1, [pc, #80]	@ (8006d9c <main+0x890>)
 8006d4a:	4812      	ldr	r0, [pc, #72]	@ (8006d94 <main+0x888>)
 8006d4c:	2214      	movs	r2, #20
 8006d4e:	f003 f895 	bl	8009e7c <HAL_UART_Transmit>
          }

          HAL_Delay(1000); // wait 1 second
 8006d52:	23fa      	movs	r3, #250	@ 0xfa
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	0018      	movs	r0, r3
 8006d58:	f000 fc50 	bl	80075fc <HAL_Delay>
      for (int t = 0; t < duration; t++) {
 8006d5c:	22b0      	movs	r2, #176	@ 0xb0
 8006d5e:	0052      	lsls	r2, r2, #1
 8006d60:	18bb      	adds	r3, r7, r2
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3301      	adds	r3, #1
 8006d66:	18ba      	adds	r2, r7, r2
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	23fc      	movs	r3, #252	@ 0xfc
 8006d6c:	18fb      	adds	r3, r7, r3
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	22b0      	movs	r2, #176	@ 0xb0
 8006d72:	0052      	lsls	r2, r2, #1
 8006d74:	18ba      	adds	r2, r7, r2
 8006d76:	6812      	ldr	r2, [r2, #0]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	da00      	bge.n	8006d7e <main+0x872>
 8006d7c:	e6c1      	b.n	8006b02 <main+0x5f6>
 8006d7e:	e4c7      	b.n	8006710 <main+0x204>
    if (!token) continue;
 8006d80:	46c0      	nop			@ (mov r8, r8)
  {
 8006d82:	e4c5      	b.n	8006710 <main+0x204>
 8006d84:	0800ec9c 	.word	0x0800ec9c
 8006d88:	2000079c 	.word	0x2000079c
 8006d8c:	0800eca4 	.word	0x0800eca4
 8006d90:	0800ecbc 	.word	0x0800ecbc
 8006d94:	2000069c 	.word	0x2000069c
 8006d98:	200007e4 	.word	0x200007e4
 8006d9c:	0800ecd0 	.word	0x0800ecd0

08006da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006da0:	b590      	push	{r4, r7, lr}
 8006da2:	b093      	sub	sp, #76	@ 0x4c
 8006da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006da6:	2410      	movs	r4, #16
 8006da8:	193b      	adds	r3, r7, r4
 8006daa:	0018      	movs	r0, r3
 8006dac:	2338      	movs	r3, #56	@ 0x38
 8006dae:	001a      	movs	r2, r3
 8006db0:	2100      	movs	r1, #0
 8006db2:	f004 fdcb 	bl	800b94c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006db6:	003b      	movs	r3, r7
 8006db8:	0018      	movs	r0, r3
 8006dba:	2310      	movs	r3, #16
 8006dbc:	001a      	movs	r2, r3
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	f004 fdc4 	bl	800b94c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006dc4:	2380      	movs	r3, #128	@ 0x80
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	0018      	movs	r0, r3
 8006dca:	f001 fd29 	bl	8008820 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006dce:	193b      	adds	r3, r7, r4
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006dd4:	193b      	adds	r3, r7, r4
 8006dd6:	2280      	movs	r2, #128	@ 0x80
 8006dd8:	0052      	lsls	r2, r2, #1
 8006dda:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006ddc:	193b      	adds	r3, r7, r4
 8006dde:	2200      	movs	r2, #0
 8006de0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006de2:	193b      	adds	r3, r7, r4
 8006de4:	2240      	movs	r2, #64	@ 0x40
 8006de6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006de8:	193b      	adds	r3, r7, r4
 8006dea:	2200      	movs	r2, #0
 8006dec:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006dee:	193b      	adds	r3, r7, r4
 8006df0:	0018      	movs	r0, r3
 8006df2:	f001 fd61 	bl	80088b8 <HAL_RCC_OscConfig>
 8006df6:	1e03      	subs	r3, r0, #0
 8006df8:	d001      	beq.n	8006dfe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8006dfa:	f000 f93b 	bl	8007074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006dfe:	003b      	movs	r3, r7
 8006e00:	2207      	movs	r2, #7
 8006e02:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006e04:	003b      	movs	r3, r7
 8006e06:	2200      	movs	r2, #0
 8006e08:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e0a:	003b      	movs	r3, r7
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006e10:	003b      	movs	r3, r7
 8006e12:	2200      	movs	r2, #0
 8006e14:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006e16:	003b      	movs	r3, r7
 8006e18:	2100      	movs	r1, #0
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	f002 f866 	bl	8008eec <HAL_RCC_ClockConfig>
 8006e20:	1e03      	subs	r3, r0, #0
 8006e22:	d001      	beq.n	8006e28 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8006e24:	f000 f926 	bl	8007074 <Error_Handler>
  }
}
 8006e28:	46c0      	nop			@ (mov r8, r8)
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	b013      	add	sp, #76	@ 0x4c
 8006e2e:	bd90      	pop	{r4, r7, pc}

08006e30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006e34:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea4 <MX_I2C1_Init+0x74>)
 8006e36:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea8 <MX_I2C1_Init+0x78>)
 8006e38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8006e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ea4 <MX_I2C1_Init+0x74>)
 8006e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006eac <MX_I2C1_Init+0x7c>)
 8006e3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006e40:	4b18      	ldr	r3, [pc, #96]	@ (8006ea4 <MX_I2C1_Init+0x74>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e46:	4b17      	ldr	r3, [pc, #92]	@ (8006ea4 <MX_I2C1_Init+0x74>)
 8006e48:	2201      	movs	r2, #1
 8006e4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e4c:	4b15      	ldr	r3, [pc, #84]	@ (8006ea4 <MX_I2C1_Init+0x74>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006e52:	4b14      	ldr	r3, [pc, #80]	@ (8006ea4 <MX_I2C1_Init+0x74>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006e58:	4b12      	ldr	r3, [pc, #72]	@ (8006ea4 <MX_I2C1_Init+0x74>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e5e:	4b11      	ldr	r3, [pc, #68]	@ (8006ea4 <MX_I2C1_Init+0x74>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e64:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea4 <MX_I2C1_Init+0x74>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea4 <MX_I2C1_Init+0x74>)
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f000 fe3b 	bl	8007ae8 <HAL_I2C_Init>
 8006e72:	1e03      	subs	r3, r0, #0
 8006e74:	d001      	beq.n	8006e7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006e76:	f000 f8fd 	bl	8007074 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea4 <MX_I2C1_Init+0x74>)
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f001 fc36 	bl	80086f0 <HAL_I2CEx_ConfigAnalogFilter>
 8006e84:	1e03      	subs	r3, r0, #0
 8006e86:	d001      	beq.n	8006e8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006e88:	f000 f8f4 	bl	8007074 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006e8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ea4 <MX_I2C1_Init+0x74>)
 8006e8e:	2100      	movs	r1, #0
 8006e90:	0018      	movs	r0, r3
 8006e92:	f001 fc79 	bl	8008788 <HAL_I2CEx_ConfigDigitalFilter>
 8006e96:	1e03      	subs	r3, r0, #0
 8006e98:	d001      	beq.n	8006e9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006e9a:	f000 f8eb 	bl	8007074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006e9e:	46c0      	nop			@ (mov r8, r8)
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	200005e4 	.word	0x200005e4
 8006ea8:	40005400 	.word	0x40005400
 8006eac:	00503d58 	.word	0x00503d58

08006eb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006eb6:	4a1c      	ldr	r2, [pc, #112]	@ (8006f28 <MX_SPI1_Init+0x78>)
 8006eb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006eba:	4b1a      	ldr	r3, [pc, #104]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006ebc:	2282      	movs	r2, #130	@ 0x82
 8006ebe:	0052      	lsls	r2, r2, #1
 8006ec0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006ec2:	4b18      	ldr	r3, [pc, #96]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ec8:	4b16      	ldr	r3, [pc, #88]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006eca:	22e0      	movs	r2, #224	@ 0xe0
 8006ecc:	00d2      	lsls	r2, r2, #3
 8006ece:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ed0:	4b14      	ldr	r3, [pc, #80]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006ed6:	4b13      	ldr	r3, [pc, #76]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006edc:	4b11      	ldr	r3, [pc, #68]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006ede:	2280      	movs	r2, #128	@ 0x80
 8006ee0:	0092      	lsls	r2, r2, #2
 8006ee2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006eea:	4b0e      	ldr	r3, [pc, #56]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006efc:	4b09      	ldr	r3, [pc, #36]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006efe:	2207      	movs	r2, #7
 8006f00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006f02:	4b08      	ldr	r3, [pc, #32]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006f08:	4b06      	ldr	r3, [pc, #24]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006f0e:	4b05      	ldr	r3, [pc, #20]	@ (8006f24 <MX_SPI1_Init+0x74>)
 8006f10:	0018      	movs	r0, r3
 8006f12:	f002 fb4d 	bl	80095b0 <HAL_SPI_Init>
 8006f16:	1e03      	subs	r3, r0, #0
 8006f18:	d001      	beq.n	8006f1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006f1a:	f000 f8ab 	bl	8007074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006f1e:	46c0      	nop			@ (mov r8, r8)
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20000638 	.word	0x20000638
 8006f28:	40013000 	.word	0x40013000

08006f2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006f30:	4b23      	ldr	r3, [pc, #140]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f32:	4a24      	ldr	r2, [pc, #144]	@ (8006fc4 <MX_USART2_UART_Init+0x98>)
 8006f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006f36:	4b22      	ldr	r3, [pc, #136]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f38:	22e1      	movs	r2, #225	@ 0xe1
 8006f3a:	0252      	lsls	r2, r2, #9
 8006f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006f3e:	4b20      	ldr	r3, [pc, #128]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006f44:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006f50:	4b1b      	ldr	r3, [pc, #108]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f52:	220c      	movs	r2, #12
 8006f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f56:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f5c:	4b18      	ldr	r3, [pc, #96]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f62:	4b17      	ldr	r3, [pc, #92]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006f68:	4b15      	ldr	r3, [pc, #84]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f6e:	4b14      	ldr	r3, [pc, #80]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f70:	2200      	movs	r2, #0
 8006f72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006f74:	4b12      	ldr	r3, [pc, #72]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f76:	0018      	movs	r0, r3
 8006f78:	f002 ff2a 	bl	8009dd0 <HAL_UART_Init>
 8006f7c:	1e03      	subs	r3, r0, #0
 8006f7e:	d001      	beq.n	8006f84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006f80:	f000 f878 	bl	8007074 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f84:	4b0e      	ldr	r3, [pc, #56]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f86:	2100      	movs	r1, #0
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f003 fe2d 	bl	800abe8 <HAL_UARTEx_SetTxFifoThreshold>
 8006f8e:	1e03      	subs	r3, r0, #0
 8006f90:	d001      	beq.n	8006f96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006f92:	f000 f86f 	bl	8007074 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f96:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006f98:	2100      	movs	r1, #0
 8006f9a:	0018      	movs	r0, r3
 8006f9c:	f003 fe64 	bl	800ac68 <HAL_UARTEx_SetRxFifoThreshold>
 8006fa0:	1e03      	subs	r3, r0, #0
 8006fa2:	d001      	beq.n	8006fa8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006fa4:	f000 f866 	bl	8007074 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006fa8:	4b05      	ldr	r3, [pc, #20]	@ (8006fc0 <MX_USART2_UART_Init+0x94>)
 8006faa:	0018      	movs	r0, r3
 8006fac:	f003 fde2 	bl	800ab74 <HAL_UARTEx_DisableFifoMode>
 8006fb0:	1e03      	subs	r3, r0, #0
 8006fb2:	d001      	beq.n	8006fb8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006fb4:	f000 f85e 	bl	8007074 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006fb8:	46c0      	nop			@ (mov r8, r8)
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	46c0      	nop			@ (mov r8, r8)
 8006fc0:	2000069c 	.word	0x2000069c
 8006fc4:	40004400 	.word	0x40004400

08006fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006fc8:	b590      	push	{r4, r7, lr}
 8006fca:	b089      	sub	sp, #36	@ 0x24
 8006fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fce:	240c      	movs	r4, #12
 8006fd0:	193b      	adds	r3, r7, r4
 8006fd2:	0018      	movs	r0, r3
 8006fd4:	2314      	movs	r3, #20
 8006fd6:	001a      	movs	r2, r3
 8006fd8:	2100      	movs	r1, #0
 8006fda:	f004 fcb7 	bl	800b94c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fde:	4b23      	ldr	r3, [pc, #140]	@ (800706c <MX_GPIO_Init+0xa4>)
 8006fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fe2:	4b22      	ldr	r3, [pc, #136]	@ (800706c <MX_GPIO_Init+0xa4>)
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	635a      	str	r2, [r3, #52]	@ 0x34
 8006fea:	4b20      	ldr	r3, [pc, #128]	@ (800706c <MX_GPIO_Init+0xa4>)
 8006fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fee:	2201      	movs	r2, #1
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	60bb      	str	r3, [r7, #8]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800706c <MX_GPIO_Init+0xa4>)
 8006ff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800706c <MX_GPIO_Init+0xa4>)
 8006ffc:	2102      	movs	r1, #2
 8006ffe:	430a      	orrs	r2, r1
 8007000:	635a      	str	r2, [r3, #52]	@ 0x34
 8007002:	4b1a      	ldr	r3, [pc, #104]	@ (800706c <MX_GPIO_Init+0xa4>)
 8007004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007006:	2202      	movs	r2, #2
 8007008:	4013      	ands	r3, r2
 800700a:	607b      	str	r3, [r7, #4]
 800700c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800700e:	4b18      	ldr	r3, [pc, #96]	@ (8007070 <MX_GPIO_Init+0xa8>)
 8007010:	2200      	movs	r2, #0
 8007012:	2107      	movs	r1, #7
 8007014:	0018      	movs	r0, r3
 8007016:	f000 fd4a 	bl	8007aae <HAL_GPIO_WritePin>

  // Configure DIO1_LORA (PA4) as EXTI (Interrupt) Input
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800701a:	193b      	adds	r3, r7, r4
 800701c:	2210      	movs	r2, #16
 800701e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007020:	193b      	adds	r3, r7, r4
 8007022:	2288      	movs	r2, #136	@ 0x88
 8007024:	0352      	lsls	r2, r2, #13
 8007026:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007028:	193b      	adds	r3, r7, r4
 800702a:	2200      	movs	r2, #0
 800702c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800702e:	193a      	adds	r2, r7, r4
 8007030:	23a0      	movs	r3, #160	@ 0xa0
 8007032:	05db      	lsls	r3, r3, #23
 8007034:	0011      	movs	r1, r2
 8007036:	0018      	movs	r0, r3
 8007038:	f000 fbb8 	bl	80077ac <HAL_GPIO_Init>

  // Configure NSS_LORA (PB0), RESET (PB1), BUSY (PB2) as output
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800703c:	0021      	movs	r1, r4
 800703e:	187b      	adds	r3, r7, r1
 8007040:	2207      	movs	r2, #7
 8007042:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007044:	187b      	adds	r3, r7, r1
 8007046:	2201      	movs	r2, #1
 8007048:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800704a:	187b      	adds	r3, r7, r1
 800704c:	2200      	movs	r2, #0
 800704e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007050:	187b      	adds	r3, r7, r1
 8007052:	2200      	movs	r2, #0
 8007054:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007056:	187b      	adds	r3, r7, r1
 8007058:	4a05      	ldr	r2, [pc, #20]	@ (8007070 <MX_GPIO_Init+0xa8>)
 800705a:	0019      	movs	r1, r3
 800705c:	0010      	movs	r0, r2
 800705e:	f000 fba5 	bl	80077ac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8007062:	46c0      	nop			@ (mov r8, r8)
 8007064:	46bd      	mov	sp, r7
 8007066:	b009      	add	sp, #36	@ 0x24
 8007068:	bd90      	pop	{r4, r7, pc}
 800706a:	46c0      	nop			@ (mov r8, r8)
 800706c:	40021000 	.word	0x40021000
 8007070:	50000400 	.word	0x50000400

08007074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007078:	b672      	cpsid	i
}
 800707a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800707c:	46c0      	nop			@ (mov r8, r8)
 800707e:	e7fd      	b.n	800707c <Error_Handler+0x8>

08007080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007086:	4b0f      	ldr	r3, [pc, #60]	@ (80070c4 <HAL_MspInit+0x44>)
 8007088:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800708a:	4b0e      	ldr	r3, [pc, #56]	@ (80070c4 <HAL_MspInit+0x44>)
 800708c:	2101      	movs	r1, #1
 800708e:	430a      	orrs	r2, r1
 8007090:	641a      	str	r2, [r3, #64]	@ 0x40
 8007092:	4b0c      	ldr	r3, [pc, #48]	@ (80070c4 <HAL_MspInit+0x44>)
 8007094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007096:	2201      	movs	r2, #1
 8007098:	4013      	ands	r3, r2
 800709a:	607b      	str	r3, [r7, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800709e:	4b09      	ldr	r3, [pc, #36]	@ (80070c4 <HAL_MspInit+0x44>)
 80070a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070a2:	4b08      	ldr	r3, [pc, #32]	@ (80070c4 <HAL_MspInit+0x44>)
 80070a4:	2180      	movs	r1, #128	@ 0x80
 80070a6:	0549      	lsls	r1, r1, #21
 80070a8:	430a      	orrs	r2, r1
 80070aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80070ac:	4b05      	ldr	r3, [pc, #20]	@ (80070c4 <HAL_MspInit+0x44>)
 80070ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070b0:	2380      	movs	r3, #128	@ 0x80
 80070b2:	055b      	lsls	r3, r3, #21
 80070b4:	4013      	ands	r3, r2
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80070ba:	46c0      	nop			@ (mov r8, r8)
 80070bc:	46bd      	mov	sp, r7
 80070be:	b002      	add	sp, #8
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	46c0      	nop			@ (mov r8, r8)
 80070c4:	40021000 	.word	0x40021000

080070c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80070c8:	b590      	push	{r4, r7, lr}
 80070ca:	b097      	sub	sp, #92	@ 0x5c
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070d0:	2344      	movs	r3, #68	@ 0x44
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	0018      	movs	r0, r3
 80070d6:	2314      	movs	r3, #20
 80070d8:	001a      	movs	r2, r3
 80070da:	2100      	movs	r1, #0
 80070dc:	f004 fc36 	bl	800b94c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80070e0:	2410      	movs	r4, #16
 80070e2:	193b      	adds	r3, r7, r4
 80070e4:	0018      	movs	r0, r3
 80070e6:	2334      	movs	r3, #52	@ 0x34
 80070e8:	001a      	movs	r2, r3
 80070ea:	2100      	movs	r1, #0
 80070ec:	f004 fc2e 	bl	800b94c <memset>
  if(hi2c->Instance==I2C1)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a22      	ldr	r2, [pc, #136]	@ (8007180 <HAL_I2C_MspInit+0xb8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d13e      	bne.n	8007178 <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80070fa:	193b      	adds	r3, r7, r4
 80070fc:	2220      	movs	r2, #32
 80070fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007100:	193b      	adds	r3, r7, r4
 8007102:	2200      	movs	r2, #0
 8007104:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007106:	193b      	adds	r3, r7, r4
 8007108:	0018      	movs	r0, r3
 800710a:	f002 f899 	bl	8009240 <HAL_RCCEx_PeriphCLKConfig>
 800710e:	1e03      	subs	r3, r0, #0
 8007110:	d001      	beq.n	8007116 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007112:	f7ff ffaf 	bl	8007074 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007116:	4b1b      	ldr	r3, [pc, #108]	@ (8007184 <HAL_I2C_MspInit+0xbc>)
 8007118:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800711a:	4b1a      	ldr	r3, [pc, #104]	@ (8007184 <HAL_I2C_MspInit+0xbc>)
 800711c:	2102      	movs	r1, #2
 800711e:	430a      	orrs	r2, r1
 8007120:	635a      	str	r2, [r3, #52]	@ 0x34
 8007122:	4b18      	ldr	r3, [pc, #96]	@ (8007184 <HAL_I2C_MspInit+0xbc>)
 8007124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007126:	2202      	movs	r2, #2
 8007128:	4013      	ands	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800712e:	2144      	movs	r1, #68	@ 0x44
 8007130:	187b      	adds	r3, r7, r1
 8007132:	22c0      	movs	r2, #192	@ 0xc0
 8007134:	0092      	lsls	r2, r2, #2
 8007136:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007138:	187b      	adds	r3, r7, r1
 800713a:	2212      	movs	r2, #18
 800713c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800713e:	187b      	adds	r3, r7, r1
 8007140:	2200      	movs	r2, #0
 8007142:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007144:	187b      	adds	r3, r7, r1
 8007146:	2200      	movs	r2, #0
 8007148:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800714a:	187b      	adds	r3, r7, r1
 800714c:	2206      	movs	r2, #6
 800714e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007150:	187b      	adds	r3, r7, r1
 8007152:	4a0d      	ldr	r2, [pc, #52]	@ (8007188 <HAL_I2C_MspInit+0xc0>)
 8007154:	0019      	movs	r1, r3
 8007156:	0010      	movs	r0, r2
 8007158:	f000 fb28 	bl	80077ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800715c:	4b09      	ldr	r3, [pc, #36]	@ (8007184 <HAL_I2C_MspInit+0xbc>)
 800715e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007160:	4b08      	ldr	r3, [pc, #32]	@ (8007184 <HAL_I2C_MspInit+0xbc>)
 8007162:	2180      	movs	r1, #128	@ 0x80
 8007164:	0389      	lsls	r1, r1, #14
 8007166:	430a      	orrs	r2, r1
 8007168:	63da      	str	r2, [r3, #60]	@ 0x3c
 800716a:	4b06      	ldr	r3, [pc, #24]	@ (8007184 <HAL_I2C_MspInit+0xbc>)
 800716c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800716e:	2380      	movs	r3, #128	@ 0x80
 8007170:	039b      	lsls	r3, r3, #14
 8007172:	4013      	ands	r3, r2
 8007174:	60bb      	str	r3, [r7, #8]
 8007176:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8007178:	46c0      	nop			@ (mov r8, r8)
 800717a:	46bd      	mov	sp, r7
 800717c:	b017      	add	sp, #92	@ 0x5c
 800717e:	bd90      	pop	{r4, r7, pc}
 8007180:	40005400 	.word	0x40005400
 8007184:	40021000 	.word	0x40021000
 8007188:	50000400 	.word	0x50000400

0800718c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800718c:	b590      	push	{r4, r7, lr}
 800718e:	b08b      	sub	sp, #44	@ 0x2c
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007194:	2414      	movs	r4, #20
 8007196:	193b      	adds	r3, r7, r4
 8007198:	0018      	movs	r0, r3
 800719a:	2314      	movs	r3, #20
 800719c:	001a      	movs	r2, r3
 800719e:	2100      	movs	r1, #0
 80071a0:	f004 fbd4 	bl	800b94c <memset>
  if(hspi->Instance==SPI1)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a1b      	ldr	r2, [pc, #108]	@ (8007218 <HAL_SPI_MspInit+0x8c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d130      	bne.n	8007210 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80071ae:	4b1b      	ldr	r3, [pc, #108]	@ (800721c <HAL_SPI_MspInit+0x90>)
 80071b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071b2:	4b1a      	ldr	r3, [pc, #104]	@ (800721c <HAL_SPI_MspInit+0x90>)
 80071b4:	2180      	movs	r1, #128	@ 0x80
 80071b6:	0149      	lsls	r1, r1, #5
 80071b8:	430a      	orrs	r2, r1
 80071ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80071bc:	4b17      	ldr	r3, [pc, #92]	@ (800721c <HAL_SPI_MspInit+0x90>)
 80071be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071c0:	2380      	movs	r3, #128	@ 0x80
 80071c2:	015b      	lsls	r3, r3, #5
 80071c4:	4013      	ands	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071ca:	4b14      	ldr	r3, [pc, #80]	@ (800721c <HAL_SPI_MspInit+0x90>)
 80071cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071ce:	4b13      	ldr	r3, [pc, #76]	@ (800721c <HAL_SPI_MspInit+0x90>)
 80071d0:	2101      	movs	r1, #1
 80071d2:	430a      	orrs	r2, r1
 80071d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80071d6:	4b11      	ldr	r3, [pc, #68]	@ (800721c <HAL_SPI_MspInit+0x90>)
 80071d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071da:	2201      	movs	r2, #1
 80071dc:	4013      	ands	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80071e2:	0021      	movs	r1, r4
 80071e4:	187b      	adds	r3, r7, r1
 80071e6:	22e0      	movs	r2, #224	@ 0xe0
 80071e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ea:	187b      	adds	r3, r7, r1
 80071ec:	2202      	movs	r2, #2
 80071ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f0:	187b      	adds	r3, r7, r1
 80071f2:	2200      	movs	r2, #0
 80071f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071f6:	187b      	adds	r3, r7, r1
 80071f8:	2200      	movs	r2, #0
 80071fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80071fc:	187b      	adds	r3, r7, r1
 80071fe:	2200      	movs	r2, #0
 8007200:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007202:	187a      	adds	r2, r7, r1
 8007204:	23a0      	movs	r3, #160	@ 0xa0
 8007206:	05db      	lsls	r3, r3, #23
 8007208:	0011      	movs	r1, r2
 800720a:	0018      	movs	r0, r3
 800720c:	f000 face 	bl	80077ac <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8007210:	46c0      	nop			@ (mov r8, r8)
 8007212:	46bd      	mov	sp, r7
 8007214:	b00b      	add	sp, #44	@ 0x2c
 8007216:	bd90      	pop	{r4, r7, pc}
 8007218:	40013000 	.word	0x40013000
 800721c:	40021000 	.word	0x40021000

08007220 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b097      	sub	sp, #92	@ 0x5c
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007228:	2344      	movs	r3, #68	@ 0x44
 800722a:	18fb      	adds	r3, r7, r3
 800722c:	0018      	movs	r0, r3
 800722e:	2314      	movs	r3, #20
 8007230:	001a      	movs	r2, r3
 8007232:	2100      	movs	r1, #0
 8007234:	f004 fb8a 	bl	800b94c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007238:	2410      	movs	r4, #16
 800723a:	193b      	adds	r3, r7, r4
 800723c:	0018      	movs	r0, r3
 800723e:	2334      	movs	r3, #52	@ 0x34
 8007240:	001a      	movs	r2, r3
 8007242:	2100      	movs	r1, #0
 8007244:	f004 fb82 	bl	800b94c <memset>
  if(huart->Instance==USART2)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a22      	ldr	r2, [pc, #136]	@ (80072d8 <HAL_UART_MspInit+0xb8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d13e      	bne.n	80072d0 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007252:	193b      	adds	r3, r7, r4
 8007254:	2202      	movs	r2, #2
 8007256:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007258:	193b      	adds	r3, r7, r4
 800725a:	2200      	movs	r2, #0
 800725c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800725e:	193b      	adds	r3, r7, r4
 8007260:	0018      	movs	r0, r3
 8007262:	f001 ffed 	bl	8009240 <HAL_RCCEx_PeriphCLKConfig>
 8007266:	1e03      	subs	r3, r0, #0
 8007268:	d001      	beq.n	800726e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800726a:	f7ff ff03 	bl	8007074 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800726e:	4b1b      	ldr	r3, [pc, #108]	@ (80072dc <HAL_UART_MspInit+0xbc>)
 8007270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007272:	4b1a      	ldr	r3, [pc, #104]	@ (80072dc <HAL_UART_MspInit+0xbc>)
 8007274:	2180      	movs	r1, #128	@ 0x80
 8007276:	0289      	lsls	r1, r1, #10
 8007278:	430a      	orrs	r2, r1
 800727a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800727c:	4b17      	ldr	r3, [pc, #92]	@ (80072dc <HAL_UART_MspInit+0xbc>)
 800727e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007280:	2380      	movs	r3, #128	@ 0x80
 8007282:	029b      	lsls	r3, r3, #10
 8007284:	4013      	ands	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800728a:	4b14      	ldr	r3, [pc, #80]	@ (80072dc <HAL_UART_MspInit+0xbc>)
 800728c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800728e:	4b13      	ldr	r3, [pc, #76]	@ (80072dc <HAL_UART_MspInit+0xbc>)
 8007290:	2101      	movs	r1, #1
 8007292:	430a      	orrs	r2, r1
 8007294:	635a      	str	r2, [r3, #52]	@ 0x34
 8007296:	4b11      	ldr	r3, [pc, #68]	@ (80072dc <HAL_UART_MspInit+0xbc>)
 8007298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800729a:	2201      	movs	r2, #1
 800729c:	4013      	ands	r3, r2
 800729e:	60bb      	str	r3, [r7, #8]
 80072a0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80072a2:	2144      	movs	r1, #68	@ 0x44
 80072a4:	187b      	adds	r3, r7, r1
 80072a6:	220c      	movs	r2, #12
 80072a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072aa:	187b      	adds	r3, r7, r1
 80072ac:	2202      	movs	r2, #2
 80072ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b0:	187b      	adds	r3, r7, r1
 80072b2:	2200      	movs	r2, #0
 80072b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072b6:	187b      	adds	r3, r7, r1
 80072b8:	2200      	movs	r2, #0
 80072ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80072bc:	187b      	adds	r3, r7, r1
 80072be:	2201      	movs	r2, #1
 80072c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072c2:	187a      	adds	r2, r7, r1
 80072c4:	23a0      	movs	r3, #160	@ 0xa0
 80072c6:	05db      	lsls	r3, r3, #23
 80072c8:	0011      	movs	r1, r2
 80072ca:	0018      	movs	r0, r3
 80072cc:	f000 fa6e 	bl	80077ac <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80072d0:	46c0      	nop			@ (mov r8, r8)
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b017      	add	sp, #92	@ 0x5c
 80072d6:	bd90      	pop	{r4, r7, pc}
 80072d8:	40004400 	.word	0x40004400
 80072dc:	40021000 	.word	0x40021000

080072e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80072e4:	46c0      	nop			@ (mov r8, r8)
 80072e6:	e7fd      	b.n	80072e4 <NMI_Handler+0x4>

080072e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072ec:	46c0      	nop			@ (mov r8, r8)
 80072ee:	e7fd      	b.n	80072ec <HardFault_Handler+0x4>

080072f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80072f4:	46c0      	nop			@ (mov r8, r8)
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80072fe:	46c0      	nop			@ (mov r8, r8)
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007308:	f000 f95c 	bl	80075c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800730c:	46c0      	nop			@ (mov r8, r8)
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	af00      	add	r7, sp, #0
  return 1;
 8007316:	2301      	movs	r3, #1
}
 8007318:	0018      	movs	r0, r3
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <_kill>:

int _kill(int pid, int sig)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007328:	f004 fbc8 	bl	800babc <__errno>
 800732c:	0003      	movs	r3, r0
 800732e:	2216      	movs	r2, #22
 8007330:	601a      	str	r2, [r3, #0]
  return -1;
 8007332:	2301      	movs	r3, #1
 8007334:	425b      	negs	r3, r3
}
 8007336:	0018      	movs	r0, r3
 8007338:	46bd      	mov	sp, r7
 800733a:	b002      	add	sp, #8
 800733c:	bd80      	pop	{r7, pc}

0800733e <_exit>:

void _exit (int status)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007346:	2301      	movs	r3, #1
 8007348:	425a      	negs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	0011      	movs	r1, r2
 800734e:	0018      	movs	r0, r3
 8007350:	f7ff ffe5 	bl	800731e <_kill>
  while (1) {}    /* Make sure we hang here */
 8007354:	46c0      	nop			@ (mov r8, r8)
 8007356:	e7fd      	b.n	8007354 <_exit+0x16>

08007358 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007364:	2300      	movs	r3, #0
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	e00a      	b.n	8007380 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800736a:	e000      	b.n	800736e <_read+0x16>
 800736c:	bf00      	nop
 800736e:	0001      	movs	r1, r0
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	60ba      	str	r2, [r7, #8]
 8007376:	b2ca      	uxtb	r2, r1
 8007378:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	3301      	adds	r3, #1
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	429a      	cmp	r2, r3
 8007386:	dbf0      	blt.n	800736a <_read+0x12>
  }

  return len;
 8007388:	687b      	ldr	r3, [r7, #4]
}
 800738a:	0018      	movs	r0, r3
 800738c:	46bd      	mov	sp, r7
 800738e:	b006      	add	sp, #24
 8007390:	bd80      	pop	{r7, pc}

08007392 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b086      	sub	sp, #24
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800739e:	2300      	movs	r3, #0
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	e009      	b.n	80073b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	60ba      	str	r2, [r7, #8]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	0018      	movs	r0, r3
 80073ae:	e000      	b.n	80073b2 <_write+0x20>
 80073b0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	3301      	adds	r3, #1
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	429a      	cmp	r2, r3
 80073be:	dbf1      	blt.n	80073a4 <_write+0x12>
  }
  return len;
 80073c0:	687b      	ldr	r3, [r7, #4]
}
 80073c2:	0018      	movs	r0, r3
 80073c4:	46bd      	mov	sp, r7
 80073c6:	b006      	add	sp, #24
 80073c8:	bd80      	pop	{r7, pc}

080073ca <_close>:

int _close(int file)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80073d2:	2301      	movs	r3, #1
 80073d4:	425b      	negs	r3, r3
}
 80073d6:	0018      	movs	r0, r3
 80073d8:	46bd      	mov	sp, r7
 80073da:	b002      	add	sp, #8
 80073dc:	bd80      	pop	{r7, pc}

080073de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2280      	movs	r2, #128	@ 0x80
 80073ec:	0192      	lsls	r2, r2, #6
 80073ee:	605a      	str	r2, [r3, #4]
  return 0;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	0018      	movs	r0, r3
 80073f4:	46bd      	mov	sp, r7
 80073f6:	b002      	add	sp, #8
 80073f8:	bd80      	pop	{r7, pc}

080073fa <_isatty>:

int _isatty(int file)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007402:	2301      	movs	r3, #1
}
 8007404:	0018      	movs	r0, r3
 8007406:	46bd      	mov	sp, r7
 8007408:	b002      	add	sp, #8
 800740a:	bd80      	pop	{r7, pc}

0800740c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007418:	2300      	movs	r3, #0
}
 800741a:	0018      	movs	r0, r3
 800741c:	46bd      	mov	sp, r7
 800741e:	b004      	add	sp, #16
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800742c:	4a14      	ldr	r2, [pc, #80]	@ (8007480 <_sbrk+0x5c>)
 800742e:	4b15      	ldr	r3, [pc, #84]	@ (8007484 <_sbrk+0x60>)
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007438:	4b13      	ldr	r3, [pc, #76]	@ (8007488 <_sbrk+0x64>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d102      	bne.n	8007446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007440:	4b11      	ldr	r3, [pc, #68]	@ (8007488 <_sbrk+0x64>)
 8007442:	4a12      	ldr	r2, [pc, #72]	@ (800748c <_sbrk+0x68>)
 8007444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007446:	4b10      	ldr	r3, [pc, #64]	@ (8007488 <_sbrk+0x64>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	18d3      	adds	r3, r2, r3
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	429a      	cmp	r2, r3
 8007452:	d207      	bcs.n	8007464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007454:	f004 fb32 	bl	800babc <__errno>
 8007458:	0003      	movs	r3, r0
 800745a:	220c      	movs	r2, #12
 800745c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800745e:	2301      	movs	r3, #1
 8007460:	425b      	negs	r3, r3
 8007462:	e009      	b.n	8007478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007464:	4b08      	ldr	r3, [pc, #32]	@ (8007488 <_sbrk+0x64>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800746a:	4b07      	ldr	r3, [pc, #28]	@ (8007488 <_sbrk+0x64>)
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	18d2      	adds	r2, r2, r3
 8007472:	4b05      	ldr	r3, [pc, #20]	@ (8007488 <_sbrk+0x64>)
 8007474:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007476:	68fb      	ldr	r3, [r7, #12]
}
 8007478:	0018      	movs	r0, r3
 800747a:	46bd      	mov	sp, r7
 800747c:	b006      	add	sp, #24
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20009000 	.word	0x20009000
 8007484:	00000400 	.word	0x00000400
 8007488:	200007e8 	.word	0x200007e8
 800748c:	20000940 	.word	0x20000940

08007490 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007494:	46c0      	nop			@ (mov r8, r8)
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800749c:	480d      	ldr	r0, [pc, #52]	@ (80074d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800749e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80074a0:	f7ff fff6 	bl	8007490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80074a4:	480c      	ldr	r0, [pc, #48]	@ (80074d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80074a6:	490d      	ldr	r1, [pc, #52]	@ (80074dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80074a8:	4a0d      	ldr	r2, [pc, #52]	@ (80074e0 <LoopForever+0xe>)
  movs r3, #0
 80074aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80074ac:	e002      	b.n	80074b4 <LoopCopyDataInit>

080074ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80074ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80074b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80074b2:	3304      	adds	r3, #4

080074b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80074b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80074b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80074b8:	d3f9      	bcc.n	80074ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80074ba:	4a0a      	ldr	r2, [pc, #40]	@ (80074e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80074bc:	4c0a      	ldr	r4, [pc, #40]	@ (80074e8 <LoopForever+0x16>)
  movs r3, #0
 80074be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80074c0:	e001      	b.n	80074c6 <LoopFillZerobss>

080074c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80074c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80074c4:	3204      	adds	r2, #4

080074c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80074c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80074c8:	d3fb      	bcc.n	80074c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80074ca:	f004 fafd 	bl	800bac8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80074ce:	f7ff f81d 	bl	800650c <main>

080074d2 <LoopForever>:

LoopForever:
  b LoopForever
 80074d2:	e7fe      	b.n	80074d2 <LoopForever>
  ldr   r0, =_estack
 80074d4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80074d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80074dc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80074e0:	0800f234 	.word	0x0800f234
  ldr r2, =_sbss
 80074e4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80074e8:	2000093c 	.word	0x2000093c

080074ec <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80074ec:	e7fe      	b.n	80074ec <ADC1_COMP_IRQHandler>
	...

080074f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80074f6:	1dfb      	adds	r3, r7, #7
 80074f8:	2200      	movs	r2, #0
 80074fa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074fc:	4b0b      	ldr	r3, [pc, #44]	@ (800752c <HAL_Init+0x3c>)
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	4b0a      	ldr	r3, [pc, #40]	@ (800752c <HAL_Init+0x3c>)
 8007502:	2180      	movs	r1, #128	@ 0x80
 8007504:	0049      	lsls	r1, r1, #1
 8007506:	430a      	orrs	r2, r1
 8007508:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800750a:	2000      	movs	r0, #0
 800750c:	f000 f810 	bl	8007530 <HAL_InitTick>
 8007510:	1e03      	subs	r3, r0, #0
 8007512:	d003      	beq.n	800751c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8007514:	1dfb      	adds	r3, r7, #7
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
 800751a:	e001      	b.n	8007520 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800751c:	f7ff fdb0 	bl	8007080 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007520:	1dfb      	adds	r3, r7, #7
 8007522:	781b      	ldrb	r3, [r3, #0]
}
 8007524:	0018      	movs	r0, r3
 8007526:	46bd      	mov	sp, r7
 8007528:	b002      	add	sp, #8
 800752a:	bd80      	pop	{r7, pc}
 800752c:	40022000 	.word	0x40022000

08007530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007530:	b590      	push	{r4, r7, lr}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007538:	230f      	movs	r3, #15
 800753a:	18fb      	adds	r3, r7, r3
 800753c:	2200      	movs	r2, #0
 800753e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8007540:	4b1d      	ldr	r3, [pc, #116]	@ (80075b8 <HAL_InitTick+0x88>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d02b      	beq.n	80075a0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8007548:	4b1c      	ldr	r3, [pc, #112]	@ (80075bc <HAL_InitTick+0x8c>)
 800754a:	681c      	ldr	r4, [r3, #0]
 800754c:	4b1a      	ldr	r3, [pc, #104]	@ (80075b8 <HAL_InitTick+0x88>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	0019      	movs	r1, r3
 8007552:	23fa      	movs	r3, #250	@ 0xfa
 8007554:	0098      	lsls	r0, r3, #2
 8007556:	f7f8 fdfb 	bl	8000150 <__udivsi3>
 800755a:	0003      	movs	r3, r0
 800755c:	0019      	movs	r1, r3
 800755e:	0020      	movs	r0, r4
 8007560:	f7f8 fdf6 	bl	8000150 <__udivsi3>
 8007564:	0003      	movs	r3, r0
 8007566:	0018      	movs	r0, r3
 8007568:	f000 f913 	bl	8007792 <HAL_SYSTICK_Config>
 800756c:	1e03      	subs	r3, r0, #0
 800756e:	d112      	bne.n	8007596 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b03      	cmp	r3, #3
 8007574:	d80a      	bhi.n	800758c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007576:	6879      	ldr	r1, [r7, #4]
 8007578:	2301      	movs	r3, #1
 800757a:	425b      	negs	r3, r3
 800757c:	2200      	movs	r2, #0
 800757e:	0018      	movs	r0, r3
 8007580:	f000 f8f2 	bl	8007768 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007584:	4b0e      	ldr	r3, [pc, #56]	@ (80075c0 <HAL_InitTick+0x90>)
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	e00d      	b.n	80075a8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800758c:	230f      	movs	r3, #15
 800758e:	18fb      	adds	r3, r7, r3
 8007590:	2201      	movs	r2, #1
 8007592:	701a      	strb	r2, [r3, #0]
 8007594:	e008      	b.n	80075a8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007596:	230f      	movs	r3, #15
 8007598:	18fb      	adds	r3, r7, r3
 800759a:	2201      	movs	r2, #1
 800759c:	701a      	strb	r2, [r3, #0]
 800759e:	e003      	b.n	80075a8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80075a0:	230f      	movs	r3, #15
 80075a2:	18fb      	adds	r3, r7, r3
 80075a4:	2201      	movs	r2, #1
 80075a6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80075a8:	230f      	movs	r3, #15
 80075aa:	18fb      	adds	r3, r7, r3
 80075ac:	781b      	ldrb	r3, [r3, #0]
}
 80075ae:	0018      	movs	r0, r3
 80075b0:	46bd      	mov	sp, r7
 80075b2:	b005      	add	sp, #20
 80075b4:	bd90      	pop	{r4, r7, pc}
 80075b6:	46c0      	nop			@ (mov r8, r8)
 80075b8:	20000008 	.word	0x20000008
 80075bc:	20000000 	.word	0x20000000
 80075c0:	20000004 	.word	0x20000004

080075c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80075c8:	4b05      	ldr	r3, [pc, #20]	@ (80075e0 <HAL_IncTick+0x1c>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	001a      	movs	r2, r3
 80075ce:	4b05      	ldr	r3, [pc, #20]	@ (80075e4 <HAL_IncTick+0x20>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	18d2      	adds	r2, r2, r3
 80075d4:	4b03      	ldr	r3, [pc, #12]	@ (80075e4 <HAL_IncTick+0x20>)
 80075d6:	601a      	str	r2, [r3, #0]
}
 80075d8:	46c0      	nop			@ (mov r8, r8)
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	46c0      	nop			@ (mov r8, r8)
 80075e0:	20000008 	.word	0x20000008
 80075e4:	200007ec 	.word	0x200007ec

080075e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
  return uwTick;
 80075ec:	4b02      	ldr	r3, [pc, #8]	@ (80075f8 <HAL_GetTick+0x10>)
 80075ee:	681b      	ldr	r3, [r3, #0]
}
 80075f0:	0018      	movs	r0, r3
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	46c0      	nop			@ (mov r8, r8)
 80075f8:	200007ec 	.word	0x200007ec

080075fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007604:	f7ff fff0 	bl	80075e8 <HAL_GetTick>
 8007608:	0003      	movs	r3, r0
 800760a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3301      	adds	r3, #1
 8007614:	d005      	beq.n	8007622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007616:	4b0a      	ldr	r3, [pc, #40]	@ (8007640 <HAL_Delay+0x44>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	001a      	movs	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	189b      	adds	r3, r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007622:	46c0      	nop			@ (mov r8, r8)
 8007624:	f7ff ffe0 	bl	80075e8 <HAL_GetTick>
 8007628:	0002      	movs	r2, r0
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	429a      	cmp	r2, r3
 8007632:	d8f7      	bhi.n	8007624 <HAL_Delay+0x28>
  {
  }
}
 8007634:	46c0      	nop			@ (mov r8, r8)
 8007636:	46c0      	nop			@ (mov r8, r8)
 8007638:	46bd      	mov	sp, r7
 800763a:	b004      	add	sp, #16
 800763c:	bd80      	pop	{r7, pc}
 800763e:	46c0      	nop			@ (mov r8, r8)
 8007640:	20000008 	.word	0x20000008

08007644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007644:	b590      	push	{r4, r7, lr}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	0002      	movs	r2, r0
 800764c:	6039      	str	r1, [r7, #0]
 800764e:	1dfb      	adds	r3, r7, #7
 8007650:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007652:	1dfb      	adds	r3, r7, #7
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b7f      	cmp	r3, #127	@ 0x7f
 8007658:	d828      	bhi.n	80076ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800765a:	4a2f      	ldr	r2, [pc, #188]	@ (8007718 <__NVIC_SetPriority+0xd4>)
 800765c:	1dfb      	adds	r3, r7, #7
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	b25b      	sxtb	r3, r3
 8007662:	089b      	lsrs	r3, r3, #2
 8007664:	33c0      	adds	r3, #192	@ 0xc0
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	589b      	ldr	r3, [r3, r2]
 800766a:	1dfa      	adds	r2, r7, #7
 800766c:	7812      	ldrb	r2, [r2, #0]
 800766e:	0011      	movs	r1, r2
 8007670:	2203      	movs	r2, #3
 8007672:	400a      	ands	r2, r1
 8007674:	00d2      	lsls	r2, r2, #3
 8007676:	21ff      	movs	r1, #255	@ 0xff
 8007678:	4091      	lsls	r1, r2
 800767a:	000a      	movs	r2, r1
 800767c:	43d2      	mvns	r2, r2
 800767e:	401a      	ands	r2, r3
 8007680:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	019b      	lsls	r3, r3, #6
 8007686:	22ff      	movs	r2, #255	@ 0xff
 8007688:	401a      	ands	r2, r3
 800768a:	1dfb      	adds	r3, r7, #7
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	0018      	movs	r0, r3
 8007690:	2303      	movs	r3, #3
 8007692:	4003      	ands	r3, r0
 8007694:	00db      	lsls	r3, r3, #3
 8007696:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007698:	481f      	ldr	r0, [pc, #124]	@ (8007718 <__NVIC_SetPriority+0xd4>)
 800769a:	1dfb      	adds	r3, r7, #7
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	b25b      	sxtb	r3, r3
 80076a0:	089b      	lsrs	r3, r3, #2
 80076a2:	430a      	orrs	r2, r1
 80076a4:	33c0      	adds	r3, #192	@ 0xc0
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80076aa:	e031      	b.n	8007710 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80076ac:	4a1b      	ldr	r2, [pc, #108]	@ (800771c <__NVIC_SetPriority+0xd8>)
 80076ae:	1dfb      	adds	r3, r7, #7
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	0019      	movs	r1, r3
 80076b4:	230f      	movs	r3, #15
 80076b6:	400b      	ands	r3, r1
 80076b8:	3b08      	subs	r3, #8
 80076ba:	089b      	lsrs	r3, r3, #2
 80076bc:	3306      	adds	r3, #6
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	18d3      	adds	r3, r2, r3
 80076c2:	3304      	adds	r3, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	1dfa      	adds	r2, r7, #7
 80076c8:	7812      	ldrb	r2, [r2, #0]
 80076ca:	0011      	movs	r1, r2
 80076cc:	2203      	movs	r2, #3
 80076ce:	400a      	ands	r2, r1
 80076d0:	00d2      	lsls	r2, r2, #3
 80076d2:	21ff      	movs	r1, #255	@ 0xff
 80076d4:	4091      	lsls	r1, r2
 80076d6:	000a      	movs	r2, r1
 80076d8:	43d2      	mvns	r2, r2
 80076da:	401a      	ands	r2, r3
 80076dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	019b      	lsls	r3, r3, #6
 80076e2:	22ff      	movs	r2, #255	@ 0xff
 80076e4:	401a      	ands	r2, r3
 80076e6:	1dfb      	adds	r3, r7, #7
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	0018      	movs	r0, r3
 80076ec:	2303      	movs	r3, #3
 80076ee:	4003      	ands	r3, r0
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80076f4:	4809      	ldr	r0, [pc, #36]	@ (800771c <__NVIC_SetPriority+0xd8>)
 80076f6:	1dfb      	adds	r3, r7, #7
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	001c      	movs	r4, r3
 80076fc:	230f      	movs	r3, #15
 80076fe:	4023      	ands	r3, r4
 8007700:	3b08      	subs	r3, #8
 8007702:	089b      	lsrs	r3, r3, #2
 8007704:	430a      	orrs	r2, r1
 8007706:	3306      	adds	r3, #6
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	18c3      	adds	r3, r0, r3
 800770c:	3304      	adds	r3, #4
 800770e:	601a      	str	r2, [r3, #0]
}
 8007710:	46c0      	nop			@ (mov r8, r8)
 8007712:	46bd      	mov	sp, r7
 8007714:	b003      	add	sp, #12
 8007716:	bd90      	pop	{r4, r7, pc}
 8007718:	e000e100 	.word	0xe000e100
 800771c:	e000ed00 	.word	0xe000ed00

08007720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	1e5a      	subs	r2, r3, #1
 800772c:	2380      	movs	r3, #128	@ 0x80
 800772e:	045b      	lsls	r3, r3, #17
 8007730:	429a      	cmp	r2, r3
 8007732:	d301      	bcc.n	8007738 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007734:	2301      	movs	r3, #1
 8007736:	e010      	b.n	800775a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007738:	4b0a      	ldr	r3, [pc, #40]	@ (8007764 <SysTick_Config+0x44>)
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	3a01      	subs	r2, #1
 800773e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007740:	2301      	movs	r3, #1
 8007742:	425b      	negs	r3, r3
 8007744:	2103      	movs	r1, #3
 8007746:	0018      	movs	r0, r3
 8007748:	f7ff ff7c 	bl	8007644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800774c:	4b05      	ldr	r3, [pc, #20]	@ (8007764 <SysTick_Config+0x44>)
 800774e:	2200      	movs	r2, #0
 8007750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007752:	4b04      	ldr	r3, [pc, #16]	@ (8007764 <SysTick_Config+0x44>)
 8007754:	2207      	movs	r2, #7
 8007756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007758:	2300      	movs	r3, #0
}
 800775a:	0018      	movs	r0, r3
 800775c:	46bd      	mov	sp, r7
 800775e:	b002      	add	sp, #8
 8007760:	bd80      	pop	{r7, pc}
 8007762:	46c0      	nop			@ (mov r8, r8)
 8007764:	e000e010 	.word	0xe000e010

08007768 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	607a      	str	r2, [r7, #4]
 8007772:	210f      	movs	r1, #15
 8007774:	187b      	adds	r3, r7, r1
 8007776:	1c02      	adds	r2, r0, #0
 8007778:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	187b      	adds	r3, r7, r1
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	b25b      	sxtb	r3, r3
 8007782:	0011      	movs	r1, r2
 8007784:	0018      	movs	r0, r3
 8007786:	f7ff ff5d 	bl	8007644 <__NVIC_SetPriority>
}
 800778a:	46c0      	nop			@ (mov r8, r8)
 800778c:	46bd      	mov	sp, r7
 800778e:	b004      	add	sp, #16
 8007790:	bd80      	pop	{r7, pc}

08007792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	0018      	movs	r0, r3
 800779e:	f7ff ffbf 	bl	8007720 <SysTick_Config>
 80077a2:	0003      	movs	r3, r0
}
 80077a4:	0018      	movs	r0, r3
 80077a6:	46bd      	mov	sp, r7
 80077a8:	b002      	add	sp, #8
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80077b6:	2300      	movs	r3, #0
 80077b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077ba:	e147      	b.n	8007a4c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2101      	movs	r1, #1
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	4091      	lsls	r1, r2
 80077c6:	000a      	movs	r2, r1
 80077c8:	4013      	ands	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d100      	bne.n	80077d4 <HAL_GPIO_Init+0x28>
 80077d2:	e138      	b.n	8007a46 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	2203      	movs	r2, #3
 80077da:	4013      	ands	r3, r2
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d005      	beq.n	80077ec <HAL_GPIO_Init+0x40>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2203      	movs	r2, #3
 80077e6:	4013      	ands	r3, r2
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d130      	bne.n	800784e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	2203      	movs	r2, #3
 80077f8:	409a      	lsls	r2, r3
 80077fa:	0013      	movs	r3, r2
 80077fc:	43da      	mvns	r2, r3
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	4013      	ands	r3, r2
 8007802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	409a      	lsls	r2, r3
 800780e:	0013      	movs	r3, r2
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	4313      	orrs	r3, r2
 8007814:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007822:	2201      	movs	r2, #1
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	409a      	lsls	r2, r3
 8007828:	0013      	movs	r3, r2
 800782a:	43da      	mvns	r2, r3
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	4013      	ands	r3, r2
 8007830:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	091b      	lsrs	r3, r3, #4
 8007838:	2201      	movs	r2, #1
 800783a:	401a      	ands	r2, r3
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	409a      	lsls	r2, r3
 8007840:	0013      	movs	r3, r2
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	4313      	orrs	r3, r2
 8007846:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	2203      	movs	r2, #3
 8007854:	4013      	ands	r3, r2
 8007856:	2b03      	cmp	r3, #3
 8007858:	d017      	beq.n	800788a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	2203      	movs	r2, #3
 8007866:	409a      	lsls	r2, r3
 8007868:	0013      	movs	r3, r2
 800786a:	43da      	mvns	r2, r3
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	4013      	ands	r3, r2
 8007870:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	409a      	lsls	r2, r3
 800787c:	0013      	movs	r3, r2
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	4313      	orrs	r3, r2
 8007882:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2203      	movs	r2, #3
 8007890:	4013      	ands	r3, r2
 8007892:	2b02      	cmp	r3, #2
 8007894:	d123      	bne.n	80078de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	08da      	lsrs	r2, r3, #3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3208      	adds	r2, #8
 800789e:	0092      	lsls	r2, r2, #2
 80078a0:	58d3      	ldr	r3, [r2, r3]
 80078a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2207      	movs	r2, #7
 80078a8:	4013      	ands	r3, r2
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	220f      	movs	r2, #15
 80078ae:	409a      	lsls	r2, r3
 80078b0:	0013      	movs	r3, r2
 80078b2:	43da      	mvns	r2, r3
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	4013      	ands	r3, r2
 80078b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2107      	movs	r1, #7
 80078c2:	400b      	ands	r3, r1
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	409a      	lsls	r2, r3
 80078c8:	0013      	movs	r3, r2
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	08da      	lsrs	r2, r3, #3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3208      	adds	r2, #8
 80078d8:	0092      	lsls	r2, r2, #2
 80078da:	6939      	ldr	r1, [r7, #16]
 80078dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	2203      	movs	r2, #3
 80078ea:	409a      	lsls	r2, r3
 80078ec:	0013      	movs	r3, r2
 80078ee:	43da      	mvns	r2, r3
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4013      	ands	r3, r2
 80078f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	2203      	movs	r2, #3
 80078fc:	401a      	ands	r2, r3
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	409a      	lsls	r2, r3
 8007904:	0013      	movs	r3, r2
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	23c0      	movs	r3, #192	@ 0xc0
 8007918:	029b      	lsls	r3, r3, #10
 800791a:	4013      	ands	r3, r2
 800791c:	d100      	bne.n	8007920 <HAL_GPIO_Init+0x174>
 800791e:	e092      	b.n	8007a46 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007920:	4a50      	ldr	r2, [pc, #320]	@ (8007a64 <HAL_GPIO_Init+0x2b8>)
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	089b      	lsrs	r3, r3, #2
 8007926:	3318      	adds	r3, #24
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	589b      	ldr	r3, [r3, r2]
 800792c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2203      	movs	r2, #3
 8007932:	4013      	ands	r3, r2
 8007934:	00db      	lsls	r3, r3, #3
 8007936:	220f      	movs	r2, #15
 8007938:	409a      	lsls	r2, r3
 800793a:	0013      	movs	r3, r2
 800793c:	43da      	mvns	r2, r3
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	4013      	ands	r3, r2
 8007942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	23a0      	movs	r3, #160	@ 0xa0
 8007948:	05db      	lsls	r3, r3, #23
 800794a:	429a      	cmp	r2, r3
 800794c:	d013      	beq.n	8007976 <HAL_GPIO_Init+0x1ca>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a45      	ldr	r2, [pc, #276]	@ (8007a68 <HAL_GPIO_Init+0x2bc>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00d      	beq.n	8007972 <HAL_GPIO_Init+0x1c6>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a44      	ldr	r2, [pc, #272]	@ (8007a6c <HAL_GPIO_Init+0x2c0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d007      	beq.n	800796e <HAL_GPIO_Init+0x1c2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a43      	ldr	r2, [pc, #268]	@ (8007a70 <HAL_GPIO_Init+0x2c4>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d101      	bne.n	800796a <HAL_GPIO_Init+0x1be>
 8007966:	2303      	movs	r3, #3
 8007968:	e006      	b.n	8007978 <HAL_GPIO_Init+0x1cc>
 800796a:	2305      	movs	r3, #5
 800796c:	e004      	b.n	8007978 <HAL_GPIO_Init+0x1cc>
 800796e:	2302      	movs	r3, #2
 8007970:	e002      	b.n	8007978 <HAL_GPIO_Init+0x1cc>
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <HAL_GPIO_Init+0x1cc>
 8007976:	2300      	movs	r3, #0
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	2103      	movs	r1, #3
 800797c:	400a      	ands	r2, r1
 800797e:	00d2      	lsls	r2, r2, #3
 8007980:	4093      	lsls	r3, r2
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	4313      	orrs	r3, r2
 8007986:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007988:	4936      	ldr	r1, [pc, #216]	@ (8007a64 <HAL_GPIO_Init+0x2b8>)
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	089b      	lsrs	r3, r3, #2
 800798e:	3318      	adds	r3, #24
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007996:	4b33      	ldr	r3, [pc, #204]	@ (8007a64 <HAL_GPIO_Init+0x2b8>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	43da      	mvns	r2, r3
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	4013      	ands	r3, r2
 80079a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	2380      	movs	r3, #128	@ 0x80
 80079ac:	035b      	lsls	r3, r3, #13
 80079ae:	4013      	ands	r3, r2
 80079b0:	d003      	beq.n	80079ba <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80079ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007a64 <HAL_GPIO_Init+0x2b8>)
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80079c0:	4b28      	ldr	r3, [pc, #160]	@ (8007a64 <HAL_GPIO_Init+0x2b8>)
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	43da      	mvns	r2, r3
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	4013      	ands	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	2380      	movs	r3, #128	@ 0x80
 80079d6:	039b      	lsls	r3, r3, #14
 80079d8:	4013      	ands	r3, r2
 80079da:	d003      	beq.n	80079e4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80079e4:	4b1f      	ldr	r3, [pc, #124]	@ (8007a64 <HAL_GPIO_Init+0x2b8>)
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80079ea:	4a1e      	ldr	r2, [pc, #120]	@ (8007a64 <HAL_GPIO_Init+0x2b8>)
 80079ec:	2384      	movs	r3, #132	@ 0x84
 80079ee:	58d3      	ldr	r3, [r2, r3]
 80079f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	43da      	mvns	r2, r3
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	4013      	ands	r3, r2
 80079fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	2380      	movs	r3, #128	@ 0x80
 8007a02:	029b      	lsls	r3, r3, #10
 8007a04:	4013      	ands	r3, r2
 8007a06:	d003      	beq.n	8007a10 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007a10:	4914      	ldr	r1, [pc, #80]	@ (8007a64 <HAL_GPIO_Init+0x2b8>)
 8007a12:	2284      	movs	r2, #132	@ 0x84
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8007a18:	4a12      	ldr	r2, [pc, #72]	@ (8007a64 <HAL_GPIO_Init+0x2b8>)
 8007a1a:	2380      	movs	r3, #128	@ 0x80
 8007a1c:	58d3      	ldr	r3, [r2, r3]
 8007a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	43da      	mvns	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	4013      	ands	r3, r2
 8007a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	2380      	movs	r3, #128	@ 0x80
 8007a30:	025b      	lsls	r3, r3, #9
 8007a32:	4013      	ands	r3, r2
 8007a34:	d003      	beq.n	8007a3e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007a3e:	4909      	ldr	r1, [pc, #36]	@ (8007a64 <HAL_GPIO_Init+0x2b8>)
 8007a40:	2280      	movs	r2, #128	@ 0x80
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	40da      	lsrs	r2, r3
 8007a54:	1e13      	subs	r3, r2, #0
 8007a56:	d000      	beq.n	8007a5a <HAL_GPIO_Init+0x2ae>
 8007a58:	e6b0      	b.n	80077bc <HAL_GPIO_Init+0x10>
  }
}
 8007a5a:	46c0      	nop			@ (mov r8, r8)
 8007a5c:	46c0      	nop			@ (mov r8, r8)
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	b006      	add	sp, #24
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	40021800 	.word	0x40021800
 8007a68:	50000400 	.word	0x50000400
 8007a6c:	50000800 	.word	0x50000800
 8007a70:	50000c00 	.word	0x50000c00

08007a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	000a      	movs	r2, r1
 8007a7e:	1cbb      	adds	r3, r7, #2
 8007a80:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	1cba      	adds	r2, r7, #2
 8007a88:	8812      	ldrh	r2, [r2, #0]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	d004      	beq.n	8007a98 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8007a8e:	230f      	movs	r3, #15
 8007a90:	18fb      	adds	r3, r7, r3
 8007a92:	2201      	movs	r2, #1
 8007a94:	701a      	strb	r2, [r3, #0]
 8007a96:	e003      	b.n	8007aa0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a98:	230f      	movs	r3, #15
 8007a9a:	18fb      	adds	r3, r7, r3
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007aa0:	230f      	movs	r3, #15
 8007aa2:	18fb      	adds	r3, r7, r3
 8007aa4:	781b      	ldrb	r3, [r3, #0]
}
 8007aa6:	0018      	movs	r0, r3
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	b004      	add	sp, #16
 8007aac:	bd80      	pop	{r7, pc}

08007aae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	0008      	movs	r0, r1
 8007ab8:	0011      	movs	r1, r2
 8007aba:	1cbb      	adds	r3, r7, #2
 8007abc:	1c02      	adds	r2, r0, #0
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	1c7b      	adds	r3, r7, #1
 8007ac2:	1c0a      	adds	r2, r1, #0
 8007ac4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ac6:	1c7b      	adds	r3, r7, #1
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d004      	beq.n	8007ad8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007ace:	1cbb      	adds	r3, r7, #2
 8007ad0:	881a      	ldrh	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007ad6:	e003      	b.n	8007ae0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007ad8:	1cbb      	adds	r3, r7, #2
 8007ada:	881a      	ldrh	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007ae0:	46c0      	nop			@ (mov r8, r8)
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	b002      	add	sp, #8
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e08f      	b.n	8007c1a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2241      	movs	r2, #65	@ 0x41
 8007afe:	5c9b      	ldrb	r3, [r3, r2]
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d107      	bne.n	8007b16 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2240      	movs	r2, #64	@ 0x40
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	0018      	movs	r0, r3
 8007b12:	f7ff fad9 	bl	80070c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2241      	movs	r2, #65	@ 0x41
 8007b1a:	2124      	movs	r1, #36	@ 0x24
 8007b1c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2101      	movs	r1, #1
 8007b2a:	438a      	bics	r2, r1
 8007b2c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	493b      	ldr	r1, [pc, #236]	@ (8007c24 <HAL_I2C_Init+0x13c>)
 8007b38:	400a      	ands	r2, r1
 8007b3a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4938      	ldr	r1, [pc, #224]	@ (8007c28 <HAL_I2C_Init+0x140>)
 8007b48:	400a      	ands	r2, r1
 8007b4a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d108      	bne.n	8007b66 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2180      	movs	r1, #128	@ 0x80
 8007b5e:	0209      	lsls	r1, r1, #8
 8007b60:	430a      	orrs	r2, r1
 8007b62:	609a      	str	r2, [r3, #8]
 8007b64:	e007      	b.n	8007b76 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2184      	movs	r1, #132	@ 0x84
 8007b70:	0209      	lsls	r1, r1, #8
 8007b72:	430a      	orrs	r2, r1
 8007b74:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d109      	bne.n	8007b92 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685a      	ldr	r2, [r3, #4]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2180      	movs	r1, #128	@ 0x80
 8007b8a:	0109      	lsls	r1, r1, #4
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	605a      	str	r2, [r3, #4]
 8007b90:	e007      	b.n	8007ba2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4923      	ldr	r1, [pc, #140]	@ (8007c2c <HAL_I2C_Init+0x144>)
 8007b9e:	400a      	ands	r2, r1
 8007ba0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685a      	ldr	r2, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4920      	ldr	r1, [pc, #128]	@ (8007c30 <HAL_I2C_Init+0x148>)
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68da      	ldr	r2, [r3, #12]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	491a      	ldr	r1, [pc, #104]	@ (8007c28 <HAL_I2C_Init+0x140>)
 8007bbe:	400a      	ands	r2, r1
 8007bc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	691a      	ldr	r2, [r3, #16]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	69d9      	ldr	r1, [r3, #28]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a1a      	ldr	r2, [r3, #32]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2101      	movs	r1, #1
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2241      	movs	r2, #65	@ 0x41
 8007c06:	2120      	movs	r1, #32
 8007c08:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2242      	movs	r2, #66	@ 0x42
 8007c14:	2100      	movs	r1, #0
 8007c16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	b002      	add	sp, #8
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	46c0      	nop			@ (mov r8, r8)
 8007c24:	f0ffffff 	.word	0xf0ffffff
 8007c28:	ffff7fff 	.word	0xffff7fff
 8007c2c:	fffff7ff 	.word	0xfffff7ff
 8007c30:	02008000 	.word	0x02008000

08007c34 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c34:	b590      	push	{r4, r7, lr}
 8007c36:	b089      	sub	sp, #36	@ 0x24
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	000c      	movs	r4, r1
 8007c3e:	0010      	movs	r0, r2
 8007c40:	0019      	movs	r1, r3
 8007c42:	230a      	movs	r3, #10
 8007c44:	18fb      	adds	r3, r7, r3
 8007c46:	1c22      	adds	r2, r4, #0
 8007c48:	801a      	strh	r2, [r3, #0]
 8007c4a:	2308      	movs	r3, #8
 8007c4c:	18fb      	adds	r3, r7, r3
 8007c4e:	1c02      	adds	r2, r0, #0
 8007c50:	801a      	strh	r2, [r3, #0]
 8007c52:	1dbb      	adds	r3, r7, #6
 8007c54:	1c0a      	adds	r2, r1, #0
 8007c56:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2241      	movs	r2, #65	@ 0x41
 8007c5c:	5c9b      	ldrb	r3, [r3, r2]
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	d000      	beq.n	8007c66 <HAL_I2C_Mem_Write+0x32>
 8007c64:	e10c      	b.n	8007e80 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d004      	beq.n	8007c76 <HAL_I2C_Mem_Write+0x42>
 8007c6c:	232c      	movs	r3, #44	@ 0x2c
 8007c6e:	18fb      	adds	r3, r7, r3
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d105      	bne.n	8007c82 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2280      	movs	r2, #128	@ 0x80
 8007c7a:	0092      	lsls	r2, r2, #2
 8007c7c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e0ff      	b.n	8007e82 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2240      	movs	r2, #64	@ 0x40
 8007c86:	5c9b      	ldrb	r3, [r3, r2]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_I2C_Mem_Write+0x5c>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e0f8      	b.n	8007e82 <HAL_I2C_Mem_Write+0x24e>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2240      	movs	r2, #64	@ 0x40
 8007c94:	2101      	movs	r1, #1
 8007c96:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007c98:	f7ff fca6 	bl	80075e8 <HAL_GetTick>
 8007c9c:	0003      	movs	r3, r0
 8007c9e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ca0:	2380      	movs	r3, #128	@ 0x80
 8007ca2:	0219      	lsls	r1, r3, #8
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	2319      	movs	r3, #25
 8007cac:	2201      	movs	r2, #1
 8007cae:	f000 fb0b 	bl	80082c8 <I2C_WaitOnFlagUntilTimeout>
 8007cb2:	1e03      	subs	r3, r0, #0
 8007cb4:	d001      	beq.n	8007cba <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e0e3      	b.n	8007e82 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2241      	movs	r2, #65	@ 0x41
 8007cbe:	2121      	movs	r1, #33	@ 0x21
 8007cc0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2242      	movs	r2, #66	@ 0x42
 8007cc6:	2140      	movs	r1, #64	@ 0x40
 8007cc8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007cd4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	222c      	movs	r2, #44	@ 0x2c
 8007cda:	18ba      	adds	r2, r7, r2
 8007cdc:	8812      	ldrh	r2, [r2, #0]
 8007cde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ce6:	1dbb      	adds	r3, r7, #6
 8007ce8:	881c      	ldrh	r4, [r3, #0]
 8007cea:	2308      	movs	r3, #8
 8007cec:	18fb      	adds	r3, r7, r3
 8007cee:	881a      	ldrh	r2, [r3, #0]
 8007cf0:	230a      	movs	r3, #10
 8007cf2:	18fb      	adds	r3, r7, r3
 8007cf4:	8819      	ldrh	r1, [r3, #0]
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	9301      	str	r3, [sp, #4]
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	0023      	movs	r3, r4
 8007d02:	f000 f9f9 	bl	80080f8 <I2C_RequestMemoryWrite>
 8007d06:	1e03      	subs	r3, r0, #0
 8007d08:	d005      	beq.n	8007d16 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2240      	movs	r2, #64	@ 0x40
 8007d0e:	2100      	movs	r1, #0
 8007d10:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e0b5      	b.n	8007e82 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	2bff      	cmp	r3, #255	@ 0xff
 8007d1e:	d911      	bls.n	8007d44 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	22ff      	movs	r2, #255	@ 0xff
 8007d24:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	2380      	movs	r3, #128	@ 0x80
 8007d2e:	045c      	lsls	r4, r3, #17
 8007d30:	230a      	movs	r3, #10
 8007d32:	18fb      	adds	r3, r7, r3
 8007d34:	8819      	ldrh	r1, [r3, #0]
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	0023      	movs	r3, r4
 8007d3e:	f000 fc9d 	bl	800867c <I2C_TransferConfig>
 8007d42:	e012      	b.n	8007d6a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	2380      	movs	r3, #128	@ 0x80
 8007d56:	049c      	lsls	r4, r3, #18
 8007d58:	230a      	movs	r3, #10
 8007d5a:	18fb      	adds	r3, r7, r3
 8007d5c:	8819      	ldrh	r1, [r3, #0]
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	2300      	movs	r3, #0
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	0023      	movs	r3, r4
 8007d66:	f000 fc89 	bl	800867c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	0018      	movs	r0, r3
 8007d72:	f000 fb01 	bl	8008378 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d76:	1e03      	subs	r3, r0, #0
 8007d78:	d001      	beq.n	8007d7e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e081      	b.n	8007e82 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d82:	781a      	ldrb	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d8e:	1c5a      	adds	r2, r3, #1
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007da6:	3b01      	subs	r3, #1
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d03a      	beq.n	8007e2e <HAL_I2C_Mem_Write+0x1fa>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d136      	bne.n	8007e2e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	0013      	movs	r3, r2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2180      	movs	r1, #128	@ 0x80
 8007dce:	f000 fa7b 	bl	80082c8 <I2C_WaitOnFlagUntilTimeout>
 8007dd2:	1e03      	subs	r3, r0, #0
 8007dd4:	d001      	beq.n	8007dda <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e053      	b.n	8007e82 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	2bff      	cmp	r3, #255	@ 0xff
 8007de2:	d911      	bls.n	8007e08 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	22ff      	movs	r2, #255	@ 0xff
 8007de8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	2380      	movs	r3, #128	@ 0x80
 8007df2:	045c      	lsls	r4, r3, #17
 8007df4:	230a      	movs	r3, #10
 8007df6:	18fb      	adds	r3, r7, r3
 8007df8:	8819      	ldrh	r1, [r3, #0]
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	0023      	movs	r3, r4
 8007e02:	f000 fc3b 	bl	800867c <I2C_TransferConfig>
 8007e06:	e012      	b.n	8007e2e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	2380      	movs	r3, #128	@ 0x80
 8007e1a:	049c      	lsls	r4, r3, #18
 8007e1c:	230a      	movs	r3, #10
 8007e1e:	18fb      	adds	r3, r7, r3
 8007e20:	8819      	ldrh	r1, [r3, #0]
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	2300      	movs	r3, #0
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	0023      	movs	r3, r4
 8007e2a:	f000 fc27 	bl	800867c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d198      	bne.n	8007d6a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	0018      	movs	r0, r3
 8007e40:	f000 fae0 	bl	8008404 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007e44:	1e03      	subs	r3, r0, #0
 8007e46:	d001      	beq.n	8007e4c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e01a      	b.n	8007e82 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2220      	movs	r2, #32
 8007e52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	490b      	ldr	r1, [pc, #44]	@ (8007e8c <HAL_I2C_Mem_Write+0x258>)
 8007e60:	400a      	ands	r2, r1
 8007e62:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2241      	movs	r2, #65	@ 0x41
 8007e68:	2120      	movs	r1, #32
 8007e6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2242      	movs	r2, #66	@ 0x42
 8007e70:	2100      	movs	r1, #0
 8007e72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2240      	movs	r2, #64	@ 0x40
 8007e78:	2100      	movs	r1, #0
 8007e7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	e000      	b.n	8007e82 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007e80:	2302      	movs	r3, #2
  }
}
 8007e82:	0018      	movs	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	b007      	add	sp, #28
 8007e88:	bd90      	pop	{r4, r7, pc}
 8007e8a:	46c0      	nop			@ (mov r8, r8)
 8007e8c:	fe00e800 	.word	0xfe00e800

08007e90 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e90:	b590      	push	{r4, r7, lr}
 8007e92:	b089      	sub	sp, #36	@ 0x24
 8007e94:	af02      	add	r7, sp, #8
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	000c      	movs	r4, r1
 8007e9a:	0010      	movs	r0, r2
 8007e9c:	0019      	movs	r1, r3
 8007e9e:	230a      	movs	r3, #10
 8007ea0:	18fb      	adds	r3, r7, r3
 8007ea2:	1c22      	adds	r2, r4, #0
 8007ea4:	801a      	strh	r2, [r3, #0]
 8007ea6:	2308      	movs	r3, #8
 8007ea8:	18fb      	adds	r3, r7, r3
 8007eaa:	1c02      	adds	r2, r0, #0
 8007eac:	801a      	strh	r2, [r3, #0]
 8007eae:	1dbb      	adds	r3, r7, #6
 8007eb0:	1c0a      	adds	r2, r1, #0
 8007eb2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2241      	movs	r2, #65	@ 0x41
 8007eb8:	5c9b      	ldrb	r3, [r3, r2]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b20      	cmp	r3, #32
 8007ebe:	d000      	beq.n	8007ec2 <HAL_I2C_Mem_Read+0x32>
 8007ec0:	e110      	b.n	80080e4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d004      	beq.n	8007ed2 <HAL_I2C_Mem_Read+0x42>
 8007ec8:	232c      	movs	r3, #44	@ 0x2c
 8007eca:	18fb      	adds	r3, r7, r3
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d105      	bne.n	8007ede <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2280      	movs	r2, #128	@ 0x80
 8007ed6:	0092      	lsls	r2, r2, #2
 8007ed8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e103      	b.n	80080e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2240      	movs	r2, #64	@ 0x40
 8007ee2:	5c9b      	ldrb	r3, [r3, r2]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d101      	bne.n	8007eec <HAL_I2C_Mem_Read+0x5c>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	e0fc      	b.n	80080e6 <HAL_I2C_Mem_Read+0x256>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2240      	movs	r2, #64	@ 0x40
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007ef4:	f7ff fb78 	bl	80075e8 <HAL_GetTick>
 8007ef8:	0003      	movs	r3, r0
 8007efa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007efc:	2380      	movs	r3, #128	@ 0x80
 8007efe:	0219      	lsls	r1, r3, #8
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	2319      	movs	r3, #25
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f000 f9dd 	bl	80082c8 <I2C_WaitOnFlagUntilTimeout>
 8007f0e:	1e03      	subs	r3, r0, #0
 8007f10:	d001      	beq.n	8007f16 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e0e7      	b.n	80080e6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2241      	movs	r2, #65	@ 0x41
 8007f1a:	2122      	movs	r1, #34	@ 0x22
 8007f1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2242      	movs	r2, #66	@ 0x42
 8007f22:	2140      	movs	r1, #64	@ 0x40
 8007f24:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	222c      	movs	r2, #44	@ 0x2c
 8007f36:	18ba      	adds	r2, r7, r2
 8007f38:	8812      	ldrh	r2, [r2, #0]
 8007f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007f42:	1dbb      	adds	r3, r7, #6
 8007f44:	881c      	ldrh	r4, [r3, #0]
 8007f46:	2308      	movs	r3, #8
 8007f48:	18fb      	adds	r3, r7, r3
 8007f4a:	881a      	ldrh	r2, [r3, #0]
 8007f4c:	230a      	movs	r3, #10
 8007f4e:	18fb      	adds	r3, r7, r3
 8007f50:	8819      	ldrh	r1, [r3, #0]
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	9301      	str	r3, [sp, #4]
 8007f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	0023      	movs	r3, r4
 8007f5e:	f000 f92f 	bl	80081c0 <I2C_RequestMemoryRead>
 8007f62:	1e03      	subs	r3, r0, #0
 8007f64:	d005      	beq.n	8007f72 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2240      	movs	r2, #64	@ 0x40
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e0b9      	b.n	80080e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	2bff      	cmp	r3, #255	@ 0xff
 8007f7a:	d911      	bls.n	8007fa0 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	22ff      	movs	r2, #255	@ 0xff
 8007f80:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	2380      	movs	r3, #128	@ 0x80
 8007f8a:	045c      	lsls	r4, r3, #17
 8007f8c:	230a      	movs	r3, #10
 8007f8e:	18fb      	adds	r3, r7, r3
 8007f90:	8819      	ldrh	r1, [r3, #0]
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	4b56      	ldr	r3, [pc, #344]	@ (80080f0 <HAL_I2C_Mem_Read+0x260>)
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	0023      	movs	r3, r4
 8007f9a:	f000 fb6f 	bl	800867c <I2C_TransferConfig>
 8007f9e:	e012      	b.n	8007fc6 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	2380      	movs	r3, #128	@ 0x80
 8007fb2:	049c      	lsls	r4, r3, #18
 8007fb4:	230a      	movs	r3, #10
 8007fb6:	18fb      	adds	r3, r7, r3
 8007fb8:	8819      	ldrh	r1, [r3, #0]
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80080f0 <HAL_I2C_Mem_Read+0x260>)
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	0023      	movs	r3, r4
 8007fc2:	f000 fb5b 	bl	800867c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	0013      	movs	r3, r2
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2104      	movs	r1, #4
 8007fd4:	f000 f978 	bl	80082c8 <I2C_WaitOnFlagUntilTimeout>
 8007fd8:	1e03      	subs	r3, r0, #0
 8007fda:	d001      	beq.n	8007fe0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e082      	b.n	80080e6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fea:	b2d2      	uxtb	r2, r2
 8007fec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008008:	b29b      	uxth	r3, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	b29a      	uxth	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008016:	b29b      	uxth	r3, r3
 8008018:	2b00      	cmp	r3, #0
 800801a:	d03a      	beq.n	8008092 <HAL_I2C_Mem_Read+0x202>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008020:	2b00      	cmp	r3, #0
 8008022:	d136      	bne.n	8008092 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008024:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	0013      	movs	r3, r2
 800802e:	2200      	movs	r2, #0
 8008030:	2180      	movs	r1, #128	@ 0x80
 8008032:	f000 f949 	bl	80082c8 <I2C_WaitOnFlagUntilTimeout>
 8008036:	1e03      	subs	r3, r0, #0
 8008038:	d001      	beq.n	800803e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e053      	b.n	80080e6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008042:	b29b      	uxth	r3, r3
 8008044:	2bff      	cmp	r3, #255	@ 0xff
 8008046:	d911      	bls.n	800806c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	22ff      	movs	r2, #255	@ 0xff
 800804c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008052:	b2da      	uxtb	r2, r3
 8008054:	2380      	movs	r3, #128	@ 0x80
 8008056:	045c      	lsls	r4, r3, #17
 8008058:	230a      	movs	r3, #10
 800805a:	18fb      	adds	r3, r7, r3
 800805c:	8819      	ldrh	r1, [r3, #0]
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	2300      	movs	r3, #0
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	0023      	movs	r3, r4
 8008066:	f000 fb09 	bl	800867c <I2C_TransferConfig>
 800806a:	e012      	b.n	8008092 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008070:	b29a      	uxth	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800807a:	b2da      	uxtb	r2, r3
 800807c:	2380      	movs	r3, #128	@ 0x80
 800807e:	049c      	lsls	r4, r3, #18
 8008080:	230a      	movs	r3, #10
 8008082:	18fb      	adds	r3, r7, r3
 8008084:	8819      	ldrh	r1, [r3, #0]
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	2300      	movs	r3, #0
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	0023      	movs	r3, r4
 800808e:	f000 faf5 	bl	800867c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008096:	b29b      	uxth	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d194      	bne.n	8007fc6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	0018      	movs	r0, r3
 80080a4:	f000 f9ae 	bl	8008404 <I2C_WaitOnSTOPFlagUntilTimeout>
 80080a8:	1e03      	subs	r3, r0, #0
 80080aa:	d001      	beq.n	80080b0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e01a      	b.n	80080e6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2220      	movs	r2, #32
 80080b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	490c      	ldr	r1, [pc, #48]	@ (80080f4 <HAL_I2C_Mem_Read+0x264>)
 80080c4:	400a      	ands	r2, r1
 80080c6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2241      	movs	r2, #65	@ 0x41
 80080cc:	2120      	movs	r1, #32
 80080ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2242      	movs	r2, #66	@ 0x42
 80080d4:	2100      	movs	r1, #0
 80080d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2240      	movs	r2, #64	@ 0x40
 80080dc:	2100      	movs	r1, #0
 80080de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	e000      	b.n	80080e6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80080e4:	2302      	movs	r3, #2
  }
}
 80080e6:	0018      	movs	r0, r3
 80080e8:	46bd      	mov	sp, r7
 80080ea:	b007      	add	sp, #28
 80080ec:	bd90      	pop	{r4, r7, pc}
 80080ee:	46c0      	nop			@ (mov r8, r8)
 80080f0:	80002400 	.word	0x80002400
 80080f4:	fe00e800 	.word	0xfe00e800

080080f8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80080f8:	b5b0      	push	{r4, r5, r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af02      	add	r7, sp, #8
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	000c      	movs	r4, r1
 8008102:	0010      	movs	r0, r2
 8008104:	0019      	movs	r1, r3
 8008106:	250a      	movs	r5, #10
 8008108:	197b      	adds	r3, r7, r5
 800810a:	1c22      	adds	r2, r4, #0
 800810c:	801a      	strh	r2, [r3, #0]
 800810e:	2308      	movs	r3, #8
 8008110:	18fb      	adds	r3, r7, r3
 8008112:	1c02      	adds	r2, r0, #0
 8008114:	801a      	strh	r2, [r3, #0]
 8008116:	1dbb      	adds	r3, r7, #6
 8008118:	1c0a      	adds	r2, r1, #0
 800811a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800811c:	1dbb      	adds	r3, r7, #6
 800811e:	881b      	ldrh	r3, [r3, #0]
 8008120:	b2da      	uxtb	r2, r3
 8008122:	2380      	movs	r3, #128	@ 0x80
 8008124:	045c      	lsls	r4, r3, #17
 8008126:	197b      	adds	r3, r7, r5
 8008128:	8819      	ldrh	r1, [r3, #0]
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	4b23      	ldr	r3, [pc, #140]	@ (80081bc <I2C_RequestMemoryWrite+0xc4>)
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	0023      	movs	r3, r4
 8008132:	f000 faa3 	bl	800867c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008138:	6a39      	ldr	r1, [r7, #32]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	0018      	movs	r0, r3
 800813e:	f000 f91b 	bl	8008378 <I2C_WaitOnTXISFlagUntilTimeout>
 8008142:	1e03      	subs	r3, r0, #0
 8008144:	d001      	beq.n	800814a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e033      	b.n	80081b2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800814a:	1dbb      	adds	r3, r7, #6
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d107      	bne.n	8008162 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008152:	2308      	movs	r3, #8
 8008154:	18fb      	adds	r3, r7, r3
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	b2da      	uxtb	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008160:	e019      	b.n	8008196 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008162:	2308      	movs	r3, #8
 8008164:	18fb      	adds	r3, r7, r3
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	0a1b      	lsrs	r3, r3, #8
 800816a:	b29b      	uxth	r3, r3
 800816c:	b2da      	uxtb	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008176:	6a39      	ldr	r1, [r7, #32]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	0018      	movs	r0, r3
 800817c:	f000 f8fc 	bl	8008378 <I2C_WaitOnTXISFlagUntilTimeout>
 8008180:	1e03      	subs	r3, r0, #0
 8008182:	d001      	beq.n	8008188 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e014      	b.n	80081b2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008188:	2308      	movs	r3, #8
 800818a:	18fb      	adds	r3, r7, r3
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b2da      	uxtb	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008196:	6a3a      	ldr	r2, [r7, #32]
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	0013      	movs	r3, r2
 80081a0:	2200      	movs	r2, #0
 80081a2:	2180      	movs	r1, #128	@ 0x80
 80081a4:	f000 f890 	bl	80082c8 <I2C_WaitOnFlagUntilTimeout>
 80081a8:	1e03      	subs	r3, r0, #0
 80081aa:	d001      	beq.n	80081b0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e000      	b.n	80081b2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	0018      	movs	r0, r3
 80081b4:	46bd      	mov	sp, r7
 80081b6:	b004      	add	sp, #16
 80081b8:	bdb0      	pop	{r4, r5, r7, pc}
 80081ba:	46c0      	nop			@ (mov r8, r8)
 80081bc:	80002000 	.word	0x80002000

080081c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80081c0:	b5b0      	push	{r4, r5, r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	000c      	movs	r4, r1
 80081ca:	0010      	movs	r0, r2
 80081cc:	0019      	movs	r1, r3
 80081ce:	250a      	movs	r5, #10
 80081d0:	197b      	adds	r3, r7, r5
 80081d2:	1c22      	adds	r2, r4, #0
 80081d4:	801a      	strh	r2, [r3, #0]
 80081d6:	2308      	movs	r3, #8
 80081d8:	18fb      	adds	r3, r7, r3
 80081da:	1c02      	adds	r2, r0, #0
 80081dc:	801a      	strh	r2, [r3, #0]
 80081de:	1dbb      	adds	r3, r7, #6
 80081e0:	1c0a      	adds	r2, r1, #0
 80081e2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80081e4:	1dbb      	adds	r3, r7, #6
 80081e6:	881b      	ldrh	r3, [r3, #0]
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	197b      	adds	r3, r7, r5
 80081ec:	8819      	ldrh	r1, [r3, #0]
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	4b23      	ldr	r3, [pc, #140]	@ (8008280 <I2C_RequestMemoryRead+0xc0>)
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	2300      	movs	r3, #0
 80081f6:	f000 fa41 	bl	800867c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081fc:	6a39      	ldr	r1, [r7, #32]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	0018      	movs	r0, r3
 8008202:	f000 f8b9 	bl	8008378 <I2C_WaitOnTXISFlagUntilTimeout>
 8008206:	1e03      	subs	r3, r0, #0
 8008208:	d001      	beq.n	800820e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e033      	b.n	8008276 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800820e:	1dbb      	adds	r3, r7, #6
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d107      	bne.n	8008226 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008216:	2308      	movs	r3, #8
 8008218:	18fb      	adds	r3, r7, r3
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	b2da      	uxtb	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	629a      	str	r2, [r3, #40]	@ 0x28
 8008224:	e019      	b.n	800825a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008226:	2308      	movs	r3, #8
 8008228:	18fb      	adds	r3, r7, r3
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	0a1b      	lsrs	r3, r3, #8
 800822e:	b29b      	uxth	r3, r3
 8008230:	b2da      	uxtb	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800823a:	6a39      	ldr	r1, [r7, #32]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	0018      	movs	r0, r3
 8008240:	f000 f89a 	bl	8008378 <I2C_WaitOnTXISFlagUntilTimeout>
 8008244:	1e03      	subs	r3, r0, #0
 8008246:	d001      	beq.n	800824c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e014      	b.n	8008276 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800824c:	2308      	movs	r3, #8
 800824e:	18fb      	adds	r3, r7, r3
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	b2da      	uxtb	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800825a:	6a3a      	ldr	r2, [r7, #32]
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	0013      	movs	r3, r2
 8008264:	2200      	movs	r2, #0
 8008266:	2140      	movs	r1, #64	@ 0x40
 8008268:	f000 f82e 	bl	80082c8 <I2C_WaitOnFlagUntilTimeout>
 800826c:	1e03      	subs	r3, r0, #0
 800826e:	d001      	beq.n	8008274 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e000      	b.n	8008276 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	0018      	movs	r0, r3
 8008278:	46bd      	mov	sp, r7
 800827a:	b004      	add	sp, #16
 800827c:	bdb0      	pop	{r4, r5, r7, pc}
 800827e:	46c0      	nop			@ (mov r8, r8)
 8008280:	80002000 	.word	0x80002000

08008284 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	2202      	movs	r2, #2
 8008294:	4013      	ands	r3, r2
 8008296:	2b02      	cmp	r3, #2
 8008298:	d103      	bne.n	80082a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2200      	movs	r2, #0
 80082a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	699b      	ldr	r3, [r3, #24]
 80082a8:	2201      	movs	r2, #1
 80082aa:	4013      	ands	r3, r2
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d007      	beq.n	80082c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	699a      	ldr	r2, [r3, #24]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2101      	movs	r1, #1
 80082bc:	430a      	orrs	r2, r1
 80082be:	619a      	str	r2, [r3, #24]
  }
}
 80082c0:	46c0      	nop			@ (mov r8, r8)
 80082c2:	46bd      	mov	sp, r7
 80082c4:	b002      	add	sp, #8
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	1dfb      	adds	r3, r7, #7
 80082d6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082d8:	e03a      	b.n	8008350 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	0018      	movs	r0, r3
 80082e2:	f000 f8d3 	bl	800848c <I2C_IsErrorOccurred>
 80082e6:	1e03      	subs	r3, r0, #0
 80082e8:	d001      	beq.n	80082ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e040      	b.n	8008370 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	3301      	adds	r3, #1
 80082f2:	d02d      	beq.n	8008350 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082f4:	f7ff f978 	bl	80075e8 <HAL_GetTick>
 80082f8:	0002      	movs	r2, r0
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	429a      	cmp	r2, r3
 8008302:	d302      	bcc.n	800830a <I2C_WaitOnFlagUntilTimeout+0x42>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d122      	bne.n	8008350 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	4013      	ands	r3, r2
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	425a      	negs	r2, r3
 800831a:	4153      	adcs	r3, r2
 800831c:	b2db      	uxtb	r3, r3
 800831e:	001a      	movs	r2, r3
 8008320:	1dfb      	adds	r3, r7, #7
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	429a      	cmp	r2, r3
 8008326:	d113      	bne.n	8008350 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800832c:	2220      	movs	r2, #32
 800832e:	431a      	orrs	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2241      	movs	r2, #65	@ 0x41
 8008338:	2120      	movs	r1, #32
 800833a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2242      	movs	r2, #66	@ 0x42
 8008340:	2100      	movs	r1, #0
 8008342:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2240      	movs	r2, #64	@ 0x40
 8008348:	2100      	movs	r1, #0
 800834a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e00f      	b.n	8008370 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	4013      	ands	r3, r2
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	425a      	negs	r2, r3
 8008360:	4153      	adcs	r3, r2
 8008362:	b2db      	uxtb	r3, r3
 8008364:	001a      	movs	r2, r3
 8008366:	1dfb      	adds	r3, r7, #7
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d0b5      	beq.n	80082da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	0018      	movs	r0, r3
 8008372:	46bd      	mov	sp, r7
 8008374:	b004      	add	sp, #16
 8008376:	bd80      	pop	{r7, pc}

08008378 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008384:	e032      	b.n	80083ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	0018      	movs	r0, r3
 800838e:	f000 f87d 	bl	800848c <I2C_IsErrorOccurred>
 8008392:	1e03      	subs	r3, r0, #0
 8008394:	d001      	beq.n	800839a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e030      	b.n	80083fc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	3301      	adds	r3, #1
 800839e:	d025      	beq.n	80083ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083a0:	f7ff f922 	bl	80075e8 <HAL_GetTick>
 80083a4:	0002      	movs	r2, r0
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	1ad3      	subs	r3, r2, r3
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d302      	bcc.n	80083b6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d11a      	bne.n	80083ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	2202      	movs	r2, #2
 80083be:	4013      	ands	r3, r2
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d013      	beq.n	80083ec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c8:	2220      	movs	r2, #32
 80083ca:	431a      	orrs	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2241      	movs	r2, #65	@ 0x41
 80083d4:	2120      	movs	r1, #32
 80083d6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2242      	movs	r2, #66	@ 0x42
 80083dc:	2100      	movs	r1, #0
 80083de:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2240      	movs	r2, #64	@ 0x40
 80083e4:	2100      	movs	r1, #0
 80083e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e007      	b.n	80083fc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	2202      	movs	r2, #2
 80083f4:	4013      	ands	r3, r2
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d1c5      	bne.n	8008386 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	0018      	movs	r0, r3
 80083fe:	46bd      	mov	sp, r7
 8008400:	b004      	add	sp, #16
 8008402:	bd80      	pop	{r7, pc}

08008404 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008410:	e02f      	b.n	8008472 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	68b9      	ldr	r1, [r7, #8]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	0018      	movs	r0, r3
 800841a:	f000 f837 	bl	800848c <I2C_IsErrorOccurred>
 800841e:	1e03      	subs	r3, r0, #0
 8008420:	d001      	beq.n	8008426 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e02d      	b.n	8008482 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008426:	f7ff f8df 	bl	80075e8 <HAL_GetTick>
 800842a:	0002      	movs	r2, r0
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	429a      	cmp	r2, r3
 8008434:	d302      	bcc.n	800843c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d11a      	bne.n	8008472 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	2220      	movs	r2, #32
 8008444:	4013      	ands	r3, r2
 8008446:	2b20      	cmp	r3, #32
 8008448:	d013      	beq.n	8008472 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800844e:	2220      	movs	r2, #32
 8008450:	431a      	orrs	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2241      	movs	r2, #65	@ 0x41
 800845a:	2120      	movs	r1, #32
 800845c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2242      	movs	r2, #66	@ 0x42
 8008462:	2100      	movs	r1, #0
 8008464:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2240      	movs	r2, #64	@ 0x40
 800846a:	2100      	movs	r1, #0
 800846c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e007      	b.n	8008482 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	2220      	movs	r2, #32
 800847a:	4013      	ands	r3, r2
 800847c:	2b20      	cmp	r3, #32
 800847e:	d1c8      	bne.n	8008412 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	0018      	movs	r0, r3
 8008484:	46bd      	mov	sp, r7
 8008486:	b004      	add	sp, #16
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08a      	sub	sp, #40	@ 0x28
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008498:	2327      	movs	r3, #39	@ 0x27
 800849a:	18fb      	adds	r3, r7, r3
 800849c:	2200      	movs	r2, #0
 800849e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	2210      	movs	r2, #16
 80084b4:	4013      	ands	r3, r2
 80084b6:	d100      	bne.n	80084ba <I2C_IsErrorOccurred+0x2e>
 80084b8:	e079      	b.n	80085ae <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2210      	movs	r2, #16
 80084c0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80084c2:	e057      	b.n	8008574 <I2C_IsErrorOccurred+0xe8>
 80084c4:	2227      	movs	r2, #39	@ 0x27
 80084c6:	18bb      	adds	r3, r7, r2
 80084c8:	18ba      	adds	r2, r7, r2
 80084ca:	7812      	ldrb	r2, [r2, #0]
 80084cc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	3301      	adds	r3, #1
 80084d2:	d04f      	beq.n	8008574 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80084d4:	f7ff f888 	bl	80075e8 <HAL_GetTick>
 80084d8:	0002      	movs	r2, r0
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d302      	bcc.n	80084ea <I2C_IsErrorOccurred+0x5e>
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d144      	bne.n	8008574 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	2380      	movs	r3, #128	@ 0x80
 80084f2:	01db      	lsls	r3, r3, #7
 80084f4:	4013      	ands	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80084f8:	2013      	movs	r0, #19
 80084fa:	183b      	adds	r3, r7, r0
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	2142      	movs	r1, #66	@ 0x42
 8008500:	5c52      	ldrb	r2, [r2, r1]
 8008502:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	699a      	ldr	r2, [r3, #24]
 800850a:	2380      	movs	r3, #128	@ 0x80
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	401a      	ands	r2, r3
 8008510:	2380      	movs	r3, #128	@ 0x80
 8008512:	021b      	lsls	r3, r3, #8
 8008514:	429a      	cmp	r2, r3
 8008516:	d126      	bne.n	8008566 <I2C_IsErrorOccurred+0xda>
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	2380      	movs	r3, #128	@ 0x80
 800851c:	01db      	lsls	r3, r3, #7
 800851e:	429a      	cmp	r2, r3
 8008520:	d021      	beq.n	8008566 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8008522:	183b      	adds	r3, r7, r0
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	2b20      	cmp	r3, #32
 8008528:	d01d      	beq.n	8008566 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2180      	movs	r1, #128	@ 0x80
 8008536:	01c9      	lsls	r1, r1, #7
 8008538:	430a      	orrs	r2, r1
 800853a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800853c:	f7ff f854 	bl	80075e8 <HAL_GetTick>
 8008540:	0003      	movs	r3, r0
 8008542:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008544:	e00f      	b.n	8008566 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008546:	f7ff f84f 	bl	80075e8 <HAL_GetTick>
 800854a:	0002      	movs	r2, r0
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	2b19      	cmp	r3, #25
 8008552:	d908      	bls.n	8008566 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	2220      	movs	r2, #32
 8008558:	4313      	orrs	r3, r2
 800855a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800855c:	2327      	movs	r3, #39	@ 0x27
 800855e:	18fb      	adds	r3, r7, r3
 8008560:	2201      	movs	r2, #1
 8008562:	701a      	strb	r2, [r3, #0]

              break;
 8008564:	e006      	b.n	8008574 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	2220      	movs	r2, #32
 800856e:	4013      	ands	r3, r2
 8008570:	2b20      	cmp	r3, #32
 8008572:	d1e8      	bne.n	8008546 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	2220      	movs	r2, #32
 800857c:	4013      	ands	r3, r2
 800857e:	2b20      	cmp	r3, #32
 8008580:	d004      	beq.n	800858c <I2C_IsErrorOccurred+0x100>
 8008582:	2327      	movs	r3, #39	@ 0x27
 8008584:	18fb      	adds	r3, r7, r3
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d09b      	beq.n	80084c4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800858c:	2327      	movs	r3, #39	@ 0x27
 800858e:	18fb      	adds	r3, r7, r3
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d103      	bne.n	800859e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2220      	movs	r2, #32
 800859c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	2204      	movs	r2, #4
 80085a2:	4313      	orrs	r3, r2
 80085a4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80085a6:	2327      	movs	r3, #39	@ 0x27
 80085a8:	18fb      	adds	r3, r7, r3
 80085aa:	2201      	movs	r2, #1
 80085ac:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	699b      	ldr	r3, [r3, #24]
 80085b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	2380      	movs	r3, #128	@ 0x80
 80085ba:	005b      	lsls	r3, r3, #1
 80085bc:	4013      	ands	r3, r2
 80085be:	d00c      	beq.n	80085da <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80085c0:	6a3b      	ldr	r3, [r7, #32]
 80085c2:	2201      	movs	r2, #1
 80085c4:	4313      	orrs	r3, r2
 80085c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2280      	movs	r2, #128	@ 0x80
 80085ce:	0052      	lsls	r2, r2, #1
 80085d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80085d2:	2327      	movs	r3, #39	@ 0x27
 80085d4:	18fb      	adds	r3, r7, r3
 80085d6:	2201      	movs	r2, #1
 80085d8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	2380      	movs	r3, #128	@ 0x80
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	4013      	ands	r3, r2
 80085e2:	d00c      	beq.n	80085fe <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	2208      	movs	r2, #8
 80085e8:	4313      	orrs	r3, r2
 80085ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2280      	movs	r2, #128	@ 0x80
 80085f2:	00d2      	lsls	r2, r2, #3
 80085f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80085f6:	2327      	movs	r3, #39	@ 0x27
 80085f8:	18fb      	adds	r3, r7, r3
 80085fa:	2201      	movs	r2, #1
 80085fc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	2380      	movs	r3, #128	@ 0x80
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4013      	ands	r3, r2
 8008606:	d00c      	beq.n	8008622 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	2202      	movs	r2, #2
 800860c:	4313      	orrs	r3, r2
 800860e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2280      	movs	r2, #128	@ 0x80
 8008616:	0092      	lsls	r2, r2, #2
 8008618:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800861a:	2327      	movs	r3, #39	@ 0x27
 800861c:	18fb      	adds	r3, r7, r3
 800861e:	2201      	movs	r2, #1
 8008620:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8008622:	2327      	movs	r3, #39	@ 0x27
 8008624:	18fb      	adds	r3, r7, r3
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d01d      	beq.n	8008668 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	0018      	movs	r0, r3
 8008630:	f7ff fe28 	bl	8008284 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	490e      	ldr	r1, [pc, #56]	@ (8008678 <I2C_IsErrorOccurred+0x1ec>)
 8008640:	400a      	ands	r2, r1
 8008642:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	431a      	orrs	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2241      	movs	r2, #65	@ 0x41
 8008654:	2120      	movs	r1, #32
 8008656:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2242      	movs	r2, #66	@ 0x42
 800865c:	2100      	movs	r1, #0
 800865e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2240      	movs	r2, #64	@ 0x40
 8008664:	2100      	movs	r1, #0
 8008666:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8008668:	2327      	movs	r3, #39	@ 0x27
 800866a:	18fb      	adds	r3, r7, r3
 800866c:	781b      	ldrb	r3, [r3, #0]
}
 800866e:	0018      	movs	r0, r3
 8008670:	46bd      	mov	sp, r7
 8008672:	b00a      	add	sp, #40	@ 0x28
 8008674:	bd80      	pop	{r7, pc}
 8008676:	46c0      	nop			@ (mov r8, r8)
 8008678:	fe00e800 	.word	0xfe00e800

0800867c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800867c:	b590      	push	{r4, r7, lr}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	0008      	movs	r0, r1
 8008686:	0011      	movs	r1, r2
 8008688:	607b      	str	r3, [r7, #4]
 800868a:	240a      	movs	r4, #10
 800868c:	193b      	adds	r3, r7, r4
 800868e:	1c02      	adds	r2, r0, #0
 8008690:	801a      	strh	r2, [r3, #0]
 8008692:	2009      	movs	r0, #9
 8008694:	183b      	adds	r3, r7, r0
 8008696:	1c0a      	adds	r2, r1, #0
 8008698:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800869a:	193b      	adds	r3, r7, r4
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	059b      	lsls	r3, r3, #22
 80086a0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086a2:	183b      	adds	r3, r7, r0
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	0419      	lsls	r1, r3, #16
 80086a8:	23ff      	movs	r3, #255	@ 0xff
 80086aa:	041b      	lsls	r3, r3, #16
 80086ac:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086ae:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80086b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086b6:	4313      	orrs	r3, r2
 80086b8:	005b      	lsls	r3, r3, #1
 80086ba:	085b      	lsrs	r3, r3, #1
 80086bc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086c6:	0d51      	lsrs	r1, r2, #21
 80086c8:	2280      	movs	r2, #128	@ 0x80
 80086ca:	00d2      	lsls	r2, r2, #3
 80086cc:	400a      	ands	r2, r1
 80086ce:	4907      	ldr	r1, [pc, #28]	@ (80086ec <I2C_TransferConfig+0x70>)
 80086d0:	430a      	orrs	r2, r1
 80086d2:	43d2      	mvns	r2, r2
 80086d4:	401a      	ands	r2, r3
 80086d6:	0011      	movs	r1, r2
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	430a      	orrs	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80086e2:	46c0      	nop			@ (mov r8, r8)
 80086e4:	46bd      	mov	sp, r7
 80086e6:	b007      	add	sp, #28
 80086e8:	bd90      	pop	{r4, r7, pc}
 80086ea:	46c0      	nop			@ (mov r8, r8)
 80086ec:	03ff63ff 	.word	0x03ff63ff

080086f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2241      	movs	r2, #65	@ 0x41
 80086fe:	5c9b      	ldrb	r3, [r3, r2]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b20      	cmp	r3, #32
 8008704:	d138      	bne.n	8008778 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2240      	movs	r2, #64	@ 0x40
 800870a:	5c9b      	ldrb	r3, [r3, r2]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d101      	bne.n	8008714 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008710:	2302      	movs	r3, #2
 8008712:	e032      	b.n	800877a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2240      	movs	r2, #64	@ 0x40
 8008718:	2101      	movs	r1, #1
 800871a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2241      	movs	r2, #65	@ 0x41
 8008720:	2124      	movs	r1, #36	@ 0x24
 8008722:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2101      	movs	r1, #1
 8008730:	438a      	bics	r2, r1
 8008732:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4911      	ldr	r1, [pc, #68]	@ (8008784 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008740:	400a      	ands	r2, r1
 8008742:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6819      	ldr	r1, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	430a      	orrs	r2, r1
 8008752:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2101      	movs	r1, #1
 8008760:	430a      	orrs	r2, r1
 8008762:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2241      	movs	r2, #65	@ 0x41
 8008768:	2120      	movs	r1, #32
 800876a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2240      	movs	r2, #64	@ 0x40
 8008770:	2100      	movs	r1, #0
 8008772:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	e000      	b.n	800877a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008778:	2302      	movs	r3, #2
  }
}
 800877a:	0018      	movs	r0, r3
 800877c:	46bd      	mov	sp, r7
 800877e:	b002      	add	sp, #8
 8008780:	bd80      	pop	{r7, pc}
 8008782:	46c0      	nop			@ (mov r8, r8)
 8008784:	ffffefff 	.word	0xffffefff

08008788 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2241      	movs	r2, #65	@ 0x41
 8008796:	5c9b      	ldrb	r3, [r3, r2]
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b20      	cmp	r3, #32
 800879c:	d139      	bne.n	8008812 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2240      	movs	r2, #64	@ 0x40
 80087a2:	5c9b      	ldrb	r3, [r3, r2]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d101      	bne.n	80087ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80087a8:	2302      	movs	r3, #2
 80087aa:	e033      	b.n	8008814 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2240      	movs	r2, #64	@ 0x40
 80087b0:	2101      	movs	r1, #1
 80087b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2241      	movs	r2, #65	@ 0x41
 80087b8:	2124      	movs	r1, #36	@ 0x24
 80087ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2101      	movs	r1, #1
 80087c8:	438a      	bics	r2, r1
 80087ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4a11      	ldr	r2, [pc, #68]	@ (800881c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80087d8:	4013      	ands	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	021b      	lsls	r3, r3, #8
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	4313      	orrs	r3, r2
 80087e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2101      	movs	r1, #1
 80087fa:	430a      	orrs	r2, r1
 80087fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2241      	movs	r2, #65	@ 0x41
 8008802:	2120      	movs	r1, #32
 8008804:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2240      	movs	r2, #64	@ 0x40
 800880a:	2100      	movs	r1, #0
 800880c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	e000      	b.n	8008814 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008812:	2302      	movs	r3, #2
  }
}
 8008814:	0018      	movs	r0, r3
 8008816:	46bd      	mov	sp, r7
 8008818:	b004      	add	sp, #16
 800881a:	bd80      	pop	{r7, pc}
 800881c:	fffff0ff 	.word	0xfffff0ff

08008820 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008828:	4b19      	ldr	r3, [pc, #100]	@ (8008890 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a19      	ldr	r2, [pc, #100]	@ (8008894 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800882e:	4013      	ands	r3, r2
 8008830:	0019      	movs	r1, r3
 8008832:	4b17      	ldr	r3, [pc, #92]	@ (8008890 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	430a      	orrs	r2, r1
 8008838:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	2380      	movs	r3, #128	@ 0x80
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	429a      	cmp	r2, r3
 8008842:	d11f      	bne.n	8008884 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8008844:	4b14      	ldr	r3, [pc, #80]	@ (8008898 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	0013      	movs	r3, r2
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	189b      	adds	r3, r3, r2
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	4912      	ldr	r1, [pc, #72]	@ (800889c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8008852:	0018      	movs	r0, r3
 8008854:	f7f7 fc7c 	bl	8000150 <__udivsi3>
 8008858:	0003      	movs	r3, r0
 800885a:	3301      	adds	r3, #1
 800885c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800885e:	e008      	b.n	8008872 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3b01      	subs	r3, #1
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	e001      	b.n	8008872 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e009      	b.n	8008886 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008872:	4b07      	ldr	r3, [pc, #28]	@ (8008890 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008874:	695a      	ldr	r2, [r3, #20]
 8008876:	2380      	movs	r3, #128	@ 0x80
 8008878:	00db      	lsls	r3, r3, #3
 800887a:	401a      	ands	r2, r3
 800887c:	2380      	movs	r3, #128	@ 0x80
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	429a      	cmp	r2, r3
 8008882:	d0ed      	beq.n	8008860 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	0018      	movs	r0, r3
 8008888:	46bd      	mov	sp, r7
 800888a:	b004      	add	sp, #16
 800888c:	bd80      	pop	{r7, pc}
 800888e:	46c0      	nop			@ (mov r8, r8)
 8008890:	40007000 	.word	0x40007000
 8008894:	fffff9ff 	.word	0xfffff9ff
 8008898:	20000000 	.word	0x20000000
 800889c:	000f4240 	.word	0x000f4240

080088a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80088a4:	4b03      	ldr	r3, [pc, #12]	@ (80088b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80088a6:	689a      	ldr	r2, [r3, #8]
 80088a8:	23e0      	movs	r3, #224	@ 0xe0
 80088aa:	01db      	lsls	r3, r3, #7
 80088ac:	4013      	ands	r3, r2
}
 80088ae:	0018      	movs	r0, r3
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	40021000 	.word	0x40021000

080088b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b088      	sub	sp, #32
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e2fe      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2201      	movs	r2, #1
 80088d0:	4013      	ands	r3, r2
 80088d2:	d100      	bne.n	80088d6 <HAL_RCC_OscConfig+0x1e>
 80088d4:	e07c      	b.n	80089d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088d6:	4bc3      	ldr	r3, [pc, #780]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	2238      	movs	r2, #56	@ 0x38
 80088dc:	4013      	ands	r3, r2
 80088de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088e0:	4bc0      	ldr	r3, [pc, #768]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	2203      	movs	r2, #3
 80088e6:	4013      	ands	r3, r2
 80088e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	2b10      	cmp	r3, #16
 80088ee:	d102      	bne.n	80088f6 <HAL_RCC_OscConfig+0x3e>
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2b03      	cmp	r3, #3
 80088f4:	d002      	beq.n	80088fc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b08      	cmp	r3, #8
 80088fa:	d10b      	bne.n	8008914 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088fc:	4bb9      	ldr	r3, [pc, #740]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	2380      	movs	r3, #128	@ 0x80
 8008902:	029b      	lsls	r3, r3, #10
 8008904:	4013      	ands	r3, r2
 8008906:	d062      	beq.n	80089ce <HAL_RCC_OscConfig+0x116>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d15e      	bne.n	80089ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e2d9      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	2380      	movs	r3, #128	@ 0x80
 800891a:	025b      	lsls	r3, r3, #9
 800891c:	429a      	cmp	r2, r3
 800891e:	d107      	bne.n	8008930 <HAL_RCC_OscConfig+0x78>
 8008920:	4bb0      	ldr	r3, [pc, #704]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	4baf      	ldr	r3, [pc, #700]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008926:	2180      	movs	r1, #128	@ 0x80
 8008928:	0249      	lsls	r1, r1, #9
 800892a:	430a      	orrs	r2, r1
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	e020      	b.n	8008972 <HAL_RCC_OscConfig+0xba>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	23a0      	movs	r3, #160	@ 0xa0
 8008936:	02db      	lsls	r3, r3, #11
 8008938:	429a      	cmp	r2, r3
 800893a:	d10e      	bne.n	800895a <HAL_RCC_OscConfig+0xa2>
 800893c:	4ba9      	ldr	r3, [pc, #676]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	4ba8      	ldr	r3, [pc, #672]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008942:	2180      	movs	r1, #128	@ 0x80
 8008944:	02c9      	lsls	r1, r1, #11
 8008946:	430a      	orrs	r2, r1
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	4ba6      	ldr	r3, [pc, #664]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	4ba5      	ldr	r3, [pc, #660]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008950:	2180      	movs	r1, #128	@ 0x80
 8008952:	0249      	lsls	r1, r1, #9
 8008954:	430a      	orrs	r2, r1
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	e00b      	b.n	8008972 <HAL_RCC_OscConfig+0xba>
 800895a:	4ba2      	ldr	r3, [pc, #648]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	4ba1      	ldr	r3, [pc, #644]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008960:	49a1      	ldr	r1, [pc, #644]	@ (8008be8 <HAL_RCC_OscConfig+0x330>)
 8008962:	400a      	ands	r2, r1
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	4b9f      	ldr	r3, [pc, #636]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	4b9e      	ldr	r3, [pc, #632]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 800896c:	499f      	ldr	r1, [pc, #636]	@ (8008bec <HAL_RCC_OscConfig+0x334>)
 800896e:	400a      	ands	r2, r1
 8008970:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d014      	beq.n	80089a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800897a:	f7fe fe35 	bl	80075e8 <HAL_GetTick>
 800897e:	0003      	movs	r3, r0
 8008980:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008982:	e008      	b.n	8008996 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008984:	f7fe fe30 	bl	80075e8 <HAL_GetTick>
 8008988:	0002      	movs	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b64      	cmp	r3, #100	@ 0x64
 8008990:	d901      	bls.n	8008996 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e298      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008996:	4b93      	ldr	r3, [pc, #588]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	2380      	movs	r3, #128	@ 0x80
 800899c:	029b      	lsls	r3, r3, #10
 800899e:	4013      	ands	r3, r2
 80089a0:	d0f0      	beq.n	8008984 <HAL_RCC_OscConfig+0xcc>
 80089a2:	e015      	b.n	80089d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a4:	f7fe fe20 	bl	80075e8 <HAL_GetTick>
 80089a8:	0003      	movs	r3, r0
 80089aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089ac:	e008      	b.n	80089c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80089ae:	f7fe fe1b 	bl	80075e8 <HAL_GetTick>
 80089b2:	0002      	movs	r2, r0
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	2b64      	cmp	r3, #100	@ 0x64
 80089ba:	d901      	bls.n	80089c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e283      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80089c0:	4b88      	ldr	r3, [pc, #544]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	2380      	movs	r3, #128	@ 0x80
 80089c6:	029b      	lsls	r3, r3, #10
 80089c8:	4013      	ands	r3, r2
 80089ca:	d1f0      	bne.n	80089ae <HAL_RCC_OscConfig+0xf6>
 80089cc:	e000      	b.n	80089d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2202      	movs	r2, #2
 80089d6:	4013      	ands	r3, r2
 80089d8:	d100      	bne.n	80089dc <HAL_RCC_OscConfig+0x124>
 80089da:	e099      	b.n	8008b10 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089dc:	4b81      	ldr	r3, [pc, #516]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	2238      	movs	r2, #56	@ 0x38
 80089e2:	4013      	ands	r3, r2
 80089e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80089e6:	4b7f      	ldr	r3, [pc, #508]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	2203      	movs	r2, #3
 80089ec:	4013      	ands	r3, r2
 80089ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	2b10      	cmp	r3, #16
 80089f4:	d102      	bne.n	80089fc <HAL_RCC_OscConfig+0x144>
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d002      	beq.n	8008a02 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d135      	bne.n	8008a6e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a02:	4b78      	ldr	r3, [pc, #480]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	2380      	movs	r3, #128	@ 0x80
 8008a08:	00db      	lsls	r3, r3, #3
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	d005      	beq.n	8008a1a <HAL_RCC_OscConfig+0x162>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d101      	bne.n	8008a1a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e256      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a1a:	4b72      	ldr	r3, [pc, #456]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	4a74      	ldr	r2, [pc, #464]	@ (8008bf0 <HAL_RCC_OscConfig+0x338>)
 8008a20:	4013      	ands	r3, r2
 8008a22:	0019      	movs	r1, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	021a      	lsls	r2, r3, #8
 8008a2a:	4b6e      	ldr	r3, [pc, #440]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d112      	bne.n	8008a5c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008a36:	4b6b      	ldr	r3, [pc, #428]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a6e      	ldr	r2, [pc, #440]	@ (8008bf4 <HAL_RCC_OscConfig+0x33c>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	0019      	movs	r1, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691a      	ldr	r2, [r3, #16]
 8008a44:	4b67      	ldr	r3, [pc, #412]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008a46:	430a      	orrs	r2, r1
 8008a48:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008a4a:	4b66      	ldr	r3, [pc, #408]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	0adb      	lsrs	r3, r3, #11
 8008a50:	2207      	movs	r2, #7
 8008a52:	4013      	ands	r3, r2
 8008a54:	4a68      	ldr	r2, [pc, #416]	@ (8008bf8 <HAL_RCC_OscConfig+0x340>)
 8008a56:	40da      	lsrs	r2, r3
 8008a58:	4b68      	ldr	r3, [pc, #416]	@ (8008bfc <HAL_RCC_OscConfig+0x344>)
 8008a5a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008a5c:	4b68      	ldr	r3, [pc, #416]	@ (8008c00 <HAL_RCC_OscConfig+0x348>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	0018      	movs	r0, r3
 8008a62:	f7fe fd65 	bl	8007530 <HAL_InitTick>
 8008a66:	1e03      	subs	r3, r0, #0
 8008a68:	d051      	beq.n	8008b0e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e22c      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d030      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008a76:	4b5b      	ldr	r3, [pc, #364]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8008bf4 <HAL_RCC_OscConfig+0x33c>)
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	0019      	movs	r1, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	691a      	ldr	r2, [r3, #16]
 8008a84:	4b57      	ldr	r3, [pc, #348]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008a86:	430a      	orrs	r2, r1
 8008a88:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008a8a:	4b56      	ldr	r3, [pc, #344]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	4b55      	ldr	r3, [pc, #340]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008a90:	2180      	movs	r1, #128	@ 0x80
 8008a92:	0049      	lsls	r1, r1, #1
 8008a94:	430a      	orrs	r2, r1
 8008a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a98:	f7fe fda6 	bl	80075e8 <HAL_GetTick>
 8008a9c:	0003      	movs	r3, r0
 8008a9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008aa0:	e008      	b.n	8008ab4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aa2:	f7fe fda1 	bl	80075e8 <HAL_GetTick>
 8008aa6:	0002      	movs	r2, r0
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d901      	bls.n	8008ab4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e209      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	2380      	movs	r3, #128	@ 0x80
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	4013      	ands	r3, r2
 8008abe:	d0f0      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ac0:	4b48      	ldr	r3, [pc, #288]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	4a4a      	ldr	r2, [pc, #296]	@ (8008bf0 <HAL_RCC_OscConfig+0x338>)
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	0019      	movs	r1, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	021a      	lsls	r2, r3, #8
 8008ad0:	4b44      	ldr	r3, [pc, #272]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	605a      	str	r2, [r3, #4]
 8008ad6:	e01b      	b.n	8008b10 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008ad8:	4b42      	ldr	r3, [pc, #264]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	4b41      	ldr	r3, [pc, #260]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008ade:	4949      	ldr	r1, [pc, #292]	@ (8008c04 <HAL_RCC_OscConfig+0x34c>)
 8008ae0:	400a      	ands	r2, r1
 8008ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae4:	f7fe fd80 	bl	80075e8 <HAL_GetTick>
 8008ae8:	0003      	movs	r3, r0
 8008aea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008aec:	e008      	b.n	8008b00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008aee:	f7fe fd7b 	bl	80075e8 <HAL_GetTick>
 8008af2:	0002      	movs	r2, r0
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d901      	bls.n	8008b00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e1e3      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008b00:	4b38      	ldr	r3, [pc, #224]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	2380      	movs	r3, #128	@ 0x80
 8008b06:	00db      	lsls	r3, r3, #3
 8008b08:	4013      	ands	r3, r2
 8008b0a:	d1f0      	bne.n	8008aee <HAL_RCC_OscConfig+0x236>
 8008b0c:	e000      	b.n	8008b10 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b0e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2208      	movs	r2, #8
 8008b16:	4013      	ands	r3, r2
 8008b18:	d047      	beq.n	8008baa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008b1a:	4b32      	ldr	r3, [pc, #200]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	2238      	movs	r2, #56	@ 0x38
 8008b20:	4013      	ands	r3, r2
 8008b22:	2b18      	cmp	r3, #24
 8008b24:	d10a      	bne.n	8008b3c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008b26:	4b2f      	ldr	r3, [pc, #188]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	d03c      	beq.n	8008baa <HAL_RCC_OscConfig+0x2f2>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d138      	bne.n	8008baa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e1c5      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d019      	beq.n	8008b78 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008b44:	4b27      	ldr	r3, [pc, #156]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008b46:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008b48:	4b26      	ldr	r3, [pc, #152]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008b4a:	2101      	movs	r1, #1
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b50:	f7fe fd4a 	bl	80075e8 <HAL_GetTick>
 8008b54:	0003      	movs	r3, r0
 8008b56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b58:	e008      	b.n	8008b6c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b5a:	f7fe fd45 	bl	80075e8 <HAL_GetTick>
 8008b5e:	0002      	movs	r2, r0
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d901      	bls.n	8008b6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e1ad      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b70:	2202      	movs	r2, #2
 8008b72:	4013      	ands	r3, r2
 8008b74:	d0f1      	beq.n	8008b5a <HAL_RCC_OscConfig+0x2a2>
 8008b76:	e018      	b.n	8008baa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008b78:	4b1a      	ldr	r3, [pc, #104]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008b7a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008b7c:	4b19      	ldr	r3, [pc, #100]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008b7e:	2101      	movs	r1, #1
 8008b80:	438a      	bics	r2, r1
 8008b82:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b84:	f7fe fd30 	bl	80075e8 <HAL_GetTick>
 8008b88:	0003      	movs	r3, r0
 8008b8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b8c:	e008      	b.n	8008ba0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b8e:	f7fe fd2b 	bl	80075e8 <HAL_GetTick>
 8008b92:	0002      	movs	r2, r0
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	1ad3      	subs	r3, r2, r3
 8008b98:	2b02      	cmp	r3, #2
 8008b9a:	d901      	bls.n	8008ba0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e193      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ba0:	4b10      	ldr	r3, [pc, #64]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	d1f1      	bne.n	8008b8e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2204      	movs	r2, #4
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	d100      	bne.n	8008bb6 <HAL_RCC_OscConfig+0x2fe>
 8008bb4:	e0c6      	b.n	8008d44 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bb6:	231f      	movs	r3, #31
 8008bb8:	18fb      	adds	r3, r7, r3
 8008bba:	2200      	movs	r2, #0
 8008bbc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008bbe:	4b09      	ldr	r3, [pc, #36]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	2238      	movs	r2, #56	@ 0x38
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	2b20      	cmp	r3, #32
 8008bc8:	d11e      	bne.n	8008c08 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008bca:	4b06      	ldr	r3, [pc, #24]	@ (8008be4 <HAL_RCC_OscConfig+0x32c>)
 8008bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bce:	2202      	movs	r2, #2
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	d100      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x31e>
 8008bd4:	e0b6      	b.n	8008d44 <HAL_RCC_OscConfig+0x48c>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d000      	beq.n	8008be0 <HAL_RCC_OscConfig+0x328>
 8008bde:	e0b1      	b.n	8008d44 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e171      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
 8008be4:	40021000 	.word	0x40021000
 8008be8:	fffeffff 	.word	0xfffeffff
 8008bec:	fffbffff 	.word	0xfffbffff
 8008bf0:	ffff80ff 	.word	0xffff80ff
 8008bf4:	ffffc7ff 	.word	0xffffc7ff
 8008bf8:	00f42400 	.word	0x00f42400
 8008bfc:	20000000 	.word	0x20000000
 8008c00:	20000004 	.word	0x20000004
 8008c04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008c08:	4bb1      	ldr	r3, [pc, #708]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c0c:	2380      	movs	r3, #128	@ 0x80
 8008c0e:	055b      	lsls	r3, r3, #21
 8008c10:	4013      	ands	r3, r2
 8008c12:	d101      	bne.n	8008c18 <HAL_RCC_OscConfig+0x360>
 8008c14:	2301      	movs	r3, #1
 8008c16:	e000      	b.n	8008c1a <HAL_RCC_OscConfig+0x362>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d011      	beq.n	8008c42 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008c1e:	4bac      	ldr	r3, [pc, #688]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008c20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c22:	4bab      	ldr	r3, [pc, #684]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008c24:	2180      	movs	r1, #128	@ 0x80
 8008c26:	0549      	lsls	r1, r1, #21
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008c2c:	4ba8      	ldr	r3, [pc, #672]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008c2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c30:	2380      	movs	r3, #128	@ 0x80
 8008c32:	055b      	lsls	r3, r3, #21
 8008c34:	4013      	ands	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008c3a:	231f      	movs	r3, #31
 8008c3c:	18fb      	adds	r3, r7, r3
 8008c3e:	2201      	movs	r2, #1
 8008c40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c42:	4ba4      	ldr	r3, [pc, #656]	@ (8008ed4 <HAL_RCC_OscConfig+0x61c>)
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	2380      	movs	r3, #128	@ 0x80
 8008c48:	005b      	lsls	r3, r3, #1
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	d11a      	bne.n	8008c84 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c4e:	4ba1      	ldr	r3, [pc, #644]	@ (8008ed4 <HAL_RCC_OscConfig+0x61c>)
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	4ba0      	ldr	r3, [pc, #640]	@ (8008ed4 <HAL_RCC_OscConfig+0x61c>)
 8008c54:	2180      	movs	r1, #128	@ 0x80
 8008c56:	0049      	lsls	r1, r1, #1
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008c5c:	f7fe fcc4 	bl	80075e8 <HAL_GetTick>
 8008c60:	0003      	movs	r3, r0
 8008c62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c64:	e008      	b.n	8008c78 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c66:	f7fe fcbf 	bl	80075e8 <HAL_GetTick>
 8008c6a:	0002      	movs	r2, r0
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d901      	bls.n	8008c78 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e127      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c78:	4b96      	ldr	r3, [pc, #600]	@ (8008ed4 <HAL_RCC_OscConfig+0x61c>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	2380      	movs	r3, #128	@ 0x80
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	4013      	ands	r3, r2
 8008c82:	d0f0      	beq.n	8008c66 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d106      	bne.n	8008c9a <HAL_RCC_OscConfig+0x3e2>
 8008c8c:	4b90      	ldr	r3, [pc, #576]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008c8e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008c90:	4b8f      	ldr	r3, [pc, #572]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008c92:	2101      	movs	r1, #1
 8008c94:	430a      	orrs	r2, r1
 8008c96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008c98:	e01c      	b.n	8008cd4 <HAL_RCC_OscConfig+0x41c>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	2b05      	cmp	r3, #5
 8008ca0:	d10c      	bne.n	8008cbc <HAL_RCC_OscConfig+0x404>
 8008ca2:	4b8b      	ldr	r3, [pc, #556]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008ca4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ca6:	4b8a      	ldr	r3, [pc, #552]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008ca8:	2104      	movs	r1, #4
 8008caa:	430a      	orrs	r2, r1
 8008cac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008cae:	4b88      	ldr	r3, [pc, #544]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008cb0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008cb2:	4b87      	ldr	r3, [pc, #540]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	430a      	orrs	r2, r1
 8008cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008cba:	e00b      	b.n	8008cd4 <HAL_RCC_OscConfig+0x41c>
 8008cbc:	4b84      	ldr	r3, [pc, #528]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008cbe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008cc0:	4b83      	ldr	r3, [pc, #524]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008cc2:	2101      	movs	r1, #1
 8008cc4:	438a      	bics	r2, r1
 8008cc6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008cc8:	4b81      	ldr	r3, [pc, #516]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008cca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008ccc:	4b80      	ldr	r3, [pc, #512]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008cce:	2104      	movs	r1, #4
 8008cd0:	438a      	bics	r2, r1
 8008cd2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d014      	beq.n	8008d06 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cdc:	f7fe fc84 	bl	80075e8 <HAL_GetTick>
 8008ce0:	0003      	movs	r3, r0
 8008ce2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ce4:	e009      	b.n	8008cfa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ce6:	f7fe fc7f 	bl	80075e8 <HAL_GetTick>
 8008cea:	0002      	movs	r2, r0
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	4a79      	ldr	r2, [pc, #484]	@ (8008ed8 <HAL_RCC_OscConfig+0x620>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d901      	bls.n	8008cfa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e0e6      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cfa:	4b75      	ldr	r3, [pc, #468]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cfe:	2202      	movs	r2, #2
 8008d00:	4013      	ands	r3, r2
 8008d02:	d0f0      	beq.n	8008ce6 <HAL_RCC_OscConfig+0x42e>
 8008d04:	e013      	b.n	8008d2e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d06:	f7fe fc6f 	bl	80075e8 <HAL_GetTick>
 8008d0a:	0003      	movs	r3, r0
 8008d0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008d0e:	e009      	b.n	8008d24 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d10:	f7fe fc6a 	bl	80075e8 <HAL_GetTick>
 8008d14:	0002      	movs	r2, r0
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	4a6f      	ldr	r2, [pc, #444]	@ (8008ed8 <HAL_RCC_OscConfig+0x620>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d901      	bls.n	8008d24 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e0d1      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008d24:	4b6a      	ldr	r3, [pc, #424]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d28:	2202      	movs	r2, #2
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	d1f0      	bne.n	8008d10 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008d2e:	231f      	movs	r3, #31
 8008d30:	18fb      	adds	r3, r7, r3
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d105      	bne.n	8008d44 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008d38:	4b65      	ldr	r3, [pc, #404]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008d3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d3c:	4b64      	ldr	r3, [pc, #400]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008d3e:	4967      	ldr	r1, [pc, #412]	@ (8008edc <HAL_RCC_OscConfig+0x624>)
 8008d40:	400a      	ands	r2, r1
 8008d42:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	69db      	ldr	r3, [r3, #28]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d100      	bne.n	8008d4e <HAL_RCC_OscConfig+0x496>
 8008d4c:	e0bb      	b.n	8008ec6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d4e:	4b60      	ldr	r3, [pc, #384]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	2238      	movs	r2, #56	@ 0x38
 8008d54:	4013      	ands	r3, r2
 8008d56:	2b10      	cmp	r3, #16
 8008d58:	d100      	bne.n	8008d5c <HAL_RCC_OscConfig+0x4a4>
 8008d5a:	e07b      	b.n	8008e54 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d156      	bne.n	8008e12 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d64:	4b5a      	ldr	r3, [pc, #360]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	4b59      	ldr	r3, [pc, #356]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008d6a:	495d      	ldr	r1, [pc, #372]	@ (8008ee0 <HAL_RCC_OscConfig+0x628>)
 8008d6c:	400a      	ands	r2, r1
 8008d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d70:	f7fe fc3a 	bl	80075e8 <HAL_GetTick>
 8008d74:	0003      	movs	r3, r0
 8008d76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d78:	e008      	b.n	8008d8c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d7a:	f7fe fc35 	bl	80075e8 <HAL_GetTick>
 8008d7e:	0002      	movs	r2, r0
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d901      	bls.n	8008d8c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e09d      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d8c:	4b50      	ldr	r3, [pc, #320]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	2380      	movs	r3, #128	@ 0x80
 8008d92:	049b      	lsls	r3, r3, #18
 8008d94:	4013      	ands	r3, r2
 8008d96:	d1f0      	bne.n	8008d7a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d98:	4b4d      	ldr	r3, [pc, #308]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	4a51      	ldr	r2, [pc, #324]	@ (8008ee4 <HAL_RCC_OscConfig+0x62c>)
 8008d9e:	4013      	ands	r3, r2
 8008da0:	0019      	movs	r1, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1a      	ldr	r2, [r3, #32]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008daa:	431a      	orrs	r2, r3
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db0:	021b      	lsls	r3, r3, #8
 8008db2:	431a      	orrs	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db8:	431a      	orrs	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dc4:	431a      	orrs	r2, r3
 8008dc6:	4b42      	ldr	r3, [pc, #264]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008dcc:	4b40      	ldr	r3, [pc, #256]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	4b3f      	ldr	r3, [pc, #252]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008dd2:	2180      	movs	r1, #128	@ 0x80
 8008dd4:	0449      	lsls	r1, r1, #17
 8008dd6:	430a      	orrs	r2, r1
 8008dd8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008dda:	4b3d      	ldr	r3, [pc, #244]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008ddc:	68da      	ldr	r2, [r3, #12]
 8008dde:	4b3c      	ldr	r3, [pc, #240]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008de0:	2180      	movs	r1, #128	@ 0x80
 8008de2:	0549      	lsls	r1, r1, #21
 8008de4:	430a      	orrs	r2, r1
 8008de6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de8:	f7fe fbfe 	bl	80075e8 <HAL_GetTick>
 8008dec:	0003      	movs	r3, r0
 8008dee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008df0:	e008      	b.n	8008e04 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008df2:	f7fe fbf9 	bl	80075e8 <HAL_GetTick>
 8008df6:	0002      	movs	r2, r0
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d901      	bls.n	8008e04 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e061      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e04:	4b32      	ldr	r3, [pc, #200]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	2380      	movs	r3, #128	@ 0x80
 8008e0a:	049b      	lsls	r3, r3, #18
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	d0f0      	beq.n	8008df2 <HAL_RCC_OscConfig+0x53a>
 8008e10:	e059      	b.n	8008ec6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e12:	4b2f      	ldr	r3, [pc, #188]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	4b2e      	ldr	r3, [pc, #184]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008e18:	4931      	ldr	r1, [pc, #196]	@ (8008ee0 <HAL_RCC_OscConfig+0x628>)
 8008e1a:	400a      	ands	r2, r1
 8008e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e1e:	f7fe fbe3 	bl	80075e8 <HAL_GetTick>
 8008e22:	0003      	movs	r3, r0
 8008e24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e26:	e008      	b.n	8008e3a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e28:	f7fe fbde 	bl	80075e8 <HAL_GetTick>
 8008e2c:	0002      	movs	r2, r0
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d901      	bls.n	8008e3a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e046      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e3a:	4b25      	ldr	r3, [pc, #148]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	2380      	movs	r3, #128	@ 0x80
 8008e40:	049b      	lsls	r3, r3, #18
 8008e42:	4013      	ands	r3, r2
 8008e44:	d1f0      	bne.n	8008e28 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008e46:	4b22      	ldr	r3, [pc, #136]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	4b21      	ldr	r3, [pc, #132]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008e4c:	4926      	ldr	r1, [pc, #152]	@ (8008ee8 <HAL_RCC_OscConfig+0x630>)
 8008e4e:	400a      	ands	r2, r1
 8008e50:	60da      	str	r2, [r3, #12]
 8008e52:	e038      	b.n	8008ec6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d101      	bne.n	8008e60 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e033      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008e60:	4b1b      	ldr	r3, [pc, #108]	@ (8008ed0 <HAL_RCC_OscConfig+0x618>)
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2203      	movs	r2, #3
 8008e6a:	401a      	ands	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a1b      	ldr	r3, [r3, #32]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d126      	bne.n	8008ec2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	2270      	movs	r2, #112	@ 0x70
 8008e78:	401a      	ands	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d11f      	bne.n	8008ec2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	23fe      	movs	r3, #254	@ 0xfe
 8008e86:	01db      	lsls	r3, r3, #7
 8008e88:	401a      	ands	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e8e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d116      	bne.n	8008ec2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	23f8      	movs	r3, #248	@ 0xf8
 8008e98:	039b      	lsls	r3, r3, #14
 8008e9a:	401a      	ands	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d10e      	bne.n	8008ec2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	23e0      	movs	r3, #224	@ 0xe0
 8008ea8:	051b      	lsls	r3, r3, #20
 8008eaa:	401a      	ands	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d106      	bne.n	8008ec2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	0f5b      	lsrs	r3, r3, #29
 8008eb8:	075a      	lsls	r2, r3, #29
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d001      	beq.n	8008ec6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e000      	b.n	8008ec8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	0018      	movs	r0, r3
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	b008      	add	sp, #32
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	40021000 	.word	0x40021000
 8008ed4:	40007000 	.word	0x40007000
 8008ed8:	00001388 	.word	0x00001388
 8008edc:	efffffff 	.word	0xefffffff
 8008ee0:	feffffff 	.word	0xfeffffff
 8008ee4:	11c1808c 	.word	0x11c1808c
 8008ee8:	eefefffc 	.word	0xeefefffc

08008eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d101      	bne.n	8008f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e0e9      	b.n	80090d4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f00:	4b76      	ldr	r3, [pc, #472]	@ (80090dc <HAL_RCC_ClockConfig+0x1f0>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2207      	movs	r2, #7
 8008f06:	4013      	ands	r3, r2
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d91e      	bls.n	8008f4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f0e:	4b73      	ldr	r3, [pc, #460]	@ (80090dc <HAL_RCC_ClockConfig+0x1f0>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2207      	movs	r2, #7
 8008f14:	4393      	bics	r3, r2
 8008f16:	0019      	movs	r1, r3
 8008f18:	4b70      	ldr	r3, [pc, #448]	@ (80090dc <HAL_RCC_ClockConfig+0x1f0>)
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008f20:	f7fe fb62 	bl	80075e8 <HAL_GetTick>
 8008f24:	0003      	movs	r3, r0
 8008f26:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008f28:	e009      	b.n	8008f3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f2a:	f7fe fb5d 	bl	80075e8 <HAL_GetTick>
 8008f2e:	0002      	movs	r2, r0
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	4a6a      	ldr	r2, [pc, #424]	@ (80090e0 <HAL_RCC_ClockConfig+0x1f4>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d901      	bls.n	8008f3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e0ca      	b.n	80090d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008f3e:	4b67      	ldr	r3, [pc, #412]	@ (80090dc <HAL_RCC_ClockConfig+0x1f0>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2207      	movs	r2, #7
 8008f44:	4013      	ands	r3, r2
 8008f46:	683a      	ldr	r2, [r7, #0]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d1ee      	bne.n	8008f2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2202      	movs	r2, #2
 8008f52:	4013      	ands	r3, r2
 8008f54:	d015      	beq.n	8008f82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2204      	movs	r2, #4
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	d006      	beq.n	8008f6e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008f60:	4b60      	ldr	r3, [pc, #384]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	4b5f      	ldr	r3, [pc, #380]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008f66:	21e0      	movs	r1, #224	@ 0xe0
 8008f68:	01c9      	lsls	r1, r1, #7
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f6e:	4b5d      	ldr	r3, [pc, #372]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	4a5d      	ldr	r2, [pc, #372]	@ (80090e8 <HAL_RCC_ClockConfig+0x1fc>)
 8008f74:	4013      	ands	r3, r2
 8008f76:	0019      	movs	r1, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689a      	ldr	r2, [r3, #8]
 8008f7c:	4b59      	ldr	r3, [pc, #356]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2201      	movs	r2, #1
 8008f88:	4013      	ands	r3, r2
 8008f8a:	d057      	beq.n	800903c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d107      	bne.n	8008fa4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f94:	4b53      	ldr	r3, [pc, #332]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	2380      	movs	r3, #128	@ 0x80
 8008f9a:	029b      	lsls	r3, r3, #10
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	d12b      	bne.n	8008ff8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e097      	b.n	80090d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d107      	bne.n	8008fbc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fac:	4b4d      	ldr	r3, [pc, #308]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	2380      	movs	r3, #128	@ 0x80
 8008fb2:	049b      	lsls	r3, r3, #18
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	d11f      	bne.n	8008ff8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e08b      	b.n	80090d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d107      	bne.n	8008fd4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008fc4:	4b47      	ldr	r3, [pc, #284]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	2380      	movs	r3, #128	@ 0x80
 8008fca:	00db      	lsls	r3, r3, #3
 8008fcc:	4013      	ands	r3, r2
 8008fce:	d113      	bne.n	8008ff8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e07f      	b.n	80090d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d106      	bne.n	8008fea <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008fdc:	4b41      	ldr	r3, [pc, #260]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008fe0:	2202      	movs	r2, #2
 8008fe2:	4013      	ands	r3, r2
 8008fe4:	d108      	bne.n	8008ff8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e074      	b.n	80090d4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fea:	4b3e      	ldr	r3, [pc, #248]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fee:	2202      	movs	r2, #2
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	d101      	bne.n	8008ff8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e06d      	b.n	80090d4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	2207      	movs	r2, #7
 8008ffe:	4393      	bics	r3, r2
 8009000:	0019      	movs	r1, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	4b37      	ldr	r3, [pc, #220]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 8009008:	430a      	orrs	r2, r1
 800900a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800900c:	f7fe faec 	bl	80075e8 <HAL_GetTick>
 8009010:	0003      	movs	r3, r0
 8009012:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009014:	e009      	b.n	800902a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009016:	f7fe fae7 	bl	80075e8 <HAL_GetTick>
 800901a:	0002      	movs	r2, r0
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	4a2f      	ldr	r2, [pc, #188]	@ (80090e0 <HAL_RCC_ClockConfig+0x1f4>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d901      	bls.n	800902a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8009026:	2303      	movs	r3, #3
 8009028:	e054      	b.n	80090d4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800902a:	4b2e      	ldr	r3, [pc, #184]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	2238      	movs	r2, #56	@ 0x38
 8009030:	401a      	ands	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	00db      	lsls	r3, r3, #3
 8009038:	429a      	cmp	r2, r3
 800903a:	d1ec      	bne.n	8009016 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800903c:	4b27      	ldr	r3, [pc, #156]	@ (80090dc <HAL_RCC_ClockConfig+0x1f0>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2207      	movs	r2, #7
 8009042:	4013      	ands	r3, r2
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	d21e      	bcs.n	8009088 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800904a:	4b24      	ldr	r3, [pc, #144]	@ (80090dc <HAL_RCC_ClockConfig+0x1f0>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2207      	movs	r2, #7
 8009050:	4393      	bics	r3, r2
 8009052:	0019      	movs	r1, r3
 8009054:	4b21      	ldr	r3, [pc, #132]	@ (80090dc <HAL_RCC_ClockConfig+0x1f0>)
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	430a      	orrs	r2, r1
 800905a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800905c:	f7fe fac4 	bl	80075e8 <HAL_GetTick>
 8009060:	0003      	movs	r3, r0
 8009062:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009064:	e009      	b.n	800907a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009066:	f7fe fabf 	bl	80075e8 <HAL_GetTick>
 800906a:	0002      	movs	r2, r0
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	1ad3      	subs	r3, r2, r3
 8009070:	4a1b      	ldr	r2, [pc, #108]	@ (80090e0 <HAL_RCC_ClockConfig+0x1f4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d901      	bls.n	800907a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	e02c      	b.n	80090d4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800907a:	4b18      	ldr	r3, [pc, #96]	@ (80090dc <HAL_RCC_ClockConfig+0x1f0>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2207      	movs	r2, #7
 8009080:	4013      	ands	r3, r2
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	429a      	cmp	r2, r3
 8009086:	d1ee      	bne.n	8009066 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2204      	movs	r2, #4
 800908e:	4013      	ands	r3, r2
 8009090:	d009      	beq.n	80090a6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009092:	4b14      	ldr	r3, [pc, #80]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	4a15      	ldr	r2, [pc, #84]	@ (80090ec <HAL_RCC_ClockConfig+0x200>)
 8009098:	4013      	ands	r3, r2
 800909a:	0019      	movs	r1, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68da      	ldr	r2, [r3, #12]
 80090a0:	4b10      	ldr	r3, [pc, #64]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 80090a2:	430a      	orrs	r2, r1
 80090a4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80090a6:	f000 f829 	bl	80090fc <HAL_RCC_GetSysClockFreq>
 80090aa:	0001      	movs	r1, r0
 80090ac:	4b0d      	ldr	r3, [pc, #52]	@ (80090e4 <HAL_RCC_ClockConfig+0x1f8>)
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	0a1b      	lsrs	r3, r3, #8
 80090b2:	220f      	movs	r2, #15
 80090b4:	401a      	ands	r2, r3
 80090b6:	4b0e      	ldr	r3, [pc, #56]	@ (80090f0 <HAL_RCC_ClockConfig+0x204>)
 80090b8:	0092      	lsls	r2, r2, #2
 80090ba:	58d3      	ldr	r3, [r2, r3]
 80090bc:	221f      	movs	r2, #31
 80090be:	4013      	ands	r3, r2
 80090c0:	000a      	movs	r2, r1
 80090c2:	40da      	lsrs	r2, r3
 80090c4:	4b0b      	ldr	r3, [pc, #44]	@ (80090f4 <HAL_RCC_ClockConfig+0x208>)
 80090c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80090c8:	4b0b      	ldr	r3, [pc, #44]	@ (80090f8 <HAL_RCC_ClockConfig+0x20c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	0018      	movs	r0, r3
 80090ce:	f7fe fa2f 	bl	8007530 <HAL_InitTick>
 80090d2:	0003      	movs	r3, r0
}
 80090d4:	0018      	movs	r0, r3
 80090d6:	46bd      	mov	sp, r7
 80090d8:	b004      	add	sp, #16
 80090da:	bd80      	pop	{r7, pc}
 80090dc:	40022000 	.word	0x40022000
 80090e0:	00001388 	.word	0x00001388
 80090e4:	40021000 	.word	0x40021000
 80090e8:	fffff0ff 	.word	0xfffff0ff
 80090ec:	ffff8fff 	.word	0xffff8fff
 80090f0:	0800edb4 	.word	0x0800edb4
 80090f4:	20000000 	.word	0x20000000
 80090f8:	20000004 	.word	0x20000004

080090fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009102:	4b3c      	ldr	r3, [pc, #240]	@ (80091f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	2238      	movs	r2, #56	@ 0x38
 8009108:	4013      	ands	r3, r2
 800910a:	d10f      	bne.n	800912c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800910c:	4b39      	ldr	r3, [pc, #228]	@ (80091f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	0adb      	lsrs	r3, r3, #11
 8009112:	2207      	movs	r2, #7
 8009114:	4013      	ands	r3, r2
 8009116:	2201      	movs	r2, #1
 8009118:	409a      	lsls	r2, r3
 800911a:	0013      	movs	r3, r2
 800911c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	4835      	ldr	r0, [pc, #212]	@ (80091f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009122:	f7f7 f815 	bl	8000150 <__udivsi3>
 8009126:	0003      	movs	r3, r0
 8009128:	613b      	str	r3, [r7, #16]
 800912a:	e05d      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800912c:	4b31      	ldr	r3, [pc, #196]	@ (80091f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	2238      	movs	r2, #56	@ 0x38
 8009132:	4013      	ands	r3, r2
 8009134:	2b08      	cmp	r3, #8
 8009136:	d102      	bne.n	800913e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009138:	4b30      	ldr	r3, [pc, #192]	@ (80091fc <HAL_RCC_GetSysClockFreq+0x100>)
 800913a:	613b      	str	r3, [r7, #16]
 800913c:	e054      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800913e:	4b2d      	ldr	r3, [pc, #180]	@ (80091f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	2238      	movs	r2, #56	@ 0x38
 8009144:	4013      	ands	r3, r2
 8009146:	2b10      	cmp	r3, #16
 8009148:	d138      	bne.n	80091bc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800914a:	4b2a      	ldr	r3, [pc, #168]	@ (80091f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	2203      	movs	r2, #3
 8009150:	4013      	ands	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009154:	4b27      	ldr	r3, [pc, #156]	@ (80091f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	091b      	lsrs	r3, r3, #4
 800915a:	2207      	movs	r2, #7
 800915c:	4013      	ands	r3, r2
 800915e:	3301      	adds	r3, #1
 8009160:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b03      	cmp	r3, #3
 8009166:	d10d      	bne.n	8009184 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009168:	68b9      	ldr	r1, [r7, #8]
 800916a:	4824      	ldr	r0, [pc, #144]	@ (80091fc <HAL_RCC_GetSysClockFreq+0x100>)
 800916c:	f7f6 fff0 	bl	8000150 <__udivsi3>
 8009170:	0003      	movs	r3, r0
 8009172:	0019      	movs	r1, r3
 8009174:	4b1f      	ldr	r3, [pc, #124]	@ (80091f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	0a1b      	lsrs	r3, r3, #8
 800917a:	227f      	movs	r2, #127	@ 0x7f
 800917c:	4013      	ands	r3, r2
 800917e:	434b      	muls	r3, r1
 8009180:	617b      	str	r3, [r7, #20]
        break;
 8009182:	e00d      	b.n	80091a0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009184:	68b9      	ldr	r1, [r7, #8]
 8009186:	481c      	ldr	r0, [pc, #112]	@ (80091f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009188:	f7f6 ffe2 	bl	8000150 <__udivsi3>
 800918c:	0003      	movs	r3, r0
 800918e:	0019      	movs	r1, r3
 8009190:	4b18      	ldr	r3, [pc, #96]	@ (80091f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	0a1b      	lsrs	r3, r3, #8
 8009196:	227f      	movs	r2, #127	@ 0x7f
 8009198:	4013      	ands	r3, r2
 800919a:	434b      	muls	r3, r1
 800919c:	617b      	str	r3, [r7, #20]
        break;
 800919e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80091a0:	4b14      	ldr	r3, [pc, #80]	@ (80091f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	0f5b      	lsrs	r3, r3, #29
 80091a6:	2207      	movs	r2, #7
 80091a8:	4013      	ands	r3, r2
 80091aa:	3301      	adds	r3, #1
 80091ac:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80091ae:	6879      	ldr	r1, [r7, #4]
 80091b0:	6978      	ldr	r0, [r7, #20]
 80091b2:	f7f6 ffcd 	bl	8000150 <__udivsi3>
 80091b6:	0003      	movs	r3, r0
 80091b8:	613b      	str	r3, [r7, #16]
 80091ba:	e015      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80091bc:	4b0d      	ldr	r3, [pc, #52]	@ (80091f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	2238      	movs	r2, #56	@ 0x38
 80091c2:	4013      	ands	r3, r2
 80091c4:	2b20      	cmp	r3, #32
 80091c6:	d103      	bne.n	80091d0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80091c8:	2380      	movs	r3, #128	@ 0x80
 80091ca:	021b      	lsls	r3, r3, #8
 80091cc:	613b      	str	r3, [r7, #16]
 80091ce:	e00b      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80091d0:	4b08      	ldr	r3, [pc, #32]	@ (80091f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	2238      	movs	r2, #56	@ 0x38
 80091d6:	4013      	ands	r3, r2
 80091d8:	2b18      	cmp	r3, #24
 80091da:	d103      	bne.n	80091e4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80091dc:	23fa      	movs	r3, #250	@ 0xfa
 80091de:	01db      	lsls	r3, r3, #7
 80091e0:	613b      	str	r3, [r7, #16]
 80091e2:	e001      	b.n	80091e8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80091e8:	693b      	ldr	r3, [r7, #16]
}
 80091ea:	0018      	movs	r0, r3
 80091ec:	46bd      	mov	sp, r7
 80091ee:	b006      	add	sp, #24
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	46c0      	nop			@ (mov r8, r8)
 80091f4:	40021000 	.word	0x40021000
 80091f8:	00f42400 	.word	0x00f42400
 80091fc:	007a1200 	.word	0x007a1200

08009200 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009204:	4b02      	ldr	r3, [pc, #8]	@ (8009210 <HAL_RCC_GetHCLKFreq+0x10>)
 8009206:	681b      	ldr	r3, [r3, #0]
}
 8009208:	0018      	movs	r0, r3
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	46c0      	nop			@ (mov r8, r8)
 8009210:	20000000 	.word	0x20000000

08009214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009214:	b5b0      	push	{r4, r5, r7, lr}
 8009216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009218:	f7ff fff2 	bl	8009200 <HAL_RCC_GetHCLKFreq>
 800921c:	0004      	movs	r4, r0
 800921e:	f7ff fb3f 	bl	80088a0 <LL_RCC_GetAPB1Prescaler>
 8009222:	0003      	movs	r3, r0
 8009224:	0b1a      	lsrs	r2, r3, #12
 8009226:	4b05      	ldr	r3, [pc, #20]	@ (800923c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009228:	0092      	lsls	r2, r2, #2
 800922a:	58d3      	ldr	r3, [r2, r3]
 800922c:	221f      	movs	r2, #31
 800922e:	4013      	ands	r3, r2
 8009230:	40dc      	lsrs	r4, r3
 8009232:	0023      	movs	r3, r4
}
 8009234:	0018      	movs	r0, r3
 8009236:	46bd      	mov	sp, r7
 8009238:	bdb0      	pop	{r4, r5, r7, pc}
 800923a:	46c0      	nop			@ (mov r8, r8)
 800923c:	0800edf4 	.word	0x0800edf4

08009240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8009248:	2313      	movs	r3, #19
 800924a:	18fb      	adds	r3, r7, r3
 800924c:	2200      	movs	r2, #0
 800924e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009250:	2312      	movs	r3, #18
 8009252:	18fb      	adds	r3, r7, r3
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	2380      	movs	r3, #128	@ 0x80
 800925e:	029b      	lsls	r3, r3, #10
 8009260:	4013      	ands	r3, r2
 8009262:	d100      	bne.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8009264:	e0a3      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009266:	2011      	movs	r0, #17
 8009268:	183b      	adds	r3, r7, r0
 800926a:	2200      	movs	r2, #0
 800926c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800926e:	4bc3      	ldr	r3, [pc, #780]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009270:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009272:	2380      	movs	r3, #128	@ 0x80
 8009274:	055b      	lsls	r3, r3, #21
 8009276:	4013      	ands	r3, r2
 8009278:	d110      	bne.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800927a:	4bc0      	ldr	r3, [pc, #768]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800927c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800927e:	4bbf      	ldr	r3, [pc, #764]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009280:	2180      	movs	r1, #128	@ 0x80
 8009282:	0549      	lsls	r1, r1, #21
 8009284:	430a      	orrs	r2, r1
 8009286:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009288:	4bbc      	ldr	r3, [pc, #752]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800928a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800928c:	2380      	movs	r3, #128	@ 0x80
 800928e:	055b      	lsls	r3, r3, #21
 8009290:	4013      	ands	r3, r2
 8009292:	60bb      	str	r3, [r7, #8]
 8009294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009296:	183b      	adds	r3, r7, r0
 8009298:	2201      	movs	r2, #1
 800929a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800929c:	4bb8      	ldr	r3, [pc, #736]	@ (8009580 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	4bb7      	ldr	r3, [pc, #732]	@ (8009580 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80092a2:	2180      	movs	r1, #128	@ 0x80
 80092a4:	0049      	lsls	r1, r1, #1
 80092a6:	430a      	orrs	r2, r1
 80092a8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80092aa:	f7fe f99d 	bl	80075e8 <HAL_GetTick>
 80092ae:	0003      	movs	r3, r0
 80092b0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092b2:	e00b      	b.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092b4:	f7fe f998 	bl	80075e8 <HAL_GetTick>
 80092b8:	0002      	movs	r2, r0
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d904      	bls.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80092c2:	2313      	movs	r3, #19
 80092c4:	18fb      	adds	r3, r7, r3
 80092c6:	2203      	movs	r2, #3
 80092c8:	701a      	strb	r2, [r3, #0]
        break;
 80092ca:	e005      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092cc:	4bac      	ldr	r3, [pc, #688]	@ (8009580 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	2380      	movs	r3, #128	@ 0x80
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	4013      	ands	r3, r2
 80092d6:	d0ed      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80092d8:	2313      	movs	r3, #19
 80092da:	18fb      	adds	r3, r7, r3
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d154      	bne.n	800938c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80092e2:	4ba6      	ldr	r3, [pc, #664]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80092e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80092e6:	23c0      	movs	r3, #192	@ 0xc0
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	4013      	ands	r3, r2
 80092ec:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d019      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092f8:	697a      	ldr	r2, [r7, #20]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d014      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80092fe:	4b9f      	ldr	r3, [pc, #636]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009302:	4aa0      	ldr	r2, [pc, #640]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8009304:	4013      	ands	r3, r2
 8009306:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009308:	4b9c      	ldr	r3, [pc, #624]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800930a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800930c:	4b9b      	ldr	r3, [pc, #620]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800930e:	2180      	movs	r1, #128	@ 0x80
 8009310:	0249      	lsls	r1, r1, #9
 8009312:	430a      	orrs	r2, r1
 8009314:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009316:	4b99      	ldr	r3, [pc, #612]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009318:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800931a:	4b98      	ldr	r3, [pc, #608]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800931c:	499a      	ldr	r1, [pc, #616]	@ (8009588 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800931e:	400a      	ands	r2, r1
 8009320:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009322:	4b96      	ldr	r3, [pc, #600]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009324:	697a      	ldr	r2, [r7, #20]
 8009326:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2201      	movs	r2, #1
 800932c:	4013      	ands	r3, r2
 800932e:	d016      	beq.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009330:	f7fe f95a 	bl	80075e8 <HAL_GetTick>
 8009334:	0003      	movs	r3, r0
 8009336:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009338:	e00c      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800933a:	f7fe f955 	bl	80075e8 <HAL_GetTick>
 800933e:	0002      	movs	r2, r0
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	4a91      	ldr	r2, [pc, #580]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d904      	bls.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800934a:	2313      	movs	r3, #19
 800934c:	18fb      	adds	r3, r7, r3
 800934e:	2203      	movs	r2, #3
 8009350:	701a      	strb	r2, [r3, #0]
            break;
 8009352:	e004      	b.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009354:	4b89      	ldr	r3, [pc, #548]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009358:	2202      	movs	r2, #2
 800935a:	4013      	ands	r3, r2
 800935c:	d0ed      	beq.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800935e:	2313      	movs	r3, #19
 8009360:	18fb      	adds	r3, r7, r3
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10a      	bne.n	800937e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009368:	4b84      	ldr	r3, [pc, #528]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800936a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800936c:	4a85      	ldr	r2, [pc, #532]	@ (8009584 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800936e:	4013      	ands	r3, r2
 8009370:	0019      	movs	r1, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009376:	4b81      	ldr	r3, [pc, #516]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009378:	430a      	orrs	r2, r1
 800937a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800937c:	e00c      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800937e:	2312      	movs	r3, #18
 8009380:	18fb      	adds	r3, r7, r3
 8009382:	2213      	movs	r2, #19
 8009384:	18ba      	adds	r2, r7, r2
 8009386:	7812      	ldrb	r2, [r2, #0]
 8009388:	701a      	strb	r2, [r3, #0]
 800938a:	e005      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800938c:	2312      	movs	r3, #18
 800938e:	18fb      	adds	r3, r7, r3
 8009390:	2213      	movs	r2, #19
 8009392:	18ba      	adds	r2, r7, r2
 8009394:	7812      	ldrb	r2, [r2, #0]
 8009396:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009398:	2311      	movs	r3, #17
 800939a:	18fb      	adds	r3, r7, r3
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d105      	bne.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093a2:	4b76      	ldr	r3, [pc, #472]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80093a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093a6:	4b75      	ldr	r3, [pc, #468]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80093a8:	4979      	ldr	r1, [pc, #484]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80093aa:	400a      	ands	r2, r1
 80093ac:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2201      	movs	r2, #1
 80093b4:	4013      	ands	r3, r2
 80093b6:	d009      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80093b8:	4b70      	ldr	r3, [pc, #448]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80093ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093bc:	2203      	movs	r2, #3
 80093be:	4393      	bics	r3, r2
 80093c0:	0019      	movs	r1, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	4b6d      	ldr	r3, [pc, #436]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80093c8:	430a      	orrs	r2, r1
 80093ca:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2202      	movs	r2, #2
 80093d2:	4013      	ands	r3, r2
 80093d4:	d009      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80093d6:	4b69      	ldr	r3, [pc, #420]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80093d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093da:	220c      	movs	r2, #12
 80093dc:	4393      	bics	r3, r2
 80093de:	0019      	movs	r1, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	689a      	ldr	r2, [r3, #8]
 80093e4:	4b65      	ldr	r3, [pc, #404]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80093e6:	430a      	orrs	r2, r1
 80093e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	2210      	movs	r2, #16
 80093f0:	4013      	ands	r3, r2
 80093f2:	d009      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093f4:	4b61      	ldr	r3, [pc, #388]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80093f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093f8:	4a66      	ldr	r2, [pc, #408]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 80093fa:	4013      	ands	r3, r2
 80093fc:	0019      	movs	r1, r3
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	4b5e      	ldr	r3, [pc, #376]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009404:	430a      	orrs	r2, r1
 8009406:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	2380      	movs	r3, #128	@ 0x80
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4013      	ands	r3, r2
 8009412:	d009      	beq.n	8009428 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009414:	4b59      	ldr	r3, [pc, #356]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009418:	4a5f      	ldr	r2, [pc, #380]	@ (8009598 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800941a:	4013      	ands	r3, r2
 800941c:	0019      	movs	r1, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	699a      	ldr	r2, [r3, #24]
 8009422:	4b56      	ldr	r3, [pc, #344]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009424:	430a      	orrs	r2, r1
 8009426:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	2380      	movs	r3, #128	@ 0x80
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	4013      	ands	r3, r2
 8009432:	d009      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009434:	4b51      	ldr	r3, [pc, #324]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009438:	4a58      	ldr	r2, [pc, #352]	@ (800959c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800943a:	4013      	ands	r3, r2
 800943c:	0019      	movs	r1, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	69da      	ldr	r2, [r3, #28]
 8009442:	4b4e      	ldr	r3, [pc, #312]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009444:	430a      	orrs	r2, r1
 8009446:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2220      	movs	r2, #32
 800944e:	4013      	ands	r3, r2
 8009450:	d009      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009452:	4b4a      	ldr	r3, [pc, #296]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009456:	4a52      	ldr	r2, [pc, #328]	@ (80095a0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8009458:	4013      	ands	r3, r2
 800945a:	0019      	movs	r1, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	691a      	ldr	r2, [r3, #16]
 8009460:	4b46      	ldr	r3, [pc, #280]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009462:	430a      	orrs	r2, r1
 8009464:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	2380      	movs	r3, #128	@ 0x80
 800946c:	01db      	lsls	r3, r3, #7
 800946e:	4013      	ands	r3, r2
 8009470:	d015      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009472:	4b42      	ldr	r3, [pc, #264]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	0899      	lsrs	r1, r3, #2
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1a      	ldr	r2, [r3, #32]
 800947e:	4b3f      	ldr	r3, [pc, #252]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009480:	430a      	orrs	r2, r1
 8009482:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a1a      	ldr	r2, [r3, #32]
 8009488:	2380      	movs	r3, #128	@ 0x80
 800948a:	05db      	lsls	r3, r3, #23
 800948c:	429a      	cmp	r2, r3
 800948e:	d106      	bne.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009490:	4b3a      	ldr	r3, [pc, #232]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009492:	68da      	ldr	r2, [r3, #12]
 8009494:	4b39      	ldr	r3, [pc, #228]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009496:	2180      	movs	r1, #128	@ 0x80
 8009498:	0249      	lsls	r1, r1, #9
 800949a:	430a      	orrs	r2, r1
 800949c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	2380      	movs	r3, #128	@ 0x80
 80094a4:	031b      	lsls	r3, r3, #12
 80094a6:	4013      	ands	r3, r2
 80094a8:	d009      	beq.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80094aa:	4b34      	ldr	r3, [pc, #208]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80094ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ae:	2240      	movs	r2, #64	@ 0x40
 80094b0:	4393      	bics	r3, r2
 80094b2:	0019      	movs	r1, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094b8:	4b30      	ldr	r3, [pc, #192]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80094ba:	430a      	orrs	r2, r1
 80094bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	2380      	movs	r3, #128	@ 0x80
 80094c4:	039b      	lsls	r3, r3, #14
 80094c6:	4013      	ands	r3, r2
 80094c8:	d016      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80094ca:	4b2c      	ldr	r3, [pc, #176]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80094cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ce:	4a35      	ldr	r2, [pc, #212]	@ (80095a4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80094d0:	4013      	ands	r3, r2
 80094d2:	0019      	movs	r1, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80094d8:	4b28      	ldr	r3, [pc, #160]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80094da:	430a      	orrs	r2, r1
 80094dc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80094e2:	2380      	movs	r3, #128	@ 0x80
 80094e4:	03db      	lsls	r3, r3, #15
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d106      	bne.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80094ea:	4b24      	ldr	r3, [pc, #144]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80094ec:	68da      	ldr	r2, [r3, #12]
 80094ee:	4b23      	ldr	r3, [pc, #140]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80094f0:	2180      	movs	r1, #128	@ 0x80
 80094f2:	0449      	lsls	r1, r1, #17
 80094f4:	430a      	orrs	r2, r1
 80094f6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	2380      	movs	r3, #128	@ 0x80
 80094fe:	03db      	lsls	r3, r3, #15
 8009500:	4013      	ands	r3, r2
 8009502:	d016      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8009504:	4b1d      	ldr	r3, [pc, #116]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009508:	4a27      	ldr	r2, [pc, #156]	@ (80095a8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800950a:	4013      	ands	r3, r2
 800950c:	0019      	movs	r1, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009512:	4b1a      	ldr	r3, [pc, #104]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009514:	430a      	orrs	r2, r1
 8009516:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800951c:	2380      	movs	r3, #128	@ 0x80
 800951e:	045b      	lsls	r3, r3, #17
 8009520:	429a      	cmp	r2, r3
 8009522:	d106      	bne.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009524:	4b15      	ldr	r3, [pc, #84]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009526:	68da      	ldr	r2, [r3, #12]
 8009528:	4b14      	ldr	r3, [pc, #80]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800952a:	2180      	movs	r1, #128	@ 0x80
 800952c:	0449      	lsls	r1, r1, #17
 800952e:	430a      	orrs	r2, r1
 8009530:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	2380      	movs	r3, #128	@ 0x80
 8009538:	011b      	lsls	r3, r3, #4
 800953a:	4013      	ands	r3, r2
 800953c:	d016      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800953e:	4b0f      	ldr	r3, [pc, #60]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009542:	4a1a      	ldr	r2, [pc, #104]	@ (80095ac <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8009544:	4013      	ands	r3, r2
 8009546:	0019      	movs	r1, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	695a      	ldr	r2, [r3, #20]
 800954c:	4b0b      	ldr	r3, [pc, #44]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800954e:	430a      	orrs	r2, r1
 8009550:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	695a      	ldr	r2, [r3, #20]
 8009556:	2380      	movs	r3, #128	@ 0x80
 8009558:	01db      	lsls	r3, r3, #7
 800955a:	429a      	cmp	r2, r3
 800955c:	d106      	bne.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800955e:	4b07      	ldr	r3, [pc, #28]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	4b06      	ldr	r3, [pc, #24]	@ (800957c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8009564:	2180      	movs	r1, #128	@ 0x80
 8009566:	0249      	lsls	r1, r1, #9
 8009568:	430a      	orrs	r2, r1
 800956a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800956c:	2312      	movs	r3, #18
 800956e:	18fb      	adds	r3, r7, r3
 8009570:	781b      	ldrb	r3, [r3, #0]
}
 8009572:	0018      	movs	r0, r3
 8009574:	46bd      	mov	sp, r7
 8009576:	b006      	add	sp, #24
 8009578:	bd80      	pop	{r7, pc}
 800957a:	46c0      	nop			@ (mov r8, r8)
 800957c:	40021000 	.word	0x40021000
 8009580:	40007000 	.word	0x40007000
 8009584:	fffffcff 	.word	0xfffffcff
 8009588:	fffeffff 	.word	0xfffeffff
 800958c:	00001388 	.word	0x00001388
 8009590:	efffffff 	.word	0xefffffff
 8009594:	fffff3ff 	.word	0xfffff3ff
 8009598:	fff3ffff 	.word	0xfff3ffff
 800959c:	ffcfffff 	.word	0xffcfffff
 80095a0:	ffffcfff 	.word	0xffffcfff
 80095a4:	ffbfffff 	.word	0xffbfffff
 80095a8:	feffffff 	.word	0xfeffffff
 80095ac:	ffff3fff 	.word	0xffff3fff

080095b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d101      	bne.n	80095c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e0a8      	b.n	8009714 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d109      	bne.n	80095de <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	2382      	movs	r3, #130	@ 0x82
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d009      	beq.n	80095ea <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	61da      	str	r2, [r3, #28]
 80095dc:	e005      	b.n	80095ea <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	225d      	movs	r2, #93	@ 0x5d
 80095f4:	5c9b      	ldrb	r3, [r3, r2]
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d107      	bne.n	800960c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	225c      	movs	r2, #92	@ 0x5c
 8009600:	2100      	movs	r1, #0
 8009602:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	0018      	movs	r0, r3
 8009608:	f7fd fdc0 	bl	800718c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	225d      	movs	r2, #93	@ 0x5d
 8009610:	2102      	movs	r1, #2
 8009612:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2140      	movs	r1, #64	@ 0x40
 8009620:	438a      	bics	r2, r1
 8009622:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68da      	ldr	r2, [r3, #12]
 8009628:	23e0      	movs	r3, #224	@ 0xe0
 800962a:	00db      	lsls	r3, r3, #3
 800962c:	429a      	cmp	r2, r3
 800962e:	d902      	bls.n	8009636 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009630:	2300      	movs	r3, #0
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	e002      	b.n	800963c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009636:	2380      	movs	r3, #128	@ 0x80
 8009638:	015b      	lsls	r3, r3, #5
 800963a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68da      	ldr	r2, [r3, #12]
 8009640:	23f0      	movs	r3, #240	@ 0xf0
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	429a      	cmp	r2, r3
 8009646:	d008      	beq.n	800965a <HAL_SPI_Init+0xaa>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68da      	ldr	r2, [r3, #12]
 800964c:	23e0      	movs	r3, #224	@ 0xe0
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	429a      	cmp	r2, r3
 8009652:	d002      	beq.n	800965a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	2382      	movs	r3, #130	@ 0x82
 8009660:	005b      	lsls	r3, r3, #1
 8009662:	401a      	ands	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6899      	ldr	r1, [r3, #8]
 8009668:	2384      	movs	r3, #132	@ 0x84
 800966a:	021b      	lsls	r3, r3, #8
 800966c:	400b      	ands	r3, r1
 800966e:	431a      	orrs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	2102      	movs	r1, #2
 8009676:	400b      	ands	r3, r1
 8009678:	431a      	orrs	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	2101      	movs	r1, #1
 8009680:	400b      	ands	r3, r1
 8009682:	431a      	orrs	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6999      	ldr	r1, [r3, #24]
 8009688:	2380      	movs	r3, #128	@ 0x80
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	400b      	ands	r3, r1
 800968e:	431a      	orrs	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	69db      	ldr	r3, [r3, #28]
 8009694:	2138      	movs	r1, #56	@ 0x38
 8009696:	400b      	ands	r3, r1
 8009698:	431a      	orrs	r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a1b      	ldr	r3, [r3, #32]
 800969e:	2180      	movs	r1, #128	@ 0x80
 80096a0:	400b      	ands	r3, r1
 80096a2:	431a      	orrs	r2, r3
 80096a4:	0011      	movs	r1, r2
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80096aa:	2380      	movs	r3, #128	@ 0x80
 80096ac:	019b      	lsls	r3, r3, #6
 80096ae:	401a      	ands	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	0c1b      	lsrs	r3, r3, #16
 80096be:	2204      	movs	r2, #4
 80096c0:	401a      	ands	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c6:	2110      	movs	r1, #16
 80096c8:	400b      	ands	r3, r1
 80096ca:	431a      	orrs	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096d0:	2108      	movs	r1, #8
 80096d2:	400b      	ands	r3, r1
 80096d4:	431a      	orrs	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	68d9      	ldr	r1, [r3, #12]
 80096da:	23f0      	movs	r3, #240	@ 0xf0
 80096dc:	011b      	lsls	r3, r3, #4
 80096de:	400b      	ands	r3, r1
 80096e0:	431a      	orrs	r2, r3
 80096e2:	0011      	movs	r1, r2
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	2380      	movs	r3, #128	@ 0x80
 80096e8:	015b      	lsls	r3, r3, #5
 80096ea:	401a      	ands	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	430a      	orrs	r2, r1
 80096f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	69da      	ldr	r2, [r3, #28]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4907      	ldr	r1, [pc, #28]	@ (800971c <HAL_SPI_Init+0x16c>)
 8009700:	400a      	ands	r2, r1
 8009702:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	225d      	movs	r2, #93	@ 0x5d
 800970e:	2101      	movs	r1, #1
 8009710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	0018      	movs	r0, r3
 8009716:	46bd      	mov	sp, r7
 8009718:	b004      	add	sp, #16
 800971a:	bd80      	pop	{r7, pc}
 800971c:	fffff7ff 	.word	0xfffff7ff

08009720 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08a      	sub	sp, #40	@ 0x28
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	001a      	movs	r2, r3
 800972e:	1cbb      	adds	r3, r7, #2
 8009730:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009732:	2301      	movs	r3, #1
 8009734:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009736:	2323      	movs	r3, #35	@ 0x23
 8009738:	18fb      	adds	r3, r7, r3
 800973a:	2200      	movs	r2, #0
 800973c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	225c      	movs	r2, #92	@ 0x5c
 8009742:	5c9b      	ldrb	r3, [r3, r2]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d101      	bne.n	800974c <HAL_SPI_TransmitReceive+0x2c>
 8009748:	2302      	movs	r3, #2
 800974a:	e1c4      	b.n	8009ad6 <HAL_SPI_TransmitReceive+0x3b6>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	225c      	movs	r2, #92	@ 0x5c
 8009750:	2101      	movs	r1, #1
 8009752:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009754:	f7fd ff48 	bl	80075e8 <HAL_GetTick>
 8009758:	0003      	movs	r3, r0
 800975a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800975c:	201b      	movs	r0, #27
 800975e:	183b      	adds	r3, r7, r0
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	215d      	movs	r1, #93	@ 0x5d
 8009764:	5c52      	ldrb	r2, [r2, r1]
 8009766:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800976e:	2312      	movs	r3, #18
 8009770:	18fb      	adds	r3, r7, r3
 8009772:	1cba      	adds	r2, r7, #2
 8009774:	8812      	ldrh	r2, [r2, #0]
 8009776:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009778:	183b      	adds	r3, r7, r0
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d011      	beq.n	80097a4 <HAL_SPI_TransmitReceive+0x84>
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	2382      	movs	r3, #130	@ 0x82
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	429a      	cmp	r2, r3
 8009788:	d107      	bne.n	800979a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	689b      	ldr	r3, [r3, #8]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d103      	bne.n	800979a <HAL_SPI_TransmitReceive+0x7a>
 8009792:	183b      	adds	r3, r7, r0
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	2b04      	cmp	r3, #4
 8009798:	d004      	beq.n	80097a4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800979a:	2323      	movs	r3, #35	@ 0x23
 800979c:	18fb      	adds	r3, r7, r3
 800979e:	2202      	movs	r2, #2
 80097a0:	701a      	strb	r2, [r3, #0]
    goto error;
 80097a2:	e191      	b.n	8009ac8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d006      	beq.n	80097b8 <HAL_SPI_TransmitReceive+0x98>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d003      	beq.n	80097b8 <HAL_SPI_TransmitReceive+0x98>
 80097b0:	1cbb      	adds	r3, r7, #2
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d104      	bne.n	80097c2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80097b8:	2323      	movs	r3, #35	@ 0x23
 80097ba:	18fb      	adds	r3, r7, r3
 80097bc:	2201      	movs	r2, #1
 80097be:	701a      	strb	r2, [r3, #0]
    goto error;
 80097c0:	e182      	b.n	8009ac8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	225d      	movs	r2, #93	@ 0x5d
 80097c6:	5c9b      	ldrb	r3, [r3, r2]
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b04      	cmp	r3, #4
 80097cc:	d003      	beq.n	80097d6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	225d      	movs	r2, #93	@ 0x5d
 80097d2:	2105      	movs	r1, #5
 80097d4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	1cba      	adds	r2, r7, #2
 80097e6:	2146      	movs	r1, #70	@ 0x46
 80097e8:	8812      	ldrh	r2, [r2, #0]
 80097ea:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	1cba      	adds	r2, r7, #2
 80097f0:	2144      	movs	r1, #68	@ 0x44
 80097f2:	8812      	ldrh	r2, [r2, #0]
 80097f4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	1cba      	adds	r2, r7, #2
 8009800:	8812      	ldrh	r2, [r2, #0]
 8009802:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	1cba      	adds	r2, r7, #2
 8009808:	8812      	ldrh	r2, [r2, #0]
 800980a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	68da      	ldr	r2, [r3, #12]
 800981c:	23e0      	movs	r3, #224	@ 0xe0
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	429a      	cmp	r2, r3
 8009822:	d908      	bls.n	8009836 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	685a      	ldr	r2, [r3, #4]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	49ac      	ldr	r1, [pc, #688]	@ (8009ae0 <HAL_SPI_TransmitReceive+0x3c0>)
 8009830:	400a      	ands	r2, r1
 8009832:	605a      	str	r2, [r3, #4]
 8009834:	e008      	b.n	8009848 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2180      	movs	r1, #128	@ 0x80
 8009842:	0149      	lsls	r1, r1, #5
 8009844:	430a      	orrs	r2, r1
 8009846:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2240      	movs	r2, #64	@ 0x40
 8009850:	4013      	ands	r3, r2
 8009852:	2b40      	cmp	r3, #64	@ 0x40
 8009854:	d007      	beq.n	8009866 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2140      	movs	r1, #64	@ 0x40
 8009862:	430a      	orrs	r2, r1
 8009864:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	23e0      	movs	r3, #224	@ 0xe0
 800986c:	00db      	lsls	r3, r3, #3
 800986e:	429a      	cmp	r2, r3
 8009870:	d800      	bhi.n	8009874 <HAL_SPI_TransmitReceive+0x154>
 8009872:	e083      	b.n	800997c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <HAL_SPI_TransmitReceive+0x168>
 800987c:	2312      	movs	r3, #18
 800987e:	18fb      	adds	r3, r7, r3
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d000      	beq.n	8009888 <HAL_SPI_TransmitReceive+0x168>
 8009886:	e06d      	b.n	8009964 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800988c:	881a      	ldrh	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009898:	1c9a      	adds	r2, r3, #2
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	3b01      	subs	r3, #1
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098ac:	e05a      	b.n	8009964 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	2202      	movs	r2, #2
 80098b6:	4013      	ands	r3, r2
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d11b      	bne.n	80098f4 <HAL_SPI_TransmitReceive+0x1d4>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d016      	beq.n	80098f4 <HAL_SPI_TransmitReceive+0x1d4>
 80098c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d113      	bne.n	80098f4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d0:	881a      	ldrh	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098dc:	1c9a      	adds	r2, r3, #2
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098f0:	2300      	movs	r3, #0
 80098f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689b      	ldr	r3, [r3, #8]
 80098fa:	2201      	movs	r2, #1
 80098fc:	4013      	ands	r3, r2
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d11c      	bne.n	800993c <HAL_SPI_TransmitReceive+0x21c>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2246      	movs	r2, #70	@ 0x46
 8009906:	5a9b      	ldrh	r3, [r3, r2]
 8009908:	b29b      	uxth	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	d016      	beq.n	800993c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68da      	ldr	r2, [r3, #12]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009918:	b292      	uxth	r2, r2
 800991a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009920:	1c9a      	adds	r2, r3, #2
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2246      	movs	r2, #70	@ 0x46
 800992a:	5a9b      	ldrh	r3, [r3, r2]
 800992c:	b29b      	uxth	r3, r3
 800992e:	3b01      	subs	r3, #1
 8009930:	b299      	uxth	r1, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2246      	movs	r2, #70	@ 0x46
 8009936:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009938:	2301      	movs	r3, #1
 800993a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800993c:	f7fd fe54 	bl	80075e8 <HAL_GetTick>
 8009940:	0002      	movs	r2, r0
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009948:	429a      	cmp	r2, r3
 800994a:	d80b      	bhi.n	8009964 <HAL_SPI_TransmitReceive+0x244>
 800994c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994e:	3301      	adds	r3, #1
 8009950:	d008      	beq.n	8009964 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8009952:	2323      	movs	r3, #35	@ 0x23
 8009954:	18fb      	adds	r3, r7, r3
 8009956:	2203      	movs	r2, #3
 8009958:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	225d      	movs	r2, #93	@ 0x5d
 800995e:	2101      	movs	r1, #1
 8009960:	5499      	strb	r1, [r3, r2]
        goto error;
 8009962:	e0b1      	b.n	8009ac8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009968:	b29b      	uxth	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d19f      	bne.n	80098ae <HAL_SPI_TransmitReceive+0x18e>
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2246      	movs	r2, #70	@ 0x46
 8009972:	5a9b      	ldrh	r3, [r3, r2]
 8009974:	b29b      	uxth	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d199      	bne.n	80098ae <HAL_SPI_TransmitReceive+0x18e>
 800997a:	e089      	b.n	8009a90 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d005      	beq.n	8009990 <HAL_SPI_TransmitReceive+0x270>
 8009984:	2312      	movs	r3, #18
 8009986:	18fb      	adds	r3, r7, r3
 8009988:	881b      	ldrh	r3, [r3, #0]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d000      	beq.n	8009990 <HAL_SPI_TransmitReceive+0x270>
 800998e:	e074      	b.n	8009a7a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	330c      	adds	r3, #12
 800999a:	7812      	ldrb	r2, [r2, #0]
 800999c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a2:	1c5a      	adds	r2, r3, #1
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	3b01      	subs	r3, #1
 80099b0:	b29a      	uxth	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099b6:	e060      	b.n	8009a7a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	2202      	movs	r2, #2
 80099c0:	4013      	ands	r3, r2
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d11c      	bne.n	8009a00 <HAL_SPI_TransmitReceive+0x2e0>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d017      	beq.n	8009a00 <HAL_SPI_TransmitReceive+0x2e0>
 80099d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d114      	bne.n	8009a00 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	330c      	adds	r3, #12
 80099e0:	7812      	ldrb	r2, [r2, #0]
 80099e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	3b01      	subs	r3, #1
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099fc:	2300      	movs	r3, #0
 80099fe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	2201      	movs	r2, #1
 8009a08:	4013      	ands	r3, r2
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d11e      	bne.n	8009a4c <HAL_SPI_TransmitReceive+0x32c>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2246      	movs	r2, #70	@ 0x46
 8009a12:	5a9b      	ldrh	r3, [r3, r2]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d018      	beq.n	8009a4c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	330c      	adds	r3, #12
 8009a20:	001a      	movs	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a26:	7812      	ldrb	r2, [r2, #0]
 8009a28:	b2d2      	uxtb	r2, r2
 8009a2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a30:	1c5a      	adds	r2, r3, #1
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2246      	movs	r2, #70	@ 0x46
 8009a3a:	5a9b      	ldrh	r3, [r3, r2]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	b299      	uxth	r1, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2246      	movs	r2, #70	@ 0x46
 8009a46:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a4c:	f7fd fdcc 	bl	80075e8 <HAL_GetTick>
 8009a50:	0002      	movs	r2, r0
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d802      	bhi.n	8009a62 <HAL_SPI_TransmitReceive+0x342>
 8009a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a5e:	3301      	adds	r3, #1
 8009a60:	d102      	bne.n	8009a68 <HAL_SPI_TransmitReceive+0x348>
 8009a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d108      	bne.n	8009a7a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8009a68:	2323      	movs	r3, #35	@ 0x23
 8009a6a:	18fb      	adds	r3, r7, r3
 8009a6c:	2203      	movs	r2, #3
 8009a6e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	225d      	movs	r2, #93	@ 0x5d
 8009a74:	2101      	movs	r1, #1
 8009a76:	5499      	strb	r1, [r3, r2]
        goto error;
 8009a78:	e026      	b.n	8009ac8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d199      	bne.n	80099b8 <HAL_SPI_TransmitReceive+0x298>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2246      	movs	r2, #70	@ 0x46
 8009a88:	5a9b      	ldrh	r3, [r3, r2]
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d193      	bne.n	80099b8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a90:	69fa      	ldr	r2, [r7, #28]
 8009a92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	0018      	movs	r0, r3
 8009a98:	f000 f954 	bl	8009d44 <SPI_EndRxTxTransaction>
 8009a9c:	1e03      	subs	r3, r0, #0
 8009a9e:	d006      	beq.n	8009aae <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8009aa0:	2323      	movs	r3, #35	@ 0x23
 8009aa2:	18fb      	adds	r3, r7, r3
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d004      	beq.n	8009ac0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8009ab6:	2323      	movs	r3, #35	@ 0x23
 8009ab8:	18fb      	adds	r3, r7, r3
 8009aba:	2201      	movs	r2, #1
 8009abc:	701a      	strb	r2, [r3, #0]
 8009abe:	e003      	b.n	8009ac8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	225d      	movs	r2, #93	@ 0x5d
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	225c      	movs	r2, #92	@ 0x5c
 8009acc:	2100      	movs	r1, #0
 8009ace:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009ad0:	2323      	movs	r3, #35	@ 0x23
 8009ad2:	18fb      	adds	r3, r7, r3
 8009ad4:	781b      	ldrb	r3, [r3, #0]
}
 8009ad6:	0018      	movs	r0, r3
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	b00a      	add	sp, #40	@ 0x28
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	46c0      	nop			@ (mov r8, r8)
 8009ae0:	ffffefff 	.word	0xffffefff

08009ae4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b088      	sub	sp, #32
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	1dfb      	adds	r3, r7, #7
 8009af2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009af4:	f7fd fd78 	bl	80075e8 <HAL_GetTick>
 8009af8:	0002      	movs	r2, r0
 8009afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afc:	1a9b      	subs	r3, r3, r2
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	18d3      	adds	r3, r2, r3
 8009b02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b04:	f7fd fd70 	bl	80075e8 <HAL_GetTick>
 8009b08:	0003      	movs	r3, r0
 8009b0a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8009bf8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	015b      	lsls	r3, r3, #5
 8009b12:	0d1b      	lsrs	r3, r3, #20
 8009b14:	69fa      	ldr	r2, [r7, #28]
 8009b16:	4353      	muls	r3, r2
 8009b18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b1a:	e058      	b.n	8009bce <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	d055      	beq.n	8009bce <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b22:	f7fd fd61 	bl	80075e8 <HAL_GetTick>
 8009b26:	0002      	movs	r2, r0
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	69fa      	ldr	r2, [r7, #28]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d902      	bls.n	8009b38 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d142      	bne.n	8009bbe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	21e0      	movs	r1, #224	@ 0xe0
 8009b44:	438a      	bics	r2, r1
 8009b46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	2382      	movs	r3, #130	@ 0x82
 8009b4e:	005b      	lsls	r3, r3, #1
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d113      	bne.n	8009b7c <SPI_WaitFlagStateUntilTimeout+0x98>
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	689a      	ldr	r2, [r3, #8]
 8009b58:	2380      	movs	r3, #128	@ 0x80
 8009b5a:	021b      	lsls	r3, r3, #8
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d005      	beq.n	8009b6c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	689a      	ldr	r2, [r3, #8]
 8009b64:	2380      	movs	r3, #128	@ 0x80
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d107      	bne.n	8009b7c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2140      	movs	r1, #64	@ 0x40
 8009b78:	438a      	bics	r2, r1
 8009b7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009b80:	2380      	movs	r3, #128	@ 0x80
 8009b82:	019b      	lsls	r3, r3, #6
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d110      	bne.n	8009baa <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	491a      	ldr	r1, [pc, #104]	@ (8009bfc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8009b94:	400a      	ands	r2, r1
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2180      	movs	r1, #128	@ 0x80
 8009ba4:	0189      	lsls	r1, r1, #6
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	225d      	movs	r2, #93	@ 0x5d
 8009bae:	2101      	movs	r1, #1
 8009bb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	225c      	movs	r2, #92	@ 0x5c
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e017      	b.n	8009bee <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	425a      	negs	r2, r3
 8009bde:	4153      	adcs	r3, r2
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	001a      	movs	r2, r3
 8009be4:	1dfb      	adds	r3, r7, #7
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d197      	bne.n	8009b1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	0018      	movs	r0, r3
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	b008      	add	sp, #32
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	46c0      	nop			@ (mov r8, r8)
 8009bf8:	20000000 	.word	0x20000000
 8009bfc:	ffffdfff 	.word	0xffffdfff

08009c00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b08a      	sub	sp, #40	@ 0x28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
 8009c0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009c0e:	2317      	movs	r3, #23
 8009c10:	18fb      	adds	r3, r7, r3
 8009c12:	2200      	movs	r2, #0
 8009c14:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009c16:	f7fd fce7 	bl	80075e8 <HAL_GetTick>
 8009c1a:	0002      	movs	r2, r0
 8009c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1e:	1a9b      	subs	r3, r3, r2
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	18d3      	adds	r3, r2, r3
 8009c24:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009c26:	f7fd fcdf 	bl	80075e8 <HAL_GetTick>
 8009c2a:	0003      	movs	r3, r0
 8009c2c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	330c      	adds	r3, #12
 8009c34:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009c36:	4b41      	ldr	r3, [pc, #260]	@ (8009d3c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	0013      	movs	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	189b      	adds	r3, r3, r2
 8009c40:	00da      	lsls	r2, r3, #3
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	0d1b      	lsrs	r3, r3, #20
 8009c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c48:	4353      	muls	r3, r2
 8009c4a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009c4c:	e068      	b.n	8009d20 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	23c0      	movs	r3, #192	@ 0xc0
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	429a      	cmp	r2, r3
 8009c56:	d10a      	bne.n	8009c6e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d107      	bne.n	8009c6e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	b2da      	uxtb	r2, r3
 8009c64:	2117      	movs	r1, #23
 8009c66:	187b      	adds	r3, r7, r1
 8009c68:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009c6a:	187b      	adds	r3, r7, r1
 8009c6c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	3301      	adds	r3, #1
 8009c72:	d055      	beq.n	8009d20 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c74:	f7fd fcb8 	bl	80075e8 <HAL_GetTick>
 8009c78:	0002      	movs	r2, r0
 8009c7a:	6a3b      	ldr	r3, [r7, #32]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d902      	bls.n	8009c8a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8009c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d142      	bne.n	8009d10 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	21e0      	movs	r1, #224	@ 0xe0
 8009c96:	438a      	bics	r2, r1
 8009c98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	2382      	movs	r3, #130	@ 0x82
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d113      	bne.n	8009cce <SPI_WaitFifoStateUntilTimeout+0xce>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	689a      	ldr	r2, [r3, #8]
 8009caa:	2380      	movs	r3, #128	@ 0x80
 8009cac:	021b      	lsls	r3, r3, #8
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d005      	beq.n	8009cbe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	689a      	ldr	r2, [r3, #8]
 8009cb6:	2380      	movs	r3, #128	@ 0x80
 8009cb8:	00db      	lsls	r3, r3, #3
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d107      	bne.n	8009cce <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2140      	movs	r1, #64	@ 0x40
 8009cca:	438a      	bics	r2, r1
 8009ccc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009cd2:	2380      	movs	r3, #128	@ 0x80
 8009cd4:	019b      	lsls	r3, r3, #6
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d110      	bne.n	8009cfc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4916      	ldr	r1, [pc, #88]	@ (8009d40 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8009ce6:	400a      	ands	r2, r1
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2180      	movs	r1, #128	@ 0x80
 8009cf6:	0189      	lsls	r1, r1, #6
 8009cf8:	430a      	orrs	r2, r1
 8009cfa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	225d      	movs	r2, #93	@ 0x5d
 8009d00:	2101      	movs	r1, #1
 8009d02:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	225c      	movs	r2, #92	@ 0x5c
 8009d08:	2100      	movs	r1, #0
 8009d0a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e010      	b.n	8009d32 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	68ba      	ldr	r2, [r7, #8]
 8009d28:	4013      	ands	r3, r2
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d18e      	bne.n	8009c4e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	0018      	movs	r0, r3
 8009d34:	46bd      	mov	sp, r7
 8009d36:	b00a      	add	sp, #40	@ 0x28
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	46c0      	nop			@ (mov r8, r8)
 8009d3c:	20000000 	.word	0x20000000
 8009d40:	ffffdfff 	.word	0xffffdfff

08009d44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af02      	add	r7, sp, #8
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	23c0      	movs	r3, #192	@ 0xc0
 8009d54:	0159      	lsls	r1, r3, #5
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	9300      	str	r3, [sp, #0]
 8009d5c:	0013      	movs	r3, r2
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f7ff ff4e 	bl	8009c00 <SPI_WaitFifoStateUntilTimeout>
 8009d64:	1e03      	subs	r3, r0, #0
 8009d66:	d007      	beq.n	8009d78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d6c:	2220      	movs	r2, #32
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009d74:	2303      	movs	r3, #3
 8009d76:	e027      	b.n	8009dc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	9300      	str	r3, [sp, #0]
 8009d80:	0013      	movs	r3, r2
 8009d82:	2200      	movs	r2, #0
 8009d84:	2180      	movs	r1, #128	@ 0x80
 8009d86:	f7ff fead 	bl	8009ae4 <SPI_WaitFlagStateUntilTimeout>
 8009d8a:	1e03      	subs	r3, r0, #0
 8009d8c:	d007      	beq.n	8009d9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d92:	2220      	movs	r2, #32
 8009d94:	431a      	orrs	r2, r3
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e014      	b.n	8009dc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	23c0      	movs	r3, #192	@ 0xc0
 8009da2:	00d9      	lsls	r1, r3, #3
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	0013      	movs	r3, r2
 8009dac:	2200      	movs	r2, #0
 8009dae:	f7ff ff27 	bl	8009c00 <SPI_WaitFifoStateUntilTimeout>
 8009db2:	1e03      	subs	r3, r0, #0
 8009db4:	d007      	beq.n	8009dc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dba:	2220      	movs	r2, #32
 8009dbc:	431a      	orrs	r2, r3
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e000      	b.n	8009dc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	0018      	movs	r0, r3
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	b004      	add	sp, #16
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e046      	b.n	8009e70 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2288      	movs	r2, #136	@ 0x88
 8009de6:	589b      	ldr	r3, [r3, r2]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d107      	bne.n	8009dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2284      	movs	r2, #132	@ 0x84
 8009df0:	2100      	movs	r1, #0
 8009df2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	0018      	movs	r0, r3
 8009df8:	f7fd fa12 	bl	8007220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2288      	movs	r2, #136	@ 0x88
 8009e00:	2124      	movs	r1, #36	@ 0x24
 8009e02:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2101      	movs	r1, #1
 8009e10:	438a      	bics	r2, r1
 8009e12:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d003      	beq.n	8009e24 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	0018      	movs	r0, r3
 8009e20:	f000 fc74 	bl	800a70c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	0018      	movs	r0, r3
 8009e28:	f000 f9b2 	bl	800a190 <UART_SetConfig>
 8009e2c:	0003      	movs	r3, r0
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d101      	bne.n	8009e36 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e01c      	b.n	8009e70 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	490d      	ldr	r1, [pc, #52]	@ (8009e78 <HAL_UART_Init+0xa8>)
 8009e42:	400a      	ands	r2, r1
 8009e44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	689a      	ldr	r2, [r3, #8]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	212a      	movs	r1, #42	@ 0x2a
 8009e52:	438a      	bics	r2, r1
 8009e54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2101      	movs	r1, #1
 8009e62:	430a      	orrs	r2, r1
 8009e64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	0018      	movs	r0, r3
 8009e6a:	f000 fd03 	bl	800a874 <UART_CheckIdleState>
 8009e6e:	0003      	movs	r3, r0
}
 8009e70:	0018      	movs	r0, r3
 8009e72:	46bd      	mov	sp, r7
 8009e74:	b002      	add	sp, #8
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	ffffb7ff 	.word	0xffffb7ff

08009e7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08a      	sub	sp, #40	@ 0x28
 8009e80:	af02      	add	r7, sp, #8
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	603b      	str	r3, [r7, #0]
 8009e88:	1dbb      	adds	r3, r7, #6
 8009e8a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2288      	movs	r2, #136	@ 0x88
 8009e90:	589b      	ldr	r3, [r3, r2]
 8009e92:	2b20      	cmp	r3, #32
 8009e94:	d000      	beq.n	8009e98 <HAL_UART_Transmit+0x1c>
 8009e96:	e090      	b.n	8009fba <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d003      	beq.n	8009ea6 <HAL_UART_Transmit+0x2a>
 8009e9e:	1dbb      	adds	r3, r7, #6
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d101      	bne.n	8009eaa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e088      	b.n	8009fbc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	689a      	ldr	r2, [r3, #8]
 8009eae:	2380      	movs	r3, #128	@ 0x80
 8009eb0:	015b      	lsls	r3, r3, #5
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d109      	bne.n	8009eca <HAL_UART_Transmit+0x4e>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d105      	bne.n	8009eca <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	d001      	beq.n	8009eca <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e078      	b.n	8009fbc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2290      	movs	r2, #144	@ 0x90
 8009ece:	2100      	movs	r1, #0
 8009ed0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2288      	movs	r2, #136	@ 0x88
 8009ed6:	2121      	movs	r1, #33	@ 0x21
 8009ed8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009eda:	f7fd fb85 	bl	80075e8 <HAL_GetTick>
 8009ede:	0003      	movs	r3, r0
 8009ee0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	1dba      	adds	r2, r7, #6
 8009ee6:	2154      	movs	r1, #84	@ 0x54
 8009ee8:	8812      	ldrh	r2, [r2, #0]
 8009eea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	1dba      	adds	r2, r7, #6
 8009ef0:	2156      	movs	r1, #86	@ 0x56
 8009ef2:	8812      	ldrh	r2, [r2, #0]
 8009ef4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	689a      	ldr	r2, [r3, #8]
 8009efa:	2380      	movs	r3, #128	@ 0x80
 8009efc:	015b      	lsls	r3, r3, #5
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d108      	bne.n	8009f14 <HAL_UART_Transmit+0x98>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d104      	bne.n	8009f14 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	61bb      	str	r3, [r7, #24]
 8009f12:	e003      	b.n	8009f1c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009f1c:	e030      	b.n	8009f80 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	68f8      	ldr	r0, [r7, #12]
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	9300      	str	r3, [sp, #0]
 8009f26:	0013      	movs	r3, r2
 8009f28:	2200      	movs	r2, #0
 8009f2a:	2180      	movs	r1, #128	@ 0x80
 8009f2c:	f000 fd4c 	bl	800a9c8 <UART_WaitOnFlagUntilTimeout>
 8009f30:	1e03      	subs	r3, r0, #0
 8009f32:	d005      	beq.n	8009f40 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2288      	movs	r2, #136	@ 0x88
 8009f38:	2120      	movs	r1, #32
 8009f3a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	e03d      	b.n	8009fbc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10b      	bne.n	8009f5e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009f46:	69bb      	ldr	r3, [r7, #24]
 8009f48:	881b      	ldrh	r3, [r3, #0]
 8009f4a:	001a      	movs	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	05d2      	lsls	r2, r2, #23
 8009f52:	0dd2      	lsrs	r2, r2, #23
 8009f54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009f56:	69bb      	ldr	r3, [r7, #24]
 8009f58:	3302      	adds	r3, #2
 8009f5a:	61bb      	str	r3, [r7, #24]
 8009f5c:	e007      	b.n	8009f6e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	781a      	ldrb	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009f68:	69fb      	ldr	r3, [r7, #28]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2256      	movs	r2, #86	@ 0x56
 8009f72:	5a9b      	ldrh	r3, [r3, r2]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	3b01      	subs	r3, #1
 8009f78:	b299      	uxth	r1, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2256      	movs	r2, #86	@ 0x56
 8009f7e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2256      	movs	r2, #86	@ 0x56
 8009f84:	5a9b      	ldrh	r3, [r3, r2]
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1c8      	bne.n	8009f1e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009f8c:	697a      	ldr	r2, [r7, #20]
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	0013      	movs	r3, r2
 8009f96:	2200      	movs	r2, #0
 8009f98:	2140      	movs	r1, #64	@ 0x40
 8009f9a:	f000 fd15 	bl	800a9c8 <UART_WaitOnFlagUntilTimeout>
 8009f9e:	1e03      	subs	r3, r0, #0
 8009fa0:	d005      	beq.n	8009fae <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2288      	movs	r2, #136	@ 0x88
 8009fa6:	2120      	movs	r1, #32
 8009fa8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e006      	b.n	8009fbc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	2288      	movs	r2, #136	@ 0x88
 8009fb2:	2120      	movs	r1, #32
 8009fb4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e000      	b.n	8009fbc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8009fba:	2302      	movs	r3, #2
  }
}
 8009fbc:	0018      	movs	r0, r3
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	b008      	add	sp, #32
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08a      	sub	sp, #40	@ 0x28
 8009fc8:	af02      	add	r7, sp, #8
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	603b      	str	r3, [r7, #0]
 8009fd0:	1dbb      	adds	r3, r7, #6
 8009fd2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	228c      	movs	r2, #140	@ 0x8c
 8009fd8:	589b      	ldr	r3, [r3, r2]
 8009fda:	2b20      	cmp	r3, #32
 8009fdc:	d000      	beq.n	8009fe0 <HAL_UART_Receive+0x1c>
 8009fde:	e0d0      	b.n	800a182 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d003      	beq.n	8009fee <HAL_UART_Receive+0x2a>
 8009fe6:	1dbb      	adds	r3, r7, #6
 8009fe8:	881b      	ldrh	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e0c8      	b.n	800a184 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	689a      	ldr	r2, [r3, #8]
 8009ff6:	2380      	movs	r3, #128	@ 0x80
 8009ff8:	015b      	lsls	r3, r3, #5
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d109      	bne.n	800a012 <HAL_UART_Receive+0x4e>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d105      	bne.n	800a012 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2201      	movs	r2, #1
 800a00a:	4013      	ands	r3, r2
 800a00c:	d001      	beq.n	800a012 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800a00e:	2301      	movs	r3, #1
 800a010:	e0b8      	b.n	800a184 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2290      	movs	r2, #144	@ 0x90
 800a016:	2100      	movs	r1, #0
 800a018:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	228c      	movs	r2, #140	@ 0x8c
 800a01e:	2122      	movs	r1, #34	@ 0x22
 800a020:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a028:	f7fd fade 	bl	80075e8 <HAL_GetTick>
 800a02c:	0003      	movs	r3, r0
 800a02e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	1dba      	adds	r2, r7, #6
 800a034:	215c      	movs	r1, #92	@ 0x5c
 800a036:	8812      	ldrh	r2, [r2, #0]
 800a038:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	1dba      	adds	r2, r7, #6
 800a03e:	215e      	movs	r1, #94	@ 0x5e
 800a040:	8812      	ldrh	r2, [r2, #0]
 800a042:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	2380      	movs	r3, #128	@ 0x80
 800a04a:	015b      	lsls	r3, r3, #5
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d10d      	bne.n	800a06c <HAL_UART_Receive+0xa8>
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d104      	bne.n	800a062 <HAL_UART_Receive+0x9e>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2260      	movs	r2, #96	@ 0x60
 800a05c:	494b      	ldr	r1, [pc, #300]	@ (800a18c <HAL_UART_Receive+0x1c8>)
 800a05e:	5299      	strh	r1, [r3, r2]
 800a060:	e02e      	b.n	800a0c0 <HAL_UART_Receive+0xfc>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2260      	movs	r2, #96	@ 0x60
 800a066:	21ff      	movs	r1, #255	@ 0xff
 800a068:	5299      	strh	r1, [r3, r2]
 800a06a:	e029      	b.n	800a0c0 <HAL_UART_Receive+0xfc>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10d      	bne.n	800a090 <HAL_UART_Receive+0xcc>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d104      	bne.n	800a086 <HAL_UART_Receive+0xc2>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2260      	movs	r2, #96	@ 0x60
 800a080:	21ff      	movs	r1, #255	@ 0xff
 800a082:	5299      	strh	r1, [r3, r2]
 800a084:	e01c      	b.n	800a0c0 <HAL_UART_Receive+0xfc>
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2260      	movs	r2, #96	@ 0x60
 800a08a:	217f      	movs	r1, #127	@ 0x7f
 800a08c:	5299      	strh	r1, [r3, r2]
 800a08e:	e017      	b.n	800a0c0 <HAL_UART_Receive+0xfc>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	689a      	ldr	r2, [r3, #8]
 800a094:	2380      	movs	r3, #128	@ 0x80
 800a096:	055b      	lsls	r3, r3, #21
 800a098:	429a      	cmp	r2, r3
 800a09a:	d10d      	bne.n	800a0b8 <HAL_UART_Receive+0xf4>
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d104      	bne.n	800a0ae <HAL_UART_Receive+0xea>
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2260      	movs	r2, #96	@ 0x60
 800a0a8:	217f      	movs	r1, #127	@ 0x7f
 800a0aa:	5299      	strh	r1, [r3, r2]
 800a0ac:	e008      	b.n	800a0c0 <HAL_UART_Receive+0xfc>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2260      	movs	r2, #96	@ 0x60
 800a0b2:	213f      	movs	r1, #63	@ 0x3f
 800a0b4:	5299      	strh	r1, [r3, r2]
 800a0b6:	e003      	b.n	800a0c0 <HAL_UART_Receive+0xfc>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2260      	movs	r2, #96	@ 0x60
 800a0bc:	2100      	movs	r1, #0
 800a0be:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800a0c0:	2312      	movs	r3, #18
 800a0c2:	18fb      	adds	r3, r7, r3
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	2160      	movs	r1, #96	@ 0x60
 800a0c8:	5a52      	ldrh	r2, [r2, r1]
 800a0ca:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	689a      	ldr	r2, [r3, #8]
 800a0d0:	2380      	movs	r3, #128	@ 0x80
 800a0d2:	015b      	lsls	r3, r3, #5
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d108      	bne.n	800a0ea <HAL_UART_Receive+0x126>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d104      	bne.n	800a0ea <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	61bb      	str	r3, [r7, #24]
 800a0e8:	e003      	b.n	800a0f2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a0f2:	e03a      	b.n	800a16a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a0f4:	697a      	ldr	r2, [r7, #20]
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	0013      	movs	r3, r2
 800a0fe:	2200      	movs	r2, #0
 800a100:	2120      	movs	r1, #32
 800a102:	f000 fc61 	bl	800a9c8 <UART_WaitOnFlagUntilTimeout>
 800a106:	1e03      	subs	r3, r0, #0
 800a108:	d005      	beq.n	800a116 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	228c      	movs	r2, #140	@ 0x8c
 800a10e:	2120      	movs	r1, #32
 800a110:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	e036      	b.n	800a184 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10e      	bne.n	800a13a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a122:	b29b      	uxth	r3, r3
 800a124:	2212      	movs	r2, #18
 800a126:	18ba      	adds	r2, r7, r2
 800a128:	8812      	ldrh	r2, [r2, #0]
 800a12a:	4013      	ands	r3, r2
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	3302      	adds	r3, #2
 800a136:	61bb      	str	r3, [r7, #24]
 800a138:	e00e      	b.n	800a158 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2212      	movs	r2, #18
 800a144:	18ba      	adds	r2, r7, r2
 800a146:	8812      	ldrh	r2, [r2, #0]
 800a148:	b2d2      	uxtb	r2, r2
 800a14a:	4013      	ands	r3, r2
 800a14c:	b2da      	uxtb	r2, r3
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	3301      	adds	r3, #1
 800a156:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	225e      	movs	r2, #94	@ 0x5e
 800a15c:	5a9b      	ldrh	r3, [r3, r2]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	3b01      	subs	r3, #1
 800a162:	b299      	uxth	r1, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	225e      	movs	r2, #94	@ 0x5e
 800a168:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	225e      	movs	r2, #94	@ 0x5e
 800a16e:	5a9b      	ldrh	r3, [r3, r2]
 800a170:	b29b      	uxth	r3, r3
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1be      	bne.n	800a0f4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	228c      	movs	r2, #140	@ 0x8c
 800a17a:	2120      	movs	r1, #32
 800a17c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	e000      	b.n	800a184 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800a182:	2302      	movs	r3, #2
  }
}
 800a184:	0018      	movs	r0, r3
 800a186:	46bd      	mov	sp, r7
 800a188:	b008      	add	sp, #32
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	000001ff 	.word	0x000001ff

0800a190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a190:	b5b0      	push	{r4, r5, r7, lr}
 800a192:	b090      	sub	sp, #64	@ 0x40
 800a194:	af00      	add	r7, sp, #0
 800a196:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a198:	231a      	movs	r3, #26
 800a19a:	2220      	movs	r2, #32
 800a19c:	189b      	adds	r3, r3, r2
 800a19e:	19db      	adds	r3, r3, r7
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	431a      	orrs	r2, r3
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4aaf      	ldr	r2, [pc, #700]	@ (800a480 <UART_SetConfig+0x2f0>)
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	0019      	movs	r1, r3
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ce:	430b      	orrs	r3, r1
 800a1d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	4aaa      	ldr	r2, [pc, #680]	@ (800a484 <UART_SetConfig+0x2f4>)
 800a1da:	4013      	ands	r3, r2
 800a1dc:	0018      	movs	r0, r3
 800a1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e0:	68d9      	ldr	r1, [r3, #12]
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	0003      	movs	r3, r0
 800a1e8:	430b      	orrs	r3, r1
 800a1ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4aa4      	ldr	r2, [pc, #656]	@ (800a488 <UART_SetConfig+0x2f8>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d004      	beq.n	800a206 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fe:	6a1b      	ldr	r3, [r3, #32]
 800a200:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a202:	4313      	orrs	r3, r2
 800a204:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	4a9f      	ldr	r2, [pc, #636]	@ (800a48c <UART_SetConfig+0x2fc>)
 800a20e:	4013      	ands	r3, r2
 800a210:	0019      	movs	r1, r3
 800a212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a218:	430b      	orrs	r3, r1
 800a21a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a222:	220f      	movs	r2, #15
 800a224:	4393      	bics	r3, r2
 800a226:	0018      	movs	r0, r3
 800a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	0003      	movs	r3, r0
 800a232:	430b      	orrs	r3, r1
 800a234:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a95      	ldr	r2, [pc, #596]	@ (800a490 <UART_SetConfig+0x300>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d131      	bne.n	800a2a4 <UART_SetConfig+0x114>
 800a240:	4b94      	ldr	r3, [pc, #592]	@ (800a494 <UART_SetConfig+0x304>)
 800a242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a244:	2203      	movs	r2, #3
 800a246:	4013      	ands	r3, r2
 800a248:	2b03      	cmp	r3, #3
 800a24a:	d01d      	beq.n	800a288 <UART_SetConfig+0xf8>
 800a24c:	d823      	bhi.n	800a296 <UART_SetConfig+0x106>
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d00c      	beq.n	800a26c <UART_SetConfig+0xdc>
 800a252:	d820      	bhi.n	800a296 <UART_SetConfig+0x106>
 800a254:	2b00      	cmp	r3, #0
 800a256:	d002      	beq.n	800a25e <UART_SetConfig+0xce>
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d00e      	beq.n	800a27a <UART_SetConfig+0xea>
 800a25c:	e01b      	b.n	800a296 <UART_SetConfig+0x106>
 800a25e:	231b      	movs	r3, #27
 800a260:	2220      	movs	r2, #32
 800a262:	189b      	adds	r3, r3, r2
 800a264:	19db      	adds	r3, r3, r7
 800a266:	2200      	movs	r2, #0
 800a268:	701a      	strb	r2, [r3, #0]
 800a26a:	e0b4      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a26c:	231b      	movs	r3, #27
 800a26e:	2220      	movs	r2, #32
 800a270:	189b      	adds	r3, r3, r2
 800a272:	19db      	adds	r3, r3, r7
 800a274:	2202      	movs	r2, #2
 800a276:	701a      	strb	r2, [r3, #0]
 800a278:	e0ad      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a27a:	231b      	movs	r3, #27
 800a27c:	2220      	movs	r2, #32
 800a27e:	189b      	adds	r3, r3, r2
 800a280:	19db      	adds	r3, r3, r7
 800a282:	2204      	movs	r2, #4
 800a284:	701a      	strb	r2, [r3, #0]
 800a286:	e0a6      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a288:	231b      	movs	r3, #27
 800a28a:	2220      	movs	r2, #32
 800a28c:	189b      	adds	r3, r3, r2
 800a28e:	19db      	adds	r3, r3, r7
 800a290:	2208      	movs	r2, #8
 800a292:	701a      	strb	r2, [r3, #0]
 800a294:	e09f      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a296:	231b      	movs	r3, #27
 800a298:	2220      	movs	r2, #32
 800a29a:	189b      	adds	r3, r3, r2
 800a29c:	19db      	adds	r3, r3, r7
 800a29e:	2210      	movs	r2, #16
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	e098      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a7b      	ldr	r2, [pc, #492]	@ (800a498 <UART_SetConfig+0x308>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d131      	bne.n	800a312 <UART_SetConfig+0x182>
 800a2ae:	4b79      	ldr	r3, [pc, #484]	@ (800a494 <UART_SetConfig+0x304>)
 800a2b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2b2:	220c      	movs	r2, #12
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	2b0c      	cmp	r3, #12
 800a2b8:	d01d      	beq.n	800a2f6 <UART_SetConfig+0x166>
 800a2ba:	d823      	bhi.n	800a304 <UART_SetConfig+0x174>
 800a2bc:	2b08      	cmp	r3, #8
 800a2be:	d00c      	beq.n	800a2da <UART_SetConfig+0x14a>
 800a2c0:	d820      	bhi.n	800a304 <UART_SetConfig+0x174>
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d002      	beq.n	800a2cc <UART_SetConfig+0x13c>
 800a2c6:	2b04      	cmp	r3, #4
 800a2c8:	d00e      	beq.n	800a2e8 <UART_SetConfig+0x158>
 800a2ca:	e01b      	b.n	800a304 <UART_SetConfig+0x174>
 800a2cc:	231b      	movs	r3, #27
 800a2ce:	2220      	movs	r2, #32
 800a2d0:	189b      	adds	r3, r3, r2
 800a2d2:	19db      	adds	r3, r3, r7
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	701a      	strb	r2, [r3, #0]
 800a2d8:	e07d      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a2da:	231b      	movs	r3, #27
 800a2dc:	2220      	movs	r2, #32
 800a2de:	189b      	adds	r3, r3, r2
 800a2e0:	19db      	adds	r3, r3, r7
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	701a      	strb	r2, [r3, #0]
 800a2e6:	e076      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a2e8:	231b      	movs	r3, #27
 800a2ea:	2220      	movs	r2, #32
 800a2ec:	189b      	adds	r3, r3, r2
 800a2ee:	19db      	adds	r3, r3, r7
 800a2f0:	2204      	movs	r2, #4
 800a2f2:	701a      	strb	r2, [r3, #0]
 800a2f4:	e06f      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a2f6:	231b      	movs	r3, #27
 800a2f8:	2220      	movs	r2, #32
 800a2fa:	189b      	adds	r3, r3, r2
 800a2fc:	19db      	adds	r3, r3, r7
 800a2fe:	2208      	movs	r2, #8
 800a300:	701a      	strb	r2, [r3, #0]
 800a302:	e068      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a304:	231b      	movs	r3, #27
 800a306:	2220      	movs	r2, #32
 800a308:	189b      	adds	r3, r3, r2
 800a30a:	19db      	adds	r3, r3, r7
 800a30c:	2210      	movs	r2, #16
 800a30e:	701a      	strb	r2, [r3, #0]
 800a310:	e061      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a61      	ldr	r2, [pc, #388]	@ (800a49c <UART_SetConfig+0x30c>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d106      	bne.n	800a32a <UART_SetConfig+0x19a>
 800a31c:	231b      	movs	r3, #27
 800a31e:	2220      	movs	r2, #32
 800a320:	189b      	adds	r3, r3, r2
 800a322:	19db      	adds	r3, r3, r7
 800a324:	2200      	movs	r2, #0
 800a326:	701a      	strb	r2, [r3, #0]
 800a328:	e055      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a5c      	ldr	r2, [pc, #368]	@ (800a4a0 <UART_SetConfig+0x310>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d106      	bne.n	800a342 <UART_SetConfig+0x1b2>
 800a334:	231b      	movs	r3, #27
 800a336:	2220      	movs	r2, #32
 800a338:	189b      	adds	r3, r3, r2
 800a33a:	19db      	adds	r3, r3, r7
 800a33c:	2200      	movs	r2, #0
 800a33e:	701a      	strb	r2, [r3, #0]
 800a340:	e049      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a50      	ldr	r2, [pc, #320]	@ (800a488 <UART_SetConfig+0x2f8>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d13e      	bne.n	800a3ca <UART_SetConfig+0x23a>
 800a34c:	4b51      	ldr	r3, [pc, #324]	@ (800a494 <UART_SetConfig+0x304>)
 800a34e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a350:	23c0      	movs	r3, #192	@ 0xc0
 800a352:	011b      	lsls	r3, r3, #4
 800a354:	4013      	ands	r3, r2
 800a356:	22c0      	movs	r2, #192	@ 0xc0
 800a358:	0112      	lsls	r2, r2, #4
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d027      	beq.n	800a3ae <UART_SetConfig+0x21e>
 800a35e:	22c0      	movs	r2, #192	@ 0xc0
 800a360:	0112      	lsls	r2, r2, #4
 800a362:	4293      	cmp	r3, r2
 800a364:	d82a      	bhi.n	800a3bc <UART_SetConfig+0x22c>
 800a366:	2280      	movs	r2, #128	@ 0x80
 800a368:	0112      	lsls	r2, r2, #4
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d011      	beq.n	800a392 <UART_SetConfig+0x202>
 800a36e:	2280      	movs	r2, #128	@ 0x80
 800a370:	0112      	lsls	r2, r2, #4
 800a372:	4293      	cmp	r3, r2
 800a374:	d822      	bhi.n	800a3bc <UART_SetConfig+0x22c>
 800a376:	2b00      	cmp	r3, #0
 800a378:	d004      	beq.n	800a384 <UART_SetConfig+0x1f4>
 800a37a:	2280      	movs	r2, #128	@ 0x80
 800a37c:	00d2      	lsls	r2, r2, #3
 800a37e:	4293      	cmp	r3, r2
 800a380:	d00e      	beq.n	800a3a0 <UART_SetConfig+0x210>
 800a382:	e01b      	b.n	800a3bc <UART_SetConfig+0x22c>
 800a384:	231b      	movs	r3, #27
 800a386:	2220      	movs	r2, #32
 800a388:	189b      	adds	r3, r3, r2
 800a38a:	19db      	adds	r3, r3, r7
 800a38c:	2200      	movs	r2, #0
 800a38e:	701a      	strb	r2, [r3, #0]
 800a390:	e021      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a392:	231b      	movs	r3, #27
 800a394:	2220      	movs	r2, #32
 800a396:	189b      	adds	r3, r3, r2
 800a398:	19db      	adds	r3, r3, r7
 800a39a:	2202      	movs	r2, #2
 800a39c:	701a      	strb	r2, [r3, #0]
 800a39e:	e01a      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a3a0:	231b      	movs	r3, #27
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	189b      	adds	r3, r3, r2
 800a3a6:	19db      	adds	r3, r3, r7
 800a3a8:	2204      	movs	r2, #4
 800a3aa:	701a      	strb	r2, [r3, #0]
 800a3ac:	e013      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a3ae:	231b      	movs	r3, #27
 800a3b0:	2220      	movs	r2, #32
 800a3b2:	189b      	adds	r3, r3, r2
 800a3b4:	19db      	adds	r3, r3, r7
 800a3b6:	2208      	movs	r2, #8
 800a3b8:	701a      	strb	r2, [r3, #0]
 800a3ba:	e00c      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a3bc:	231b      	movs	r3, #27
 800a3be:	2220      	movs	r2, #32
 800a3c0:	189b      	adds	r3, r3, r2
 800a3c2:	19db      	adds	r3, r3, r7
 800a3c4:	2210      	movs	r2, #16
 800a3c6:	701a      	strb	r2, [r3, #0]
 800a3c8:	e005      	b.n	800a3d6 <UART_SetConfig+0x246>
 800a3ca:	231b      	movs	r3, #27
 800a3cc:	2220      	movs	r2, #32
 800a3ce:	189b      	adds	r3, r3, r2
 800a3d0:	19db      	adds	r3, r3, r7
 800a3d2:	2210      	movs	r2, #16
 800a3d4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a2b      	ldr	r2, [pc, #172]	@ (800a488 <UART_SetConfig+0x2f8>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d000      	beq.n	800a3e2 <UART_SetConfig+0x252>
 800a3e0:	e0a9      	b.n	800a536 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a3e2:	231b      	movs	r3, #27
 800a3e4:	2220      	movs	r2, #32
 800a3e6:	189b      	adds	r3, r3, r2
 800a3e8:	19db      	adds	r3, r3, r7
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	2b08      	cmp	r3, #8
 800a3ee:	d015      	beq.n	800a41c <UART_SetConfig+0x28c>
 800a3f0:	dc18      	bgt.n	800a424 <UART_SetConfig+0x294>
 800a3f2:	2b04      	cmp	r3, #4
 800a3f4:	d00d      	beq.n	800a412 <UART_SetConfig+0x282>
 800a3f6:	dc15      	bgt.n	800a424 <UART_SetConfig+0x294>
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d002      	beq.n	800a402 <UART_SetConfig+0x272>
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d005      	beq.n	800a40c <UART_SetConfig+0x27c>
 800a400:	e010      	b.n	800a424 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a402:	f7fe ff07 	bl	8009214 <HAL_RCC_GetPCLK1Freq>
 800a406:	0003      	movs	r3, r0
 800a408:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a40a:	e014      	b.n	800a436 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a40c:	4b25      	ldr	r3, [pc, #148]	@ (800a4a4 <UART_SetConfig+0x314>)
 800a40e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a410:	e011      	b.n	800a436 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a412:	f7fe fe73 	bl	80090fc <HAL_RCC_GetSysClockFreq>
 800a416:	0003      	movs	r3, r0
 800a418:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a41a:	e00c      	b.n	800a436 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a41c:	2380      	movs	r3, #128	@ 0x80
 800a41e:	021b      	lsls	r3, r3, #8
 800a420:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a422:	e008      	b.n	800a436 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a428:	231a      	movs	r3, #26
 800a42a:	2220      	movs	r2, #32
 800a42c:	189b      	adds	r3, r3, r2
 800a42e:	19db      	adds	r3, r3, r7
 800a430:	2201      	movs	r2, #1
 800a432:	701a      	strb	r2, [r3, #0]
        break;
 800a434:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d100      	bne.n	800a43e <UART_SetConfig+0x2ae>
 800a43c:	e14b      	b.n	800a6d6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a440:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a442:	4b19      	ldr	r3, [pc, #100]	@ (800a4a8 <UART_SetConfig+0x318>)
 800a444:	0052      	lsls	r2, r2, #1
 800a446:	5ad3      	ldrh	r3, [r2, r3]
 800a448:	0019      	movs	r1, r3
 800a44a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a44c:	f7f5 fe80 	bl	8000150 <__udivsi3>
 800a450:	0003      	movs	r3, r0
 800a452:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a456:	685a      	ldr	r2, [r3, #4]
 800a458:	0013      	movs	r3, r2
 800a45a:	005b      	lsls	r3, r3, #1
 800a45c:	189b      	adds	r3, r3, r2
 800a45e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a460:	429a      	cmp	r2, r3
 800a462:	d305      	bcc.n	800a470 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a46a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d91d      	bls.n	800a4ac <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800a470:	231a      	movs	r3, #26
 800a472:	2220      	movs	r2, #32
 800a474:	189b      	adds	r3, r3, r2
 800a476:	19db      	adds	r3, r3, r7
 800a478:	2201      	movs	r2, #1
 800a47a:	701a      	strb	r2, [r3, #0]
 800a47c:	e12b      	b.n	800a6d6 <UART_SetConfig+0x546>
 800a47e:	46c0      	nop			@ (mov r8, r8)
 800a480:	cfff69f3 	.word	0xcfff69f3
 800a484:	ffffcfff 	.word	0xffffcfff
 800a488:	40008000 	.word	0x40008000
 800a48c:	11fff4ff 	.word	0x11fff4ff
 800a490:	40013800 	.word	0x40013800
 800a494:	40021000 	.word	0x40021000
 800a498:	40004400 	.word	0x40004400
 800a49c:	40004800 	.word	0x40004800
 800a4a0:	40004c00 	.word	0x40004c00
 800a4a4:	00f42400 	.word	0x00f42400
 800a4a8:	0800ee14 	.word	0x0800ee14
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ae:	61bb      	str	r3, [r7, #24]
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	61fb      	str	r3, [r7, #28]
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4b8:	4b92      	ldr	r3, [pc, #584]	@ (800a704 <UART_SetConfig+0x574>)
 800a4ba:	0052      	lsls	r2, r2, #1
 800a4bc:	5ad3      	ldrh	r3, [r2, r3]
 800a4be:	613b      	str	r3, [r7, #16]
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	617b      	str	r3, [r7, #20]
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	69b8      	ldr	r0, [r7, #24]
 800a4ca:	69f9      	ldr	r1, [r7, #28]
 800a4cc:	f7f6 f82e 	bl	800052c <__aeabi_uldivmod>
 800a4d0:	0002      	movs	r2, r0
 800a4d2:	000b      	movs	r3, r1
 800a4d4:	0e11      	lsrs	r1, r2, #24
 800a4d6:	021d      	lsls	r5, r3, #8
 800a4d8:	430d      	orrs	r5, r1
 800a4da:	0214      	lsls	r4, r2, #8
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	085b      	lsrs	r3, r3, #1
 800a4e2:	60bb      	str	r3, [r7, #8]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	60fb      	str	r3, [r7, #12]
 800a4e8:	68b8      	ldr	r0, [r7, #8]
 800a4ea:	68f9      	ldr	r1, [r7, #12]
 800a4ec:	1900      	adds	r0, r0, r4
 800a4ee:	4169      	adcs	r1, r5
 800a4f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	603b      	str	r3, [r7, #0]
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	607b      	str	r3, [r7, #4]
 800a4fa:	683a      	ldr	r2, [r7, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f7f6 f815 	bl	800052c <__aeabi_uldivmod>
 800a502:	0002      	movs	r2, r0
 800a504:	000b      	movs	r3, r1
 800a506:	0013      	movs	r3, r2
 800a508:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a50a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a50c:	23c0      	movs	r3, #192	@ 0xc0
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	429a      	cmp	r2, r3
 800a512:	d309      	bcc.n	800a528 <UART_SetConfig+0x398>
 800a514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a516:	2380      	movs	r3, #128	@ 0x80
 800a518:	035b      	lsls	r3, r3, #13
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d204      	bcs.n	800a528 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800a51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a524:	60da      	str	r2, [r3, #12]
 800a526:	e0d6      	b.n	800a6d6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800a528:	231a      	movs	r3, #26
 800a52a:	2220      	movs	r2, #32
 800a52c:	189b      	adds	r3, r3, r2
 800a52e:	19db      	adds	r3, r3, r7
 800a530:	2201      	movs	r2, #1
 800a532:	701a      	strb	r2, [r3, #0]
 800a534:	e0cf      	b.n	800a6d6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a538:	69da      	ldr	r2, [r3, #28]
 800a53a:	2380      	movs	r3, #128	@ 0x80
 800a53c:	021b      	lsls	r3, r3, #8
 800a53e:	429a      	cmp	r2, r3
 800a540:	d000      	beq.n	800a544 <UART_SetConfig+0x3b4>
 800a542:	e070      	b.n	800a626 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 800a544:	231b      	movs	r3, #27
 800a546:	2220      	movs	r2, #32
 800a548:	189b      	adds	r3, r3, r2
 800a54a:	19db      	adds	r3, r3, r7
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	2b08      	cmp	r3, #8
 800a550:	d015      	beq.n	800a57e <UART_SetConfig+0x3ee>
 800a552:	dc18      	bgt.n	800a586 <UART_SetConfig+0x3f6>
 800a554:	2b04      	cmp	r3, #4
 800a556:	d00d      	beq.n	800a574 <UART_SetConfig+0x3e4>
 800a558:	dc15      	bgt.n	800a586 <UART_SetConfig+0x3f6>
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <UART_SetConfig+0x3d4>
 800a55e:	2b02      	cmp	r3, #2
 800a560:	d005      	beq.n	800a56e <UART_SetConfig+0x3de>
 800a562:	e010      	b.n	800a586 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a564:	f7fe fe56 	bl	8009214 <HAL_RCC_GetPCLK1Freq>
 800a568:	0003      	movs	r3, r0
 800a56a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a56c:	e014      	b.n	800a598 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a56e:	4b66      	ldr	r3, [pc, #408]	@ (800a708 <UART_SetConfig+0x578>)
 800a570:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a572:	e011      	b.n	800a598 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a574:	f7fe fdc2 	bl	80090fc <HAL_RCC_GetSysClockFreq>
 800a578:	0003      	movs	r3, r0
 800a57a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a57c:	e00c      	b.n	800a598 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a57e:	2380      	movs	r3, #128	@ 0x80
 800a580:	021b      	lsls	r3, r3, #8
 800a582:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a584:	e008      	b.n	800a598 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a586:	2300      	movs	r3, #0
 800a588:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a58a:	231a      	movs	r3, #26
 800a58c:	2220      	movs	r2, #32
 800a58e:	189b      	adds	r3, r3, r2
 800a590:	19db      	adds	r3, r3, r7
 800a592:	2201      	movs	r2, #1
 800a594:	701a      	strb	r2, [r3, #0]
        break;
 800a596:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d100      	bne.n	800a5a0 <UART_SetConfig+0x410>
 800a59e:	e09a      	b.n	800a6d6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5a4:	4b57      	ldr	r3, [pc, #348]	@ (800a704 <UART_SetConfig+0x574>)
 800a5a6:	0052      	lsls	r2, r2, #1
 800a5a8:	5ad3      	ldrh	r3, [r2, r3]
 800a5aa:	0019      	movs	r1, r3
 800a5ac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a5ae:	f7f5 fdcf 	bl	8000150 <__udivsi3>
 800a5b2:	0003      	movs	r3, r0
 800a5b4:	005a      	lsls	r2, r3, #1
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	085b      	lsrs	r3, r3, #1
 800a5bc:	18d2      	adds	r2, r2, r3
 800a5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	0019      	movs	r1, r3
 800a5c4:	0010      	movs	r0, r2
 800a5c6:	f7f5 fdc3 	bl	8000150 <__udivsi3>
 800a5ca:	0003      	movs	r3, r0
 800a5cc:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d0:	2b0f      	cmp	r3, #15
 800a5d2:	d921      	bls.n	800a618 <UART_SetConfig+0x488>
 800a5d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5d6:	2380      	movs	r3, #128	@ 0x80
 800a5d8:	025b      	lsls	r3, r3, #9
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d21c      	bcs.n	800a618 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e0:	b29a      	uxth	r2, r3
 800a5e2:	200e      	movs	r0, #14
 800a5e4:	2420      	movs	r4, #32
 800a5e6:	1903      	adds	r3, r0, r4
 800a5e8:	19db      	adds	r3, r3, r7
 800a5ea:	210f      	movs	r1, #15
 800a5ec:	438a      	bics	r2, r1
 800a5ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f2:	085b      	lsrs	r3, r3, #1
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	2207      	movs	r2, #7
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	b299      	uxth	r1, r3
 800a5fc:	1903      	adds	r3, r0, r4
 800a5fe:	19db      	adds	r3, r3, r7
 800a600:	1902      	adds	r2, r0, r4
 800a602:	19d2      	adds	r2, r2, r7
 800a604:	8812      	ldrh	r2, [r2, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800a60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	1902      	adds	r2, r0, r4
 800a610:	19d2      	adds	r2, r2, r7
 800a612:	8812      	ldrh	r2, [r2, #0]
 800a614:	60da      	str	r2, [r3, #12]
 800a616:	e05e      	b.n	800a6d6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800a618:	231a      	movs	r3, #26
 800a61a:	2220      	movs	r2, #32
 800a61c:	189b      	adds	r3, r3, r2
 800a61e:	19db      	adds	r3, r3, r7
 800a620:	2201      	movs	r2, #1
 800a622:	701a      	strb	r2, [r3, #0]
 800a624:	e057      	b.n	800a6d6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a626:	231b      	movs	r3, #27
 800a628:	2220      	movs	r2, #32
 800a62a:	189b      	adds	r3, r3, r2
 800a62c:	19db      	adds	r3, r3, r7
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	2b08      	cmp	r3, #8
 800a632:	d015      	beq.n	800a660 <UART_SetConfig+0x4d0>
 800a634:	dc18      	bgt.n	800a668 <UART_SetConfig+0x4d8>
 800a636:	2b04      	cmp	r3, #4
 800a638:	d00d      	beq.n	800a656 <UART_SetConfig+0x4c6>
 800a63a:	dc15      	bgt.n	800a668 <UART_SetConfig+0x4d8>
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <UART_SetConfig+0x4b6>
 800a640:	2b02      	cmp	r3, #2
 800a642:	d005      	beq.n	800a650 <UART_SetConfig+0x4c0>
 800a644:	e010      	b.n	800a668 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a646:	f7fe fde5 	bl	8009214 <HAL_RCC_GetPCLK1Freq>
 800a64a:	0003      	movs	r3, r0
 800a64c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a64e:	e014      	b.n	800a67a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a650:	4b2d      	ldr	r3, [pc, #180]	@ (800a708 <UART_SetConfig+0x578>)
 800a652:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a654:	e011      	b.n	800a67a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a656:	f7fe fd51 	bl	80090fc <HAL_RCC_GetSysClockFreq>
 800a65a:	0003      	movs	r3, r0
 800a65c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a65e:	e00c      	b.n	800a67a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a660:	2380      	movs	r3, #128	@ 0x80
 800a662:	021b      	lsls	r3, r3, #8
 800a664:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a666:	e008      	b.n	800a67a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800a668:	2300      	movs	r3, #0
 800a66a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800a66c:	231a      	movs	r3, #26
 800a66e:	2220      	movs	r2, #32
 800a670:	189b      	adds	r3, r3, r2
 800a672:	19db      	adds	r3, r3, r7
 800a674:	2201      	movs	r2, #1
 800a676:	701a      	strb	r2, [r3, #0]
        break;
 800a678:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800a67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d02a      	beq.n	800a6d6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a682:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a684:	4b1f      	ldr	r3, [pc, #124]	@ (800a704 <UART_SetConfig+0x574>)
 800a686:	0052      	lsls	r2, r2, #1
 800a688:	5ad3      	ldrh	r3, [r2, r3]
 800a68a:	0019      	movs	r1, r3
 800a68c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a68e:	f7f5 fd5f 	bl	8000150 <__udivsi3>
 800a692:	0003      	movs	r3, r0
 800a694:	001a      	movs	r2, r3
 800a696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	085b      	lsrs	r3, r3, #1
 800a69c:	18d2      	adds	r2, r2, r3
 800a69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	0019      	movs	r1, r3
 800a6a4:	0010      	movs	r0, r2
 800a6a6:	f7f5 fd53 	bl	8000150 <__udivsi3>
 800a6aa:	0003      	movs	r3, r0
 800a6ac:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b0:	2b0f      	cmp	r3, #15
 800a6b2:	d90a      	bls.n	800a6ca <UART_SetConfig+0x53a>
 800a6b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6b6:	2380      	movs	r3, #128	@ 0x80
 800a6b8:	025b      	lsls	r3, r3, #9
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d205      	bcs.n	800a6ca <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	60da      	str	r2, [r3, #12]
 800a6c8:	e005      	b.n	800a6d6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800a6ca:	231a      	movs	r3, #26
 800a6cc:	2220      	movs	r2, #32
 800a6ce:	189b      	adds	r3, r3, r2
 800a6d0:	19db      	adds	r3, r3, r7
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d8:	226a      	movs	r2, #106	@ 0x6a
 800a6da:	2101      	movs	r1, #1
 800a6dc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800a6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e0:	2268      	movs	r2, #104	@ 0x68
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a6f2:	231a      	movs	r3, #26
 800a6f4:	2220      	movs	r2, #32
 800a6f6:	189b      	adds	r3, r3, r2
 800a6f8:	19db      	adds	r3, r3, r7
 800a6fa:	781b      	ldrb	r3, [r3, #0]
}
 800a6fc:	0018      	movs	r0, r3
 800a6fe:	46bd      	mov	sp, r7
 800a700:	b010      	add	sp, #64	@ 0x40
 800a702:	bdb0      	pop	{r4, r5, r7, pc}
 800a704:	0800ee14 	.word	0x0800ee14
 800a708:	00f42400 	.word	0x00f42400

0800a70c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a718:	2208      	movs	r2, #8
 800a71a:	4013      	ands	r3, r2
 800a71c:	d00b      	beq.n	800a736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	4a4a      	ldr	r2, [pc, #296]	@ (800a850 <UART_AdvFeatureConfig+0x144>)
 800a726:	4013      	ands	r3, r2
 800a728:	0019      	movs	r1, r3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	430a      	orrs	r2, r1
 800a734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a73a:	2201      	movs	r2, #1
 800a73c:	4013      	ands	r3, r2
 800a73e:	d00b      	beq.n	800a758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	4a43      	ldr	r2, [pc, #268]	@ (800a854 <UART_AdvFeatureConfig+0x148>)
 800a748:	4013      	ands	r3, r2
 800a74a:	0019      	movs	r1, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	430a      	orrs	r2, r1
 800a756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a75c:	2202      	movs	r2, #2
 800a75e:	4013      	ands	r3, r2
 800a760:	d00b      	beq.n	800a77a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	4a3b      	ldr	r2, [pc, #236]	@ (800a858 <UART_AdvFeatureConfig+0x14c>)
 800a76a:	4013      	ands	r3, r2
 800a76c:	0019      	movs	r1, r3
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	430a      	orrs	r2, r1
 800a778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a77e:	2204      	movs	r2, #4
 800a780:	4013      	ands	r3, r2
 800a782:	d00b      	beq.n	800a79c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	4a34      	ldr	r2, [pc, #208]	@ (800a85c <UART_AdvFeatureConfig+0x150>)
 800a78c:	4013      	ands	r3, r2
 800a78e:	0019      	movs	r1, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	430a      	orrs	r2, r1
 800a79a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7a0:	2210      	movs	r2, #16
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	d00b      	beq.n	800a7be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	4a2c      	ldr	r2, [pc, #176]	@ (800a860 <UART_AdvFeatureConfig+0x154>)
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	0019      	movs	r1, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	430a      	orrs	r2, r1
 800a7bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	d00b      	beq.n	800a7e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	4a25      	ldr	r2, [pc, #148]	@ (800a864 <UART_AdvFeatureConfig+0x158>)
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	0019      	movs	r1, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	430a      	orrs	r2, r1
 800a7de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7e4:	2240      	movs	r2, #64	@ 0x40
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	d01d      	beq.n	800a826 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a868 <UART_AdvFeatureConfig+0x15c>)
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	0019      	movs	r1, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	430a      	orrs	r2, r1
 800a800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a806:	2380      	movs	r3, #128	@ 0x80
 800a808:	035b      	lsls	r3, r3, #13
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d10b      	bne.n	800a826 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	4a15      	ldr	r2, [pc, #84]	@ (800a86c <UART_AdvFeatureConfig+0x160>)
 800a816:	4013      	ands	r3, r2
 800a818:	0019      	movs	r1, r3
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	430a      	orrs	r2, r1
 800a824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a82a:	2280      	movs	r2, #128	@ 0x80
 800a82c:	4013      	ands	r3, r2
 800a82e:	d00b      	beq.n	800a848 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	4a0e      	ldr	r2, [pc, #56]	@ (800a870 <UART_AdvFeatureConfig+0x164>)
 800a838:	4013      	ands	r3, r2
 800a83a:	0019      	movs	r1, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	430a      	orrs	r2, r1
 800a846:	605a      	str	r2, [r3, #4]
  }
}
 800a848:	46c0      	nop			@ (mov r8, r8)
 800a84a:	46bd      	mov	sp, r7
 800a84c:	b002      	add	sp, #8
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	ffff7fff 	.word	0xffff7fff
 800a854:	fffdffff 	.word	0xfffdffff
 800a858:	fffeffff 	.word	0xfffeffff
 800a85c:	fffbffff 	.word	0xfffbffff
 800a860:	ffffefff 	.word	0xffffefff
 800a864:	ffffdfff 	.word	0xffffdfff
 800a868:	ffefffff 	.word	0xffefffff
 800a86c:	ff9fffff 	.word	0xff9fffff
 800a870:	fff7ffff 	.word	0xfff7ffff

0800a874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b092      	sub	sp, #72	@ 0x48
 800a878:	af02      	add	r7, sp, #8
 800a87a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2290      	movs	r2, #144	@ 0x90
 800a880:	2100      	movs	r1, #0
 800a882:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a884:	f7fc feb0 	bl	80075e8 <HAL_GetTick>
 800a888:	0003      	movs	r3, r0
 800a88a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2208      	movs	r2, #8
 800a894:	4013      	ands	r3, r2
 800a896:	2b08      	cmp	r3, #8
 800a898:	d12d      	bne.n	800a8f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a89a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a89c:	2280      	movs	r2, #128	@ 0x80
 800a89e:	0391      	lsls	r1, r2, #14
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	4a47      	ldr	r2, [pc, #284]	@ (800a9c0 <UART_CheckIdleState+0x14c>)
 800a8a4:	9200      	str	r2, [sp, #0]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f000 f88e 	bl	800a9c8 <UART_WaitOnFlagUntilTimeout>
 800a8ac:	1e03      	subs	r3, r0, #0
 800a8ae:	d022      	beq.n	800a8f6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8b0:	f3ef 8310 	mrs	r3, PRIMASK
 800a8b4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a8b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c0:	f383 8810 	msr	PRIMASK, r3
}
 800a8c4:	46c0      	nop			@ (mov r8, r8)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2180      	movs	r1, #128	@ 0x80
 800a8d2:	438a      	bics	r2, r1
 800a8d4:	601a      	str	r2, [r3, #0]
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8dc:	f383 8810 	msr	PRIMASK, r3
}
 800a8e0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2288      	movs	r2, #136	@ 0x88
 800a8e6:	2120      	movs	r1, #32
 800a8e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2284      	movs	r2, #132	@ 0x84
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e060      	b.n	800a9b8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2204      	movs	r2, #4
 800a8fe:	4013      	ands	r3, r2
 800a900:	2b04      	cmp	r3, #4
 800a902:	d146      	bne.n	800a992 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a906:	2280      	movs	r2, #128	@ 0x80
 800a908:	03d1      	lsls	r1, r2, #15
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	4a2c      	ldr	r2, [pc, #176]	@ (800a9c0 <UART_CheckIdleState+0x14c>)
 800a90e:	9200      	str	r2, [sp, #0]
 800a910:	2200      	movs	r2, #0
 800a912:	f000 f859 	bl	800a9c8 <UART_WaitOnFlagUntilTimeout>
 800a916:	1e03      	subs	r3, r0, #0
 800a918:	d03b      	beq.n	800a992 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a91a:	f3ef 8310 	mrs	r3, PRIMASK
 800a91e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a920:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a922:	637b      	str	r3, [r7, #52]	@ 0x34
 800a924:	2301      	movs	r3, #1
 800a926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	f383 8810 	msr	PRIMASK, r3
}
 800a92e:	46c0      	nop			@ (mov r8, r8)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4922      	ldr	r1, [pc, #136]	@ (800a9c4 <UART_CheckIdleState+0x150>)
 800a93c:	400a      	ands	r2, r1
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a942:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f383 8810 	msr	PRIMASK, r3
}
 800a94a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a94c:	f3ef 8310 	mrs	r3, PRIMASK
 800a950:	61bb      	str	r3, [r7, #24]
  return(result);
 800a952:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a954:	633b      	str	r3, [r7, #48]	@ 0x30
 800a956:	2301      	movs	r3, #1
 800a958:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	f383 8810 	msr	PRIMASK, r3
}
 800a960:	46c0      	nop			@ (mov r8, r8)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	689a      	ldr	r2, [r3, #8]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2101      	movs	r1, #1
 800a96e:	438a      	bics	r2, r1
 800a970:	609a      	str	r2, [r3, #8]
 800a972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a974:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	f383 8810 	msr	PRIMASK, r3
}
 800a97c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	228c      	movs	r2, #140	@ 0x8c
 800a982:	2120      	movs	r1, #32
 800a984:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2284      	movs	r2, #132	@ 0x84
 800a98a:	2100      	movs	r1, #0
 800a98c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e012      	b.n	800a9b8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2288      	movs	r2, #136	@ 0x88
 800a996:	2120      	movs	r1, #32
 800a998:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	228c      	movs	r2, #140	@ 0x8c
 800a99e:	2120      	movs	r1, #32
 800a9a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2284      	movs	r2, #132	@ 0x84
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	0018      	movs	r0, r3
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	b010      	add	sp, #64	@ 0x40
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	01ffffff 	.word	0x01ffffff
 800a9c4:	fffffedf 	.word	0xfffffedf

0800a9c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b084      	sub	sp, #16
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	603b      	str	r3, [r7, #0]
 800a9d4:	1dfb      	adds	r3, r7, #7
 800a9d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9d8:	e051      	b.n	800aa7e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	d04e      	beq.n	800aa7e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9e0:	f7fc fe02 	bl	80075e8 <HAL_GetTick>
 800a9e4:	0002      	movs	r2, r0
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	69ba      	ldr	r2, [r7, #24]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d302      	bcc.n	800a9f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e051      	b.n	800aa9e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2204      	movs	r2, #4
 800aa02:	4013      	ands	r3, r2
 800aa04:	d03b      	beq.n	800aa7e <UART_WaitOnFlagUntilTimeout+0xb6>
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	2b80      	cmp	r3, #128	@ 0x80
 800aa0a:	d038      	beq.n	800aa7e <UART_WaitOnFlagUntilTimeout+0xb6>
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	2b40      	cmp	r3, #64	@ 0x40
 800aa10:	d035      	beq.n	800aa7e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	2208      	movs	r2, #8
 800aa1a:	4013      	ands	r3, r2
 800aa1c:	2b08      	cmp	r3, #8
 800aa1e:	d111      	bne.n	800aa44 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2208      	movs	r2, #8
 800aa26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	0018      	movs	r0, r3
 800aa2c:	f000 f83c 	bl	800aaa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2290      	movs	r2, #144	@ 0x90
 800aa34:	2108      	movs	r1, #8
 800aa36:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2284      	movs	r2, #132	@ 0x84
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	e02c      	b.n	800aa9e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	69da      	ldr	r2, [r3, #28]
 800aa4a:	2380      	movs	r3, #128	@ 0x80
 800aa4c:	011b      	lsls	r3, r3, #4
 800aa4e:	401a      	ands	r2, r3
 800aa50:	2380      	movs	r3, #128	@ 0x80
 800aa52:	011b      	lsls	r3, r3, #4
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d112      	bne.n	800aa7e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2280      	movs	r2, #128	@ 0x80
 800aa5e:	0112      	lsls	r2, r2, #4
 800aa60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	0018      	movs	r0, r3
 800aa66:	f000 f81f 	bl	800aaa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2290      	movs	r2, #144	@ 0x90
 800aa6e:	2120      	movs	r1, #32
 800aa70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2284      	movs	r2, #132	@ 0x84
 800aa76:	2100      	movs	r1, #0
 800aa78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800aa7a:	2303      	movs	r3, #3
 800aa7c:	e00f      	b.n	800aa9e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	69db      	ldr	r3, [r3, #28]
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	4013      	ands	r3, r2
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	425a      	negs	r2, r3
 800aa8e:	4153      	adcs	r3, r2
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	001a      	movs	r2, r3
 800aa94:	1dfb      	adds	r3, r7, #7
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d09e      	beq.n	800a9da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	0018      	movs	r0, r3
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	b004      	add	sp, #16
 800aaa4:	bd80      	pop	{r7, pc}
	...

0800aaa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08e      	sub	sp, #56	@ 0x38
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aab0:	f3ef 8310 	mrs	r3, PRIMASK
 800aab4:	617b      	str	r3, [r7, #20]
  return(result);
 800aab6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aab8:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaba:	2301      	movs	r3, #1
 800aabc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aabe:	69bb      	ldr	r3, [r7, #24]
 800aac0:	f383 8810 	msr	PRIMASK, r3
}
 800aac4:	46c0      	nop			@ (mov r8, r8)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4926      	ldr	r1, [pc, #152]	@ (800ab6c <UART_EndRxTransfer+0xc4>)
 800aad2:	400a      	ands	r2, r1
 800aad4:	601a      	str	r2, [r3, #0]
 800aad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	f383 8810 	msr	PRIMASK, r3
}
 800aae0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aae2:	f3ef 8310 	mrs	r3, PRIMASK
 800aae6:	623b      	str	r3, [r7, #32]
  return(result);
 800aae8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aaea:	633b      	str	r3, [r7, #48]	@ 0x30
 800aaec:	2301      	movs	r3, #1
 800aaee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf2:	f383 8810 	msr	PRIMASK, r3
}
 800aaf6:	46c0      	nop			@ (mov r8, r8)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	689a      	ldr	r2, [r3, #8]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	491b      	ldr	r1, [pc, #108]	@ (800ab70 <UART_EndRxTransfer+0xc8>)
 800ab04:	400a      	ands	r2, r1
 800ab06:	609a      	str	r2, [r3, #8]
 800ab08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0e:	f383 8810 	msr	PRIMASK, r3
}
 800ab12:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d118      	bne.n	800ab4e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab1c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab20:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab22:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab26:	2301      	movs	r3, #1
 800ab28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f383 8810 	msr	PRIMASK, r3
}
 800ab30:	46c0      	nop			@ (mov r8, r8)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	2110      	movs	r1, #16
 800ab3e:	438a      	bics	r2, r1
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	f383 8810 	msr	PRIMASK, r3
}
 800ab4c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	228c      	movs	r2, #140	@ 0x8c
 800ab52:	2120      	movs	r1, #32
 800ab54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ab62:	46c0      	nop			@ (mov r8, r8)
 800ab64:	46bd      	mov	sp, r7
 800ab66:	b00e      	add	sp, #56	@ 0x38
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	46c0      	nop			@ (mov r8, r8)
 800ab6c:	fffffedf 	.word	0xfffffedf
 800ab70:	effffffe 	.word	0xeffffffe

0800ab74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2284      	movs	r2, #132	@ 0x84
 800ab80:	5c9b      	ldrb	r3, [r3, r2]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d101      	bne.n	800ab8a <HAL_UARTEx_DisableFifoMode+0x16>
 800ab86:	2302      	movs	r3, #2
 800ab88:	e027      	b.n	800abda <HAL_UARTEx_DisableFifoMode+0x66>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2284      	movs	r2, #132	@ 0x84
 800ab8e:	2101      	movs	r1, #1
 800ab90:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2288      	movs	r2, #136	@ 0x88
 800ab96:	2124      	movs	r1, #36	@ 0x24
 800ab98:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2101      	movs	r1, #1
 800abae:	438a      	bics	r2, r1
 800abb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	4a0b      	ldr	r2, [pc, #44]	@ (800abe4 <HAL_UARTEx_DisableFifoMode+0x70>)
 800abb6:	4013      	ands	r3, r2
 800abb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2288      	movs	r2, #136	@ 0x88
 800abcc:	2120      	movs	r1, #32
 800abce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2284      	movs	r2, #132	@ 0x84
 800abd4:	2100      	movs	r1, #0
 800abd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	0018      	movs	r0, r3
 800abdc:	46bd      	mov	sp, r7
 800abde:	b004      	add	sp, #16
 800abe0:	bd80      	pop	{r7, pc}
 800abe2:	46c0      	nop			@ (mov r8, r8)
 800abe4:	dfffffff 	.word	0xdfffffff

0800abe8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2284      	movs	r2, #132	@ 0x84
 800abf6:	5c9b      	ldrb	r3, [r3, r2]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d101      	bne.n	800ac00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800abfc:	2302      	movs	r3, #2
 800abfe:	e02e      	b.n	800ac5e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2284      	movs	r2, #132	@ 0x84
 800ac04:	2101      	movs	r1, #1
 800ac06:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2288      	movs	r2, #136	@ 0x88
 800ac0c:	2124      	movs	r1, #36	@ 0x24
 800ac0e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2101      	movs	r1, #1
 800ac24:	438a      	bics	r2, r1
 800ac26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	00db      	lsls	r3, r3, #3
 800ac30:	08d9      	lsrs	r1, r3, #3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	430a      	orrs	r2, r1
 800ac3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	0018      	movs	r0, r3
 800ac40:	f000 f854 	bl	800acec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2288      	movs	r2, #136	@ 0x88
 800ac50:	2120      	movs	r1, #32
 800ac52:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2284      	movs	r2, #132	@ 0x84
 800ac58:	2100      	movs	r1, #0
 800ac5a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac5c:	2300      	movs	r3, #0
}
 800ac5e:	0018      	movs	r0, r3
 800ac60:	46bd      	mov	sp, r7
 800ac62:	b004      	add	sp, #16
 800ac64:	bd80      	pop	{r7, pc}
	...

0800ac68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2284      	movs	r2, #132	@ 0x84
 800ac76:	5c9b      	ldrb	r3, [r3, r2]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d101      	bne.n	800ac80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	e02f      	b.n	800ace0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2284      	movs	r2, #132	@ 0x84
 800ac84:	2101      	movs	r1, #1
 800ac86:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2288      	movs	r2, #136	@ 0x88
 800ac8c:	2124      	movs	r1, #36	@ 0x24
 800ac8e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2101      	movs	r1, #1
 800aca4:	438a      	bics	r2, r1
 800aca6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	4a0e      	ldr	r2, [pc, #56]	@ (800ace8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800acb0:	4013      	ands	r3, r2
 800acb2:	0019      	movs	r1, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	683a      	ldr	r2, [r7, #0]
 800acba:	430a      	orrs	r2, r1
 800acbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	0018      	movs	r0, r3
 800acc2:	f000 f813 	bl	800acec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2288      	movs	r2, #136	@ 0x88
 800acd2:	2120      	movs	r1, #32
 800acd4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2284      	movs	r2, #132	@ 0x84
 800acda:	2100      	movs	r1, #0
 800acdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	0018      	movs	r0, r3
 800ace2:	46bd      	mov	sp, r7
 800ace4:	b004      	add	sp, #16
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	f1ffffff 	.word	0xf1ffffff

0800acec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800acec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d108      	bne.n	800ad0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	226a      	movs	r2, #106	@ 0x6a
 800ad00:	2101      	movs	r1, #1
 800ad02:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2268      	movs	r2, #104	@ 0x68
 800ad08:	2101      	movs	r1, #1
 800ad0a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad0c:	e043      	b.n	800ad96 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad0e:	260f      	movs	r6, #15
 800ad10:	19bb      	adds	r3, r7, r6
 800ad12:	2208      	movs	r2, #8
 800ad14:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad16:	200e      	movs	r0, #14
 800ad18:	183b      	adds	r3, r7, r0
 800ad1a:	2208      	movs	r2, #8
 800ad1c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	0e5b      	lsrs	r3, r3, #25
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	240d      	movs	r4, #13
 800ad2a:	193b      	adds	r3, r7, r4
 800ad2c:	2107      	movs	r1, #7
 800ad2e:	400a      	ands	r2, r1
 800ad30:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	0f5b      	lsrs	r3, r3, #29
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	250c      	movs	r5, #12
 800ad3e:	197b      	adds	r3, r7, r5
 800ad40:	2107      	movs	r1, #7
 800ad42:	400a      	ands	r2, r1
 800ad44:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad46:	183b      	adds	r3, r7, r0
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	197a      	adds	r2, r7, r5
 800ad4c:	7812      	ldrb	r2, [r2, #0]
 800ad4e:	4914      	ldr	r1, [pc, #80]	@ (800ada0 <UARTEx_SetNbDataToProcess+0xb4>)
 800ad50:	5c8a      	ldrb	r2, [r1, r2]
 800ad52:	435a      	muls	r2, r3
 800ad54:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad56:	197b      	adds	r3, r7, r5
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	4a12      	ldr	r2, [pc, #72]	@ (800ada4 <UARTEx_SetNbDataToProcess+0xb8>)
 800ad5c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad5e:	0019      	movs	r1, r3
 800ad60:	f7f5 fa80 	bl	8000264 <__divsi3>
 800ad64:	0003      	movs	r3, r0
 800ad66:	b299      	uxth	r1, r3
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	226a      	movs	r2, #106	@ 0x6a
 800ad6c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad6e:	19bb      	adds	r3, r7, r6
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	193a      	adds	r2, r7, r4
 800ad74:	7812      	ldrb	r2, [r2, #0]
 800ad76:	490a      	ldr	r1, [pc, #40]	@ (800ada0 <UARTEx_SetNbDataToProcess+0xb4>)
 800ad78:	5c8a      	ldrb	r2, [r1, r2]
 800ad7a:	435a      	muls	r2, r3
 800ad7c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad7e:	193b      	adds	r3, r7, r4
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	4a08      	ldr	r2, [pc, #32]	@ (800ada4 <UARTEx_SetNbDataToProcess+0xb8>)
 800ad84:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad86:	0019      	movs	r1, r3
 800ad88:	f7f5 fa6c 	bl	8000264 <__divsi3>
 800ad8c:	0003      	movs	r3, r0
 800ad8e:	b299      	uxth	r1, r3
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2268      	movs	r2, #104	@ 0x68
 800ad94:	5299      	strh	r1, [r3, r2]
}
 800ad96:	46c0      	nop			@ (mov r8, r8)
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	b005      	add	sp, #20
 800ad9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad9e:	46c0      	nop			@ (mov r8, r8)
 800ada0:	0800ee2c 	.word	0x0800ee2c
 800ada4:	0800ee34 	.word	0x0800ee34

0800ada8 <__cvt>:
 800ada8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adaa:	001f      	movs	r7, r3
 800adac:	2300      	movs	r3, #0
 800adae:	0016      	movs	r6, r2
 800adb0:	b08b      	sub	sp, #44	@ 0x2c
 800adb2:	429f      	cmp	r7, r3
 800adb4:	da04      	bge.n	800adc0 <__cvt+0x18>
 800adb6:	2180      	movs	r1, #128	@ 0x80
 800adb8:	0609      	lsls	r1, r1, #24
 800adba:	187b      	adds	r3, r7, r1
 800adbc:	001f      	movs	r7, r3
 800adbe:	232d      	movs	r3, #45	@ 0x2d
 800adc0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800adc2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800adc4:	7013      	strb	r3, [r2, #0]
 800adc6:	2320      	movs	r3, #32
 800adc8:	2203      	movs	r2, #3
 800adca:	439d      	bics	r5, r3
 800adcc:	2d46      	cmp	r5, #70	@ 0x46
 800adce:	d007      	beq.n	800ade0 <__cvt+0x38>
 800add0:	002b      	movs	r3, r5
 800add2:	3b45      	subs	r3, #69	@ 0x45
 800add4:	4259      	negs	r1, r3
 800add6:	414b      	adcs	r3, r1
 800add8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800adda:	3a01      	subs	r2, #1
 800addc:	18cb      	adds	r3, r1, r3
 800adde:	9310      	str	r3, [sp, #64]	@ 0x40
 800ade0:	ab09      	add	r3, sp, #36	@ 0x24
 800ade2:	9304      	str	r3, [sp, #16]
 800ade4:	ab08      	add	r3, sp, #32
 800ade6:	9303      	str	r3, [sp, #12]
 800ade8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800adea:	9200      	str	r2, [sp, #0]
 800adec:	9302      	str	r3, [sp, #8]
 800adee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800adf0:	0032      	movs	r2, r6
 800adf2:	9301      	str	r3, [sp, #4]
 800adf4:	003b      	movs	r3, r7
 800adf6:	f000 ff5d 	bl	800bcb4 <_dtoa_r>
 800adfa:	0004      	movs	r4, r0
 800adfc:	2d47      	cmp	r5, #71	@ 0x47
 800adfe:	d11b      	bne.n	800ae38 <__cvt+0x90>
 800ae00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae02:	07db      	lsls	r3, r3, #31
 800ae04:	d511      	bpl.n	800ae2a <__cvt+0x82>
 800ae06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ae08:	18c3      	adds	r3, r0, r3
 800ae0a:	9307      	str	r3, [sp, #28]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2300      	movs	r3, #0
 800ae10:	0030      	movs	r0, r6
 800ae12:	0039      	movs	r1, r7
 800ae14:	f7f5 fb22 	bl	800045c <__aeabi_dcmpeq>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d001      	beq.n	800ae20 <__cvt+0x78>
 800ae1c:	9b07      	ldr	r3, [sp, #28]
 800ae1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae20:	2230      	movs	r2, #48	@ 0x30
 800ae22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae24:	9907      	ldr	r1, [sp, #28]
 800ae26:	428b      	cmp	r3, r1
 800ae28:	d320      	bcc.n	800ae6c <__cvt+0xc4>
 800ae2a:	0020      	movs	r0, r4
 800ae2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae2e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ae30:	1b1b      	subs	r3, r3, r4
 800ae32:	6013      	str	r3, [r2, #0]
 800ae34:	b00b      	add	sp, #44	@ 0x2c
 800ae36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ae3a:	18c3      	adds	r3, r0, r3
 800ae3c:	9307      	str	r3, [sp, #28]
 800ae3e:	2d46      	cmp	r5, #70	@ 0x46
 800ae40:	d1e4      	bne.n	800ae0c <__cvt+0x64>
 800ae42:	7803      	ldrb	r3, [r0, #0]
 800ae44:	2b30      	cmp	r3, #48	@ 0x30
 800ae46:	d10c      	bne.n	800ae62 <__cvt+0xba>
 800ae48:	2200      	movs	r2, #0
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	0030      	movs	r0, r6
 800ae4e:	0039      	movs	r1, r7
 800ae50:	f7f5 fb04 	bl	800045c <__aeabi_dcmpeq>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d104      	bne.n	800ae62 <__cvt+0xba>
 800ae58:	2301      	movs	r3, #1
 800ae5a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ae5c:	1a9b      	subs	r3, r3, r2
 800ae5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ae60:	6013      	str	r3, [r2, #0]
 800ae62:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ae64:	9a07      	ldr	r2, [sp, #28]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	18d3      	adds	r3, r2, r3
 800ae6a:	e7ce      	b.n	800ae0a <__cvt+0x62>
 800ae6c:	1c59      	adds	r1, r3, #1
 800ae6e:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae70:	701a      	strb	r2, [r3, #0]
 800ae72:	e7d6      	b.n	800ae22 <__cvt+0x7a>

0800ae74 <__exponent>:
 800ae74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae76:	232b      	movs	r3, #43	@ 0x2b
 800ae78:	b085      	sub	sp, #20
 800ae7a:	0005      	movs	r5, r0
 800ae7c:	1e0c      	subs	r4, r1, #0
 800ae7e:	7002      	strb	r2, [r0, #0]
 800ae80:	da01      	bge.n	800ae86 <__exponent+0x12>
 800ae82:	424c      	negs	r4, r1
 800ae84:	3302      	adds	r3, #2
 800ae86:	706b      	strb	r3, [r5, #1]
 800ae88:	2c09      	cmp	r4, #9
 800ae8a:	dd2c      	ble.n	800aee6 <__exponent+0x72>
 800ae8c:	ab02      	add	r3, sp, #8
 800ae8e:	1dde      	adds	r6, r3, #7
 800ae90:	0020      	movs	r0, r4
 800ae92:	210a      	movs	r1, #10
 800ae94:	f7f5 facc 	bl	8000430 <__aeabi_idivmod>
 800ae98:	0037      	movs	r7, r6
 800ae9a:	3130      	adds	r1, #48	@ 0x30
 800ae9c:	3e01      	subs	r6, #1
 800ae9e:	0020      	movs	r0, r4
 800aea0:	7031      	strb	r1, [r6, #0]
 800aea2:	210a      	movs	r1, #10
 800aea4:	9401      	str	r4, [sp, #4]
 800aea6:	f7f5 f9dd 	bl	8000264 <__divsi3>
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	0004      	movs	r4, r0
 800aeae:	2b63      	cmp	r3, #99	@ 0x63
 800aeb0:	dcee      	bgt.n	800ae90 <__exponent+0x1c>
 800aeb2:	1eba      	subs	r2, r7, #2
 800aeb4:	1ca8      	adds	r0, r5, #2
 800aeb6:	0001      	movs	r1, r0
 800aeb8:	0013      	movs	r3, r2
 800aeba:	3430      	adds	r4, #48	@ 0x30
 800aebc:	7014      	strb	r4, [r2, #0]
 800aebe:	ac02      	add	r4, sp, #8
 800aec0:	3407      	adds	r4, #7
 800aec2:	429c      	cmp	r4, r3
 800aec4:	d80a      	bhi.n	800aedc <__exponent+0x68>
 800aec6:	2300      	movs	r3, #0
 800aec8:	4294      	cmp	r4, r2
 800aeca:	d303      	bcc.n	800aed4 <__exponent+0x60>
 800aecc:	3309      	adds	r3, #9
 800aece:	aa02      	add	r2, sp, #8
 800aed0:	189b      	adds	r3, r3, r2
 800aed2:	1bdb      	subs	r3, r3, r7
 800aed4:	18c0      	adds	r0, r0, r3
 800aed6:	1b40      	subs	r0, r0, r5
 800aed8:	b005      	add	sp, #20
 800aeda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aedc:	781c      	ldrb	r4, [r3, #0]
 800aede:	3301      	adds	r3, #1
 800aee0:	700c      	strb	r4, [r1, #0]
 800aee2:	3101      	adds	r1, #1
 800aee4:	e7eb      	b.n	800aebe <__exponent+0x4a>
 800aee6:	2330      	movs	r3, #48	@ 0x30
 800aee8:	18e4      	adds	r4, r4, r3
 800aeea:	70ab      	strb	r3, [r5, #2]
 800aeec:	1d28      	adds	r0, r5, #4
 800aeee:	70ec      	strb	r4, [r5, #3]
 800aef0:	e7f1      	b.n	800aed6 <__exponent+0x62>
	...

0800aef4 <_printf_float>:
 800aef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aef6:	b097      	sub	sp, #92	@ 0x5c
 800aef8:	000d      	movs	r5, r1
 800aefa:	920a      	str	r2, [sp, #40]	@ 0x28
 800aefc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800aefe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af00:	9009      	str	r0, [sp, #36]	@ 0x24
 800af02:	f000 fe09 	bl	800bb18 <_localeconv_r>
 800af06:	6803      	ldr	r3, [r0, #0]
 800af08:	0018      	movs	r0, r3
 800af0a:	930d      	str	r3, [sp, #52]	@ 0x34
 800af0c:	f7f5 f904 	bl	8000118 <strlen>
 800af10:	2300      	movs	r3, #0
 800af12:	900f      	str	r0, [sp, #60]	@ 0x3c
 800af14:	9314      	str	r3, [sp, #80]	@ 0x50
 800af16:	7e2b      	ldrb	r3, [r5, #24]
 800af18:	2207      	movs	r2, #7
 800af1a:	930c      	str	r3, [sp, #48]	@ 0x30
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	930e      	str	r3, [sp, #56]	@ 0x38
 800af20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800af22:	6823      	ldr	r3, [r4, #0]
 800af24:	05c9      	lsls	r1, r1, #23
 800af26:	d545      	bpl.n	800afb4 <_printf_float+0xc0>
 800af28:	189b      	adds	r3, r3, r2
 800af2a:	4393      	bics	r3, r2
 800af2c:	001a      	movs	r2, r3
 800af2e:	3208      	adds	r2, #8
 800af30:	6022      	str	r2, [r4, #0]
 800af32:	2201      	movs	r2, #1
 800af34:	681e      	ldr	r6, [r3, #0]
 800af36:	685f      	ldr	r7, [r3, #4]
 800af38:	007b      	lsls	r3, r7, #1
 800af3a:	085b      	lsrs	r3, r3, #1
 800af3c:	9311      	str	r3, [sp, #68]	@ 0x44
 800af3e:	9610      	str	r6, [sp, #64]	@ 0x40
 800af40:	64ae      	str	r6, [r5, #72]	@ 0x48
 800af42:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800af44:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800af46:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800af48:	4ba7      	ldr	r3, [pc, #668]	@ (800b1e8 <_printf_float+0x2f4>)
 800af4a:	4252      	negs	r2, r2
 800af4c:	f7f8 fb16 	bl	800357c <__aeabi_dcmpun>
 800af50:	2800      	cmp	r0, #0
 800af52:	d131      	bne.n	800afb8 <_printf_float+0xc4>
 800af54:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800af56:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800af58:	2201      	movs	r2, #1
 800af5a:	4ba3      	ldr	r3, [pc, #652]	@ (800b1e8 <_printf_float+0x2f4>)
 800af5c:	4252      	negs	r2, r2
 800af5e:	f7f5 fa8d 	bl	800047c <__aeabi_dcmple>
 800af62:	2800      	cmp	r0, #0
 800af64:	d128      	bne.n	800afb8 <_printf_float+0xc4>
 800af66:	2200      	movs	r2, #0
 800af68:	2300      	movs	r3, #0
 800af6a:	0030      	movs	r0, r6
 800af6c:	0039      	movs	r1, r7
 800af6e:	f7f5 fa7b 	bl	8000468 <__aeabi_dcmplt>
 800af72:	2800      	cmp	r0, #0
 800af74:	d003      	beq.n	800af7e <_printf_float+0x8a>
 800af76:	002b      	movs	r3, r5
 800af78:	222d      	movs	r2, #45	@ 0x2d
 800af7a:	3343      	adds	r3, #67	@ 0x43
 800af7c:	701a      	strb	r2, [r3, #0]
 800af7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af80:	4f9a      	ldr	r7, [pc, #616]	@ (800b1ec <_printf_float+0x2f8>)
 800af82:	2b47      	cmp	r3, #71	@ 0x47
 800af84:	d800      	bhi.n	800af88 <_printf_float+0x94>
 800af86:	4f9a      	ldr	r7, [pc, #616]	@ (800b1f0 <_printf_float+0x2fc>)
 800af88:	2303      	movs	r3, #3
 800af8a:	2400      	movs	r4, #0
 800af8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af8e:	612b      	str	r3, [r5, #16]
 800af90:	3301      	adds	r3, #1
 800af92:	439a      	bics	r2, r3
 800af94:	602a      	str	r2, [r5, #0]
 800af96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af98:	0029      	movs	r1, r5
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afa0:	aa15      	add	r2, sp, #84	@ 0x54
 800afa2:	f000 f9e5 	bl	800b370 <_printf_common>
 800afa6:	3001      	adds	r0, #1
 800afa8:	d000      	beq.n	800afac <_printf_float+0xb8>
 800afaa:	e09e      	b.n	800b0ea <_printf_float+0x1f6>
 800afac:	2001      	movs	r0, #1
 800afae:	4240      	negs	r0, r0
 800afb0:	b017      	add	sp, #92	@ 0x5c
 800afb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afb4:	3307      	adds	r3, #7
 800afb6:	e7b8      	b.n	800af2a <_printf_float+0x36>
 800afb8:	0032      	movs	r2, r6
 800afba:	003b      	movs	r3, r7
 800afbc:	0030      	movs	r0, r6
 800afbe:	0039      	movs	r1, r7
 800afc0:	f7f8 fadc 	bl	800357c <__aeabi_dcmpun>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d00b      	beq.n	800afe0 <_printf_float+0xec>
 800afc8:	2f00      	cmp	r7, #0
 800afca:	da03      	bge.n	800afd4 <_printf_float+0xe0>
 800afcc:	002b      	movs	r3, r5
 800afce:	222d      	movs	r2, #45	@ 0x2d
 800afd0:	3343      	adds	r3, #67	@ 0x43
 800afd2:	701a      	strb	r2, [r3, #0]
 800afd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800afd6:	4f87      	ldr	r7, [pc, #540]	@ (800b1f4 <_printf_float+0x300>)
 800afd8:	2b47      	cmp	r3, #71	@ 0x47
 800afda:	d8d5      	bhi.n	800af88 <_printf_float+0x94>
 800afdc:	4f86      	ldr	r7, [pc, #536]	@ (800b1f8 <_printf_float+0x304>)
 800afde:	e7d3      	b.n	800af88 <_printf_float+0x94>
 800afe0:	2220      	movs	r2, #32
 800afe2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800afe4:	686b      	ldr	r3, [r5, #4]
 800afe6:	4394      	bics	r4, r2
 800afe8:	1c5a      	adds	r2, r3, #1
 800afea:	d146      	bne.n	800b07a <_printf_float+0x186>
 800afec:	3307      	adds	r3, #7
 800afee:	606b      	str	r3, [r5, #4]
 800aff0:	2380      	movs	r3, #128	@ 0x80
 800aff2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aff4:	00db      	lsls	r3, r3, #3
 800aff6:	4313      	orrs	r3, r2
 800aff8:	2200      	movs	r2, #0
 800affa:	602b      	str	r3, [r5, #0]
 800affc:	9206      	str	r2, [sp, #24]
 800affe:	aa14      	add	r2, sp, #80	@ 0x50
 800b000:	9205      	str	r2, [sp, #20]
 800b002:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b004:	a90a      	add	r1, sp, #40	@ 0x28
 800b006:	9204      	str	r2, [sp, #16]
 800b008:	aa13      	add	r2, sp, #76	@ 0x4c
 800b00a:	9203      	str	r2, [sp, #12]
 800b00c:	2223      	movs	r2, #35	@ 0x23
 800b00e:	1852      	adds	r2, r2, r1
 800b010:	9202      	str	r2, [sp, #8]
 800b012:	9301      	str	r3, [sp, #4]
 800b014:	686b      	ldr	r3, [r5, #4]
 800b016:	0032      	movs	r2, r6
 800b018:	9300      	str	r3, [sp, #0]
 800b01a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b01c:	003b      	movs	r3, r7
 800b01e:	f7ff fec3 	bl	800ada8 <__cvt>
 800b022:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b024:	0007      	movs	r7, r0
 800b026:	2c47      	cmp	r4, #71	@ 0x47
 800b028:	d12d      	bne.n	800b086 <_printf_float+0x192>
 800b02a:	1cd3      	adds	r3, r2, #3
 800b02c:	db02      	blt.n	800b034 <_printf_float+0x140>
 800b02e:	686b      	ldr	r3, [r5, #4]
 800b030:	429a      	cmp	r2, r3
 800b032:	dd47      	ble.n	800b0c4 <_printf_float+0x1d0>
 800b034:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b036:	3b02      	subs	r3, #2
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b03c:	0028      	movs	r0, r5
 800b03e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b040:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b042:	3901      	subs	r1, #1
 800b044:	3050      	adds	r0, #80	@ 0x50
 800b046:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b048:	f7ff ff14 	bl	800ae74 <__exponent>
 800b04c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b04e:	0004      	movs	r4, r0
 800b050:	1813      	adds	r3, r2, r0
 800b052:	612b      	str	r3, [r5, #16]
 800b054:	2a01      	cmp	r2, #1
 800b056:	dc02      	bgt.n	800b05e <_printf_float+0x16a>
 800b058:	682a      	ldr	r2, [r5, #0]
 800b05a:	07d2      	lsls	r2, r2, #31
 800b05c:	d501      	bpl.n	800b062 <_printf_float+0x16e>
 800b05e:	3301      	adds	r3, #1
 800b060:	612b      	str	r3, [r5, #16]
 800b062:	2323      	movs	r3, #35	@ 0x23
 800b064:	aa0a      	add	r2, sp, #40	@ 0x28
 800b066:	189b      	adds	r3, r3, r2
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d100      	bne.n	800b070 <_printf_float+0x17c>
 800b06e:	e792      	b.n	800af96 <_printf_float+0xa2>
 800b070:	002b      	movs	r3, r5
 800b072:	222d      	movs	r2, #45	@ 0x2d
 800b074:	3343      	adds	r3, #67	@ 0x43
 800b076:	701a      	strb	r2, [r3, #0]
 800b078:	e78d      	b.n	800af96 <_printf_float+0xa2>
 800b07a:	2c47      	cmp	r4, #71	@ 0x47
 800b07c:	d1b8      	bne.n	800aff0 <_printf_float+0xfc>
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1b6      	bne.n	800aff0 <_printf_float+0xfc>
 800b082:	3301      	adds	r3, #1
 800b084:	e7b3      	b.n	800afee <_printf_float+0xfa>
 800b086:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b088:	2b65      	cmp	r3, #101	@ 0x65
 800b08a:	d9d7      	bls.n	800b03c <_printf_float+0x148>
 800b08c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b08e:	2b66      	cmp	r3, #102	@ 0x66
 800b090:	d11a      	bne.n	800b0c8 <_printf_float+0x1d4>
 800b092:	686b      	ldr	r3, [r5, #4]
 800b094:	2a00      	cmp	r2, #0
 800b096:	dd09      	ble.n	800b0ac <_printf_float+0x1b8>
 800b098:	612a      	str	r2, [r5, #16]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d102      	bne.n	800b0a4 <_printf_float+0x1b0>
 800b09e:	6829      	ldr	r1, [r5, #0]
 800b0a0:	07c9      	lsls	r1, r1, #31
 800b0a2:	d50b      	bpl.n	800b0bc <_printf_float+0x1c8>
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	189b      	adds	r3, r3, r2
 800b0a8:	612b      	str	r3, [r5, #16]
 800b0aa:	e007      	b.n	800b0bc <_printf_float+0x1c8>
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d103      	bne.n	800b0b8 <_printf_float+0x1c4>
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	6829      	ldr	r1, [r5, #0]
 800b0b4:	4211      	tst	r1, r2
 800b0b6:	d000      	beq.n	800b0ba <_printf_float+0x1c6>
 800b0b8:	1c9a      	adds	r2, r3, #2
 800b0ba:	612a      	str	r2, [r5, #16]
 800b0bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b0be:	2400      	movs	r4, #0
 800b0c0:	65ab      	str	r3, [r5, #88]	@ 0x58
 800b0c2:	e7ce      	b.n	800b062 <_printf_float+0x16e>
 800b0c4:	2367      	movs	r3, #103	@ 0x67
 800b0c6:	930c      	str	r3, [sp, #48]	@ 0x30
 800b0c8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b0ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b0cc:	4299      	cmp	r1, r3
 800b0ce:	db06      	blt.n	800b0de <_printf_float+0x1ea>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	6129      	str	r1, [r5, #16]
 800b0d4:	07db      	lsls	r3, r3, #31
 800b0d6:	d5f1      	bpl.n	800b0bc <_printf_float+0x1c8>
 800b0d8:	3101      	adds	r1, #1
 800b0da:	6129      	str	r1, [r5, #16]
 800b0dc:	e7ee      	b.n	800b0bc <_printf_float+0x1c8>
 800b0de:	2201      	movs	r2, #1
 800b0e0:	2900      	cmp	r1, #0
 800b0e2:	dce0      	bgt.n	800b0a6 <_printf_float+0x1b2>
 800b0e4:	1892      	adds	r2, r2, r2
 800b0e6:	1a52      	subs	r2, r2, r1
 800b0e8:	e7dd      	b.n	800b0a6 <_printf_float+0x1b2>
 800b0ea:	682a      	ldr	r2, [r5, #0]
 800b0ec:	0553      	lsls	r3, r2, #21
 800b0ee:	d408      	bmi.n	800b102 <_printf_float+0x20e>
 800b0f0:	692b      	ldr	r3, [r5, #16]
 800b0f2:	003a      	movs	r2, r7
 800b0f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b0f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0f8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b0fa:	47a0      	blx	r4
 800b0fc:	3001      	adds	r0, #1
 800b0fe:	d129      	bne.n	800b154 <_printf_float+0x260>
 800b100:	e754      	b.n	800afac <_printf_float+0xb8>
 800b102:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b104:	2b65      	cmp	r3, #101	@ 0x65
 800b106:	d800      	bhi.n	800b10a <_printf_float+0x216>
 800b108:	e0db      	b.n	800b2c2 <_printf_float+0x3ce>
 800b10a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800b10c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b10e:	2200      	movs	r2, #0
 800b110:	2300      	movs	r3, #0
 800b112:	f7f5 f9a3 	bl	800045c <__aeabi_dcmpeq>
 800b116:	2800      	cmp	r0, #0
 800b118:	d033      	beq.n	800b182 <_printf_float+0x28e>
 800b11a:	2301      	movs	r3, #1
 800b11c:	4a37      	ldr	r2, [pc, #220]	@ (800b1fc <_printf_float+0x308>)
 800b11e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b120:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b122:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b124:	47a0      	blx	r4
 800b126:	3001      	adds	r0, #1
 800b128:	d100      	bne.n	800b12c <_printf_float+0x238>
 800b12a:	e73f      	b.n	800afac <_printf_float+0xb8>
 800b12c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800b12e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b130:	42b3      	cmp	r3, r6
 800b132:	db02      	blt.n	800b13a <_printf_float+0x246>
 800b134:	682b      	ldr	r3, [r5, #0]
 800b136:	07db      	lsls	r3, r3, #31
 800b138:	d50c      	bpl.n	800b154 <_printf_float+0x260>
 800b13a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b13c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b13e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b140:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b144:	47a0      	blx	r4
 800b146:	2400      	movs	r4, #0
 800b148:	3001      	adds	r0, #1
 800b14a:	d100      	bne.n	800b14e <_printf_float+0x25a>
 800b14c:	e72e      	b.n	800afac <_printf_float+0xb8>
 800b14e:	1e73      	subs	r3, r6, #1
 800b150:	42a3      	cmp	r3, r4
 800b152:	dc0a      	bgt.n	800b16a <_printf_float+0x276>
 800b154:	682b      	ldr	r3, [r5, #0]
 800b156:	079b      	lsls	r3, r3, #30
 800b158:	d500      	bpl.n	800b15c <_printf_float+0x268>
 800b15a:	e106      	b.n	800b36a <_printf_float+0x476>
 800b15c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b15e:	68e8      	ldr	r0, [r5, #12]
 800b160:	4298      	cmp	r0, r3
 800b162:	db00      	blt.n	800b166 <_printf_float+0x272>
 800b164:	e724      	b.n	800afb0 <_printf_float+0xbc>
 800b166:	0018      	movs	r0, r3
 800b168:	e722      	b.n	800afb0 <_printf_float+0xbc>
 800b16a:	002a      	movs	r2, r5
 800b16c:	2301      	movs	r3, #1
 800b16e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b170:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b172:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b174:	321a      	adds	r2, #26
 800b176:	47b8      	blx	r7
 800b178:	3001      	adds	r0, #1
 800b17a:	d100      	bne.n	800b17e <_printf_float+0x28a>
 800b17c:	e716      	b.n	800afac <_printf_float+0xb8>
 800b17e:	3401      	adds	r4, #1
 800b180:	e7e5      	b.n	800b14e <_printf_float+0x25a>
 800b182:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b184:	2b00      	cmp	r3, #0
 800b186:	dc3b      	bgt.n	800b200 <_printf_float+0x30c>
 800b188:	2301      	movs	r3, #1
 800b18a:	4a1c      	ldr	r2, [pc, #112]	@ (800b1fc <_printf_float+0x308>)
 800b18c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b18e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b190:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b192:	47a0      	blx	r4
 800b194:	3001      	adds	r0, #1
 800b196:	d100      	bne.n	800b19a <_printf_float+0x2a6>
 800b198:	e708      	b.n	800afac <_printf_float+0xb8>
 800b19a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800b19c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b19e:	4333      	orrs	r3, r6
 800b1a0:	d102      	bne.n	800b1a8 <_printf_float+0x2b4>
 800b1a2:	682b      	ldr	r3, [r5, #0]
 800b1a4:	07db      	lsls	r3, r3, #31
 800b1a6:	d5d5      	bpl.n	800b154 <_printf_float+0x260>
 800b1a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1aa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b1ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b1ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1b0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b1b2:	47a0      	blx	r4
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	d100      	bne.n	800b1bc <_printf_float+0x2c8>
 800b1ba:	e6f7      	b.n	800afac <_printf_float+0xb8>
 800b1bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800b1be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b1c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b1c2:	425b      	negs	r3, r3
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	dc01      	bgt.n	800b1cc <_printf_float+0x2d8>
 800b1c8:	0033      	movs	r3, r6
 800b1ca:	e792      	b.n	800b0f2 <_printf_float+0x1fe>
 800b1cc:	002a      	movs	r2, r5
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b1d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b1d6:	321a      	adds	r2, #26
 800b1d8:	47a0      	blx	r4
 800b1da:	3001      	adds	r0, #1
 800b1dc:	d100      	bne.n	800b1e0 <_printf_float+0x2ec>
 800b1de:	e6e5      	b.n	800afac <_printf_float+0xb8>
 800b1e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	e7ea      	b.n	800b1bc <_printf_float+0x2c8>
 800b1e6:	46c0      	nop			@ (mov r8, r8)
 800b1e8:	7fefffff 	.word	0x7fefffff
 800b1ec:	0800ee40 	.word	0x0800ee40
 800b1f0:	0800ee3c 	.word	0x0800ee3c
 800b1f4:	0800ee48 	.word	0x0800ee48
 800b1f8:	0800ee44 	.word	0x0800ee44
 800b1fc:	0800efb8 	.word	0x0800efb8
 800b200:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b202:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800b204:	930c      	str	r3, [sp, #48]	@ 0x30
 800b206:	429e      	cmp	r6, r3
 800b208:	dd00      	ble.n	800b20c <_printf_float+0x318>
 800b20a:	001e      	movs	r6, r3
 800b20c:	2e00      	cmp	r6, #0
 800b20e:	dc31      	bgt.n	800b274 <_printf_float+0x380>
 800b210:	43f3      	mvns	r3, r6
 800b212:	2400      	movs	r4, #0
 800b214:	17db      	asrs	r3, r3, #31
 800b216:	4033      	ands	r3, r6
 800b218:	930e      	str	r3, [sp, #56]	@ 0x38
 800b21a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800b21c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b21e:	1af3      	subs	r3, r6, r3
 800b220:	42a3      	cmp	r3, r4
 800b222:	dc30      	bgt.n	800b286 <_printf_float+0x392>
 800b224:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b226:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b228:	429a      	cmp	r2, r3
 800b22a:	dc38      	bgt.n	800b29e <_printf_float+0x3aa>
 800b22c:	682b      	ldr	r3, [r5, #0]
 800b22e:	07db      	lsls	r3, r3, #31
 800b230:	d435      	bmi.n	800b29e <_printf_float+0x3aa>
 800b232:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800b234:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b236:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b238:	1b9b      	subs	r3, r3, r6
 800b23a:	1b14      	subs	r4, r2, r4
 800b23c:	429c      	cmp	r4, r3
 800b23e:	dd00      	ble.n	800b242 <_printf_float+0x34e>
 800b240:	001c      	movs	r4, r3
 800b242:	2c00      	cmp	r4, #0
 800b244:	dc34      	bgt.n	800b2b0 <_printf_float+0x3bc>
 800b246:	43e3      	mvns	r3, r4
 800b248:	2600      	movs	r6, #0
 800b24a:	17db      	asrs	r3, r3, #31
 800b24c:	401c      	ands	r4, r3
 800b24e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b250:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	1b1b      	subs	r3, r3, r4
 800b256:	42b3      	cmp	r3, r6
 800b258:	dc00      	bgt.n	800b25c <_printf_float+0x368>
 800b25a:	e77b      	b.n	800b154 <_printf_float+0x260>
 800b25c:	002a      	movs	r2, r5
 800b25e:	2301      	movs	r3, #1
 800b260:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b262:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b264:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b266:	321a      	adds	r2, #26
 800b268:	47b8      	blx	r7
 800b26a:	3001      	adds	r0, #1
 800b26c:	d100      	bne.n	800b270 <_printf_float+0x37c>
 800b26e:	e69d      	b.n	800afac <_printf_float+0xb8>
 800b270:	3601      	adds	r6, #1
 800b272:	e7ec      	b.n	800b24e <_printf_float+0x35a>
 800b274:	0033      	movs	r3, r6
 800b276:	003a      	movs	r2, r7
 800b278:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b27a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b27c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b27e:	47a0      	blx	r4
 800b280:	3001      	adds	r0, #1
 800b282:	d1c5      	bne.n	800b210 <_printf_float+0x31c>
 800b284:	e692      	b.n	800afac <_printf_float+0xb8>
 800b286:	002a      	movs	r2, r5
 800b288:	2301      	movs	r3, #1
 800b28a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b28c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b28e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b290:	321a      	adds	r2, #26
 800b292:	47b0      	blx	r6
 800b294:	3001      	adds	r0, #1
 800b296:	d100      	bne.n	800b29a <_printf_float+0x3a6>
 800b298:	e688      	b.n	800afac <_printf_float+0xb8>
 800b29a:	3401      	adds	r4, #1
 800b29c:	e7bd      	b.n	800b21a <_printf_float+0x326>
 800b29e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2a4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2a6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b2a8:	47a0      	blx	r4
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	d1c1      	bne.n	800b232 <_printf_float+0x33e>
 800b2ae:	e67d      	b.n	800afac <_printf_float+0xb8>
 800b2b0:	19ba      	adds	r2, r7, r6
 800b2b2:	0023      	movs	r3, r4
 800b2b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2b8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b2ba:	47b0      	blx	r6
 800b2bc:	3001      	adds	r0, #1
 800b2be:	d1c2      	bne.n	800b246 <_printf_float+0x352>
 800b2c0:	e674      	b.n	800afac <_printf_float+0xb8>
 800b2c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b2c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	dc02      	bgt.n	800b2d0 <_printf_float+0x3dc>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	421a      	tst	r2, r3
 800b2ce:	d039      	beq.n	800b344 <_printf_float+0x450>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	003a      	movs	r2, r7
 800b2d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b2da:	47b0      	blx	r6
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d100      	bne.n	800b2e2 <_printf_float+0x3ee>
 800b2e0:	e664      	b.n	800afac <_printf_float+0xb8>
 800b2e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b2e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2ea:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b2ec:	47b0      	blx	r6
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	d100      	bne.n	800b2f4 <_printf_float+0x400>
 800b2f2:	e65b      	b.n	800afac <_printf_float+0xb8>
 800b2f4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800b2f6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800b2f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	930c      	str	r3, [sp, #48]	@ 0x30
 800b300:	2300      	movs	r3, #0
 800b302:	f7f5 f8ab 	bl	800045c <__aeabi_dcmpeq>
 800b306:	2800      	cmp	r0, #0
 800b308:	d11a      	bne.n	800b340 <_printf_float+0x44c>
 800b30a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b30c:	1c7a      	adds	r2, r7, #1
 800b30e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b310:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b312:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b314:	47b0      	blx	r6
 800b316:	3001      	adds	r0, #1
 800b318:	d10e      	bne.n	800b338 <_printf_float+0x444>
 800b31a:	e647      	b.n	800afac <_printf_float+0xb8>
 800b31c:	002a      	movs	r2, r5
 800b31e:	2301      	movs	r3, #1
 800b320:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b324:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b326:	321a      	adds	r2, #26
 800b328:	47b8      	blx	r7
 800b32a:	3001      	adds	r0, #1
 800b32c:	d100      	bne.n	800b330 <_printf_float+0x43c>
 800b32e:	e63d      	b.n	800afac <_printf_float+0xb8>
 800b330:	3601      	adds	r6, #1
 800b332:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b334:	429e      	cmp	r6, r3
 800b336:	dbf1      	blt.n	800b31c <_printf_float+0x428>
 800b338:	002a      	movs	r2, r5
 800b33a:	0023      	movs	r3, r4
 800b33c:	3250      	adds	r2, #80	@ 0x50
 800b33e:	e6d9      	b.n	800b0f4 <_printf_float+0x200>
 800b340:	2600      	movs	r6, #0
 800b342:	e7f6      	b.n	800b332 <_printf_float+0x43e>
 800b344:	003a      	movs	r2, r7
 800b346:	e7e2      	b.n	800b30e <_printf_float+0x41a>
 800b348:	002a      	movs	r2, r5
 800b34a:	2301      	movs	r3, #1
 800b34c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b34e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b350:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b352:	3219      	adds	r2, #25
 800b354:	47b0      	blx	r6
 800b356:	3001      	adds	r0, #1
 800b358:	d100      	bne.n	800b35c <_printf_float+0x468>
 800b35a:	e627      	b.n	800afac <_printf_float+0xb8>
 800b35c:	3401      	adds	r4, #1
 800b35e:	68eb      	ldr	r3, [r5, #12]
 800b360:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b362:	1a9b      	subs	r3, r3, r2
 800b364:	42a3      	cmp	r3, r4
 800b366:	dcef      	bgt.n	800b348 <_printf_float+0x454>
 800b368:	e6f8      	b.n	800b15c <_printf_float+0x268>
 800b36a:	2400      	movs	r4, #0
 800b36c:	e7f7      	b.n	800b35e <_printf_float+0x46a>
 800b36e:	46c0      	nop			@ (mov r8, r8)

0800b370 <_printf_common>:
 800b370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b372:	0016      	movs	r6, r2
 800b374:	9301      	str	r3, [sp, #4]
 800b376:	688a      	ldr	r2, [r1, #8]
 800b378:	690b      	ldr	r3, [r1, #16]
 800b37a:	000c      	movs	r4, r1
 800b37c:	9000      	str	r0, [sp, #0]
 800b37e:	4293      	cmp	r3, r2
 800b380:	da00      	bge.n	800b384 <_printf_common+0x14>
 800b382:	0013      	movs	r3, r2
 800b384:	0022      	movs	r2, r4
 800b386:	6033      	str	r3, [r6, #0]
 800b388:	3243      	adds	r2, #67	@ 0x43
 800b38a:	7812      	ldrb	r2, [r2, #0]
 800b38c:	2a00      	cmp	r2, #0
 800b38e:	d001      	beq.n	800b394 <_printf_common+0x24>
 800b390:	3301      	adds	r3, #1
 800b392:	6033      	str	r3, [r6, #0]
 800b394:	6823      	ldr	r3, [r4, #0]
 800b396:	069b      	lsls	r3, r3, #26
 800b398:	d502      	bpl.n	800b3a0 <_printf_common+0x30>
 800b39a:	6833      	ldr	r3, [r6, #0]
 800b39c:	3302      	adds	r3, #2
 800b39e:	6033      	str	r3, [r6, #0]
 800b3a0:	6822      	ldr	r2, [r4, #0]
 800b3a2:	2306      	movs	r3, #6
 800b3a4:	0015      	movs	r5, r2
 800b3a6:	401d      	ands	r5, r3
 800b3a8:	421a      	tst	r2, r3
 800b3aa:	d027      	beq.n	800b3fc <_printf_common+0x8c>
 800b3ac:	0023      	movs	r3, r4
 800b3ae:	3343      	adds	r3, #67	@ 0x43
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	1e5a      	subs	r2, r3, #1
 800b3b4:	4193      	sbcs	r3, r2
 800b3b6:	6822      	ldr	r2, [r4, #0]
 800b3b8:	0692      	lsls	r2, r2, #26
 800b3ba:	d430      	bmi.n	800b41e <_printf_common+0xae>
 800b3bc:	0022      	movs	r2, r4
 800b3be:	9901      	ldr	r1, [sp, #4]
 800b3c0:	9800      	ldr	r0, [sp, #0]
 800b3c2:	9d08      	ldr	r5, [sp, #32]
 800b3c4:	3243      	adds	r2, #67	@ 0x43
 800b3c6:	47a8      	blx	r5
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	d025      	beq.n	800b418 <_printf_common+0xa8>
 800b3cc:	2206      	movs	r2, #6
 800b3ce:	6823      	ldr	r3, [r4, #0]
 800b3d0:	2500      	movs	r5, #0
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	2b04      	cmp	r3, #4
 800b3d6:	d105      	bne.n	800b3e4 <_printf_common+0x74>
 800b3d8:	6833      	ldr	r3, [r6, #0]
 800b3da:	68e5      	ldr	r5, [r4, #12]
 800b3dc:	1aed      	subs	r5, r5, r3
 800b3de:	43eb      	mvns	r3, r5
 800b3e0:	17db      	asrs	r3, r3, #31
 800b3e2:	401d      	ands	r5, r3
 800b3e4:	68a3      	ldr	r3, [r4, #8]
 800b3e6:	6922      	ldr	r2, [r4, #16]
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	dd01      	ble.n	800b3f0 <_printf_common+0x80>
 800b3ec:	1a9b      	subs	r3, r3, r2
 800b3ee:	18ed      	adds	r5, r5, r3
 800b3f0:	2600      	movs	r6, #0
 800b3f2:	42b5      	cmp	r5, r6
 800b3f4:	d120      	bne.n	800b438 <_printf_common+0xc8>
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	e010      	b.n	800b41c <_printf_common+0xac>
 800b3fa:	3501      	adds	r5, #1
 800b3fc:	68e3      	ldr	r3, [r4, #12]
 800b3fe:	6832      	ldr	r2, [r6, #0]
 800b400:	1a9b      	subs	r3, r3, r2
 800b402:	42ab      	cmp	r3, r5
 800b404:	ddd2      	ble.n	800b3ac <_printf_common+0x3c>
 800b406:	0022      	movs	r2, r4
 800b408:	2301      	movs	r3, #1
 800b40a:	9901      	ldr	r1, [sp, #4]
 800b40c:	9800      	ldr	r0, [sp, #0]
 800b40e:	9f08      	ldr	r7, [sp, #32]
 800b410:	3219      	adds	r2, #25
 800b412:	47b8      	blx	r7
 800b414:	3001      	adds	r0, #1
 800b416:	d1f0      	bne.n	800b3fa <_printf_common+0x8a>
 800b418:	2001      	movs	r0, #1
 800b41a:	4240      	negs	r0, r0
 800b41c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b41e:	2030      	movs	r0, #48	@ 0x30
 800b420:	18e1      	adds	r1, r4, r3
 800b422:	3143      	adds	r1, #67	@ 0x43
 800b424:	7008      	strb	r0, [r1, #0]
 800b426:	0021      	movs	r1, r4
 800b428:	1c5a      	adds	r2, r3, #1
 800b42a:	3145      	adds	r1, #69	@ 0x45
 800b42c:	7809      	ldrb	r1, [r1, #0]
 800b42e:	18a2      	adds	r2, r4, r2
 800b430:	3243      	adds	r2, #67	@ 0x43
 800b432:	3302      	adds	r3, #2
 800b434:	7011      	strb	r1, [r2, #0]
 800b436:	e7c1      	b.n	800b3bc <_printf_common+0x4c>
 800b438:	0022      	movs	r2, r4
 800b43a:	2301      	movs	r3, #1
 800b43c:	9901      	ldr	r1, [sp, #4]
 800b43e:	9800      	ldr	r0, [sp, #0]
 800b440:	9f08      	ldr	r7, [sp, #32]
 800b442:	321a      	adds	r2, #26
 800b444:	47b8      	blx	r7
 800b446:	3001      	adds	r0, #1
 800b448:	d0e6      	beq.n	800b418 <_printf_common+0xa8>
 800b44a:	3601      	adds	r6, #1
 800b44c:	e7d1      	b.n	800b3f2 <_printf_common+0x82>
	...

0800b450 <_printf_i>:
 800b450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b452:	b08b      	sub	sp, #44	@ 0x2c
 800b454:	9206      	str	r2, [sp, #24]
 800b456:	000a      	movs	r2, r1
 800b458:	3243      	adds	r2, #67	@ 0x43
 800b45a:	9307      	str	r3, [sp, #28]
 800b45c:	9005      	str	r0, [sp, #20]
 800b45e:	9203      	str	r2, [sp, #12]
 800b460:	7e0a      	ldrb	r2, [r1, #24]
 800b462:	000c      	movs	r4, r1
 800b464:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b466:	2a78      	cmp	r2, #120	@ 0x78
 800b468:	d809      	bhi.n	800b47e <_printf_i+0x2e>
 800b46a:	2a62      	cmp	r2, #98	@ 0x62
 800b46c:	d80b      	bhi.n	800b486 <_printf_i+0x36>
 800b46e:	2a00      	cmp	r2, #0
 800b470:	d100      	bne.n	800b474 <_printf_i+0x24>
 800b472:	e0ba      	b.n	800b5ea <_printf_i+0x19a>
 800b474:	497a      	ldr	r1, [pc, #488]	@ (800b660 <_printf_i+0x210>)
 800b476:	9104      	str	r1, [sp, #16]
 800b478:	2a58      	cmp	r2, #88	@ 0x58
 800b47a:	d100      	bne.n	800b47e <_printf_i+0x2e>
 800b47c:	e08e      	b.n	800b59c <_printf_i+0x14c>
 800b47e:	0025      	movs	r5, r4
 800b480:	3542      	adds	r5, #66	@ 0x42
 800b482:	702a      	strb	r2, [r5, #0]
 800b484:	e022      	b.n	800b4cc <_printf_i+0x7c>
 800b486:	0010      	movs	r0, r2
 800b488:	3863      	subs	r0, #99	@ 0x63
 800b48a:	2815      	cmp	r0, #21
 800b48c:	d8f7      	bhi.n	800b47e <_printf_i+0x2e>
 800b48e:	f7f4 fe55 	bl	800013c <__gnu_thumb1_case_shi>
 800b492:	0016      	.short	0x0016
 800b494:	fff6001f 	.word	0xfff6001f
 800b498:	fff6fff6 	.word	0xfff6fff6
 800b49c:	001ffff6 	.word	0x001ffff6
 800b4a0:	fff6fff6 	.word	0xfff6fff6
 800b4a4:	fff6fff6 	.word	0xfff6fff6
 800b4a8:	0036009f 	.word	0x0036009f
 800b4ac:	fff6007e 	.word	0xfff6007e
 800b4b0:	00b0fff6 	.word	0x00b0fff6
 800b4b4:	0036fff6 	.word	0x0036fff6
 800b4b8:	fff6fff6 	.word	0xfff6fff6
 800b4bc:	0082      	.short	0x0082
 800b4be:	0025      	movs	r5, r4
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	3542      	adds	r5, #66	@ 0x42
 800b4c4:	1d11      	adds	r1, r2, #4
 800b4c6:	6019      	str	r1, [r3, #0]
 800b4c8:	6813      	ldr	r3, [r2, #0]
 800b4ca:	702b      	strb	r3, [r5, #0]
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e09e      	b.n	800b60e <_printf_i+0x1be>
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	6809      	ldr	r1, [r1, #0]
 800b4d4:	1d02      	adds	r2, r0, #4
 800b4d6:	060d      	lsls	r5, r1, #24
 800b4d8:	d50b      	bpl.n	800b4f2 <_printf_i+0xa2>
 800b4da:	6806      	ldr	r6, [r0, #0]
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	2e00      	cmp	r6, #0
 800b4e0:	da03      	bge.n	800b4ea <_printf_i+0x9a>
 800b4e2:	232d      	movs	r3, #45	@ 0x2d
 800b4e4:	9a03      	ldr	r2, [sp, #12]
 800b4e6:	4276      	negs	r6, r6
 800b4e8:	7013      	strb	r3, [r2, #0]
 800b4ea:	4b5d      	ldr	r3, [pc, #372]	@ (800b660 <_printf_i+0x210>)
 800b4ec:	270a      	movs	r7, #10
 800b4ee:	9304      	str	r3, [sp, #16]
 800b4f0:	e018      	b.n	800b524 <_printf_i+0xd4>
 800b4f2:	6806      	ldr	r6, [r0, #0]
 800b4f4:	601a      	str	r2, [r3, #0]
 800b4f6:	0649      	lsls	r1, r1, #25
 800b4f8:	d5f1      	bpl.n	800b4de <_printf_i+0x8e>
 800b4fa:	b236      	sxth	r6, r6
 800b4fc:	e7ef      	b.n	800b4de <_printf_i+0x8e>
 800b4fe:	6808      	ldr	r0, [r1, #0]
 800b500:	6819      	ldr	r1, [r3, #0]
 800b502:	c940      	ldmia	r1!, {r6}
 800b504:	0605      	lsls	r5, r0, #24
 800b506:	d402      	bmi.n	800b50e <_printf_i+0xbe>
 800b508:	0640      	lsls	r0, r0, #25
 800b50a:	d500      	bpl.n	800b50e <_printf_i+0xbe>
 800b50c:	b2b6      	uxth	r6, r6
 800b50e:	6019      	str	r1, [r3, #0]
 800b510:	4b53      	ldr	r3, [pc, #332]	@ (800b660 <_printf_i+0x210>)
 800b512:	270a      	movs	r7, #10
 800b514:	9304      	str	r3, [sp, #16]
 800b516:	2a6f      	cmp	r2, #111	@ 0x6f
 800b518:	d100      	bne.n	800b51c <_printf_i+0xcc>
 800b51a:	3f02      	subs	r7, #2
 800b51c:	0023      	movs	r3, r4
 800b51e:	2200      	movs	r2, #0
 800b520:	3343      	adds	r3, #67	@ 0x43
 800b522:	701a      	strb	r2, [r3, #0]
 800b524:	6863      	ldr	r3, [r4, #4]
 800b526:	60a3      	str	r3, [r4, #8]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	db06      	blt.n	800b53a <_printf_i+0xea>
 800b52c:	2104      	movs	r1, #4
 800b52e:	6822      	ldr	r2, [r4, #0]
 800b530:	9d03      	ldr	r5, [sp, #12]
 800b532:	438a      	bics	r2, r1
 800b534:	6022      	str	r2, [r4, #0]
 800b536:	4333      	orrs	r3, r6
 800b538:	d00c      	beq.n	800b554 <_printf_i+0x104>
 800b53a:	9d03      	ldr	r5, [sp, #12]
 800b53c:	0030      	movs	r0, r6
 800b53e:	0039      	movs	r1, r7
 800b540:	f7f4 fe8c 	bl	800025c <__aeabi_uidivmod>
 800b544:	9b04      	ldr	r3, [sp, #16]
 800b546:	3d01      	subs	r5, #1
 800b548:	5c5b      	ldrb	r3, [r3, r1]
 800b54a:	702b      	strb	r3, [r5, #0]
 800b54c:	0033      	movs	r3, r6
 800b54e:	0006      	movs	r6, r0
 800b550:	429f      	cmp	r7, r3
 800b552:	d9f3      	bls.n	800b53c <_printf_i+0xec>
 800b554:	2f08      	cmp	r7, #8
 800b556:	d109      	bne.n	800b56c <_printf_i+0x11c>
 800b558:	6823      	ldr	r3, [r4, #0]
 800b55a:	07db      	lsls	r3, r3, #31
 800b55c:	d506      	bpl.n	800b56c <_printf_i+0x11c>
 800b55e:	6862      	ldr	r2, [r4, #4]
 800b560:	6923      	ldr	r3, [r4, #16]
 800b562:	429a      	cmp	r2, r3
 800b564:	dc02      	bgt.n	800b56c <_printf_i+0x11c>
 800b566:	2330      	movs	r3, #48	@ 0x30
 800b568:	3d01      	subs	r5, #1
 800b56a:	702b      	strb	r3, [r5, #0]
 800b56c:	9b03      	ldr	r3, [sp, #12]
 800b56e:	1b5b      	subs	r3, r3, r5
 800b570:	6123      	str	r3, [r4, #16]
 800b572:	9b07      	ldr	r3, [sp, #28]
 800b574:	0021      	movs	r1, r4
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	9805      	ldr	r0, [sp, #20]
 800b57a:	9b06      	ldr	r3, [sp, #24]
 800b57c:	aa09      	add	r2, sp, #36	@ 0x24
 800b57e:	f7ff fef7 	bl	800b370 <_printf_common>
 800b582:	3001      	adds	r0, #1
 800b584:	d148      	bne.n	800b618 <_printf_i+0x1c8>
 800b586:	2001      	movs	r0, #1
 800b588:	4240      	negs	r0, r0
 800b58a:	b00b      	add	sp, #44	@ 0x2c
 800b58c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b58e:	2220      	movs	r2, #32
 800b590:	6809      	ldr	r1, [r1, #0]
 800b592:	430a      	orrs	r2, r1
 800b594:	6022      	str	r2, [r4, #0]
 800b596:	2278      	movs	r2, #120	@ 0x78
 800b598:	4932      	ldr	r1, [pc, #200]	@ (800b664 <_printf_i+0x214>)
 800b59a:	9104      	str	r1, [sp, #16]
 800b59c:	0021      	movs	r1, r4
 800b59e:	3145      	adds	r1, #69	@ 0x45
 800b5a0:	700a      	strb	r2, [r1, #0]
 800b5a2:	6819      	ldr	r1, [r3, #0]
 800b5a4:	6822      	ldr	r2, [r4, #0]
 800b5a6:	c940      	ldmia	r1!, {r6}
 800b5a8:	0610      	lsls	r0, r2, #24
 800b5aa:	d402      	bmi.n	800b5b2 <_printf_i+0x162>
 800b5ac:	0650      	lsls	r0, r2, #25
 800b5ae:	d500      	bpl.n	800b5b2 <_printf_i+0x162>
 800b5b0:	b2b6      	uxth	r6, r6
 800b5b2:	6019      	str	r1, [r3, #0]
 800b5b4:	07d3      	lsls	r3, r2, #31
 800b5b6:	d502      	bpl.n	800b5be <_printf_i+0x16e>
 800b5b8:	2320      	movs	r3, #32
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	2e00      	cmp	r6, #0
 800b5c0:	d001      	beq.n	800b5c6 <_printf_i+0x176>
 800b5c2:	2710      	movs	r7, #16
 800b5c4:	e7aa      	b.n	800b51c <_printf_i+0xcc>
 800b5c6:	2220      	movs	r2, #32
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	4393      	bics	r3, r2
 800b5cc:	6023      	str	r3, [r4, #0]
 800b5ce:	e7f8      	b.n	800b5c2 <_printf_i+0x172>
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	680d      	ldr	r5, [r1, #0]
 800b5d4:	1d10      	adds	r0, r2, #4
 800b5d6:	6949      	ldr	r1, [r1, #20]
 800b5d8:	6018      	str	r0, [r3, #0]
 800b5da:	6813      	ldr	r3, [r2, #0]
 800b5dc:	062e      	lsls	r6, r5, #24
 800b5de:	d501      	bpl.n	800b5e4 <_printf_i+0x194>
 800b5e0:	6019      	str	r1, [r3, #0]
 800b5e2:	e002      	b.n	800b5ea <_printf_i+0x19a>
 800b5e4:	066d      	lsls	r5, r5, #25
 800b5e6:	d5fb      	bpl.n	800b5e0 <_printf_i+0x190>
 800b5e8:	8019      	strh	r1, [r3, #0]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	9d03      	ldr	r5, [sp, #12]
 800b5ee:	6123      	str	r3, [r4, #16]
 800b5f0:	e7bf      	b.n	800b572 <_printf_i+0x122>
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	1d11      	adds	r1, r2, #4
 800b5f6:	6019      	str	r1, [r3, #0]
 800b5f8:	6815      	ldr	r5, [r2, #0]
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	0028      	movs	r0, r5
 800b5fe:	6862      	ldr	r2, [r4, #4]
 800b600:	f000 faa0 	bl	800bb44 <memchr>
 800b604:	2800      	cmp	r0, #0
 800b606:	d001      	beq.n	800b60c <_printf_i+0x1bc>
 800b608:	1b40      	subs	r0, r0, r5
 800b60a:	6060      	str	r0, [r4, #4]
 800b60c:	6863      	ldr	r3, [r4, #4]
 800b60e:	6123      	str	r3, [r4, #16]
 800b610:	2300      	movs	r3, #0
 800b612:	9a03      	ldr	r2, [sp, #12]
 800b614:	7013      	strb	r3, [r2, #0]
 800b616:	e7ac      	b.n	800b572 <_printf_i+0x122>
 800b618:	002a      	movs	r2, r5
 800b61a:	6923      	ldr	r3, [r4, #16]
 800b61c:	9906      	ldr	r1, [sp, #24]
 800b61e:	9805      	ldr	r0, [sp, #20]
 800b620:	9d07      	ldr	r5, [sp, #28]
 800b622:	47a8      	blx	r5
 800b624:	3001      	adds	r0, #1
 800b626:	d0ae      	beq.n	800b586 <_printf_i+0x136>
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	079b      	lsls	r3, r3, #30
 800b62c:	d415      	bmi.n	800b65a <_printf_i+0x20a>
 800b62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b630:	68e0      	ldr	r0, [r4, #12]
 800b632:	4298      	cmp	r0, r3
 800b634:	daa9      	bge.n	800b58a <_printf_i+0x13a>
 800b636:	0018      	movs	r0, r3
 800b638:	e7a7      	b.n	800b58a <_printf_i+0x13a>
 800b63a:	0022      	movs	r2, r4
 800b63c:	2301      	movs	r3, #1
 800b63e:	9906      	ldr	r1, [sp, #24]
 800b640:	9805      	ldr	r0, [sp, #20]
 800b642:	9e07      	ldr	r6, [sp, #28]
 800b644:	3219      	adds	r2, #25
 800b646:	47b0      	blx	r6
 800b648:	3001      	adds	r0, #1
 800b64a:	d09c      	beq.n	800b586 <_printf_i+0x136>
 800b64c:	3501      	adds	r5, #1
 800b64e:	68e3      	ldr	r3, [r4, #12]
 800b650:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b652:	1a9b      	subs	r3, r3, r2
 800b654:	42ab      	cmp	r3, r5
 800b656:	dcf0      	bgt.n	800b63a <_printf_i+0x1ea>
 800b658:	e7e9      	b.n	800b62e <_printf_i+0x1de>
 800b65a:	2500      	movs	r5, #0
 800b65c:	e7f7      	b.n	800b64e <_printf_i+0x1fe>
 800b65e:	46c0      	nop			@ (mov r8, r8)
 800b660:	0800ee4c 	.word	0x0800ee4c
 800b664:	0800ee5d 	.word	0x0800ee5d

0800b668 <sniprintf>:
 800b668:	b40c      	push	{r2, r3}
 800b66a:	b530      	push	{r4, r5, lr}
 800b66c:	4b18      	ldr	r3, [pc, #96]	@ (800b6d0 <sniprintf+0x68>)
 800b66e:	000c      	movs	r4, r1
 800b670:	681d      	ldr	r5, [r3, #0]
 800b672:	b09d      	sub	sp, #116	@ 0x74
 800b674:	2900      	cmp	r1, #0
 800b676:	da08      	bge.n	800b68a <sniprintf+0x22>
 800b678:	238b      	movs	r3, #139	@ 0x8b
 800b67a:	2001      	movs	r0, #1
 800b67c:	602b      	str	r3, [r5, #0]
 800b67e:	4240      	negs	r0, r0
 800b680:	b01d      	add	sp, #116	@ 0x74
 800b682:	bc30      	pop	{r4, r5}
 800b684:	bc08      	pop	{r3}
 800b686:	b002      	add	sp, #8
 800b688:	4718      	bx	r3
 800b68a:	2382      	movs	r3, #130	@ 0x82
 800b68c:	466a      	mov	r2, sp
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	8293      	strh	r3, [r2, #20]
 800b692:	2300      	movs	r3, #0
 800b694:	9002      	str	r0, [sp, #8]
 800b696:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b698:	9006      	str	r0, [sp, #24]
 800b69a:	4299      	cmp	r1, r3
 800b69c:	d000      	beq.n	800b6a0 <sniprintf+0x38>
 800b69e:	1e4b      	subs	r3, r1, #1
 800b6a0:	9304      	str	r3, [sp, #16]
 800b6a2:	9307      	str	r3, [sp, #28]
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	466a      	mov	r2, sp
 800b6a8:	425b      	negs	r3, r3
 800b6aa:	82d3      	strh	r3, [r2, #22]
 800b6ac:	0028      	movs	r0, r5
 800b6ae:	ab21      	add	r3, sp, #132	@ 0x84
 800b6b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b6b2:	a902      	add	r1, sp, #8
 800b6b4:	9301      	str	r3, [sp, #4]
 800b6b6:	f001 f997 	bl	800c9e8 <_svfiprintf_r>
 800b6ba:	1c43      	adds	r3, r0, #1
 800b6bc:	da01      	bge.n	800b6c2 <sniprintf+0x5a>
 800b6be:	238b      	movs	r3, #139	@ 0x8b
 800b6c0:	602b      	str	r3, [r5, #0]
 800b6c2:	2c00      	cmp	r4, #0
 800b6c4:	d0dc      	beq.n	800b680 <sniprintf+0x18>
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	9b02      	ldr	r3, [sp, #8]
 800b6ca:	701a      	strb	r2, [r3, #0]
 800b6cc:	e7d8      	b.n	800b680 <sniprintf+0x18>
 800b6ce:	46c0      	nop			@ (mov r8, r8)
 800b6d0:	20000018 	.word	0x20000018

0800b6d4 <siscanf>:
 800b6d4:	b40e      	push	{r1, r2, r3}
 800b6d6:	b570      	push	{r4, r5, r6, lr}
 800b6d8:	2381      	movs	r3, #129	@ 0x81
 800b6da:	b09d      	sub	sp, #116	@ 0x74
 800b6dc:	466a      	mov	r2, sp
 800b6de:	2500      	movs	r5, #0
 800b6e0:	ac21      	add	r4, sp, #132	@ 0x84
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	cc40      	ldmia	r4!, {r6}
 800b6e6:	8293      	strh	r3, [r2, #20]
 800b6e8:	951b      	str	r5, [sp, #108]	@ 0x6c
 800b6ea:	9002      	str	r0, [sp, #8]
 800b6ec:	9006      	str	r0, [sp, #24]
 800b6ee:	f7f4 fd13 	bl	8000118 <strlen>
 800b6f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b720 <siscanf+0x4c>)
 800b6f4:	466a      	mov	r2, sp
 800b6f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	9003      	str	r0, [sp, #12]
 800b6fc:	9007      	str	r0, [sp, #28]
 800b6fe:	4809      	ldr	r0, [pc, #36]	@ (800b724 <siscanf+0x50>)
 800b700:	425b      	negs	r3, r3
 800b702:	82d3      	strh	r3, [r2, #22]
 800b704:	a902      	add	r1, sp, #8
 800b706:	0023      	movs	r3, r4
 800b708:	0032      	movs	r2, r6
 800b70a:	6800      	ldr	r0, [r0, #0]
 800b70c:	950f      	str	r5, [sp, #60]	@ 0x3c
 800b70e:	9514      	str	r5, [sp, #80]	@ 0x50
 800b710:	9401      	str	r4, [sp, #4]
 800b712:	f001 fac3 	bl	800cc9c <__ssvfiscanf_r>
 800b716:	b01d      	add	sp, #116	@ 0x74
 800b718:	bc70      	pop	{r4, r5, r6}
 800b71a:	bc08      	pop	{r3}
 800b71c:	b003      	add	sp, #12
 800b71e:	4718      	bx	r3
 800b720:	0800b751 	.word	0x0800b751
 800b724:	20000018 	.word	0x20000018

0800b728 <__sread>:
 800b728:	b570      	push	{r4, r5, r6, lr}
 800b72a:	000c      	movs	r4, r1
 800b72c:	250e      	movs	r5, #14
 800b72e:	5f49      	ldrsh	r1, [r1, r5]
 800b730:	f000 f99c 	bl	800ba6c <_read_r>
 800b734:	2800      	cmp	r0, #0
 800b736:	db03      	blt.n	800b740 <__sread+0x18>
 800b738:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800b73a:	181b      	adds	r3, r3, r0
 800b73c:	6563      	str	r3, [r4, #84]	@ 0x54
 800b73e:	bd70      	pop	{r4, r5, r6, pc}
 800b740:	89a3      	ldrh	r3, [r4, #12]
 800b742:	4a02      	ldr	r2, [pc, #8]	@ (800b74c <__sread+0x24>)
 800b744:	4013      	ands	r3, r2
 800b746:	81a3      	strh	r3, [r4, #12]
 800b748:	e7f9      	b.n	800b73e <__sread+0x16>
 800b74a:	46c0      	nop			@ (mov r8, r8)
 800b74c:	ffffefff 	.word	0xffffefff

0800b750 <__seofread>:
 800b750:	2000      	movs	r0, #0
 800b752:	4770      	bx	lr

0800b754 <__swrite>:
 800b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b756:	001f      	movs	r7, r3
 800b758:	898b      	ldrh	r3, [r1, #12]
 800b75a:	0005      	movs	r5, r0
 800b75c:	000c      	movs	r4, r1
 800b75e:	0016      	movs	r6, r2
 800b760:	05db      	lsls	r3, r3, #23
 800b762:	d505      	bpl.n	800b770 <__swrite+0x1c>
 800b764:	230e      	movs	r3, #14
 800b766:	5ec9      	ldrsh	r1, [r1, r3]
 800b768:	2200      	movs	r2, #0
 800b76a:	2302      	movs	r3, #2
 800b76c:	f000 f96a 	bl	800ba44 <_lseek_r>
 800b770:	89a3      	ldrh	r3, [r4, #12]
 800b772:	4a05      	ldr	r2, [pc, #20]	@ (800b788 <__swrite+0x34>)
 800b774:	0028      	movs	r0, r5
 800b776:	4013      	ands	r3, r2
 800b778:	81a3      	strh	r3, [r4, #12]
 800b77a:	0032      	movs	r2, r6
 800b77c:	230e      	movs	r3, #14
 800b77e:	5ee1      	ldrsh	r1, [r4, r3]
 800b780:	003b      	movs	r3, r7
 800b782:	f000 f987 	bl	800ba94 <_write_r>
 800b786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b788:	ffffefff 	.word	0xffffefff

0800b78c <__sseek>:
 800b78c:	b570      	push	{r4, r5, r6, lr}
 800b78e:	000c      	movs	r4, r1
 800b790:	250e      	movs	r5, #14
 800b792:	5f49      	ldrsh	r1, [r1, r5]
 800b794:	f000 f956 	bl	800ba44 <_lseek_r>
 800b798:	89a3      	ldrh	r3, [r4, #12]
 800b79a:	1c42      	adds	r2, r0, #1
 800b79c:	d103      	bne.n	800b7a6 <__sseek+0x1a>
 800b79e:	4a05      	ldr	r2, [pc, #20]	@ (800b7b4 <__sseek+0x28>)
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	81a3      	strh	r3, [r4, #12]
 800b7a4:	bd70      	pop	{r4, r5, r6, pc}
 800b7a6:	2280      	movs	r2, #128	@ 0x80
 800b7a8:	0152      	lsls	r2, r2, #5
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	81a3      	strh	r3, [r4, #12]
 800b7ae:	6560      	str	r0, [r4, #84]	@ 0x54
 800b7b0:	e7f8      	b.n	800b7a4 <__sseek+0x18>
 800b7b2:	46c0      	nop			@ (mov r8, r8)
 800b7b4:	ffffefff 	.word	0xffffefff

0800b7b8 <__sclose>:
 800b7b8:	b510      	push	{r4, lr}
 800b7ba:	230e      	movs	r3, #14
 800b7bc:	5ec9      	ldrsh	r1, [r1, r3]
 800b7be:	f000 f9af 	bl	800bb20 <_close_r>
 800b7c2:	bd10      	pop	{r4, pc}

0800b7c4 <std>:
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	b510      	push	{r4, lr}
 800b7c8:	0004      	movs	r4, r0
 800b7ca:	6003      	str	r3, [r0, #0]
 800b7cc:	6043      	str	r3, [r0, #4]
 800b7ce:	6083      	str	r3, [r0, #8]
 800b7d0:	8181      	strh	r1, [r0, #12]
 800b7d2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b7d4:	81c2      	strh	r2, [r0, #14]
 800b7d6:	6103      	str	r3, [r0, #16]
 800b7d8:	6143      	str	r3, [r0, #20]
 800b7da:	6183      	str	r3, [r0, #24]
 800b7dc:	0019      	movs	r1, r3
 800b7de:	2208      	movs	r2, #8
 800b7e0:	305c      	adds	r0, #92	@ 0x5c
 800b7e2:	f000 f8b3 	bl	800b94c <memset>
 800b7e6:	4b0b      	ldr	r3, [pc, #44]	@ (800b814 <std+0x50>)
 800b7e8:	6224      	str	r4, [r4, #32]
 800b7ea:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b818 <std+0x54>)
 800b7ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b81c <std+0x58>)
 800b7f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7f4:	4b0a      	ldr	r3, [pc, #40]	@ (800b820 <std+0x5c>)
 800b7f6:	6323      	str	r3, [r4, #48]	@ 0x30
 800b7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b824 <std+0x60>)
 800b7fa:	429c      	cmp	r4, r3
 800b7fc:	d005      	beq.n	800b80a <std+0x46>
 800b7fe:	4b0a      	ldr	r3, [pc, #40]	@ (800b828 <std+0x64>)
 800b800:	429c      	cmp	r4, r3
 800b802:	d002      	beq.n	800b80a <std+0x46>
 800b804:	4b09      	ldr	r3, [pc, #36]	@ (800b82c <std+0x68>)
 800b806:	429c      	cmp	r4, r3
 800b808:	d103      	bne.n	800b812 <std+0x4e>
 800b80a:	0020      	movs	r0, r4
 800b80c:	3058      	adds	r0, #88	@ 0x58
 800b80e:	f000 f97f 	bl	800bb10 <__retarget_lock_init_recursive>
 800b812:	bd10      	pop	{r4, pc}
 800b814:	0800b729 	.word	0x0800b729
 800b818:	0800b755 	.word	0x0800b755
 800b81c:	0800b78d 	.word	0x0800b78d
 800b820:	0800b7b9 	.word	0x0800b7b9
 800b824:	200007f0 	.word	0x200007f0
 800b828:	20000858 	.word	0x20000858
 800b82c:	200008c0 	.word	0x200008c0

0800b830 <stdio_exit_handler>:
 800b830:	b510      	push	{r4, lr}
 800b832:	4a03      	ldr	r2, [pc, #12]	@ (800b840 <stdio_exit_handler+0x10>)
 800b834:	4903      	ldr	r1, [pc, #12]	@ (800b844 <stdio_exit_handler+0x14>)
 800b836:	4804      	ldr	r0, [pc, #16]	@ (800b848 <stdio_exit_handler+0x18>)
 800b838:	f000 f86c 	bl	800b914 <_fwalk_sglue>
 800b83c:	bd10      	pop	{r4, pc}
 800b83e:	46c0      	nop			@ (mov r8, r8)
 800b840:	2000000c 	.word	0x2000000c
 800b844:	0800d4fd 	.word	0x0800d4fd
 800b848:	2000001c 	.word	0x2000001c

0800b84c <cleanup_stdio>:
 800b84c:	6841      	ldr	r1, [r0, #4]
 800b84e:	4b0b      	ldr	r3, [pc, #44]	@ (800b87c <cleanup_stdio+0x30>)
 800b850:	b510      	push	{r4, lr}
 800b852:	0004      	movs	r4, r0
 800b854:	4299      	cmp	r1, r3
 800b856:	d001      	beq.n	800b85c <cleanup_stdio+0x10>
 800b858:	f001 fe50 	bl	800d4fc <_fflush_r>
 800b85c:	68a1      	ldr	r1, [r4, #8]
 800b85e:	4b08      	ldr	r3, [pc, #32]	@ (800b880 <cleanup_stdio+0x34>)
 800b860:	4299      	cmp	r1, r3
 800b862:	d002      	beq.n	800b86a <cleanup_stdio+0x1e>
 800b864:	0020      	movs	r0, r4
 800b866:	f001 fe49 	bl	800d4fc <_fflush_r>
 800b86a:	68e1      	ldr	r1, [r4, #12]
 800b86c:	4b05      	ldr	r3, [pc, #20]	@ (800b884 <cleanup_stdio+0x38>)
 800b86e:	4299      	cmp	r1, r3
 800b870:	d002      	beq.n	800b878 <cleanup_stdio+0x2c>
 800b872:	0020      	movs	r0, r4
 800b874:	f001 fe42 	bl	800d4fc <_fflush_r>
 800b878:	bd10      	pop	{r4, pc}
 800b87a:	46c0      	nop			@ (mov r8, r8)
 800b87c:	200007f0 	.word	0x200007f0
 800b880:	20000858 	.word	0x20000858
 800b884:	200008c0 	.word	0x200008c0

0800b888 <global_stdio_init.part.0>:
 800b888:	b510      	push	{r4, lr}
 800b88a:	4b09      	ldr	r3, [pc, #36]	@ (800b8b0 <global_stdio_init.part.0+0x28>)
 800b88c:	4a09      	ldr	r2, [pc, #36]	@ (800b8b4 <global_stdio_init.part.0+0x2c>)
 800b88e:	2104      	movs	r1, #4
 800b890:	601a      	str	r2, [r3, #0]
 800b892:	4809      	ldr	r0, [pc, #36]	@ (800b8b8 <global_stdio_init.part.0+0x30>)
 800b894:	2200      	movs	r2, #0
 800b896:	f7ff ff95 	bl	800b7c4 <std>
 800b89a:	2201      	movs	r2, #1
 800b89c:	2109      	movs	r1, #9
 800b89e:	4807      	ldr	r0, [pc, #28]	@ (800b8bc <global_stdio_init.part.0+0x34>)
 800b8a0:	f7ff ff90 	bl	800b7c4 <std>
 800b8a4:	2202      	movs	r2, #2
 800b8a6:	2112      	movs	r1, #18
 800b8a8:	4805      	ldr	r0, [pc, #20]	@ (800b8c0 <global_stdio_init.part.0+0x38>)
 800b8aa:	f7ff ff8b 	bl	800b7c4 <std>
 800b8ae:	bd10      	pop	{r4, pc}
 800b8b0:	20000928 	.word	0x20000928
 800b8b4:	0800b831 	.word	0x0800b831
 800b8b8:	200007f0 	.word	0x200007f0
 800b8bc:	20000858 	.word	0x20000858
 800b8c0:	200008c0 	.word	0x200008c0

0800b8c4 <__sfp_lock_acquire>:
 800b8c4:	b510      	push	{r4, lr}
 800b8c6:	4802      	ldr	r0, [pc, #8]	@ (800b8d0 <__sfp_lock_acquire+0xc>)
 800b8c8:	f000 f923 	bl	800bb12 <__retarget_lock_acquire_recursive>
 800b8cc:	bd10      	pop	{r4, pc}
 800b8ce:	46c0      	nop			@ (mov r8, r8)
 800b8d0:	2000092d 	.word	0x2000092d

0800b8d4 <__sfp_lock_release>:
 800b8d4:	b510      	push	{r4, lr}
 800b8d6:	4802      	ldr	r0, [pc, #8]	@ (800b8e0 <__sfp_lock_release+0xc>)
 800b8d8:	f000 f91c 	bl	800bb14 <__retarget_lock_release_recursive>
 800b8dc:	bd10      	pop	{r4, pc}
 800b8de:	46c0      	nop			@ (mov r8, r8)
 800b8e0:	2000092d 	.word	0x2000092d

0800b8e4 <__sinit>:
 800b8e4:	b510      	push	{r4, lr}
 800b8e6:	0004      	movs	r4, r0
 800b8e8:	f7ff ffec 	bl	800b8c4 <__sfp_lock_acquire>
 800b8ec:	6a23      	ldr	r3, [r4, #32]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d002      	beq.n	800b8f8 <__sinit+0x14>
 800b8f2:	f7ff ffef 	bl	800b8d4 <__sfp_lock_release>
 800b8f6:	bd10      	pop	{r4, pc}
 800b8f8:	4b04      	ldr	r3, [pc, #16]	@ (800b90c <__sinit+0x28>)
 800b8fa:	6223      	str	r3, [r4, #32]
 800b8fc:	4b04      	ldr	r3, [pc, #16]	@ (800b910 <__sinit+0x2c>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1f6      	bne.n	800b8f2 <__sinit+0xe>
 800b904:	f7ff ffc0 	bl	800b888 <global_stdio_init.part.0>
 800b908:	e7f3      	b.n	800b8f2 <__sinit+0xe>
 800b90a:	46c0      	nop			@ (mov r8, r8)
 800b90c:	0800b84d 	.word	0x0800b84d
 800b910:	20000928 	.word	0x20000928

0800b914 <_fwalk_sglue>:
 800b914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b916:	0014      	movs	r4, r2
 800b918:	2600      	movs	r6, #0
 800b91a:	9000      	str	r0, [sp, #0]
 800b91c:	9101      	str	r1, [sp, #4]
 800b91e:	68a5      	ldr	r5, [r4, #8]
 800b920:	6867      	ldr	r7, [r4, #4]
 800b922:	3f01      	subs	r7, #1
 800b924:	d504      	bpl.n	800b930 <_fwalk_sglue+0x1c>
 800b926:	6824      	ldr	r4, [r4, #0]
 800b928:	2c00      	cmp	r4, #0
 800b92a:	d1f8      	bne.n	800b91e <_fwalk_sglue+0xa>
 800b92c:	0030      	movs	r0, r6
 800b92e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b930:	89ab      	ldrh	r3, [r5, #12]
 800b932:	2b01      	cmp	r3, #1
 800b934:	d908      	bls.n	800b948 <_fwalk_sglue+0x34>
 800b936:	220e      	movs	r2, #14
 800b938:	5eab      	ldrsh	r3, [r5, r2]
 800b93a:	3301      	adds	r3, #1
 800b93c:	d004      	beq.n	800b948 <_fwalk_sglue+0x34>
 800b93e:	0029      	movs	r1, r5
 800b940:	9800      	ldr	r0, [sp, #0]
 800b942:	9b01      	ldr	r3, [sp, #4]
 800b944:	4798      	blx	r3
 800b946:	4306      	orrs	r6, r0
 800b948:	3568      	adds	r5, #104	@ 0x68
 800b94a:	e7ea      	b.n	800b922 <_fwalk_sglue+0xe>

0800b94c <memset>:
 800b94c:	0003      	movs	r3, r0
 800b94e:	1882      	adds	r2, r0, r2
 800b950:	4293      	cmp	r3, r2
 800b952:	d100      	bne.n	800b956 <memset+0xa>
 800b954:	4770      	bx	lr
 800b956:	7019      	strb	r1, [r3, #0]
 800b958:	3301      	adds	r3, #1
 800b95a:	e7f9      	b.n	800b950 <memset+0x4>

0800b95c <strncpy>:
 800b95c:	0003      	movs	r3, r0
 800b95e:	b530      	push	{r4, r5, lr}
 800b960:	001d      	movs	r5, r3
 800b962:	2a00      	cmp	r2, #0
 800b964:	d006      	beq.n	800b974 <strncpy+0x18>
 800b966:	780c      	ldrb	r4, [r1, #0]
 800b968:	3a01      	subs	r2, #1
 800b96a:	3301      	adds	r3, #1
 800b96c:	702c      	strb	r4, [r5, #0]
 800b96e:	3101      	adds	r1, #1
 800b970:	2c00      	cmp	r4, #0
 800b972:	d1f5      	bne.n	800b960 <strncpy+0x4>
 800b974:	2100      	movs	r1, #0
 800b976:	189a      	adds	r2, r3, r2
 800b978:	4293      	cmp	r3, r2
 800b97a:	d100      	bne.n	800b97e <strncpy+0x22>
 800b97c:	bd30      	pop	{r4, r5, pc}
 800b97e:	7019      	strb	r1, [r3, #0]
 800b980:	3301      	adds	r3, #1
 800b982:	e7f9      	b.n	800b978 <strncpy+0x1c>

0800b984 <strtok>:
 800b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b986:	4b16      	ldr	r3, [pc, #88]	@ (800b9e0 <strtok+0x5c>)
 800b988:	0005      	movs	r5, r0
 800b98a:	681f      	ldr	r7, [r3, #0]
 800b98c:	000e      	movs	r6, r1
 800b98e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b990:	2c00      	cmp	r4, #0
 800b992:	d11d      	bne.n	800b9d0 <strtok+0x4c>
 800b994:	2050      	movs	r0, #80	@ 0x50
 800b996:	f001 fae5 	bl	800cf64 <malloc>
 800b99a:	1e02      	subs	r2, r0, #0
 800b99c:	6478      	str	r0, [r7, #68]	@ 0x44
 800b99e:	d104      	bne.n	800b9aa <strtok+0x26>
 800b9a0:	215b      	movs	r1, #91	@ 0x5b
 800b9a2:	4b10      	ldr	r3, [pc, #64]	@ (800b9e4 <strtok+0x60>)
 800b9a4:	4810      	ldr	r0, [pc, #64]	@ (800b9e8 <strtok+0x64>)
 800b9a6:	f000 f8e1 	bl	800bb6c <__assert_func>
 800b9aa:	6004      	str	r4, [r0, #0]
 800b9ac:	6044      	str	r4, [r0, #4]
 800b9ae:	6084      	str	r4, [r0, #8]
 800b9b0:	60c4      	str	r4, [r0, #12]
 800b9b2:	6104      	str	r4, [r0, #16]
 800b9b4:	6144      	str	r4, [r0, #20]
 800b9b6:	6184      	str	r4, [r0, #24]
 800b9b8:	6284      	str	r4, [r0, #40]	@ 0x28
 800b9ba:	62c4      	str	r4, [r0, #44]	@ 0x2c
 800b9bc:	6304      	str	r4, [r0, #48]	@ 0x30
 800b9be:	6344      	str	r4, [r0, #52]	@ 0x34
 800b9c0:	6384      	str	r4, [r0, #56]	@ 0x38
 800b9c2:	63c4      	str	r4, [r0, #60]	@ 0x3c
 800b9c4:	6404      	str	r4, [r0, #64]	@ 0x40
 800b9c6:	6444      	str	r4, [r0, #68]	@ 0x44
 800b9c8:	6484      	str	r4, [r0, #72]	@ 0x48
 800b9ca:	64c4      	str	r4, [r0, #76]	@ 0x4c
 800b9cc:	7704      	strb	r4, [r0, #28]
 800b9ce:	6244      	str	r4, [r0, #36]	@ 0x24
 800b9d0:	0031      	movs	r1, r6
 800b9d2:	0028      	movs	r0, r5
 800b9d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	f000 f808 	bl	800b9ec <__strtok_r>
 800b9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9de:	46c0      	nop			@ (mov r8, r8)
 800b9e0:	20000018 	.word	0x20000018
 800b9e4:	0800ee6e 	.word	0x0800ee6e
 800b9e8:	0800ee85 	.word	0x0800ee85

0800b9ec <__strtok_r>:
 800b9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ee:	1e04      	subs	r4, r0, #0
 800b9f0:	d102      	bne.n	800b9f8 <__strtok_r+0xc>
 800b9f2:	6814      	ldr	r4, [r2, #0]
 800b9f4:	2c00      	cmp	r4, #0
 800b9f6:	d009      	beq.n	800ba0c <__strtok_r+0x20>
 800b9f8:	0020      	movs	r0, r4
 800b9fa:	000e      	movs	r6, r1
 800b9fc:	7805      	ldrb	r5, [r0, #0]
 800b9fe:	3401      	adds	r4, #1
 800ba00:	7837      	ldrb	r7, [r6, #0]
 800ba02:	2f00      	cmp	r7, #0
 800ba04:	d104      	bne.n	800ba10 <__strtok_r+0x24>
 800ba06:	2d00      	cmp	r5, #0
 800ba08:	d10d      	bne.n	800ba26 <__strtok_r+0x3a>
 800ba0a:	6015      	str	r5, [r2, #0]
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	e006      	b.n	800ba1e <__strtok_r+0x32>
 800ba10:	3601      	adds	r6, #1
 800ba12:	42bd      	cmp	r5, r7
 800ba14:	d1f4      	bne.n	800ba00 <__strtok_r+0x14>
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1ee      	bne.n	800b9f8 <__strtok_r+0xc>
 800ba1a:	6014      	str	r4, [r2, #0]
 800ba1c:	7003      	strb	r3, [r0, #0]
 800ba1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba20:	3301      	adds	r3, #1
 800ba22:	2d00      	cmp	r5, #0
 800ba24:	d103      	bne.n	800ba2e <__strtok_r+0x42>
 800ba26:	0026      	movs	r6, r4
 800ba28:	000b      	movs	r3, r1
 800ba2a:	7837      	ldrb	r7, [r6, #0]
 800ba2c:	3401      	adds	r4, #1
 800ba2e:	781d      	ldrb	r5, [r3, #0]
 800ba30:	42af      	cmp	r7, r5
 800ba32:	d1f5      	bne.n	800ba20 <__strtok_r+0x34>
 800ba34:	2300      	movs	r3, #0
 800ba36:	0019      	movs	r1, r3
 800ba38:	429f      	cmp	r7, r3
 800ba3a:	d001      	beq.n	800ba40 <__strtok_r+0x54>
 800ba3c:	0023      	movs	r3, r4
 800ba3e:	7031      	strb	r1, [r6, #0]
 800ba40:	6013      	str	r3, [r2, #0]
 800ba42:	e7ec      	b.n	800ba1e <__strtok_r+0x32>

0800ba44 <_lseek_r>:
 800ba44:	b570      	push	{r4, r5, r6, lr}
 800ba46:	0004      	movs	r4, r0
 800ba48:	0008      	movs	r0, r1
 800ba4a:	0011      	movs	r1, r2
 800ba4c:	001a      	movs	r2, r3
 800ba4e:	2300      	movs	r3, #0
 800ba50:	4d05      	ldr	r5, [pc, #20]	@ (800ba68 <_lseek_r+0x24>)
 800ba52:	602b      	str	r3, [r5, #0]
 800ba54:	f7fb fcda 	bl	800740c <_lseek>
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	d103      	bne.n	800ba64 <_lseek_r+0x20>
 800ba5c:	682b      	ldr	r3, [r5, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d000      	beq.n	800ba64 <_lseek_r+0x20>
 800ba62:	6023      	str	r3, [r4, #0]
 800ba64:	bd70      	pop	{r4, r5, r6, pc}
 800ba66:	46c0      	nop			@ (mov r8, r8)
 800ba68:	20000930 	.word	0x20000930

0800ba6c <_read_r>:
 800ba6c:	b570      	push	{r4, r5, r6, lr}
 800ba6e:	0004      	movs	r4, r0
 800ba70:	0008      	movs	r0, r1
 800ba72:	0011      	movs	r1, r2
 800ba74:	001a      	movs	r2, r3
 800ba76:	2300      	movs	r3, #0
 800ba78:	4d05      	ldr	r5, [pc, #20]	@ (800ba90 <_read_r+0x24>)
 800ba7a:	602b      	str	r3, [r5, #0]
 800ba7c:	f7fb fc6c 	bl	8007358 <_read>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d103      	bne.n	800ba8c <_read_r+0x20>
 800ba84:	682b      	ldr	r3, [r5, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d000      	beq.n	800ba8c <_read_r+0x20>
 800ba8a:	6023      	str	r3, [r4, #0]
 800ba8c:	bd70      	pop	{r4, r5, r6, pc}
 800ba8e:	46c0      	nop			@ (mov r8, r8)
 800ba90:	20000930 	.word	0x20000930

0800ba94 <_write_r>:
 800ba94:	b570      	push	{r4, r5, r6, lr}
 800ba96:	0004      	movs	r4, r0
 800ba98:	0008      	movs	r0, r1
 800ba9a:	0011      	movs	r1, r2
 800ba9c:	001a      	movs	r2, r3
 800ba9e:	2300      	movs	r3, #0
 800baa0:	4d05      	ldr	r5, [pc, #20]	@ (800bab8 <_write_r+0x24>)
 800baa2:	602b      	str	r3, [r5, #0]
 800baa4:	f7fb fc75 	bl	8007392 <_write>
 800baa8:	1c43      	adds	r3, r0, #1
 800baaa:	d103      	bne.n	800bab4 <_write_r+0x20>
 800baac:	682b      	ldr	r3, [r5, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d000      	beq.n	800bab4 <_write_r+0x20>
 800bab2:	6023      	str	r3, [r4, #0]
 800bab4:	bd70      	pop	{r4, r5, r6, pc}
 800bab6:	46c0      	nop			@ (mov r8, r8)
 800bab8:	20000930 	.word	0x20000930

0800babc <__errno>:
 800babc:	4b01      	ldr	r3, [pc, #4]	@ (800bac4 <__errno+0x8>)
 800babe:	6818      	ldr	r0, [r3, #0]
 800bac0:	4770      	bx	lr
 800bac2:	46c0      	nop			@ (mov r8, r8)
 800bac4:	20000018 	.word	0x20000018

0800bac8 <__libc_init_array>:
 800bac8:	b570      	push	{r4, r5, r6, lr}
 800baca:	2600      	movs	r6, #0
 800bacc:	4c0c      	ldr	r4, [pc, #48]	@ (800bb00 <__libc_init_array+0x38>)
 800bace:	4d0d      	ldr	r5, [pc, #52]	@ (800bb04 <__libc_init_array+0x3c>)
 800bad0:	1b64      	subs	r4, r4, r5
 800bad2:	10a4      	asrs	r4, r4, #2
 800bad4:	42a6      	cmp	r6, r4
 800bad6:	d109      	bne.n	800baec <__libc_init_array+0x24>
 800bad8:	2600      	movs	r6, #0
 800bada:	f002 fdb5 	bl	800e648 <_init>
 800bade:	4c0a      	ldr	r4, [pc, #40]	@ (800bb08 <__libc_init_array+0x40>)
 800bae0:	4d0a      	ldr	r5, [pc, #40]	@ (800bb0c <__libc_init_array+0x44>)
 800bae2:	1b64      	subs	r4, r4, r5
 800bae4:	10a4      	asrs	r4, r4, #2
 800bae6:	42a6      	cmp	r6, r4
 800bae8:	d105      	bne.n	800baf6 <__libc_init_array+0x2e>
 800baea:	bd70      	pop	{r4, r5, r6, pc}
 800baec:	00b3      	lsls	r3, r6, #2
 800baee:	58eb      	ldr	r3, [r5, r3]
 800baf0:	4798      	blx	r3
 800baf2:	3601      	adds	r6, #1
 800baf4:	e7ee      	b.n	800bad4 <__libc_init_array+0xc>
 800baf6:	00b3      	lsls	r3, r6, #2
 800baf8:	58eb      	ldr	r3, [r5, r3]
 800bafa:	4798      	blx	r3
 800bafc:	3601      	adds	r6, #1
 800bafe:	e7f2      	b.n	800bae6 <__libc_init_array+0x1e>
 800bb00:	0800f22c 	.word	0x0800f22c
 800bb04:	0800f22c 	.word	0x0800f22c
 800bb08:	0800f230 	.word	0x0800f230
 800bb0c:	0800f22c 	.word	0x0800f22c

0800bb10 <__retarget_lock_init_recursive>:
 800bb10:	4770      	bx	lr

0800bb12 <__retarget_lock_acquire_recursive>:
 800bb12:	4770      	bx	lr

0800bb14 <__retarget_lock_release_recursive>:
 800bb14:	4770      	bx	lr
	...

0800bb18 <_localeconv_r>:
 800bb18:	4800      	ldr	r0, [pc, #0]	@ (800bb1c <_localeconv_r+0x4>)
 800bb1a:	4770      	bx	lr
 800bb1c:	20000158 	.word	0x20000158

0800bb20 <_close_r>:
 800bb20:	2300      	movs	r3, #0
 800bb22:	b570      	push	{r4, r5, r6, lr}
 800bb24:	4d06      	ldr	r5, [pc, #24]	@ (800bb40 <_close_r+0x20>)
 800bb26:	0004      	movs	r4, r0
 800bb28:	0008      	movs	r0, r1
 800bb2a:	602b      	str	r3, [r5, #0]
 800bb2c:	f7fb fc4d 	bl	80073ca <_close>
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	d103      	bne.n	800bb3c <_close_r+0x1c>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d000      	beq.n	800bb3c <_close_r+0x1c>
 800bb3a:	6023      	str	r3, [r4, #0]
 800bb3c:	bd70      	pop	{r4, r5, r6, pc}
 800bb3e:	46c0      	nop			@ (mov r8, r8)
 800bb40:	20000930 	.word	0x20000930

0800bb44 <memchr>:
 800bb44:	b2c9      	uxtb	r1, r1
 800bb46:	1882      	adds	r2, r0, r2
 800bb48:	4290      	cmp	r0, r2
 800bb4a:	d101      	bne.n	800bb50 <memchr+0xc>
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	4770      	bx	lr
 800bb50:	7803      	ldrb	r3, [r0, #0]
 800bb52:	428b      	cmp	r3, r1
 800bb54:	d0fb      	beq.n	800bb4e <memchr+0xa>
 800bb56:	3001      	adds	r0, #1
 800bb58:	e7f6      	b.n	800bb48 <memchr+0x4>

0800bb5a <memcpy>:
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	b510      	push	{r4, lr}
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d100      	bne.n	800bb64 <memcpy+0xa>
 800bb62:	bd10      	pop	{r4, pc}
 800bb64:	5ccc      	ldrb	r4, [r1, r3]
 800bb66:	54c4      	strb	r4, [r0, r3]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	e7f8      	b.n	800bb5e <memcpy+0x4>

0800bb6c <__assert_func>:
 800bb6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bb6e:	0014      	movs	r4, r2
 800bb70:	001a      	movs	r2, r3
 800bb72:	4b09      	ldr	r3, [pc, #36]	@ (800bb98 <__assert_func+0x2c>)
 800bb74:	0005      	movs	r5, r0
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	000e      	movs	r6, r1
 800bb7a:	68d8      	ldr	r0, [r3, #12]
 800bb7c:	4b07      	ldr	r3, [pc, #28]	@ (800bb9c <__assert_func+0x30>)
 800bb7e:	2c00      	cmp	r4, #0
 800bb80:	d101      	bne.n	800bb86 <__assert_func+0x1a>
 800bb82:	4b07      	ldr	r3, [pc, #28]	@ (800bba0 <__assert_func+0x34>)
 800bb84:	001c      	movs	r4, r3
 800bb86:	4907      	ldr	r1, [pc, #28]	@ (800bba4 <__assert_func+0x38>)
 800bb88:	9301      	str	r3, [sp, #4]
 800bb8a:	9402      	str	r4, [sp, #8]
 800bb8c:	002b      	movs	r3, r5
 800bb8e:	9600      	str	r6, [sp, #0]
 800bb90:	f002 f8ca 	bl	800dd28 <fiprintf>
 800bb94:	f002 fa40 	bl	800e018 <abort>
 800bb98:	20000018 	.word	0x20000018
 800bb9c:	0800eedf 	.word	0x0800eedf
 800bba0:	0800ef1a 	.word	0x0800ef1a
 800bba4:	0800eeec 	.word	0x0800eeec

0800bba8 <quorem>:
 800bba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbaa:	6903      	ldr	r3, [r0, #16]
 800bbac:	690c      	ldr	r4, [r1, #16]
 800bbae:	b089      	sub	sp, #36	@ 0x24
 800bbb0:	9003      	str	r0, [sp, #12]
 800bbb2:	9106      	str	r1, [sp, #24]
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	42a3      	cmp	r3, r4
 800bbb8:	db63      	blt.n	800bc82 <quorem+0xda>
 800bbba:	000b      	movs	r3, r1
 800bbbc:	3c01      	subs	r4, #1
 800bbbe:	3314      	adds	r3, #20
 800bbc0:	00a5      	lsls	r5, r4, #2
 800bbc2:	9304      	str	r3, [sp, #16]
 800bbc4:	195b      	adds	r3, r3, r5
 800bbc6:	9305      	str	r3, [sp, #20]
 800bbc8:	9b03      	ldr	r3, [sp, #12]
 800bbca:	3314      	adds	r3, #20
 800bbcc:	9301      	str	r3, [sp, #4]
 800bbce:	195d      	adds	r5, r3, r5
 800bbd0:	9b05      	ldr	r3, [sp, #20]
 800bbd2:	682f      	ldr	r7, [r5, #0]
 800bbd4:	681e      	ldr	r6, [r3, #0]
 800bbd6:	0038      	movs	r0, r7
 800bbd8:	3601      	adds	r6, #1
 800bbda:	0031      	movs	r1, r6
 800bbdc:	f7f4 fab8 	bl	8000150 <__udivsi3>
 800bbe0:	9002      	str	r0, [sp, #8]
 800bbe2:	42b7      	cmp	r7, r6
 800bbe4:	d327      	bcc.n	800bc36 <quorem+0x8e>
 800bbe6:	9b04      	ldr	r3, [sp, #16]
 800bbe8:	2700      	movs	r7, #0
 800bbea:	469c      	mov	ip, r3
 800bbec:	9e01      	ldr	r6, [sp, #4]
 800bbee:	9707      	str	r7, [sp, #28]
 800bbf0:	4662      	mov	r2, ip
 800bbf2:	ca08      	ldmia	r2!, {r3}
 800bbf4:	6830      	ldr	r0, [r6, #0]
 800bbf6:	4694      	mov	ip, r2
 800bbf8:	9a02      	ldr	r2, [sp, #8]
 800bbfa:	b299      	uxth	r1, r3
 800bbfc:	4351      	muls	r1, r2
 800bbfe:	0c1b      	lsrs	r3, r3, #16
 800bc00:	4353      	muls	r3, r2
 800bc02:	19c9      	adds	r1, r1, r7
 800bc04:	0c0a      	lsrs	r2, r1, #16
 800bc06:	189b      	adds	r3, r3, r2
 800bc08:	b289      	uxth	r1, r1
 800bc0a:	b282      	uxth	r2, r0
 800bc0c:	1a52      	subs	r2, r2, r1
 800bc0e:	9907      	ldr	r1, [sp, #28]
 800bc10:	0c1f      	lsrs	r7, r3, #16
 800bc12:	1852      	adds	r2, r2, r1
 800bc14:	0c00      	lsrs	r0, r0, #16
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	1411      	asrs	r1, r2, #16
 800bc1a:	1ac3      	subs	r3, r0, r3
 800bc1c:	185b      	adds	r3, r3, r1
 800bc1e:	1419      	asrs	r1, r3, #16
 800bc20:	b292      	uxth	r2, r2
 800bc22:	041b      	lsls	r3, r3, #16
 800bc24:	431a      	orrs	r2, r3
 800bc26:	9b05      	ldr	r3, [sp, #20]
 800bc28:	9107      	str	r1, [sp, #28]
 800bc2a:	c604      	stmia	r6!, {r2}
 800bc2c:	4563      	cmp	r3, ip
 800bc2e:	d2df      	bcs.n	800bbf0 <quorem+0x48>
 800bc30:	682b      	ldr	r3, [r5, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d02b      	beq.n	800bc8e <quorem+0xe6>
 800bc36:	9906      	ldr	r1, [sp, #24]
 800bc38:	9803      	ldr	r0, [sp, #12]
 800bc3a:	f001 ff21 	bl	800da80 <__mcmp>
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	db1e      	blt.n	800bc80 <quorem+0xd8>
 800bc42:	2600      	movs	r6, #0
 800bc44:	9d01      	ldr	r5, [sp, #4]
 800bc46:	9904      	ldr	r1, [sp, #16]
 800bc48:	c901      	ldmia	r1!, {r0}
 800bc4a:	682b      	ldr	r3, [r5, #0]
 800bc4c:	b287      	uxth	r7, r0
 800bc4e:	b29a      	uxth	r2, r3
 800bc50:	1bd2      	subs	r2, r2, r7
 800bc52:	1992      	adds	r2, r2, r6
 800bc54:	0c00      	lsrs	r0, r0, #16
 800bc56:	0c1b      	lsrs	r3, r3, #16
 800bc58:	1a1b      	subs	r3, r3, r0
 800bc5a:	1410      	asrs	r0, r2, #16
 800bc5c:	181b      	adds	r3, r3, r0
 800bc5e:	141e      	asrs	r6, r3, #16
 800bc60:	b292      	uxth	r2, r2
 800bc62:	041b      	lsls	r3, r3, #16
 800bc64:	431a      	orrs	r2, r3
 800bc66:	9b05      	ldr	r3, [sp, #20]
 800bc68:	c504      	stmia	r5!, {r2}
 800bc6a:	428b      	cmp	r3, r1
 800bc6c:	d2ec      	bcs.n	800bc48 <quorem+0xa0>
 800bc6e:	9a01      	ldr	r2, [sp, #4]
 800bc70:	00a3      	lsls	r3, r4, #2
 800bc72:	18d3      	adds	r3, r2, r3
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	2a00      	cmp	r2, #0
 800bc78:	d014      	beq.n	800bca4 <quorem+0xfc>
 800bc7a:	9b02      	ldr	r3, [sp, #8]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	9302      	str	r3, [sp, #8]
 800bc80:	9802      	ldr	r0, [sp, #8]
 800bc82:	b009      	add	sp, #36	@ 0x24
 800bc84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc86:	682b      	ldr	r3, [r5, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d104      	bne.n	800bc96 <quorem+0xee>
 800bc8c:	3c01      	subs	r4, #1
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	3d04      	subs	r5, #4
 800bc92:	42ab      	cmp	r3, r5
 800bc94:	d3f7      	bcc.n	800bc86 <quorem+0xde>
 800bc96:	9b03      	ldr	r3, [sp, #12]
 800bc98:	611c      	str	r4, [r3, #16]
 800bc9a:	e7cc      	b.n	800bc36 <quorem+0x8e>
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	2a00      	cmp	r2, #0
 800bca0:	d104      	bne.n	800bcac <quorem+0x104>
 800bca2:	3c01      	subs	r4, #1
 800bca4:	9a01      	ldr	r2, [sp, #4]
 800bca6:	3b04      	subs	r3, #4
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d3f7      	bcc.n	800bc9c <quorem+0xf4>
 800bcac:	9b03      	ldr	r3, [sp, #12]
 800bcae:	611c      	str	r4, [r3, #16]
 800bcb0:	e7e3      	b.n	800bc7a <quorem+0xd2>
	...

0800bcb4 <_dtoa_r>:
 800bcb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcb6:	0014      	movs	r4, r2
 800bcb8:	001d      	movs	r5, r3
 800bcba:	69c6      	ldr	r6, [r0, #28]
 800bcbc:	b09d      	sub	sp, #116	@ 0x74
 800bcbe:	940a      	str	r4, [sp, #40]	@ 0x28
 800bcc0:	950b      	str	r5, [sp, #44]	@ 0x2c
 800bcc2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800bcc4:	9003      	str	r0, [sp, #12]
 800bcc6:	2e00      	cmp	r6, #0
 800bcc8:	d10f      	bne.n	800bcea <_dtoa_r+0x36>
 800bcca:	2010      	movs	r0, #16
 800bccc:	f001 f94a 	bl	800cf64 <malloc>
 800bcd0:	9b03      	ldr	r3, [sp, #12]
 800bcd2:	1e02      	subs	r2, r0, #0
 800bcd4:	61d8      	str	r0, [r3, #28]
 800bcd6:	d104      	bne.n	800bce2 <_dtoa_r+0x2e>
 800bcd8:	21ef      	movs	r1, #239	@ 0xef
 800bcda:	4bc7      	ldr	r3, [pc, #796]	@ (800bff8 <_dtoa_r+0x344>)
 800bcdc:	48c7      	ldr	r0, [pc, #796]	@ (800bffc <_dtoa_r+0x348>)
 800bcde:	f7ff ff45 	bl	800bb6c <__assert_func>
 800bce2:	6046      	str	r6, [r0, #4]
 800bce4:	6086      	str	r6, [r0, #8]
 800bce6:	6006      	str	r6, [r0, #0]
 800bce8:	60c6      	str	r6, [r0, #12]
 800bcea:	9b03      	ldr	r3, [sp, #12]
 800bcec:	69db      	ldr	r3, [r3, #28]
 800bcee:	6819      	ldr	r1, [r3, #0]
 800bcf0:	2900      	cmp	r1, #0
 800bcf2:	d00b      	beq.n	800bd0c <_dtoa_r+0x58>
 800bcf4:	685a      	ldr	r2, [r3, #4]
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	4093      	lsls	r3, r2
 800bcfa:	604a      	str	r2, [r1, #4]
 800bcfc:	608b      	str	r3, [r1, #8]
 800bcfe:	9803      	ldr	r0, [sp, #12]
 800bd00:	f001 fc7c 	bl	800d5fc <_Bfree>
 800bd04:	2200      	movs	r2, #0
 800bd06:	9b03      	ldr	r3, [sp, #12]
 800bd08:	69db      	ldr	r3, [r3, #28]
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	2d00      	cmp	r5, #0
 800bd0e:	da1e      	bge.n	800bd4e <_dtoa_r+0x9a>
 800bd10:	2301      	movs	r3, #1
 800bd12:	603b      	str	r3, [r7, #0]
 800bd14:	006b      	lsls	r3, r5, #1
 800bd16:	085b      	lsrs	r3, r3, #1
 800bd18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd1a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800bd1c:	4bb8      	ldr	r3, [pc, #736]	@ (800c000 <_dtoa_r+0x34c>)
 800bd1e:	4ab8      	ldr	r2, [pc, #736]	@ (800c000 <_dtoa_r+0x34c>)
 800bd20:	403b      	ands	r3, r7
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d116      	bne.n	800bd54 <_dtoa_r+0xa0>
 800bd26:	4bb7      	ldr	r3, [pc, #732]	@ (800c004 <_dtoa_r+0x350>)
 800bd28:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bd2a:	6013      	str	r3, [r2, #0]
 800bd2c:	033b      	lsls	r3, r7, #12
 800bd2e:	0b1b      	lsrs	r3, r3, #12
 800bd30:	4323      	orrs	r3, r4
 800bd32:	d101      	bne.n	800bd38 <_dtoa_r+0x84>
 800bd34:	f000 fd80 	bl	800c838 <_dtoa_r+0xb84>
 800bd38:	4bb3      	ldr	r3, [pc, #716]	@ (800c008 <_dtoa_r+0x354>)
 800bd3a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800bd3c:	9308      	str	r3, [sp, #32]
 800bd3e:	2a00      	cmp	r2, #0
 800bd40:	d002      	beq.n	800bd48 <_dtoa_r+0x94>
 800bd42:	4bb2      	ldr	r3, [pc, #712]	@ (800c00c <_dtoa_r+0x358>)
 800bd44:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800bd46:	6013      	str	r3, [r2, #0]
 800bd48:	9808      	ldr	r0, [sp, #32]
 800bd4a:	b01d      	add	sp, #116	@ 0x74
 800bd4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd4e:	2300      	movs	r3, #0
 800bd50:	603b      	str	r3, [r7, #0]
 800bd52:	e7e2      	b.n	800bd1a <_dtoa_r+0x66>
 800bd54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bd58:	9212      	str	r2, [sp, #72]	@ 0x48
 800bd5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd5c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bd5e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bd60:	2200      	movs	r2, #0
 800bd62:	2300      	movs	r3, #0
 800bd64:	f7f4 fb7a 	bl	800045c <__aeabi_dcmpeq>
 800bd68:	1e06      	subs	r6, r0, #0
 800bd6a:	d00b      	beq.n	800bd84 <_dtoa_r+0xd0>
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <_dtoa_r+0xca>
 800bd78:	4ba5      	ldr	r3, [pc, #660]	@ (800c010 <_dtoa_r+0x35c>)
 800bd7a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800bd7c:	6013      	str	r3, [r2, #0]
 800bd7e:	4ba5      	ldr	r3, [pc, #660]	@ (800c014 <_dtoa_r+0x360>)
 800bd80:	9308      	str	r3, [sp, #32]
 800bd82:	e7e1      	b.n	800bd48 <_dtoa_r+0x94>
 800bd84:	ab1a      	add	r3, sp, #104	@ 0x68
 800bd86:	9301      	str	r3, [sp, #4]
 800bd88:	ab1b      	add	r3, sp, #108	@ 0x6c
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	9803      	ldr	r0, [sp, #12]
 800bd8e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bd90:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd92:	f001 ff2b 	bl	800dbec <__d2b>
 800bd96:	007a      	lsls	r2, r7, #1
 800bd98:	9005      	str	r0, [sp, #20]
 800bd9a:	0d52      	lsrs	r2, r2, #21
 800bd9c:	d100      	bne.n	800bda0 <_dtoa_r+0xec>
 800bd9e:	e07b      	b.n	800be98 <_dtoa_r+0x1e4>
 800bda0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bda2:	9618      	str	r6, [sp, #96]	@ 0x60
 800bda4:	0319      	lsls	r1, r3, #12
 800bda6:	4b9c      	ldr	r3, [pc, #624]	@ (800c018 <_dtoa_r+0x364>)
 800bda8:	0b09      	lsrs	r1, r1, #12
 800bdaa:	430b      	orrs	r3, r1
 800bdac:	499b      	ldr	r1, [pc, #620]	@ (800c01c <_dtoa_r+0x368>)
 800bdae:	1857      	adds	r7, r2, r1
 800bdb0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bdb2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bdb4:	0019      	movs	r1, r3
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	4b99      	ldr	r3, [pc, #612]	@ (800c020 <_dtoa_r+0x36c>)
 800bdba:	f7f6 ffd5 	bl	8002d68 <__aeabi_dsub>
 800bdbe:	4a99      	ldr	r2, [pc, #612]	@ (800c024 <_dtoa_r+0x370>)
 800bdc0:	4b99      	ldr	r3, [pc, #612]	@ (800c028 <_dtoa_r+0x374>)
 800bdc2:	f7f6 fceb 	bl	800279c <__aeabi_dmul>
 800bdc6:	4a99      	ldr	r2, [pc, #612]	@ (800c02c <_dtoa_r+0x378>)
 800bdc8:	4b99      	ldr	r3, [pc, #612]	@ (800c030 <_dtoa_r+0x37c>)
 800bdca:	f7f5 fce7 	bl	800179c <__aeabi_dadd>
 800bdce:	0004      	movs	r4, r0
 800bdd0:	0038      	movs	r0, r7
 800bdd2:	000d      	movs	r5, r1
 800bdd4:	f7f7 fc30 	bl	8003638 <__aeabi_i2d>
 800bdd8:	4a96      	ldr	r2, [pc, #600]	@ (800c034 <_dtoa_r+0x380>)
 800bdda:	4b97      	ldr	r3, [pc, #604]	@ (800c038 <_dtoa_r+0x384>)
 800bddc:	f7f6 fcde 	bl	800279c <__aeabi_dmul>
 800bde0:	0002      	movs	r2, r0
 800bde2:	000b      	movs	r3, r1
 800bde4:	0020      	movs	r0, r4
 800bde6:	0029      	movs	r1, r5
 800bde8:	f7f5 fcd8 	bl	800179c <__aeabi_dadd>
 800bdec:	0004      	movs	r4, r0
 800bdee:	000d      	movs	r5, r1
 800bdf0:	f7f7 fbe6 	bl	80035c0 <__aeabi_d2iz>
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	9004      	str	r0, [sp, #16]
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	0020      	movs	r0, r4
 800bdfc:	0029      	movs	r1, r5
 800bdfe:	f7f4 fb33 	bl	8000468 <__aeabi_dcmplt>
 800be02:	2800      	cmp	r0, #0
 800be04:	d00b      	beq.n	800be1e <_dtoa_r+0x16a>
 800be06:	9804      	ldr	r0, [sp, #16]
 800be08:	f7f7 fc16 	bl	8003638 <__aeabi_i2d>
 800be0c:	002b      	movs	r3, r5
 800be0e:	0022      	movs	r2, r4
 800be10:	f7f4 fb24 	bl	800045c <__aeabi_dcmpeq>
 800be14:	4243      	negs	r3, r0
 800be16:	4158      	adcs	r0, r3
 800be18:	9b04      	ldr	r3, [sp, #16]
 800be1a:	1a1b      	subs	r3, r3, r0
 800be1c:	9304      	str	r3, [sp, #16]
 800be1e:	2301      	movs	r3, #1
 800be20:	9315      	str	r3, [sp, #84]	@ 0x54
 800be22:	9b04      	ldr	r3, [sp, #16]
 800be24:	2b16      	cmp	r3, #22
 800be26:	d810      	bhi.n	800be4a <_dtoa_r+0x196>
 800be28:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800be2a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800be2c:	9a04      	ldr	r2, [sp, #16]
 800be2e:	4b83      	ldr	r3, [pc, #524]	@ (800c03c <_dtoa_r+0x388>)
 800be30:	00d2      	lsls	r2, r2, #3
 800be32:	189b      	adds	r3, r3, r2
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	685b      	ldr	r3, [r3, #4]
 800be38:	f7f4 fb16 	bl	8000468 <__aeabi_dcmplt>
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d047      	beq.n	800bed0 <_dtoa_r+0x21c>
 800be40:	9b04      	ldr	r3, [sp, #16]
 800be42:	3b01      	subs	r3, #1
 800be44:	9304      	str	r3, [sp, #16]
 800be46:	2300      	movs	r3, #0
 800be48:	9315      	str	r3, [sp, #84]	@ 0x54
 800be4a:	2200      	movs	r2, #0
 800be4c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800be4e:	9206      	str	r2, [sp, #24]
 800be50:	1bdb      	subs	r3, r3, r7
 800be52:	1e5a      	subs	r2, r3, #1
 800be54:	d53e      	bpl.n	800bed4 <_dtoa_r+0x220>
 800be56:	2201      	movs	r2, #1
 800be58:	1ad3      	subs	r3, r2, r3
 800be5a:	9306      	str	r3, [sp, #24]
 800be5c:	2300      	movs	r3, #0
 800be5e:	930d      	str	r3, [sp, #52]	@ 0x34
 800be60:	9b04      	ldr	r3, [sp, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	db38      	blt.n	800bed8 <_dtoa_r+0x224>
 800be66:	9a04      	ldr	r2, [sp, #16]
 800be68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be6a:	4694      	mov	ip, r2
 800be6c:	4463      	add	r3, ip
 800be6e:	930d      	str	r3, [sp, #52]	@ 0x34
 800be70:	2300      	movs	r3, #0
 800be72:	9214      	str	r2, [sp, #80]	@ 0x50
 800be74:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be76:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800be78:	2401      	movs	r4, #1
 800be7a:	2b09      	cmp	r3, #9
 800be7c:	d862      	bhi.n	800bf44 <_dtoa_r+0x290>
 800be7e:	2b05      	cmp	r3, #5
 800be80:	dd02      	ble.n	800be88 <_dtoa_r+0x1d4>
 800be82:	2400      	movs	r4, #0
 800be84:	3b04      	subs	r3, #4
 800be86:	9322      	str	r3, [sp, #136]	@ 0x88
 800be88:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800be8a:	1e98      	subs	r0, r3, #2
 800be8c:	2803      	cmp	r0, #3
 800be8e:	d863      	bhi.n	800bf58 <_dtoa_r+0x2a4>
 800be90:	f7f4 f94a 	bl	8000128 <__gnu_thumb1_case_uqi>
 800be94:	2b385654 	.word	0x2b385654
 800be98:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800be9a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800be9c:	18f6      	adds	r6, r6, r3
 800be9e:	4b68      	ldr	r3, [pc, #416]	@ (800c040 <_dtoa_r+0x38c>)
 800bea0:	18f2      	adds	r2, r6, r3
 800bea2:	2a20      	cmp	r2, #32
 800bea4:	dd0f      	ble.n	800bec6 <_dtoa_r+0x212>
 800bea6:	2340      	movs	r3, #64	@ 0x40
 800bea8:	1a9b      	subs	r3, r3, r2
 800beaa:	409f      	lsls	r7, r3
 800beac:	4b65      	ldr	r3, [pc, #404]	@ (800c044 <_dtoa_r+0x390>)
 800beae:	0038      	movs	r0, r7
 800beb0:	18f3      	adds	r3, r6, r3
 800beb2:	40dc      	lsrs	r4, r3
 800beb4:	4320      	orrs	r0, r4
 800beb6:	f7f7 fbed 	bl	8003694 <__aeabi_ui2d>
 800beba:	2201      	movs	r2, #1
 800bebc:	4b62      	ldr	r3, [pc, #392]	@ (800c048 <_dtoa_r+0x394>)
 800bebe:	1e77      	subs	r7, r6, #1
 800bec0:	18cb      	adds	r3, r1, r3
 800bec2:	9218      	str	r2, [sp, #96]	@ 0x60
 800bec4:	e776      	b.n	800bdb4 <_dtoa_r+0x100>
 800bec6:	2320      	movs	r3, #32
 800bec8:	0020      	movs	r0, r4
 800beca:	1a9b      	subs	r3, r3, r2
 800becc:	4098      	lsls	r0, r3
 800bece:	e7f2      	b.n	800beb6 <_dtoa_r+0x202>
 800bed0:	9015      	str	r0, [sp, #84]	@ 0x54
 800bed2:	e7ba      	b.n	800be4a <_dtoa_r+0x196>
 800bed4:	920d      	str	r2, [sp, #52]	@ 0x34
 800bed6:	e7c3      	b.n	800be60 <_dtoa_r+0x1ac>
 800bed8:	9b06      	ldr	r3, [sp, #24]
 800beda:	9a04      	ldr	r2, [sp, #16]
 800bedc:	1a9b      	subs	r3, r3, r2
 800bede:	9306      	str	r3, [sp, #24]
 800bee0:	4253      	negs	r3, r2
 800bee2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bee4:	2300      	movs	r3, #0
 800bee6:	9314      	str	r3, [sp, #80]	@ 0x50
 800bee8:	e7c5      	b.n	800be76 <_dtoa_r+0x1c2>
 800beea:	2301      	movs	r3, #1
 800beec:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800beee:	9310      	str	r3, [sp, #64]	@ 0x40
 800bef0:	4694      	mov	ip, r2
 800bef2:	9b04      	ldr	r3, [sp, #16]
 800bef4:	4463      	add	r3, ip
 800bef6:	930e      	str	r3, [sp, #56]	@ 0x38
 800bef8:	3301      	adds	r3, #1
 800befa:	9309      	str	r3, [sp, #36]	@ 0x24
 800befc:	2b00      	cmp	r3, #0
 800befe:	dc08      	bgt.n	800bf12 <_dtoa_r+0x25e>
 800bf00:	2301      	movs	r3, #1
 800bf02:	e006      	b.n	800bf12 <_dtoa_r+0x25e>
 800bf04:	2301      	movs	r3, #1
 800bf06:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf08:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	dd28      	ble.n	800bf60 <_dtoa_r+0x2ac>
 800bf0e:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf10:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf12:	9a03      	ldr	r2, [sp, #12]
 800bf14:	2100      	movs	r1, #0
 800bf16:	69d0      	ldr	r0, [r2, #28]
 800bf18:	2204      	movs	r2, #4
 800bf1a:	0015      	movs	r5, r2
 800bf1c:	3514      	adds	r5, #20
 800bf1e:	429d      	cmp	r5, r3
 800bf20:	d923      	bls.n	800bf6a <_dtoa_r+0x2b6>
 800bf22:	6041      	str	r1, [r0, #4]
 800bf24:	9803      	ldr	r0, [sp, #12]
 800bf26:	f001 fb25 	bl	800d574 <_Balloc>
 800bf2a:	9008      	str	r0, [sp, #32]
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	d11f      	bne.n	800bf70 <_dtoa_r+0x2bc>
 800bf30:	21b0      	movs	r1, #176	@ 0xb0
 800bf32:	4b46      	ldr	r3, [pc, #280]	@ (800c04c <_dtoa_r+0x398>)
 800bf34:	4831      	ldr	r0, [pc, #196]	@ (800bffc <_dtoa_r+0x348>)
 800bf36:	9a08      	ldr	r2, [sp, #32]
 800bf38:	31ff      	adds	r1, #255	@ 0xff
 800bf3a:	e6d0      	b.n	800bcde <_dtoa_r+0x2a>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	e7e2      	b.n	800bf06 <_dtoa_r+0x252>
 800bf40:	2300      	movs	r3, #0
 800bf42:	e7d3      	b.n	800beec <_dtoa_r+0x238>
 800bf44:	2300      	movs	r3, #0
 800bf46:	9410      	str	r4, [sp, #64]	@ 0x40
 800bf48:	9322      	str	r3, [sp, #136]	@ 0x88
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf50:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf52:	3313      	adds	r3, #19
 800bf54:	9223      	str	r2, [sp, #140]	@ 0x8c
 800bf56:	e7dc      	b.n	800bf12 <_dtoa_r+0x25e>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf5c:	3b02      	subs	r3, #2
 800bf5e:	e7f5      	b.n	800bf4c <_dtoa_r+0x298>
 800bf60:	2301      	movs	r3, #1
 800bf62:	001a      	movs	r2, r3
 800bf64:	930e      	str	r3, [sp, #56]	@ 0x38
 800bf66:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf68:	e7f4      	b.n	800bf54 <_dtoa_r+0x2a0>
 800bf6a:	3101      	adds	r1, #1
 800bf6c:	0052      	lsls	r2, r2, #1
 800bf6e:	e7d4      	b.n	800bf1a <_dtoa_r+0x266>
 800bf70:	9b03      	ldr	r3, [sp, #12]
 800bf72:	9a08      	ldr	r2, [sp, #32]
 800bf74:	69db      	ldr	r3, [r3, #28]
 800bf76:	601a      	str	r2, [r3, #0]
 800bf78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf7a:	2b0e      	cmp	r3, #14
 800bf7c:	d900      	bls.n	800bf80 <_dtoa_r+0x2cc>
 800bf7e:	e0d6      	b.n	800c12e <_dtoa_r+0x47a>
 800bf80:	2c00      	cmp	r4, #0
 800bf82:	d100      	bne.n	800bf86 <_dtoa_r+0x2d2>
 800bf84:	e0d3      	b.n	800c12e <_dtoa_r+0x47a>
 800bf86:	9b04      	ldr	r3, [sp, #16]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	dd63      	ble.n	800c054 <_dtoa_r+0x3a0>
 800bf8c:	210f      	movs	r1, #15
 800bf8e:	9a04      	ldr	r2, [sp, #16]
 800bf90:	4b2a      	ldr	r3, [pc, #168]	@ (800c03c <_dtoa_r+0x388>)
 800bf92:	400a      	ands	r2, r1
 800bf94:	00d2      	lsls	r2, r2, #3
 800bf96:	189b      	adds	r3, r3, r2
 800bf98:	681e      	ldr	r6, [r3, #0]
 800bf9a:	685f      	ldr	r7, [r3, #4]
 800bf9c:	9b04      	ldr	r3, [sp, #16]
 800bf9e:	2402      	movs	r4, #2
 800bfa0:	111d      	asrs	r5, r3, #4
 800bfa2:	05db      	lsls	r3, r3, #23
 800bfa4:	d50a      	bpl.n	800bfbc <_dtoa_r+0x308>
 800bfa6:	4b2a      	ldr	r3, [pc, #168]	@ (800c050 <_dtoa_r+0x39c>)
 800bfa8:	400d      	ands	r5, r1
 800bfaa:	6a1a      	ldr	r2, [r3, #32]
 800bfac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfae:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bfb0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bfb2:	f7f5 ffb9 	bl	8001f28 <__aeabi_ddiv>
 800bfb6:	900a      	str	r0, [sp, #40]	@ 0x28
 800bfb8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bfba:	3401      	adds	r4, #1
 800bfbc:	4b24      	ldr	r3, [pc, #144]	@ (800c050 <_dtoa_r+0x39c>)
 800bfbe:	930c      	str	r3, [sp, #48]	@ 0x30
 800bfc0:	2d00      	cmp	r5, #0
 800bfc2:	d108      	bne.n	800bfd6 <_dtoa_r+0x322>
 800bfc4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bfc6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bfc8:	0032      	movs	r2, r6
 800bfca:	003b      	movs	r3, r7
 800bfcc:	f7f5 ffac 	bl	8001f28 <__aeabi_ddiv>
 800bfd0:	900a      	str	r0, [sp, #40]	@ 0x28
 800bfd2:	910b      	str	r1, [sp, #44]	@ 0x2c
 800bfd4:	e059      	b.n	800c08a <_dtoa_r+0x3d6>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	421d      	tst	r5, r3
 800bfda:	d009      	beq.n	800bff0 <_dtoa_r+0x33c>
 800bfdc:	18e4      	adds	r4, r4, r3
 800bfde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bfe0:	0030      	movs	r0, r6
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	0039      	movs	r1, r7
 800bfe8:	f7f6 fbd8 	bl	800279c <__aeabi_dmul>
 800bfec:	0006      	movs	r6, r0
 800bfee:	000f      	movs	r7, r1
 800bff0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bff2:	106d      	asrs	r5, r5, #1
 800bff4:	3308      	adds	r3, #8
 800bff6:	e7e2      	b.n	800bfbe <_dtoa_r+0x30a>
 800bff8:	0800ee6e 	.word	0x0800ee6e
 800bffc:	0800ef28 	.word	0x0800ef28
 800c000:	7ff00000 	.word	0x7ff00000
 800c004:	0000270f 	.word	0x0000270f
 800c008:	0800ef24 	.word	0x0800ef24
 800c00c:	0800ef27 	.word	0x0800ef27
 800c010:	0800efb9 	.word	0x0800efb9
 800c014:	0800efb8 	.word	0x0800efb8
 800c018:	3ff00000 	.word	0x3ff00000
 800c01c:	fffffc01 	.word	0xfffffc01
 800c020:	3ff80000 	.word	0x3ff80000
 800c024:	636f4361 	.word	0x636f4361
 800c028:	3fd287a7 	.word	0x3fd287a7
 800c02c:	8b60c8b3 	.word	0x8b60c8b3
 800c030:	3fc68a28 	.word	0x3fc68a28
 800c034:	509f79fb 	.word	0x509f79fb
 800c038:	3fd34413 	.word	0x3fd34413
 800c03c:	0800f058 	.word	0x0800f058
 800c040:	00000432 	.word	0x00000432
 800c044:	00000412 	.word	0x00000412
 800c048:	fe100000 	.word	0xfe100000
 800c04c:	0800ef80 	.word	0x0800ef80
 800c050:	0800f030 	.word	0x0800f030
 800c054:	9b04      	ldr	r3, [sp, #16]
 800c056:	2402      	movs	r4, #2
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d016      	beq.n	800c08a <_dtoa_r+0x3d6>
 800c05c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c05e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c060:	220f      	movs	r2, #15
 800c062:	425d      	negs	r5, r3
 800c064:	402a      	ands	r2, r5
 800c066:	4bd5      	ldr	r3, [pc, #852]	@ (800c3bc <_dtoa_r+0x708>)
 800c068:	00d2      	lsls	r2, r2, #3
 800c06a:	189b      	adds	r3, r3, r2
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	f7f6 fb94 	bl	800279c <__aeabi_dmul>
 800c074:	2701      	movs	r7, #1
 800c076:	2300      	movs	r3, #0
 800c078:	900a      	str	r0, [sp, #40]	@ 0x28
 800c07a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c07c:	4ed0      	ldr	r6, [pc, #832]	@ (800c3c0 <_dtoa_r+0x70c>)
 800c07e:	112d      	asrs	r5, r5, #4
 800c080:	2d00      	cmp	r5, #0
 800c082:	d000      	beq.n	800c086 <_dtoa_r+0x3d2>
 800c084:	e095      	b.n	800c1b2 <_dtoa_r+0x4fe>
 800c086:	2b00      	cmp	r3, #0
 800c088:	d1a2      	bne.n	800bfd0 <_dtoa_r+0x31c>
 800c08a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c08c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c08e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c090:	2b00      	cmp	r3, #0
 800c092:	d100      	bne.n	800c096 <_dtoa_r+0x3e2>
 800c094:	e098      	b.n	800c1c8 <_dtoa_r+0x514>
 800c096:	2200      	movs	r2, #0
 800c098:	0030      	movs	r0, r6
 800c09a:	0039      	movs	r1, r7
 800c09c:	4bc9      	ldr	r3, [pc, #804]	@ (800c3c4 <_dtoa_r+0x710>)
 800c09e:	f7f4 f9e3 	bl	8000468 <__aeabi_dcmplt>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d100      	bne.n	800c0a8 <_dtoa_r+0x3f4>
 800c0a6:	e08f      	b.n	800c1c8 <_dtoa_r+0x514>
 800c0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d100      	bne.n	800c0b0 <_dtoa_r+0x3fc>
 800c0ae:	e08b      	b.n	800c1c8 <_dtoa_r+0x514>
 800c0b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	dd37      	ble.n	800c126 <_dtoa_r+0x472>
 800c0b6:	9b04      	ldr	r3, [sp, #16]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800c0be:	0030      	movs	r0, r6
 800c0c0:	4bc1      	ldr	r3, [pc, #772]	@ (800c3c8 <_dtoa_r+0x714>)
 800c0c2:	0039      	movs	r1, r7
 800c0c4:	f7f6 fb6a 	bl	800279c <__aeabi_dmul>
 800c0c8:	900a      	str	r0, [sp, #40]	@ 0x28
 800c0ca:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c0cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c0ce:	3401      	adds	r4, #1
 800c0d0:	0020      	movs	r0, r4
 800c0d2:	9311      	str	r3, [sp, #68]	@ 0x44
 800c0d4:	f7f7 fab0 	bl	8003638 <__aeabi_i2d>
 800c0d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0dc:	f7f6 fb5e 	bl	800279c <__aeabi_dmul>
 800c0e0:	4bba      	ldr	r3, [pc, #744]	@ (800c3cc <_dtoa_r+0x718>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f7f5 fb5a 	bl	800179c <__aeabi_dadd>
 800c0e8:	4bb9      	ldr	r3, [pc, #740]	@ (800c3d0 <_dtoa_r+0x71c>)
 800c0ea:	0006      	movs	r6, r0
 800c0ec:	18cf      	adds	r7, r1, r3
 800c0ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d16d      	bne.n	800c1d0 <_dtoa_r+0x51c>
 800c0f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c0f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	4bb6      	ldr	r3, [pc, #728]	@ (800c3d4 <_dtoa_r+0x720>)
 800c0fc:	f7f6 fe34 	bl	8002d68 <__aeabi_dsub>
 800c100:	0032      	movs	r2, r6
 800c102:	003b      	movs	r3, r7
 800c104:	0004      	movs	r4, r0
 800c106:	000d      	movs	r5, r1
 800c108:	f7f4 f9c2 	bl	8000490 <__aeabi_dcmpgt>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d000      	beq.n	800c112 <_dtoa_r+0x45e>
 800c110:	e2b6      	b.n	800c680 <_dtoa_r+0x9cc>
 800c112:	2180      	movs	r1, #128	@ 0x80
 800c114:	0609      	lsls	r1, r1, #24
 800c116:	187b      	adds	r3, r7, r1
 800c118:	0032      	movs	r2, r6
 800c11a:	0020      	movs	r0, r4
 800c11c:	0029      	movs	r1, r5
 800c11e:	f7f4 f9a3 	bl	8000468 <__aeabi_dcmplt>
 800c122:	2800      	cmp	r0, #0
 800c124:	d128      	bne.n	800c178 <_dtoa_r+0x4c4>
 800c126:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c128:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800c12a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c12c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c12e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800c130:	2b00      	cmp	r3, #0
 800c132:	da00      	bge.n	800c136 <_dtoa_r+0x482>
 800c134:	e174      	b.n	800c420 <_dtoa_r+0x76c>
 800c136:	9a04      	ldr	r2, [sp, #16]
 800c138:	2a0e      	cmp	r2, #14
 800c13a:	dd00      	ble.n	800c13e <_dtoa_r+0x48a>
 800c13c:	e170      	b.n	800c420 <_dtoa_r+0x76c>
 800c13e:	4b9f      	ldr	r3, [pc, #636]	@ (800c3bc <_dtoa_r+0x708>)
 800c140:	00d2      	lsls	r2, r2, #3
 800c142:	189b      	adds	r3, r3, r2
 800c144:	685c      	ldr	r4, [r3, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	9306      	str	r3, [sp, #24]
 800c14a:	9407      	str	r4, [sp, #28]
 800c14c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c14e:	2b00      	cmp	r3, #0
 800c150:	db00      	blt.n	800c154 <_dtoa_r+0x4a0>
 800c152:	e0e7      	b.n	800c324 <_dtoa_r+0x670>
 800c154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c156:	2b00      	cmp	r3, #0
 800c158:	dd00      	ble.n	800c15c <_dtoa_r+0x4a8>
 800c15a:	e0e3      	b.n	800c324 <_dtoa_r+0x670>
 800c15c:	d10c      	bne.n	800c178 <_dtoa_r+0x4c4>
 800c15e:	9806      	ldr	r0, [sp, #24]
 800c160:	9907      	ldr	r1, [sp, #28]
 800c162:	2200      	movs	r2, #0
 800c164:	4b9b      	ldr	r3, [pc, #620]	@ (800c3d4 <_dtoa_r+0x720>)
 800c166:	f7f6 fb19 	bl	800279c <__aeabi_dmul>
 800c16a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c16c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c16e:	f7f4 f999 	bl	80004a4 <__aeabi_dcmpge>
 800c172:	2800      	cmp	r0, #0
 800c174:	d100      	bne.n	800c178 <_dtoa_r+0x4c4>
 800c176:	e286      	b.n	800c686 <_dtoa_r+0x9d2>
 800c178:	2600      	movs	r6, #0
 800c17a:	0037      	movs	r7, r6
 800c17c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c17e:	9c08      	ldr	r4, [sp, #32]
 800c180:	43db      	mvns	r3, r3
 800c182:	930c      	str	r3, [sp, #48]	@ 0x30
 800c184:	9704      	str	r7, [sp, #16]
 800c186:	2700      	movs	r7, #0
 800c188:	0031      	movs	r1, r6
 800c18a:	9803      	ldr	r0, [sp, #12]
 800c18c:	f001 fa36 	bl	800d5fc <_Bfree>
 800c190:	9b04      	ldr	r3, [sp, #16]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d100      	bne.n	800c198 <_dtoa_r+0x4e4>
 800c196:	e0bb      	b.n	800c310 <_dtoa_r+0x65c>
 800c198:	2f00      	cmp	r7, #0
 800c19a:	d005      	beq.n	800c1a8 <_dtoa_r+0x4f4>
 800c19c:	429f      	cmp	r7, r3
 800c19e:	d003      	beq.n	800c1a8 <_dtoa_r+0x4f4>
 800c1a0:	0039      	movs	r1, r7
 800c1a2:	9803      	ldr	r0, [sp, #12]
 800c1a4:	f001 fa2a 	bl	800d5fc <_Bfree>
 800c1a8:	9904      	ldr	r1, [sp, #16]
 800c1aa:	9803      	ldr	r0, [sp, #12]
 800c1ac:	f001 fa26 	bl	800d5fc <_Bfree>
 800c1b0:	e0ae      	b.n	800c310 <_dtoa_r+0x65c>
 800c1b2:	423d      	tst	r5, r7
 800c1b4:	d005      	beq.n	800c1c2 <_dtoa_r+0x50e>
 800c1b6:	6832      	ldr	r2, [r6, #0]
 800c1b8:	6873      	ldr	r3, [r6, #4]
 800c1ba:	f7f6 faef 	bl	800279c <__aeabi_dmul>
 800c1be:	003b      	movs	r3, r7
 800c1c0:	3401      	adds	r4, #1
 800c1c2:	106d      	asrs	r5, r5, #1
 800c1c4:	3608      	adds	r6, #8
 800c1c6:	e75b      	b.n	800c080 <_dtoa_r+0x3cc>
 800c1c8:	9b04      	ldr	r3, [sp, #16]
 800c1ca:	930c      	str	r3, [sp, #48]	@ 0x30
 800c1cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1ce:	e77f      	b.n	800c0d0 <_dtoa_r+0x41c>
 800c1d0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c1d2:	4b7a      	ldr	r3, [pc, #488]	@ (800c3bc <_dtoa_r+0x708>)
 800c1d4:	3a01      	subs	r2, #1
 800c1d6:	00d2      	lsls	r2, r2, #3
 800c1d8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c1da:	189b      	adds	r3, r3, r2
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	2900      	cmp	r1, #0
 800c1e2:	d04c      	beq.n	800c27e <_dtoa_r+0x5ca>
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	497c      	ldr	r1, [pc, #496]	@ (800c3d8 <_dtoa_r+0x724>)
 800c1e8:	f7f5 fe9e 	bl	8001f28 <__aeabi_ddiv>
 800c1ec:	0032      	movs	r2, r6
 800c1ee:	003b      	movs	r3, r7
 800c1f0:	f7f6 fdba 	bl	8002d68 <__aeabi_dsub>
 800c1f4:	9a08      	ldr	r2, [sp, #32]
 800c1f6:	0006      	movs	r6, r0
 800c1f8:	4694      	mov	ip, r2
 800c1fa:	000f      	movs	r7, r1
 800c1fc:	9b08      	ldr	r3, [sp, #32]
 800c1fe:	9316      	str	r3, [sp, #88]	@ 0x58
 800c200:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c202:	4463      	add	r3, ip
 800c204:	9311      	str	r3, [sp, #68]	@ 0x44
 800c206:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c208:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c20a:	f7f7 f9d9 	bl	80035c0 <__aeabi_d2iz>
 800c20e:	0005      	movs	r5, r0
 800c210:	f7f7 fa12 	bl	8003638 <__aeabi_i2d>
 800c214:	0002      	movs	r2, r0
 800c216:	000b      	movs	r3, r1
 800c218:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c21a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c21c:	f7f6 fda4 	bl	8002d68 <__aeabi_dsub>
 800c220:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c222:	3530      	adds	r5, #48	@ 0x30
 800c224:	1c5c      	adds	r4, r3, #1
 800c226:	701d      	strb	r5, [r3, #0]
 800c228:	0032      	movs	r2, r6
 800c22a:	003b      	movs	r3, r7
 800c22c:	900a      	str	r0, [sp, #40]	@ 0x28
 800c22e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c230:	f7f4 f91a 	bl	8000468 <__aeabi_dcmplt>
 800c234:	2800      	cmp	r0, #0
 800c236:	d16b      	bne.n	800c310 <_dtoa_r+0x65c>
 800c238:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c23a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c23c:	2000      	movs	r0, #0
 800c23e:	4961      	ldr	r1, [pc, #388]	@ (800c3c4 <_dtoa_r+0x710>)
 800c240:	f7f6 fd92 	bl	8002d68 <__aeabi_dsub>
 800c244:	0032      	movs	r2, r6
 800c246:	003b      	movs	r3, r7
 800c248:	f7f4 f90e 	bl	8000468 <__aeabi_dcmplt>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	d000      	beq.n	800c252 <_dtoa_r+0x59e>
 800c250:	e0c6      	b.n	800c3e0 <_dtoa_r+0x72c>
 800c252:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c254:	42a3      	cmp	r3, r4
 800c256:	d100      	bne.n	800c25a <_dtoa_r+0x5a6>
 800c258:	e765      	b.n	800c126 <_dtoa_r+0x472>
 800c25a:	2200      	movs	r2, #0
 800c25c:	0030      	movs	r0, r6
 800c25e:	0039      	movs	r1, r7
 800c260:	4b59      	ldr	r3, [pc, #356]	@ (800c3c8 <_dtoa_r+0x714>)
 800c262:	f7f6 fa9b 	bl	800279c <__aeabi_dmul>
 800c266:	2200      	movs	r2, #0
 800c268:	0006      	movs	r6, r0
 800c26a:	000f      	movs	r7, r1
 800c26c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c26e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c270:	4b55      	ldr	r3, [pc, #340]	@ (800c3c8 <_dtoa_r+0x714>)
 800c272:	f7f6 fa93 	bl	800279c <__aeabi_dmul>
 800c276:	9416      	str	r4, [sp, #88]	@ 0x58
 800c278:	900a      	str	r0, [sp, #40]	@ 0x28
 800c27a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c27c:	e7c3      	b.n	800c206 <_dtoa_r+0x552>
 800c27e:	0030      	movs	r0, r6
 800c280:	0039      	movs	r1, r7
 800c282:	f7f6 fa8b 	bl	800279c <__aeabi_dmul>
 800c286:	9d08      	ldr	r5, [sp, #32]
 800c288:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c28a:	002b      	movs	r3, r5
 800c28c:	4694      	mov	ip, r2
 800c28e:	9016      	str	r0, [sp, #88]	@ 0x58
 800c290:	9117      	str	r1, [sp, #92]	@ 0x5c
 800c292:	4463      	add	r3, ip
 800c294:	9319      	str	r3, [sp, #100]	@ 0x64
 800c296:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c298:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c29a:	f7f7 f991 	bl	80035c0 <__aeabi_d2iz>
 800c29e:	0004      	movs	r4, r0
 800c2a0:	f7f7 f9ca 	bl	8003638 <__aeabi_i2d>
 800c2a4:	000b      	movs	r3, r1
 800c2a6:	0002      	movs	r2, r0
 800c2a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c2aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c2ac:	f7f6 fd5c 	bl	8002d68 <__aeabi_dsub>
 800c2b0:	3430      	adds	r4, #48	@ 0x30
 800c2b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c2b4:	702c      	strb	r4, [r5, #0]
 800c2b6:	3501      	adds	r5, #1
 800c2b8:	0006      	movs	r6, r0
 800c2ba:	000f      	movs	r7, r1
 800c2bc:	42ab      	cmp	r3, r5
 800c2be:	d12a      	bne.n	800c316 <_dtoa_r+0x662>
 800c2c0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800c2c2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800c2c4:	9b08      	ldr	r3, [sp, #32]
 800c2c6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800c2c8:	469c      	mov	ip, r3
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	4b42      	ldr	r3, [pc, #264]	@ (800c3d8 <_dtoa_r+0x724>)
 800c2ce:	4464      	add	r4, ip
 800c2d0:	f7f5 fa64 	bl	800179c <__aeabi_dadd>
 800c2d4:	0002      	movs	r2, r0
 800c2d6:	000b      	movs	r3, r1
 800c2d8:	0030      	movs	r0, r6
 800c2da:	0039      	movs	r1, r7
 800c2dc:	f7f4 f8d8 	bl	8000490 <__aeabi_dcmpgt>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d000      	beq.n	800c2e6 <_dtoa_r+0x632>
 800c2e4:	e07c      	b.n	800c3e0 <_dtoa_r+0x72c>
 800c2e6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c2e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	493a      	ldr	r1, [pc, #232]	@ (800c3d8 <_dtoa_r+0x724>)
 800c2ee:	f7f6 fd3b 	bl	8002d68 <__aeabi_dsub>
 800c2f2:	0002      	movs	r2, r0
 800c2f4:	000b      	movs	r3, r1
 800c2f6:	0030      	movs	r0, r6
 800c2f8:	0039      	movs	r1, r7
 800c2fa:	f7f4 f8b5 	bl	8000468 <__aeabi_dcmplt>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d100      	bne.n	800c304 <_dtoa_r+0x650>
 800c302:	e710      	b.n	800c126 <_dtoa_r+0x472>
 800c304:	0023      	movs	r3, r4
 800c306:	3c01      	subs	r4, #1
 800c308:	7822      	ldrb	r2, [r4, #0]
 800c30a:	2a30      	cmp	r2, #48	@ 0x30
 800c30c:	d0fa      	beq.n	800c304 <_dtoa_r+0x650>
 800c30e:	001c      	movs	r4, r3
 800c310:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c312:	9304      	str	r3, [sp, #16]
 800c314:	e042      	b.n	800c39c <_dtoa_r+0x6e8>
 800c316:	2200      	movs	r2, #0
 800c318:	4b2b      	ldr	r3, [pc, #172]	@ (800c3c8 <_dtoa_r+0x714>)
 800c31a:	f7f6 fa3f 	bl	800279c <__aeabi_dmul>
 800c31e:	900a      	str	r0, [sp, #40]	@ 0x28
 800c320:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c322:	e7b8      	b.n	800c296 <_dtoa_r+0x5e2>
 800c324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c326:	9d08      	ldr	r5, [sp, #32]
 800c328:	3b01      	subs	r3, #1
 800c32a:	195b      	adds	r3, r3, r5
 800c32c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800c32e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c330:	930a      	str	r3, [sp, #40]	@ 0x28
 800c332:	9a06      	ldr	r2, [sp, #24]
 800c334:	9b07      	ldr	r3, [sp, #28]
 800c336:	0030      	movs	r0, r6
 800c338:	0039      	movs	r1, r7
 800c33a:	f7f5 fdf5 	bl	8001f28 <__aeabi_ddiv>
 800c33e:	f7f7 f93f 	bl	80035c0 <__aeabi_d2iz>
 800c342:	9009      	str	r0, [sp, #36]	@ 0x24
 800c344:	f7f7 f978 	bl	8003638 <__aeabi_i2d>
 800c348:	9a06      	ldr	r2, [sp, #24]
 800c34a:	9b07      	ldr	r3, [sp, #28]
 800c34c:	f7f6 fa26 	bl	800279c <__aeabi_dmul>
 800c350:	0002      	movs	r2, r0
 800c352:	000b      	movs	r3, r1
 800c354:	0030      	movs	r0, r6
 800c356:	0039      	movs	r1, r7
 800c358:	f7f6 fd06 	bl	8002d68 <__aeabi_dsub>
 800c35c:	002b      	movs	r3, r5
 800c35e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c360:	3501      	adds	r5, #1
 800c362:	3230      	adds	r2, #48	@ 0x30
 800c364:	701a      	strb	r2, [r3, #0]
 800c366:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c368:	002c      	movs	r4, r5
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d14b      	bne.n	800c406 <_dtoa_r+0x752>
 800c36e:	0002      	movs	r2, r0
 800c370:	000b      	movs	r3, r1
 800c372:	f7f5 fa13 	bl	800179c <__aeabi_dadd>
 800c376:	9a06      	ldr	r2, [sp, #24]
 800c378:	9b07      	ldr	r3, [sp, #28]
 800c37a:	0006      	movs	r6, r0
 800c37c:	000f      	movs	r7, r1
 800c37e:	f7f4 f887 	bl	8000490 <__aeabi_dcmpgt>
 800c382:	2800      	cmp	r0, #0
 800c384:	d12a      	bne.n	800c3dc <_dtoa_r+0x728>
 800c386:	9a06      	ldr	r2, [sp, #24]
 800c388:	9b07      	ldr	r3, [sp, #28]
 800c38a:	0030      	movs	r0, r6
 800c38c:	0039      	movs	r1, r7
 800c38e:	f7f4 f865 	bl	800045c <__aeabi_dcmpeq>
 800c392:	2800      	cmp	r0, #0
 800c394:	d002      	beq.n	800c39c <_dtoa_r+0x6e8>
 800c396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c398:	07dd      	lsls	r5, r3, #31
 800c39a:	d41f      	bmi.n	800c3dc <_dtoa_r+0x728>
 800c39c:	9905      	ldr	r1, [sp, #20]
 800c39e:	9803      	ldr	r0, [sp, #12]
 800c3a0:	f001 f92c 	bl	800d5fc <_Bfree>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	7023      	strb	r3, [r4, #0]
 800c3a8:	9b04      	ldr	r3, [sp, #16]
 800c3aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	6013      	str	r3, [r2, #0]
 800c3b0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d100      	bne.n	800c3b8 <_dtoa_r+0x704>
 800c3b6:	e4c7      	b.n	800bd48 <_dtoa_r+0x94>
 800c3b8:	601c      	str	r4, [r3, #0]
 800c3ba:	e4c5      	b.n	800bd48 <_dtoa_r+0x94>
 800c3bc:	0800f058 	.word	0x0800f058
 800c3c0:	0800f030 	.word	0x0800f030
 800c3c4:	3ff00000 	.word	0x3ff00000
 800c3c8:	40240000 	.word	0x40240000
 800c3cc:	401c0000 	.word	0x401c0000
 800c3d0:	fcc00000 	.word	0xfcc00000
 800c3d4:	40140000 	.word	0x40140000
 800c3d8:	3fe00000 	.word	0x3fe00000
 800c3dc:	9b04      	ldr	r3, [sp, #16]
 800c3de:	930c      	str	r3, [sp, #48]	@ 0x30
 800c3e0:	0023      	movs	r3, r4
 800c3e2:	001c      	movs	r4, r3
 800c3e4:	3b01      	subs	r3, #1
 800c3e6:	781a      	ldrb	r2, [r3, #0]
 800c3e8:	2a39      	cmp	r2, #57	@ 0x39
 800c3ea:	d108      	bne.n	800c3fe <_dtoa_r+0x74a>
 800c3ec:	9a08      	ldr	r2, [sp, #32]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d1f7      	bne.n	800c3e2 <_dtoa_r+0x72e>
 800c3f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c3f4:	9908      	ldr	r1, [sp, #32]
 800c3f6:	3201      	adds	r2, #1
 800c3f8:	920c      	str	r2, [sp, #48]	@ 0x30
 800c3fa:	2230      	movs	r2, #48	@ 0x30
 800c3fc:	700a      	strb	r2, [r1, #0]
 800c3fe:	781a      	ldrb	r2, [r3, #0]
 800c400:	3201      	adds	r2, #1
 800c402:	701a      	strb	r2, [r3, #0]
 800c404:	e784      	b.n	800c310 <_dtoa_r+0x65c>
 800c406:	2200      	movs	r2, #0
 800c408:	4bc6      	ldr	r3, [pc, #792]	@ (800c724 <_dtoa_r+0xa70>)
 800c40a:	f7f6 f9c7 	bl	800279c <__aeabi_dmul>
 800c40e:	2200      	movs	r2, #0
 800c410:	2300      	movs	r3, #0
 800c412:	0006      	movs	r6, r0
 800c414:	000f      	movs	r7, r1
 800c416:	f7f4 f821 	bl	800045c <__aeabi_dcmpeq>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	d089      	beq.n	800c332 <_dtoa_r+0x67e>
 800c41e:	e7bd      	b.n	800c39c <_dtoa_r+0x6e8>
 800c420:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800c422:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c424:	9c06      	ldr	r4, [sp, #24]
 800c426:	2f00      	cmp	r7, #0
 800c428:	d014      	beq.n	800c454 <_dtoa_r+0x7a0>
 800c42a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c42c:	2a01      	cmp	r2, #1
 800c42e:	dd00      	ble.n	800c432 <_dtoa_r+0x77e>
 800c430:	e0e4      	b.n	800c5fc <_dtoa_r+0x948>
 800c432:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c434:	2a00      	cmp	r2, #0
 800c436:	d100      	bne.n	800c43a <_dtoa_r+0x786>
 800c438:	e0da      	b.n	800c5f0 <_dtoa_r+0x93c>
 800c43a:	4abb      	ldr	r2, [pc, #748]	@ (800c728 <_dtoa_r+0xa74>)
 800c43c:	189b      	adds	r3, r3, r2
 800c43e:	9a06      	ldr	r2, [sp, #24]
 800c440:	2101      	movs	r1, #1
 800c442:	18d2      	adds	r2, r2, r3
 800c444:	9206      	str	r2, [sp, #24]
 800c446:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c448:	9803      	ldr	r0, [sp, #12]
 800c44a:	18d3      	adds	r3, r2, r3
 800c44c:	930d      	str	r3, [sp, #52]	@ 0x34
 800c44e:	f001 f98d 	bl	800d76c <__i2b>
 800c452:	0007      	movs	r7, r0
 800c454:	2c00      	cmp	r4, #0
 800c456:	d00e      	beq.n	800c476 <_dtoa_r+0x7c2>
 800c458:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	dd0b      	ble.n	800c476 <_dtoa_r+0x7c2>
 800c45e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c460:	0023      	movs	r3, r4
 800c462:	4294      	cmp	r4, r2
 800c464:	dd00      	ble.n	800c468 <_dtoa_r+0x7b4>
 800c466:	0013      	movs	r3, r2
 800c468:	9a06      	ldr	r2, [sp, #24]
 800c46a:	1ae4      	subs	r4, r4, r3
 800c46c:	1ad2      	subs	r2, r2, r3
 800c46e:	9206      	str	r2, [sp, #24]
 800c470:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	930d      	str	r3, [sp, #52]	@ 0x34
 800c476:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d021      	beq.n	800c4c0 <_dtoa_r+0x80c>
 800c47c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d100      	bne.n	800c484 <_dtoa_r+0x7d0>
 800c482:	e0d3      	b.n	800c62c <_dtoa_r+0x978>
 800c484:	9e05      	ldr	r6, [sp, #20]
 800c486:	2d00      	cmp	r5, #0
 800c488:	d014      	beq.n	800c4b4 <_dtoa_r+0x800>
 800c48a:	0039      	movs	r1, r7
 800c48c:	002a      	movs	r2, r5
 800c48e:	9803      	ldr	r0, [sp, #12]
 800c490:	f001 fa2e 	bl	800d8f0 <__pow5mult>
 800c494:	9a05      	ldr	r2, [sp, #20]
 800c496:	0001      	movs	r1, r0
 800c498:	0007      	movs	r7, r0
 800c49a:	9803      	ldr	r0, [sp, #12]
 800c49c:	f001 f97e 	bl	800d79c <__multiply>
 800c4a0:	0006      	movs	r6, r0
 800c4a2:	9905      	ldr	r1, [sp, #20]
 800c4a4:	9803      	ldr	r0, [sp, #12]
 800c4a6:	f001 f8a9 	bl	800d5fc <_Bfree>
 800c4aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4ac:	9605      	str	r6, [sp, #20]
 800c4ae:	1b5b      	subs	r3, r3, r5
 800c4b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4b2:	d005      	beq.n	800c4c0 <_dtoa_r+0x80c>
 800c4b4:	0031      	movs	r1, r6
 800c4b6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c4b8:	9803      	ldr	r0, [sp, #12]
 800c4ba:	f001 fa19 	bl	800d8f0 <__pow5mult>
 800c4be:	9005      	str	r0, [sp, #20]
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	9803      	ldr	r0, [sp, #12]
 800c4c4:	f001 f952 	bl	800d76c <__i2b>
 800c4c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c4ca:	0006      	movs	r6, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d100      	bne.n	800c4d2 <_dtoa_r+0x81e>
 800c4d0:	e1bc      	b.n	800c84c <_dtoa_r+0xb98>
 800c4d2:	001a      	movs	r2, r3
 800c4d4:	0001      	movs	r1, r0
 800c4d6:	9803      	ldr	r0, [sp, #12]
 800c4d8:	f001 fa0a 	bl	800d8f0 <__pow5mult>
 800c4dc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c4de:	0006      	movs	r6, r0
 800c4e0:	2500      	movs	r5, #0
 800c4e2:	2b01      	cmp	r3, #1
 800c4e4:	dc16      	bgt.n	800c514 <_dtoa_r+0x860>
 800c4e6:	2500      	movs	r5, #0
 800c4e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4ea:	42ab      	cmp	r3, r5
 800c4ec:	d10e      	bne.n	800c50c <_dtoa_r+0x858>
 800c4ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4f0:	031b      	lsls	r3, r3, #12
 800c4f2:	42ab      	cmp	r3, r5
 800c4f4:	d10a      	bne.n	800c50c <_dtoa_r+0x858>
 800c4f6:	4b8d      	ldr	r3, [pc, #564]	@ (800c72c <_dtoa_r+0xa78>)
 800c4f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c4fa:	4213      	tst	r3, r2
 800c4fc:	d006      	beq.n	800c50c <_dtoa_r+0x858>
 800c4fe:	9b06      	ldr	r3, [sp, #24]
 800c500:	3501      	adds	r5, #1
 800c502:	3301      	adds	r3, #1
 800c504:	9306      	str	r3, [sp, #24]
 800c506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c508:	3301      	adds	r3, #1
 800c50a:	930d      	str	r3, [sp, #52]	@ 0x34
 800c50c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c50e:	2001      	movs	r0, #1
 800c510:	2b00      	cmp	r3, #0
 800c512:	d008      	beq.n	800c526 <_dtoa_r+0x872>
 800c514:	6933      	ldr	r3, [r6, #16]
 800c516:	3303      	adds	r3, #3
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	18f3      	adds	r3, r6, r3
 800c51c:	6858      	ldr	r0, [r3, #4]
 800c51e:	f001 f8d5 	bl	800d6cc <__hi0bits>
 800c522:	2320      	movs	r3, #32
 800c524:	1a18      	subs	r0, r3, r0
 800c526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c528:	1818      	adds	r0, r3, r0
 800c52a:	0002      	movs	r2, r0
 800c52c:	231f      	movs	r3, #31
 800c52e:	401a      	ands	r2, r3
 800c530:	4218      	tst	r0, r3
 800c532:	d100      	bne.n	800c536 <_dtoa_r+0x882>
 800c534:	e081      	b.n	800c63a <_dtoa_r+0x986>
 800c536:	3301      	adds	r3, #1
 800c538:	1a9b      	subs	r3, r3, r2
 800c53a:	2b04      	cmp	r3, #4
 800c53c:	dd79      	ble.n	800c632 <_dtoa_r+0x97e>
 800c53e:	231c      	movs	r3, #28
 800c540:	1a9b      	subs	r3, r3, r2
 800c542:	9a06      	ldr	r2, [sp, #24]
 800c544:	18e4      	adds	r4, r4, r3
 800c546:	18d2      	adds	r2, r2, r3
 800c548:	9206      	str	r2, [sp, #24]
 800c54a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c54c:	18d3      	adds	r3, r2, r3
 800c54e:	930d      	str	r3, [sp, #52]	@ 0x34
 800c550:	9b06      	ldr	r3, [sp, #24]
 800c552:	2b00      	cmp	r3, #0
 800c554:	dd05      	ble.n	800c562 <_dtoa_r+0x8ae>
 800c556:	001a      	movs	r2, r3
 800c558:	9905      	ldr	r1, [sp, #20]
 800c55a:	9803      	ldr	r0, [sp, #12]
 800c55c:	f001 fa24 	bl	800d9a8 <__lshift>
 800c560:	9005      	str	r0, [sp, #20]
 800c562:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c564:	2b00      	cmp	r3, #0
 800c566:	dd05      	ble.n	800c574 <_dtoa_r+0x8c0>
 800c568:	0031      	movs	r1, r6
 800c56a:	001a      	movs	r2, r3
 800c56c:	9803      	ldr	r0, [sp, #12]
 800c56e:	f001 fa1b 	bl	800d9a8 <__lshift>
 800c572:	0006      	movs	r6, r0
 800c574:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c576:	2b00      	cmp	r3, #0
 800c578:	d061      	beq.n	800c63e <_dtoa_r+0x98a>
 800c57a:	0031      	movs	r1, r6
 800c57c:	9805      	ldr	r0, [sp, #20]
 800c57e:	f001 fa7f 	bl	800da80 <__mcmp>
 800c582:	2800      	cmp	r0, #0
 800c584:	da5b      	bge.n	800c63e <_dtoa_r+0x98a>
 800c586:	9b04      	ldr	r3, [sp, #16]
 800c588:	220a      	movs	r2, #10
 800c58a:	3b01      	subs	r3, #1
 800c58c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c58e:	9905      	ldr	r1, [sp, #20]
 800c590:	2300      	movs	r3, #0
 800c592:	9803      	ldr	r0, [sp, #12]
 800c594:	f001 f856 	bl	800d644 <__multadd>
 800c598:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c59a:	9005      	str	r0, [sp, #20]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d100      	bne.n	800c5a2 <_dtoa_r+0x8ee>
 800c5a0:	e15b      	b.n	800c85a <_dtoa_r+0xba6>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	0039      	movs	r1, r7
 800c5a6:	220a      	movs	r2, #10
 800c5a8:	9803      	ldr	r0, [sp, #12]
 800c5aa:	f001 f84b 	bl	800d644 <__multadd>
 800c5ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5b0:	0007      	movs	r7, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	dc4d      	bgt.n	800c652 <_dtoa_r+0x99e>
 800c5b6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	dd46      	ble.n	800c64a <_dtoa_r+0x996>
 800c5bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d000      	beq.n	800c5c4 <_dtoa_r+0x910>
 800c5c2:	e5db      	b.n	800c17c <_dtoa_r+0x4c8>
 800c5c4:	0031      	movs	r1, r6
 800c5c6:	2205      	movs	r2, #5
 800c5c8:	9803      	ldr	r0, [sp, #12]
 800c5ca:	f001 f83b 	bl	800d644 <__multadd>
 800c5ce:	0006      	movs	r6, r0
 800c5d0:	0001      	movs	r1, r0
 800c5d2:	9805      	ldr	r0, [sp, #20]
 800c5d4:	f001 fa54 	bl	800da80 <__mcmp>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	dc00      	bgt.n	800c5de <_dtoa_r+0x92a>
 800c5dc:	e5ce      	b.n	800c17c <_dtoa_r+0x4c8>
 800c5de:	9b08      	ldr	r3, [sp, #32]
 800c5e0:	9a08      	ldr	r2, [sp, #32]
 800c5e2:	1c5c      	adds	r4, r3, #1
 800c5e4:	2331      	movs	r3, #49	@ 0x31
 800c5e6:	7013      	strb	r3, [r2, #0]
 800c5e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800c5ee:	e5c9      	b.n	800c184 <_dtoa_r+0x4d0>
 800c5f0:	2336      	movs	r3, #54	@ 0x36
 800c5f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c5f4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800c5f6:	1a9b      	subs	r3, r3, r2
 800c5f8:	9c06      	ldr	r4, [sp, #24]
 800c5fa:	e720      	b.n	800c43e <_dtoa_r+0x78a>
 800c5fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5fe:	1e5d      	subs	r5, r3, #1
 800c600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c602:	42ab      	cmp	r3, r5
 800c604:	db08      	blt.n	800c618 <_dtoa_r+0x964>
 800c606:	1b5d      	subs	r5, r3, r5
 800c608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	daf4      	bge.n	800c5f8 <_dtoa_r+0x944>
 800c60e:	9b06      	ldr	r3, [sp, #24]
 800c610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c612:	1a9c      	subs	r4, r3, r2
 800c614:	2300      	movs	r3, #0
 800c616:	e712      	b.n	800c43e <_dtoa_r+0x78a>
 800c618:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c61a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c61c:	1aeb      	subs	r3, r5, r3
 800c61e:	18d3      	adds	r3, r2, r3
 800c620:	9314      	str	r3, [sp, #80]	@ 0x50
 800c622:	950f      	str	r5, [sp, #60]	@ 0x3c
 800c624:	9c06      	ldr	r4, [sp, #24]
 800c626:	2500      	movs	r5, #0
 800c628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c62a:	e708      	b.n	800c43e <_dtoa_r+0x78a>
 800c62c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c62e:	9905      	ldr	r1, [sp, #20]
 800c630:	e742      	b.n	800c4b8 <_dtoa_r+0x804>
 800c632:	2b04      	cmp	r3, #4
 800c634:	d08c      	beq.n	800c550 <_dtoa_r+0x89c>
 800c636:	331c      	adds	r3, #28
 800c638:	e783      	b.n	800c542 <_dtoa_r+0x88e>
 800c63a:	0013      	movs	r3, r2
 800c63c:	e7fb      	b.n	800c636 <_dtoa_r+0x982>
 800c63e:	9b04      	ldr	r3, [sp, #16]
 800c640:	930c      	str	r3, [sp, #48]	@ 0x30
 800c642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c644:	930e      	str	r3, [sp, #56]	@ 0x38
 800c646:	2b00      	cmp	r3, #0
 800c648:	ddb5      	ble.n	800c5b6 <_dtoa_r+0x902>
 800c64a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d100      	bne.n	800c652 <_dtoa_r+0x99e>
 800c650:	e107      	b.n	800c862 <_dtoa_r+0xbae>
 800c652:	2c00      	cmp	r4, #0
 800c654:	dd05      	ble.n	800c662 <_dtoa_r+0x9ae>
 800c656:	0039      	movs	r1, r7
 800c658:	0022      	movs	r2, r4
 800c65a:	9803      	ldr	r0, [sp, #12]
 800c65c:	f001 f9a4 	bl	800d9a8 <__lshift>
 800c660:	0007      	movs	r7, r0
 800c662:	9704      	str	r7, [sp, #16]
 800c664:	2d00      	cmp	r5, #0
 800c666:	d020      	beq.n	800c6aa <_dtoa_r+0x9f6>
 800c668:	6879      	ldr	r1, [r7, #4]
 800c66a:	9803      	ldr	r0, [sp, #12]
 800c66c:	f000 ff82 	bl	800d574 <_Balloc>
 800c670:	1e04      	subs	r4, r0, #0
 800c672:	d10c      	bne.n	800c68e <_dtoa_r+0x9da>
 800c674:	0022      	movs	r2, r4
 800c676:	4b2e      	ldr	r3, [pc, #184]	@ (800c730 <_dtoa_r+0xa7c>)
 800c678:	482e      	ldr	r0, [pc, #184]	@ (800c734 <_dtoa_r+0xa80>)
 800c67a:	492f      	ldr	r1, [pc, #188]	@ (800c738 <_dtoa_r+0xa84>)
 800c67c:	f7ff fb2f 	bl	800bcde <_dtoa_r+0x2a>
 800c680:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800c682:	0037      	movs	r7, r6
 800c684:	e7ab      	b.n	800c5de <_dtoa_r+0x92a>
 800c686:	9b04      	ldr	r3, [sp, #16]
 800c688:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800c68a:	930c      	str	r3, [sp, #48]	@ 0x30
 800c68c:	e7f9      	b.n	800c682 <_dtoa_r+0x9ce>
 800c68e:	0039      	movs	r1, r7
 800c690:	693a      	ldr	r2, [r7, #16]
 800c692:	310c      	adds	r1, #12
 800c694:	3202      	adds	r2, #2
 800c696:	0092      	lsls	r2, r2, #2
 800c698:	300c      	adds	r0, #12
 800c69a:	f7ff fa5e 	bl	800bb5a <memcpy>
 800c69e:	2201      	movs	r2, #1
 800c6a0:	0021      	movs	r1, r4
 800c6a2:	9803      	ldr	r0, [sp, #12]
 800c6a4:	f001 f980 	bl	800d9a8 <__lshift>
 800c6a8:	9004      	str	r0, [sp, #16]
 800c6aa:	9b08      	ldr	r3, [sp, #32]
 800c6ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6ae:	9306      	str	r3, [sp, #24]
 800c6b0:	3b01      	subs	r3, #1
 800c6b2:	189b      	adds	r3, r3, r2
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c6b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6ba:	4013      	ands	r3, r2
 800c6bc:	930e      	str	r3, [sp, #56]	@ 0x38
 800c6be:	0031      	movs	r1, r6
 800c6c0:	9805      	ldr	r0, [sp, #20]
 800c6c2:	f7ff fa71 	bl	800bba8 <quorem>
 800c6c6:	0039      	movs	r1, r7
 800c6c8:	0005      	movs	r5, r0
 800c6ca:	900a      	str	r0, [sp, #40]	@ 0x28
 800c6cc:	9805      	ldr	r0, [sp, #20]
 800c6ce:	f001 f9d7 	bl	800da80 <__mcmp>
 800c6d2:	9a04      	ldr	r2, [sp, #16]
 800c6d4:	900d      	str	r0, [sp, #52]	@ 0x34
 800c6d6:	0031      	movs	r1, r6
 800c6d8:	9803      	ldr	r0, [sp, #12]
 800c6da:	f001 f9ed 	bl	800dab8 <__mdiff>
 800c6de:	2201      	movs	r2, #1
 800c6e0:	68c3      	ldr	r3, [r0, #12]
 800c6e2:	0004      	movs	r4, r0
 800c6e4:	3530      	adds	r5, #48	@ 0x30
 800c6e6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d104      	bne.n	800c6f6 <_dtoa_r+0xa42>
 800c6ec:	0001      	movs	r1, r0
 800c6ee:	9805      	ldr	r0, [sp, #20]
 800c6f0:	f001 f9c6 	bl	800da80 <__mcmp>
 800c6f4:	9009      	str	r0, [sp, #36]	@ 0x24
 800c6f6:	0021      	movs	r1, r4
 800c6f8:	9803      	ldr	r0, [sp, #12]
 800c6fa:	f000 ff7f 	bl	800d5fc <_Bfree>
 800c6fe:	9b06      	ldr	r3, [sp, #24]
 800c700:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c702:	1c5c      	adds	r4, r3, #1
 800c704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c706:	4313      	orrs	r3, r2
 800c708:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c70a:	4313      	orrs	r3, r2
 800c70c:	d116      	bne.n	800c73c <_dtoa_r+0xa88>
 800c70e:	2d39      	cmp	r5, #57	@ 0x39
 800c710:	d02f      	beq.n	800c772 <_dtoa_r+0xabe>
 800c712:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c714:	2b00      	cmp	r3, #0
 800c716:	dd01      	ble.n	800c71c <_dtoa_r+0xa68>
 800c718:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c71a:	3531      	adds	r5, #49	@ 0x31
 800c71c:	9b06      	ldr	r3, [sp, #24]
 800c71e:	701d      	strb	r5, [r3, #0]
 800c720:	e532      	b.n	800c188 <_dtoa_r+0x4d4>
 800c722:	46c0      	nop			@ (mov r8, r8)
 800c724:	40240000 	.word	0x40240000
 800c728:	00000433 	.word	0x00000433
 800c72c:	7ff00000 	.word	0x7ff00000
 800c730:	0800ef80 	.word	0x0800ef80
 800c734:	0800ef28 	.word	0x0800ef28
 800c738:	000002ef 	.word	0x000002ef
 800c73c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c73e:	2b00      	cmp	r3, #0
 800c740:	db04      	blt.n	800c74c <_dtoa_r+0xa98>
 800c742:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c744:	4313      	orrs	r3, r2
 800c746:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c748:	4313      	orrs	r3, r2
 800c74a:	d11e      	bne.n	800c78a <_dtoa_r+0xad6>
 800c74c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c74e:	2b00      	cmp	r3, #0
 800c750:	dde4      	ble.n	800c71c <_dtoa_r+0xa68>
 800c752:	9905      	ldr	r1, [sp, #20]
 800c754:	2201      	movs	r2, #1
 800c756:	9803      	ldr	r0, [sp, #12]
 800c758:	f001 f926 	bl	800d9a8 <__lshift>
 800c75c:	0031      	movs	r1, r6
 800c75e:	9005      	str	r0, [sp, #20]
 800c760:	f001 f98e 	bl	800da80 <__mcmp>
 800c764:	2800      	cmp	r0, #0
 800c766:	dc02      	bgt.n	800c76e <_dtoa_r+0xaba>
 800c768:	d1d8      	bne.n	800c71c <_dtoa_r+0xa68>
 800c76a:	07eb      	lsls	r3, r5, #31
 800c76c:	d5d6      	bpl.n	800c71c <_dtoa_r+0xa68>
 800c76e:	2d39      	cmp	r5, #57	@ 0x39
 800c770:	d1d2      	bne.n	800c718 <_dtoa_r+0xa64>
 800c772:	2339      	movs	r3, #57	@ 0x39
 800c774:	9a06      	ldr	r2, [sp, #24]
 800c776:	7013      	strb	r3, [r2, #0]
 800c778:	0023      	movs	r3, r4
 800c77a:	001c      	movs	r4, r3
 800c77c:	3b01      	subs	r3, #1
 800c77e:	781a      	ldrb	r2, [r3, #0]
 800c780:	2a39      	cmp	r2, #57	@ 0x39
 800c782:	d050      	beq.n	800c826 <_dtoa_r+0xb72>
 800c784:	3201      	adds	r2, #1
 800c786:	701a      	strb	r2, [r3, #0]
 800c788:	e4fe      	b.n	800c188 <_dtoa_r+0x4d4>
 800c78a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	dd03      	ble.n	800c798 <_dtoa_r+0xae4>
 800c790:	2d39      	cmp	r5, #57	@ 0x39
 800c792:	d0ee      	beq.n	800c772 <_dtoa_r+0xabe>
 800c794:	3501      	adds	r5, #1
 800c796:	e7c1      	b.n	800c71c <_dtoa_r+0xa68>
 800c798:	9b06      	ldr	r3, [sp, #24]
 800c79a:	9a06      	ldr	r2, [sp, #24]
 800c79c:	701d      	strb	r5, [r3, #0]
 800c79e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d02b      	beq.n	800c7fc <_dtoa_r+0xb48>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	220a      	movs	r2, #10
 800c7a8:	9905      	ldr	r1, [sp, #20]
 800c7aa:	9803      	ldr	r0, [sp, #12]
 800c7ac:	f000 ff4a 	bl	800d644 <__multadd>
 800c7b0:	9b04      	ldr	r3, [sp, #16]
 800c7b2:	9005      	str	r0, [sp, #20]
 800c7b4:	429f      	cmp	r7, r3
 800c7b6:	d109      	bne.n	800c7cc <_dtoa_r+0xb18>
 800c7b8:	0039      	movs	r1, r7
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	220a      	movs	r2, #10
 800c7be:	9803      	ldr	r0, [sp, #12]
 800c7c0:	f000 ff40 	bl	800d644 <__multadd>
 800c7c4:	0007      	movs	r7, r0
 800c7c6:	9004      	str	r0, [sp, #16]
 800c7c8:	9406      	str	r4, [sp, #24]
 800c7ca:	e778      	b.n	800c6be <_dtoa_r+0xa0a>
 800c7cc:	0039      	movs	r1, r7
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	220a      	movs	r2, #10
 800c7d2:	9803      	ldr	r0, [sp, #12]
 800c7d4:	f000 ff36 	bl	800d644 <__multadd>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	0007      	movs	r7, r0
 800c7dc:	220a      	movs	r2, #10
 800c7de:	9904      	ldr	r1, [sp, #16]
 800c7e0:	9803      	ldr	r0, [sp, #12]
 800c7e2:	f000 ff2f 	bl	800d644 <__multadd>
 800c7e6:	9004      	str	r0, [sp, #16]
 800c7e8:	e7ee      	b.n	800c7c8 <_dtoa_r+0xb14>
 800c7ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7ec:	2401      	movs	r4, #1
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	dd00      	ble.n	800c7f4 <_dtoa_r+0xb40>
 800c7f2:	001c      	movs	r4, r3
 800c7f4:	9704      	str	r7, [sp, #16]
 800c7f6:	2700      	movs	r7, #0
 800c7f8:	9b08      	ldr	r3, [sp, #32]
 800c7fa:	191c      	adds	r4, r3, r4
 800c7fc:	9905      	ldr	r1, [sp, #20]
 800c7fe:	2201      	movs	r2, #1
 800c800:	9803      	ldr	r0, [sp, #12]
 800c802:	f001 f8d1 	bl	800d9a8 <__lshift>
 800c806:	0031      	movs	r1, r6
 800c808:	9005      	str	r0, [sp, #20]
 800c80a:	f001 f939 	bl	800da80 <__mcmp>
 800c80e:	2800      	cmp	r0, #0
 800c810:	dcb2      	bgt.n	800c778 <_dtoa_r+0xac4>
 800c812:	d101      	bne.n	800c818 <_dtoa_r+0xb64>
 800c814:	07ed      	lsls	r5, r5, #31
 800c816:	d4af      	bmi.n	800c778 <_dtoa_r+0xac4>
 800c818:	0023      	movs	r3, r4
 800c81a:	001c      	movs	r4, r3
 800c81c:	3b01      	subs	r3, #1
 800c81e:	781a      	ldrb	r2, [r3, #0]
 800c820:	2a30      	cmp	r2, #48	@ 0x30
 800c822:	d0fa      	beq.n	800c81a <_dtoa_r+0xb66>
 800c824:	e4b0      	b.n	800c188 <_dtoa_r+0x4d4>
 800c826:	9a08      	ldr	r2, [sp, #32]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d1a6      	bne.n	800c77a <_dtoa_r+0xac6>
 800c82c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c82e:	3301      	adds	r3, #1
 800c830:	930c      	str	r3, [sp, #48]	@ 0x30
 800c832:	2331      	movs	r3, #49	@ 0x31
 800c834:	7013      	strb	r3, [r2, #0]
 800c836:	e4a7      	b.n	800c188 <_dtoa_r+0x4d4>
 800c838:	4b14      	ldr	r3, [pc, #80]	@ (800c88c <_dtoa_r+0xbd8>)
 800c83a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800c83c:	9308      	str	r3, [sp, #32]
 800c83e:	4b14      	ldr	r3, [pc, #80]	@ (800c890 <_dtoa_r+0xbdc>)
 800c840:	2a00      	cmp	r2, #0
 800c842:	d001      	beq.n	800c848 <_dtoa_r+0xb94>
 800c844:	f7ff fa7e 	bl	800bd44 <_dtoa_r+0x90>
 800c848:	f7ff fa7e 	bl	800bd48 <_dtoa_r+0x94>
 800c84c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c84e:	2b01      	cmp	r3, #1
 800c850:	dc00      	bgt.n	800c854 <_dtoa_r+0xba0>
 800c852:	e648      	b.n	800c4e6 <_dtoa_r+0x832>
 800c854:	2001      	movs	r0, #1
 800c856:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c858:	e665      	b.n	800c526 <_dtoa_r+0x872>
 800c85a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	dc00      	bgt.n	800c862 <_dtoa_r+0xbae>
 800c860:	e6a9      	b.n	800c5b6 <_dtoa_r+0x902>
 800c862:	2400      	movs	r4, #0
 800c864:	0031      	movs	r1, r6
 800c866:	9805      	ldr	r0, [sp, #20]
 800c868:	f7ff f99e 	bl	800bba8 <quorem>
 800c86c:	9b08      	ldr	r3, [sp, #32]
 800c86e:	3030      	adds	r0, #48	@ 0x30
 800c870:	5518      	strb	r0, [r3, r4]
 800c872:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c874:	3401      	adds	r4, #1
 800c876:	0005      	movs	r5, r0
 800c878:	42a3      	cmp	r3, r4
 800c87a:	ddb6      	ble.n	800c7ea <_dtoa_r+0xb36>
 800c87c:	2300      	movs	r3, #0
 800c87e:	220a      	movs	r2, #10
 800c880:	9905      	ldr	r1, [sp, #20]
 800c882:	9803      	ldr	r0, [sp, #12]
 800c884:	f000 fede 	bl	800d644 <__multadd>
 800c888:	9005      	str	r0, [sp, #20]
 800c88a:	e7eb      	b.n	800c864 <_dtoa_r+0xbb0>
 800c88c:	0800ef1b 	.word	0x0800ef1b
 800c890:	0800ef23 	.word	0x0800ef23

0800c894 <_free_r>:
 800c894:	b570      	push	{r4, r5, r6, lr}
 800c896:	0005      	movs	r5, r0
 800c898:	1e0c      	subs	r4, r1, #0
 800c89a:	d010      	beq.n	800c8be <_free_r+0x2a>
 800c89c:	3c04      	subs	r4, #4
 800c89e:	6823      	ldr	r3, [r4, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	da00      	bge.n	800c8a6 <_free_r+0x12>
 800c8a4:	18e4      	adds	r4, r4, r3
 800c8a6:	0028      	movs	r0, r5
 800c8a8:	f000 fe54 	bl	800d554 <__malloc_lock>
 800c8ac:	4a1d      	ldr	r2, [pc, #116]	@ (800c924 <_free_r+0x90>)
 800c8ae:	6813      	ldr	r3, [r2, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d105      	bne.n	800c8c0 <_free_r+0x2c>
 800c8b4:	6063      	str	r3, [r4, #4]
 800c8b6:	6014      	str	r4, [r2, #0]
 800c8b8:	0028      	movs	r0, r5
 800c8ba:	f000 fe53 	bl	800d564 <__malloc_unlock>
 800c8be:	bd70      	pop	{r4, r5, r6, pc}
 800c8c0:	42a3      	cmp	r3, r4
 800c8c2:	d908      	bls.n	800c8d6 <_free_r+0x42>
 800c8c4:	6820      	ldr	r0, [r4, #0]
 800c8c6:	1821      	adds	r1, r4, r0
 800c8c8:	428b      	cmp	r3, r1
 800c8ca:	d1f3      	bne.n	800c8b4 <_free_r+0x20>
 800c8cc:	6819      	ldr	r1, [r3, #0]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	1809      	adds	r1, r1, r0
 800c8d2:	6021      	str	r1, [r4, #0]
 800c8d4:	e7ee      	b.n	800c8b4 <_free_r+0x20>
 800c8d6:	001a      	movs	r2, r3
 800c8d8:	685b      	ldr	r3, [r3, #4]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d001      	beq.n	800c8e2 <_free_r+0x4e>
 800c8de:	42a3      	cmp	r3, r4
 800c8e0:	d9f9      	bls.n	800c8d6 <_free_r+0x42>
 800c8e2:	6811      	ldr	r1, [r2, #0]
 800c8e4:	1850      	adds	r0, r2, r1
 800c8e6:	42a0      	cmp	r0, r4
 800c8e8:	d10b      	bne.n	800c902 <_free_r+0x6e>
 800c8ea:	6820      	ldr	r0, [r4, #0]
 800c8ec:	1809      	adds	r1, r1, r0
 800c8ee:	1850      	adds	r0, r2, r1
 800c8f0:	6011      	str	r1, [r2, #0]
 800c8f2:	4283      	cmp	r3, r0
 800c8f4:	d1e0      	bne.n	800c8b8 <_free_r+0x24>
 800c8f6:	6818      	ldr	r0, [r3, #0]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	1841      	adds	r1, r0, r1
 800c8fc:	6011      	str	r1, [r2, #0]
 800c8fe:	6053      	str	r3, [r2, #4]
 800c900:	e7da      	b.n	800c8b8 <_free_r+0x24>
 800c902:	42a0      	cmp	r0, r4
 800c904:	d902      	bls.n	800c90c <_free_r+0x78>
 800c906:	230c      	movs	r3, #12
 800c908:	602b      	str	r3, [r5, #0]
 800c90a:	e7d5      	b.n	800c8b8 <_free_r+0x24>
 800c90c:	6820      	ldr	r0, [r4, #0]
 800c90e:	1821      	adds	r1, r4, r0
 800c910:	428b      	cmp	r3, r1
 800c912:	d103      	bne.n	800c91c <_free_r+0x88>
 800c914:	6819      	ldr	r1, [r3, #0]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	1809      	adds	r1, r1, r0
 800c91a:	6021      	str	r1, [r4, #0]
 800c91c:	6063      	str	r3, [r4, #4]
 800c91e:	6054      	str	r4, [r2, #4]
 800c920:	e7ca      	b.n	800c8b8 <_free_r+0x24>
 800c922:	46c0      	nop			@ (mov r8, r8)
 800c924:	20000938 	.word	0x20000938

0800c928 <__ssputs_r>:
 800c928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c92a:	688e      	ldr	r6, [r1, #8]
 800c92c:	b085      	sub	sp, #20
 800c92e:	001f      	movs	r7, r3
 800c930:	000c      	movs	r4, r1
 800c932:	680b      	ldr	r3, [r1, #0]
 800c934:	9002      	str	r0, [sp, #8]
 800c936:	9203      	str	r2, [sp, #12]
 800c938:	42be      	cmp	r6, r7
 800c93a:	d830      	bhi.n	800c99e <__ssputs_r+0x76>
 800c93c:	210c      	movs	r1, #12
 800c93e:	5e62      	ldrsh	r2, [r4, r1]
 800c940:	2190      	movs	r1, #144	@ 0x90
 800c942:	00c9      	lsls	r1, r1, #3
 800c944:	420a      	tst	r2, r1
 800c946:	d028      	beq.n	800c99a <__ssputs_r+0x72>
 800c948:	2003      	movs	r0, #3
 800c94a:	6921      	ldr	r1, [r4, #16]
 800c94c:	1a5b      	subs	r3, r3, r1
 800c94e:	9301      	str	r3, [sp, #4]
 800c950:	6963      	ldr	r3, [r4, #20]
 800c952:	4343      	muls	r3, r0
 800c954:	9801      	ldr	r0, [sp, #4]
 800c956:	0fdd      	lsrs	r5, r3, #31
 800c958:	18ed      	adds	r5, r5, r3
 800c95a:	1c7b      	adds	r3, r7, #1
 800c95c:	181b      	adds	r3, r3, r0
 800c95e:	106d      	asrs	r5, r5, #1
 800c960:	42ab      	cmp	r3, r5
 800c962:	d900      	bls.n	800c966 <__ssputs_r+0x3e>
 800c964:	001d      	movs	r5, r3
 800c966:	0552      	lsls	r2, r2, #21
 800c968:	d528      	bpl.n	800c9bc <__ssputs_r+0x94>
 800c96a:	0029      	movs	r1, r5
 800c96c:	9802      	ldr	r0, [sp, #8]
 800c96e:	f000 fb25 	bl	800cfbc <_malloc_r>
 800c972:	1e06      	subs	r6, r0, #0
 800c974:	d02c      	beq.n	800c9d0 <__ssputs_r+0xa8>
 800c976:	9a01      	ldr	r2, [sp, #4]
 800c978:	6921      	ldr	r1, [r4, #16]
 800c97a:	f7ff f8ee 	bl	800bb5a <memcpy>
 800c97e:	89a2      	ldrh	r2, [r4, #12]
 800c980:	4b18      	ldr	r3, [pc, #96]	@ (800c9e4 <__ssputs_r+0xbc>)
 800c982:	401a      	ands	r2, r3
 800c984:	2380      	movs	r3, #128	@ 0x80
 800c986:	4313      	orrs	r3, r2
 800c988:	81a3      	strh	r3, [r4, #12]
 800c98a:	9b01      	ldr	r3, [sp, #4]
 800c98c:	6126      	str	r6, [r4, #16]
 800c98e:	18f6      	adds	r6, r6, r3
 800c990:	6026      	str	r6, [r4, #0]
 800c992:	003e      	movs	r6, r7
 800c994:	6165      	str	r5, [r4, #20]
 800c996:	1aed      	subs	r5, r5, r3
 800c998:	60a5      	str	r5, [r4, #8]
 800c99a:	42be      	cmp	r6, r7
 800c99c:	d900      	bls.n	800c9a0 <__ssputs_r+0x78>
 800c99e:	003e      	movs	r6, r7
 800c9a0:	0032      	movs	r2, r6
 800c9a2:	9903      	ldr	r1, [sp, #12]
 800c9a4:	6820      	ldr	r0, [r4, #0]
 800c9a6:	f001 fb13 	bl	800dfd0 <memmove>
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	68a3      	ldr	r3, [r4, #8]
 800c9ae:	1b9b      	subs	r3, r3, r6
 800c9b0:	60a3      	str	r3, [r4, #8]
 800c9b2:	6823      	ldr	r3, [r4, #0]
 800c9b4:	199b      	adds	r3, r3, r6
 800c9b6:	6023      	str	r3, [r4, #0]
 800c9b8:	b005      	add	sp, #20
 800c9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9bc:	002a      	movs	r2, r5
 800c9be:	9802      	ldr	r0, [sp, #8]
 800c9c0:	f001 f9c2 	bl	800dd48 <_realloc_r>
 800c9c4:	1e06      	subs	r6, r0, #0
 800c9c6:	d1e0      	bne.n	800c98a <__ssputs_r+0x62>
 800c9c8:	6921      	ldr	r1, [r4, #16]
 800c9ca:	9802      	ldr	r0, [sp, #8]
 800c9cc:	f7ff ff62 	bl	800c894 <_free_r>
 800c9d0:	230c      	movs	r3, #12
 800c9d2:	2001      	movs	r0, #1
 800c9d4:	9a02      	ldr	r2, [sp, #8]
 800c9d6:	4240      	negs	r0, r0
 800c9d8:	6013      	str	r3, [r2, #0]
 800c9da:	89a2      	ldrh	r2, [r4, #12]
 800c9dc:	3334      	adds	r3, #52	@ 0x34
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	81a3      	strh	r3, [r4, #12]
 800c9e2:	e7e9      	b.n	800c9b8 <__ssputs_r+0x90>
 800c9e4:	fffffb7f 	.word	0xfffffb7f

0800c9e8 <_svfiprintf_r>:
 800c9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ea:	b0a1      	sub	sp, #132	@ 0x84
 800c9ec:	9003      	str	r0, [sp, #12]
 800c9ee:	001d      	movs	r5, r3
 800c9f0:	898b      	ldrh	r3, [r1, #12]
 800c9f2:	000f      	movs	r7, r1
 800c9f4:	0016      	movs	r6, r2
 800c9f6:	061b      	lsls	r3, r3, #24
 800c9f8:	d511      	bpl.n	800ca1e <_svfiprintf_r+0x36>
 800c9fa:	690b      	ldr	r3, [r1, #16]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10e      	bne.n	800ca1e <_svfiprintf_r+0x36>
 800ca00:	2140      	movs	r1, #64	@ 0x40
 800ca02:	f000 fadb 	bl	800cfbc <_malloc_r>
 800ca06:	6038      	str	r0, [r7, #0]
 800ca08:	6138      	str	r0, [r7, #16]
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	d105      	bne.n	800ca1a <_svfiprintf_r+0x32>
 800ca0e:	230c      	movs	r3, #12
 800ca10:	9a03      	ldr	r2, [sp, #12]
 800ca12:	6013      	str	r3, [r2, #0]
 800ca14:	2001      	movs	r0, #1
 800ca16:	4240      	negs	r0, r0
 800ca18:	e0cf      	b.n	800cbba <_svfiprintf_r+0x1d2>
 800ca1a:	2340      	movs	r3, #64	@ 0x40
 800ca1c:	617b      	str	r3, [r7, #20]
 800ca1e:	2300      	movs	r3, #0
 800ca20:	ac08      	add	r4, sp, #32
 800ca22:	6163      	str	r3, [r4, #20]
 800ca24:	3320      	adds	r3, #32
 800ca26:	7663      	strb	r3, [r4, #25]
 800ca28:	3310      	adds	r3, #16
 800ca2a:	76a3      	strb	r3, [r4, #26]
 800ca2c:	9507      	str	r5, [sp, #28]
 800ca2e:	0035      	movs	r5, r6
 800ca30:	782b      	ldrb	r3, [r5, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d001      	beq.n	800ca3a <_svfiprintf_r+0x52>
 800ca36:	2b25      	cmp	r3, #37	@ 0x25
 800ca38:	d148      	bne.n	800cacc <_svfiprintf_r+0xe4>
 800ca3a:	1bab      	subs	r3, r5, r6
 800ca3c:	9305      	str	r3, [sp, #20]
 800ca3e:	42b5      	cmp	r5, r6
 800ca40:	d00b      	beq.n	800ca5a <_svfiprintf_r+0x72>
 800ca42:	0032      	movs	r2, r6
 800ca44:	0039      	movs	r1, r7
 800ca46:	9803      	ldr	r0, [sp, #12]
 800ca48:	f7ff ff6e 	bl	800c928 <__ssputs_r>
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d100      	bne.n	800ca52 <_svfiprintf_r+0x6a>
 800ca50:	e0ae      	b.n	800cbb0 <_svfiprintf_r+0x1c8>
 800ca52:	6963      	ldr	r3, [r4, #20]
 800ca54:	9a05      	ldr	r2, [sp, #20]
 800ca56:	189b      	adds	r3, r3, r2
 800ca58:	6163      	str	r3, [r4, #20]
 800ca5a:	782b      	ldrb	r3, [r5, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d100      	bne.n	800ca62 <_svfiprintf_r+0x7a>
 800ca60:	e0a6      	b.n	800cbb0 <_svfiprintf_r+0x1c8>
 800ca62:	2201      	movs	r2, #1
 800ca64:	2300      	movs	r3, #0
 800ca66:	4252      	negs	r2, r2
 800ca68:	6062      	str	r2, [r4, #4]
 800ca6a:	a904      	add	r1, sp, #16
 800ca6c:	3254      	adds	r2, #84	@ 0x54
 800ca6e:	1852      	adds	r2, r2, r1
 800ca70:	1c6e      	adds	r6, r5, #1
 800ca72:	6023      	str	r3, [r4, #0]
 800ca74:	60e3      	str	r3, [r4, #12]
 800ca76:	60a3      	str	r3, [r4, #8]
 800ca78:	7013      	strb	r3, [r2, #0]
 800ca7a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800ca7c:	4b54      	ldr	r3, [pc, #336]	@ (800cbd0 <_svfiprintf_r+0x1e8>)
 800ca7e:	2205      	movs	r2, #5
 800ca80:	0018      	movs	r0, r3
 800ca82:	7831      	ldrb	r1, [r6, #0]
 800ca84:	9305      	str	r3, [sp, #20]
 800ca86:	f7ff f85d 	bl	800bb44 <memchr>
 800ca8a:	1c75      	adds	r5, r6, #1
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d11f      	bne.n	800cad0 <_svfiprintf_r+0xe8>
 800ca90:	6822      	ldr	r2, [r4, #0]
 800ca92:	06d3      	lsls	r3, r2, #27
 800ca94:	d504      	bpl.n	800caa0 <_svfiprintf_r+0xb8>
 800ca96:	2353      	movs	r3, #83	@ 0x53
 800ca98:	a904      	add	r1, sp, #16
 800ca9a:	185b      	adds	r3, r3, r1
 800ca9c:	2120      	movs	r1, #32
 800ca9e:	7019      	strb	r1, [r3, #0]
 800caa0:	0713      	lsls	r3, r2, #28
 800caa2:	d504      	bpl.n	800caae <_svfiprintf_r+0xc6>
 800caa4:	2353      	movs	r3, #83	@ 0x53
 800caa6:	a904      	add	r1, sp, #16
 800caa8:	185b      	adds	r3, r3, r1
 800caaa:	212b      	movs	r1, #43	@ 0x2b
 800caac:	7019      	strb	r1, [r3, #0]
 800caae:	7833      	ldrb	r3, [r6, #0]
 800cab0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cab2:	d016      	beq.n	800cae2 <_svfiprintf_r+0xfa>
 800cab4:	0035      	movs	r5, r6
 800cab6:	2100      	movs	r1, #0
 800cab8:	200a      	movs	r0, #10
 800caba:	68e3      	ldr	r3, [r4, #12]
 800cabc:	782a      	ldrb	r2, [r5, #0]
 800cabe:	1c6e      	adds	r6, r5, #1
 800cac0:	3a30      	subs	r2, #48	@ 0x30
 800cac2:	2a09      	cmp	r2, #9
 800cac4:	d950      	bls.n	800cb68 <_svfiprintf_r+0x180>
 800cac6:	2900      	cmp	r1, #0
 800cac8:	d111      	bne.n	800caee <_svfiprintf_r+0x106>
 800caca:	e017      	b.n	800cafc <_svfiprintf_r+0x114>
 800cacc:	3501      	adds	r5, #1
 800cace:	e7af      	b.n	800ca30 <_svfiprintf_r+0x48>
 800cad0:	9b05      	ldr	r3, [sp, #20]
 800cad2:	6822      	ldr	r2, [r4, #0]
 800cad4:	1ac0      	subs	r0, r0, r3
 800cad6:	2301      	movs	r3, #1
 800cad8:	4083      	lsls	r3, r0
 800cada:	4313      	orrs	r3, r2
 800cadc:	002e      	movs	r6, r5
 800cade:	6023      	str	r3, [r4, #0]
 800cae0:	e7cc      	b.n	800ca7c <_svfiprintf_r+0x94>
 800cae2:	9b07      	ldr	r3, [sp, #28]
 800cae4:	1d19      	adds	r1, r3, #4
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	9107      	str	r1, [sp, #28]
 800caea:	2b00      	cmp	r3, #0
 800caec:	db01      	blt.n	800caf2 <_svfiprintf_r+0x10a>
 800caee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800caf0:	e004      	b.n	800cafc <_svfiprintf_r+0x114>
 800caf2:	425b      	negs	r3, r3
 800caf4:	60e3      	str	r3, [r4, #12]
 800caf6:	2302      	movs	r3, #2
 800caf8:	4313      	orrs	r3, r2
 800cafa:	6023      	str	r3, [r4, #0]
 800cafc:	782b      	ldrb	r3, [r5, #0]
 800cafe:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb00:	d10c      	bne.n	800cb1c <_svfiprintf_r+0x134>
 800cb02:	786b      	ldrb	r3, [r5, #1]
 800cb04:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb06:	d134      	bne.n	800cb72 <_svfiprintf_r+0x18a>
 800cb08:	9b07      	ldr	r3, [sp, #28]
 800cb0a:	3502      	adds	r5, #2
 800cb0c:	1d1a      	adds	r2, r3, #4
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	9207      	str	r2, [sp, #28]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	da01      	bge.n	800cb1a <_svfiprintf_r+0x132>
 800cb16:	2301      	movs	r3, #1
 800cb18:	425b      	negs	r3, r3
 800cb1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb1c:	4e2d      	ldr	r6, [pc, #180]	@ (800cbd4 <_svfiprintf_r+0x1ec>)
 800cb1e:	2203      	movs	r2, #3
 800cb20:	0030      	movs	r0, r6
 800cb22:	7829      	ldrb	r1, [r5, #0]
 800cb24:	f7ff f80e 	bl	800bb44 <memchr>
 800cb28:	2800      	cmp	r0, #0
 800cb2a:	d006      	beq.n	800cb3a <_svfiprintf_r+0x152>
 800cb2c:	2340      	movs	r3, #64	@ 0x40
 800cb2e:	1b80      	subs	r0, r0, r6
 800cb30:	4083      	lsls	r3, r0
 800cb32:	6822      	ldr	r2, [r4, #0]
 800cb34:	3501      	adds	r5, #1
 800cb36:	4313      	orrs	r3, r2
 800cb38:	6023      	str	r3, [r4, #0]
 800cb3a:	7829      	ldrb	r1, [r5, #0]
 800cb3c:	2206      	movs	r2, #6
 800cb3e:	4826      	ldr	r0, [pc, #152]	@ (800cbd8 <_svfiprintf_r+0x1f0>)
 800cb40:	1c6e      	adds	r6, r5, #1
 800cb42:	7621      	strb	r1, [r4, #24]
 800cb44:	f7fe fffe 	bl	800bb44 <memchr>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d038      	beq.n	800cbbe <_svfiprintf_r+0x1d6>
 800cb4c:	4b23      	ldr	r3, [pc, #140]	@ (800cbdc <_svfiprintf_r+0x1f4>)
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d122      	bne.n	800cb98 <_svfiprintf_r+0x1b0>
 800cb52:	2207      	movs	r2, #7
 800cb54:	9b07      	ldr	r3, [sp, #28]
 800cb56:	3307      	adds	r3, #7
 800cb58:	4393      	bics	r3, r2
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	9307      	str	r3, [sp, #28]
 800cb5e:	6963      	ldr	r3, [r4, #20]
 800cb60:	9a04      	ldr	r2, [sp, #16]
 800cb62:	189b      	adds	r3, r3, r2
 800cb64:	6163      	str	r3, [r4, #20]
 800cb66:	e762      	b.n	800ca2e <_svfiprintf_r+0x46>
 800cb68:	4343      	muls	r3, r0
 800cb6a:	0035      	movs	r5, r6
 800cb6c:	2101      	movs	r1, #1
 800cb6e:	189b      	adds	r3, r3, r2
 800cb70:	e7a4      	b.n	800cabc <_svfiprintf_r+0xd4>
 800cb72:	2300      	movs	r3, #0
 800cb74:	200a      	movs	r0, #10
 800cb76:	0019      	movs	r1, r3
 800cb78:	3501      	adds	r5, #1
 800cb7a:	6063      	str	r3, [r4, #4]
 800cb7c:	782a      	ldrb	r2, [r5, #0]
 800cb7e:	1c6e      	adds	r6, r5, #1
 800cb80:	3a30      	subs	r2, #48	@ 0x30
 800cb82:	2a09      	cmp	r2, #9
 800cb84:	d903      	bls.n	800cb8e <_svfiprintf_r+0x1a6>
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d0c8      	beq.n	800cb1c <_svfiprintf_r+0x134>
 800cb8a:	9109      	str	r1, [sp, #36]	@ 0x24
 800cb8c:	e7c6      	b.n	800cb1c <_svfiprintf_r+0x134>
 800cb8e:	4341      	muls	r1, r0
 800cb90:	0035      	movs	r5, r6
 800cb92:	2301      	movs	r3, #1
 800cb94:	1889      	adds	r1, r1, r2
 800cb96:	e7f1      	b.n	800cb7c <_svfiprintf_r+0x194>
 800cb98:	aa07      	add	r2, sp, #28
 800cb9a:	9200      	str	r2, [sp, #0]
 800cb9c:	0021      	movs	r1, r4
 800cb9e:	003a      	movs	r2, r7
 800cba0:	4b0f      	ldr	r3, [pc, #60]	@ (800cbe0 <_svfiprintf_r+0x1f8>)
 800cba2:	9803      	ldr	r0, [sp, #12]
 800cba4:	f7fe f9a6 	bl	800aef4 <_printf_float>
 800cba8:	9004      	str	r0, [sp, #16]
 800cbaa:	9b04      	ldr	r3, [sp, #16]
 800cbac:	3301      	adds	r3, #1
 800cbae:	d1d6      	bne.n	800cb5e <_svfiprintf_r+0x176>
 800cbb0:	89bb      	ldrh	r3, [r7, #12]
 800cbb2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800cbb4:	065b      	lsls	r3, r3, #25
 800cbb6:	d500      	bpl.n	800cbba <_svfiprintf_r+0x1d2>
 800cbb8:	e72c      	b.n	800ca14 <_svfiprintf_r+0x2c>
 800cbba:	b021      	add	sp, #132	@ 0x84
 800cbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbbe:	aa07      	add	r2, sp, #28
 800cbc0:	9200      	str	r2, [sp, #0]
 800cbc2:	0021      	movs	r1, r4
 800cbc4:	003a      	movs	r2, r7
 800cbc6:	4b06      	ldr	r3, [pc, #24]	@ (800cbe0 <_svfiprintf_r+0x1f8>)
 800cbc8:	9803      	ldr	r0, [sp, #12]
 800cbca:	f7fe fc41 	bl	800b450 <_printf_i>
 800cbce:	e7eb      	b.n	800cba8 <_svfiprintf_r+0x1c0>
 800cbd0:	0800ef91 	.word	0x0800ef91
 800cbd4:	0800ef97 	.word	0x0800ef97
 800cbd8:	0800ef9b 	.word	0x0800ef9b
 800cbdc:	0800aef5 	.word	0x0800aef5
 800cbe0:	0800c929 	.word	0x0800c929

0800cbe4 <_sungetc_r>:
 800cbe4:	b570      	push	{r4, r5, r6, lr}
 800cbe6:	0014      	movs	r4, r2
 800cbe8:	1c4b      	adds	r3, r1, #1
 800cbea:	d103      	bne.n	800cbf4 <_sungetc_r+0x10>
 800cbec:	2501      	movs	r5, #1
 800cbee:	426d      	negs	r5, r5
 800cbf0:	0028      	movs	r0, r5
 800cbf2:	bd70      	pop	{r4, r5, r6, pc}
 800cbf4:	8993      	ldrh	r3, [r2, #12]
 800cbf6:	2220      	movs	r2, #32
 800cbf8:	4393      	bics	r3, r2
 800cbfa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800cbfc:	81a3      	strh	r3, [r4, #12]
 800cbfe:	b2ce      	uxtb	r6, r1
 800cc00:	6863      	ldr	r3, [r4, #4]
 800cc02:	b2cd      	uxtb	r5, r1
 800cc04:	2a00      	cmp	r2, #0
 800cc06:	d010      	beq.n	800cc2a <_sungetc_r+0x46>
 800cc08:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	dd07      	ble.n	800cc1e <_sungetc_r+0x3a>
 800cc0e:	6823      	ldr	r3, [r4, #0]
 800cc10:	3b01      	subs	r3, #1
 800cc12:	6023      	str	r3, [r4, #0]
 800cc14:	701e      	strb	r6, [r3, #0]
 800cc16:	6863      	ldr	r3, [r4, #4]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	6063      	str	r3, [r4, #4]
 800cc1c:	e7e8      	b.n	800cbf0 <_sungetc_r+0xc>
 800cc1e:	0021      	movs	r1, r4
 800cc20:	f001 f844 	bl	800dcac <__submore>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	d0f2      	beq.n	800cc0e <_sungetc_r+0x2a>
 800cc28:	e7e0      	b.n	800cbec <_sungetc_r+0x8>
 800cc2a:	6921      	ldr	r1, [r4, #16]
 800cc2c:	6822      	ldr	r2, [r4, #0]
 800cc2e:	2900      	cmp	r1, #0
 800cc30:	d007      	beq.n	800cc42 <_sungetc_r+0x5e>
 800cc32:	4291      	cmp	r1, r2
 800cc34:	d205      	bcs.n	800cc42 <_sungetc_r+0x5e>
 800cc36:	1e51      	subs	r1, r2, #1
 800cc38:	7808      	ldrb	r0, [r1, #0]
 800cc3a:	42a8      	cmp	r0, r5
 800cc3c:	d101      	bne.n	800cc42 <_sungetc_r+0x5e>
 800cc3e:	6021      	str	r1, [r4, #0]
 800cc40:	e7ea      	b.n	800cc18 <_sungetc_r+0x34>
 800cc42:	6423      	str	r3, [r4, #64]	@ 0x40
 800cc44:	0023      	movs	r3, r4
 800cc46:	3344      	adds	r3, #68	@ 0x44
 800cc48:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800cc4e:	0023      	movs	r3, r4
 800cc50:	3346      	adds	r3, #70	@ 0x46
 800cc52:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800cc54:	701e      	strb	r6, [r3, #0]
 800cc56:	6023      	str	r3, [r4, #0]
 800cc58:	2301      	movs	r3, #1
 800cc5a:	e7de      	b.n	800cc1a <_sungetc_r+0x36>

0800cc5c <__ssrefill_r>:
 800cc5c:	b510      	push	{r4, lr}
 800cc5e:	000c      	movs	r4, r1
 800cc60:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800cc62:	2900      	cmp	r1, #0
 800cc64:	d00e      	beq.n	800cc84 <__ssrefill_r+0x28>
 800cc66:	0023      	movs	r3, r4
 800cc68:	3344      	adds	r3, #68	@ 0x44
 800cc6a:	4299      	cmp	r1, r3
 800cc6c:	d001      	beq.n	800cc72 <__ssrefill_r+0x16>
 800cc6e:	f7ff fe11 	bl	800c894 <_free_r>
 800cc72:	2000      	movs	r0, #0
 800cc74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc76:	6360      	str	r0, [r4, #52]	@ 0x34
 800cc78:	6063      	str	r3, [r4, #4]
 800cc7a:	4283      	cmp	r3, r0
 800cc7c:	d002      	beq.n	800cc84 <__ssrefill_r+0x28>
 800cc7e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	bd10      	pop	{r4, pc}
 800cc84:	6923      	ldr	r3, [r4, #16]
 800cc86:	2001      	movs	r0, #1
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	89a2      	ldrh	r2, [r4, #12]
 800cc8e:	6063      	str	r3, [r4, #4]
 800cc90:	3320      	adds	r3, #32
 800cc92:	4313      	orrs	r3, r2
 800cc94:	81a3      	strh	r3, [r4, #12]
 800cc96:	4240      	negs	r0, r0
 800cc98:	e7f3      	b.n	800cc82 <__ssrefill_r+0x26>
	...

0800cc9c <__ssvfiscanf_r>:
 800cc9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc9e:	4cab      	ldr	r4, [pc, #684]	@ (800cf4c <__ssvfiscanf_r+0x2b0>)
 800cca0:	44a5      	add	sp, r4
 800cca2:	000c      	movs	r4, r1
 800cca4:	2100      	movs	r1, #0
 800cca6:	9000      	str	r0, [sp, #0]
 800cca8:	20be      	movs	r0, #190	@ 0xbe
 800ccaa:	9146      	str	r1, [sp, #280]	@ 0x118
 800ccac:	9147      	str	r1, [sp, #284]	@ 0x11c
 800ccae:	a903      	add	r1, sp, #12
 800ccb0:	9148      	str	r1, [sp, #288]	@ 0x120
 800ccb2:	49a7      	ldr	r1, [pc, #668]	@ (800cf50 <__ssvfiscanf_r+0x2b4>)
 800ccb4:	0040      	lsls	r0, r0, #1
 800ccb6:	ad43      	add	r5, sp, #268	@ 0x10c
 800ccb8:	5029      	str	r1, [r5, r0]
 800ccba:	49a6      	ldr	r1, [pc, #664]	@ (800cf54 <__ssvfiscanf_r+0x2b8>)
 800ccbc:	3004      	adds	r0, #4
 800ccbe:	ad43      	add	r5, sp, #268	@ 0x10c
 800ccc0:	5029      	str	r1, [r5, r0]
 800ccc2:	9302      	str	r3, [sp, #8]
 800ccc4:	7816      	ldrb	r6, [r2, #0]
 800ccc6:	2e00      	cmp	r6, #0
 800ccc8:	d100      	bne.n	800cccc <__ssvfiscanf_r+0x30>
 800ccca:	e13c      	b.n	800cf46 <__ssvfiscanf_r+0x2aa>
 800cccc:	2308      	movs	r3, #8
 800ccce:	2008      	movs	r0, #8
 800ccd0:	4da1      	ldr	r5, [pc, #644]	@ (800cf58 <__ssvfiscanf_r+0x2bc>)
 800ccd2:	1c57      	adds	r7, r2, #1
 800ccd4:	5da9      	ldrb	r1, [r5, r6]
 800ccd6:	400b      	ands	r3, r1
 800ccd8:	4201      	tst	r1, r0
 800ccda:	d01d      	beq.n	800cd18 <__ssvfiscanf_r+0x7c>
 800ccdc:	0006      	movs	r6, r0
 800ccde:	6863      	ldr	r3, [r4, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	dd0f      	ble.n	800cd04 <__ssvfiscanf_r+0x68>
 800cce4:	6823      	ldr	r3, [r4, #0]
 800cce6:	781a      	ldrb	r2, [r3, #0]
 800cce8:	5caa      	ldrb	r2, [r5, r2]
 800ccea:	4232      	tst	r2, r6
 800ccec:	d101      	bne.n	800ccf2 <__ssvfiscanf_r+0x56>
 800ccee:	003a      	movs	r2, r7
 800ccf0:	e7e8      	b.n	800ccc4 <__ssvfiscanf_r+0x28>
 800ccf2:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	3201      	adds	r2, #1
 800ccf8:	9247      	str	r2, [sp, #284]	@ 0x11c
 800ccfa:	6862      	ldr	r2, [r4, #4]
 800ccfc:	6023      	str	r3, [r4, #0]
 800ccfe:	3a01      	subs	r2, #1
 800cd00:	6062      	str	r2, [r4, #4]
 800cd02:	e7ec      	b.n	800ccde <__ssvfiscanf_r+0x42>
 800cd04:	22c0      	movs	r2, #192	@ 0xc0
 800cd06:	ab43      	add	r3, sp, #268	@ 0x10c
 800cd08:	0052      	lsls	r2, r2, #1
 800cd0a:	0021      	movs	r1, r4
 800cd0c:	589b      	ldr	r3, [r3, r2]
 800cd0e:	9800      	ldr	r0, [sp, #0]
 800cd10:	4798      	blx	r3
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d0e6      	beq.n	800cce4 <__ssvfiscanf_r+0x48>
 800cd16:	e7ea      	b.n	800ccee <__ssvfiscanf_r+0x52>
 800cd18:	2e25      	cmp	r6, #37	@ 0x25
 800cd1a:	d162      	bne.n	800cde2 <__ssvfiscanf_r+0x146>
 800cd1c:	9345      	str	r3, [sp, #276]	@ 0x114
 800cd1e:	9343      	str	r3, [sp, #268]	@ 0x10c
 800cd20:	7853      	ldrb	r3, [r2, #1]
 800cd22:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd24:	d102      	bne.n	800cd2c <__ssvfiscanf_r+0x90>
 800cd26:	3b1a      	subs	r3, #26
 800cd28:	9343      	str	r3, [sp, #268]	@ 0x10c
 800cd2a:	1c97      	adds	r7, r2, #2
 800cd2c:	003d      	movs	r5, r7
 800cd2e:	220a      	movs	r2, #10
 800cd30:	7829      	ldrb	r1, [r5, #0]
 800cd32:	1c6f      	adds	r7, r5, #1
 800cd34:	000b      	movs	r3, r1
 800cd36:	3b30      	subs	r3, #48	@ 0x30
 800cd38:	2b09      	cmp	r3, #9
 800cd3a:	d91f      	bls.n	800cd7c <__ssvfiscanf_r+0xe0>
 800cd3c:	4b87      	ldr	r3, [pc, #540]	@ (800cf5c <__ssvfiscanf_r+0x2c0>)
 800cd3e:	2203      	movs	r2, #3
 800cd40:	0018      	movs	r0, r3
 800cd42:	9301      	str	r3, [sp, #4]
 800cd44:	f7fe fefe 	bl	800bb44 <memchr>
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	d007      	beq.n	800cd5c <__ssvfiscanf_r+0xc0>
 800cd4c:	9b01      	ldr	r3, [sp, #4]
 800cd4e:	003d      	movs	r5, r7
 800cd50:	1ac0      	subs	r0, r0, r3
 800cd52:	2301      	movs	r3, #1
 800cd54:	4083      	lsls	r3, r0
 800cd56:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	9343      	str	r3, [sp, #268]	@ 0x10c
 800cd5c:	782b      	ldrb	r3, [r5, #0]
 800cd5e:	1c6f      	adds	r7, r5, #1
 800cd60:	2b78      	cmp	r3, #120	@ 0x78
 800cd62:	d806      	bhi.n	800cd72 <__ssvfiscanf_r+0xd6>
 800cd64:	2b57      	cmp	r3, #87	@ 0x57
 800cd66:	d810      	bhi.n	800cd8a <__ssvfiscanf_r+0xee>
 800cd68:	2b25      	cmp	r3, #37	@ 0x25
 800cd6a:	d03a      	beq.n	800cde2 <__ssvfiscanf_r+0x146>
 800cd6c:	d834      	bhi.n	800cdd8 <__ssvfiscanf_r+0x13c>
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d055      	beq.n	800ce1e <__ssvfiscanf_r+0x182>
 800cd72:	2303      	movs	r3, #3
 800cd74:	9349      	str	r3, [sp, #292]	@ 0x124
 800cd76:	3307      	adds	r3, #7
 800cd78:	9344      	str	r3, [sp, #272]	@ 0x110
 800cd7a:	e069      	b.n	800ce50 <__ssvfiscanf_r+0x1b4>
 800cd7c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800cd7e:	003d      	movs	r5, r7
 800cd80:	4353      	muls	r3, r2
 800cd82:	3b30      	subs	r3, #48	@ 0x30
 800cd84:	185b      	adds	r3, r3, r1
 800cd86:	9345      	str	r3, [sp, #276]	@ 0x114
 800cd88:	e7d2      	b.n	800cd30 <__ssvfiscanf_r+0x94>
 800cd8a:	0018      	movs	r0, r3
 800cd8c:	3858      	subs	r0, #88	@ 0x58
 800cd8e:	2820      	cmp	r0, #32
 800cd90:	d8ef      	bhi.n	800cd72 <__ssvfiscanf_r+0xd6>
 800cd92:	f7f3 f9d3 	bl	800013c <__gnu_thumb1_case_shi>
 800cd96:	004b      	.short	0x004b
 800cd98:	ffeeffee 	.word	0xffeeffee
 800cd9c:	ffee007d 	.word	0xffee007d
 800cda0:	ffeeffee 	.word	0xffeeffee
 800cda4:	ffeeffee 	.word	0xffeeffee
 800cda8:	ffeeffee 	.word	0xffeeffee
 800cdac:	007b0088 	.word	0x007b0088
 800cdb0:	00240024 	.word	0x00240024
 800cdb4:	ffee0024 	.word	0xffee0024
 800cdb8:	ffee0055 	.word	0xffee0055
 800cdbc:	ffeeffee 	.word	0xffeeffee
 800cdc0:	0090ffee 	.word	0x0090ffee
 800cdc4:	00470059 	.word	0x00470059
 800cdc8:	ffeeffee 	.word	0xffeeffee
 800cdcc:	ffee008e 	.word	0xffee008e
 800cdd0:	ffee007b 	.word	0xffee007b
 800cdd4:	004bffee 	.word	0x004bffee
 800cdd8:	3b45      	subs	r3, #69	@ 0x45
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	d8c9      	bhi.n	800cd72 <__ssvfiscanf_r+0xd6>
 800cdde:	2305      	movs	r3, #5
 800cde0:	e035      	b.n	800ce4e <__ssvfiscanf_r+0x1b2>
 800cde2:	6863      	ldr	r3, [r4, #4]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	dd0d      	ble.n	800ce04 <__ssvfiscanf_r+0x168>
 800cde8:	6823      	ldr	r3, [r4, #0]
 800cdea:	781a      	ldrb	r2, [r3, #0]
 800cdec:	42b2      	cmp	r2, r6
 800cdee:	d000      	beq.n	800cdf2 <__ssvfiscanf_r+0x156>
 800cdf0:	e0a9      	b.n	800cf46 <__ssvfiscanf_r+0x2aa>
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	6862      	ldr	r2, [r4, #4]
 800cdf6:	6023      	str	r3, [r4, #0]
 800cdf8:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800cdfa:	3a01      	subs	r2, #1
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	6062      	str	r2, [r4, #4]
 800ce00:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ce02:	e774      	b.n	800ccee <__ssvfiscanf_r+0x52>
 800ce04:	23c0      	movs	r3, #192	@ 0xc0
 800ce06:	aa43      	add	r2, sp, #268	@ 0x10c
 800ce08:	005b      	lsls	r3, r3, #1
 800ce0a:	0021      	movs	r1, r4
 800ce0c:	58d3      	ldr	r3, [r2, r3]
 800ce0e:	9800      	ldr	r0, [sp, #0]
 800ce10:	4798      	blx	r3
 800ce12:	2800      	cmp	r0, #0
 800ce14:	d0e8      	beq.n	800cde8 <__ssvfiscanf_r+0x14c>
 800ce16:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	d000      	beq.n	800ce1e <__ssvfiscanf_r+0x182>
 800ce1c:	e08b      	b.n	800cf36 <__ssvfiscanf_r+0x29a>
 800ce1e:	2001      	movs	r0, #1
 800ce20:	4240      	negs	r0, r0
 800ce22:	e08c      	b.n	800cf3e <__ssvfiscanf_r+0x2a2>
 800ce24:	2220      	movs	r2, #32
 800ce26:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 800ce28:	430a      	orrs	r2, r1
 800ce2a:	9243      	str	r2, [sp, #268]	@ 0x10c
 800ce2c:	2280      	movs	r2, #128	@ 0x80
 800ce2e:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 800ce30:	0092      	lsls	r2, r2, #2
 800ce32:	430a      	orrs	r2, r1
 800ce34:	9243      	str	r2, [sp, #268]	@ 0x10c
 800ce36:	2210      	movs	r2, #16
 800ce38:	9244      	str	r2, [sp, #272]	@ 0x110
 800ce3a:	2b6e      	cmp	r3, #110	@ 0x6e
 800ce3c:	d902      	bls.n	800ce44 <__ssvfiscanf_r+0x1a8>
 800ce3e:	e005      	b.n	800ce4c <__ssvfiscanf_r+0x1b0>
 800ce40:	2300      	movs	r3, #0
 800ce42:	9344      	str	r3, [sp, #272]	@ 0x110
 800ce44:	2303      	movs	r3, #3
 800ce46:	e002      	b.n	800ce4e <__ssvfiscanf_r+0x1b2>
 800ce48:	2308      	movs	r3, #8
 800ce4a:	9344      	str	r3, [sp, #272]	@ 0x110
 800ce4c:	2304      	movs	r3, #4
 800ce4e:	9349      	str	r3, [sp, #292]	@ 0x124
 800ce50:	6863      	ldr	r3, [r4, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	dd3e      	ble.n	800ced4 <__ssvfiscanf_r+0x238>
 800ce56:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ce58:	065b      	lsls	r3, r3, #25
 800ce5a:	d408      	bmi.n	800ce6e <__ssvfiscanf_r+0x1d2>
 800ce5c:	26c0      	movs	r6, #192	@ 0xc0
 800ce5e:	2508      	movs	r5, #8
 800ce60:	0076      	lsls	r6, r6, #1
 800ce62:	6823      	ldr	r3, [r4, #0]
 800ce64:	493c      	ldr	r1, [pc, #240]	@ (800cf58 <__ssvfiscanf_r+0x2bc>)
 800ce66:	781a      	ldrb	r2, [r3, #0]
 800ce68:	5c8a      	ldrb	r2, [r1, r2]
 800ce6a:	422a      	tst	r2, r5
 800ce6c:	d13c      	bne.n	800cee8 <__ssvfiscanf_r+0x24c>
 800ce6e:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	dc4c      	bgt.n	800cf0e <__ssvfiscanf_r+0x272>
 800ce74:	0022      	movs	r2, r4
 800ce76:	9800      	ldr	r0, [sp, #0]
 800ce78:	ab02      	add	r3, sp, #8
 800ce7a:	a943      	add	r1, sp, #268	@ 0x10c
 800ce7c:	f000 f91e 	bl	800d0bc <_scanf_chars>
 800ce80:	2801      	cmp	r0, #1
 800ce82:	d060      	beq.n	800cf46 <__ssvfiscanf_r+0x2aa>
 800ce84:	2802      	cmp	r0, #2
 800ce86:	d000      	beq.n	800ce8a <__ssvfiscanf_r+0x1ee>
 800ce88:	e731      	b.n	800ccee <__ssvfiscanf_r+0x52>
 800ce8a:	e7c4      	b.n	800ce16 <__ssvfiscanf_r+0x17a>
 800ce8c:	220a      	movs	r2, #10
 800ce8e:	e7d3      	b.n	800ce38 <__ssvfiscanf_r+0x19c>
 800ce90:	0039      	movs	r1, r7
 800ce92:	a803      	add	r0, sp, #12
 800ce94:	f000 fa72 	bl	800d37c <__sccl>
 800ce98:	2340      	movs	r3, #64	@ 0x40
 800ce9a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800ce9c:	0007      	movs	r7, r0
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	9343      	str	r3, [sp, #268]	@ 0x10c
 800cea2:	2301      	movs	r3, #1
 800cea4:	e7d3      	b.n	800ce4e <__ssvfiscanf_r+0x1b2>
 800cea6:	2340      	movs	r3, #64	@ 0x40
 800cea8:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	9343      	str	r3, [sp, #268]	@ 0x10c
 800ceae:	2300      	movs	r3, #0
 800ceb0:	e7cd      	b.n	800ce4e <__ssvfiscanf_r+0x1b2>
 800ceb2:	2302      	movs	r3, #2
 800ceb4:	e7cb      	b.n	800ce4e <__ssvfiscanf_r+0x1b2>
 800ceb6:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800ceb8:	06d3      	lsls	r3, r2, #27
 800ceba:	d500      	bpl.n	800cebe <__ssvfiscanf_r+0x222>
 800cebc:	e717      	b.n	800ccee <__ssvfiscanf_r+0x52>
 800cebe:	9b02      	ldr	r3, [sp, #8]
 800cec0:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 800cec2:	1d18      	adds	r0, r3, #4
 800cec4:	9002      	str	r0, [sp, #8]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	07d5      	lsls	r5, r2, #31
 800ceca:	d501      	bpl.n	800ced0 <__ssvfiscanf_r+0x234>
 800cecc:	8019      	strh	r1, [r3, #0]
 800cece:	e70e      	b.n	800ccee <__ssvfiscanf_r+0x52>
 800ced0:	6019      	str	r1, [r3, #0]
 800ced2:	e70c      	b.n	800ccee <__ssvfiscanf_r+0x52>
 800ced4:	23c0      	movs	r3, #192	@ 0xc0
 800ced6:	aa43      	add	r2, sp, #268	@ 0x10c
 800ced8:	005b      	lsls	r3, r3, #1
 800ceda:	0021      	movs	r1, r4
 800cedc:	58d3      	ldr	r3, [r2, r3]
 800cede:	9800      	ldr	r0, [sp, #0]
 800cee0:	4798      	blx	r3
 800cee2:	2800      	cmp	r0, #0
 800cee4:	d0b7      	beq.n	800ce56 <__ssvfiscanf_r+0x1ba>
 800cee6:	e796      	b.n	800ce16 <__ssvfiscanf_r+0x17a>
 800cee8:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800ceea:	3201      	adds	r2, #1
 800ceec:	9247      	str	r2, [sp, #284]	@ 0x11c
 800ceee:	6862      	ldr	r2, [r4, #4]
 800cef0:	3a01      	subs	r2, #1
 800cef2:	6062      	str	r2, [r4, #4]
 800cef4:	2a00      	cmp	r2, #0
 800cef6:	dd02      	ble.n	800cefe <__ssvfiscanf_r+0x262>
 800cef8:	3301      	adds	r3, #1
 800cefa:	6023      	str	r3, [r4, #0]
 800cefc:	e7b1      	b.n	800ce62 <__ssvfiscanf_r+0x1c6>
 800cefe:	ab43      	add	r3, sp, #268	@ 0x10c
 800cf00:	0021      	movs	r1, r4
 800cf02:	599b      	ldr	r3, [r3, r6]
 800cf04:	9800      	ldr	r0, [sp, #0]
 800cf06:	4798      	blx	r3
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	d0aa      	beq.n	800ce62 <__ssvfiscanf_r+0x1c6>
 800cf0c:	e783      	b.n	800ce16 <__ssvfiscanf_r+0x17a>
 800cf0e:	2b04      	cmp	r3, #4
 800cf10:	dc06      	bgt.n	800cf20 <__ssvfiscanf_r+0x284>
 800cf12:	0022      	movs	r2, r4
 800cf14:	9800      	ldr	r0, [sp, #0]
 800cf16:	ab02      	add	r3, sp, #8
 800cf18:	a943      	add	r1, sp, #268	@ 0x10c
 800cf1a:	f000 f92f 	bl	800d17c <_scanf_i>
 800cf1e:	e7af      	b.n	800ce80 <__ssvfiscanf_r+0x1e4>
 800cf20:	4b0f      	ldr	r3, [pc, #60]	@ (800cf60 <__ssvfiscanf_r+0x2c4>)
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d100      	bne.n	800cf28 <__ssvfiscanf_r+0x28c>
 800cf26:	e6e2      	b.n	800ccee <__ssvfiscanf_r+0x52>
 800cf28:	0022      	movs	r2, r4
 800cf2a:	9800      	ldr	r0, [sp, #0]
 800cf2c:	ab02      	add	r3, sp, #8
 800cf2e:	a943      	add	r1, sp, #268	@ 0x10c
 800cf30:	e000      	b.n	800cf34 <__ssvfiscanf_r+0x298>
 800cf32:	bf00      	nop
 800cf34:	e7a4      	b.n	800ce80 <__ssvfiscanf_r+0x1e4>
 800cf36:	89a3      	ldrh	r3, [r4, #12]
 800cf38:	065b      	lsls	r3, r3, #25
 800cf3a:	d500      	bpl.n	800cf3e <__ssvfiscanf_r+0x2a2>
 800cf3c:	e76f      	b.n	800ce1e <__ssvfiscanf_r+0x182>
 800cf3e:	23a5      	movs	r3, #165	@ 0xa5
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	449d      	add	sp, r3
 800cf44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf46:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800cf48:	e7f9      	b.n	800cf3e <__ssvfiscanf_r+0x2a2>
 800cf4a:	46c0      	nop			@ (mov r8, r8)
 800cf4c:	fffffd6c 	.word	0xfffffd6c
 800cf50:	0800cbe5 	.word	0x0800cbe5
 800cf54:	0800cc5d 	.word	0x0800cc5d
 800cf58:	0800f121 	.word	0x0800f121
 800cf5c:	0800ef97 	.word	0x0800ef97
 800cf60:	00000000 	.word	0x00000000

0800cf64 <malloc>:
 800cf64:	b510      	push	{r4, lr}
 800cf66:	4b03      	ldr	r3, [pc, #12]	@ (800cf74 <malloc+0x10>)
 800cf68:	0001      	movs	r1, r0
 800cf6a:	6818      	ldr	r0, [r3, #0]
 800cf6c:	f000 f826 	bl	800cfbc <_malloc_r>
 800cf70:	bd10      	pop	{r4, pc}
 800cf72:	46c0      	nop			@ (mov r8, r8)
 800cf74:	20000018 	.word	0x20000018

0800cf78 <sbrk_aligned>:
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	4e0f      	ldr	r6, [pc, #60]	@ (800cfb8 <sbrk_aligned+0x40>)
 800cf7c:	000d      	movs	r5, r1
 800cf7e:	6831      	ldr	r1, [r6, #0]
 800cf80:	0004      	movs	r4, r0
 800cf82:	2900      	cmp	r1, #0
 800cf84:	d102      	bne.n	800cf8c <sbrk_aligned+0x14>
 800cf86:	f001 f835 	bl	800dff4 <_sbrk_r>
 800cf8a:	6030      	str	r0, [r6, #0]
 800cf8c:	0029      	movs	r1, r5
 800cf8e:	0020      	movs	r0, r4
 800cf90:	f001 f830 	bl	800dff4 <_sbrk_r>
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	d103      	bne.n	800cfa0 <sbrk_aligned+0x28>
 800cf98:	2501      	movs	r5, #1
 800cf9a:	426d      	negs	r5, r5
 800cf9c:	0028      	movs	r0, r5
 800cf9e:	bd70      	pop	{r4, r5, r6, pc}
 800cfa0:	2303      	movs	r3, #3
 800cfa2:	1cc5      	adds	r5, r0, #3
 800cfa4:	439d      	bics	r5, r3
 800cfa6:	42a8      	cmp	r0, r5
 800cfa8:	d0f8      	beq.n	800cf9c <sbrk_aligned+0x24>
 800cfaa:	1a29      	subs	r1, r5, r0
 800cfac:	0020      	movs	r0, r4
 800cfae:	f001 f821 	bl	800dff4 <_sbrk_r>
 800cfb2:	3001      	adds	r0, #1
 800cfb4:	d1f2      	bne.n	800cf9c <sbrk_aligned+0x24>
 800cfb6:	e7ef      	b.n	800cf98 <sbrk_aligned+0x20>
 800cfb8:	20000934 	.word	0x20000934

0800cfbc <_malloc_r>:
 800cfbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfbe:	2203      	movs	r2, #3
 800cfc0:	1ccb      	adds	r3, r1, #3
 800cfc2:	4393      	bics	r3, r2
 800cfc4:	3308      	adds	r3, #8
 800cfc6:	0005      	movs	r5, r0
 800cfc8:	001f      	movs	r7, r3
 800cfca:	2b0c      	cmp	r3, #12
 800cfcc:	d234      	bcs.n	800d038 <_malloc_r+0x7c>
 800cfce:	270c      	movs	r7, #12
 800cfd0:	42b9      	cmp	r1, r7
 800cfd2:	d833      	bhi.n	800d03c <_malloc_r+0x80>
 800cfd4:	0028      	movs	r0, r5
 800cfd6:	f000 fabd 	bl	800d554 <__malloc_lock>
 800cfda:	4e37      	ldr	r6, [pc, #220]	@ (800d0b8 <_malloc_r+0xfc>)
 800cfdc:	6833      	ldr	r3, [r6, #0]
 800cfde:	001c      	movs	r4, r3
 800cfe0:	2c00      	cmp	r4, #0
 800cfe2:	d12f      	bne.n	800d044 <_malloc_r+0x88>
 800cfe4:	0039      	movs	r1, r7
 800cfe6:	0028      	movs	r0, r5
 800cfe8:	f7ff ffc6 	bl	800cf78 <sbrk_aligned>
 800cfec:	0004      	movs	r4, r0
 800cfee:	1c43      	adds	r3, r0, #1
 800cff0:	d15f      	bne.n	800d0b2 <_malloc_r+0xf6>
 800cff2:	6834      	ldr	r4, [r6, #0]
 800cff4:	9400      	str	r4, [sp, #0]
 800cff6:	9b00      	ldr	r3, [sp, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d14a      	bne.n	800d092 <_malloc_r+0xd6>
 800cffc:	2c00      	cmp	r4, #0
 800cffe:	d052      	beq.n	800d0a6 <_malloc_r+0xea>
 800d000:	6823      	ldr	r3, [r4, #0]
 800d002:	0028      	movs	r0, r5
 800d004:	18e3      	adds	r3, r4, r3
 800d006:	9900      	ldr	r1, [sp, #0]
 800d008:	9301      	str	r3, [sp, #4]
 800d00a:	f000 fff3 	bl	800dff4 <_sbrk_r>
 800d00e:	9b01      	ldr	r3, [sp, #4]
 800d010:	4283      	cmp	r3, r0
 800d012:	d148      	bne.n	800d0a6 <_malloc_r+0xea>
 800d014:	6823      	ldr	r3, [r4, #0]
 800d016:	0028      	movs	r0, r5
 800d018:	1aff      	subs	r7, r7, r3
 800d01a:	0039      	movs	r1, r7
 800d01c:	f7ff ffac 	bl	800cf78 <sbrk_aligned>
 800d020:	3001      	adds	r0, #1
 800d022:	d040      	beq.n	800d0a6 <_malloc_r+0xea>
 800d024:	6823      	ldr	r3, [r4, #0]
 800d026:	19db      	adds	r3, r3, r7
 800d028:	6023      	str	r3, [r4, #0]
 800d02a:	6833      	ldr	r3, [r6, #0]
 800d02c:	685a      	ldr	r2, [r3, #4]
 800d02e:	2a00      	cmp	r2, #0
 800d030:	d133      	bne.n	800d09a <_malloc_r+0xde>
 800d032:	9b00      	ldr	r3, [sp, #0]
 800d034:	6033      	str	r3, [r6, #0]
 800d036:	e019      	b.n	800d06c <_malloc_r+0xb0>
 800d038:	2b00      	cmp	r3, #0
 800d03a:	dac9      	bge.n	800cfd0 <_malloc_r+0x14>
 800d03c:	230c      	movs	r3, #12
 800d03e:	602b      	str	r3, [r5, #0]
 800d040:	2000      	movs	r0, #0
 800d042:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d044:	6821      	ldr	r1, [r4, #0]
 800d046:	1bc9      	subs	r1, r1, r7
 800d048:	d420      	bmi.n	800d08c <_malloc_r+0xd0>
 800d04a:	290b      	cmp	r1, #11
 800d04c:	d90a      	bls.n	800d064 <_malloc_r+0xa8>
 800d04e:	19e2      	adds	r2, r4, r7
 800d050:	6027      	str	r7, [r4, #0]
 800d052:	42a3      	cmp	r3, r4
 800d054:	d104      	bne.n	800d060 <_malloc_r+0xa4>
 800d056:	6032      	str	r2, [r6, #0]
 800d058:	6863      	ldr	r3, [r4, #4]
 800d05a:	6011      	str	r1, [r2, #0]
 800d05c:	6053      	str	r3, [r2, #4]
 800d05e:	e005      	b.n	800d06c <_malloc_r+0xb0>
 800d060:	605a      	str	r2, [r3, #4]
 800d062:	e7f9      	b.n	800d058 <_malloc_r+0x9c>
 800d064:	6862      	ldr	r2, [r4, #4]
 800d066:	42a3      	cmp	r3, r4
 800d068:	d10e      	bne.n	800d088 <_malloc_r+0xcc>
 800d06a:	6032      	str	r2, [r6, #0]
 800d06c:	0028      	movs	r0, r5
 800d06e:	f000 fa79 	bl	800d564 <__malloc_unlock>
 800d072:	0020      	movs	r0, r4
 800d074:	2207      	movs	r2, #7
 800d076:	300b      	adds	r0, #11
 800d078:	1d23      	adds	r3, r4, #4
 800d07a:	4390      	bics	r0, r2
 800d07c:	1ac2      	subs	r2, r0, r3
 800d07e:	4298      	cmp	r0, r3
 800d080:	d0df      	beq.n	800d042 <_malloc_r+0x86>
 800d082:	1a1b      	subs	r3, r3, r0
 800d084:	50a3      	str	r3, [r4, r2]
 800d086:	e7dc      	b.n	800d042 <_malloc_r+0x86>
 800d088:	605a      	str	r2, [r3, #4]
 800d08a:	e7ef      	b.n	800d06c <_malloc_r+0xb0>
 800d08c:	0023      	movs	r3, r4
 800d08e:	6864      	ldr	r4, [r4, #4]
 800d090:	e7a6      	b.n	800cfe0 <_malloc_r+0x24>
 800d092:	9c00      	ldr	r4, [sp, #0]
 800d094:	6863      	ldr	r3, [r4, #4]
 800d096:	9300      	str	r3, [sp, #0]
 800d098:	e7ad      	b.n	800cff6 <_malloc_r+0x3a>
 800d09a:	001a      	movs	r2, r3
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	42a3      	cmp	r3, r4
 800d0a0:	d1fb      	bne.n	800d09a <_malloc_r+0xde>
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	e7da      	b.n	800d05c <_malloc_r+0xa0>
 800d0a6:	230c      	movs	r3, #12
 800d0a8:	0028      	movs	r0, r5
 800d0aa:	602b      	str	r3, [r5, #0]
 800d0ac:	f000 fa5a 	bl	800d564 <__malloc_unlock>
 800d0b0:	e7c6      	b.n	800d040 <_malloc_r+0x84>
 800d0b2:	6007      	str	r7, [r0, #0]
 800d0b4:	e7da      	b.n	800d06c <_malloc_r+0xb0>
 800d0b6:	46c0      	nop			@ (mov r8, r8)
 800d0b8:	20000938 	.word	0x20000938

0800d0bc <_scanf_chars>:
 800d0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0be:	0015      	movs	r5, r2
 800d0c0:	688a      	ldr	r2, [r1, #8]
 800d0c2:	000c      	movs	r4, r1
 800d0c4:	9001      	str	r0, [sp, #4]
 800d0c6:	2a00      	cmp	r2, #0
 800d0c8:	d104      	bne.n	800d0d4 <_scanf_chars+0x18>
 800d0ca:	698a      	ldr	r2, [r1, #24]
 800d0cc:	2a00      	cmp	r2, #0
 800d0ce:	d117      	bne.n	800d100 <_scanf_chars+0x44>
 800d0d0:	3201      	adds	r2, #1
 800d0d2:	60a2      	str	r2, [r4, #8]
 800d0d4:	6822      	ldr	r2, [r4, #0]
 800d0d6:	06d2      	lsls	r2, r2, #27
 800d0d8:	d403      	bmi.n	800d0e2 <_scanf_chars+0x26>
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	1d11      	adds	r1, r2, #4
 800d0de:	6019      	str	r1, [r3, #0]
 800d0e0:	6817      	ldr	r7, [r2, #0]
 800d0e2:	2600      	movs	r6, #0
 800d0e4:	69a0      	ldr	r0, [r4, #24]
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d016      	beq.n	800d118 <_scanf_chars+0x5c>
 800d0ea:	2801      	cmp	r0, #1
 800d0ec:	d10b      	bne.n	800d106 <_scanf_chars+0x4a>
 800d0ee:	682b      	ldr	r3, [r5, #0]
 800d0f0:	6962      	ldr	r2, [r4, #20]
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	5cd3      	ldrb	r3, [r2, r3]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d10e      	bne.n	800d118 <_scanf_chars+0x5c>
 800d0fa:	2e00      	cmp	r6, #0
 800d0fc:	d03b      	beq.n	800d176 <_scanf_chars+0xba>
 800d0fe:	e029      	b.n	800d154 <_scanf_chars+0x98>
 800d100:	2201      	movs	r2, #1
 800d102:	4252      	negs	r2, r2
 800d104:	e7e5      	b.n	800d0d2 <_scanf_chars+0x16>
 800d106:	2802      	cmp	r0, #2
 800d108:	d124      	bne.n	800d154 <_scanf_chars+0x98>
 800d10a:	682b      	ldr	r3, [r5, #0]
 800d10c:	4a1a      	ldr	r2, [pc, #104]	@ (800d178 <_scanf_chars+0xbc>)
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	5cd3      	ldrb	r3, [r2, r3]
 800d112:	2208      	movs	r2, #8
 800d114:	4213      	tst	r3, r2
 800d116:	d11d      	bne.n	800d154 <_scanf_chars+0x98>
 800d118:	2210      	movs	r2, #16
 800d11a:	6823      	ldr	r3, [r4, #0]
 800d11c:	3601      	adds	r6, #1
 800d11e:	4213      	tst	r3, r2
 800d120:	d103      	bne.n	800d12a <_scanf_chars+0x6e>
 800d122:	682b      	ldr	r3, [r5, #0]
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	703b      	strb	r3, [r7, #0]
 800d128:	3701      	adds	r7, #1
 800d12a:	682a      	ldr	r2, [r5, #0]
 800d12c:	686b      	ldr	r3, [r5, #4]
 800d12e:	3201      	adds	r2, #1
 800d130:	602a      	str	r2, [r5, #0]
 800d132:	68a2      	ldr	r2, [r4, #8]
 800d134:	3b01      	subs	r3, #1
 800d136:	3a01      	subs	r2, #1
 800d138:	606b      	str	r3, [r5, #4]
 800d13a:	60a2      	str	r2, [r4, #8]
 800d13c:	2a00      	cmp	r2, #0
 800d13e:	d009      	beq.n	800d154 <_scanf_chars+0x98>
 800d140:	2b00      	cmp	r3, #0
 800d142:	dccf      	bgt.n	800d0e4 <_scanf_chars+0x28>
 800d144:	23c0      	movs	r3, #192	@ 0xc0
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	0029      	movs	r1, r5
 800d14a:	58e3      	ldr	r3, [r4, r3]
 800d14c:	9801      	ldr	r0, [sp, #4]
 800d14e:	4798      	blx	r3
 800d150:	2800      	cmp	r0, #0
 800d152:	d0c7      	beq.n	800d0e4 <_scanf_chars+0x28>
 800d154:	6822      	ldr	r2, [r4, #0]
 800d156:	2310      	movs	r3, #16
 800d158:	0011      	movs	r1, r2
 800d15a:	4019      	ands	r1, r3
 800d15c:	421a      	tst	r2, r3
 800d15e:	d106      	bne.n	800d16e <_scanf_chars+0xb2>
 800d160:	68e3      	ldr	r3, [r4, #12]
 800d162:	3301      	adds	r3, #1
 800d164:	60e3      	str	r3, [r4, #12]
 800d166:	69a3      	ldr	r3, [r4, #24]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d000      	beq.n	800d16e <_scanf_chars+0xb2>
 800d16c:	7039      	strb	r1, [r7, #0]
 800d16e:	2000      	movs	r0, #0
 800d170:	6923      	ldr	r3, [r4, #16]
 800d172:	199b      	adds	r3, r3, r6
 800d174:	6123      	str	r3, [r4, #16]
 800d176:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d178:	0800f121 	.word	0x0800f121

0800d17c <_scanf_i>:
 800d17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d17e:	b08b      	sub	sp, #44	@ 0x2c
 800d180:	9301      	str	r3, [sp, #4]
 800d182:	4b78      	ldr	r3, [pc, #480]	@ (800d364 <_scanf_i+0x1e8>)
 800d184:	0016      	movs	r6, r2
 800d186:	9004      	str	r0, [sp, #16]
 800d188:	aa07      	add	r2, sp, #28
 800d18a:	cba1      	ldmia	r3!, {r0, r5, r7}
 800d18c:	c2a1      	stmia	r2!, {r0, r5, r7}
 800d18e:	4a76      	ldr	r2, [pc, #472]	@ (800d368 <_scanf_i+0x1ec>)
 800d190:	698b      	ldr	r3, [r1, #24]
 800d192:	000c      	movs	r4, r1
 800d194:	9205      	str	r2, [sp, #20]
 800d196:	2b03      	cmp	r3, #3
 800d198:	d101      	bne.n	800d19e <_scanf_i+0x22>
 800d19a:	4b74      	ldr	r3, [pc, #464]	@ (800d36c <_scanf_i+0x1f0>)
 800d19c:	9305      	str	r3, [sp, #20]
 800d19e:	22ae      	movs	r2, #174	@ 0xae
 800d1a0:	2000      	movs	r0, #0
 800d1a2:	68a3      	ldr	r3, [r4, #8]
 800d1a4:	0052      	lsls	r2, r2, #1
 800d1a6:	1e59      	subs	r1, r3, #1
 800d1a8:	9003      	str	r0, [sp, #12]
 800d1aa:	4291      	cmp	r1, r2
 800d1ac:	d905      	bls.n	800d1ba <_scanf_i+0x3e>
 800d1ae:	3b5e      	subs	r3, #94	@ 0x5e
 800d1b0:	3bff      	subs	r3, #255	@ 0xff
 800d1b2:	9303      	str	r3, [sp, #12]
 800d1b4:	235e      	movs	r3, #94	@ 0x5e
 800d1b6:	33ff      	adds	r3, #255	@ 0xff
 800d1b8:	60a3      	str	r3, [r4, #8]
 800d1ba:	0023      	movs	r3, r4
 800d1bc:	331c      	adds	r3, #28
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	23d0      	movs	r3, #208	@ 0xd0
 800d1c2:	2700      	movs	r7, #0
 800d1c4:	6822      	ldr	r2, [r4, #0]
 800d1c6:	011b      	lsls	r3, r3, #4
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	6023      	str	r3, [r4, #0]
 800d1cc:	9b00      	ldr	r3, [sp, #0]
 800d1ce:	9302      	str	r3, [sp, #8]
 800d1d0:	6833      	ldr	r3, [r6, #0]
 800d1d2:	a807      	add	r0, sp, #28
 800d1d4:	7819      	ldrb	r1, [r3, #0]
 800d1d6:	00bb      	lsls	r3, r7, #2
 800d1d8:	2202      	movs	r2, #2
 800d1da:	5818      	ldr	r0, [r3, r0]
 800d1dc:	f7fe fcb2 	bl	800bb44 <memchr>
 800d1e0:	2800      	cmp	r0, #0
 800d1e2:	d029      	beq.n	800d238 <_scanf_i+0xbc>
 800d1e4:	2f01      	cmp	r7, #1
 800d1e6:	d15e      	bne.n	800d2a6 <_scanf_i+0x12a>
 800d1e8:	6863      	ldr	r3, [r4, #4]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d106      	bne.n	800d1fc <_scanf_i+0x80>
 800d1ee:	3308      	adds	r3, #8
 800d1f0:	6822      	ldr	r2, [r4, #0]
 800d1f2:	6063      	str	r3, [r4, #4]
 800d1f4:	33f9      	adds	r3, #249	@ 0xf9
 800d1f6:	33ff      	adds	r3, #255	@ 0xff
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	6023      	str	r3, [r4, #0]
 800d1fc:	6823      	ldr	r3, [r4, #0]
 800d1fe:	4a5c      	ldr	r2, [pc, #368]	@ (800d370 <_scanf_i+0x1f4>)
 800d200:	4013      	ands	r3, r2
 800d202:	6023      	str	r3, [r4, #0]
 800d204:	68a3      	ldr	r3, [r4, #8]
 800d206:	1e5a      	subs	r2, r3, #1
 800d208:	60a2      	str	r2, [r4, #8]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d014      	beq.n	800d238 <_scanf_i+0xbc>
 800d20e:	6833      	ldr	r3, [r6, #0]
 800d210:	1c5a      	adds	r2, r3, #1
 800d212:	6032      	str	r2, [r6, #0]
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	9a02      	ldr	r2, [sp, #8]
 800d218:	7013      	strb	r3, [r2, #0]
 800d21a:	6873      	ldr	r3, [r6, #4]
 800d21c:	1c55      	adds	r5, r2, #1
 800d21e:	3b01      	subs	r3, #1
 800d220:	6073      	str	r3, [r6, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	dc07      	bgt.n	800d236 <_scanf_i+0xba>
 800d226:	23c0      	movs	r3, #192	@ 0xc0
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	0031      	movs	r1, r6
 800d22c:	58e3      	ldr	r3, [r4, r3]
 800d22e:	9804      	ldr	r0, [sp, #16]
 800d230:	4798      	blx	r3
 800d232:	2800      	cmp	r0, #0
 800d234:	d17e      	bne.n	800d334 <_scanf_i+0x1b8>
 800d236:	9502      	str	r5, [sp, #8]
 800d238:	3701      	adds	r7, #1
 800d23a:	2f03      	cmp	r7, #3
 800d23c:	d1c8      	bne.n	800d1d0 <_scanf_i+0x54>
 800d23e:	6863      	ldr	r3, [r4, #4]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d101      	bne.n	800d248 <_scanf_i+0xcc>
 800d244:	330a      	adds	r3, #10
 800d246:	6063      	str	r3, [r4, #4]
 800d248:	2700      	movs	r7, #0
 800d24a:	6863      	ldr	r3, [r4, #4]
 800d24c:	4949      	ldr	r1, [pc, #292]	@ (800d374 <_scanf_i+0x1f8>)
 800d24e:	6960      	ldr	r0, [r4, #20]
 800d250:	1ac9      	subs	r1, r1, r3
 800d252:	f000 f893 	bl	800d37c <__sccl>
 800d256:	9d02      	ldr	r5, [sp, #8]
 800d258:	68a3      	ldr	r3, [r4, #8]
 800d25a:	6820      	ldr	r0, [r4, #0]
 800d25c:	9302      	str	r3, [sp, #8]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d03f      	beq.n	800d2e2 <_scanf_i+0x166>
 800d262:	6831      	ldr	r1, [r6, #0]
 800d264:	6963      	ldr	r3, [r4, #20]
 800d266:	780a      	ldrb	r2, [r1, #0]
 800d268:	5c9b      	ldrb	r3, [r3, r2]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d039      	beq.n	800d2e2 <_scanf_i+0x166>
 800d26e:	2a30      	cmp	r2, #48	@ 0x30
 800d270:	d128      	bne.n	800d2c4 <_scanf_i+0x148>
 800d272:	2380      	movs	r3, #128	@ 0x80
 800d274:	011b      	lsls	r3, r3, #4
 800d276:	4218      	tst	r0, r3
 800d278:	d024      	beq.n	800d2c4 <_scanf_i+0x148>
 800d27a:	9b03      	ldr	r3, [sp, #12]
 800d27c:	3701      	adds	r7, #1
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d005      	beq.n	800d28e <_scanf_i+0x112>
 800d282:	001a      	movs	r2, r3
 800d284:	9b02      	ldr	r3, [sp, #8]
 800d286:	3a01      	subs	r2, #1
 800d288:	3301      	adds	r3, #1
 800d28a:	9203      	str	r2, [sp, #12]
 800d28c:	60a3      	str	r3, [r4, #8]
 800d28e:	6873      	ldr	r3, [r6, #4]
 800d290:	3b01      	subs	r3, #1
 800d292:	6073      	str	r3, [r6, #4]
 800d294:	2b00      	cmp	r3, #0
 800d296:	dd1c      	ble.n	800d2d2 <_scanf_i+0x156>
 800d298:	6833      	ldr	r3, [r6, #0]
 800d29a:	3301      	adds	r3, #1
 800d29c:	6033      	str	r3, [r6, #0]
 800d29e:	68a3      	ldr	r3, [r4, #8]
 800d2a0:	3b01      	subs	r3, #1
 800d2a2:	60a3      	str	r3, [r4, #8]
 800d2a4:	e7d8      	b.n	800d258 <_scanf_i+0xdc>
 800d2a6:	2f02      	cmp	r7, #2
 800d2a8:	d1ac      	bne.n	800d204 <_scanf_i+0x88>
 800d2aa:	23c0      	movs	r3, #192	@ 0xc0
 800d2ac:	2180      	movs	r1, #128	@ 0x80
 800d2ae:	6822      	ldr	r2, [r4, #0]
 800d2b0:	00db      	lsls	r3, r3, #3
 800d2b2:	4013      	ands	r3, r2
 800d2b4:	0089      	lsls	r1, r1, #2
 800d2b6:	428b      	cmp	r3, r1
 800d2b8:	d1c1      	bne.n	800d23e <_scanf_i+0xc2>
 800d2ba:	2310      	movs	r3, #16
 800d2bc:	6063      	str	r3, [r4, #4]
 800d2be:	33f0      	adds	r3, #240	@ 0xf0
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	e79e      	b.n	800d202 <_scanf_i+0x86>
 800d2c4:	4b2c      	ldr	r3, [pc, #176]	@ (800d378 <_scanf_i+0x1fc>)
 800d2c6:	4003      	ands	r3, r0
 800d2c8:	6023      	str	r3, [r4, #0]
 800d2ca:	780b      	ldrb	r3, [r1, #0]
 800d2cc:	702b      	strb	r3, [r5, #0]
 800d2ce:	3501      	adds	r5, #1
 800d2d0:	e7dd      	b.n	800d28e <_scanf_i+0x112>
 800d2d2:	23c0      	movs	r3, #192	@ 0xc0
 800d2d4:	005b      	lsls	r3, r3, #1
 800d2d6:	0031      	movs	r1, r6
 800d2d8:	58e3      	ldr	r3, [r4, r3]
 800d2da:	9804      	ldr	r0, [sp, #16]
 800d2dc:	4798      	blx	r3
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	d0dd      	beq.n	800d29e <_scanf_i+0x122>
 800d2e2:	6823      	ldr	r3, [r4, #0]
 800d2e4:	05db      	lsls	r3, r3, #23
 800d2e6:	d50e      	bpl.n	800d306 <_scanf_i+0x18a>
 800d2e8:	9b00      	ldr	r3, [sp, #0]
 800d2ea:	429d      	cmp	r5, r3
 800d2ec:	d907      	bls.n	800d2fe <_scanf_i+0x182>
 800d2ee:	23be      	movs	r3, #190	@ 0xbe
 800d2f0:	3d01      	subs	r5, #1
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	0032      	movs	r2, r6
 800d2f6:	7829      	ldrb	r1, [r5, #0]
 800d2f8:	58e3      	ldr	r3, [r4, r3]
 800d2fa:	9804      	ldr	r0, [sp, #16]
 800d2fc:	4798      	blx	r3
 800d2fe:	9b00      	ldr	r3, [sp, #0]
 800d300:	2001      	movs	r0, #1
 800d302:	429d      	cmp	r5, r3
 800d304:	d029      	beq.n	800d35a <_scanf_i+0x1de>
 800d306:	6821      	ldr	r1, [r4, #0]
 800d308:	2310      	movs	r3, #16
 800d30a:	000a      	movs	r2, r1
 800d30c:	401a      	ands	r2, r3
 800d30e:	4219      	tst	r1, r3
 800d310:	d11c      	bne.n	800d34c <_scanf_i+0x1d0>
 800d312:	702a      	strb	r2, [r5, #0]
 800d314:	6863      	ldr	r3, [r4, #4]
 800d316:	9900      	ldr	r1, [sp, #0]
 800d318:	9804      	ldr	r0, [sp, #16]
 800d31a:	9e05      	ldr	r6, [sp, #20]
 800d31c:	47b0      	blx	r6
 800d31e:	9b01      	ldr	r3, [sp, #4]
 800d320:	6822      	ldr	r2, [r4, #0]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	0691      	lsls	r1, r2, #26
 800d326:	d507      	bpl.n	800d338 <_scanf_i+0x1bc>
 800d328:	9901      	ldr	r1, [sp, #4]
 800d32a:	1d1a      	adds	r2, r3, #4
 800d32c:	600a      	str	r2, [r1, #0]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6018      	str	r0, [r3, #0]
 800d332:	e008      	b.n	800d346 <_scanf_i+0x1ca>
 800d334:	2700      	movs	r7, #0
 800d336:	e7d4      	b.n	800d2e2 <_scanf_i+0x166>
 800d338:	1d19      	adds	r1, r3, #4
 800d33a:	07d6      	lsls	r6, r2, #31
 800d33c:	d50f      	bpl.n	800d35e <_scanf_i+0x1e2>
 800d33e:	9a01      	ldr	r2, [sp, #4]
 800d340:	6011      	str	r1, [r2, #0]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	8018      	strh	r0, [r3, #0]
 800d346:	68e3      	ldr	r3, [r4, #12]
 800d348:	3301      	adds	r3, #1
 800d34a:	60e3      	str	r3, [r4, #12]
 800d34c:	2000      	movs	r0, #0
 800d34e:	9b00      	ldr	r3, [sp, #0]
 800d350:	1aed      	subs	r5, r5, r3
 800d352:	6923      	ldr	r3, [r4, #16]
 800d354:	19ed      	adds	r5, r5, r7
 800d356:	195b      	adds	r3, r3, r5
 800d358:	6123      	str	r3, [r4, #16]
 800d35a:	b00b      	add	sp, #44	@ 0x2c
 800d35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d35e:	9a01      	ldr	r2, [sp, #4]
 800d360:	6011      	str	r1, [r2, #0]
 800d362:	e7e4      	b.n	800d32e <_scanf_i+0x1b2>
 800d364:	0800ecec 	.word	0x0800ecec
 800d368:	0800dfc9 	.word	0x0800dfc9
 800d36c:	0800debd 	.word	0x0800debd
 800d370:	fffffaff 	.word	0xfffffaff
 800d374:	0800efb2 	.word	0x0800efb2
 800d378:	fffff6ff 	.word	0xfffff6ff

0800d37c <__sccl>:
 800d37c:	b570      	push	{r4, r5, r6, lr}
 800d37e:	780b      	ldrb	r3, [r1, #0]
 800d380:	0004      	movs	r4, r0
 800d382:	2b5e      	cmp	r3, #94	@ 0x5e
 800d384:	d019      	beq.n	800d3ba <__sccl+0x3e>
 800d386:	1c4d      	adds	r5, r1, #1
 800d388:	2100      	movs	r1, #0
 800d38a:	0022      	movs	r2, r4
 800d38c:	1c60      	adds	r0, r4, #1
 800d38e:	30ff      	adds	r0, #255	@ 0xff
 800d390:	7011      	strb	r1, [r2, #0]
 800d392:	3201      	adds	r2, #1
 800d394:	4282      	cmp	r2, r0
 800d396:	d1fb      	bne.n	800d390 <__sccl+0x14>
 800d398:	1e68      	subs	r0, r5, #1
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d026      	beq.n	800d3ec <__sccl+0x70>
 800d39e:	2601      	movs	r6, #1
 800d3a0:	404e      	eors	r6, r1
 800d3a2:	0028      	movs	r0, r5
 800d3a4:	54e6      	strb	r6, [r4, r3]
 800d3a6:	7801      	ldrb	r1, [r0, #0]
 800d3a8:	1c45      	adds	r5, r0, #1
 800d3aa:	292d      	cmp	r1, #45	@ 0x2d
 800d3ac:	d009      	beq.n	800d3c2 <__sccl+0x46>
 800d3ae:	295d      	cmp	r1, #93	@ 0x5d
 800d3b0:	d01b      	beq.n	800d3ea <__sccl+0x6e>
 800d3b2:	2900      	cmp	r1, #0
 800d3b4:	d01a      	beq.n	800d3ec <__sccl+0x70>
 800d3b6:	000b      	movs	r3, r1
 800d3b8:	e7f3      	b.n	800d3a2 <__sccl+0x26>
 800d3ba:	784b      	ldrb	r3, [r1, #1]
 800d3bc:	1c8d      	adds	r5, r1, #2
 800d3be:	2101      	movs	r1, #1
 800d3c0:	e7e3      	b.n	800d38a <__sccl+0xe>
 800d3c2:	7842      	ldrb	r2, [r0, #1]
 800d3c4:	2a5d      	cmp	r2, #93	@ 0x5d
 800d3c6:	d0f6      	beq.n	800d3b6 <__sccl+0x3a>
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	dcf4      	bgt.n	800d3b6 <__sccl+0x3a>
 800d3cc:	0019      	movs	r1, r3
 800d3ce:	3002      	adds	r0, #2
 800d3d0:	3101      	adds	r1, #1
 800d3d2:	5466      	strb	r6, [r4, r1]
 800d3d4:	428a      	cmp	r2, r1
 800d3d6:	dcfb      	bgt.n	800d3d0 <__sccl+0x54>
 800d3d8:	1c59      	adds	r1, r3, #1
 800d3da:	4293      	cmp	r3, r2
 800d3dc:	db02      	blt.n	800d3e4 <__sccl+0x68>
 800d3de:	2200      	movs	r2, #0
 800d3e0:	188b      	adds	r3, r1, r2
 800d3e2:	e7e0      	b.n	800d3a6 <__sccl+0x2a>
 800d3e4:	1ad2      	subs	r2, r2, r3
 800d3e6:	3a01      	subs	r2, #1
 800d3e8:	e7fa      	b.n	800d3e0 <__sccl+0x64>
 800d3ea:	0028      	movs	r0, r5
 800d3ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d3f0 <__sflush_r>:
 800d3f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3f2:	220c      	movs	r2, #12
 800d3f4:	5e8b      	ldrsh	r3, [r1, r2]
 800d3f6:	0005      	movs	r5, r0
 800d3f8:	000c      	movs	r4, r1
 800d3fa:	071a      	lsls	r2, r3, #28
 800d3fc:	d456      	bmi.n	800d4ac <__sflush_r+0xbc>
 800d3fe:	684a      	ldr	r2, [r1, #4]
 800d400:	2a00      	cmp	r2, #0
 800d402:	dc02      	bgt.n	800d40a <__sflush_r+0x1a>
 800d404:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800d406:	2a00      	cmp	r2, #0
 800d408:	dd4e      	ble.n	800d4a8 <__sflush_r+0xb8>
 800d40a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d40c:	2f00      	cmp	r7, #0
 800d40e:	d04b      	beq.n	800d4a8 <__sflush_r+0xb8>
 800d410:	2200      	movs	r2, #0
 800d412:	2080      	movs	r0, #128	@ 0x80
 800d414:	682e      	ldr	r6, [r5, #0]
 800d416:	602a      	str	r2, [r5, #0]
 800d418:	001a      	movs	r2, r3
 800d41a:	0140      	lsls	r0, r0, #5
 800d41c:	6a21      	ldr	r1, [r4, #32]
 800d41e:	4002      	ands	r2, r0
 800d420:	4203      	tst	r3, r0
 800d422:	d033      	beq.n	800d48c <__sflush_r+0x9c>
 800d424:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d426:	89a3      	ldrh	r3, [r4, #12]
 800d428:	075b      	lsls	r3, r3, #29
 800d42a:	d506      	bpl.n	800d43a <__sflush_r+0x4a>
 800d42c:	6863      	ldr	r3, [r4, #4]
 800d42e:	1ad2      	subs	r2, r2, r3
 800d430:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d432:	2b00      	cmp	r3, #0
 800d434:	d001      	beq.n	800d43a <__sflush_r+0x4a>
 800d436:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d438:	1ad2      	subs	r2, r2, r3
 800d43a:	2300      	movs	r3, #0
 800d43c:	0028      	movs	r0, r5
 800d43e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800d440:	6a21      	ldr	r1, [r4, #32]
 800d442:	47b8      	blx	r7
 800d444:	89a2      	ldrh	r2, [r4, #12]
 800d446:	1c43      	adds	r3, r0, #1
 800d448:	d106      	bne.n	800d458 <__sflush_r+0x68>
 800d44a:	6829      	ldr	r1, [r5, #0]
 800d44c:	291d      	cmp	r1, #29
 800d44e:	d846      	bhi.n	800d4de <__sflush_r+0xee>
 800d450:	4b29      	ldr	r3, [pc, #164]	@ (800d4f8 <__sflush_r+0x108>)
 800d452:	40cb      	lsrs	r3, r1
 800d454:	07db      	lsls	r3, r3, #31
 800d456:	d542      	bpl.n	800d4de <__sflush_r+0xee>
 800d458:	2300      	movs	r3, #0
 800d45a:	6063      	str	r3, [r4, #4]
 800d45c:	6923      	ldr	r3, [r4, #16]
 800d45e:	6023      	str	r3, [r4, #0]
 800d460:	04d2      	lsls	r2, r2, #19
 800d462:	d505      	bpl.n	800d470 <__sflush_r+0x80>
 800d464:	1c43      	adds	r3, r0, #1
 800d466:	d102      	bne.n	800d46e <__sflush_r+0x7e>
 800d468:	682b      	ldr	r3, [r5, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d100      	bne.n	800d470 <__sflush_r+0x80>
 800d46e:	6560      	str	r0, [r4, #84]	@ 0x54
 800d470:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d472:	602e      	str	r6, [r5, #0]
 800d474:	2900      	cmp	r1, #0
 800d476:	d017      	beq.n	800d4a8 <__sflush_r+0xb8>
 800d478:	0023      	movs	r3, r4
 800d47a:	3344      	adds	r3, #68	@ 0x44
 800d47c:	4299      	cmp	r1, r3
 800d47e:	d002      	beq.n	800d486 <__sflush_r+0x96>
 800d480:	0028      	movs	r0, r5
 800d482:	f7ff fa07 	bl	800c894 <_free_r>
 800d486:	2300      	movs	r3, #0
 800d488:	6363      	str	r3, [r4, #52]	@ 0x34
 800d48a:	e00d      	b.n	800d4a8 <__sflush_r+0xb8>
 800d48c:	2301      	movs	r3, #1
 800d48e:	0028      	movs	r0, r5
 800d490:	47b8      	blx	r7
 800d492:	0002      	movs	r2, r0
 800d494:	1c43      	adds	r3, r0, #1
 800d496:	d1c6      	bne.n	800d426 <__sflush_r+0x36>
 800d498:	682b      	ldr	r3, [r5, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d0c3      	beq.n	800d426 <__sflush_r+0x36>
 800d49e:	2b1d      	cmp	r3, #29
 800d4a0:	d001      	beq.n	800d4a6 <__sflush_r+0xb6>
 800d4a2:	2b16      	cmp	r3, #22
 800d4a4:	d11a      	bne.n	800d4dc <__sflush_r+0xec>
 800d4a6:	602e      	str	r6, [r5, #0]
 800d4a8:	2000      	movs	r0, #0
 800d4aa:	e01e      	b.n	800d4ea <__sflush_r+0xfa>
 800d4ac:	690e      	ldr	r6, [r1, #16]
 800d4ae:	2e00      	cmp	r6, #0
 800d4b0:	d0fa      	beq.n	800d4a8 <__sflush_r+0xb8>
 800d4b2:	680f      	ldr	r7, [r1, #0]
 800d4b4:	600e      	str	r6, [r1, #0]
 800d4b6:	1bba      	subs	r2, r7, r6
 800d4b8:	9201      	str	r2, [sp, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	079b      	lsls	r3, r3, #30
 800d4be:	d100      	bne.n	800d4c2 <__sflush_r+0xd2>
 800d4c0:	694a      	ldr	r2, [r1, #20]
 800d4c2:	60a2      	str	r2, [r4, #8]
 800d4c4:	9b01      	ldr	r3, [sp, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	ddee      	ble.n	800d4a8 <__sflush_r+0xb8>
 800d4ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d4cc:	0032      	movs	r2, r6
 800d4ce:	001f      	movs	r7, r3
 800d4d0:	0028      	movs	r0, r5
 800d4d2:	9b01      	ldr	r3, [sp, #4]
 800d4d4:	6a21      	ldr	r1, [r4, #32]
 800d4d6:	47b8      	blx	r7
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	dc07      	bgt.n	800d4ec <__sflush_r+0xfc>
 800d4dc:	89a2      	ldrh	r2, [r4, #12]
 800d4de:	2340      	movs	r3, #64	@ 0x40
 800d4e0:	2001      	movs	r0, #1
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	b21b      	sxth	r3, r3
 800d4e6:	81a3      	strh	r3, [r4, #12]
 800d4e8:	4240      	negs	r0, r0
 800d4ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4ec:	9b01      	ldr	r3, [sp, #4]
 800d4ee:	1836      	adds	r6, r6, r0
 800d4f0:	1a1b      	subs	r3, r3, r0
 800d4f2:	9301      	str	r3, [sp, #4]
 800d4f4:	e7e6      	b.n	800d4c4 <__sflush_r+0xd4>
 800d4f6:	46c0      	nop			@ (mov r8, r8)
 800d4f8:	20400001 	.word	0x20400001

0800d4fc <_fflush_r>:
 800d4fc:	690b      	ldr	r3, [r1, #16]
 800d4fe:	b570      	push	{r4, r5, r6, lr}
 800d500:	0005      	movs	r5, r0
 800d502:	000c      	movs	r4, r1
 800d504:	2b00      	cmp	r3, #0
 800d506:	d102      	bne.n	800d50e <_fflush_r+0x12>
 800d508:	2500      	movs	r5, #0
 800d50a:	0028      	movs	r0, r5
 800d50c:	bd70      	pop	{r4, r5, r6, pc}
 800d50e:	2800      	cmp	r0, #0
 800d510:	d004      	beq.n	800d51c <_fflush_r+0x20>
 800d512:	6a03      	ldr	r3, [r0, #32]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d101      	bne.n	800d51c <_fflush_r+0x20>
 800d518:	f7fe f9e4 	bl	800b8e4 <__sinit>
 800d51c:	220c      	movs	r2, #12
 800d51e:	5ea3      	ldrsh	r3, [r4, r2]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d0f1      	beq.n	800d508 <_fflush_r+0xc>
 800d524:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d526:	07d2      	lsls	r2, r2, #31
 800d528:	d404      	bmi.n	800d534 <_fflush_r+0x38>
 800d52a:	059b      	lsls	r3, r3, #22
 800d52c:	d402      	bmi.n	800d534 <_fflush_r+0x38>
 800d52e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d530:	f7fe faef 	bl	800bb12 <__retarget_lock_acquire_recursive>
 800d534:	0028      	movs	r0, r5
 800d536:	0021      	movs	r1, r4
 800d538:	f7ff ff5a 	bl	800d3f0 <__sflush_r>
 800d53c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d53e:	0005      	movs	r5, r0
 800d540:	07db      	lsls	r3, r3, #31
 800d542:	d4e2      	bmi.n	800d50a <_fflush_r+0xe>
 800d544:	89a3      	ldrh	r3, [r4, #12]
 800d546:	059b      	lsls	r3, r3, #22
 800d548:	d4df      	bmi.n	800d50a <_fflush_r+0xe>
 800d54a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d54c:	f7fe fae2 	bl	800bb14 <__retarget_lock_release_recursive>
 800d550:	e7db      	b.n	800d50a <_fflush_r+0xe>
	...

0800d554 <__malloc_lock>:
 800d554:	b510      	push	{r4, lr}
 800d556:	4802      	ldr	r0, [pc, #8]	@ (800d560 <__malloc_lock+0xc>)
 800d558:	f7fe fadb 	bl	800bb12 <__retarget_lock_acquire_recursive>
 800d55c:	bd10      	pop	{r4, pc}
 800d55e:	46c0      	nop			@ (mov r8, r8)
 800d560:	2000092c 	.word	0x2000092c

0800d564 <__malloc_unlock>:
 800d564:	b510      	push	{r4, lr}
 800d566:	4802      	ldr	r0, [pc, #8]	@ (800d570 <__malloc_unlock+0xc>)
 800d568:	f7fe fad4 	bl	800bb14 <__retarget_lock_release_recursive>
 800d56c:	bd10      	pop	{r4, pc}
 800d56e:	46c0      	nop			@ (mov r8, r8)
 800d570:	2000092c 	.word	0x2000092c

0800d574 <_Balloc>:
 800d574:	b570      	push	{r4, r5, r6, lr}
 800d576:	69c5      	ldr	r5, [r0, #28]
 800d578:	0006      	movs	r6, r0
 800d57a:	000c      	movs	r4, r1
 800d57c:	2d00      	cmp	r5, #0
 800d57e:	d10e      	bne.n	800d59e <_Balloc+0x2a>
 800d580:	2010      	movs	r0, #16
 800d582:	f7ff fcef 	bl	800cf64 <malloc>
 800d586:	1e02      	subs	r2, r0, #0
 800d588:	61f0      	str	r0, [r6, #28]
 800d58a:	d104      	bne.n	800d596 <_Balloc+0x22>
 800d58c:	216b      	movs	r1, #107	@ 0x6b
 800d58e:	4b19      	ldr	r3, [pc, #100]	@ (800d5f4 <_Balloc+0x80>)
 800d590:	4819      	ldr	r0, [pc, #100]	@ (800d5f8 <_Balloc+0x84>)
 800d592:	f7fe faeb 	bl	800bb6c <__assert_func>
 800d596:	6045      	str	r5, [r0, #4]
 800d598:	6085      	str	r5, [r0, #8]
 800d59a:	6005      	str	r5, [r0, #0]
 800d59c:	60c5      	str	r5, [r0, #12]
 800d59e:	69f5      	ldr	r5, [r6, #28]
 800d5a0:	68eb      	ldr	r3, [r5, #12]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d013      	beq.n	800d5ce <_Balloc+0x5a>
 800d5a6:	69f3      	ldr	r3, [r6, #28]
 800d5a8:	00a2      	lsls	r2, r4, #2
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	189b      	adds	r3, r3, r2
 800d5ae:	6818      	ldr	r0, [r3, #0]
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	d118      	bne.n	800d5e6 <_Balloc+0x72>
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	000d      	movs	r5, r1
 800d5b8:	40a5      	lsls	r5, r4
 800d5ba:	1d6a      	adds	r2, r5, #5
 800d5bc:	0030      	movs	r0, r6
 800d5be:	0092      	lsls	r2, r2, #2
 800d5c0:	f000 fd31 	bl	800e026 <_calloc_r>
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	d00c      	beq.n	800d5e2 <_Balloc+0x6e>
 800d5c8:	6044      	str	r4, [r0, #4]
 800d5ca:	6085      	str	r5, [r0, #8]
 800d5cc:	e00d      	b.n	800d5ea <_Balloc+0x76>
 800d5ce:	2221      	movs	r2, #33	@ 0x21
 800d5d0:	2104      	movs	r1, #4
 800d5d2:	0030      	movs	r0, r6
 800d5d4:	f000 fd27 	bl	800e026 <_calloc_r>
 800d5d8:	69f3      	ldr	r3, [r6, #28]
 800d5da:	60e8      	str	r0, [r5, #12]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d1e1      	bne.n	800d5a6 <_Balloc+0x32>
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	bd70      	pop	{r4, r5, r6, pc}
 800d5e6:	6802      	ldr	r2, [r0, #0]
 800d5e8:	601a      	str	r2, [r3, #0]
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	6103      	str	r3, [r0, #16]
 800d5ee:	60c3      	str	r3, [r0, #12]
 800d5f0:	e7f8      	b.n	800d5e4 <_Balloc+0x70>
 800d5f2:	46c0      	nop			@ (mov r8, r8)
 800d5f4:	0800ee6e 	.word	0x0800ee6e
 800d5f8:	0800efbd 	.word	0x0800efbd

0800d5fc <_Bfree>:
 800d5fc:	b570      	push	{r4, r5, r6, lr}
 800d5fe:	69c6      	ldr	r6, [r0, #28]
 800d600:	0005      	movs	r5, r0
 800d602:	000c      	movs	r4, r1
 800d604:	2e00      	cmp	r6, #0
 800d606:	d10e      	bne.n	800d626 <_Bfree+0x2a>
 800d608:	2010      	movs	r0, #16
 800d60a:	f7ff fcab 	bl	800cf64 <malloc>
 800d60e:	1e02      	subs	r2, r0, #0
 800d610:	61e8      	str	r0, [r5, #28]
 800d612:	d104      	bne.n	800d61e <_Bfree+0x22>
 800d614:	218f      	movs	r1, #143	@ 0x8f
 800d616:	4b09      	ldr	r3, [pc, #36]	@ (800d63c <_Bfree+0x40>)
 800d618:	4809      	ldr	r0, [pc, #36]	@ (800d640 <_Bfree+0x44>)
 800d61a:	f7fe faa7 	bl	800bb6c <__assert_func>
 800d61e:	6046      	str	r6, [r0, #4]
 800d620:	6086      	str	r6, [r0, #8]
 800d622:	6006      	str	r6, [r0, #0]
 800d624:	60c6      	str	r6, [r0, #12]
 800d626:	2c00      	cmp	r4, #0
 800d628:	d007      	beq.n	800d63a <_Bfree+0x3e>
 800d62a:	69eb      	ldr	r3, [r5, #28]
 800d62c:	6862      	ldr	r2, [r4, #4]
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	0092      	lsls	r2, r2, #2
 800d632:	189b      	adds	r3, r3, r2
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	6022      	str	r2, [r4, #0]
 800d638:	601c      	str	r4, [r3, #0]
 800d63a:	bd70      	pop	{r4, r5, r6, pc}
 800d63c:	0800ee6e 	.word	0x0800ee6e
 800d640:	0800efbd 	.word	0x0800efbd

0800d644 <__multadd>:
 800d644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d646:	000f      	movs	r7, r1
 800d648:	9001      	str	r0, [sp, #4]
 800d64a:	000c      	movs	r4, r1
 800d64c:	001e      	movs	r6, r3
 800d64e:	2000      	movs	r0, #0
 800d650:	690d      	ldr	r5, [r1, #16]
 800d652:	3714      	adds	r7, #20
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	3001      	adds	r0, #1
 800d658:	b299      	uxth	r1, r3
 800d65a:	4351      	muls	r1, r2
 800d65c:	0c1b      	lsrs	r3, r3, #16
 800d65e:	4353      	muls	r3, r2
 800d660:	1989      	adds	r1, r1, r6
 800d662:	0c0e      	lsrs	r6, r1, #16
 800d664:	199b      	adds	r3, r3, r6
 800d666:	0c1e      	lsrs	r6, r3, #16
 800d668:	b289      	uxth	r1, r1
 800d66a:	041b      	lsls	r3, r3, #16
 800d66c:	185b      	adds	r3, r3, r1
 800d66e:	c708      	stmia	r7!, {r3}
 800d670:	4285      	cmp	r5, r0
 800d672:	dcef      	bgt.n	800d654 <__multadd+0x10>
 800d674:	2e00      	cmp	r6, #0
 800d676:	d022      	beq.n	800d6be <__multadd+0x7a>
 800d678:	68a3      	ldr	r3, [r4, #8]
 800d67a:	42ab      	cmp	r3, r5
 800d67c:	dc19      	bgt.n	800d6b2 <__multadd+0x6e>
 800d67e:	6861      	ldr	r1, [r4, #4]
 800d680:	9801      	ldr	r0, [sp, #4]
 800d682:	3101      	adds	r1, #1
 800d684:	f7ff ff76 	bl	800d574 <_Balloc>
 800d688:	1e07      	subs	r7, r0, #0
 800d68a:	d105      	bne.n	800d698 <__multadd+0x54>
 800d68c:	003a      	movs	r2, r7
 800d68e:	21ba      	movs	r1, #186	@ 0xba
 800d690:	4b0c      	ldr	r3, [pc, #48]	@ (800d6c4 <__multadd+0x80>)
 800d692:	480d      	ldr	r0, [pc, #52]	@ (800d6c8 <__multadd+0x84>)
 800d694:	f7fe fa6a 	bl	800bb6c <__assert_func>
 800d698:	0021      	movs	r1, r4
 800d69a:	6922      	ldr	r2, [r4, #16]
 800d69c:	310c      	adds	r1, #12
 800d69e:	3202      	adds	r2, #2
 800d6a0:	0092      	lsls	r2, r2, #2
 800d6a2:	300c      	adds	r0, #12
 800d6a4:	f7fe fa59 	bl	800bb5a <memcpy>
 800d6a8:	0021      	movs	r1, r4
 800d6aa:	9801      	ldr	r0, [sp, #4]
 800d6ac:	f7ff ffa6 	bl	800d5fc <_Bfree>
 800d6b0:	003c      	movs	r4, r7
 800d6b2:	1d2b      	adds	r3, r5, #4
 800d6b4:	009b      	lsls	r3, r3, #2
 800d6b6:	18e3      	adds	r3, r4, r3
 800d6b8:	3501      	adds	r5, #1
 800d6ba:	605e      	str	r6, [r3, #4]
 800d6bc:	6125      	str	r5, [r4, #16]
 800d6be:	0020      	movs	r0, r4
 800d6c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d6c2:	46c0      	nop			@ (mov r8, r8)
 800d6c4:	0800ef80 	.word	0x0800ef80
 800d6c8:	0800efbd 	.word	0x0800efbd

0800d6cc <__hi0bits>:
 800d6cc:	2280      	movs	r2, #128	@ 0x80
 800d6ce:	0003      	movs	r3, r0
 800d6d0:	0252      	lsls	r2, r2, #9
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d201      	bcs.n	800d6dc <__hi0bits+0x10>
 800d6d8:	041b      	lsls	r3, r3, #16
 800d6da:	3010      	adds	r0, #16
 800d6dc:	2280      	movs	r2, #128	@ 0x80
 800d6de:	0452      	lsls	r2, r2, #17
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d201      	bcs.n	800d6e8 <__hi0bits+0x1c>
 800d6e4:	3008      	adds	r0, #8
 800d6e6:	021b      	lsls	r3, r3, #8
 800d6e8:	2280      	movs	r2, #128	@ 0x80
 800d6ea:	0552      	lsls	r2, r2, #21
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d201      	bcs.n	800d6f4 <__hi0bits+0x28>
 800d6f0:	3004      	adds	r0, #4
 800d6f2:	011b      	lsls	r3, r3, #4
 800d6f4:	2280      	movs	r2, #128	@ 0x80
 800d6f6:	05d2      	lsls	r2, r2, #23
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d201      	bcs.n	800d700 <__hi0bits+0x34>
 800d6fc:	3002      	adds	r0, #2
 800d6fe:	009b      	lsls	r3, r3, #2
 800d700:	2b00      	cmp	r3, #0
 800d702:	db03      	blt.n	800d70c <__hi0bits+0x40>
 800d704:	3001      	adds	r0, #1
 800d706:	4213      	tst	r3, r2
 800d708:	d100      	bne.n	800d70c <__hi0bits+0x40>
 800d70a:	2020      	movs	r0, #32
 800d70c:	4770      	bx	lr

0800d70e <__lo0bits>:
 800d70e:	6803      	ldr	r3, [r0, #0]
 800d710:	0001      	movs	r1, r0
 800d712:	2207      	movs	r2, #7
 800d714:	0018      	movs	r0, r3
 800d716:	4010      	ands	r0, r2
 800d718:	4213      	tst	r3, r2
 800d71a:	d00d      	beq.n	800d738 <__lo0bits+0x2a>
 800d71c:	3a06      	subs	r2, #6
 800d71e:	2000      	movs	r0, #0
 800d720:	4213      	tst	r3, r2
 800d722:	d105      	bne.n	800d730 <__lo0bits+0x22>
 800d724:	3002      	adds	r0, #2
 800d726:	4203      	tst	r3, r0
 800d728:	d003      	beq.n	800d732 <__lo0bits+0x24>
 800d72a:	40d3      	lsrs	r3, r2
 800d72c:	0010      	movs	r0, r2
 800d72e:	600b      	str	r3, [r1, #0]
 800d730:	4770      	bx	lr
 800d732:	089b      	lsrs	r3, r3, #2
 800d734:	600b      	str	r3, [r1, #0]
 800d736:	e7fb      	b.n	800d730 <__lo0bits+0x22>
 800d738:	b29a      	uxth	r2, r3
 800d73a:	2a00      	cmp	r2, #0
 800d73c:	d101      	bne.n	800d742 <__lo0bits+0x34>
 800d73e:	2010      	movs	r0, #16
 800d740:	0c1b      	lsrs	r3, r3, #16
 800d742:	b2da      	uxtb	r2, r3
 800d744:	2a00      	cmp	r2, #0
 800d746:	d101      	bne.n	800d74c <__lo0bits+0x3e>
 800d748:	3008      	adds	r0, #8
 800d74a:	0a1b      	lsrs	r3, r3, #8
 800d74c:	071a      	lsls	r2, r3, #28
 800d74e:	d101      	bne.n	800d754 <__lo0bits+0x46>
 800d750:	3004      	adds	r0, #4
 800d752:	091b      	lsrs	r3, r3, #4
 800d754:	079a      	lsls	r2, r3, #30
 800d756:	d101      	bne.n	800d75c <__lo0bits+0x4e>
 800d758:	3002      	adds	r0, #2
 800d75a:	089b      	lsrs	r3, r3, #2
 800d75c:	07da      	lsls	r2, r3, #31
 800d75e:	d4e9      	bmi.n	800d734 <__lo0bits+0x26>
 800d760:	3001      	adds	r0, #1
 800d762:	085b      	lsrs	r3, r3, #1
 800d764:	d1e6      	bne.n	800d734 <__lo0bits+0x26>
 800d766:	2020      	movs	r0, #32
 800d768:	e7e2      	b.n	800d730 <__lo0bits+0x22>
	...

0800d76c <__i2b>:
 800d76c:	b510      	push	{r4, lr}
 800d76e:	000c      	movs	r4, r1
 800d770:	2101      	movs	r1, #1
 800d772:	f7ff feff 	bl	800d574 <_Balloc>
 800d776:	2800      	cmp	r0, #0
 800d778:	d107      	bne.n	800d78a <__i2b+0x1e>
 800d77a:	2146      	movs	r1, #70	@ 0x46
 800d77c:	4c05      	ldr	r4, [pc, #20]	@ (800d794 <__i2b+0x28>)
 800d77e:	0002      	movs	r2, r0
 800d780:	4b05      	ldr	r3, [pc, #20]	@ (800d798 <__i2b+0x2c>)
 800d782:	0020      	movs	r0, r4
 800d784:	31ff      	adds	r1, #255	@ 0xff
 800d786:	f7fe f9f1 	bl	800bb6c <__assert_func>
 800d78a:	2301      	movs	r3, #1
 800d78c:	6144      	str	r4, [r0, #20]
 800d78e:	6103      	str	r3, [r0, #16]
 800d790:	bd10      	pop	{r4, pc}
 800d792:	46c0      	nop			@ (mov r8, r8)
 800d794:	0800efbd 	.word	0x0800efbd
 800d798:	0800ef80 	.word	0x0800ef80

0800d79c <__multiply>:
 800d79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d79e:	0014      	movs	r4, r2
 800d7a0:	690a      	ldr	r2, [r1, #16]
 800d7a2:	6923      	ldr	r3, [r4, #16]
 800d7a4:	000d      	movs	r5, r1
 800d7a6:	b089      	sub	sp, #36	@ 0x24
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	db02      	blt.n	800d7b2 <__multiply+0x16>
 800d7ac:	0023      	movs	r3, r4
 800d7ae:	000c      	movs	r4, r1
 800d7b0:	001d      	movs	r5, r3
 800d7b2:	6927      	ldr	r7, [r4, #16]
 800d7b4:	692e      	ldr	r6, [r5, #16]
 800d7b6:	6861      	ldr	r1, [r4, #4]
 800d7b8:	19bb      	adds	r3, r7, r6
 800d7ba:	9300      	str	r3, [sp, #0]
 800d7bc:	68a3      	ldr	r3, [r4, #8]
 800d7be:	19ba      	adds	r2, r7, r6
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	da00      	bge.n	800d7c6 <__multiply+0x2a>
 800d7c4:	3101      	adds	r1, #1
 800d7c6:	f7ff fed5 	bl	800d574 <_Balloc>
 800d7ca:	4684      	mov	ip, r0
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d106      	bne.n	800d7de <__multiply+0x42>
 800d7d0:	21b1      	movs	r1, #177	@ 0xb1
 800d7d2:	4662      	mov	r2, ip
 800d7d4:	4b44      	ldr	r3, [pc, #272]	@ (800d8e8 <__multiply+0x14c>)
 800d7d6:	4845      	ldr	r0, [pc, #276]	@ (800d8ec <__multiply+0x150>)
 800d7d8:	0049      	lsls	r1, r1, #1
 800d7da:	f7fe f9c7 	bl	800bb6c <__assert_func>
 800d7de:	0002      	movs	r2, r0
 800d7e0:	19bb      	adds	r3, r7, r6
 800d7e2:	3214      	adds	r2, #20
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	18d3      	adds	r3, r2, r3
 800d7e8:	9301      	str	r3, [sp, #4]
 800d7ea:	2100      	movs	r1, #0
 800d7ec:	0013      	movs	r3, r2
 800d7ee:	9801      	ldr	r0, [sp, #4]
 800d7f0:	4283      	cmp	r3, r0
 800d7f2:	d328      	bcc.n	800d846 <__multiply+0xaa>
 800d7f4:	0023      	movs	r3, r4
 800d7f6:	00bf      	lsls	r7, r7, #2
 800d7f8:	3314      	adds	r3, #20
 800d7fa:	9304      	str	r3, [sp, #16]
 800d7fc:	3514      	adds	r5, #20
 800d7fe:	19db      	adds	r3, r3, r7
 800d800:	00b6      	lsls	r6, r6, #2
 800d802:	9302      	str	r3, [sp, #8]
 800d804:	19ab      	adds	r3, r5, r6
 800d806:	9307      	str	r3, [sp, #28]
 800d808:	2304      	movs	r3, #4
 800d80a:	9305      	str	r3, [sp, #20]
 800d80c:	0023      	movs	r3, r4
 800d80e:	9902      	ldr	r1, [sp, #8]
 800d810:	3315      	adds	r3, #21
 800d812:	4299      	cmp	r1, r3
 800d814:	d305      	bcc.n	800d822 <__multiply+0x86>
 800d816:	1b0c      	subs	r4, r1, r4
 800d818:	3c15      	subs	r4, #21
 800d81a:	08a4      	lsrs	r4, r4, #2
 800d81c:	3401      	adds	r4, #1
 800d81e:	00a3      	lsls	r3, r4, #2
 800d820:	9305      	str	r3, [sp, #20]
 800d822:	9b07      	ldr	r3, [sp, #28]
 800d824:	429d      	cmp	r5, r3
 800d826:	d310      	bcc.n	800d84a <__multiply+0xae>
 800d828:	9b00      	ldr	r3, [sp, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	dd05      	ble.n	800d83a <__multiply+0x9e>
 800d82e:	9b01      	ldr	r3, [sp, #4]
 800d830:	3b04      	subs	r3, #4
 800d832:	9301      	str	r3, [sp, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d052      	beq.n	800d8e0 <__multiply+0x144>
 800d83a:	4663      	mov	r3, ip
 800d83c:	4660      	mov	r0, ip
 800d83e:	9a00      	ldr	r2, [sp, #0]
 800d840:	611a      	str	r2, [r3, #16]
 800d842:	b009      	add	sp, #36	@ 0x24
 800d844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d846:	c302      	stmia	r3!, {r1}
 800d848:	e7d1      	b.n	800d7ee <__multiply+0x52>
 800d84a:	682c      	ldr	r4, [r5, #0]
 800d84c:	b2a4      	uxth	r4, r4
 800d84e:	2c00      	cmp	r4, #0
 800d850:	d01f      	beq.n	800d892 <__multiply+0xf6>
 800d852:	2300      	movs	r3, #0
 800d854:	0017      	movs	r7, r2
 800d856:	9e04      	ldr	r6, [sp, #16]
 800d858:	9303      	str	r3, [sp, #12]
 800d85a:	ce08      	ldmia	r6!, {r3}
 800d85c:	6839      	ldr	r1, [r7, #0]
 800d85e:	9306      	str	r3, [sp, #24]
 800d860:	466b      	mov	r3, sp
 800d862:	8b1b      	ldrh	r3, [r3, #24]
 800d864:	b288      	uxth	r0, r1
 800d866:	4363      	muls	r3, r4
 800d868:	181b      	adds	r3, r3, r0
 800d86a:	9803      	ldr	r0, [sp, #12]
 800d86c:	0c09      	lsrs	r1, r1, #16
 800d86e:	181b      	adds	r3, r3, r0
 800d870:	9806      	ldr	r0, [sp, #24]
 800d872:	0c00      	lsrs	r0, r0, #16
 800d874:	4360      	muls	r0, r4
 800d876:	1840      	adds	r0, r0, r1
 800d878:	0c19      	lsrs	r1, r3, #16
 800d87a:	1841      	adds	r1, r0, r1
 800d87c:	0c08      	lsrs	r0, r1, #16
 800d87e:	b29b      	uxth	r3, r3
 800d880:	0409      	lsls	r1, r1, #16
 800d882:	4319      	orrs	r1, r3
 800d884:	9b02      	ldr	r3, [sp, #8]
 800d886:	9003      	str	r0, [sp, #12]
 800d888:	c702      	stmia	r7!, {r1}
 800d88a:	42b3      	cmp	r3, r6
 800d88c:	d8e5      	bhi.n	800d85a <__multiply+0xbe>
 800d88e:	9b05      	ldr	r3, [sp, #20]
 800d890:	50d0      	str	r0, [r2, r3]
 800d892:	682c      	ldr	r4, [r5, #0]
 800d894:	0c24      	lsrs	r4, r4, #16
 800d896:	d020      	beq.n	800d8da <__multiply+0x13e>
 800d898:	2100      	movs	r1, #0
 800d89a:	0010      	movs	r0, r2
 800d89c:	6813      	ldr	r3, [r2, #0]
 800d89e:	9e04      	ldr	r6, [sp, #16]
 800d8a0:	9103      	str	r1, [sp, #12]
 800d8a2:	6831      	ldr	r1, [r6, #0]
 800d8a4:	6807      	ldr	r7, [r0, #0]
 800d8a6:	b289      	uxth	r1, r1
 800d8a8:	4361      	muls	r1, r4
 800d8aa:	0c3f      	lsrs	r7, r7, #16
 800d8ac:	19c9      	adds	r1, r1, r7
 800d8ae:	9f03      	ldr	r7, [sp, #12]
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	19c9      	adds	r1, r1, r7
 800d8b4:	040f      	lsls	r7, r1, #16
 800d8b6:	431f      	orrs	r7, r3
 800d8b8:	6007      	str	r7, [r0, #0]
 800d8ba:	ce80      	ldmia	r6!, {r7}
 800d8bc:	6843      	ldr	r3, [r0, #4]
 800d8be:	0c3f      	lsrs	r7, r7, #16
 800d8c0:	4367      	muls	r7, r4
 800d8c2:	b29b      	uxth	r3, r3
 800d8c4:	0c09      	lsrs	r1, r1, #16
 800d8c6:	18fb      	adds	r3, r7, r3
 800d8c8:	185b      	adds	r3, r3, r1
 800d8ca:	0c19      	lsrs	r1, r3, #16
 800d8cc:	9103      	str	r1, [sp, #12]
 800d8ce:	9902      	ldr	r1, [sp, #8]
 800d8d0:	3004      	adds	r0, #4
 800d8d2:	42b1      	cmp	r1, r6
 800d8d4:	d8e5      	bhi.n	800d8a2 <__multiply+0x106>
 800d8d6:	9905      	ldr	r1, [sp, #20]
 800d8d8:	5053      	str	r3, [r2, r1]
 800d8da:	3504      	adds	r5, #4
 800d8dc:	3204      	adds	r2, #4
 800d8de:	e7a0      	b.n	800d822 <__multiply+0x86>
 800d8e0:	9b00      	ldr	r3, [sp, #0]
 800d8e2:	3b01      	subs	r3, #1
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	e79f      	b.n	800d828 <__multiply+0x8c>
 800d8e8:	0800ef80 	.word	0x0800ef80
 800d8ec:	0800efbd 	.word	0x0800efbd

0800d8f0 <__pow5mult>:
 800d8f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8f2:	2303      	movs	r3, #3
 800d8f4:	0015      	movs	r5, r2
 800d8f6:	0007      	movs	r7, r0
 800d8f8:	000e      	movs	r6, r1
 800d8fa:	401a      	ands	r2, r3
 800d8fc:	421d      	tst	r5, r3
 800d8fe:	d008      	beq.n	800d912 <__pow5mult+0x22>
 800d900:	4925      	ldr	r1, [pc, #148]	@ (800d998 <__pow5mult+0xa8>)
 800d902:	3a01      	subs	r2, #1
 800d904:	0092      	lsls	r2, r2, #2
 800d906:	5852      	ldr	r2, [r2, r1]
 800d908:	2300      	movs	r3, #0
 800d90a:	0031      	movs	r1, r6
 800d90c:	f7ff fe9a 	bl	800d644 <__multadd>
 800d910:	0006      	movs	r6, r0
 800d912:	10ad      	asrs	r5, r5, #2
 800d914:	d03d      	beq.n	800d992 <__pow5mult+0xa2>
 800d916:	69fc      	ldr	r4, [r7, #28]
 800d918:	2c00      	cmp	r4, #0
 800d91a:	d10f      	bne.n	800d93c <__pow5mult+0x4c>
 800d91c:	2010      	movs	r0, #16
 800d91e:	f7ff fb21 	bl	800cf64 <malloc>
 800d922:	1e02      	subs	r2, r0, #0
 800d924:	61f8      	str	r0, [r7, #28]
 800d926:	d105      	bne.n	800d934 <__pow5mult+0x44>
 800d928:	21b4      	movs	r1, #180	@ 0xb4
 800d92a:	4b1c      	ldr	r3, [pc, #112]	@ (800d99c <__pow5mult+0xac>)
 800d92c:	481c      	ldr	r0, [pc, #112]	@ (800d9a0 <__pow5mult+0xb0>)
 800d92e:	31ff      	adds	r1, #255	@ 0xff
 800d930:	f7fe f91c 	bl	800bb6c <__assert_func>
 800d934:	6044      	str	r4, [r0, #4]
 800d936:	6084      	str	r4, [r0, #8]
 800d938:	6004      	str	r4, [r0, #0]
 800d93a:	60c4      	str	r4, [r0, #12]
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	689c      	ldr	r4, [r3, #8]
 800d940:	9301      	str	r3, [sp, #4]
 800d942:	2c00      	cmp	r4, #0
 800d944:	d108      	bne.n	800d958 <__pow5mult+0x68>
 800d946:	0038      	movs	r0, r7
 800d948:	4916      	ldr	r1, [pc, #88]	@ (800d9a4 <__pow5mult+0xb4>)
 800d94a:	f7ff ff0f 	bl	800d76c <__i2b>
 800d94e:	9b01      	ldr	r3, [sp, #4]
 800d950:	0004      	movs	r4, r0
 800d952:	6098      	str	r0, [r3, #8]
 800d954:	2300      	movs	r3, #0
 800d956:	6003      	str	r3, [r0, #0]
 800d958:	2301      	movs	r3, #1
 800d95a:	421d      	tst	r5, r3
 800d95c:	d00a      	beq.n	800d974 <__pow5mult+0x84>
 800d95e:	0031      	movs	r1, r6
 800d960:	0022      	movs	r2, r4
 800d962:	0038      	movs	r0, r7
 800d964:	f7ff ff1a 	bl	800d79c <__multiply>
 800d968:	0031      	movs	r1, r6
 800d96a:	9001      	str	r0, [sp, #4]
 800d96c:	0038      	movs	r0, r7
 800d96e:	f7ff fe45 	bl	800d5fc <_Bfree>
 800d972:	9e01      	ldr	r6, [sp, #4]
 800d974:	106d      	asrs	r5, r5, #1
 800d976:	d00c      	beq.n	800d992 <__pow5mult+0xa2>
 800d978:	6820      	ldr	r0, [r4, #0]
 800d97a:	2800      	cmp	r0, #0
 800d97c:	d107      	bne.n	800d98e <__pow5mult+0x9e>
 800d97e:	0022      	movs	r2, r4
 800d980:	0021      	movs	r1, r4
 800d982:	0038      	movs	r0, r7
 800d984:	f7ff ff0a 	bl	800d79c <__multiply>
 800d988:	2300      	movs	r3, #0
 800d98a:	6020      	str	r0, [r4, #0]
 800d98c:	6003      	str	r3, [r0, #0]
 800d98e:	0004      	movs	r4, r0
 800d990:	e7e2      	b.n	800d958 <__pow5mult+0x68>
 800d992:	0030      	movs	r0, r6
 800d994:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d996:	46c0      	nop			@ (mov r8, r8)
 800d998:	0800f020 	.word	0x0800f020
 800d99c:	0800ee6e 	.word	0x0800ee6e
 800d9a0:	0800efbd 	.word	0x0800efbd
 800d9a4:	00000271 	.word	0x00000271

0800d9a8 <__lshift>:
 800d9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9aa:	000c      	movs	r4, r1
 800d9ac:	0016      	movs	r6, r2
 800d9ae:	6923      	ldr	r3, [r4, #16]
 800d9b0:	1157      	asrs	r7, r2, #5
 800d9b2:	b085      	sub	sp, #20
 800d9b4:	18fb      	adds	r3, r7, r3
 800d9b6:	9301      	str	r3, [sp, #4]
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	6849      	ldr	r1, [r1, #4]
 800d9be:	68a3      	ldr	r3, [r4, #8]
 800d9c0:	9002      	str	r0, [sp, #8]
 800d9c2:	9a00      	ldr	r2, [sp, #0]
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	db10      	blt.n	800d9ea <__lshift+0x42>
 800d9c8:	9802      	ldr	r0, [sp, #8]
 800d9ca:	f7ff fdd3 	bl	800d574 <_Balloc>
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	0001      	movs	r1, r0
 800d9d2:	0005      	movs	r5, r0
 800d9d4:	001a      	movs	r2, r3
 800d9d6:	3114      	adds	r1, #20
 800d9d8:	4298      	cmp	r0, r3
 800d9da:	d10c      	bne.n	800d9f6 <__lshift+0x4e>
 800d9dc:	21ef      	movs	r1, #239	@ 0xef
 800d9de:	002a      	movs	r2, r5
 800d9e0:	4b25      	ldr	r3, [pc, #148]	@ (800da78 <__lshift+0xd0>)
 800d9e2:	4826      	ldr	r0, [pc, #152]	@ (800da7c <__lshift+0xd4>)
 800d9e4:	0049      	lsls	r1, r1, #1
 800d9e6:	f7fe f8c1 	bl	800bb6c <__assert_func>
 800d9ea:	3101      	adds	r1, #1
 800d9ec:	005b      	lsls	r3, r3, #1
 800d9ee:	e7e8      	b.n	800d9c2 <__lshift+0x1a>
 800d9f0:	0098      	lsls	r0, r3, #2
 800d9f2:	500a      	str	r2, [r1, r0]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	42bb      	cmp	r3, r7
 800d9f8:	dbfa      	blt.n	800d9f0 <__lshift+0x48>
 800d9fa:	43fb      	mvns	r3, r7
 800d9fc:	17db      	asrs	r3, r3, #31
 800d9fe:	401f      	ands	r7, r3
 800da00:	00bf      	lsls	r7, r7, #2
 800da02:	0023      	movs	r3, r4
 800da04:	201f      	movs	r0, #31
 800da06:	19c9      	adds	r1, r1, r7
 800da08:	0037      	movs	r7, r6
 800da0a:	6922      	ldr	r2, [r4, #16]
 800da0c:	3314      	adds	r3, #20
 800da0e:	0092      	lsls	r2, r2, #2
 800da10:	189a      	adds	r2, r3, r2
 800da12:	4007      	ands	r7, r0
 800da14:	4206      	tst	r6, r0
 800da16:	d029      	beq.n	800da6c <__lshift+0xc4>
 800da18:	3001      	adds	r0, #1
 800da1a:	1bc0      	subs	r0, r0, r7
 800da1c:	9003      	str	r0, [sp, #12]
 800da1e:	468c      	mov	ip, r1
 800da20:	2000      	movs	r0, #0
 800da22:	681e      	ldr	r6, [r3, #0]
 800da24:	40be      	lsls	r6, r7
 800da26:	4306      	orrs	r6, r0
 800da28:	4660      	mov	r0, ip
 800da2a:	c040      	stmia	r0!, {r6}
 800da2c:	4684      	mov	ip, r0
 800da2e:	9e03      	ldr	r6, [sp, #12]
 800da30:	cb01      	ldmia	r3!, {r0}
 800da32:	40f0      	lsrs	r0, r6
 800da34:	429a      	cmp	r2, r3
 800da36:	d8f4      	bhi.n	800da22 <__lshift+0x7a>
 800da38:	0026      	movs	r6, r4
 800da3a:	3615      	adds	r6, #21
 800da3c:	2304      	movs	r3, #4
 800da3e:	42b2      	cmp	r2, r6
 800da40:	d304      	bcc.n	800da4c <__lshift+0xa4>
 800da42:	1b13      	subs	r3, r2, r4
 800da44:	3b15      	subs	r3, #21
 800da46:	089b      	lsrs	r3, r3, #2
 800da48:	3301      	adds	r3, #1
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	50c8      	str	r0, [r1, r3]
 800da4e:	2800      	cmp	r0, #0
 800da50:	d002      	beq.n	800da58 <__lshift+0xb0>
 800da52:	9b01      	ldr	r3, [sp, #4]
 800da54:	3302      	adds	r3, #2
 800da56:	9300      	str	r3, [sp, #0]
 800da58:	9b00      	ldr	r3, [sp, #0]
 800da5a:	9802      	ldr	r0, [sp, #8]
 800da5c:	3b01      	subs	r3, #1
 800da5e:	0021      	movs	r1, r4
 800da60:	612b      	str	r3, [r5, #16]
 800da62:	f7ff fdcb 	bl	800d5fc <_Bfree>
 800da66:	0028      	movs	r0, r5
 800da68:	b005      	add	sp, #20
 800da6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da6c:	cb01      	ldmia	r3!, {r0}
 800da6e:	c101      	stmia	r1!, {r0}
 800da70:	429a      	cmp	r2, r3
 800da72:	d8fb      	bhi.n	800da6c <__lshift+0xc4>
 800da74:	e7f0      	b.n	800da58 <__lshift+0xb0>
 800da76:	46c0      	nop			@ (mov r8, r8)
 800da78:	0800ef80 	.word	0x0800ef80
 800da7c:	0800efbd 	.word	0x0800efbd

0800da80 <__mcmp>:
 800da80:	b530      	push	{r4, r5, lr}
 800da82:	690b      	ldr	r3, [r1, #16]
 800da84:	6904      	ldr	r4, [r0, #16]
 800da86:	0002      	movs	r2, r0
 800da88:	1ae0      	subs	r0, r4, r3
 800da8a:	429c      	cmp	r4, r3
 800da8c:	d10f      	bne.n	800daae <__mcmp+0x2e>
 800da8e:	3214      	adds	r2, #20
 800da90:	009b      	lsls	r3, r3, #2
 800da92:	3114      	adds	r1, #20
 800da94:	0014      	movs	r4, r2
 800da96:	18c9      	adds	r1, r1, r3
 800da98:	18d2      	adds	r2, r2, r3
 800da9a:	3a04      	subs	r2, #4
 800da9c:	3904      	subs	r1, #4
 800da9e:	6815      	ldr	r5, [r2, #0]
 800daa0:	680b      	ldr	r3, [r1, #0]
 800daa2:	429d      	cmp	r5, r3
 800daa4:	d004      	beq.n	800dab0 <__mcmp+0x30>
 800daa6:	2001      	movs	r0, #1
 800daa8:	429d      	cmp	r5, r3
 800daaa:	d200      	bcs.n	800daae <__mcmp+0x2e>
 800daac:	3802      	subs	r0, #2
 800daae:	bd30      	pop	{r4, r5, pc}
 800dab0:	4294      	cmp	r4, r2
 800dab2:	d3f2      	bcc.n	800da9a <__mcmp+0x1a>
 800dab4:	e7fb      	b.n	800daae <__mcmp+0x2e>
	...

0800dab8 <__mdiff>:
 800dab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daba:	000c      	movs	r4, r1
 800dabc:	b087      	sub	sp, #28
 800dabe:	9000      	str	r0, [sp, #0]
 800dac0:	0011      	movs	r1, r2
 800dac2:	0020      	movs	r0, r4
 800dac4:	0017      	movs	r7, r2
 800dac6:	f7ff ffdb 	bl	800da80 <__mcmp>
 800daca:	1e05      	subs	r5, r0, #0
 800dacc:	d110      	bne.n	800daf0 <__mdiff+0x38>
 800dace:	0001      	movs	r1, r0
 800dad0:	9800      	ldr	r0, [sp, #0]
 800dad2:	f7ff fd4f 	bl	800d574 <_Balloc>
 800dad6:	1e02      	subs	r2, r0, #0
 800dad8:	d104      	bne.n	800dae4 <__mdiff+0x2c>
 800dada:	4b40      	ldr	r3, [pc, #256]	@ (800dbdc <__mdiff+0x124>)
 800dadc:	4840      	ldr	r0, [pc, #256]	@ (800dbe0 <__mdiff+0x128>)
 800dade:	4941      	ldr	r1, [pc, #260]	@ (800dbe4 <__mdiff+0x12c>)
 800dae0:	f7fe f844 	bl	800bb6c <__assert_func>
 800dae4:	2301      	movs	r3, #1
 800dae6:	6145      	str	r5, [r0, #20]
 800dae8:	6103      	str	r3, [r0, #16]
 800daea:	0010      	movs	r0, r2
 800daec:	b007      	add	sp, #28
 800daee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800daf0:	2600      	movs	r6, #0
 800daf2:	42b0      	cmp	r0, r6
 800daf4:	da03      	bge.n	800dafe <__mdiff+0x46>
 800daf6:	0023      	movs	r3, r4
 800daf8:	003c      	movs	r4, r7
 800dafa:	001f      	movs	r7, r3
 800dafc:	3601      	adds	r6, #1
 800dafe:	6861      	ldr	r1, [r4, #4]
 800db00:	9800      	ldr	r0, [sp, #0]
 800db02:	f7ff fd37 	bl	800d574 <_Balloc>
 800db06:	1e02      	subs	r2, r0, #0
 800db08:	d103      	bne.n	800db12 <__mdiff+0x5a>
 800db0a:	4b34      	ldr	r3, [pc, #208]	@ (800dbdc <__mdiff+0x124>)
 800db0c:	4834      	ldr	r0, [pc, #208]	@ (800dbe0 <__mdiff+0x128>)
 800db0e:	4936      	ldr	r1, [pc, #216]	@ (800dbe8 <__mdiff+0x130>)
 800db10:	e7e6      	b.n	800dae0 <__mdiff+0x28>
 800db12:	6923      	ldr	r3, [r4, #16]
 800db14:	3414      	adds	r4, #20
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	18e3      	adds	r3, r4, r3
 800db1c:	0021      	movs	r1, r4
 800db1e:	9401      	str	r4, [sp, #4]
 800db20:	003c      	movs	r4, r7
 800db22:	9302      	str	r3, [sp, #8]
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	3414      	adds	r4, #20
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	18e3      	adds	r3, r4, r3
 800db2c:	9303      	str	r3, [sp, #12]
 800db2e:	0003      	movs	r3, r0
 800db30:	60c6      	str	r6, [r0, #12]
 800db32:	468c      	mov	ip, r1
 800db34:	2000      	movs	r0, #0
 800db36:	3314      	adds	r3, #20
 800db38:	9304      	str	r3, [sp, #16]
 800db3a:	9305      	str	r3, [sp, #20]
 800db3c:	4663      	mov	r3, ip
 800db3e:	cb20      	ldmia	r3!, {r5}
 800db40:	b2a9      	uxth	r1, r5
 800db42:	000e      	movs	r6, r1
 800db44:	469c      	mov	ip, r3
 800db46:	cc08      	ldmia	r4!, {r3}
 800db48:	0c2d      	lsrs	r5, r5, #16
 800db4a:	b299      	uxth	r1, r3
 800db4c:	1a71      	subs	r1, r6, r1
 800db4e:	1809      	adds	r1, r1, r0
 800db50:	0c1b      	lsrs	r3, r3, #16
 800db52:	1408      	asrs	r0, r1, #16
 800db54:	1aeb      	subs	r3, r5, r3
 800db56:	181b      	adds	r3, r3, r0
 800db58:	1418      	asrs	r0, r3, #16
 800db5a:	b289      	uxth	r1, r1
 800db5c:	041b      	lsls	r3, r3, #16
 800db5e:	4319      	orrs	r1, r3
 800db60:	9b05      	ldr	r3, [sp, #20]
 800db62:	c302      	stmia	r3!, {r1}
 800db64:	9305      	str	r3, [sp, #20]
 800db66:	9b03      	ldr	r3, [sp, #12]
 800db68:	42a3      	cmp	r3, r4
 800db6a:	d8e7      	bhi.n	800db3c <__mdiff+0x84>
 800db6c:	0039      	movs	r1, r7
 800db6e:	9c03      	ldr	r4, [sp, #12]
 800db70:	3115      	adds	r1, #21
 800db72:	2304      	movs	r3, #4
 800db74:	428c      	cmp	r4, r1
 800db76:	d304      	bcc.n	800db82 <__mdiff+0xca>
 800db78:	1be3      	subs	r3, r4, r7
 800db7a:	3b15      	subs	r3, #21
 800db7c:	089b      	lsrs	r3, r3, #2
 800db7e:	3301      	adds	r3, #1
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	9901      	ldr	r1, [sp, #4]
 800db84:	18cd      	adds	r5, r1, r3
 800db86:	9904      	ldr	r1, [sp, #16]
 800db88:	002e      	movs	r6, r5
 800db8a:	18cb      	adds	r3, r1, r3
 800db8c:	001f      	movs	r7, r3
 800db8e:	9902      	ldr	r1, [sp, #8]
 800db90:	428e      	cmp	r6, r1
 800db92:	d311      	bcc.n	800dbb8 <__mdiff+0x100>
 800db94:	9c02      	ldr	r4, [sp, #8]
 800db96:	1ee9      	subs	r1, r5, #3
 800db98:	2000      	movs	r0, #0
 800db9a:	428c      	cmp	r4, r1
 800db9c:	d304      	bcc.n	800dba8 <__mdiff+0xf0>
 800db9e:	0021      	movs	r1, r4
 800dba0:	3103      	adds	r1, #3
 800dba2:	1b49      	subs	r1, r1, r5
 800dba4:	0889      	lsrs	r1, r1, #2
 800dba6:	0088      	lsls	r0, r1, #2
 800dba8:	181b      	adds	r3, r3, r0
 800dbaa:	3b04      	subs	r3, #4
 800dbac:	6819      	ldr	r1, [r3, #0]
 800dbae:	2900      	cmp	r1, #0
 800dbb0:	d010      	beq.n	800dbd4 <__mdiff+0x11c>
 800dbb2:	9b00      	ldr	r3, [sp, #0]
 800dbb4:	6113      	str	r3, [r2, #16]
 800dbb6:	e798      	b.n	800daea <__mdiff+0x32>
 800dbb8:	4684      	mov	ip, r0
 800dbba:	ce02      	ldmia	r6!, {r1}
 800dbbc:	b288      	uxth	r0, r1
 800dbbe:	4460      	add	r0, ip
 800dbc0:	1400      	asrs	r0, r0, #16
 800dbc2:	0c0c      	lsrs	r4, r1, #16
 800dbc4:	1904      	adds	r4, r0, r4
 800dbc6:	4461      	add	r1, ip
 800dbc8:	1420      	asrs	r0, r4, #16
 800dbca:	b289      	uxth	r1, r1
 800dbcc:	0424      	lsls	r4, r4, #16
 800dbce:	4321      	orrs	r1, r4
 800dbd0:	c702      	stmia	r7!, {r1}
 800dbd2:	e7dc      	b.n	800db8e <__mdiff+0xd6>
 800dbd4:	9900      	ldr	r1, [sp, #0]
 800dbd6:	3901      	subs	r1, #1
 800dbd8:	9100      	str	r1, [sp, #0]
 800dbda:	e7e6      	b.n	800dbaa <__mdiff+0xf2>
 800dbdc:	0800ef80 	.word	0x0800ef80
 800dbe0:	0800efbd 	.word	0x0800efbd
 800dbe4:	00000237 	.word	0x00000237
 800dbe8:	00000245 	.word	0x00000245

0800dbec <__d2b>:
 800dbec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbee:	2101      	movs	r1, #1
 800dbf0:	0016      	movs	r6, r2
 800dbf2:	001f      	movs	r7, r3
 800dbf4:	f7ff fcbe 	bl	800d574 <_Balloc>
 800dbf8:	1e04      	subs	r4, r0, #0
 800dbfa:	d105      	bne.n	800dc08 <__d2b+0x1c>
 800dbfc:	0022      	movs	r2, r4
 800dbfe:	4b25      	ldr	r3, [pc, #148]	@ (800dc94 <__d2b+0xa8>)
 800dc00:	4825      	ldr	r0, [pc, #148]	@ (800dc98 <__d2b+0xac>)
 800dc02:	4926      	ldr	r1, [pc, #152]	@ (800dc9c <__d2b+0xb0>)
 800dc04:	f7fd ffb2 	bl	800bb6c <__assert_func>
 800dc08:	033b      	lsls	r3, r7, #12
 800dc0a:	007d      	lsls	r5, r7, #1
 800dc0c:	0b1b      	lsrs	r3, r3, #12
 800dc0e:	0d6d      	lsrs	r5, r5, #21
 800dc10:	d002      	beq.n	800dc18 <__d2b+0x2c>
 800dc12:	2280      	movs	r2, #128	@ 0x80
 800dc14:	0352      	lsls	r2, r2, #13
 800dc16:	4313      	orrs	r3, r2
 800dc18:	9301      	str	r3, [sp, #4]
 800dc1a:	2e00      	cmp	r6, #0
 800dc1c:	d025      	beq.n	800dc6a <__d2b+0x7e>
 800dc1e:	4668      	mov	r0, sp
 800dc20:	9600      	str	r6, [sp, #0]
 800dc22:	f7ff fd74 	bl	800d70e <__lo0bits>
 800dc26:	9b01      	ldr	r3, [sp, #4]
 800dc28:	9900      	ldr	r1, [sp, #0]
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	d01b      	beq.n	800dc66 <__d2b+0x7a>
 800dc2e:	2220      	movs	r2, #32
 800dc30:	001e      	movs	r6, r3
 800dc32:	1a12      	subs	r2, r2, r0
 800dc34:	4096      	lsls	r6, r2
 800dc36:	0032      	movs	r2, r6
 800dc38:	40c3      	lsrs	r3, r0
 800dc3a:	430a      	orrs	r2, r1
 800dc3c:	6162      	str	r2, [r4, #20]
 800dc3e:	9301      	str	r3, [sp, #4]
 800dc40:	9e01      	ldr	r6, [sp, #4]
 800dc42:	61a6      	str	r6, [r4, #24]
 800dc44:	1e73      	subs	r3, r6, #1
 800dc46:	419e      	sbcs	r6, r3
 800dc48:	3601      	adds	r6, #1
 800dc4a:	6126      	str	r6, [r4, #16]
 800dc4c:	2d00      	cmp	r5, #0
 800dc4e:	d014      	beq.n	800dc7a <__d2b+0x8e>
 800dc50:	2635      	movs	r6, #53	@ 0x35
 800dc52:	4b13      	ldr	r3, [pc, #76]	@ (800dca0 <__d2b+0xb4>)
 800dc54:	18ed      	adds	r5, r5, r3
 800dc56:	9b08      	ldr	r3, [sp, #32]
 800dc58:	182d      	adds	r5, r5, r0
 800dc5a:	601d      	str	r5, [r3, #0]
 800dc5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc5e:	1a36      	subs	r6, r6, r0
 800dc60:	601e      	str	r6, [r3, #0]
 800dc62:	0020      	movs	r0, r4
 800dc64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dc66:	6161      	str	r1, [r4, #20]
 800dc68:	e7ea      	b.n	800dc40 <__d2b+0x54>
 800dc6a:	a801      	add	r0, sp, #4
 800dc6c:	f7ff fd4f 	bl	800d70e <__lo0bits>
 800dc70:	9b01      	ldr	r3, [sp, #4]
 800dc72:	2601      	movs	r6, #1
 800dc74:	6163      	str	r3, [r4, #20]
 800dc76:	3020      	adds	r0, #32
 800dc78:	e7e7      	b.n	800dc4a <__d2b+0x5e>
 800dc7a:	4b0a      	ldr	r3, [pc, #40]	@ (800dca4 <__d2b+0xb8>)
 800dc7c:	18c0      	adds	r0, r0, r3
 800dc7e:	9b08      	ldr	r3, [sp, #32]
 800dc80:	6018      	str	r0, [r3, #0]
 800dc82:	4b09      	ldr	r3, [pc, #36]	@ (800dca8 <__d2b+0xbc>)
 800dc84:	18f3      	adds	r3, r6, r3
 800dc86:	009b      	lsls	r3, r3, #2
 800dc88:	18e3      	adds	r3, r4, r3
 800dc8a:	6958      	ldr	r0, [r3, #20]
 800dc8c:	f7ff fd1e 	bl	800d6cc <__hi0bits>
 800dc90:	0176      	lsls	r6, r6, #5
 800dc92:	e7e3      	b.n	800dc5c <__d2b+0x70>
 800dc94:	0800ef80 	.word	0x0800ef80
 800dc98:	0800efbd 	.word	0x0800efbd
 800dc9c:	0000030f 	.word	0x0000030f
 800dca0:	fffffbcd 	.word	0xfffffbcd
 800dca4:	fffffbce 	.word	0xfffffbce
 800dca8:	3fffffff 	.word	0x3fffffff

0800dcac <__submore>:
 800dcac:	000b      	movs	r3, r1
 800dcae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcb0:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 800dcb2:	3344      	adds	r3, #68	@ 0x44
 800dcb4:	000c      	movs	r4, r1
 800dcb6:	429d      	cmp	r5, r3
 800dcb8:	d11c      	bne.n	800dcf4 <__submore+0x48>
 800dcba:	2680      	movs	r6, #128	@ 0x80
 800dcbc:	00f6      	lsls	r6, r6, #3
 800dcbe:	0031      	movs	r1, r6
 800dcc0:	f7ff f97c 	bl	800cfbc <_malloc_r>
 800dcc4:	2800      	cmp	r0, #0
 800dcc6:	d102      	bne.n	800dcce <__submore+0x22>
 800dcc8:	2001      	movs	r0, #1
 800dcca:	4240      	negs	r0, r0
 800dccc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dcce:	0023      	movs	r3, r4
 800dcd0:	6360      	str	r0, [r4, #52]	@ 0x34
 800dcd2:	63a6      	str	r6, [r4, #56]	@ 0x38
 800dcd4:	3346      	adds	r3, #70	@ 0x46
 800dcd6:	781a      	ldrb	r2, [r3, #0]
 800dcd8:	4b10      	ldr	r3, [pc, #64]	@ (800dd1c <__submore+0x70>)
 800dcda:	54c2      	strb	r2, [r0, r3]
 800dcdc:	0023      	movs	r3, r4
 800dcde:	3345      	adds	r3, #69	@ 0x45
 800dce0:	781a      	ldrb	r2, [r3, #0]
 800dce2:	4b0f      	ldr	r3, [pc, #60]	@ (800dd20 <__submore+0x74>)
 800dce4:	54c2      	strb	r2, [r0, r3]
 800dce6:	782a      	ldrb	r2, [r5, #0]
 800dce8:	4b0e      	ldr	r3, [pc, #56]	@ (800dd24 <__submore+0x78>)
 800dcea:	54c2      	strb	r2, [r0, r3]
 800dcec:	18c0      	adds	r0, r0, r3
 800dcee:	6020      	str	r0, [r4, #0]
 800dcf0:	2000      	movs	r0, #0
 800dcf2:	e7eb      	b.n	800dccc <__submore+0x20>
 800dcf4:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 800dcf6:	0029      	movs	r1, r5
 800dcf8:	0073      	lsls	r3, r6, #1
 800dcfa:	001a      	movs	r2, r3
 800dcfc:	9301      	str	r3, [sp, #4]
 800dcfe:	f000 f823 	bl	800dd48 <_realloc_r>
 800dd02:	1e05      	subs	r5, r0, #0
 800dd04:	d0e0      	beq.n	800dcc8 <__submore+0x1c>
 800dd06:	1987      	adds	r7, r0, r6
 800dd08:	0001      	movs	r1, r0
 800dd0a:	0032      	movs	r2, r6
 800dd0c:	0038      	movs	r0, r7
 800dd0e:	f7fd ff24 	bl	800bb5a <memcpy>
 800dd12:	9b01      	ldr	r3, [sp, #4]
 800dd14:	6027      	str	r7, [r4, #0]
 800dd16:	6365      	str	r5, [r4, #52]	@ 0x34
 800dd18:	63a3      	str	r3, [r4, #56]	@ 0x38
 800dd1a:	e7e9      	b.n	800dcf0 <__submore+0x44>
 800dd1c:	000003ff 	.word	0x000003ff
 800dd20:	000003fe 	.word	0x000003fe
 800dd24:	000003fd 	.word	0x000003fd

0800dd28 <fiprintf>:
 800dd28:	b40e      	push	{r1, r2, r3}
 800dd2a:	b517      	push	{r0, r1, r2, r4, lr}
 800dd2c:	4c05      	ldr	r4, [pc, #20]	@ (800dd44 <fiprintf+0x1c>)
 800dd2e:	ab05      	add	r3, sp, #20
 800dd30:	cb04      	ldmia	r3!, {r2}
 800dd32:	0001      	movs	r1, r0
 800dd34:	6820      	ldr	r0, [r4, #0]
 800dd36:	9301      	str	r3, [sp, #4]
 800dd38:	f000 f9ca 	bl	800e0d0 <_vfiprintf_r>
 800dd3c:	bc1e      	pop	{r1, r2, r3, r4}
 800dd3e:	bc08      	pop	{r3}
 800dd40:	b003      	add	sp, #12
 800dd42:	4718      	bx	r3
 800dd44:	20000018 	.word	0x20000018

0800dd48 <_realloc_r>:
 800dd48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd4a:	0006      	movs	r6, r0
 800dd4c:	000c      	movs	r4, r1
 800dd4e:	0015      	movs	r5, r2
 800dd50:	2900      	cmp	r1, #0
 800dd52:	d105      	bne.n	800dd60 <_realloc_r+0x18>
 800dd54:	0011      	movs	r1, r2
 800dd56:	f7ff f931 	bl	800cfbc <_malloc_r>
 800dd5a:	0004      	movs	r4, r0
 800dd5c:	0020      	movs	r0, r4
 800dd5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd60:	2a00      	cmp	r2, #0
 800dd62:	d103      	bne.n	800dd6c <_realloc_r+0x24>
 800dd64:	f7fe fd96 	bl	800c894 <_free_r>
 800dd68:	002c      	movs	r4, r5
 800dd6a:	e7f7      	b.n	800dd5c <_realloc_r+0x14>
 800dd6c:	f000 fade 	bl	800e32c <_malloc_usable_size_r>
 800dd70:	0007      	movs	r7, r0
 800dd72:	4285      	cmp	r5, r0
 800dd74:	d802      	bhi.n	800dd7c <_realloc_r+0x34>
 800dd76:	0843      	lsrs	r3, r0, #1
 800dd78:	42ab      	cmp	r3, r5
 800dd7a:	d3ef      	bcc.n	800dd5c <_realloc_r+0x14>
 800dd7c:	0029      	movs	r1, r5
 800dd7e:	0030      	movs	r0, r6
 800dd80:	f7ff f91c 	bl	800cfbc <_malloc_r>
 800dd84:	9001      	str	r0, [sp, #4]
 800dd86:	2800      	cmp	r0, #0
 800dd88:	d101      	bne.n	800dd8e <_realloc_r+0x46>
 800dd8a:	9c01      	ldr	r4, [sp, #4]
 800dd8c:	e7e6      	b.n	800dd5c <_realloc_r+0x14>
 800dd8e:	002a      	movs	r2, r5
 800dd90:	42bd      	cmp	r5, r7
 800dd92:	d900      	bls.n	800dd96 <_realloc_r+0x4e>
 800dd94:	003a      	movs	r2, r7
 800dd96:	0021      	movs	r1, r4
 800dd98:	9801      	ldr	r0, [sp, #4]
 800dd9a:	f7fd fede 	bl	800bb5a <memcpy>
 800dd9e:	0021      	movs	r1, r4
 800dda0:	0030      	movs	r0, r6
 800dda2:	f7fe fd77 	bl	800c894 <_free_r>
 800dda6:	e7f0      	b.n	800dd8a <_realloc_r+0x42>

0800dda8 <_strtol_l.isra.0>:
 800dda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddaa:	b085      	sub	sp, #20
 800ddac:	0017      	movs	r7, r2
 800ddae:	001e      	movs	r6, r3
 800ddb0:	9003      	str	r0, [sp, #12]
 800ddb2:	9101      	str	r1, [sp, #4]
 800ddb4:	2b24      	cmp	r3, #36	@ 0x24
 800ddb6:	d823      	bhi.n	800de00 <_strtol_l.isra.0+0x58>
 800ddb8:	000c      	movs	r4, r1
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d020      	beq.n	800de00 <_strtol_l.isra.0+0x58>
 800ddbe:	4b3d      	ldr	r3, [pc, #244]	@ (800deb4 <_strtol_l.isra.0+0x10c>)
 800ddc0:	2208      	movs	r2, #8
 800ddc2:	469c      	mov	ip, r3
 800ddc4:	0023      	movs	r3, r4
 800ddc6:	4661      	mov	r1, ip
 800ddc8:	781d      	ldrb	r5, [r3, #0]
 800ddca:	3401      	adds	r4, #1
 800ddcc:	5d48      	ldrb	r0, [r1, r5]
 800ddce:	0001      	movs	r1, r0
 800ddd0:	4011      	ands	r1, r2
 800ddd2:	4210      	tst	r0, r2
 800ddd4:	d1f6      	bne.n	800ddc4 <_strtol_l.isra.0+0x1c>
 800ddd6:	2d2d      	cmp	r5, #45	@ 0x2d
 800ddd8:	d119      	bne.n	800de0e <_strtol_l.isra.0+0x66>
 800ddda:	7825      	ldrb	r5, [r4, #0]
 800dddc:	1c9c      	adds	r4, r3, #2
 800ddde:	2301      	movs	r3, #1
 800dde0:	9300      	str	r3, [sp, #0]
 800dde2:	2210      	movs	r2, #16
 800dde4:	0033      	movs	r3, r6
 800dde6:	4393      	bics	r3, r2
 800dde8:	d11d      	bne.n	800de26 <_strtol_l.isra.0+0x7e>
 800ddea:	2d30      	cmp	r5, #48	@ 0x30
 800ddec:	d115      	bne.n	800de1a <_strtol_l.isra.0+0x72>
 800ddee:	2120      	movs	r1, #32
 800ddf0:	7823      	ldrb	r3, [r4, #0]
 800ddf2:	438b      	bics	r3, r1
 800ddf4:	2b58      	cmp	r3, #88	@ 0x58
 800ddf6:	d110      	bne.n	800de1a <_strtol_l.isra.0+0x72>
 800ddf8:	7865      	ldrb	r5, [r4, #1]
 800ddfa:	3402      	adds	r4, #2
 800ddfc:	2610      	movs	r6, #16
 800ddfe:	e012      	b.n	800de26 <_strtol_l.isra.0+0x7e>
 800de00:	f7fd fe5c 	bl	800babc <__errno>
 800de04:	2316      	movs	r3, #22
 800de06:	6003      	str	r3, [r0, #0]
 800de08:	2000      	movs	r0, #0
 800de0a:	b005      	add	sp, #20
 800de0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de0e:	9100      	str	r1, [sp, #0]
 800de10:	2d2b      	cmp	r5, #43	@ 0x2b
 800de12:	d1e6      	bne.n	800dde2 <_strtol_l.isra.0+0x3a>
 800de14:	7825      	ldrb	r5, [r4, #0]
 800de16:	1c9c      	adds	r4, r3, #2
 800de18:	e7e3      	b.n	800dde2 <_strtol_l.isra.0+0x3a>
 800de1a:	2e00      	cmp	r6, #0
 800de1c:	d1ee      	bne.n	800ddfc <_strtol_l.isra.0+0x54>
 800de1e:	360a      	adds	r6, #10
 800de20:	2d30      	cmp	r5, #48	@ 0x30
 800de22:	d100      	bne.n	800de26 <_strtol_l.isra.0+0x7e>
 800de24:	3e02      	subs	r6, #2
 800de26:	4a24      	ldr	r2, [pc, #144]	@ (800deb8 <_strtol_l.isra.0+0x110>)
 800de28:	9b00      	ldr	r3, [sp, #0]
 800de2a:	4694      	mov	ip, r2
 800de2c:	4463      	add	r3, ip
 800de2e:	0031      	movs	r1, r6
 800de30:	0018      	movs	r0, r3
 800de32:	9302      	str	r3, [sp, #8]
 800de34:	f7f2 fa12 	bl	800025c <__aeabi_uidivmod>
 800de38:	2200      	movs	r2, #0
 800de3a:	4684      	mov	ip, r0
 800de3c:	0010      	movs	r0, r2
 800de3e:	002b      	movs	r3, r5
 800de40:	3b30      	subs	r3, #48	@ 0x30
 800de42:	2b09      	cmp	r3, #9
 800de44:	d811      	bhi.n	800de6a <_strtol_l.isra.0+0xc2>
 800de46:	001d      	movs	r5, r3
 800de48:	42ae      	cmp	r6, r5
 800de4a:	dd1d      	ble.n	800de88 <_strtol_l.isra.0+0xe0>
 800de4c:	1c53      	adds	r3, r2, #1
 800de4e:	d009      	beq.n	800de64 <_strtol_l.isra.0+0xbc>
 800de50:	2201      	movs	r2, #1
 800de52:	4252      	negs	r2, r2
 800de54:	4584      	cmp	ip, r0
 800de56:	d305      	bcc.n	800de64 <_strtol_l.isra.0+0xbc>
 800de58:	d101      	bne.n	800de5e <_strtol_l.isra.0+0xb6>
 800de5a:	42a9      	cmp	r1, r5
 800de5c:	db11      	blt.n	800de82 <_strtol_l.isra.0+0xda>
 800de5e:	2201      	movs	r2, #1
 800de60:	4370      	muls	r0, r6
 800de62:	1828      	adds	r0, r5, r0
 800de64:	7825      	ldrb	r5, [r4, #0]
 800de66:	3401      	adds	r4, #1
 800de68:	e7e9      	b.n	800de3e <_strtol_l.isra.0+0x96>
 800de6a:	002b      	movs	r3, r5
 800de6c:	3b41      	subs	r3, #65	@ 0x41
 800de6e:	2b19      	cmp	r3, #25
 800de70:	d801      	bhi.n	800de76 <_strtol_l.isra.0+0xce>
 800de72:	3d37      	subs	r5, #55	@ 0x37
 800de74:	e7e8      	b.n	800de48 <_strtol_l.isra.0+0xa0>
 800de76:	002b      	movs	r3, r5
 800de78:	3b61      	subs	r3, #97	@ 0x61
 800de7a:	2b19      	cmp	r3, #25
 800de7c:	d804      	bhi.n	800de88 <_strtol_l.isra.0+0xe0>
 800de7e:	3d57      	subs	r5, #87	@ 0x57
 800de80:	e7e2      	b.n	800de48 <_strtol_l.isra.0+0xa0>
 800de82:	2201      	movs	r2, #1
 800de84:	4252      	negs	r2, r2
 800de86:	e7ed      	b.n	800de64 <_strtol_l.isra.0+0xbc>
 800de88:	1c53      	adds	r3, r2, #1
 800de8a:	d108      	bne.n	800de9e <_strtol_l.isra.0+0xf6>
 800de8c:	2322      	movs	r3, #34	@ 0x22
 800de8e:	9a03      	ldr	r2, [sp, #12]
 800de90:	9802      	ldr	r0, [sp, #8]
 800de92:	6013      	str	r3, [r2, #0]
 800de94:	2f00      	cmp	r7, #0
 800de96:	d0b8      	beq.n	800de0a <_strtol_l.isra.0+0x62>
 800de98:	1e63      	subs	r3, r4, #1
 800de9a:	9301      	str	r3, [sp, #4]
 800de9c:	e007      	b.n	800deae <_strtol_l.isra.0+0x106>
 800de9e:	9b00      	ldr	r3, [sp, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d000      	beq.n	800dea6 <_strtol_l.isra.0+0xfe>
 800dea4:	4240      	negs	r0, r0
 800dea6:	2f00      	cmp	r7, #0
 800dea8:	d0af      	beq.n	800de0a <_strtol_l.isra.0+0x62>
 800deaa:	2a00      	cmp	r2, #0
 800deac:	d1f4      	bne.n	800de98 <_strtol_l.isra.0+0xf0>
 800deae:	9b01      	ldr	r3, [sp, #4]
 800deb0:	603b      	str	r3, [r7, #0]
 800deb2:	e7aa      	b.n	800de0a <_strtol_l.isra.0+0x62>
 800deb4:	0800f121 	.word	0x0800f121
 800deb8:	7fffffff 	.word	0x7fffffff

0800debc <_strtol_r>:
 800debc:	b510      	push	{r4, lr}
 800debe:	f7ff ff73 	bl	800dda8 <_strtol_l.isra.0>
 800dec2:	bd10      	pop	{r4, pc}

0800dec4 <_strtoul_l.isra.0>:
 800dec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dec6:	001e      	movs	r6, r3
 800dec8:	4b3e      	ldr	r3, [pc, #248]	@ (800dfc4 <_strtoul_l.isra.0+0x100>)
 800deca:	0017      	movs	r7, r2
 800decc:	000c      	movs	r4, r1
 800dece:	469c      	mov	ip, r3
 800ded0:	2208      	movs	r2, #8
 800ded2:	b085      	sub	sp, #20
 800ded4:	9003      	str	r0, [sp, #12]
 800ded6:	9100      	str	r1, [sp, #0]
 800ded8:	0023      	movs	r3, r4
 800deda:	4661      	mov	r1, ip
 800dedc:	781d      	ldrb	r5, [r3, #0]
 800dede:	3401      	adds	r4, #1
 800dee0:	5d48      	ldrb	r0, [r1, r5]
 800dee2:	0001      	movs	r1, r0
 800dee4:	4011      	ands	r1, r2
 800dee6:	4210      	tst	r0, r2
 800dee8:	d1f6      	bne.n	800ded8 <_strtoul_l.isra.0+0x14>
 800deea:	2d2d      	cmp	r5, #45	@ 0x2d
 800deec:	d112      	bne.n	800df14 <_strtoul_l.isra.0+0x50>
 800deee:	7825      	ldrb	r5, [r4, #0]
 800def0:	1c9c      	adds	r4, r3, #2
 800def2:	2301      	movs	r3, #1
 800def4:	9302      	str	r3, [sp, #8]
 800def6:	2210      	movs	r2, #16
 800def8:	0033      	movs	r3, r6
 800defa:	4393      	bics	r3, r2
 800defc:	d116      	bne.n	800df2c <_strtoul_l.isra.0+0x68>
 800defe:	2d30      	cmp	r5, #48	@ 0x30
 800df00:	d10e      	bne.n	800df20 <_strtoul_l.isra.0+0x5c>
 800df02:	2120      	movs	r1, #32
 800df04:	7823      	ldrb	r3, [r4, #0]
 800df06:	438b      	bics	r3, r1
 800df08:	2b58      	cmp	r3, #88	@ 0x58
 800df0a:	d109      	bne.n	800df20 <_strtoul_l.isra.0+0x5c>
 800df0c:	7865      	ldrb	r5, [r4, #1]
 800df0e:	3402      	adds	r4, #2
 800df10:	2610      	movs	r6, #16
 800df12:	e00b      	b.n	800df2c <_strtoul_l.isra.0+0x68>
 800df14:	9102      	str	r1, [sp, #8]
 800df16:	2d2b      	cmp	r5, #43	@ 0x2b
 800df18:	d1ed      	bne.n	800def6 <_strtoul_l.isra.0+0x32>
 800df1a:	7825      	ldrb	r5, [r4, #0]
 800df1c:	1c9c      	adds	r4, r3, #2
 800df1e:	e7ea      	b.n	800def6 <_strtoul_l.isra.0+0x32>
 800df20:	2e00      	cmp	r6, #0
 800df22:	d1f5      	bne.n	800df10 <_strtoul_l.isra.0+0x4c>
 800df24:	360a      	adds	r6, #10
 800df26:	2d30      	cmp	r5, #48	@ 0x30
 800df28:	d100      	bne.n	800df2c <_strtoul_l.isra.0+0x68>
 800df2a:	3e02      	subs	r6, #2
 800df2c:	2001      	movs	r0, #1
 800df2e:	0031      	movs	r1, r6
 800df30:	4240      	negs	r0, r0
 800df32:	f7f2 f90d 	bl	8000150 <__udivsi3>
 800df36:	9001      	str	r0, [sp, #4]
 800df38:	2001      	movs	r0, #1
 800df3a:	0031      	movs	r1, r6
 800df3c:	4240      	negs	r0, r0
 800df3e:	f7f2 f98d 	bl	800025c <__aeabi_uidivmod>
 800df42:	2300      	movs	r3, #0
 800df44:	2201      	movs	r2, #1
 800df46:	0018      	movs	r0, r3
 800df48:	4694      	mov	ip, r2
 800df4a:	002a      	movs	r2, r5
 800df4c:	3a30      	subs	r2, #48	@ 0x30
 800df4e:	2a09      	cmp	r2, #9
 800df50:	d812      	bhi.n	800df78 <_strtoul_l.isra.0+0xb4>
 800df52:	0015      	movs	r5, r2
 800df54:	42ae      	cmp	r6, r5
 800df56:	dd1e      	ble.n	800df96 <_strtoul_l.isra.0+0xd2>
 800df58:	1c5a      	adds	r2, r3, #1
 800df5a:	d00a      	beq.n	800df72 <_strtoul_l.isra.0+0xae>
 800df5c:	2301      	movs	r3, #1
 800df5e:	9a01      	ldr	r2, [sp, #4]
 800df60:	425b      	negs	r3, r3
 800df62:	4282      	cmp	r2, r0
 800df64:	d305      	bcc.n	800df72 <_strtoul_l.isra.0+0xae>
 800df66:	d101      	bne.n	800df6c <_strtoul_l.isra.0+0xa8>
 800df68:	42a9      	cmp	r1, r5
 800df6a:	db11      	blt.n	800df90 <_strtoul_l.isra.0+0xcc>
 800df6c:	4663      	mov	r3, ip
 800df6e:	4370      	muls	r0, r6
 800df70:	1828      	adds	r0, r5, r0
 800df72:	7825      	ldrb	r5, [r4, #0]
 800df74:	3401      	adds	r4, #1
 800df76:	e7e8      	b.n	800df4a <_strtoul_l.isra.0+0x86>
 800df78:	002a      	movs	r2, r5
 800df7a:	3a41      	subs	r2, #65	@ 0x41
 800df7c:	2a19      	cmp	r2, #25
 800df7e:	d801      	bhi.n	800df84 <_strtoul_l.isra.0+0xc0>
 800df80:	3d37      	subs	r5, #55	@ 0x37
 800df82:	e7e7      	b.n	800df54 <_strtoul_l.isra.0+0x90>
 800df84:	002a      	movs	r2, r5
 800df86:	3a61      	subs	r2, #97	@ 0x61
 800df88:	2a19      	cmp	r2, #25
 800df8a:	d804      	bhi.n	800df96 <_strtoul_l.isra.0+0xd2>
 800df8c:	3d57      	subs	r5, #87	@ 0x57
 800df8e:	e7e1      	b.n	800df54 <_strtoul_l.isra.0+0x90>
 800df90:	2301      	movs	r3, #1
 800df92:	425b      	negs	r3, r3
 800df94:	e7ed      	b.n	800df72 <_strtoul_l.isra.0+0xae>
 800df96:	1c5a      	adds	r2, r3, #1
 800df98:	d107      	bne.n	800dfaa <_strtoul_l.isra.0+0xe6>
 800df9a:	2222      	movs	r2, #34	@ 0x22
 800df9c:	9903      	ldr	r1, [sp, #12]
 800df9e:	0018      	movs	r0, r3
 800dfa0:	600a      	str	r2, [r1, #0]
 800dfa2:	2f00      	cmp	r7, #0
 800dfa4:	d109      	bne.n	800dfba <_strtoul_l.isra.0+0xf6>
 800dfa6:	b005      	add	sp, #20
 800dfa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfaa:	9a02      	ldr	r2, [sp, #8]
 800dfac:	2a00      	cmp	r2, #0
 800dfae:	d000      	beq.n	800dfb2 <_strtoul_l.isra.0+0xee>
 800dfb0:	4240      	negs	r0, r0
 800dfb2:	2f00      	cmp	r7, #0
 800dfb4:	d0f7      	beq.n	800dfa6 <_strtoul_l.isra.0+0xe2>
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d001      	beq.n	800dfbe <_strtoul_l.isra.0+0xfa>
 800dfba:	1e63      	subs	r3, r4, #1
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	9b00      	ldr	r3, [sp, #0]
 800dfc0:	603b      	str	r3, [r7, #0]
 800dfc2:	e7f0      	b.n	800dfa6 <_strtoul_l.isra.0+0xe2>
 800dfc4:	0800f121 	.word	0x0800f121

0800dfc8 <_strtoul_r>:
 800dfc8:	b510      	push	{r4, lr}
 800dfca:	f7ff ff7b 	bl	800dec4 <_strtoul_l.isra.0>
 800dfce:	bd10      	pop	{r4, pc}

0800dfd0 <memmove>:
 800dfd0:	b510      	push	{r4, lr}
 800dfd2:	4288      	cmp	r0, r1
 800dfd4:	d902      	bls.n	800dfdc <memmove+0xc>
 800dfd6:	188b      	adds	r3, r1, r2
 800dfd8:	4298      	cmp	r0, r3
 800dfda:	d308      	bcc.n	800dfee <memmove+0x1e>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d007      	beq.n	800dff2 <memmove+0x22>
 800dfe2:	5ccc      	ldrb	r4, [r1, r3]
 800dfe4:	54c4      	strb	r4, [r0, r3]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	e7f9      	b.n	800dfde <memmove+0xe>
 800dfea:	5c8b      	ldrb	r3, [r1, r2]
 800dfec:	5483      	strb	r3, [r0, r2]
 800dfee:	3a01      	subs	r2, #1
 800dff0:	d2fb      	bcs.n	800dfea <memmove+0x1a>
 800dff2:	bd10      	pop	{r4, pc}

0800dff4 <_sbrk_r>:
 800dff4:	2300      	movs	r3, #0
 800dff6:	b570      	push	{r4, r5, r6, lr}
 800dff8:	4d06      	ldr	r5, [pc, #24]	@ (800e014 <_sbrk_r+0x20>)
 800dffa:	0004      	movs	r4, r0
 800dffc:	0008      	movs	r0, r1
 800dffe:	602b      	str	r3, [r5, #0]
 800e000:	f7f9 fa10 	bl	8007424 <_sbrk>
 800e004:	1c43      	adds	r3, r0, #1
 800e006:	d103      	bne.n	800e010 <_sbrk_r+0x1c>
 800e008:	682b      	ldr	r3, [r5, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d000      	beq.n	800e010 <_sbrk_r+0x1c>
 800e00e:	6023      	str	r3, [r4, #0]
 800e010:	bd70      	pop	{r4, r5, r6, pc}
 800e012:	46c0      	nop			@ (mov r8, r8)
 800e014:	20000930 	.word	0x20000930

0800e018 <abort>:
 800e018:	2006      	movs	r0, #6
 800e01a:	b510      	push	{r4, lr}
 800e01c:	f000 fad0 	bl	800e5c0 <raise>
 800e020:	2001      	movs	r0, #1
 800e022:	f7f9 f98c 	bl	800733e <_exit>

0800e026 <_calloc_r>:
 800e026:	b570      	push	{r4, r5, r6, lr}
 800e028:	0c0b      	lsrs	r3, r1, #16
 800e02a:	0c15      	lsrs	r5, r2, #16
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d11e      	bne.n	800e06e <_calloc_r+0x48>
 800e030:	2d00      	cmp	r5, #0
 800e032:	d10c      	bne.n	800e04e <_calloc_r+0x28>
 800e034:	b289      	uxth	r1, r1
 800e036:	b294      	uxth	r4, r2
 800e038:	434c      	muls	r4, r1
 800e03a:	0021      	movs	r1, r4
 800e03c:	f7fe ffbe 	bl	800cfbc <_malloc_r>
 800e040:	1e05      	subs	r5, r0, #0
 800e042:	d01b      	beq.n	800e07c <_calloc_r+0x56>
 800e044:	0022      	movs	r2, r4
 800e046:	2100      	movs	r1, #0
 800e048:	f7fd fc80 	bl	800b94c <memset>
 800e04c:	e016      	b.n	800e07c <_calloc_r+0x56>
 800e04e:	1c2b      	adds	r3, r5, #0
 800e050:	1c0c      	adds	r4, r1, #0
 800e052:	b289      	uxth	r1, r1
 800e054:	b292      	uxth	r2, r2
 800e056:	434a      	muls	r2, r1
 800e058:	b29b      	uxth	r3, r3
 800e05a:	b2a1      	uxth	r1, r4
 800e05c:	4359      	muls	r1, r3
 800e05e:	0c14      	lsrs	r4, r2, #16
 800e060:	190c      	adds	r4, r1, r4
 800e062:	0c23      	lsrs	r3, r4, #16
 800e064:	d107      	bne.n	800e076 <_calloc_r+0x50>
 800e066:	0424      	lsls	r4, r4, #16
 800e068:	b292      	uxth	r2, r2
 800e06a:	4314      	orrs	r4, r2
 800e06c:	e7e5      	b.n	800e03a <_calloc_r+0x14>
 800e06e:	2d00      	cmp	r5, #0
 800e070:	d101      	bne.n	800e076 <_calloc_r+0x50>
 800e072:	1c14      	adds	r4, r2, #0
 800e074:	e7ed      	b.n	800e052 <_calloc_r+0x2c>
 800e076:	230c      	movs	r3, #12
 800e078:	2500      	movs	r5, #0
 800e07a:	6003      	str	r3, [r0, #0]
 800e07c:	0028      	movs	r0, r5
 800e07e:	bd70      	pop	{r4, r5, r6, pc}

0800e080 <__sfputc_r>:
 800e080:	6893      	ldr	r3, [r2, #8]
 800e082:	b510      	push	{r4, lr}
 800e084:	3b01      	subs	r3, #1
 800e086:	6093      	str	r3, [r2, #8]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	da04      	bge.n	800e096 <__sfputc_r+0x16>
 800e08c:	6994      	ldr	r4, [r2, #24]
 800e08e:	42a3      	cmp	r3, r4
 800e090:	db07      	blt.n	800e0a2 <__sfputc_r+0x22>
 800e092:	290a      	cmp	r1, #10
 800e094:	d005      	beq.n	800e0a2 <__sfputc_r+0x22>
 800e096:	6813      	ldr	r3, [r2, #0]
 800e098:	1c58      	adds	r0, r3, #1
 800e09a:	6010      	str	r0, [r2, #0]
 800e09c:	7019      	strb	r1, [r3, #0]
 800e09e:	0008      	movs	r0, r1
 800e0a0:	bd10      	pop	{r4, pc}
 800e0a2:	f000 f94b 	bl	800e33c <__swbuf_r>
 800e0a6:	0001      	movs	r1, r0
 800e0a8:	e7f9      	b.n	800e09e <__sfputc_r+0x1e>

0800e0aa <__sfputs_r>:
 800e0aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ac:	0006      	movs	r6, r0
 800e0ae:	000f      	movs	r7, r1
 800e0b0:	0014      	movs	r4, r2
 800e0b2:	18d5      	adds	r5, r2, r3
 800e0b4:	42ac      	cmp	r4, r5
 800e0b6:	d101      	bne.n	800e0bc <__sfputs_r+0x12>
 800e0b8:	2000      	movs	r0, #0
 800e0ba:	e007      	b.n	800e0cc <__sfputs_r+0x22>
 800e0bc:	7821      	ldrb	r1, [r4, #0]
 800e0be:	003a      	movs	r2, r7
 800e0c0:	0030      	movs	r0, r6
 800e0c2:	f7ff ffdd 	bl	800e080 <__sfputc_r>
 800e0c6:	3401      	adds	r4, #1
 800e0c8:	1c43      	adds	r3, r0, #1
 800e0ca:	d1f3      	bne.n	800e0b4 <__sfputs_r+0xa>
 800e0cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0d0 <_vfiprintf_r>:
 800e0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0d2:	b0a1      	sub	sp, #132	@ 0x84
 800e0d4:	000f      	movs	r7, r1
 800e0d6:	0015      	movs	r5, r2
 800e0d8:	001e      	movs	r6, r3
 800e0da:	9003      	str	r0, [sp, #12]
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	d004      	beq.n	800e0ea <_vfiprintf_r+0x1a>
 800e0e0:	6a03      	ldr	r3, [r0, #32]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d101      	bne.n	800e0ea <_vfiprintf_r+0x1a>
 800e0e6:	f7fd fbfd 	bl	800b8e4 <__sinit>
 800e0ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e0ec:	07db      	lsls	r3, r3, #31
 800e0ee:	d405      	bmi.n	800e0fc <_vfiprintf_r+0x2c>
 800e0f0:	89bb      	ldrh	r3, [r7, #12]
 800e0f2:	059b      	lsls	r3, r3, #22
 800e0f4:	d402      	bmi.n	800e0fc <_vfiprintf_r+0x2c>
 800e0f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e0f8:	f7fd fd0b 	bl	800bb12 <__retarget_lock_acquire_recursive>
 800e0fc:	89bb      	ldrh	r3, [r7, #12]
 800e0fe:	071b      	lsls	r3, r3, #28
 800e100:	d502      	bpl.n	800e108 <_vfiprintf_r+0x38>
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d113      	bne.n	800e130 <_vfiprintf_r+0x60>
 800e108:	0039      	movs	r1, r7
 800e10a:	9803      	ldr	r0, [sp, #12]
 800e10c:	f000 f958 	bl	800e3c0 <__swsetup_r>
 800e110:	2800      	cmp	r0, #0
 800e112:	d00d      	beq.n	800e130 <_vfiprintf_r+0x60>
 800e114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e116:	07db      	lsls	r3, r3, #31
 800e118:	d503      	bpl.n	800e122 <_vfiprintf_r+0x52>
 800e11a:	2001      	movs	r0, #1
 800e11c:	4240      	negs	r0, r0
 800e11e:	b021      	add	sp, #132	@ 0x84
 800e120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e122:	89bb      	ldrh	r3, [r7, #12]
 800e124:	059b      	lsls	r3, r3, #22
 800e126:	d4f8      	bmi.n	800e11a <_vfiprintf_r+0x4a>
 800e128:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e12a:	f7fd fcf3 	bl	800bb14 <__retarget_lock_release_recursive>
 800e12e:	e7f4      	b.n	800e11a <_vfiprintf_r+0x4a>
 800e130:	2300      	movs	r3, #0
 800e132:	ac08      	add	r4, sp, #32
 800e134:	6163      	str	r3, [r4, #20]
 800e136:	3320      	adds	r3, #32
 800e138:	7663      	strb	r3, [r4, #25]
 800e13a:	3310      	adds	r3, #16
 800e13c:	76a3      	strb	r3, [r4, #26]
 800e13e:	9607      	str	r6, [sp, #28]
 800e140:	002e      	movs	r6, r5
 800e142:	7833      	ldrb	r3, [r6, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d001      	beq.n	800e14c <_vfiprintf_r+0x7c>
 800e148:	2b25      	cmp	r3, #37	@ 0x25
 800e14a:	d148      	bne.n	800e1de <_vfiprintf_r+0x10e>
 800e14c:	1b73      	subs	r3, r6, r5
 800e14e:	9305      	str	r3, [sp, #20]
 800e150:	42ae      	cmp	r6, r5
 800e152:	d00b      	beq.n	800e16c <_vfiprintf_r+0x9c>
 800e154:	002a      	movs	r2, r5
 800e156:	0039      	movs	r1, r7
 800e158:	9803      	ldr	r0, [sp, #12]
 800e15a:	f7ff ffa6 	bl	800e0aa <__sfputs_r>
 800e15e:	3001      	adds	r0, #1
 800e160:	d100      	bne.n	800e164 <_vfiprintf_r+0x94>
 800e162:	e0ae      	b.n	800e2c2 <_vfiprintf_r+0x1f2>
 800e164:	6963      	ldr	r3, [r4, #20]
 800e166:	9a05      	ldr	r2, [sp, #20]
 800e168:	189b      	adds	r3, r3, r2
 800e16a:	6163      	str	r3, [r4, #20]
 800e16c:	7833      	ldrb	r3, [r6, #0]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d100      	bne.n	800e174 <_vfiprintf_r+0xa4>
 800e172:	e0a6      	b.n	800e2c2 <_vfiprintf_r+0x1f2>
 800e174:	2201      	movs	r2, #1
 800e176:	2300      	movs	r3, #0
 800e178:	4252      	negs	r2, r2
 800e17a:	6062      	str	r2, [r4, #4]
 800e17c:	a904      	add	r1, sp, #16
 800e17e:	3254      	adds	r2, #84	@ 0x54
 800e180:	1852      	adds	r2, r2, r1
 800e182:	1c75      	adds	r5, r6, #1
 800e184:	6023      	str	r3, [r4, #0]
 800e186:	60e3      	str	r3, [r4, #12]
 800e188:	60a3      	str	r3, [r4, #8]
 800e18a:	7013      	strb	r3, [r2, #0]
 800e18c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e18e:	4b59      	ldr	r3, [pc, #356]	@ (800e2f4 <_vfiprintf_r+0x224>)
 800e190:	2205      	movs	r2, #5
 800e192:	0018      	movs	r0, r3
 800e194:	7829      	ldrb	r1, [r5, #0]
 800e196:	9305      	str	r3, [sp, #20]
 800e198:	f7fd fcd4 	bl	800bb44 <memchr>
 800e19c:	1c6e      	adds	r6, r5, #1
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d11f      	bne.n	800e1e2 <_vfiprintf_r+0x112>
 800e1a2:	6822      	ldr	r2, [r4, #0]
 800e1a4:	06d3      	lsls	r3, r2, #27
 800e1a6:	d504      	bpl.n	800e1b2 <_vfiprintf_r+0xe2>
 800e1a8:	2353      	movs	r3, #83	@ 0x53
 800e1aa:	a904      	add	r1, sp, #16
 800e1ac:	185b      	adds	r3, r3, r1
 800e1ae:	2120      	movs	r1, #32
 800e1b0:	7019      	strb	r1, [r3, #0]
 800e1b2:	0713      	lsls	r3, r2, #28
 800e1b4:	d504      	bpl.n	800e1c0 <_vfiprintf_r+0xf0>
 800e1b6:	2353      	movs	r3, #83	@ 0x53
 800e1b8:	a904      	add	r1, sp, #16
 800e1ba:	185b      	adds	r3, r3, r1
 800e1bc:	212b      	movs	r1, #43	@ 0x2b
 800e1be:	7019      	strb	r1, [r3, #0]
 800e1c0:	782b      	ldrb	r3, [r5, #0]
 800e1c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1c4:	d016      	beq.n	800e1f4 <_vfiprintf_r+0x124>
 800e1c6:	002e      	movs	r6, r5
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	200a      	movs	r0, #10
 800e1cc:	68e3      	ldr	r3, [r4, #12]
 800e1ce:	7832      	ldrb	r2, [r6, #0]
 800e1d0:	1c75      	adds	r5, r6, #1
 800e1d2:	3a30      	subs	r2, #48	@ 0x30
 800e1d4:	2a09      	cmp	r2, #9
 800e1d6:	d950      	bls.n	800e27a <_vfiprintf_r+0x1aa>
 800e1d8:	2900      	cmp	r1, #0
 800e1da:	d111      	bne.n	800e200 <_vfiprintf_r+0x130>
 800e1dc:	e017      	b.n	800e20e <_vfiprintf_r+0x13e>
 800e1de:	3601      	adds	r6, #1
 800e1e0:	e7af      	b.n	800e142 <_vfiprintf_r+0x72>
 800e1e2:	9b05      	ldr	r3, [sp, #20]
 800e1e4:	6822      	ldr	r2, [r4, #0]
 800e1e6:	1ac0      	subs	r0, r0, r3
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	4083      	lsls	r3, r0
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	0035      	movs	r5, r6
 800e1f0:	6023      	str	r3, [r4, #0]
 800e1f2:	e7cc      	b.n	800e18e <_vfiprintf_r+0xbe>
 800e1f4:	9b07      	ldr	r3, [sp, #28]
 800e1f6:	1d19      	adds	r1, r3, #4
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	9107      	str	r1, [sp, #28]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	db01      	blt.n	800e204 <_vfiprintf_r+0x134>
 800e200:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e202:	e004      	b.n	800e20e <_vfiprintf_r+0x13e>
 800e204:	425b      	negs	r3, r3
 800e206:	60e3      	str	r3, [r4, #12]
 800e208:	2302      	movs	r3, #2
 800e20a:	4313      	orrs	r3, r2
 800e20c:	6023      	str	r3, [r4, #0]
 800e20e:	7833      	ldrb	r3, [r6, #0]
 800e210:	2b2e      	cmp	r3, #46	@ 0x2e
 800e212:	d10c      	bne.n	800e22e <_vfiprintf_r+0x15e>
 800e214:	7873      	ldrb	r3, [r6, #1]
 800e216:	2b2a      	cmp	r3, #42	@ 0x2a
 800e218:	d134      	bne.n	800e284 <_vfiprintf_r+0x1b4>
 800e21a:	9b07      	ldr	r3, [sp, #28]
 800e21c:	3602      	adds	r6, #2
 800e21e:	1d1a      	adds	r2, r3, #4
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	9207      	str	r2, [sp, #28]
 800e224:	2b00      	cmp	r3, #0
 800e226:	da01      	bge.n	800e22c <_vfiprintf_r+0x15c>
 800e228:	2301      	movs	r3, #1
 800e22a:	425b      	negs	r3, r3
 800e22c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e22e:	4d32      	ldr	r5, [pc, #200]	@ (800e2f8 <_vfiprintf_r+0x228>)
 800e230:	2203      	movs	r2, #3
 800e232:	0028      	movs	r0, r5
 800e234:	7831      	ldrb	r1, [r6, #0]
 800e236:	f7fd fc85 	bl	800bb44 <memchr>
 800e23a:	2800      	cmp	r0, #0
 800e23c:	d006      	beq.n	800e24c <_vfiprintf_r+0x17c>
 800e23e:	2340      	movs	r3, #64	@ 0x40
 800e240:	1b40      	subs	r0, r0, r5
 800e242:	4083      	lsls	r3, r0
 800e244:	6822      	ldr	r2, [r4, #0]
 800e246:	3601      	adds	r6, #1
 800e248:	4313      	orrs	r3, r2
 800e24a:	6023      	str	r3, [r4, #0]
 800e24c:	7831      	ldrb	r1, [r6, #0]
 800e24e:	2206      	movs	r2, #6
 800e250:	482a      	ldr	r0, [pc, #168]	@ (800e2fc <_vfiprintf_r+0x22c>)
 800e252:	1c75      	adds	r5, r6, #1
 800e254:	7621      	strb	r1, [r4, #24]
 800e256:	f7fd fc75 	bl	800bb44 <memchr>
 800e25a:	2800      	cmp	r0, #0
 800e25c:	d040      	beq.n	800e2e0 <_vfiprintf_r+0x210>
 800e25e:	4b28      	ldr	r3, [pc, #160]	@ (800e300 <_vfiprintf_r+0x230>)
 800e260:	2b00      	cmp	r3, #0
 800e262:	d122      	bne.n	800e2aa <_vfiprintf_r+0x1da>
 800e264:	2207      	movs	r2, #7
 800e266:	9b07      	ldr	r3, [sp, #28]
 800e268:	3307      	adds	r3, #7
 800e26a:	4393      	bics	r3, r2
 800e26c:	3308      	adds	r3, #8
 800e26e:	9307      	str	r3, [sp, #28]
 800e270:	6963      	ldr	r3, [r4, #20]
 800e272:	9a04      	ldr	r2, [sp, #16]
 800e274:	189b      	adds	r3, r3, r2
 800e276:	6163      	str	r3, [r4, #20]
 800e278:	e762      	b.n	800e140 <_vfiprintf_r+0x70>
 800e27a:	4343      	muls	r3, r0
 800e27c:	002e      	movs	r6, r5
 800e27e:	2101      	movs	r1, #1
 800e280:	189b      	adds	r3, r3, r2
 800e282:	e7a4      	b.n	800e1ce <_vfiprintf_r+0xfe>
 800e284:	2300      	movs	r3, #0
 800e286:	200a      	movs	r0, #10
 800e288:	0019      	movs	r1, r3
 800e28a:	3601      	adds	r6, #1
 800e28c:	6063      	str	r3, [r4, #4]
 800e28e:	7832      	ldrb	r2, [r6, #0]
 800e290:	1c75      	adds	r5, r6, #1
 800e292:	3a30      	subs	r2, #48	@ 0x30
 800e294:	2a09      	cmp	r2, #9
 800e296:	d903      	bls.n	800e2a0 <_vfiprintf_r+0x1d0>
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d0c8      	beq.n	800e22e <_vfiprintf_r+0x15e>
 800e29c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e29e:	e7c6      	b.n	800e22e <_vfiprintf_r+0x15e>
 800e2a0:	4341      	muls	r1, r0
 800e2a2:	002e      	movs	r6, r5
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	1889      	adds	r1, r1, r2
 800e2a8:	e7f1      	b.n	800e28e <_vfiprintf_r+0x1be>
 800e2aa:	aa07      	add	r2, sp, #28
 800e2ac:	9200      	str	r2, [sp, #0]
 800e2ae:	0021      	movs	r1, r4
 800e2b0:	003a      	movs	r2, r7
 800e2b2:	4b14      	ldr	r3, [pc, #80]	@ (800e304 <_vfiprintf_r+0x234>)
 800e2b4:	9803      	ldr	r0, [sp, #12]
 800e2b6:	f7fc fe1d 	bl	800aef4 <_printf_float>
 800e2ba:	9004      	str	r0, [sp, #16]
 800e2bc:	9b04      	ldr	r3, [sp, #16]
 800e2be:	3301      	adds	r3, #1
 800e2c0:	d1d6      	bne.n	800e270 <_vfiprintf_r+0x1a0>
 800e2c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e2c4:	07db      	lsls	r3, r3, #31
 800e2c6:	d405      	bmi.n	800e2d4 <_vfiprintf_r+0x204>
 800e2c8:	89bb      	ldrh	r3, [r7, #12]
 800e2ca:	059b      	lsls	r3, r3, #22
 800e2cc:	d402      	bmi.n	800e2d4 <_vfiprintf_r+0x204>
 800e2ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e2d0:	f7fd fc20 	bl	800bb14 <__retarget_lock_release_recursive>
 800e2d4:	89bb      	ldrh	r3, [r7, #12]
 800e2d6:	065b      	lsls	r3, r3, #25
 800e2d8:	d500      	bpl.n	800e2dc <_vfiprintf_r+0x20c>
 800e2da:	e71e      	b.n	800e11a <_vfiprintf_r+0x4a>
 800e2dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e2de:	e71e      	b.n	800e11e <_vfiprintf_r+0x4e>
 800e2e0:	aa07      	add	r2, sp, #28
 800e2e2:	9200      	str	r2, [sp, #0]
 800e2e4:	0021      	movs	r1, r4
 800e2e6:	003a      	movs	r2, r7
 800e2e8:	4b06      	ldr	r3, [pc, #24]	@ (800e304 <_vfiprintf_r+0x234>)
 800e2ea:	9803      	ldr	r0, [sp, #12]
 800e2ec:	f7fd f8b0 	bl	800b450 <_printf_i>
 800e2f0:	e7e3      	b.n	800e2ba <_vfiprintf_r+0x1ea>
 800e2f2:	46c0      	nop			@ (mov r8, r8)
 800e2f4:	0800ef91 	.word	0x0800ef91
 800e2f8:	0800ef97 	.word	0x0800ef97
 800e2fc:	0800ef9b 	.word	0x0800ef9b
 800e300:	0800aef5 	.word	0x0800aef5
 800e304:	0800e0ab 	.word	0x0800e0ab

0800e308 <__ascii_mbtowc>:
 800e308:	b082      	sub	sp, #8
 800e30a:	2900      	cmp	r1, #0
 800e30c:	d100      	bne.n	800e310 <__ascii_mbtowc+0x8>
 800e30e:	a901      	add	r1, sp, #4
 800e310:	1e10      	subs	r0, r2, #0
 800e312:	d006      	beq.n	800e322 <__ascii_mbtowc+0x1a>
 800e314:	2b00      	cmp	r3, #0
 800e316:	d006      	beq.n	800e326 <__ascii_mbtowc+0x1e>
 800e318:	7813      	ldrb	r3, [r2, #0]
 800e31a:	600b      	str	r3, [r1, #0]
 800e31c:	7810      	ldrb	r0, [r2, #0]
 800e31e:	1e43      	subs	r3, r0, #1
 800e320:	4198      	sbcs	r0, r3
 800e322:	b002      	add	sp, #8
 800e324:	4770      	bx	lr
 800e326:	2002      	movs	r0, #2
 800e328:	4240      	negs	r0, r0
 800e32a:	e7fa      	b.n	800e322 <__ascii_mbtowc+0x1a>

0800e32c <_malloc_usable_size_r>:
 800e32c:	1f0b      	subs	r3, r1, #4
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	1f18      	subs	r0, r3, #4
 800e332:	2b00      	cmp	r3, #0
 800e334:	da01      	bge.n	800e33a <_malloc_usable_size_r+0xe>
 800e336:	580b      	ldr	r3, [r1, r0]
 800e338:	18c0      	adds	r0, r0, r3
 800e33a:	4770      	bx	lr

0800e33c <__swbuf_r>:
 800e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e33e:	0006      	movs	r6, r0
 800e340:	000d      	movs	r5, r1
 800e342:	0014      	movs	r4, r2
 800e344:	2800      	cmp	r0, #0
 800e346:	d004      	beq.n	800e352 <__swbuf_r+0x16>
 800e348:	6a03      	ldr	r3, [r0, #32]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d101      	bne.n	800e352 <__swbuf_r+0x16>
 800e34e:	f7fd fac9 	bl	800b8e4 <__sinit>
 800e352:	69a3      	ldr	r3, [r4, #24]
 800e354:	60a3      	str	r3, [r4, #8]
 800e356:	89a3      	ldrh	r3, [r4, #12]
 800e358:	071b      	lsls	r3, r3, #28
 800e35a:	d502      	bpl.n	800e362 <__swbuf_r+0x26>
 800e35c:	6923      	ldr	r3, [r4, #16]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d109      	bne.n	800e376 <__swbuf_r+0x3a>
 800e362:	0021      	movs	r1, r4
 800e364:	0030      	movs	r0, r6
 800e366:	f000 f82b 	bl	800e3c0 <__swsetup_r>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d003      	beq.n	800e376 <__swbuf_r+0x3a>
 800e36e:	2501      	movs	r5, #1
 800e370:	426d      	negs	r5, r5
 800e372:	0028      	movs	r0, r5
 800e374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e376:	6923      	ldr	r3, [r4, #16]
 800e378:	6820      	ldr	r0, [r4, #0]
 800e37a:	b2ef      	uxtb	r7, r5
 800e37c:	1ac0      	subs	r0, r0, r3
 800e37e:	6963      	ldr	r3, [r4, #20]
 800e380:	b2ed      	uxtb	r5, r5
 800e382:	4283      	cmp	r3, r0
 800e384:	dc05      	bgt.n	800e392 <__swbuf_r+0x56>
 800e386:	0021      	movs	r1, r4
 800e388:	0030      	movs	r0, r6
 800e38a:	f7ff f8b7 	bl	800d4fc <_fflush_r>
 800e38e:	2800      	cmp	r0, #0
 800e390:	d1ed      	bne.n	800e36e <__swbuf_r+0x32>
 800e392:	68a3      	ldr	r3, [r4, #8]
 800e394:	3001      	adds	r0, #1
 800e396:	3b01      	subs	r3, #1
 800e398:	60a3      	str	r3, [r4, #8]
 800e39a:	6823      	ldr	r3, [r4, #0]
 800e39c:	1c5a      	adds	r2, r3, #1
 800e39e:	6022      	str	r2, [r4, #0]
 800e3a0:	701f      	strb	r7, [r3, #0]
 800e3a2:	6963      	ldr	r3, [r4, #20]
 800e3a4:	4283      	cmp	r3, r0
 800e3a6:	d004      	beq.n	800e3b2 <__swbuf_r+0x76>
 800e3a8:	89a3      	ldrh	r3, [r4, #12]
 800e3aa:	07db      	lsls	r3, r3, #31
 800e3ac:	d5e1      	bpl.n	800e372 <__swbuf_r+0x36>
 800e3ae:	2d0a      	cmp	r5, #10
 800e3b0:	d1df      	bne.n	800e372 <__swbuf_r+0x36>
 800e3b2:	0021      	movs	r1, r4
 800e3b4:	0030      	movs	r0, r6
 800e3b6:	f7ff f8a1 	bl	800d4fc <_fflush_r>
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	d0d9      	beq.n	800e372 <__swbuf_r+0x36>
 800e3be:	e7d6      	b.n	800e36e <__swbuf_r+0x32>

0800e3c0 <__swsetup_r>:
 800e3c0:	4b2d      	ldr	r3, [pc, #180]	@ (800e478 <__swsetup_r+0xb8>)
 800e3c2:	b570      	push	{r4, r5, r6, lr}
 800e3c4:	0005      	movs	r5, r0
 800e3c6:	6818      	ldr	r0, [r3, #0]
 800e3c8:	000c      	movs	r4, r1
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d004      	beq.n	800e3d8 <__swsetup_r+0x18>
 800e3ce:	6a03      	ldr	r3, [r0, #32]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d101      	bne.n	800e3d8 <__swsetup_r+0x18>
 800e3d4:	f7fd fa86 	bl	800b8e4 <__sinit>
 800e3d8:	220c      	movs	r2, #12
 800e3da:	5ea3      	ldrsh	r3, [r4, r2]
 800e3dc:	071a      	lsls	r2, r3, #28
 800e3de:	d423      	bmi.n	800e428 <__swsetup_r+0x68>
 800e3e0:	06da      	lsls	r2, r3, #27
 800e3e2:	d407      	bmi.n	800e3f4 <__swsetup_r+0x34>
 800e3e4:	2209      	movs	r2, #9
 800e3e6:	602a      	str	r2, [r5, #0]
 800e3e8:	2240      	movs	r2, #64	@ 0x40
 800e3ea:	2001      	movs	r0, #1
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	81a3      	strh	r3, [r4, #12]
 800e3f0:	4240      	negs	r0, r0
 800e3f2:	e03a      	b.n	800e46a <__swsetup_r+0xaa>
 800e3f4:	075b      	lsls	r3, r3, #29
 800e3f6:	d513      	bpl.n	800e420 <__swsetup_r+0x60>
 800e3f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e3fa:	2900      	cmp	r1, #0
 800e3fc:	d008      	beq.n	800e410 <__swsetup_r+0x50>
 800e3fe:	0023      	movs	r3, r4
 800e400:	3344      	adds	r3, #68	@ 0x44
 800e402:	4299      	cmp	r1, r3
 800e404:	d002      	beq.n	800e40c <__swsetup_r+0x4c>
 800e406:	0028      	movs	r0, r5
 800e408:	f7fe fa44 	bl	800c894 <_free_r>
 800e40c:	2300      	movs	r3, #0
 800e40e:	6363      	str	r3, [r4, #52]	@ 0x34
 800e410:	2224      	movs	r2, #36	@ 0x24
 800e412:	89a3      	ldrh	r3, [r4, #12]
 800e414:	4393      	bics	r3, r2
 800e416:	81a3      	strh	r3, [r4, #12]
 800e418:	2300      	movs	r3, #0
 800e41a:	6063      	str	r3, [r4, #4]
 800e41c:	6923      	ldr	r3, [r4, #16]
 800e41e:	6023      	str	r3, [r4, #0]
 800e420:	2308      	movs	r3, #8
 800e422:	89a2      	ldrh	r2, [r4, #12]
 800e424:	4313      	orrs	r3, r2
 800e426:	81a3      	strh	r3, [r4, #12]
 800e428:	6923      	ldr	r3, [r4, #16]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d10b      	bne.n	800e446 <__swsetup_r+0x86>
 800e42e:	21a0      	movs	r1, #160	@ 0xa0
 800e430:	2280      	movs	r2, #128	@ 0x80
 800e432:	89a3      	ldrh	r3, [r4, #12]
 800e434:	0089      	lsls	r1, r1, #2
 800e436:	0092      	lsls	r2, r2, #2
 800e438:	400b      	ands	r3, r1
 800e43a:	4293      	cmp	r3, r2
 800e43c:	d003      	beq.n	800e446 <__swsetup_r+0x86>
 800e43e:	0021      	movs	r1, r4
 800e440:	0028      	movs	r0, r5
 800e442:	f000 f853 	bl	800e4ec <__smakebuf_r>
 800e446:	220c      	movs	r2, #12
 800e448:	5ea3      	ldrsh	r3, [r4, r2]
 800e44a:	2101      	movs	r1, #1
 800e44c:	001a      	movs	r2, r3
 800e44e:	400a      	ands	r2, r1
 800e450:	420b      	tst	r3, r1
 800e452:	d00b      	beq.n	800e46c <__swsetup_r+0xac>
 800e454:	2200      	movs	r2, #0
 800e456:	60a2      	str	r2, [r4, #8]
 800e458:	6962      	ldr	r2, [r4, #20]
 800e45a:	4252      	negs	r2, r2
 800e45c:	61a2      	str	r2, [r4, #24]
 800e45e:	2000      	movs	r0, #0
 800e460:	6922      	ldr	r2, [r4, #16]
 800e462:	4282      	cmp	r2, r0
 800e464:	d101      	bne.n	800e46a <__swsetup_r+0xaa>
 800e466:	061a      	lsls	r2, r3, #24
 800e468:	d4be      	bmi.n	800e3e8 <__swsetup_r+0x28>
 800e46a:	bd70      	pop	{r4, r5, r6, pc}
 800e46c:	0799      	lsls	r1, r3, #30
 800e46e:	d400      	bmi.n	800e472 <__swsetup_r+0xb2>
 800e470:	6962      	ldr	r2, [r4, #20]
 800e472:	60a2      	str	r2, [r4, #8]
 800e474:	e7f3      	b.n	800e45e <__swsetup_r+0x9e>
 800e476:	46c0      	nop			@ (mov r8, r8)
 800e478:	20000018 	.word	0x20000018

0800e47c <__ascii_wctomb>:
 800e47c:	0003      	movs	r3, r0
 800e47e:	1e08      	subs	r0, r1, #0
 800e480:	d005      	beq.n	800e48e <__ascii_wctomb+0x12>
 800e482:	2aff      	cmp	r2, #255	@ 0xff
 800e484:	d904      	bls.n	800e490 <__ascii_wctomb+0x14>
 800e486:	228a      	movs	r2, #138	@ 0x8a
 800e488:	2001      	movs	r0, #1
 800e48a:	601a      	str	r2, [r3, #0]
 800e48c:	4240      	negs	r0, r0
 800e48e:	4770      	bx	lr
 800e490:	2001      	movs	r0, #1
 800e492:	700a      	strb	r2, [r1, #0]
 800e494:	e7fb      	b.n	800e48e <__ascii_wctomb+0x12>
	...

0800e498 <__swhatbuf_r>:
 800e498:	b570      	push	{r4, r5, r6, lr}
 800e49a:	000e      	movs	r6, r1
 800e49c:	001d      	movs	r5, r3
 800e49e:	230e      	movs	r3, #14
 800e4a0:	5ec9      	ldrsh	r1, [r1, r3]
 800e4a2:	0014      	movs	r4, r2
 800e4a4:	b096      	sub	sp, #88	@ 0x58
 800e4a6:	2900      	cmp	r1, #0
 800e4a8:	da0c      	bge.n	800e4c4 <__swhatbuf_r+0x2c>
 800e4aa:	89b2      	ldrh	r2, [r6, #12]
 800e4ac:	2380      	movs	r3, #128	@ 0x80
 800e4ae:	0011      	movs	r1, r2
 800e4b0:	4019      	ands	r1, r3
 800e4b2:	421a      	tst	r2, r3
 800e4b4:	d114      	bne.n	800e4e0 <__swhatbuf_r+0x48>
 800e4b6:	2380      	movs	r3, #128	@ 0x80
 800e4b8:	00db      	lsls	r3, r3, #3
 800e4ba:	2000      	movs	r0, #0
 800e4bc:	6029      	str	r1, [r5, #0]
 800e4be:	6023      	str	r3, [r4, #0]
 800e4c0:	b016      	add	sp, #88	@ 0x58
 800e4c2:	bd70      	pop	{r4, r5, r6, pc}
 800e4c4:	466a      	mov	r2, sp
 800e4c6:	f000 f8ad 	bl	800e624 <_fstat_r>
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	dbed      	blt.n	800e4aa <__swhatbuf_r+0x12>
 800e4ce:	23f0      	movs	r3, #240	@ 0xf0
 800e4d0:	9901      	ldr	r1, [sp, #4]
 800e4d2:	021b      	lsls	r3, r3, #8
 800e4d4:	4019      	ands	r1, r3
 800e4d6:	4b04      	ldr	r3, [pc, #16]	@ (800e4e8 <__swhatbuf_r+0x50>)
 800e4d8:	18c9      	adds	r1, r1, r3
 800e4da:	424b      	negs	r3, r1
 800e4dc:	4159      	adcs	r1, r3
 800e4de:	e7ea      	b.n	800e4b6 <__swhatbuf_r+0x1e>
 800e4e0:	2100      	movs	r1, #0
 800e4e2:	2340      	movs	r3, #64	@ 0x40
 800e4e4:	e7e9      	b.n	800e4ba <__swhatbuf_r+0x22>
 800e4e6:	46c0      	nop			@ (mov r8, r8)
 800e4e8:	ffffe000 	.word	0xffffe000

0800e4ec <__smakebuf_r>:
 800e4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4ee:	2602      	movs	r6, #2
 800e4f0:	898b      	ldrh	r3, [r1, #12]
 800e4f2:	0005      	movs	r5, r0
 800e4f4:	000c      	movs	r4, r1
 800e4f6:	b085      	sub	sp, #20
 800e4f8:	4233      	tst	r3, r6
 800e4fa:	d007      	beq.n	800e50c <__smakebuf_r+0x20>
 800e4fc:	0023      	movs	r3, r4
 800e4fe:	3347      	adds	r3, #71	@ 0x47
 800e500:	6023      	str	r3, [r4, #0]
 800e502:	6123      	str	r3, [r4, #16]
 800e504:	2301      	movs	r3, #1
 800e506:	6163      	str	r3, [r4, #20]
 800e508:	b005      	add	sp, #20
 800e50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e50c:	ab03      	add	r3, sp, #12
 800e50e:	aa02      	add	r2, sp, #8
 800e510:	f7ff ffc2 	bl	800e498 <__swhatbuf_r>
 800e514:	9f02      	ldr	r7, [sp, #8]
 800e516:	9001      	str	r0, [sp, #4]
 800e518:	0039      	movs	r1, r7
 800e51a:	0028      	movs	r0, r5
 800e51c:	f7fe fd4e 	bl	800cfbc <_malloc_r>
 800e520:	2800      	cmp	r0, #0
 800e522:	d108      	bne.n	800e536 <__smakebuf_r+0x4a>
 800e524:	220c      	movs	r2, #12
 800e526:	5ea3      	ldrsh	r3, [r4, r2]
 800e528:	059a      	lsls	r2, r3, #22
 800e52a:	d4ed      	bmi.n	800e508 <__smakebuf_r+0x1c>
 800e52c:	2203      	movs	r2, #3
 800e52e:	4393      	bics	r3, r2
 800e530:	431e      	orrs	r6, r3
 800e532:	81a6      	strh	r6, [r4, #12]
 800e534:	e7e2      	b.n	800e4fc <__smakebuf_r+0x10>
 800e536:	2380      	movs	r3, #128	@ 0x80
 800e538:	89a2      	ldrh	r2, [r4, #12]
 800e53a:	6020      	str	r0, [r4, #0]
 800e53c:	4313      	orrs	r3, r2
 800e53e:	81a3      	strh	r3, [r4, #12]
 800e540:	9b03      	ldr	r3, [sp, #12]
 800e542:	6120      	str	r0, [r4, #16]
 800e544:	6167      	str	r7, [r4, #20]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00c      	beq.n	800e564 <__smakebuf_r+0x78>
 800e54a:	0028      	movs	r0, r5
 800e54c:	230e      	movs	r3, #14
 800e54e:	5ee1      	ldrsh	r1, [r4, r3]
 800e550:	f000 f840 	bl	800e5d4 <_isatty_r>
 800e554:	2800      	cmp	r0, #0
 800e556:	d005      	beq.n	800e564 <__smakebuf_r+0x78>
 800e558:	2303      	movs	r3, #3
 800e55a:	89a2      	ldrh	r2, [r4, #12]
 800e55c:	439a      	bics	r2, r3
 800e55e:	3b02      	subs	r3, #2
 800e560:	4313      	orrs	r3, r2
 800e562:	81a3      	strh	r3, [r4, #12]
 800e564:	89a3      	ldrh	r3, [r4, #12]
 800e566:	9a01      	ldr	r2, [sp, #4]
 800e568:	4313      	orrs	r3, r2
 800e56a:	81a3      	strh	r3, [r4, #12]
 800e56c:	e7cc      	b.n	800e508 <__smakebuf_r+0x1c>

0800e56e <_raise_r>:
 800e56e:	b570      	push	{r4, r5, r6, lr}
 800e570:	0004      	movs	r4, r0
 800e572:	000d      	movs	r5, r1
 800e574:	291f      	cmp	r1, #31
 800e576:	d904      	bls.n	800e582 <_raise_r+0x14>
 800e578:	2316      	movs	r3, #22
 800e57a:	6003      	str	r3, [r0, #0]
 800e57c:	2001      	movs	r0, #1
 800e57e:	4240      	negs	r0, r0
 800e580:	bd70      	pop	{r4, r5, r6, pc}
 800e582:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800e584:	2b00      	cmp	r3, #0
 800e586:	d004      	beq.n	800e592 <_raise_r+0x24>
 800e588:	008a      	lsls	r2, r1, #2
 800e58a:	189b      	adds	r3, r3, r2
 800e58c:	681a      	ldr	r2, [r3, #0]
 800e58e:	2a00      	cmp	r2, #0
 800e590:	d108      	bne.n	800e5a4 <_raise_r+0x36>
 800e592:	0020      	movs	r0, r4
 800e594:	f000 f842 	bl	800e61c <_getpid_r>
 800e598:	002a      	movs	r2, r5
 800e59a:	0001      	movs	r1, r0
 800e59c:	0020      	movs	r0, r4
 800e59e:	f000 f82b 	bl	800e5f8 <_kill_r>
 800e5a2:	e7ed      	b.n	800e580 <_raise_r+0x12>
 800e5a4:	2a01      	cmp	r2, #1
 800e5a6:	d009      	beq.n	800e5bc <_raise_r+0x4e>
 800e5a8:	1c51      	adds	r1, r2, #1
 800e5aa:	d103      	bne.n	800e5b4 <_raise_r+0x46>
 800e5ac:	2316      	movs	r3, #22
 800e5ae:	6003      	str	r3, [r0, #0]
 800e5b0:	2001      	movs	r0, #1
 800e5b2:	e7e5      	b.n	800e580 <_raise_r+0x12>
 800e5b4:	2100      	movs	r1, #0
 800e5b6:	0028      	movs	r0, r5
 800e5b8:	6019      	str	r1, [r3, #0]
 800e5ba:	4790      	blx	r2
 800e5bc:	2000      	movs	r0, #0
 800e5be:	e7df      	b.n	800e580 <_raise_r+0x12>

0800e5c0 <raise>:
 800e5c0:	b510      	push	{r4, lr}
 800e5c2:	4b03      	ldr	r3, [pc, #12]	@ (800e5d0 <raise+0x10>)
 800e5c4:	0001      	movs	r1, r0
 800e5c6:	6818      	ldr	r0, [r3, #0]
 800e5c8:	f7ff ffd1 	bl	800e56e <_raise_r>
 800e5cc:	bd10      	pop	{r4, pc}
 800e5ce:	46c0      	nop			@ (mov r8, r8)
 800e5d0:	20000018 	.word	0x20000018

0800e5d4 <_isatty_r>:
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	b570      	push	{r4, r5, r6, lr}
 800e5d8:	4d06      	ldr	r5, [pc, #24]	@ (800e5f4 <_isatty_r+0x20>)
 800e5da:	0004      	movs	r4, r0
 800e5dc:	0008      	movs	r0, r1
 800e5de:	602b      	str	r3, [r5, #0]
 800e5e0:	f7f8 ff0b 	bl	80073fa <_isatty>
 800e5e4:	1c43      	adds	r3, r0, #1
 800e5e6:	d103      	bne.n	800e5f0 <_isatty_r+0x1c>
 800e5e8:	682b      	ldr	r3, [r5, #0]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d000      	beq.n	800e5f0 <_isatty_r+0x1c>
 800e5ee:	6023      	str	r3, [r4, #0]
 800e5f0:	bd70      	pop	{r4, r5, r6, pc}
 800e5f2:	46c0      	nop			@ (mov r8, r8)
 800e5f4:	20000930 	.word	0x20000930

0800e5f8 <_kill_r>:
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	b570      	push	{r4, r5, r6, lr}
 800e5fc:	4d06      	ldr	r5, [pc, #24]	@ (800e618 <_kill_r+0x20>)
 800e5fe:	0004      	movs	r4, r0
 800e600:	0008      	movs	r0, r1
 800e602:	0011      	movs	r1, r2
 800e604:	602b      	str	r3, [r5, #0]
 800e606:	f7f8 fe8a 	bl	800731e <_kill>
 800e60a:	1c43      	adds	r3, r0, #1
 800e60c:	d103      	bne.n	800e616 <_kill_r+0x1e>
 800e60e:	682b      	ldr	r3, [r5, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d000      	beq.n	800e616 <_kill_r+0x1e>
 800e614:	6023      	str	r3, [r4, #0]
 800e616:	bd70      	pop	{r4, r5, r6, pc}
 800e618:	20000930 	.word	0x20000930

0800e61c <_getpid_r>:
 800e61c:	b510      	push	{r4, lr}
 800e61e:	f7f8 fe78 	bl	8007312 <_getpid>
 800e622:	bd10      	pop	{r4, pc}

0800e624 <_fstat_r>:
 800e624:	2300      	movs	r3, #0
 800e626:	b570      	push	{r4, r5, r6, lr}
 800e628:	4d06      	ldr	r5, [pc, #24]	@ (800e644 <_fstat_r+0x20>)
 800e62a:	0004      	movs	r4, r0
 800e62c:	0008      	movs	r0, r1
 800e62e:	0011      	movs	r1, r2
 800e630:	602b      	str	r3, [r5, #0]
 800e632:	f7f8 fed4 	bl	80073de <_fstat>
 800e636:	1c43      	adds	r3, r0, #1
 800e638:	d103      	bne.n	800e642 <_fstat_r+0x1e>
 800e63a:	682b      	ldr	r3, [r5, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d000      	beq.n	800e642 <_fstat_r+0x1e>
 800e640:	6023      	str	r3, [r4, #0]
 800e642:	bd70      	pop	{r4, r5, r6, pc}
 800e644:	20000930 	.word	0x20000930

0800e648 <_init>:
 800e648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e64a:	46c0      	nop			@ (mov r8, r8)
 800e64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e64e:	bc08      	pop	{r3}
 800e650:	469e      	mov	lr, r3
 800e652:	4770      	bx	lr

0800e654 <_fini>:
 800e654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e656:	46c0      	nop			@ (mov r8, r8)
 800e658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e65a:	bc08      	pop	{r3}
 800e65c:	469e      	mov	lr, r3
 800e65e:	4770      	bx	lr
