
hsn-253-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6a8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  0800c768  0800c768  0000d768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce6c  0800ce6c  0000e1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ce6c  0800ce6c  0000de6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce74  0800ce74  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce74  0800ce74  0000de74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce78  0800ce78  0000de78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ce7c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  200001d4  0800d050  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004e4  0800d050  0000e4e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010163  00000000  00000000  0000e1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002446  00000000  00000000  0001e35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  000207a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a44  00000000  00000000  000214d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001973b  00000000  00000000  00021f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001142a  00000000  00000000  0003b64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cfb9  00000000  00000000  0004ca79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9a32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042a8  00000000  00000000  000e9a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000edd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d4 	.word	0x200001d4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800c74c 	.word	0x0800c74c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001d8 	.word	0x200001d8
 8000100:	0800c74c 	.word	0x0800c74c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			@ (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	@ 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	@ 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	@ 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			@ (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f002 f937 	bl	80026ac <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f002 f87b 	bl	8002544 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f002 f929 	bl	80026ac <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f002 f91f 	bl	80026ac <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f002 f8a5 	bl	80025cc <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f002 f89b 	bl	80025cc <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_cfrcmple>:
 80004a4:	4684      	mov	ip, r0
 80004a6:	0008      	movs	r0, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	e7ff      	b.n	80004ac <__aeabi_cfcmpeq>

080004ac <__aeabi_cfcmpeq>:
 80004ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004ae:	f000 fcaf 	bl	8000e10 <__lesf2>
 80004b2:	2800      	cmp	r0, #0
 80004b4:	d401      	bmi.n	80004ba <__aeabi_cfcmpeq+0xe>
 80004b6:	2100      	movs	r1, #0
 80004b8:	42c8      	cmn	r0, r1
 80004ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004bc <__aeabi_fcmpeq>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fc37 	bl	8000d30 <__eqsf2>
 80004c2:	4240      	negs	r0, r0
 80004c4:	3001      	adds	r0, #1
 80004c6:	bd10      	pop	{r4, pc}

080004c8 <__aeabi_fcmplt>:
 80004c8:	b510      	push	{r4, lr}
 80004ca:	f000 fca1 	bl	8000e10 <__lesf2>
 80004ce:	2800      	cmp	r0, #0
 80004d0:	db01      	blt.n	80004d6 <__aeabi_fcmplt+0xe>
 80004d2:	2000      	movs	r0, #0
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	2001      	movs	r0, #1
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)

080004dc <__aeabi_fcmple>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fc97 	bl	8000e10 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	dd01      	ble.n	80004ea <__aeabi_fcmple+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmpgt>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fc45 	bl	8000d80 <__gesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dc01      	bgt.n	80004fe <__aeabi_fcmpgt+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpge>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc3b 	bl	8000d80 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	da01      	bge.n	8000512 <__aeabi_fcmpge+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_uldivmod>:
 8000518:	2b00      	cmp	r3, #0
 800051a:	d111      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 800051c:	2a00      	cmp	r2, #0
 800051e:	d10f      	bne.n	8000540 <__aeabi_uldivmod+0x28>
 8000520:	2900      	cmp	r1, #0
 8000522:	d100      	bne.n	8000526 <__aeabi_uldivmod+0xe>
 8000524:	2800      	cmp	r0, #0
 8000526:	d002      	beq.n	800052e <__aeabi_uldivmod+0x16>
 8000528:	2100      	movs	r1, #0
 800052a:	43c9      	mvns	r1, r1
 800052c:	0008      	movs	r0, r1
 800052e:	b407      	push	{r0, r1, r2}
 8000530:	4802      	ldr	r0, [pc, #8]	@ (800053c <__aeabi_uldivmod+0x24>)
 8000532:	a102      	add	r1, pc, #8	@ (adr r1, 800053c <__aeabi_uldivmod+0x24>)
 8000534:	1840      	adds	r0, r0, r1
 8000536:	9002      	str	r0, [sp, #8]
 8000538:	bd03      	pop	{r0, r1, pc}
 800053a:	46c0      	nop			@ (mov r8, r8)
 800053c:	fffffee9 	.word	0xfffffee9
 8000540:	b403      	push	{r0, r1}
 8000542:	4668      	mov	r0, sp
 8000544:	b501      	push	{r0, lr}
 8000546:	9802      	ldr	r0, [sp, #8]
 8000548:	f000 f81e 	bl	8000588 <__udivmoddi4>
 800054c:	9b01      	ldr	r3, [sp, #4]
 800054e:	469e      	mov	lr, r3
 8000550:	b002      	add	sp, #8
 8000552:	bc0c      	pop	{r2, r3}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_f2uiz>:
 8000558:	219e      	movs	r1, #158	@ 0x9e
 800055a:	b510      	push	{r4, lr}
 800055c:	05c9      	lsls	r1, r1, #23
 800055e:	1c04      	adds	r4, r0, #0
 8000560:	f7ff ffd0 	bl	8000504 <__aeabi_fcmpge>
 8000564:	2800      	cmp	r0, #0
 8000566:	d103      	bne.n	8000570 <__aeabi_f2uiz+0x18>
 8000568:	1c20      	adds	r0, r4, #0
 800056a:	f001 f857 	bl	800161c <__aeabi_f2iz>
 800056e:	bd10      	pop	{r4, pc}
 8000570:	219e      	movs	r1, #158	@ 0x9e
 8000572:	1c20      	adds	r0, r4, #0
 8000574:	05c9      	lsls	r1, r1, #23
 8000576:	f000 fded 	bl	8001154 <__aeabi_fsub>
 800057a:	f001 f84f 	bl	800161c <__aeabi_f2iz>
 800057e:	2380      	movs	r3, #128	@ 0x80
 8000580:	061b      	lsls	r3, r3, #24
 8000582:	469c      	mov	ip, r3
 8000584:	4460      	add	r0, ip
 8000586:	e7f2      	b.n	800056e <__aeabi_f2uiz+0x16>

08000588 <__udivmoddi4>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	4657      	mov	r7, sl
 800058c:	464e      	mov	r6, r9
 800058e:	4645      	mov	r5, r8
 8000590:	46de      	mov	lr, fp
 8000592:	b5e0      	push	{r5, r6, r7, lr}
 8000594:	0004      	movs	r4, r0
 8000596:	000d      	movs	r5, r1
 8000598:	4692      	mov	sl, r2
 800059a:	4699      	mov	r9, r3
 800059c:	b083      	sub	sp, #12
 800059e:	428b      	cmp	r3, r1
 80005a0:	d830      	bhi.n	8000604 <__udivmoddi4+0x7c>
 80005a2:	d02d      	beq.n	8000600 <__udivmoddi4+0x78>
 80005a4:	4649      	mov	r1, r9
 80005a6:	4650      	mov	r0, sl
 80005a8:	f003 f8f4 	bl	8003794 <__clzdi2>
 80005ac:	0029      	movs	r1, r5
 80005ae:	0006      	movs	r6, r0
 80005b0:	0020      	movs	r0, r4
 80005b2:	f003 f8ef 	bl	8003794 <__clzdi2>
 80005b6:	1a33      	subs	r3, r6, r0
 80005b8:	4698      	mov	r8, r3
 80005ba:	3b20      	subs	r3, #32
 80005bc:	d434      	bmi.n	8000628 <__udivmoddi4+0xa0>
 80005be:	469b      	mov	fp, r3
 80005c0:	4653      	mov	r3, sl
 80005c2:	465a      	mov	r2, fp
 80005c4:	4093      	lsls	r3, r2
 80005c6:	4642      	mov	r2, r8
 80005c8:	001f      	movs	r7, r3
 80005ca:	4653      	mov	r3, sl
 80005cc:	4093      	lsls	r3, r2
 80005ce:	001e      	movs	r6, r3
 80005d0:	42af      	cmp	r7, r5
 80005d2:	d83b      	bhi.n	800064c <__udivmoddi4+0xc4>
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d100      	bne.n	80005da <__udivmoddi4+0x52>
 80005d8:	e079      	b.n	80006ce <__udivmoddi4+0x146>
 80005da:	465b      	mov	r3, fp
 80005dc:	1ba4      	subs	r4, r4, r6
 80005de:	41bd      	sbcs	r5, r7
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	da00      	bge.n	80005e6 <__udivmoddi4+0x5e>
 80005e4:	e076      	b.n	80006d4 <__udivmoddi4+0x14c>
 80005e6:	2200      	movs	r2, #0
 80005e8:	2300      	movs	r3, #0
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	465a      	mov	r2, fp
 80005f2:	4093      	lsls	r3, r2
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	4642      	mov	r2, r8
 80005fa:	4093      	lsls	r3, r2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	e029      	b.n	8000654 <__udivmoddi4+0xcc>
 8000600:	4282      	cmp	r2, r0
 8000602:	d9cf      	bls.n	80005a4 <__udivmoddi4+0x1c>
 8000604:	2200      	movs	r2, #0
 8000606:	2300      	movs	r3, #0
 8000608:	9200      	str	r2, [sp, #0]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <__udivmoddi4+0x8e>
 8000612:	601c      	str	r4, [r3, #0]
 8000614:	605d      	str	r5, [r3, #4]
 8000616:	9800      	ldr	r0, [sp, #0]
 8000618:	9901      	ldr	r1, [sp, #4]
 800061a:	b003      	add	sp, #12
 800061c:	bcf0      	pop	{r4, r5, r6, r7}
 800061e:	46bb      	mov	fp, r7
 8000620:	46b2      	mov	sl, r6
 8000622:	46a9      	mov	r9, r5
 8000624:	46a0      	mov	r8, r4
 8000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000628:	4642      	mov	r2, r8
 800062a:	469b      	mov	fp, r3
 800062c:	2320      	movs	r3, #32
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	4652      	mov	r2, sl
 8000632:	40da      	lsrs	r2, r3
 8000634:	4641      	mov	r1, r8
 8000636:	0013      	movs	r3, r2
 8000638:	464a      	mov	r2, r9
 800063a:	408a      	lsls	r2, r1
 800063c:	0017      	movs	r7, r2
 800063e:	4642      	mov	r2, r8
 8000640:	431f      	orrs	r7, r3
 8000642:	4653      	mov	r3, sl
 8000644:	4093      	lsls	r3, r2
 8000646:	001e      	movs	r6, r3
 8000648:	42af      	cmp	r7, r5
 800064a:	d9c3      	bls.n	80005d4 <__udivmoddi4+0x4c>
 800064c:	2200      	movs	r2, #0
 800064e:	2300      	movs	r3, #0
 8000650:	9200      	str	r2, [sp, #0]
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	4643      	mov	r3, r8
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0d8      	beq.n	800060c <__udivmoddi4+0x84>
 800065a:	07fb      	lsls	r3, r7, #31
 800065c:	0872      	lsrs	r2, r6, #1
 800065e:	431a      	orrs	r2, r3
 8000660:	4646      	mov	r6, r8
 8000662:	087b      	lsrs	r3, r7, #1
 8000664:	e00e      	b.n	8000684 <__udivmoddi4+0xfc>
 8000666:	42ab      	cmp	r3, r5
 8000668:	d101      	bne.n	800066e <__udivmoddi4+0xe6>
 800066a:	42a2      	cmp	r2, r4
 800066c:	d80c      	bhi.n	8000688 <__udivmoddi4+0x100>
 800066e:	1aa4      	subs	r4, r4, r2
 8000670:	419d      	sbcs	r5, r3
 8000672:	2001      	movs	r0, #1
 8000674:	1924      	adds	r4, r4, r4
 8000676:	416d      	adcs	r5, r5
 8000678:	2100      	movs	r1, #0
 800067a:	3e01      	subs	r6, #1
 800067c:	1824      	adds	r4, r4, r0
 800067e:	414d      	adcs	r5, r1
 8000680:	2e00      	cmp	r6, #0
 8000682:	d006      	beq.n	8000692 <__udivmoddi4+0x10a>
 8000684:	42ab      	cmp	r3, r5
 8000686:	d9ee      	bls.n	8000666 <__udivmoddi4+0xde>
 8000688:	3e01      	subs	r6, #1
 800068a:	1924      	adds	r4, r4, r4
 800068c:	416d      	adcs	r5, r5
 800068e:	2e00      	cmp	r6, #0
 8000690:	d1f8      	bne.n	8000684 <__udivmoddi4+0xfc>
 8000692:	9800      	ldr	r0, [sp, #0]
 8000694:	9901      	ldr	r1, [sp, #4]
 8000696:	465b      	mov	r3, fp
 8000698:	1900      	adds	r0, r0, r4
 800069a:	4169      	adcs	r1, r5
 800069c:	2b00      	cmp	r3, #0
 800069e:	db24      	blt.n	80006ea <__udivmoddi4+0x162>
 80006a0:	002b      	movs	r3, r5
 80006a2:	465a      	mov	r2, fp
 80006a4:	4644      	mov	r4, r8
 80006a6:	40d3      	lsrs	r3, r2
 80006a8:	002a      	movs	r2, r5
 80006aa:	40e2      	lsrs	r2, r4
 80006ac:	001c      	movs	r4, r3
 80006ae:	465b      	mov	r3, fp
 80006b0:	0015      	movs	r5, r2
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	db2a      	blt.n	800070c <__udivmoddi4+0x184>
 80006b6:	0026      	movs	r6, r4
 80006b8:	409e      	lsls	r6, r3
 80006ba:	0033      	movs	r3, r6
 80006bc:	0026      	movs	r6, r4
 80006be:	4647      	mov	r7, r8
 80006c0:	40be      	lsls	r6, r7
 80006c2:	0032      	movs	r2, r6
 80006c4:	1a80      	subs	r0, r0, r2
 80006c6:	4199      	sbcs	r1, r3
 80006c8:	9000      	str	r0, [sp, #0]
 80006ca:	9101      	str	r1, [sp, #4]
 80006cc:	e79e      	b.n	800060c <__udivmoddi4+0x84>
 80006ce:	42a3      	cmp	r3, r4
 80006d0:	d8bc      	bhi.n	800064c <__udivmoddi4+0xc4>
 80006d2:	e782      	b.n	80005da <__udivmoddi4+0x52>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2320      	movs	r3, #32
 80006d8:	2100      	movs	r1, #0
 80006da:	1a9b      	subs	r3, r3, r2
 80006dc:	2200      	movs	r2, #0
 80006de:	9100      	str	r1, [sp, #0]
 80006e0:	9201      	str	r2, [sp, #4]
 80006e2:	2201      	movs	r2, #1
 80006e4:	40da      	lsrs	r2, r3
 80006e6:	9201      	str	r2, [sp, #4]
 80006e8:	e785      	b.n	80005f6 <__udivmoddi4+0x6e>
 80006ea:	4642      	mov	r2, r8
 80006ec:	2320      	movs	r3, #32
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	002a      	movs	r2, r5
 80006f2:	4646      	mov	r6, r8
 80006f4:	409a      	lsls	r2, r3
 80006f6:	0023      	movs	r3, r4
 80006f8:	40f3      	lsrs	r3, r6
 80006fa:	4644      	mov	r4, r8
 80006fc:	4313      	orrs	r3, r2
 80006fe:	002a      	movs	r2, r5
 8000700:	40e2      	lsrs	r2, r4
 8000702:	001c      	movs	r4, r3
 8000704:	465b      	mov	r3, fp
 8000706:	0015      	movs	r5, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	dad4      	bge.n	80006b6 <__udivmoddi4+0x12e>
 800070c:	4642      	mov	r2, r8
 800070e:	002f      	movs	r7, r5
 8000710:	2320      	movs	r3, #32
 8000712:	0026      	movs	r6, r4
 8000714:	4097      	lsls	r7, r2
 8000716:	1a9b      	subs	r3, r3, r2
 8000718:	40de      	lsrs	r6, r3
 800071a:	003b      	movs	r3, r7
 800071c:	4333      	orrs	r3, r6
 800071e:	e7cd      	b.n	80006bc <__udivmoddi4+0x134>

08000720 <__aeabi_fadd>:
 8000720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000722:	024b      	lsls	r3, r1, #9
 8000724:	0a5a      	lsrs	r2, r3, #9
 8000726:	4694      	mov	ip, r2
 8000728:	004a      	lsls	r2, r1, #1
 800072a:	0fc9      	lsrs	r1, r1, #31
 800072c:	46ce      	mov	lr, r9
 800072e:	4647      	mov	r7, r8
 8000730:	4689      	mov	r9, r1
 8000732:	0045      	lsls	r5, r0, #1
 8000734:	0246      	lsls	r6, r0, #9
 8000736:	0e2d      	lsrs	r5, r5, #24
 8000738:	0e12      	lsrs	r2, r2, #24
 800073a:	b580      	push	{r7, lr}
 800073c:	0999      	lsrs	r1, r3, #6
 800073e:	0a77      	lsrs	r7, r6, #9
 8000740:	0fc4      	lsrs	r4, r0, #31
 8000742:	09b6      	lsrs	r6, r6, #6
 8000744:	1aab      	subs	r3, r5, r2
 8000746:	454c      	cmp	r4, r9
 8000748:	d020      	beq.n	800078c <__aeabi_fadd+0x6c>
 800074a:	2b00      	cmp	r3, #0
 800074c:	dd0c      	ble.n	8000768 <__aeabi_fadd+0x48>
 800074e:	2a00      	cmp	r2, #0
 8000750:	d134      	bne.n	80007bc <__aeabi_fadd+0x9c>
 8000752:	2900      	cmp	r1, #0
 8000754:	d02a      	beq.n	80007ac <__aeabi_fadd+0x8c>
 8000756:	1e5a      	subs	r2, r3, #1
 8000758:	2b01      	cmp	r3, #1
 800075a:	d100      	bne.n	800075e <__aeabi_fadd+0x3e>
 800075c:	e08f      	b.n	800087e <__aeabi_fadd+0x15e>
 800075e:	2bff      	cmp	r3, #255	@ 0xff
 8000760:	d100      	bne.n	8000764 <__aeabi_fadd+0x44>
 8000762:	e0cd      	b.n	8000900 <__aeabi_fadd+0x1e0>
 8000764:	0013      	movs	r3, r2
 8000766:	e02f      	b.n	80007c8 <__aeabi_fadd+0xa8>
 8000768:	2b00      	cmp	r3, #0
 800076a:	d060      	beq.n	800082e <__aeabi_fadd+0x10e>
 800076c:	1b53      	subs	r3, r2, r5
 800076e:	2d00      	cmp	r5, #0
 8000770:	d000      	beq.n	8000774 <__aeabi_fadd+0x54>
 8000772:	e0ee      	b.n	8000952 <__aeabi_fadd+0x232>
 8000774:	2e00      	cmp	r6, #0
 8000776:	d100      	bne.n	800077a <__aeabi_fadd+0x5a>
 8000778:	e13e      	b.n	80009f8 <__aeabi_fadd+0x2d8>
 800077a:	1e5c      	subs	r4, r3, #1
 800077c:	2b01      	cmp	r3, #1
 800077e:	d100      	bne.n	8000782 <__aeabi_fadd+0x62>
 8000780:	e16b      	b.n	8000a5a <__aeabi_fadd+0x33a>
 8000782:	2bff      	cmp	r3, #255	@ 0xff
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x68>
 8000786:	e0b9      	b.n	80008fc <__aeabi_fadd+0x1dc>
 8000788:	0023      	movs	r3, r4
 800078a:	e0e7      	b.n	800095c <__aeabi_fadd+0x23c>
 800078c:	2b00      	cmp	r3, #0
 800078e:	dc00      	bgt.n	8000792 <__aeabi_fadd+0x72>
 8000790:	e0a4      	b.n	80008dc <__aeabi_fadd+0x1bc>
 8000792:	2a00      	cmp	r2, #0
 8000794:	d069      	beq.n	800086a <__aeabi_fadd+0x14a>
 8000796:	2dff      	cmp	r5, #255	@ 0xff
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x7c>
 800079a:	e0b1      	b.n	8000900 <__aeabi_fadd+0x1e0>
 800079c:	2280      	movs	r2, #128	@ 0x80
 800079e:	04d2      	lsls	r2, r2, #19
 80007a0:	4311      	orrs	r1, r2
 80007a2:	2b1b      	cmp	r3, #27
 80007a4:	dc00      	bgt.n	80007a8 <__aeabi_fadd+0x88>
 80007a6:	e0e9      	b.n	800097c <__aeabi_fadd+0x25c>
 80007a8:	002b      	movs	r3, r5
 80007aa:	3605      	adds	r6, #5
 80007ac:	08f7      	lsrs	r7, r6, #3
 80007ae:	2bff      	cmp	r3, #255	@ 0xff
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x94>
 80007b2:	e0a5      	b.n	8000900 <__aeabi_fadd+0x1e0>
 80007b4:	027a      	lsls	r2, r7, #9
 80007b6:	0a52      	lsrs	r2, r2, #9
 80007b8:	b2d8      	uxtb	r0, r3
 80007ba:	e030      	b.n	800081e <__aeabi_fadd+0xfe>
 80007bc:	2dff      	cmp	r5, #255	@ 0xff
 80007be:	d100      	bne.n	80007c2 <__aeabi_fadd+0xa2>
 80007c0:	e09e      	b.n	8000900 <__aeabi_fadd+0x1e0>
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	04d2      	lsls	r2, r2, #19
 80007c6:	4311      	orrs	r1, r2
 80007c8:	2001      	movs	r0, #1
 80007ca:	2b1b      	cmp	r3, #27
 80007cc:	dc08      	bgt.n	80007e0 <__aeabi_fadd+0xc0>
 80007ce:	0008      	movs	r0, r1
 80007d0:	2220      	movs	r2, #32
 80007d2:	40d8      	lsrs	r0, r3
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	4099      	lsls	r1, r3
 80007d8:	000b      	movs	r3, r1
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	4193      	sbcs	r3, r2
 80007de:	4318      	orrs	r0, r3
 80007e0:	1a36      	subs	r6, r6, r0
 80007e2:	0173      	lsls	r3, r6, #5
 80007e4:	d400      	bmi.n	80007e8 <__aeabi_fadd+0xc8>
 80007e6:	e071      	b.n	80008cc <__aeabi_fadd+0x1ac>
 80007e8:	01b6      	lsls	r6, r6, #6
 80007ea:	09b7      	lsrs	r7, r6, #6
 80007ec:	0038      	movs	r0, r7
 80007ee:	f002 ffb3 	bl	8003758 <__clzsi2>
 80007f2:	003b      	movs	r3, r7
 80007f4:	3805      	subs	r0, #5
 80007f6:	4083      	lsls	r3, r0
 80007f8:	4285      	cmp	r5, r0
 80007fa:	dd4d      	ble.n	8000898 <__aeabi_fadd+0x178>
 80007fc:	4eb4      	ldr	r6, [pc, #720]	@ (8000ad0 <__aeabi_fadd+0x3b0>)
 80007fe:	1a2d      	subs	r5, r5, r0
 8000800:	401e      	ands	r6, r3
 8000802:	075a      	lsls	r2, r3, #29
 8000804:	d068      	beq.n	80008d8 <__aeabi_fadd+0x1b8>
 8000806:	220f      	movs	r2, #15
 8000808:	4013      	ands	r3, r2
 800080a:	2b04      	cmp	r3, #4
 800080c:	d064      	beq.n	80008d8 <__aeabi_fadd+0x1b8>
 800080e:	3604      	adds	r6, #4
 8000810:	0173      	lsls	r3, r6, #5
 8000812:	d561      	bpl.n	80008d8 <__aeabi_fadd+0x1b8>
 8000814:	1c68      	adds	r0, r5, #1
 8000816:	2dfe      	cmp	r5, #254	@ 0xfe
 8000818:	d154      	bne.n	80008c4 <__aeabi_fadd+0x1a4>
 800081a:	20ff      	movs	r0, #255	@ 0xff
 800081c:	2200      	movs	r2, #0
 800081e:	05c0      	lsls	r0, r0, #23
 8000820:	4310      	orrs	r0, r2
 8000822:	07e4      	lsls	r4, r4, #31
 8000824:	4320      	orrs	r0, r4
 8000826:	bcc0      	pop	{r6, r7}
 8000828:	46b9      	mov	r9, r7
 800082a:	46b0      	mov	r8, r6
 800082c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800082e:	22fe      	movs	r2, #254	@ 0xfe
 8000830:	4690      	mov	r8, r2
 8000832:	1c68      	adds	r0, r5, #1
 8000834:	0002      	movs	r2, r0
 8000836:	4640      	mov	r0, r8
 8000838:	4210      	tst	r0, r2
 800083a:	d16b      	bne.n	8000914 <__aeabi_fadd+0x1f4>
 800083c:	2d00      	cmp	r5, #0
 800083e:	d000      	beq.n	8000842 <__aeabi_fadd+0x122>
 8000840:	e0dd      	b.n	80009fe <__aeabi_fadd+0x2de>
 8000842:	2e00      	cmp	r6, #0
 8000844:	d100      	bne.n	8000848 <__aeabi_fadd+0x128>
 8000846:	e102      	b.n	8000a4e <__aeabi_fadd+0x32e>
 8000848:	2900      	cmp	r1, #0
 800084a:	d0b3      	beq.n	80007b4 <__aeabi_fadd+0x94>
 800084c:	2280      	movs	r2, #128	@ 0x80
 800084e:	1a77      	subs	r7, r6, r1
 8000850:	04d2      	lsls	r2, r2, #19
 8000852:	4217      	tst	r7, r2
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x138>
 8000856:	e136      	b.n	8000ac6 <__aeabi_fadd+0x3a6>
 8000858:	464c      	mov	r4, r9
 800085a:	1b8e      	subs	r6, r1, r6
 800085c:	d061      	beq.n	8000922 <__aeabi_fadd+0x202>
 800085e:	2001      	movs	r0, #1
 8000860:	4216      	tst	r6, r2
 8000862:	d130      	bne.n	80008c6 <__aeabi_fadd+0x1a6>
 8000864:	2300      	movs	r3, #0
 8000866:	08f7      	lsrs	r7, r6, #3
 8000868:	e7a4      	b.n	80007b4 <__aeabi_fadd+0x94>
 800086a:	2900      	cmp	r1, #0
 800086c:	d09e      	beq.n	80007ac <__aeabi_fadd+0x8c>
 800086e:	1e5a      	subs	r2, r3, #1
 8000870:	2b01      	cmp	r3, #1
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x156>
 8000874:	e0ca      	b.n	8000a0c <__aeabi_fadd+0x2ec>
 8000876:	2bff      	cmp	r3, #255	@ 0xff
 8000878:	d042      	beq.n	8000900 <__aeabi_fadd+0x1e0>
 800087a:	0013      	movs	r3, r2
 800087c:	e791      	b.n	80007a2 <__aeabi_fadd+0x82>
 800087e:	1a71      	subs	r1, r6, r1
 8000880:	014b      	lsls	r3, r1, #5
 8000882:	d400      	bmi.n	8000886 <__aeabi_fadd+0x166>
 8000884:	e0d1      	b.n	8000a2a <__aeabi_fadd+0x30a>
 8000886:	018f      	lsls	r7, r1, #6
 8000888:	09bf      	lsrs	r7, r7, #6
 800088a:	0038      	movs	r0, r7
 800088c:	f002 ff64 	bl	8003758 <__clzsi2>
 8000890:	003b      	movs	r3, r7
 8000892:	3805      	subs	r0, #5
 8000894:	4083      	lsls	r3, r0
 8000896:	2501      	movs	r5, #1
 8000898:	2220      	movs	r2, #32
 800089a:	1b40      	subs	r0, r0, r5
 800089c:	3001      	adds	r0, #1
 800089e:	1a12      	subs	r2, r2, r0
 80008a0:	001e      	movs	r6, r3
 80008a2:	4093      	lsls	r3, r2
 80008a4:	40c6      	lsrs	r6, r0
 80008a6:	1e5a      	subs	r2, r3, #1
 80008a8:	4193      	sbcs	r3, r2
 80008aa:	431e      	orrs	r6, r3
 80008ac:	d039      	beq.n	8000922 <__aeabi_fadd+0x202>
 80008ae:	0773      	lsls	r3, r6, #29
 80008b0:	d100      	bne.n	80008b4 <__aeabi_fadd+0x194>
 80008b2:	e11b      	b.n	8000aec <__aeabi_fadd+0x3cc>
 80008b4:	230f      	movs	r3, #15
 80008b6:	2500      	movs	r5, #0
 80008b8:	4033      	ands	r3, r6
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d1a7      	bne.n	800080e <__aeabi_fadd+0xee>
 80008be:	2001      	movs	r0, #1
 80008c0:	0172      	lsls	r2, r6, #5
 80008c2:	d57c      	bpl.n	80009be <__aeabi_fadd+0x29e>
 80008c4:	b2c0      	uxtb	r0, r0
 80008c6:	01b2      	lsls	r2, r6, #6
 80008c8:	0a52      	lsrs	r2, r2, #9
 80008ca:	e7a8      	b.n	800081e <__aeabi_fadd+0xfe>
 80008cc:	0773      	lsls	r3, r6, #29
 80008ce:	d003      	beq.n	80008d8 <__aeabi_fadd+0x1b8>
 80008d0:	230f      	movs	r3, #15
 80008d2:	4033      	ands	r3, r6
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d19a      	bne.n	800080e <__aeabi_fadd+0xee>
 80008d8:	002b      	movs	r3, r5
 80008da:	e767      	b.n	80007ac <__aeabi_fadd+0x8c>
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d023      	beq.n	8000928 <__aeabi_fadd+0x208>
 80008e0:	1b53      	subs	r3, r2, r5
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d17b      	bne.n	80009de <__aeabi_fadd+0x2be>
 80008e6:	2e00      	cmp	r6, #0
 80008e8:	d100      	bne.n	80008ec <__aeabi_fadd+0x1cc>
 80008ea:	e086      	b.n	80009fa <__aeabi_fadd+0x2da>
 80008ec:	1e5d      	subs	r5, r3, #1
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fadd+0x1d4>
 80008f2:	e08b      	b.n	8000a0c <__aeabi_fadd+0x2ec>
 80008f4:	2bff      	cmp	r3, #255	@ 0xff
 80008f6:	d002      	beq.n	80008fe <__aeabi_fadd+0x1de>
 80008f8:	002b      	movs	r3, r5
 80008fa:	e075      	b.n	80009e8 <__aeabi_fadd+0x2c8>
 80008fc:	464c      	mov	r4, r9
 80008fe:	4667      	mov	r7, ip
 8000900:	2f00      	cmp	r7, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x1e6>
 8000904:	e789      	b.n	800081a <__aeabi_fadd+0xfa>
 8000906:	2280      	movs	r2, #128	@ 0x80
 8000908:	03d2      	lsls	r2, r2, #15
 800090a:	433a      	orrs	r2, r7
 800090c:	0252      	lsls	r2, r2, #9
 800090e:	20ff      	movs	r0, #255	@ 0xff
 8000910:	0a52      	lsrs	r2, r2, #9
 8000912:	e784      	b.n	800081e <__aeabi_fadd+0xfe>
 8000914:	1a77      	subs	r7, r6, r1
 8000916:	017b      	lsls	r3, r7, #5
 8000918:	d46b      	bmi.n	80009f2 <__aeabi_fadd+0x2d2>
 800091a:	2f00      	cmp	r7, #0
 800091c:	d000      	beq.n	8000920 <__aeabi_fadd+0x200>
 800091e:	e765      	b.n	80007ec <__aeabi_fadd+0xcc>
 8000920:	2400      	movs	r4, #0
 8000922:	2000      	movs	r0, #0
 8000924:	2200      	movs	r2, #0
 8000926:	e77a      	b.n	800081e <__aeabi_fadd+0xfe>
 8000928:	22fe      	movs	r2, #254	@ 0xfe
 800092a:	1c6b      	adds	r3, r5, #1
 800092c:	421a      	tst	r2, r3
 800092e:	d149      	bne.n	80009c4 <__aeabi_fadd+0x2a4>
 8000930:	2d00      	cmp	r5, #0
 8000932:	d000      	beq.n	8000936 <__aeabi_fadd+0x216>
 8000934:	e09f      	b.n	8000a76 <__aeabi_fadd+0x356>
 8000936:	2e00      	cmp	r6, #0
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x21c>
 800093a:	e0ba      	b.n	8000ab2 <__aeabi_fadd+0x392>
 800093c:	2900      	cmp	r1, #0
 800093e:	d100      	bne.n	8000942 <__aeabi_fadd+0x222>
 8000940:	e0cf      	b.n	8000ae2 <__aeabi_fadd+0x3c2>
 8000942:	1872      	adds	r2, r6, r1
 8000944:	0153      	lsls	r3, r2, #5
 8000946:	d400      	bmi.n	800094a <__aeabi_fadd+0x22a>
 8000948:	e0cd      	b.n	8000ae6 <__aeabi_fadd+0x3c6>
 800094a:	0192      	lsls	r2, r2, #6
 800094c:	2001      	movs	r0, #1
 800094e:	0a52      	lsrs	r2, r2, #9
 8000950:	e765      	b.n	800081e <__aeabi_fadd+0xfe>
 8000952:	2aff      	cmp	r2, #255	@ 0xff
 8000954:	d0d2      	beq.n	80008fc <__aeabi_fadd+0x1dc>
 8000956:	2080      	movs	r0, #128	@ 0x80
 8000958:	04c0      	lsls	r0, r0, #19
 800095a:	4306      	orrs	r6, r0
 800095c:	2001      	movs	r0, #1
 800095e:	2b1b      	cmp	r3, #27
 8000960:	dc08      	bgt.n	8000974 <__aeabi_fadd+0x254>
 8000962:	0030      	movs	r0, r6
 8000964:	2420      	movs	r4, #32
 8000966:	40d8      	lsrs	r0, r3
 8000968:	1ae3      	subs	r3, r4, r3
 800096a:	409e      	lsls	r6, r3
 800096c:	0033      	movs	r3, r6
 800096e:	1e5c      	subs	r4, r3, #1
 8000970:	41a3      	sbcs	r3, r4
 8000972:	4318      	orrs	r0, r3
 8000974:	464c      	mov	r4, r9
 8000976:	0015      	movs	r5, r2
 8000978:	1a0e      	subs	r6, r1, r0
 800097a:	e732      	b.n	80007e2 <__aeabi_fadd+0xc2>
 800097c:	0008      	movs	r0, r1
 800097e:	2220      	movs	r2, #32
 8000980:	40d8      	lsrs	r0, r3
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	4099      	lsls	r1, r3
 8000986:	000b      	movs	r3, r1
 8000988:	1e5a      	subs	r2, r3, #1
 800098a:	4193      	sbcs	r3, r2
 800098c:	4303      	orrs	r3, r0
 800098e:	18f6      	adds	r6, r6, r3
 8000990:	0173      	lsls	r3, r6, #5
 8000992:	d59b      	bpl.n	80008cc <__aeabi_fadd+0x1ac>
 8000994:	3501      	adds	r5, #1
 8000996:	2dff      	cmp	r5, #255	@ 0xff
 8000998:	d100      	bne.n	800099c <__aeabi_fadd+0x27c>
 800099a:	e73e      	b.n	800081a <__aeabi_fadd+0xfa>
 800099c:	2301      	movs	r3, #1
 800099e:	494d      	ldr	r1, [pc, #308]	@ (8000ad4 <__aeabi_fadd+0x3b4>)
 80009a0:	0872      	lsrs	r2, r6, #1
 80009a2:	4033      	ands	r3, r6
 80009a4:	400a      	ands	r2, r1
 80009a6:	431a      	orrs	r2, r3
 80009a8:	0016      	movs	r6, r2
 80009aa:	0753      	lsls	r3, r2, #29
 80009ac:	d004      	beq.n	80009b8 <__aeabi_fadd+0x298>
 80009ae:	230f      	movs	r3, #15
 80009b0:	4013      	ands	r3, r2
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d000      	beq.n	80009b8 <__aeabi_fadd+0x298>
 80009b6:	e72a      	b.n	800080e <__aeabi_fadd+0xee>
 80009b8:	0173      	lsls	r3, r6, #5
 80009ba:	d500      	bpl.n	80009be <__aeabi_fadd+0x29e>
 80009bc:	e72a      	b.n	8000814 <__aeabi_fadd+0xf4>
 80009be:	002b      	movs	r3, r5
 80009c0:	08f7      	lsrs	r7, r6, #3
 80009c2:	e6f7      	b.n	80007b4 <__aeabi_fadd+0x94>
 80009c4:	2bff      	cmp	r3, #255	@ 0xff
 80009c6:	d100      	bne.n	80009ca <__aeabi_fadd+0x2aa>
 80009c8:	e727      	b.n	800081a <__aeabi_fadd+0xfa>
 80009ca:	1871      	adds	r1, r6, r1
 80009cc:	0849      	lsrs	r1, r1, #1
 80009ce:	074a      	lsls	r2, r1, #29
 80009d0:	d02f      	beq.n	8000a32 <__aeabi_fadd+0x312>
 80009d2:	220f      	movs	r2, #15
 80009d4:	400a      	ands	r2, r1
 80009d6:	2a04      	cmp	r2, #4
 80009d8:	d02b      	beq.n	8000a32 <__aeabi_fadd+0x312>
 80009da:	1d0e      	adds	r6, r1, #4
 80009dc:	e6e6      	b.n	80007ac <__aeabi_fadd+0x8c>
 80009de:	2aff      	cmp	r2, #255	@ 0xff
 80009e0:	d08d      	beq.n	80008fe <__aeabi_fadd+0x1de>
 80009e2:	2080      	movs	r0, #128	@ 0x80
 80009e4:	04c0      	lsls	r0, r0, #19
 80009e6:	4306      	orrs	r6, r0
 80009e8:	2b1b      	cmp	r3, #27
 80009ea:	dd24      	ble.n	8000a36 <__aeabi_fadd+0x316>
 80009ec:	0013      	movs	r3, r2
 80009ee:	1d4e      	adds	r6, r1, #5
 80009f0:	e6dc      	b.n	80007ac <__aeabi_fadd+0x8c>
 80009f2:	464c      	mov	r4, r9
 80009f4:	1b8f      	subs	r7, r1, r6
 80009f6:	e6f9      	b.n	80007ec <__aeabi_fadd+0xcc>
 80009f8:	464c      	mov	r4, r9
 80009fa:	000e      	movs	r6, r1
 80009fc:	e6d6      	b.n	80007ac <__aeabi_fadd+0x8c>
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d149      	bne.n	8000a96 <__aeabi_fadd+0x376>
 8000a02:	2900      	cmp	r1, #0
 8000a04:	d068      	beq.n	8000ad8 <__aeabi_fadd+0x3b8>
 8000a06:	4667      	mov	r7, ip
 8000a08:	464c      	mov	r4, r9
 8000a0a:	e77c      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a0c:	1870      	adds	r0, r6, r1
 8000a0e:	0143      	lsls	r3, r0, #5
 8000a10:	d574      	bpl.n	8000afc <__aeabi_fadd+0x3dc>
 8000a12:	4930      	ldr	r1, [pc, #192]	@ (8000ad4 <__aeabi_fadd+0x3b4>)
 8000a14:	0840      	lsrs	r0, r0, #1
 8000a16:	4001      	ands	r1, r0
 8000a18:	0743      	lsls	r3, r0, #29
 8000a1a:	d009      	beq.n	8000a30 <__aeabi_fadd+0x310>
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	4003      	ands	r3, r0
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d005      	beq.n	8000a30 <__aeabi_fadd+0x310>
 8000a24:	2302      	movs	r3, #2
 8000a26:	1d0e      	adds	r6, r1, #4
 8000a28:	e6c0      	b.n	80007ac <__aeabi_fadd+0x8c>
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	08cf      	lsrs	r7, r1, #3
 8000a2e:	e6c1      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000a30:	2302      	movs	r3, #2
 8000a32:	08cf      	lsrs	r7, r1, #3
 8000a34:	e6be      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000a36:	2520      	movs	r5, #32
 8000a38:	0030      	movs	r0, r6
 8000a3a:	40d8      	lsrs	r0, r3
 8000a3c:	1aeb      	subs	r3, r5, r3
 8000a3e:	409e      	lsls	r6, r3
 8000a40:	0033      	movs	r3, r6
 8000a42:	1e5d      	subs	r5, r3, #1
 8000a44:	41ab      	sbcs	r3, r5
 8000a46:	4303      	orrs	r3, r0
 8000a48:	0015      	movs	r5, r2
 8000a4a:	185e      	adds	r6, r3, r1
 8000a4c:	e7a0      	b.n	8000990 <__aeabi_fadd+0x270>
 8000a4e:	2900      	cmp	r1, #0
 8000a50:	d100      	bne.n	8000a54 <__aeabi_fadd+0x334>
 8000a52:	e765      	b.n	8000920 <__aeabi_fadd+0x200>
 8000a54:	464c      	mov	r4, r9
 8000a56:	4667      	mov	r7, ip
 8000a58:	e6ac      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000a5a:	1b8f      	subs	r7, r1, r6
 8000a5c:	017b      	lsls	r3, r7, #5
 8000a5e:	d52e      	bpl.n	8000abe <__aeabi_fadd+0x39e>
 8000a60:	01bf      	lsls	r7, r7, #6
 8000a62:	09bf      	lsrs	r7, r7, #6
 8000a64:	0038      	movs	r0, r7
 8000a66:	f002 fe77 	bl	8003758 <__clzsi2>
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	3805      	subs	r0, #5
 8000a6e:	4083      	lsls	r3, r0
 8000a70:	464c      	mov	r4, r9
 8000a72:	3501      	adds	r5, #1
 8000a74:	e710      	b.n	8000898 <__aeabi_fadd+0x178>
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d100      	bne.n	8000a7c <__aeabi_fadd+0x35c>
 8000a7a:	e740      	b.n	80008fe <__aeabi_fadd+0x1de>
 8000a7c:	2900      	cmp	r1, #0
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fadd+0x362>
 8000a80:	e741      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a82:	2380      	movs	r3, #128	@ 0x80
 8000a84:	03db      	lsls	r3, r3, #15
 8000a86:	429f      	cmp	r7, r3
 8000a88:	d200      	bcs.n	8000a8c <__aeabi_fadd+0x36c>
 8000a8a:	e73c      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a8c:	459c      	cmp	ip, r3
 8000a8e:	d300      	bcc.n	8000a92 <__aeabi_fadd+0x372>
 8000a90:	e739      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a92:	4667      	mov	r7, ip
 8000a94:	e737      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a96:	2900      	cmp	r1, #0
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fadd+0x37c>
 8000a9a:	e734      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000a9c:	2380      	movs	r3, #128	@ 0x80
 8000a9e:	03db      	lsls	r3, r3, #15
 8000aa0:	429f      	cmp	r7, r3
 8000aa2:	d200      	bcs.n	8000aa6 <__aeabi_fadd+0x386>
 8000aa4:	e72f      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000aa6:	459c      	cmp	ip, r3
 8000aa8:	d300      	bcc.n	8000aac <__aeabi_fadd+0x38c>
 8000aaa:	e72c      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000aac:	464c      	mov	r4, r9
 8000aae:	4667      	mov	r7, ip
 8000ab0:	e729      	b.n	8000906 <__aeabi_fadd+0x1e6>
 8000ab2:	2900      	cmp	r1, #0
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_fadd+0x398>
 8000ab6:	e734      	b.n	8000922 <__aeabi_fadd+0x202>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	08cf      	lsrs	r7, r1, #3
 8000abc:	e67a      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000abe:	464c      	mov	r4, r9
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	08ff      	lsrs	r7, r7, #3
 8000ac4:	e676      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000ac6:	2f00      	cmp	r7, #0
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fadd+0x3ac>
 8000aca:	e729      	b.n	8000920 <__aeabi_fadd+0x200>
 8000acc:	08ff      	lsrs	r7, r7, #3
 8000ace:	e671      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000ad0:	fbffffff 	.word	0xfbffffff
 8000ad4:	7dffffff 	.word	0x7dffffff
 8000ad8:	2280      	movs	r2, #128	@ 0x80
 8000ada:	2400      	movs	r4, #0
 8000adc:	20ff      	movs	r0, #255	@ 0xff
 8000ade:	03d2      	lsls	r2, r2, #15
 8000ae0:	e69d      	b.n	800081e <__aeabi_fadd+0xfe>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e666      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	08d7      	lsrs	r7, r2, #3
 8000aea:	e663      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000aec:	2001      	movs	r0, #1
 8000aee:	0172      	lsls	r2, r6, #5
 8000af0:	d500      	bpl.n	8000af4 <__aeabi_fadd+0x3d4>
 8000af2:	e6e7      	b.n	80008c4 <__aeabi_fadd+0x1a4>
 8000af4:	0031      	movs	r1, r6
 8000af6:	2300      	movs	r3, #0
 8000af8:	08cf      	lsrs	r7, r1, #3
 8000afa:	e65b      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000afc:	2301      	movs	r3, #1
 8000afe:	08c7      	lsrs	r7, r0, #3
 8000b00:	e658      	b.n	80007b4 <__aeabi_fadd+0x94>
 8000b02:	46c0      	nop			@ (mov r8, r8)

08000b04 <__aeabi_fdiv>:
 8000b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b06:	4646      	mov	r6, r8
 8000b08:	464f      	mov	r7, r9
 8000b0a:	46d6      	mov	lr, sl
 8000b0c:	0245      	lsls	r5, r0, #9
 8000b0e:	b5c0      	push	{r6, r7, lr}
 8000b10:	0fc3      	lsrs	r3, r0, #31
 8000b12:	0047      	lsls	r7, r0, #1
 8000b14:	4698      	mov	r8, r3
 8000b16:	1c0e      	adds	r6, r1, #0
 8000b18:	0a6d      	lsrs	r5, r5, #9
 8000b1a:	0e3f      	lsrs	r7, r7, #24
 8000b1c:	d05b      	beq.n	8000bd6 <__aeabi_fdiv+0xd2>
 8000b1e:	2fff      	cmp	r7, #255	@ 0xff
 8000b20:	d021      	beq.n	8000b66 <__aeabi_fdiv+0x62>
 8000b22:	2380      	movs	r3, #128	@ 0x80
 8000b24:	00ed      	lsls	r5, r5, #3
 8000b26:	04db      	lsls	r3, r3, #19
 8000b28:	431d      	orrs	r5, r3
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	4699      	mov	r9, r3
 8000b2e:	469a      	mov	sl, r3
 8000b30:	3f7f      	subs	r7, #127	@ 0x7f
 8000b32:	0274      	lsls	r4, r6, #9
 8000b34:	0073      	lsls	r3, r6, #1
 8000b36:	0a64      	lsrs	r4, r4, #9
 8000b38:	0e1b      	lsrs	r3, r3, #24
 8000b3a:	0ff6      	lsrs	r6, r6, #31
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d020      	beq.n	8000b82 <__aeabi_fdiv+0x7e>
 8000b40:	2bff      	cmp	r3, #255	@ 0xff
 8000b42:	d043      	beq.n	8000bcc <__aeabi_fdiv+0xc8>
 8000b44:	2280      	movs	r2, #128	@ 0x80
 8000b46:	2000      	movs	r0, #0
 8000b48:	00e4      	lsls	r4, r4, #3
 8000b4a:	04d2      	lsls	r2, r2, #19
 8000b4c:	4314      	orrs	r4, r2
 8000b4e:	3b7f      	subs	r3, #127	@ 0x7f
 8000b50:	4642      	mov	r2, r8
 8000b52:	1aff      	subs	r7, r7, r3
 8000b54:	464b      	mov	r3, r9
 8000b56:	4072      	eors	r2, r6
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d900      	bls.n	8000b5e <__aeabi_fdiv+0x5a>
 8000b5c:	e09d      	b.n	8000c9a <__aeabi_fdiv+0x196>
 8000b5e:	4971      	ldr	r1, [pc, #452]	@ (8000d24 <__aeabi_fdiv+0x220>)
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	58cb      	ldr	r3, [r1, r3]
 8000b64:	469f      	mov	pc, r3
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d15a      	bne.n	8000c20 <__aeabi_fdiv+0x11c>
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	4699      	mov	r9, r3
 8000b6e:	3b06      	subs	r3, #6
 8000b70:	0274      	lsls	r4, r6, #9
 8000b72:	469a      	mov	sl, r3
 8000b74:	0073      	lsls	r3, r6, #1
 8000b76:	27ff      	movs	r7, #255	@ 0xff
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	0e1b      	lsrs	r3, r3, #24
 8000b7c:	0ff6      	lsrs	r6, r6, #31
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1de      	bne.n	8000b40 <__aeabi_fdiv+0x3c>
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d13b      	bne.n	8000bfe <__aeabi_fdiv+0xfa>
 8000b86:	2301      	movs	r3, #1
 8000b88:	4642      	mov	r2, r8
 8000b8a:	4649      	mov	r1, r9
 8000b8c:	4072      	eors	r2, r6
 8000b8e:	4319      	orrs	r1, r3
 8000b90:	290e      	cmp	r1, #14
 8000b92:	d818      	bhi.n	8000bc6 <__aeabi_fdiv+0xc2>
 8000b94:	4864      	ldr	r0, [pc, #400]	@ (8000d28 <__aeabi_fdiv+0x224>)
 8000b96:	0089      	lsls	r1, r1, #2
 8000b98:	5841      	ldr	r1, [r0, r1]
 8000b9a:	468f      	mov	pc, r1
 8000b9c:	4653      	mov	r3, sl
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_fdiv+0xa0>
 8000ba2:	e0b8      	b.n	8000d16 <__aeabi_fdiv+0x212>
 8000ba4:	2b03      	cmp	r3, #3
 8000ba6:	d06e      	beq.n	8000c86 <__aeabi_fdiv+0x182>
 8000ba8:	4642      	mov	r2, r8
 8000baa:	002c      	movs	r4, r5
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d140      	bne.n	8000c32 <__aeabi_fdiv+0x12e>
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	2400      	movs	r4, #0
 8000bb4:	05c0      	lsls	r0, r0, #23
 8000bb6:	4320      	orrs	r0, r4
 8000bb8:	07d2      	lsls	r2, r2, #31
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	bce0      	pop	{r5, r6, r7}
 8000bbe:	46ba      	mov	sl, r7
 8000bc0:	46b1      	mov	r9, r6
 8000bc2:	46a8      	mov	r8, r5
 8000bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc6:	20ff      	movs	r0, #255	@ 0xff
 8000bc8:	2400      	movs	r4, #0
 8000bca:	e7f3      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000bcc:	2c00      	cmp	r4, #0
 8000bce:	d120      	bne.n	8000c12 <__aeabi_fdiv+0x10e>
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	3fff      	subs	r7, #255	@ 0xff
 8000bd4:	e7d8      	b.n	8000b88 <__aeabi_fdiv+0x84>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d105      	bne.n	8000be6 <__aeabi_fdiv+0xe2>
 8000bda:	2304      	movs	r3, #4
 8000bdc:	4699      	mov	r9, r3
 8000bde:	3b03      	subs	r3, #3
 8000be0:	2700      	movs	r7, #0
 8000be2:	469a      	mov	sl, r3
 8000be4:	e7a5      	b.n	8000b32 <__aeabi_fdiv+0x2e>
 8000be6:	0028      	movs	r0, r5
 8000be8:	f002 fdb6 	bl	8003758 <__clzsi2>
 8000bec:	2776      	movs	r7, #118	@ 0x76
 8000bee:	1f43      	subs	r3, r0, #5
 8000bf0:	409d      	lsls	r5, r3
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	427f      	negs	r7, r7
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	1a3f      	subs	r7, r7, r0
 8000bfc:	e799      	b.n	8000b32 <__aeabi_fdiv+0x2e>
 8000bfe:	0020      	movs	r0, r4
 8000c00:	f002 fdaa 	bl	8003758 <__clzsi2>
 8000c04:	1f43      	subs	r3, r0, #5
 8000c06:	409c      	lsls	r4, r3
 8000c08:	2376      	movs	r3, #118	@ 0x76
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	1a1b      	subs	r3, r3, r0
 8000c0e:	2000      	movs	r0, #0
 8000c10:	e79e      	b.n	8000b50 <__aeabi_fdiv+0x4c>
 8000c12:	2303      	movs	r3, #3
 8000c14:	464a      	mov	r2, r9
 8000c16:	431a      	orrs	r2, r3
 8000c18:	4691      	mov	r9, r2
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	33fc      	adds	r3, #252	@ 0xfc
 8000c1e:	e797      	b.n	8000b50 <__aeabi_fdiv+0x4c>
 8000c20:	230c      	movs	r3, #12
 8000c22:	4699      	mov	r9, r3
 8000c24:	3b09      	subs	r3, #9
 8000c26:	27ff      	movs	r7, #255	@ 0xff
 8000c28:	469a      	mov	sl, r3
 8000c2a:	e782      	b.n	8000b32 <__aeabi_fdiv+0x2e>
 8000c2c:	2803      	cmp	r0, #3
 8000c2e:	d02c      	beq.n	8000c8a <__aeabi_fdiv+0x186>
 8000c30:	0032      	movs	r2, r6
 8000c32:	0038      	movs	r0, r7
 8000c34:	307f      	adds	r0, #127	@ 0x7f
 8000c36:	2800      	cmp	r0, #0
 8000c38:	dd47      	ble.n	8000cca <__aeabi_fdiv+0x1c6>
 8000c3a:	0763      	lsls	r3, r4, #29
 8000c3c:	d004      	beq.n	8000c48 <__aeabi_fdiv+0x144>
 8000c3e:	230f      	movs	r3, #15
 8000c40:	4023      	ands	r3, r4
 8000c42:	2b04      	cmp	r3, #4
 8000c44:	d000      	beq.n	8000c48 <__aeabi_fdiv+0x144>
 8000c46:	3404      	adds	r4, #4
 8000c48:	0123      	lsls	r3, r4, #4
 8000c4a:	d503      	bpl.n	8000c54 <__aeabi_fdiv+0x150>
 8000c4c:	0038      	movs	r0, r7
 8000c4e:	4b37      	ldr	r3, [pc, #220]	@ (8000d2c <__aeabi_fdiv+0x228>)
 8000c50:	3080      	adds	r0, #128	@ 0x80
 8000c52:	401c      	ands	r4, r3
 8000c54:	28fe      	cmp	r0, #254	@ 0xfe
 8000c56:	dcb6      	bgt.n	8000bc6 <__aeabi_fdiv+0xc2>
 8000c58:	01a4      	lsls	r4, r4, #6
 8000c5a:	0a64      	lsrs	r4, r4, #9
 8000c5c:	b2c0      	uxtb	r0, r0
 8000c5e:	e7a9      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000c60:	2480      	movs	r4, #128	@ 0x80
 8000c62:	2200      	movs	r2, #0
 8000c64:	20ff      	movs	r0, #255	@ 0xff
 8000c66:	03e4      	lsls	r4, r4, #15
 8000c68:	e7a4      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000c6a:	2380      	movs	r3, #128	@ 0x80
 8000c6c:	03db      	lsls	r3, r3, #15
 8000c6e:	421d      	tst	r5, r3
 8000c70:	d001      	beq.n	8000c76 <__aeabi_fdiv+0x172>
 8000c72:	421c      	tst	r4, r3
 8000c74:	d00b      	beq.n	8000c8e <__aeabi_fdiv+0x18a>
 8000c76:	2480      	movs	r4, #128	@ 0x80
 8000c78:	03e4      	lsls	r4, r4, #15
 8000c7a:	432c      	orrs	r4, r5
 8000c7c:	0264      	lsls	r4, r4, #9
 8000c7e:	4642      	mov	r2, r8
 8000c80:	20ff      	movs	r0, #255	@ 0xff
 8000c82:	0a64      	lsrs	r4, r4, #9
 8000c84:	e796      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000c86:	4646      	mov	r6, r8
 8000c88:	002c      	movs	r4, r5
 8000c8a:	2380      	movs	r3, #128	@ 0x80
 8000c8c:	03db      	lsls	r3, r3, #15
 8000c8e:	431c      	orrs	r4, r3
 8000c90:	0264      	lsls	r4, r4, #9
 8000c92:	0032      	movs	r2, r6
 8000c94:	20ff      	movs	r0, #255	@ 0xff
 8000c96:	0a64      	lsrs	r4, r4, #9
 8000c98:	e78c      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000c9a:	016d      	lsls	r5, r5, #5
 8000c9c:	0160      	lsls	r0, r4, #5
 8000c9e:	4285      	cmp	r5, r0
 8000ca0:	d22d      	bcs.n	8000cfe <__aeabi_fdiv+0x1fa>
 8000ca2:	231b      	movs	r3, #27
 8000ca4:	2400      	movs	r4, #0
 8000ca6:	3f01      	subs	r7, #1
 8000ca8:	2601      	movs	r6, #1
 8000caa:	0029      	movs	r1, r5
 8000cac:	0064      	lsls	r4, r4, #1
 8000cae:	006d      	lsls	r5, r5, #1
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	db01      	blt.n	8000cb8 <__aeabi_fdiv+0x1b4>
 8000cb4:	4285      	cmp	r5, r0
 8000cb6:	d301      	bcc.n	8000cbc <__aeabi_fdiv+0x1b8>
 8000cb8:	1a2d      	subs	r5, r5, r0
 8000cba:	4334      	orrs	r4, r6
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f3      	bne.n	8000caa <__aeabi_fdiv+0x1a6>
 8000cc2:	1e6b      	subs	r3, r5, #1
 8000cc4:	419d      	sbcs	r5, r3
 8000cc6:	432c      	orrs	r4, r5
 8000cc8:	e7b3      	b.n	8000c32 <__aeabi_fdiv+0x12e>
 8000cca:	2301      	movs	r3, #1
 8000ccc:	1a1b      	subs	r3, r3, r0
 8000cce:	2b1b      	cmp	r3, #27
 8000cd0:	dd00      	ble.n	8000cd4 <__aeabi_fdiv+0x1d0>
 8000cd2:	e76d      	b.n	8000bb0 <__aeabi_fdiv+0xac>
 8000cd4:	0021      	movs	r1, r4
 8000cd6:	379e      	adds	r7, #158	@ 0x9e
 8000cd8:	40d9      	lsrs	r1, r3
 8000cda:	40bc      	lsls	r4, r7
 8000cdc:	000b      	movs	r3, r1
 8000cde:	1e61      	subs	r1, r4, #1
 8000ce0:	418c      	sbcs	r4, r1
 8000ce2:	4323      	orrs	r3, r4
 8000ce4:	0759      	lsls	r1, r3, #29
 8000ce6:	d004      	beq.n	8000cf2 <__aeabi_fdiv+0x1ee>
 8000ce8:	210f      	movs	r1, #15
 8000cea:	4019      	ands	r1, r3
 8000cec:	2904      	cmp	r1, #4
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_fdiv+0x1ee>
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	0159      	lsls	r1, r3, #5
 8000cf4:	d413      	bmi.n	8000d1e <__aeabi_fdiv+0x21a>
 8000cf6:	019b      	lsls	r3, r3, #6
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	0a5c      	lsrs	r4, r3, #9
 8000cfc:	e75a      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000cfe:	231a      	movs	r3, #26
 8000d00:	2401      	movs	r4, #1
 8000d02:	1a2d      	subs	r5, r5, r0
 8000d04:	e7d0      	b.n	8000ca8 <__aeabi_fdiv+0x1a4>
 8000d06:	1e98      	subs	r0, r3, #2
 8000d08:	4243      	negs	r3, r0
 8000d0a:	4158      	adcs	r0, r3
 8000d0c:	4240      	negs	r0, r0
 8000d0e:	0032      	movs	r2, r6
 8000d10:	2400      	movs	r4, #0
 8000d12:	b2c0      	uxtb	r0, r0
 8000d14:	e74e      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000d16:	4642      	mov	r2, r8
 8000d18:	20ff      	movs	r0, #255	@ 0xff
 8000d1a:	2400      	movs	r4, #0
 8000d1c:	e74a      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000d1e:	2001      	movs	r0, #1
 8000d20:	2400      	movs	r4, #0
 8000d22:	e747      	b.n	8000bb4 <__aeabi_fdiv+0xb0>
 8000d24:	0800c9b0 	.word	0x0800c9b0
 8000d28:	0800c9f0 	.word	0x0800c9f0
 8000d2c:	f7ffffff 	.word	0xf7ffffff

08000d30 <__eqsf2>:
 8000d30:	b570      	push	{r4, r5, r6, lr}
 8000d32:	0042      	lsls	r2, r0, #1
 8000d34:	024e      	lsls	r6, r1, #9
 8000d36:	004c      	lsls	r4, r1, #1
 8000d38:	0245      	lsls	r5, r0, #9
 8000d3a:	0a6d      	lsrs	r5, r5, #9
 8000d3c:	0e12      	lsrs	r2, r2, #24
 8000d3e:	0fc3      	lsrs	r3, r0, #31
 8000d40:	0a76      	lsrs	r6, r6, #9
 8000d42:	0e24      	lsrs	r4, r4, #24
 8000d44:	0fc9      	lsrs	r1, r1, #31
 8000d46:	2aff      	cmp	r2, #255	@ 0xff
 8000d48:	d010      	beq.n	8000d6c <__eqsf2+0x3c>
 8000d4a:	2cff      	cmp	r4, #255	@ 0xff
 8000d4c:	d00c      	beq.n	8000d68 <__eqsf2+0x38>
 8000d4e:	2001      	movs	r0, #1
 8000d50:	42a2      	cmp	r2, r4
 8000d52:	d10a      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d54:	42b5      	cmp	r5, r6
 8000d56:	d108      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d00f      	beq.n	8000d7c <__eqsf2+0x4c>
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	d104      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d60:	0028      	movs	r0, r5
 8000d62:	1e43      	subs	r3, r0, #1
 8000d64:	4198      	sbcs	r0, r3
 8000d66:	e000      	b.n	8000d6a <__eqsf2+0x3a>
 8000d68:	2001      	movs	r0, #1
 8000d6a:	bd70      	pop	{r4, r5, r6, pc}
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	2cff      	cmp	r4, #255	@ 0xff
 8000d70:	d1fb      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d72:	4335      	orrs	r5, r6
 8000d74:	d1f9      	bne.n	8000d6a <__eqsf2+0x3a>
 8000d76:	404b      	eors	r3, r1
 8000d78:	0018      	movs	r0, r3
 8000d7a:	e7f6      	b.n	8000d6a <__eqsf2+0x3a>
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	e7f4      	b.n	8000d6a <__eqsf2+0x3a>

08000d80 <__gesf2>:
 8000d80:	b530      	push	{r4, r5, lr}
 8000d82:	0042      	lsls	r2, r0, #1
 8000d84:	0244      	lsls	r4, r0, #9
 8000d86:	024d      	lsls	r5, r1, #9
 8000d88:	0fc3      	lsrs	r3, r0, #31
 8000d8a:	0048      	lsls	r0, r1, #1
 8000d8c:	0a64      	lsrs	r4, r4, #9
 8000d8e:	0e12      	lsrs	r2, r2, #24
 8000d90:	0a6d      	lsrs	r5, r5, #9
 8000d92:	0e00      	lsrs	r0, r0, #24
 8000d94:	0fc9      	lsrs	r1, r1, #31
 8000d96:	2aff      	cmp	r2, #255	@ 0xff
 8000d98:	d018      	beq.n	8000dcc <__gesf2+0x4c>
 8000d9a:	28ff      	cmp	r0, #255	@ 0xff
 8000d9c:	d00a      	beq.n	8000db4 <__gesf2+0x34>
 8000d9e:	2a00      	cmp	r2, #0
 8000da0:	d11e      	bne.n	8000de0 <__gesf2+0x60>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	d10a      	bne.n	8000dbc <__gesf2+0x3c>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d029      	beq.n	8000dfe <__gesf2+0x7e>
 8000daa:	2c00      	cmp	r4, #0
 8000dac:	d12d      	bne.n	8000e0a <__gesf2+0x8a>
 8000dae:	0048      	lsls	r0, r1, #1
 8000db0:	3801      	subs	r0, #1
 8000db2:	bd30      	pop	{r4, r5, pc}
 8000db4:	2d00      	cmp	r5, #0
 8000db6:	d125      	bne.n	8000e04 <__gesf2+0x84>
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	d101      	bne.n	8000dc0 <__gesf2+0x40>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d0f6      	beq.n	8000dae <__gesf2+0x2e>
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d019      	beq.n	8000df8 <__gesf2+0x78>
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	4318      	orrs	r0, r3
 8000dca:	e7f2      	b.n	8000db2 <__gesf2+0x32>
 8000dcc:	2c00      	cmp	r4, #0
 8000dce:	d119      	bne.n	8000e04 <__gesf2+0x84>
 8000dd0:	28ff      	cmp	r0, #255	@ 0xff
 8000dd2:	d1f7      	bne.n	8000dc4 <__gesf2+0x44>
 8000dd4:	2d00      	cmp	r5, #0
 8000dd6:	d115      	bne.n	8000e04 <__gesf2+0x84>
 8000dd8:	2000      	movs	r0, #0
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d1f2      	bne.n	8000dc4 <__gesf2+0x44>
 8000dde:	e7e8      	b.n	8000db2 <__gesf2+0x32>
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d0ef      	beq.n	8000dc4 <__gesf2+0x44>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1ed      	bne.n	8000dc4 <__gesf2+0x44>
 8000de8:	4282      	cmp	r2, r0
 8000dea:	dceb      	bgt.n	8000dc4 <__gesf2+0x44>
 8000dec:	db04      	blt.n	8000df8 <__gesf2+0x78>
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	d8e8      	bhi.n	8000dc4 <__gesf2+0x44>
 8000df2:	2000      	movs	r0, #0
 8000df4:	42ac      	cmp	r4, r5
 8000df6:	d2dc      	bcs.n	8000db2 <__gesf2+0x32>
 8000df8:	0058      	lsls	r0, r3, #1
 8000dfa:	3801      	subs	r0, #1
 8000dfc:	e7d9      	b.n	8000db2 <__gesf2+0x32>
 8000dfe:	2c00      	cmp	r4, #0
 8000e00:	d0d7      	beq.n	8000db2 <__gesf2+0x32>
 8000e02:	e7df      	b.n	8000dc4 <__gesf2+0x44>
 8000e04:	2002      	movs	r0, #2
 8000e06:	4240      	negs	r0, r0
 8000e08:	e7d3      	b.n	8000db2 <__gesf2+0x32>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d1da      	bne.n	8000dc4 <__gesf2+0x44>
 8000e0e:	e7ee      	b.n	8000dee <__gesf2+0x6e>

08000e10 <__lesf2>:
 8000e10:	b530      	push	{r4, r5, lr}
 8000e12:	0042      	lsls	r2, r0, #1
 8000e14:	0244      	lsls	r4, r0, #9
 8000e16:	024d      	lsls	r5, r1, #9
 8000e18:	0fc3      	lsrs	r3, r0, #31
 8000e1a:	0048      	lsls	r0, r1, #1
 8000e1c:	0a64      	lsrs	r4, r4, #9
 8000e1e:	0e12      	lsrs	r2, r2, #24
 8000e20:	0a6d      	lsrs	r5, r5, #9
 8000e22:	0e00      	lsrs	r0, r0, #24
 8000e24:	0fc9      	lsrs	r1, r1, #31
 8000e26:	2aff      	cmp	r2, #255	@ 0xff
 8000e28:	d017      	beq.n	8000e5a <__lesf2+0x4a>
 8000e2a:	28ff      	cmp	r0, #255	@ 0xff
 8000e2c:	d00a      	beq.n	8000e44 <__lesf2+0x34>
 8000e2e:	2a00      	cmp	r2, #0
 8000e30:	d11b      	bne.n	8000e6a <__lesf2+0x5a>
 8000e32:	2800      	cmp	r0, #0
 8000e34:	d10a      	bne.n	8000e4c <__lesf2+0x3c>
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d01d      	beq.n	8000e76 <__lesf2+0x66>
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	d12d      	bne.n	8000e9a <__lesf2+0x8a>
 8000e3e:	0048      	lsls	r0, r1, #1
 8000e40:	3801      	subs	r0, #1
 8000e42:	e011      	b.n	8000e68 <__lesf2+0x58>
 8000e44:	2d00      	cmp	r5, #0
 8000e46:	d10e      	bne.n	8000e66 <__lesf2+0x56>
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d101      	bne.n	8000e50 <__lesf2+0x40>
 8000e4c:	2c00      	cmp	r4, #0
 8000e4e:	d0f6      	beq.n	8000e3e <__lesf2+0x2e>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d10c      	bne.n	8000e6e <__lesf2+0x5e>
 8000e54:	0058      	lsls	r0, r3, #1
 8000e56:	3801      	subs	r0, #1
 8000e58:	e006      	b.n	8000e68 <__lesf2+0x58>
 8000e5a:	2c00      	cmp	r4, #0
 8000e5c:	d103      	bne.n	8000e66 <__lesf2+0x56>
 8000e5e:	28ff      	cmp	r0, #255	@ 0xff
 8000e60:	d105      	bne.n	8000e6e <__lesf2+0x5e>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d015      	beq.n	8000e92 <__lesf2+0x82>
 8000e66:	2002      	movs	r0, #2
 8000e68:	bd30      	pop	{r4, r5, pc}
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d106      	bne.n	8000e7c <__lesf2+0x6c>
 8000e6e:	2001      	movs	r0, #1
 8000e70:	425b      	negs	r3, r3
 8000e72:	4318      	orrs	r0, r3
 8000e74:	e7f8      	b.n	8000e68 <__lesf2+0x58>
 8000e76:	2c00      	cmp	r4, #0
 8000e78:	d0f6      	beq.n	8000e68 <__lesf2+0x58>
 8000e7a:	e7f8      	b.n	8000e6e <__lesf2+0x5e>
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d1f6      	bne.n	8000e6e <__lesf2+0x5e>
 8000e80:	4282      	cmp	r2, r0
 8000e82:	dcf4      	bgt.n	8000e6e <__lesf2+0x5e>
 8000e84:	dbe6      	blt.n	8000e54 <__lesf2+0x44>
 8000e86:	42ac      	cmp	r4, r5
 8000e88:	d8f1      	bhi.n	8000e6e <__lesf2+0x5e>
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	42ac      	cmp	r4, r5
 8000e8e:	d2eb      	bcs.n	8000e68 <__lesf2+0x58>
 8000e90:	e7e0      	b.n	8000e54 <__lesf2+0x44>
 8000e92:	2000      	movs	r0, #0
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d1ea      	bne.n	8000e6e <__lesf2+0x5e>
 8000e98:	e7e6      	b.n	8000e68 <__lesf2+0x58>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d1e7      	bne.n	8000e6e <__lesf2+0x5e>
 8000e9e:	e7f2      	b.n	8000e86 <__lesf2+0x76>

08000ea0 <__aeabi_fmul>:
 8000ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea2:	464f      	mov	r7, r9
 8000ea4:	4646      	mov	r6, r8
 8000ea6:	46d6      	mov	lr, sl
 8000ea8:	0044      	lsls	r4, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	0246      	lsls	r6, r0, #9
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0a76      	lsrs	r6, r6, #9
 8000eb2:	0e24      	lsrs	r4, r4, #24
 8000eb4:	0fc5      	lsrs	r5, r0, #31
 8000eb6:	2c00      	cmp	r4, #0
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_fmul+0x1c>
 8000eba:	e0da      	b.n	8001072 <__aeabi_fmul+0x1d2>
 8000ebc:	2cff      	cmp	r4, #255	@ 0xff
 8000ebe:	d074      	beq.n	8000faa <__aeabi_fmul+0x10a>
 8000ec0:	2380      	movs	r3, #128	@ 0x80
 8000ec2:	00f6      	lsls	r6, r6, #3
 8000ec4:	04db      	lsls	r3, r3, #19
 8000ec6:	431e      	orrs	r6, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4699      	mov	r9, r3
 8000ecc:	469a      	mov	sl, r3
 8000ece:	3c7f      	subs	r4, #127	@ 0x7f
 8000ed0:	027b      	lsls	r3, r7, #9
 8000ed2:	0a5b      	lsrs	r3, r3, #9
 8000ed4:	4698      	mov	r8, r3
 8000ed6:	007b      	lsls	r3, r7, #1
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d074      	beq.n	8000fca <__aeabi_fmul+0x12a>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fmul+0x46>
 8000ee4:	e08e      	b.n	8001004 <__aeabi_fmul+0x164>
 8000ee6:	4642      	mov	r2, r8
 8000ee8:	2180      	movs	r1, #128	@ 0x80
 8000eea:	00d2      	lsls	r2, r2, #3
 8000eec:	04c9      	lsls	r1, r1, #19
 8000eee:	4311      	orrs	r1, r2
 8000ef0:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef2:	002a      	movs	r2, r5
 8000ef4:	18e4      	adds	r4, r4, r3
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	407a      	eors	r2, r7
 8000efa:	4688      	mov	r8, r1
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	2b0a      	cmp	r3, #10
 8000f00:	dc75      	bgt.n	8000fee <__aeabi_fmul+0x14e>
 8000f02:	464b      	mov	r3, r9
 8000f04:	2000      	movs	r0, #0
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	dd0f      	ble.n	8000f2a <__aeabi_fmul+0x8a>
 8000f0a:	4649      	mov	r1, r9
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	408b      	lsls	r3, r1
 8000f10:	21a6      	movs	r1, #166	@ 0xa6
 8000f12:	00c9      	lsls	r1, r1, #3
 8000f14:	420b      	tst	r3, r1
 8000f16:	d169      	bne.n	8000fec <__aeabi_fmul+0x14c>
 8000f18:	2190      	movs	r1, #144	@ 0x90
 8000f1a:	0089      	lsls	r1, r1, #2
 8000f1c:	420b      	tst	r3, r1
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fmul+0x82>
 8000f20:	e100      	b.n	8001124 <__aeabi_fmul+0x284>
 8000f22:	2188      	movs	r1, #136	@ 0x88
 8000f24:	4219      	tst	r1, r3
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fmul+0x8a>
 8000f28:	e0f5      	b.n	8001116 <__aeabi_fmul+0x276>
 8000f2a:	4641      	mov	r1, r8
 8000f2c:	0409      	lsls	r1, r1, #16
 8000f2e:	0c09      	lsrs	r1, r1, #16
 8000f30:	4643      	mov	r3, r8
 8000f32:	0008      	movs	r0, r1
 8000f34:	0c35      	lsrs	r5, r6, #16
 8000f36:	0436      	lsls	r6, r6, #16
 8000f38:	0c1b      	lsrs	r3, r3, #16
 8000f3a:	0c36      	lsrs	r6, r6, #16
 8000f3c:	4370      	muls	r0, r6
 8000f3e:	4369      	muls	r1, r5
 8000f40:	435e      	muls	r6, r3
 8000f42:	435d      	muls	r5, r3
 8000f44:	1876      	adds	r6, r6, r1
 8000f46:	0c03      	lsrs	r3, r0, #16
 8000f48:	199b      	adds	r3, r3, r6
 8000f4a:	4299      	cmp	r1, r3
 8000f4c:	d903      	bls.n	8000f56 <__aeabi_fmul+0xb6>
 8000f4e:	2180      	movs	r1, #128	@ 0x80
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	468c      	mov	ip, r1
 8000f54:	4465      	add	r5, ip
 8000f56:	0400      	lsls	r0, r0, #16
 8000f58:	0419      	lsls	r1, r3, #16
 8000f5a:	0c00      	lsrs	r0, r0, #16
 8000f5c:	1809      	adds	r1, r1, r0
 8000f5e:	018e      	lsls	r6, r1, #6
 8000f60:	1e70      	subs	r0, r6, #1
 8000f62:	4186      	sbcs	r6, r0
 8000f64:	0c1b      	lsrs	r3, r3, #16
 8000f66:	0e89      	lsrs	r1, r1, #26
 8000f68:	195b      	adds	r3, r3, r5
 8000f6a:	430e      	orrs	r6, r1
 8000f6c:	019b      	lsls	r3, r3, #6
 8000f6e:	431e      	orrs	r6, r3
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	d46c      	bmi.n	800104e <__aeabi_fmul+0x1ae>
 8000f74:	0023      	movs	r3, r4
 8000f76:	337f      	adds	r3, #127	@ 0x7f
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	dc00      	bgt.n	8000f7e <__aeabi_fmul+0xde>
 8000f7c:	e0b1      	b.n	80010e2 <__aeabi_fmul+0x242>
 8000f7e:	0015      	movs	r5, r2
 8000f80:	0771      	lsls	r1, r6, #29
 8000f82:	d00b      	beq.n	8000f9c <__aeabi_fmul+0xfc>
 8000f84:	200f      	movs	r0, #15
 8000f86:	0021      	movs	r1, r4
 8000f88:	4030      	ands	r0, r6
 8000f8a:	2804      	cmp	r0, #4
 8000f8c:	d006      	beq.n	8000f9c <__aeabi_fmul+0xfc>
 8000f8e:	3604      	adds	r6, #4
 8000f90:	0132      	lsls	r2, r6, #4
 8000f92:	d503      	bpl.n	8000f9c <__aeabi_fmul+0xfc>
 8000f94:	4b6e      	ldr	r3, [pc, #440]	@ (8001150 <__aeabi_fmul+0x2b0>)
 8000f96:	401e      	ands	r6, r3
 8000f98:	000b      	movs	r3, r1
 8000f9a:	3380      	adds	r3, #128	@ 0x80
 8000f9c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f9e:	dd00      	ble.n	8000fa2 <__aeabi_fmul+0x102>
 8000fa0:	e0bd      	b.n	800111e <__aeabi_fmul+0x27e>
 8000fa2:	01b2      	lsls	r2, r6, #6
 8000fa4:	0a52      	lsrs	r2, r2, #9
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	e048      	b.n	800103c <__aeabi_fmul+0x19c>
 8000faa:	2e00      	cmp	r6, #0
 8000fac:	d000      	beq.n	8000fb0 <__aeabi_fmul+0x110>
 8000fae:	e092      	b.n	80010d6 <__aeabi_fmul+0x236>
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	4699      	mov	r9, r3
 8000fb4:	3b06      	subs	r3, #6
 8000fb6:	469a      	mov	sl, r3
 8000fb8:	027b      	lsls	r3, r7, #9
 8000fba:	0a5b      	lsrs	r3, r3, #9
 8000fbc:	4698      	mov	r8, r3
 8000fbe:	007b      	lsls	r3, r7, #1
 8000fc0:	24ff      	movs	r4, #255	@ 0xff
 8000fc2:	0e1b      	lsrs	r3, r3, #24
 8000fc4:	0fff      	lsrs	r7, r7, #31
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d18a      	bne.n	8000ee0 <__aeabi_fmul+0x40>
 8000fca:	4642      	mov	r2, r8
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d164      	bne.n	800109a <__aeabi_fmul+0x1fa>
 8000fd0:	4649      	mov	r1, r9
 8000fd2:	3201      	adds	r2, #1
 8000fd4:	4311      	orrs	r1, r2
 8000fd6:	4689      	mov	r9, r1
 8000fd8:	290a      	cmp	r1, #10
 8000fda:	dc08      	bgt.n	8000fee <__aeabi_fmul+0x14e>
 8000fdc:	407d      	eors	r5, r7
 8000fde:	2001      	movs	r0, #1
 8000fe0:	b2ea      	uxtb	r2, r5
 8000fe2:	2902      	cmp	r1, #2
 8000fe4:	dc91      	bgt.n	8000f0a <__aeabi_fmul+0x6a>
 8000fe6:	0015      	movs	r5, r2
 8000fe8:	2200      	movs	r2, #0
 8000fea:	e027      	b.n	800103c <__aeabi_fmul+0x19c>
 8000fec:	0015      	movs	r5, r2
 8000fee:	4653      	mov	r3, sl
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_fmul+0x156>
 8000ff4:	e093      	b.n	800111e <__aeabi_fmul+0x27e>
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d01a      	beq.n	8001030 <__aeabi_fmul+0x190>
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d12c      	bne.n	8001058 <__aeabi_fmul+0x1b8>
 8000ffe:	2300      	movs	r3, #0
 8001000:	2200      	movs	r2, #0
 8001002:	e01b      	b.n	800103c <__aeabi_fmul+0x19c>
 8001004:	4643      	mov	r3, r8
 8001006:	34ff      	adds	r4, #255	@ 0xff
 8001008:	2b00      	cmp	r3, #0
 800100a:	d055      	beq.n	80010b8 <__aeabi_fmul+0x218>
 800100c:	2103      	movs	r1, #3
 800100e:	464b      	mov	r3, r9
 8001010:	430b      	orrs	r3, r1
 8001012:	0019      	movs	r1, r3
 8001014:	2b0a      	cmp	r3, #10
 8001016:	dc00      	bgt.n	800101a <__aeabi_fmul+0x17a>
 8001018:	e092      	b.n	8001140 <__aeabi_fmul+0x2a0>
 800101a:	2b0f      	cmp	r3, #15
 800101c:	d000      	beq.n	8001020 <__aeabi_fmul+0x180>
 800101e:	e08c      	b.n	800113a <__aeabi_fmul+0x29a>
 8001020:	2280      	movs	r2, #128	@ 0x80
 8001022:	03d2      	lsls	r2, r2, #15
 8001024:	4216      	tst	r6, r2
 8001026:	d003      	beq.n	8001030 <__aeabi_fmul+0x190>
 8001028:	4643      	mov	r3, r8
 800102a:	4213      	tst	r3, r2
 800102c:	d100      	bne.n	8001030 <__aeabi_fmul+0x190>
 800102e:	e07d      	b.n	800112c <__aeabi_fmul+0x28c>
 8001030:	2280      	movs	r2, #128	@ 0x80
 8001032:	03d2      	lsls	r2, r2, #15
 8001034:	4332      	orrs	r2, r6
 8001036:	0252      	lsls	r2, r2, #9
 8001038:	0a52      	lsrs	r2, r2, #9
 800103a:	23ff      	movs	r3, #255	@ 0xff
 800103c:	05d8      	lsls	r0, r3, #23
 800103e:	07ed      	lsls	r5, r5, #31
 8001040:	4310      	orrs	r0, r2
 8001042:	4328      	orrs	r0, r5
 8001044:	bce0      	pop	{r5, r6, r7}
 8001046:	46ba      	mov	sl, r7
 8001048:	46b1      	mov	r9, r6
 800104a:	46a8      	mov	r8, r5
 800104c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800104e:	2301      	movs	r3, #1
 8001050:	0015      	movs	r5, r2
 8001052:	0871      	lsrs	r1, r6, #1
 8001054:	401e      	ands	r6, r3
 8001056:	430e      	orrs	r6, r1
 8001058:	0023      	movs	r3, r4
 800105a:	3380      	adds	r3, #128	@ 0x80
 800105c:	1c61      	adds	r1, r4, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	dd41      	ble.n	80010e6 <__aeabi_fmul+0x246>
 8001062:	0772      	lsls	r2, r6, #29
 8001064:	d094      	beq.n	8000f90 <__aeabi_fmul+0xf0>
 8001066:	220f      	movs	r2, #15
 8001068:	4032      	ands	r2, r6
 800106a:	2a04      	cmp	r2, #4
 800106c:	d000      	beq.n	8001070 <__aeabi_fmul+0x1d0>
 800106e:	e78e      	b.n	8000f8e <__aeabi_fmul+0xee>
 8001070:	e78e      	b.n	8000f90 <__aeabi_fmul+0xf0>
 8001072:	2e00      	cmp	r6, #0
 8001074:	d105      	bne.n	8001082 <__aeabi_fmul+0x1e2>
 8001076:	2304      	movs	r3, #4
 8001078:	4699      	mov	r9, r3
 800107a:	3b03      	subs	r3, #3
 800107c:	2400      	movs	r4, #0
 800107e:	469a      	mov	sl, r3
 8001080:	e726      	b.n	8000ed0 <__aeabi_fmul+0x30>
 8001082:	0030      	movs	r0, r6
 8001084:	f002 fb68 	bl	8003758 <__clzsi2>
 8001088:	2476      	movs	r4, #118	@ 0x76
 800108a:	1f43      	subs	r3, r0, #5
 800108c:	409e      	lsls	r6, r3
 800108e:	2300      	movs	r3, #0
 8001090:	4264      	negs	r4, r4
 8001092:	4699      	mov	r9, r3
 8001094:	469a      	mov	sl, r3
 8001096:	1a24      	subs	r4, r4, r0
 8001098:	e71a      	b.n	8000ed0 <__aeabi_fmul+0x30>
 800109a:	4640      	mov	r0, r8
 800109c:	f002 fb5c 	bl	8003758 <__clzsi2>
 80010a0:	464b      	mov	r3, r9
 80010a2:	1a24      	subs	r4, r4, r0
 80010a4:	3c76      	subs	r4, #118	@ 0x76
 80010a6:	2b0a      	cmp	r3, #10
 80010a8:	dca1      	bgt.n	8000fee <__aeabi_fmul+0x14e>
 80010aa:	4643      	mov	r3, r8
 80010ac:	3805      	subs	r0, #5
 80010ae:	4083      	lsls	r3, r0
 80010b0:	407d      	eors	r5, r7
 80010b2:	4698      	mov	r8, r3
 80010b4:	b2ea      	uxtb	r2, r5
 80010b6:	e724      	b.n	8000f02 <__aeabi_fmul+0x62>
 80010b8:	464a      	mov	r2, r9
 80010ba:	3302      	adds	r3, #2
 80010bc:	4313      	orrs	r3, r2
 80010be:	002a      	movs	r2, r5
 80010c0:	407a      	eors	r2, r7
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	2b0a      	cmp	r3, #10
 80010c6:	dc92      	bgt.n	8000fee <__aeabi_fmul+0x14e>
 80010c8:	4649      	mov	r1, r9
 80010ca:	0015      	movs	r5, r2
 80010cc:	2900      	cmp	r1, #0
 80010ce:	d026      	beq.n	800111e <__aeabi_fmul+0x27e>
 80010d0:	4699      	mov	r9, r3
 80010d2:	2002      	movs	r0, #2
 80010d4:	e719      	b.n	8000f0a <__aeabi_fmul+0x6a>
 80010d6:	230c      	movs	r3, #12
 80010d8:	4699      	mov	r9, r3
 80010da:	3b09      	subs	r3, #9
 80010dc:	24ff      	movs	r4, #255	@ 0xff
 80010de:	469a      	mov	sl, r3
 80010e0:	e6f6      	b.n	8000ed0 <__aeabi_fmul+0x30>
 80010e2:	0015      	movs	r5, r2
 80010e4:	0021      	movs	r1, r4
 80010e6:	2201      	movs	r2, #1
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b1b      	cmp	r3, #27
 80010ec:	dd00      	ble.n	80010f0 <__aeabi_fmul+0x250>
 80010ee:	e786      	b.n	8000ffe <__aeabi_fmul+0x15e>
 80010f0:	319e      	adds	r1, #158	@ 0x9e
 80010f2:	0032      	movs	r2, r6
 80010f4:	408e      	lsls	r6, r1
 80010f6:	40da      	lsrs	r2, r3
 80010f8:	1e73      	subs	r3, r6, #1
 80010fa:	419e      	sbcs	r6, r3
 80010fc:	4332      	orrs	r2, r6
 80010fe:	0753      	lsls	r3, r2, #29
 8001100:	d004      	beq.n	800110c <__aeabi_fmul+0x26c>
 8001102:	230f      	movs	r3, #15
 8001104:	4013      	ands	r3, r2
 8001106:	2b04      	cmp	r3, #4
 8001108:	d000      	beq.n	800110c <__aeabi_fmul+0x26c>
 800110a:	3204      	adds	r2, #4
 800110c:	0153      	lsls	r3, r2, #5
 800110e:	d510      	bpl.n	8001132 <__aeabi_fmul+0x292>
 8001110:	2301      	movs	r3, #1
 8001112:	2200      	movs	r2, #0
 8001114:	e792      	b.n	800103c <__aeabi_fmul+0x19c>
 8001116:	003d      	movs	r5, r7
 8001118:	4646      	mov	r6, r8
 800111a:	4682      	mov	sl, r0
 800111c:	e767      	b.n	8000fee <__aeabi_fmul+0x14e>
 800111e:	23ff      	movs	r3, #255	@ 0xff
 8001120:	2200      	movs	r2, #0
 8001122:	e78b      	b.n	800103c <__aeabi_fmul+0x19c>
 8001124:	2280      	movs	r2, #128	@ 0x80
 8001126:	2500      	movs	r5, #0
 8001128:	03d2      	lsls	r2, r2, #15
 800112a:	e786      	b.n	800103a <__aeabi_fmul+0x19a>
 800112c:	003d      	movs	r5, r7
 800112e:	431a      	orrs	r2, r3
 8001130:	e783      	b.n	800103a <__aeabi_fmul+0x19a>
 8001132:	0192      	lsls	r2, r2, #6
 8001134:	2300      	movs	r3, #0
 8001136:	0a52      	lsrs	r2, r2, #9
 8001138:	e780      	b.n	800103c <__aeabi_fmul+0x19c>
 800113a:	003d      	movs	r5, r7
 800113c:	4646      	mov	r6, r8
 800113e:	e777      	b.n	8001030 <__aeabi_fmul+0x190>
 8001140:	002a      	movs	r2, r5
 8001142:	2301      	movs	r3, #1
 8001144:	407a      	eors	r2, r7
 8001146:	408b      	lsls	r3, r1
 8001148:	2003      	movs	r0, #3
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	e6e9      	b.n	8000f22 <__aeabi_fmul+0x82>
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	f7ffffff 	.word	0xf7ffffff

08001154 <__aeabi_fsub>:
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001156:	4647      	mov	r7, r8
 8001158:	46ce      	mov	lr, r9
 800115a:	0243      	lsls	r3, r0, #9
 800115c:	b580      	push	{r7, lr}
 800115e:	0a5f      	lsrs	r7, r3, #9
 8001160:	099b      	lsrs	r3, r3, #6
 8001162:	0045      	lsls	r5, r0, #1
 8001164:	004a      	lsls	r2, r1, #1
 8001166:	469c      	mov	ip, r3
 8001168:	024b      	lsls	r3, r1, #9
 800116a:	0fc4      	lsrs	r4, r0, #31
 800116c:	0fce      	lsrs	r6, r1, #31
 800116e:	0e2d      	lsrs	r5, r5, #24
 8001170:	0a58      	lsrs	r0, r3, #9
 8001172:	0e12      	lsrs	r2, r2, #24
 8001174:	0999      	lsrs	r1, r3, #6
 8001176:	2aff      	cmp	r2, #255	@ 0xff
 8001178:	d06b      	beq.n	8001252 <__aeabi_fsub+0xfe>
 800117a:	2301      	movs	r3, #1
 800117c:	405e      	eors	r6, r3
 800117e:	1aab      	subs	r3, r5, r2
 8001180:	42b4      	cmp	r4, r6
 8001182:	d04b      	beq.n	800121c <__aeabi_fsub+0xc8>
 8001184:	2b00      	cmp	r3, #0
 8001186:	dc00      	bgt.n	800118a <__aeabi_fsub+0x36>
 8001188:	e0ff      	b.n	800138a <__aeabi_fsub+0x236>
 800118a:	2a00      	cmp	r2, #0
 800118c:	d100      	bne.n	8001190 <__aeabi_fsub+0x3c>
 800118e:	e088      	b.n	80012a2 <__aeabi_fsub+0x14e>
 8001190:	2dff      	cmp	r5, #255	@ 0xff
 8001192:	d100      	bne.n	8001196 <__aeabi_fsub+0x42>
 8001194:	e0ef      	b.n	8001376 <__aeabi_fsub+0x222>
 8001196:	2280      	movs	r2, #128	@ 0x80
 8001198:	04d2      	lsls	r2, r2, #19
 800119a:	4311      	orrs	r1, r2
 800119c:	2001      	movs	r0, #1
 800119e:	2b1b      	cmp	r3, #27
 80011a0:	dc08      	bgt.n	80011b4 <__aeabi_fsub+0x60>
 80011a2:	0008      	movs	r0, r1
 80011a4:	2220      	movs	r2, #32
 80011a6:	40d8      	lsrs	r0, r3
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	4099      	lsls	r1, r3
 80011ac:	000b      	movs	r3, r1
 80011ae:	1e5a      	subs	r2, r3, #1
 80011b0:	4193      	sbcs	r3, r2
 80011b2:	4318      	orrs	r0, r3
 80011b4:	4663      	mov	r3, ip
 80011b6:	1a1b      	subs	r3, r3, r0
 80011b8:	469c      	mov	ip, r3
 80011ba:	4663      	mov	r3, ip
 80011bc:	015b      	lsls	r3, r3, #5
 80011be:	d400      	bmi.n	80011c2 <__aeabi_fsub+0x6e>
 80011c0:	e0cd      	b.n	800135e <__aeabi_fsub+0x20a>
 80011c2:	4663      	mov	r3, ip
 80011c4:	019f      	lsls	r7, r3, #6
 80011c6:	09bf      	lsrs	r7, r7, #6
 80011c8:	0038      	movs	r0, r7
 80011ca:	f002 fac5 	bl	8003758 <__clzsi2>
 80011ce:	003b      	movs	r3, r7
 80011d0:	3805      	subs	r0, #5
 80011d2:	4083      	lsls	r3, r0
 80011d4:	4285      	cmp	r5, r0
 80011d6:	dc00      	bgt.n	80011da <__aeabi_fsub+0x86>
 80011d8:	e0a2      	b.n	8001320 <__aeabi_fsub+0x1cc>
 80011da:	4ab7      	ldr	r2, [pc, #732]	@ (80014b8 <__aeabi_fsub+0x364>)
 80011dc:	1a2d      	subs	r5, r5, r0
 80011de:	401a      	ands	r2, r3
 80011e0:	4694      	mov	ip, r2
 80011e2:	075a      	lsls	r2, r3, #29
 80011e4:	d100      	bne.n	80011e8 <__aeabi_fsub+0x94>
 80011e6:	e0c3      	b.n	8001370 <__aeabi_fsub+0x21c>
 80011e8:	220f      	movs	r2, #15
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d100      	bne.n	80011f2 <__aeabi_fsub+0x9e>
 80011f0:	e0be      	b.n	8001370 <__aeabi_fsub+0x21c>
 80011f2:	2304      	movs	r3, #4
 80011f4:	4698      	mov	r8, r3
 80011f6:	44c4      	add	ip, r8
 80011f8:	4663      	mov	r3, ip
 80011fa:	015b      	lsls	r3, r3, #5
 80011fc:	d400      	bmi.n	8001200 <__aeabi_fsub+0xac>
 80011fe:	e0b7      	b.n	8001370 <__aeabi_fsub+0x21c>
 8001200:	1c68      	adds	r0, r5, #1
 8001202:	2dfe      	cmp	r5, #254	@ 0xfe
 8001204:	d000      	beq.n	8001208 <__aeabi_fsub+0xb4>
 8001206:	e0a5      	b.n	8001354 <__aeabi_fsub+0x200>
 8001208:	20ff      	movs	r0, #255	@ 0xff
 800120a:	2200      	movs	r2, #0
 800120c:	05c0      	lsls	r0, r0, #23
 800120e:	4310      	orrs	r0, r2
 8001210:	07e4      	lsls	r4, r4, #31
 8001212:	4320      	orrs	r0, r4
 8001214:	bcc0      	pop	{r6, r7}
 8001216:	46b9      	mov	r9, r7
 8001218:	46b0      	mov	r8, r6
 800121a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800121c:	2b00      	cmp	r3, #0
 800121e:	dc00      	bgt.n	8001222 <__aeabi_fsub+0xce>
 8001220:	e1eb      	b.n	80015fa <__aeabi_fsub+0x4a6>
 8001222:	2a00      	cmp	r2, #0
 8001224:	d046      	beq.n	80012b4 <__aeabi_fsub+0x160>
 8001226:	2dff      	cmp	r5, #255	@ 0xff
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0xd8>
 800122a:	e0a4      	b.n	8001376 <__aeabi_fsub+0x222>
 800122c:	2280      	movs	r2, #128	@ 0x80
 800122e:	04d2      	lsls	r2, r2, #19
 8001230:	4311      	orrs	r1, r2
 8001232:	2b1b      	cmp	r3, #27
 8001234:	dc00      	bgt.n	8001238 <__aeabi_fsub+0xe4>
 8001236:	e0fb      	b.n	8001430 <__aeabi_fsub+0x2dc>
 8001238:	2305      	movs	r3, #5
 800123a:	4698      	mov	r8, r3
 800123c:	002b      	movs	r3, r5
 800123e:	44c4      	add	ip, r8
 8001240:	4662      	mov	r2, ip
 8001242:	08d7      	lsrs	r7, r2, #3
 8001244:	2bff      	cmp	r3, #255	@ 0xff
 8001246:	d100      	bne.n	800124a <__aeabi_fsub+0xf6>
 8001248:	e095      	b.n	8001376 <__aeabi_fsub+0x222>
 800124a:	027a      	lsls	r2, r7, #9
 800124c:	0a52      	lsrs	r2, r2, #9
 800124e:	b2d8      	uxtb	r0, r3
 8001250:	e7dc      	b.n	800120c <__aeabi_fsub+0xb8>
 8001252:	002b      	movs	r3, r5
 8001254:	3bff      	subs	r3, #255	@ 0xff
 8001256:	4699      	mov	r9, r3
 8001258:	2900      	cmp	r1, #0
 800125a:	d118      	bne.n	800128e <__aeabi_fsub+0x13a>
 800125c:	2301      	movs	r3, #1
 800125e:	405e      	eors	r6, r3
 8001260:	42b4      	cmp	r4, r6
 8001262:	d100      	bne.n	8001266 <__aeabi_fsub+0x112>
 8001264:	e0ca      	b.n	80013fc <__aeabi_fsub+0x2a8>
 8001266:	464b      	mov	r3, r9
 8001268:	2b00      	cmp	r3, #0
 800126a:	d02d      	beq.n	80012c8 <__aeabi_fsub+0x174>
 800126c:	2d00      	cmp	r5, #0
 800126e:	d000      	beq.n	8001272 <__aeabi_fsub+0x11e>
 8001270:	e13c      	b.n	80014ec <__aeabi_fsub+0x398>
 8001272:	23ff      	movs	r3, #255	@ 0xff
 8001274:	4664      	mov	r4, ip
 8001276:	2c00      	cmp	r4, #0
 8001278:	d100      	bne.n	800127c <__aeabi_fsub+0x128>
 800127a:	e15f      	b.n	800153c <__aeabi_fsub+0x3e8>
 800127c:	1e5d      	subs	r5, r3, #1
 800127e:	2b01      	cmp	r3, #1
 8001280:	d100      	bne.n	8001284 <__aeabi_fsub+0x130>
 8001282:	e174      	b.n	800156e <__aeabi_fsub+0x41a>
 8001284:	0034      	movs	r4, r6
 8001286:	2bff      	cmp	r3, #255	@ 0xff
 8001288:	d074      	beq.n	8001374 <__aeabi_fsub+0x220>
 800128a:	002b      	movs	r3, r5
 800128c:	e103      	b.n	8001496 <__aeabi_fsub+0x342>
 800128e:	42b4      	cmp	r4, r6
 8001290:	d100      	bne.n	8001294 <__aeabi_fsub+0x140>
 8001292:	e09c      	b.n	80013ce <__aeabi_fsub+0x27a>
 8001294:	2b00      	cmp	r3, #0
 8001296:	d017      	beq.n	80012c8 <__aeabi_fsub+0x174>
 8001298:	2d00      	cmp	r5, #0
 800129a:	d0ea      	beq.n	8001272 <__aeabi_fsub+0x11e>
 800129c:	0007      	movs	r7, r0
 800129e:	0034      	movs	r4, r6
 80012a0:	e06c      	b.n	800137c <__aeabi_fsub+0x228>
 80012a2:	2900      	cmp	r1, #0
 80012a4:	d0cc      	beq.n	8001240 <__aeabi_fsub+0xec>
 80012a6:	1e5a      	subs	r2, r3, #1
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d02b      	beq.n	8001304 <__aeabi_fsub+0x1b0>
 80012ac:	2bff      	cmp	r3, #255	@ 0xff
 80012ae:	d062      	beq.n	8001376 <__aeabi_fsub+0x222>
 80012b0:	0013      	movs	r3, r2
 80012b2:	e773      	b.n	800119c <__aeabi_fsub+0x48>
 80012b4:	2900      	cmp	r1, #0
 80012b6:	d0c3      	beq.n	8001240 <__aeabi_fsub+0xec>
 80012b8:	1e5a      	subs	r2, r3, #1
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d100      	bne.n	80012c0 <__aeabi_fsub+0x16c>
 80012be:	e11e      	b.n	80014fe <__aeabi_fsub+0x3aa>
 80012c0:	2bff      	cmp	r3, #255	@ 0xff
 80012c2:	d058      	beq.n	8001376 <__aeabi_fsub+0x222>
 80012c4:	0013      	movs	r3, r2
 80012c6:	e7b4      	b.n	8001232 <__aeabi_fsub+0xde>
 80012c8:	22fe      	movs	r2, #254	@ 0xfe
 80012ca:	1c6b      	adds	r3, r5, #1
 80012cc:	421a      	tst	r2, r3
 80012ce:	d10d      	bne.n	80012ec <__aeabi_fsub+0x198>
 80012d0:	2d00      	cmp	r5, #0
 80012d2:	d060      	beq.n	8001396 <__aeabi_fsub+0x242>
 80012d4:	4663      	mov	r3, ip
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d000      	beq.n	80012dc <__aeabi_fsub+0x188>
 80012da:	e120      	b.n	800151e <__aeabi_fsub+0x3ca>
 80012dc:	2900      	cmp	r1, #0
 80012de:	d000      	beq.n	80012e2 <__aeabi_fsub+0x18e>
 80012e0:	e128      	b.n	8001534 <__aeabi_fsub+0x3e0>
 80012e2:	2280      	movs	r2, #128	@ 0x80
 80012e4:	2400      	movs	r4, #0
 80012e6:	20ff      	movs	r0, #255	@ 0xff
 80012e8:	03d2      	lsls	r2, r2, #15
 80012ea:	e78f      	b.n	800120c <__aeabi_fsub+0xb8>
 80012ec:	4663      	mov	r3, ip
 80012ee:	1a5f      	subs	r7, r3, r1
 80012f0:	017b      	lsls	r3, r7, #5
 80012f2:	d500      	bpl.n	80012f6 <__aeabi_fsub+0x1a2>
 80012f4:	e0fe      	b.n	80014f4 <__aeabi_fsub+0x3a0>
 80012f6:	2f00      	cmp	r7, #0
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0x1a8>
 80012fa:	e765      	b.n	80011c8 <__aeabi_fsub+0x74>
 80012fc:	2400      	movs	r4, #0
 80012fe:	2000      	movs	r0, #0
 8001300:	2200      	movs	r2, #0
 8001302:	e783      	b.n	800120c <__aeabi_fsub+0xb8>
 8001304:	4663      	mov	r3, ip
 8001306:	1a59      	subs	r1, r3, r1
 8001308:	014b      	lsls	r3, r1, #5
 800130a:	d400      	bmi.n	800130e <__aeabi_fsub+0x1ba>
 800130c:	e119      	b.n	8001542 <__aeabi_fsub+0x3ee>
 800130e:	018f      	lsls	r7, r1, #6
 8001310:	09bf      	lsrs	r7, r7, #6
 8001312:	0038      	movs	r0, r7
 8001314:	f002 fa20 	bl	8003758 <__clzsi2>
 8001318:	003b      	movs	r3, r7
 800131a:	3805      	subs	r0, #5
 800131c:	4083      	lsls	r3, r0
 800131e:	2501      	movs	r5, #1
 8001320:	2220      	movs	r2, #32
 8001322:	1b40      	subs	r0, r0, r5
 8001324:	3001      	adds	r0, #1
 8001326:	1a12      	subs	r2, r2, r0
 8001328:	0019      	movs	r1, r3
 800132a:	4093      	lsls	r3, r2
 800132c:	40c1      	lsrs	r1, r0
 800132e:	1e5a      	subs	r2, r3, #1
 8001330:	4193      	sbcs	r3, r2
 8001332:	4319      	orrs	r1, r3
 8001334:	468c      	mov	ip, r1
 8001336:	1e0b      	subs	r3, r1, #0
 8001338:	d0e1      	beq.n	80012fe <__aeabi_fsub+0x1aa>
 800133a:	075b      	lsls	r3, r3, #29
 800133c:	d100      	bne.n	8001340 <__aeabi_fsub+0x1ec>
 800133e:	e152      	b.n	80015e6 <__aeabi_fsub+0x492>
 8001340:	230f      	movs	r3, #15
 8001342:	2500      	movs	r5, #0
 8001344:	400b      	ands	r3, r1
 8001346:	2b04      	cmp	r3, #4
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x1f8>
 800134a:	e752      	b.n	80011f2 <__aeabi_fsub+0x9e>
 800134c:	2001      	movs	r0, #1
 800134e:	014a      	lsls	r2, r1, #5
 8001350:	d400      	bmi.n	8001354 <__aeabi_fsub+0x200>
 8001352:	e092      	b.n	800147a <__aeabi_fsub+0x326>
 8001354:	b2c0      	uxtb	r0, r0
 8001356:	4663      	mov	r3, ip
 8001358:	019a      	lsls	r2, r3, #6
 800135a:	0a52      	lsrs	r2, r2, #9
 800135c:	e756      	b.n	800120c <__aeabi_fsub+0xb8>
 800135e:	4663      	mov	r3, ip
 8001360:	075b      	lsls	r3, r3, #29
 8001362:	d005      	beq.n	8001370 <__aeabi_fsub+0x21c>
 8001364:	230f      	movs	r3, #15
 8001366:	4662      	mov	r2, ip
 8001368:	4013      	ands	r3, r2
 800136a:	2b04      	cmp	r3, #4
 800136c:	d000      	beq.n	8001370 <__aeabi_fsub+0x21c>
 800136e:	e740      	b.n	80011f2 <__aeabi_fsub+0x9e>
 8001370:	002b      	movs	r3, r5
 8001372:	e765      	b.n	8001240 <__aeabi_fsub+0xec>
 8001374:	0007      	movs	r7, r0
 8001376:	2f00      	cmp	r7, #0
 8001378:	d100      	bne.n	800137c <__aeabi_fsub+0x228>
 800137a:	e745      	b.n	8001208 <__aeabi_fsub+0xb4>
 800137c:	2280      	movs	r2, #128	@ 0x80
 800137e:	03d2      	lsls	r2, r2, #15
 8001380:	433a      	orrs	r2, r7
 8001382:	0252      	lsls	r2, r2, #9
 8001384:	20ff      	movs	r0, #255	@ 0xff
 8001386:	0a52      	lsrs	r2, r2, #9
 8001388:	e740      	b.n	800120c <__aeabi_fsub+0xb8>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d179      	bne.n	8001482 <__aeabi_fsub+0x32e>
 800138e:	22fe      	movs	r2, #254	@ 0xfe
 8001390:	1c6b      	adds	r3, r5, #1
 8001392:	421a      	tst	r2, r3
 8001394:	d1aa      	bne.n	80012ec <__aeabi_fsub+0x198>
 8001396:	4663      	mov	r3, ip
 8001398:	2b00      	cmp	r3, #0
 800139a:	d100      	bne.n	800139e <__aeabi_fsub+0x24a>
 800139c:	e0f5      	b.n	800158a <__aeabi_fsub+0x436>
 800139e:	2900      	cmp	r1, #0
 80013a0:	d100      	bne.n	80013a4 <__aeabi_fsub+0x250>
 80013a2:	e0d1      	b.n	8001548 <__aeabi_fsub+0x3f4>
 80013a4:	1a5f      	subs	r7, r3, r1
 80013a6:	2380      	movs	r3, #128	@ 0x80
 80013a8:	04db      	lsls	r3, r3, #19
 80013aa:	421f      	tst	r7, r3
 80013ac:	d100      	bne.n	80013b0 <__aeabi_fsub+0x25c>
 80013ae:	e10e      	b.n	80015ce <__aeabi_fsub+0x47a>
 80013b0:	4662      	mov	r2, ip
 80013b2:	2401      	movs	r4, #1
 80013b4:	1a8a      	subs	r2, r1, r2
 80013b6:	4694      	mov	ip, r2
 80013b8:	2000      	movs	r0, #0
 80013ba:	4034      	ands	r4, r6
 80013bc:	2a00      	cmp	r2, #0
 80013be:	d100      	bne.n	80013c2 <__aeabi_fsub+0x26e>
 80013c0:	e724      	b.n	800120c <__aeabi_fsub+0xb8>
 80013c2:	2001      	movs	r0, #1
 80013c4:	421a      	tst	r2, r3
 80013c6:	d1c6      	bne.n	8001356 <__aeabi_fsub+0x202>
 80013c8:	2300      	movs	r3, #0
 80013ca:	08d7      	lsrs	r7, r2, #3
 80013cc:	e73d      	b.n	800124a <__aeabi_fsub+0xf6>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d017      	beq.n	8001402 <__aeabi_fsub+0x2ae>
 80013d2:	2d00      	cmp	r5, #0
 80013d4:	d000      	beq.n	80013d8 <__aeabi_fsub+0x284>
 80013d6:	e0af      	b.n	8001538 <__aeabi_fsub+0x3e4>
 80013d8:	23ff      	movs	r3, #255	@ 0xff
 80013da:	4665      	mov	r5, ip
 80013dc:	2d00      	cmp	r5, #0
 80013de:	d100      	bne.n	80013e2 <__aeabi_fsub+0x28e>
 80013e0:	e0ad      	b.n	800153e <__aeabi_fsub+0x3ea>
 80013e2:	1e5e      	subs	r6, r3, #1
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d100      	bne.n	80013ea <__aeabi_fsub+0x296>
 80013e8:	e089      	b.n	80014fe <__aeabi_fsub+0x3aa>
 80013ea:	2bff      	cmp	r3, #255	@ 0xff
 80013ec:	d0c2      	beq.n	8001374 <__aeabi_fsub+0x220>
 80013ee:	2e1b      	cmp	r6, #27
 80013f0:	dc00      	bgt.n	80013f4 <__aeabi_fsub+0x2a0>
 80013f2:	e0ab      	b.n	800154c <__aeabi_fsub+0x3f8>
 80013f4:	1d4b      	adds	r3, r1, #5
 80013f6:	469c      	mov	ip, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	e721      	b.n	8001240 <__aeabi_fsub+0xec>
 80013fc:	464b      	mov	r3, r9
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d170      	bne.n	80014e4 <__aeabi_fsub+0x390>
 8001402:	22fe      	movs	r2, #254	@ 0xfe
 8001404:	1c6b      	adds	r3, r5, #1
 8001406:	421a      	tst	r2, r3
 8001408:	d15e      	bne.n	80014c8 <__aeabi_fsub+0x374>
 800140a:	2d00      	cmp	r5, #0
 800140c:	d000      	beq.n	8001410 <__aeabi_fsub+0x2bc>
 800140e:	e0c3      	b.n	8001598 <__aeabi_fsub+0x444>
 8001410:	4663      	mov	r3, ip
 8001412:	2b00      	cmp	r3, #0
 8001414:	d100      	bne.n	8001418 <__aeabi_fsub+0x2c4>
 8001416:	e0d0      	b.n	80015ba <__aeabi_fsub+0x466>
 8001418:	2900      	cmp	r1, #0
 800141a:	d100      	bne.n	800141e <__aeabi_fsub+0x2ca>
 800141c:	e094      	b.n	8001548 <__aeabi_fsub+0x3f4>
 800141e:	000a      	movs	r2, r1
 8001420:	4462      	add	r2, ip
 8001422:	0153      	lsls	r3, r2, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x2d4>
 8001426:	e0d8      	b.n	80015da <__aeabi_fsub+0x486>
 8001428:	0192      	lsls	r2, r2, #6
 800142a:	2001      	movs	r0, #1
 800142c:	0a52      	lsrs	r2, r2, #9
 800142e:	e6ed      	b.n	800120c <__aeabi_fsub+0xb8>
 8001430:	0008      	movs	r0, r1
 8001432:	2220      	movs	r2, #32
 8001434:	40d8      	lsrs	r0, r3
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	4099      	lsls	r1, r3
 800143a:	000b      	movs	r3, r1
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	4193      	sbcs	r3, r2
 8001440:	4303      	orrs	r3, r0
 8001442:	449c      	add	ip, r3
 8001444:	4663      	mov	r3, ip
 8001446:	015b      	lsls	r3, r3, #5
 8001448:	d589      	bpl.n	800135e <__aeabi_fsub+0x20a>
 800144a:	3501      	adds	r5, #1
 800144c:	2dff      	cmp	r5, #255	@ 0xff
 800144e:	d100      	bne.n	8001452 <__aeabi_fsub+0x2fe>
 8001450:	e6da      	b.n	8001208 <__aeabi_fsub+0xb4>
 8001452:	4662      	mov	r2, ip
 8001454:	2301      	movs	r3, #1
 8001456:	4919      	ldr	r1, [pc, #100]	@ (80014bc <__aeabi_fsub+0x368>)
 8001458:	4013      	ands	r3, r2
 800145a:	0852      	lsrs	r2, r2, #1
 800145c:	400a      	ands	r2, r1
 800145e:	431a      	orrs	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	4694      	mov	ip, r2
 8001464:	075b      	lsls	r3, r3, #29
 8001466:	d004      	beq.n	8001472 <__aeabi_fsub+0x31e>
 8001468:	230f      	movs	r3, #15
 800146a:	4013      	ands	r3, r2
 800146c:	2b04      	cmp	r3, #4
 800146e:	d000      	beq.n	8001472 <__aeabi_fsub+0x31e>
 8001470:	e6bf      	b.n	80011f2 <__aeabi_fsub+0x9e>
 8001472:	4663      	mov	r3, ip
 8001474:	015b      	lsls	r3, r3, #5
 8001476:	d500      	bpl.n	800147a <__aeabi_fsub+0x326>
 8001478:	e6c2      	b.n	8001200 <__aeabi_fsub+0xac>
 800147a:	4663      	mov	r3, ip
 800147c:	08df      	lsrs	r7, r3, #3
 800147e:	002b      	movs	r3, r5
 8001480:	e6e3      	b.n	800124a <__aeabi_fsub+0xf6>
 8001482:	1b53      	subs	r3, r2, r5
 8001484:	2d00      	cmp	r5, #0
 8001486:	d100      	bne.n	800148a <__aeabi_fsub+0x336>
 8001488:	e6f4      	b.n	8001274 <__aeabi_fsub+0x120>
 800148a:	2080      	movs	r0, #128	@ 0x80
 800148c:	4664      	mov	r4, ip
 800148e:	04c0      	lsls	r0, r0, #19
 8001490:	4304      	orrs	r4, r0
 8001492:	46a4      	mov	ip, r4
 8001494:	0034      	movs	r4, r6
 8001496:	2001      	movs	r0, #1
 8001498:	2b1b      	cmp	r3, #27
 800149a:	dc09      	bgt.n	80014b0 <__aeabi_fsub+0x35c>
 800149c:	2520      	movs	r5, #32
 800149e:	4660      	mov	r0, ip
 80014a0:	40d8      	lsrs	r0, r3
 80014a2:	1aeb      	subs	r3, r5, r3
 80014a4:	4665      	mov	r5, ip
 80014a6:	409d      	lsls	r5, r3
 80014a8:	002b      	movs	r3, r5
 80014aa:	1e5d      	subs	r5, r3, #1
 80014ac:	41ab      	sbcs	r3, r5
 80014ae:	4318      	orrs	r0, r3
 80014b0:	1a0b      	subs	r3, r1, r0
 80014b2:	469c      	mov	ip, r3
 80014b4:	0015      	movs	r5, r2
 80014b6:	e680      	b.n	80011ba <__aeabi_fsub+0x66>
 80014b8:	fbffffff 	.word	0xfbffffff
 80014bc:	7dffffff 	.word	0x7dffffff
 80014c0:	22fe      	movs	r2, #254	@ 0xfe
 80014c2:	1c6b      	adds	r3, r5, #1
 80014c4:	4213      	tst	r3, r2
 80014c6:	d0a3      	beq.n	8001410 <__aeabi_fsub+0x2bc>
 80014c8:	2bff      	cmp	r3, #255	@ 0xff
 80014ca:	d100      	bne.n	80014ce <__aeabi_fsub+0x37a>
 80014cc:	e69c      	b.n	8001208 <__aeabi_fsub+0xb4>
 80014ce:	4461      	add	r1, ip
 80014d0:	0849      	lsrs	r1, r1, #1
 80014d2:	074a      	lsls	r2, r1, #29
 80014d4:	d049      	beq.n	800156a <__aeabi_fsub+0x416>
 80014d6:	220f      	movs	r2, #15
 80014d8:	400a      	ands	r2, r1
 80014da:	2a04      	cmp	r2, #4
 80014dc:	d045      	beq.n	800156a <__aeabi_fsub+0x416>
 80014de:	1d0a      	adds	r2, r1, #4
 80014e0:	4694      	mov	ip, r2
 80014e2:	e6ad      	b.n	8001240 <__aeabi_fsub+0xec>
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d100      	bne.n	80014ea <__aeabi_fsub+0x396>
 80014e8:	e776      	b.n	80013d8 <__aeabi_fsub+0x284>
 80014ea:	e68d      	b.n	8001208 <__aeabi_fsub+0xb4>
 80014ec:	0034      	movs	r4, r6
 80014ee:	20ff      	movs	r0, #255	@ 0xff
 80014f0:	2200      	movs	r2, #0
 80014f2:	e68b      	b.n	800120c <__aeabi_fsub+0xb8>
 80014f4:	4663      	mov	r3, ip
 80014f6:	2401      	movs	r4, #1
 80014f8:	1acf      	subs	r7, r1, r3
 80014fa:	4034      	ands	r4, r6
 80014fc:	e664      	b.n	80011c8 <__aeabi_fsub+0x74>
 80014fe:	4461      	add	r1, ip
 8001500:	014b      	lsls	r3, r1, #5
 8001502:	d56d      	bpl.n	80015e0 <__aeabi_fsub+0x48c>
 8001504:	0848      	lsrs	r0, r1, #1
 8001506:	4944      	ldr	r1, [pc, #272]	@ (8001618 <__aeabi_fsub+0x4c4>)
 8001508:	4001      	ands	r1, r0
 800150a:	0743      	lsls	r3, r0, #29
 800150c:	d02c      	beq.n	8001568 <__aeabi_fsub+0x414>
 800150e:	230f      	movs	r3, #15
 8001510:	4003      	ands	r3, r0
 8001512:	2b04      	cmp	r3, #4
 8001514:	d028      	beq.n	8001568 <__aeabi_fsub+0x414>
 8001516:	1d0b      	adds	r3, r1, #4
 8001518:	469c      	mov	ip, r3
 800151a:	2302      	movs	r3, #2
 800151c:	e690      	b.n	8001240 <__aeabi_fsub+0xec>
 800151e:	2900      	cmp	r1, #0
 8001520:	d100      	bne.n	8001524 <__aeabi_fsub+0x3d0>
 8001522:	e72b      	b.n	800137c <__aeabi_fsub+0x228>
 8001524:	2380      	movs	r3, #128	@ 0x80
 8001526:	03db      	lsls	r3, r3, #15
 8001528:	429f      	cmp	r7, r3
 800152a:	d200      	bcs.n	800152e <__aeabi_fsub+0x3da>
 800152c:	e726      	b.n	800137c <__aeabi_fsub+0x228>
 800152e:	4298      	cmp	r0, r3
 8001530:	d300      	bcc.n	8001534 <__aeabi_fsub+0x3e0>
 8001532:	e723      	b.n	800137c <__aeabi_fsub+0x228>
 8001534:	2401      	movs	r4, #1
 8001536:	4034      	ands	r4, r6
 8001538:	0007      	movs	r7, r0
 800153a:	e71f      	b.n	800137c <__aeabi_fsub+0x228>
 800153c:	0034      	movs	r4, r6
 800153e:	468c      	mov	ip, r1
 8001540:	e67e      	b.n	8001240 <__aeabi_fsub+0xec>
 8001542:	2301      	movs	r3, #1
 8001544:	08cf      	lsrs	r7, r1, #3
 8001546:	e680      	b.n	800124a <__aeabi_fsub+0xf6>
 8001548:	2300      	movs	r3, #0
 800154a:	e67e      	b.n	800124a <__aeabi_fsub+0xf6>
 800154c:	2020      	movs	r0, #32
 800154e:	4665      	mov	r5, ip
 8001550:	1b80      	subs	r0, r0, r6
 8001552:	4085      	lsls	r5, r0
 8001554:	4663      	mov	r3, ip
 8001556:	0028      	movs	r0, r5
 8001558:	40f3      	lsrs	r3, r6
 800155a:	1e45      	subs	r5, r0, #1
 800155c:	41a8      	sbcs	r0, r5
 800155e:	4303      	orrs	r3, r0
 8001560:	469c      	mov	ip, r3
 8001562:	0015      	movs	r5, r2
 8001564:	448c      	add	ip, r1
 8001566:	e76d      	b.n	8001444 <__aeabi_fsub+0x2f0>
 8001568:	2302      	movs	r3, #2
 800156a:	08cf      	lsrs	r7, r1, #3
 800156c:	e66d      	b.n	800124a <__aeabi_fsub+0xf6>
 800156e:	1b0f      	subs	r7, r1, r4
 8001570:	017b      	lsls	r3, r7, #5
 8001572:	d528      	bpl.n	80015c6 <__aeabi_fsub+0x472>
 8001574:	01bf      	lsls	r7, r7, #6
 8001576:	09bf      	lsrs	r7, r7, #6
 8001578:	0038      	movs	r0, r7
 800157a:	f002 f8ed 	bl	8003758 <__clzsi2>
 800157e:	003b      	movs	r3, r7
 8001580:	3805      	subs	r0, #5
 8001582:	4083      	lsls	r3, r0
 8001584:	0034      	movs	r4, r6
 8001586:	2501      	movs	r5, #1
 8001588:	e6ca      	b.n	8001320 <__aeabi_fsub+0x1cc>
 800158a:	2900      	cmp	r1, #0
 800158c:	d100      	bne.n	8001590 <__aeabi_fsub+0x43c>
 800158e:	e6b5      	b.n	80012fc <__aeabi_fsub+0x1a8>
 8001590:	2401      	movs	r4, #1
 8001592:	0007      	movs	r7, r0
 8001594:	4034      	ands	r4, r6
 8001596:	e658      	b.n	800124a <__aeabi_fsub+0xf6>
 8001598:	4663      	mov	r3, ip
 800159a:	2b00      	cmp	r3, #0
 800159c:	d100      	bne.n	80015a0 <__aeabi_fsub+0x44c>
 800159e:	e6e9      	b.n	8001374 <__aeabi_fsub+0x220>
 80015a0:	2900      	cmp	r1, #0
 80015a2:	d100      	bne.n	80015a6 <__aeabi_fsub+0x452>
 80015a4:	e6ea      	b.n	800137c <__aeabi_fsub+0x228>
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	03db      	lsls	r3, r3, #15
 80015aa:	429f      	cmp	r7, r3
 80015ac:	d200      	bcs.n	80015b0 <__aeabi_fsub+0x45c>
 80015ae:	e6e5      	b.n	800137c <__aeabi_fsub+0x228>
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d300      	bcc.n	80015b6 <__aeabi_fsub+0x462>
 80015b4:	e6e2      	b.n	800137c <__aeabi_fsub+0x228>
 80015b6:	0007      	movs	r7, r0
 80015b8:	e6e0      	b.n	800137c <__aeabi_fsub+0x228>
 80015ba:	2900      	cmp	r1, #0
 80015bc:	d100      	bne.n	80015c0 <__aeabi_fsub+0x46c>
 80015be:	e69e      	b.n	80012fe <__aeabi_fsub+0x1aa>
 80015c0:	2300      	movs	r3, #0
 80015c2:	08cf      	lsrs	r7, r1, #3
 80015c4:	e641      	b.n	800124a <__aeabi_fsub+0xf6>
 80015c6:	0034      	movs	r4, r6
 80015c8:	2301      	movs	r3, #1
 80015ca:	08ff      	lsrs	r7, r7, #3
 80015cc:	e63d      	b.n	800124a <__aeabi_fsub+0xf6>
 80015ce:	2f00      	cmp	r7, #0
 80015d0:	d100      	bne.n	80015d4 <__aeabi_fsub+0x480>
 80015d2:	e693      	b.n	80012fc <__aeabi_fsub+0x1a8>
 80015d4:	2300      	movs	r3, #0
 80015d6:	08ff      	lsrs	r7, r7, #3
 80015d8:	e637      	b.n	800124a <__aeabi_fsub+0xf6>
 80015da:	2300      	movs	r3, #0
 80015dc:	08d7      	lsrs	r7, r2, #3
 80015de:	e634      	b.n	800124a <__aeabi_fsub+0xf6>
 80015e0:	2301      	movs	r3, #1
 80015e2:	08cf      	lsrs	r7, r1, #3
 80015e4:	e631      	b.n	800124a <__aeabi_fsub+0xf6>
 80015e6:	2280      	movs	r2, #128	@ 0x80
 80015e8:	000b      	movs	r3, r1
 80015ea:	04d2      	lsls	r2, r2, #19
 80015ec:	2001      	movs	r0, #1
 80015ee:	4013      	ands	r3, r2
 80015f0:	4211      	tst	r1, r2
 80015f2:	d000      	beq.n	80015f6 <__aeabi_fsub+0x4a2>
 80015f4:	e6ae      	b.n	8001354 <__aeabi_fsub+0x200>
 80015f6:	08cf      	lsrs	r7, r1, #3
 80015f8:	e627      	b.n	800124a <__aeabi_fsub+0xf6>
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d100      	bne.n	8001600 <__aeabi_fsub+0x4ac>
 80015fe:	e75f      	b.n	80014c0 <__aeabi_fsub+0x36c>
 8001600:	1b56      	subs	r6, r2, r5
 8001602:	2d00      	cmp	r5, #0
 8001604:	d101      	bne.n	800160a <__aeabi_fsub+0x4b6>
 8001606:	0033      	movs	r3, r6
 8001608:	e6e7      	b.n	80013da <__aeabi_fsub+0x286>
 800160a:	2380      	movs	r3, #128	@ 0x80
 800160c:	4660      	mov	r0, ip
 800160e:	04db      	lsls	r3, r3, #19
 8001610:	4318      	orrs	r0, r3
 8001612:	4684      	mov	ip, r0
 8001614:	e6eb      	b.n	80013ee <__aeabi_fsub+0x29a>
 8001616:	46c0      	nop			@ (mov r8, r8)
 8001618:	7dffffff 	.word	0x7dffffff

0800161c <__aeabi_f2iz>:
 800161c:	0241      	lsls	r1, r0, #9
 800161e:	0042      	lsls	r2, r0, #1
 8001620:	0fc3      	lsrs	r3, r0, #31
 8001622:	0a49      	lsrs	r1, r1, #9
 8001624:	2000      	movs	r0, #0
 8001626:	0e12      	lsrs	r2, r2, #24
 8001628:	2a7e      	cmp	r2, #126	@ 0x7e
 800162a:	dd03      	ble.n	8001634 <__aeabi_f2iz+0x18>
 800162c:	2a9d      	cmp	r2, #157	@ 0x9d
 800162e:	dd02      	ble.n	8001636 <__aeabi_f2iz+0x1a>
 8001630:	4a09      	ldr	r2, [pc, #36]	@ (8001658 <__aeabi_f2iz+0x3c>)
 8001632:	1898      	adds	r0, r3, r2
 8001634:	4770      	bx	lr
 8001636:	2080      	movs	r0, #128	@ 0x80
 8001638:	0400      	lsls	r0, r0, #16
 800163a:	4301      	orrs	r1, r0
 800163c:	2a95      	cmp	r2, #149	@ 0x95
 800163e:	dc07      	bgt.n	8001650 <__aeabi_f2iz+0x34>
 8001640:	2096      	movs	r0, #150	@ 0x96
 8001642:	1a82      	subs	r2, r0, r2
 8001644:	40d1      	lsrs	r1, r2
 8001646:	4248      	negs	r0, r1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1f3      	bne.n	8001634 <__aeabi_f2iz+0x18>
 800164c:	0008      	movs	r0, r1
 800164e:	e7f1      	b.n	8001634 <__aeabi_f2iz+0x18>
 8001650:	3a96      	subs	r2, #150	@ 0x96
 8001652:	4091      	lsls	r1, r2
 8001654:	e7f7      	b.n	8001646 <__aeabi_f2iz+0x2a>
 8001656:	46c0      	nop			@ (mov r8, r8)
 8001658:	7fffffff 	.word	0x7fffffff

0800165c <__aeabi_i2f>:
 800165c:	b570      	push	{r4, r5, r6, lr}
 800165e:	2800      	cmp	r0, #0
 8001660:	d012      	beq.n	8001688 <__aeabi_i2f+0x2c>
 8001662:	17c3      	asrs	r3, r0, #31
 8001664:	18c5      	adds	r5, r0, r3
 8001666:	405d      	eors	r5, r3
 8001668:	0fc4      	lsrs	r4, r0, #31
 800166a:	0028      	movs	r0, r5
 800166c:	f002 f874 	bl	8003758 <__clzsi2>
 8001670:	239e      	movs	r3, #158	@ 0x9e
 8001672:	1a1b      	subs	r3, r3, r0
 8001674:	2b96      	cmp	r3, #150	@ 0x96
 8001676:	dc0f      	bgt.n	8001698 <__aeabi_i2f+0x3c>
 8001678:	2808      	cmp	r0, #8
 800167a:	d038      	beq.n	80016ee <__aeabi_i2f+0x92>
 800167c:	3808      	subs	r0, #8
 800167e:	4085      	lsls	r5, r0
 8001680:	026d      	lsls	r5, r5, #9
 8001682:	0a6d      	lsrs	r5, r5, #9
 8001684:	b2d8      	uxtb	r0, r3
 8001686:	e002      	b.n	800168e <__aeabi_i2f+0x32>
 8001688:	2400      	movs	r4, #0
 800168a:	2000      	movs	r0, #0
 800168c:	2500      	movs	r5, #0
 800168e:	05c0      	lsls	r0, r0, #23
 8001690:	4328      	orrs	r0, r5
 8001692:	07e4      	lsls	r4, r4, #31
 8001694:	4320      	orrs	r0, r4
 8001696:	bd70      	pop	{r4, r5, r6, pc}
 8001698:	2b99      	cmp	r3, #153	@ 0x99
 800169a:	dc14      	bgt.n	80016c6 <__aeabi_i2f+0x6a>
 800169c:	1f42      	subs	r2, r0, #5
 800169e:	4095      	lsls	r5, r2
 80016a0:	002a      	movs	r2, r5
 80016a2:	4915      	ldr	r1, [pc, #84]	@ (80016f8 <__aeabi_i2f+0x9c>)
 80016a4:	4011      	ands	r1, r2
 80016a6:	0755      	lsls	r5, r2, #29
 80016a8:	d01c      	beq.n	80016e4 <__aeabi_i2f+0x88>
 80016aa:	250f      	movs	r5, #15
 80016ac:	402a      	ands	r2, r5
 80016ae:	2a04      	cmp	r2, #4
 80016b0:	d018      	beq.n	80016e4 <__aeabi_i2f+0x88>
 80016b2:	3104      	adds	r1, #4
 80016b4:	08ca      	lsrs	r2, r1, #3
 80016b6:	0149      	lsls	r1, r1, #5
 80016b8:	d515      	bpl.n	80016e6 <__aeabi_i2f+0x8a>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	0252      	lsls	r2, r2, #9
 80016be:	1a18      	subs	r0, r3, r0
 80016c0:	0a55      	lsrs	r5, r2, #9
 80016c2:	b2c0      	uxtb	r0, r0
 80016c4:	e7e3      	b.n	800168e <__aeabi_i2f+0x32>
 80016c6:	2205      	movs	r2, #5
 80016c8:	0029      	movs	r1, r5
 80016ca:	1a12      	subs	r2, r2, r0
 80016cc:	40d1      	lsrs	r1, r2
 80016ce:	0002      	movs	r2, r0
 80016d0:	321b      	adds	r2, #27
 80016d2:	4095      	lsls	r5, r2
 80016d4:	002a      	movs	r2, r5
 80016d6:	1e55      	subs	r5, r2, #1
 80016d8:	41aa      	sbcs	r2, r5
 80016da:	430a      	orrs	r2, r1
 80016dc:	4906      	ldr	r1, [pc, #24]	@ (80016f8 <__aeabi_i2f+0x9c>)
 80016de:	4011      	ands	r1, r2
 80016e0:	0755      	lsls	r5, r2, #29
 80016e2:	d1e2      	bne.n	80016aa <__aeabi_i2f+0x4e>
 80016e4:	08ca      	lsrs	r2, r1, #3
 80016e6:	0252      	lsls	r2, r2, #9
 80016e8:	0a55      	lsrs	r5, r2, #9
 80016ea:	b2d8      	uxtb	r0, r3
 80016ec:	e7cf      	b.n	800168e <__aeabi_i2f+0x32>
 80016ee:	026d      	lsls	r5, r5, #9
 80016f0:	0a6d      	lsrs	r5, r5, #9
 80016f2:	308e      	adds	r0, #142	@ 0x8e
 80016f4:	e7cb      	b.n	800168e <__aeabi_i2f+0x32>
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	fbffffff 	.word	0xfbffffff

080016fc <__aeabi_ui2f>:
 80016fc:	b510      	push	{r4, lr}
 80016fe:	1e04      	subs	r4, r0, #0
 8001700:	d00d      	beq.n	800171e <__aeabi_ui2f+0x22>
 8001702:	f002 f829 	bl	8003758 <__clzsi2>
 8001706:	239e      	movs	r3, #158	@ 0x9e
 8001708:	1a1b      	subs	r3, r3, r0
 800170a:	2b96      	cmp	r3, #150	@ 0x96
 800170c:	dc0c      	bgt.n	8001728 <__aeabi_ui2f+0x2c>
 800170e:	2808      	cmp	r0, #8
 8001710:	d034      	beq.n	800177c <__aeabi_ui2f+0x80>
 8001712:	3808      	subs	r0, #8
 8001714:	4084      	lsls	r4, r0
 8001716:	0264      	lsls	r4, r4, #9
 8001718:	0a64      	lsrs	r4, r4, #9
 800171a:	b2d8      	uxtb	r0, r3
 800171c:	e001      	b.n	8001722 <__aeabi_ui2f+0x26>
 800171e:	2000      	movs	r0, #0
 8001720:	2400      	movs	r4, #0
 8001722:	05c0      	lsls	r0, r0, #23
 8001724:	4320      	orrs	r0, r4
 8001726:	bd10      	pop	{r4, pc}
 8001728:	2b99      	cmp	r3, #153	@ 0x99
 800172a:	dc13      	bgt.n	8001754 <__aeabi_ui2f+0x58>
 800172c:	1f42      	subs	r2, r0, #5
 800172e:	4094      	lsls	r4, r2
 8001730:	4a14      	ldr	r2, [pc, #80]	@ (8001784 <__aeabi_ui2f+0x88>)
 8001732:	4022      	ands	r2, r4
 8001734:	0761      	lsls	r1, r4, #29
 8001736:	d01c      	beq.n	8001772 <__aeabi_ui2f+0x76>
 8001738:	210f      	movs	r1, #15
 800173a:	4021      	ands	r1, r4
 800173c:	2904      	cmp	r1, #4
 800173e:	d018      	beq.n	8001772 <__aeabi_ui2f+0x76>
 8001740:	3204      	adds	r2, #4
 8001742:	08d4      	lsrs	r4, r2, #3
 8001744:	0152      	lsls	r2, r2, #5
 8001746:	d515      	bpl.n	8001774 <__aeabi_ui2f+0x78>
 8001748:	239f      	movs	r3, #159	@ 0x9f
 800174a:	0264      	lsls	r4, r4, #9
 800174c:	1a18      	subs	r0, r3, r0
 800174e:	0a64      	lsrs	r4, r4, #9
 8001750:	b2c0      	uxtb	r0, r0
 8001752:	e7e6      	b.n	8001722 <__aeabi_ui2f+0x26>
 8001754:	0002      	movs	r2, r0
 8001756:	0021      	movs	r1, r4
 8001758:	321b      	adds	r2, #27
 800175a:	4091      	lsls	r1, r2
 800175c:	000a      	movs	r2, r1
 800175e:	1e51      	subs	r1, r2, #1
 8001760:	418a      	sbcs	r2, r1
 8001762:	2105      	movs	r1, #5
 8001764:	1a09      	subs	r1, r1, r0
 8001766:	40cc      	lsrs	r4, r1
 8001768:	4314      	orrs	r4, r2
 800176a:	4a06      	ldr	r2, [pc, #24]	@ (8001784 <__aeabi_ui2f+0x88>)
 800176c:	4022      	ands	r2, r4
 800176e:	0761      	lsls	r1, r4, #29
 8001770:	d1e2      	bne.n	8001738 <__aeabi_ui2f+0x3c>
 8001772:	08d4      	lsrs	r4, r2, #3
 8001774:	0264      	lsls	r4, r4, #9
 8001776:	0a64      	lsrs	r4, r4, #9
 8001778:	b2d8      	uxtb	r0, r3
 800177a:	e7d2      	b.n	8001722 <__aeabi_ui2f+0x26>
 800177c:	0264      	lsls	r4, r4, #9
 800177e:	0a64      	lsrs	r4, r4, #9
 8001780:	308e      	adds	r0, #142	@ 0x8e
 8001782:	e7ce      	b.n	8001722 <__aeabi_ui2f+0x26>
 8001784:	fbffffff 	.word	0xfbffffff

08001788 <__aeabi_dadd>:
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	464f      	mov	r7, r9
 800178c:	4646      	mov	r6, r8
 800178e:	46d6      	mov	lr, sl
 8001790:	b5c0      	push	{r6, r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	9000      	str	r0, [sp, #0]
 8001796:	9101      	str	r1, [sp, #4]
 8001798:	030e      	lsls	r6, r1, #12
 800179a:	004c      	lsls	r4, r1, #1
 800179c:	0fcd      	lsrs	r5, r1, #31
 800179e:	0a71      	lsrs	r1, r6, #9
 80017a0:	9e00      	ldr	r6, [sp, #0]
 80017a2:	005f      	lsls	r7, r3, #1
 80017a4:	0f76      	lsrs	r6, r6, #29
 80017a6:	430e      	orrs	r6, r1
 80017a8:	9900      	ldr	r1, [sp, #0]
 80017aa:	9200      	str	r2, [sp, #0]
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	00c9      	lsls	r1, r1, #3
 80017b0:	4689      	mov	r9, r1
 80017b2:	0319      	lsls	r1, r3, #12
 80017b4:	0d7b      	lsrs	r3, r7, #21
 80017b6:	4698      	mov	r8, r3
 80017b8:	9b01      	ldr	r3, [sp, #4]
 80017ba:	0a49      	lsrs	r1, r1, #9
 80017bc:	0fdb      	lsrs	r3, r3, #31
 80017be:	469c      	mov	ip, r3
 80017c0:	9b00      	ldr	r3, [sp, #0]
 80017c2:	9a00      	ldr	r2, [sp, #0]
 80017c4:	0f5b      	lsrs	r3, r3, #29
 80017c6:	430b      	orrs	r3, r1
 80017c8:	4641      	mov	r1, r8
 80017ca:	0d64      	lsrs	r4, r4, #21
 80017cc:	00d2      	lsls	r2, r2, #3
 80017ce:	1a61      	subs	r1, r4, r1
 80017d0:	4565      	cmp	r5, ip
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dadd+0x4e>
 80017d4:	e0a6      	b.n	8001924 <__aeabi_dadd+0x19c>
 80017d6:	2900      	cmp	r1, #0
 80017d8:	dd72      	ble.n	80018c0 <__aeabi_dadd+0x138>
 80017da:	4647      	mov	r7, r8
 80017dc:	2f00      	cmp	r7, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dadd+0x5a>
 80017e0:	e0dd      	b.n	800199e <__aeabi_dadd+0x216>
 80017e2:	4fcc      	ldr	r7, [pc, #816]	@ (8001b14 <__aeabi_dadd+0x38c>)
 80017e4:	42bc      	cmp	r4, r7
 80017e6:	d100      	bne.n	80017ea <__aeabi_dadd+0x62>
 80017e8:	e19a      	b.n	8001b20 <__aeabi_dadd+0x398>
 80017ea:	2701      	movs	r7, #1
 80017ec:	2938      	cmp	r1, #56	@ 0x38
 80017ee:	dc17      	bgt.n	8001820 <__aeabi_dadd+0x98>
 80017f0:	2780      	movs	r7, #128	@ 0x80
 80017f2:	043f      	lsls	r7, r7, #16
 80017f4:	433b      	orrs	r3, r7
 80017f6:	291f      	cmp	r1, #31
 80017f8:	dd00      	ble.n	80017fc <__aeabi_dadd+0x74>
 80017fa:	e1dd      	b.n	8001bb8 <__aeabi_dadd+0x430>
 80017fc:	2720      	movs	r7, #32
 80017fe:	1a78      	subs	r0, r7, r1
 8001800:	001f      	movs	r7, r3
 8001802:	4087      	lsls	r7, r0
 8001804:	46ba      	mov	sl, r7
 8001806:	0017      	movs	r7, r2
 8001808:	40cf      	lsrs	r7, r1
 800180a:	4684      	mov	ip, r0
 800180c:	0038      	movs	r0, r7
 800180e:	4657      	mov	r7, sl
 8001810:	4307      	orrs	r7, r0
 8001812:	4660      	mov	r0, ip
 8001814:	4082      	lsls	r2, r0
 8001816:	40cb      	lsrs	r3, r1
 8001818:	1e50      	subs	r0, r2, #1
 800181a:	4182      	sbcs	r2, r0
 800181c:	1af6      	subs	r6, r6, r3
 800181e:	4317      	orrs	r7, r2
 8001820:	464b      	mov	r3, r9
 8001822:	1bdf      	subs	r7, r3, r7
 8001824:	45b9      	cmp	r9, r7
 8001826:	4180      	sbcs	r0, r0
 8001828:	4240      	negs	r0, r0
 800182a:	1a36      	subs	r6, r6, r0
 800182c:	0233      	lsls	r3, r6, #8
 800182e:	d400      	bmi.n	8001832 <__aeabi_dadd+0xaa>
 8001830:	e0ff      	b.n	8001a32 <__aeabi_dadd+0x2aa>
 8001832:	0276      	lsls	r6, r6, #9
 8001834:	0a76      	lsrs	r6, r6, #9
 8001836:	2e00      	cmp	r6, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0xb4>
 800183a:	e13c      	b.n	8001ab6 <__aeabi_dadd+0x32e>
 800183c:	0030      	movs	r0, r6
 800183e:	f001 ff8b 	bl	8003758 <__clzsi2>
 8001842:	0003      	movs	r3, r0
 8001844:	3b08      	subs	r3, #8
 8001846:	2120      	movs	r1, #32
 8001848:	0038      	movs	r0, r7
 800184a:	1aca      	subs	r2, r1, r3
 800184c:	40d0      	lsrs	r0, r2
 800184e:	409e      	lsls	r6, r3
 8001850:	0002      	movs	r2, r0
 8001852:	409f      	lsls	r7, r3
 8001854:	4332      	orrs	r2, r6
 8001856:	429c      	cmp	r4, r3
 8001858:	dd00      	ble.n	800185c <__aeabi_dadd+0xd4>
 800185a:	e1a6      	b.n	8001baa <__aeabi_dadd+0x422>
 800185c:	1b18      	subs	r0, r3, r4
 800185e:	3001      	adds	r0, #1
 8001860:	1a09      	subs	r1, r1, r0
 8001862:	003e      	movs	r6, r7
 8001864:	408f      	lsls	r7, r1
 8001866:	40c6      	lsrs	r6, r0
 8001868:	1e7b      	subs	r3, r7, #1
 800186a:	419f      	sbcs	r7, r3
 800186c:	0013      	movs	r3, r2
 800186e:	408b      	lsls	r3, r1
 8001870:	4337      	orrs	r7, r6
 8001872:	431f      	orrs	r7, r3
 8001874:	40c2      	lsrs	r2, r0
 8001876:	003b      	movs	r3, r7
 8001878:	0016      	movs	r6, r2
 800187a:	2400      	movs	r4, #0
 800187c:	4313      	orrs	r3, r2
 800187e:	d100      	bne.n	8001882 <__aeabi_dadd+0xfa>
 8001880:	e1df      	b.n	8001c42 <__aeabi_dadd+0x4ba>
 8001882:	077b      	lsls	r3, r7, #29
 8001884:	d100      	bne.n	8001888 <__aeabi_dadd+0x100>
 8001886:	e332      	b.n	8001eee <__aeabi_dadd+0x766>
 8001888:	230f      	movs	r3, #15
 800188a:	003a      	movs	r2, r7
 800188c:	403b      	ands	r3, r7
 800188e:	2b04      	cmp	r3, #4
 8001890:	d004      	beq.n	800189c <__aeabi_dadd+0x114>
 8001892:	1d3a      	adds	r2, r7, #4
 8001894:	42ba      	cmp	r2, r7
 8001896:	41bf      	sbcs	r7, r7
 8001898:	427f      	negs	r7, r7
 800189a:	19f6      	adds	r6, r6, r7
 800189c:	0233      	lsls	r3, r6, #8
 800189e:	d400      	bmi.n	80018a2 <__aeabi_dadd+0x11a>
 80018a0:	e323      	b.n	8001eea <__aeabi_dadd+0x762>
 80018a2:	4b9c      	ldr	r3, [pc, #624]	@ (8001b14 <__aeabi_dadd+0x38c>)
 80018a4:	3401      	adds	r4, #1
 80018a6:	429c      	cmp	r4, r3
 80018a8:	d100      	bne.n	80018ac <__aeabi_dadd+0x124>
 80018aa:	e0b4      	b.n	8001a16 <__aeabi_dadd+0x28e>
 80018ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001b18 <__aeabi_dadd+0x390>)
 80018ae:	0564      	lsls	r4, r4, #21
 80018b0:	401e      	ands	r6, r3
 80018b2:	0d64      	lsrs	r4, r4, #21
 80018b4:	0777      	lsls	r7, r6, #29
 80018b6:	08d2      	lsrs	r2, r2, #3
 80018b8:	0276      	lsls	r6, r6, #9
 80018ba:	4317      	orrs	r7, r2
 80018bc:	0b36      	lsrs	r6, r6, #12
 80018be:	e0ac      	b.n	8001a1a <__aeabi_dadd+0x292>
 80018c0:	2900      	cmp	r1, #0
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x13e>
 80018c4:	e07e      	b.n	80019c4 <__aeabi_dadd+0x23c>
 80018c6:	4641      	mov	r1, r8
 80018c8:	1b09      	subs	r1, r1, r4
 80018ca:	2c00      	cmp	r4, #0
 80018cc:	d000      	beq.n	80018d0 <__aeabi_dadd+0x148>
 80018ce:	e160      	b.n	8001b92 <__aeabi_dadd+0x40a>
 80018d0:	0034      	movs	r4, r6
 80018d2:	4648      	mov	r0, r9
 80018d4:	4304      	orrs	r4, r0
 80018d6:	d100      	bne.n	80018da <__aeabi_dadd+0x152>
 80018d8:	e1c9      	b.n	8001c6e <__aeabi_dadd+0x4e6>
 80018da:	1e4c      	subs	r4, r1, #1
 80018dc:	2901      	cmp	r1, #1
 80018de:	d100      	bne.n	80018e2 <__aeabi_dadd+0x15a>
 80018e0:	e22e      	b.n	8001d40 <__aeabi_dadd+0x5b8>
 80018e2:	4d8c      	ldr	r5, [pc, #560]	@ (8001b14 <__aeabi_dadd+0x38c>)
 80018e4:	42a9      	cmp	r1, r5
 80018e6:	d100      	bne.n	80018ea <__aeabi_dadd+0x162>
 80018e8:	e224      	b.n	8001d34 <__aeabi_dadd+0x5ac>
 80018ea:	2701      	movs	r7, #1
 80018ec:	2c38      	cmp	r4, #56	@ 0x38
 80018ee:	dc11      	bgt.n	8001914 <__aeabi_dadd+0x18c>
 80018f0:	0021      	movs	r1, r4
 80018f2:	291f      	cmp	r1, #31
 80018f4:	dd00      	ble.n	80018f8 <__aeabi_dadd+0x170>
 80018f6:	e20b      	b.n	8001d10 <__aeabi_dadd+0x588>
 80018f8:	2420      	movs	r4, #32
 80018fa:	0037      	movs	r7, r6
 80018fc:	4648      	mov	r0, r9
 80018fe:	1a64      	subs	r4, r4, r1
 8001900:	40a7      	lsls	r7, r4
 8001902:	40c8      	lsrs	r0, r1
 8001904:	4307      	orrs	r7, r0
 8001906:	4648      	mov	r0, r9
 8001908:	40a0      	lsls	r0, r4
 800190a:	40ce      	lsrs	r6, r1
 800190c:	1e44      	subs	r4, r0, #1
 800190e:	41a0      	sbcs	r0, r4
 8001910:	1b9b      	subs	r3, r3, r6
 8001912:	4307      	orrs	r7, r0
 8001914:	1bd7      	subs	r7, r2, r7
 8001916:	42ba      	cmp	r2, r7
 8001918:	4192      	sbcs	r2, r2
 800191a:	4252      	negs	r2, r2
 800191c:	4665      	mov	r5, ip
 800191e:	4644      	mov	r4, r8
 8001920:	1a9e      	subs	r6, r3, r2
 8001922:	e783      	b.n	800182c <__aeabi_dadd+0xa4>
 8001924:	2900      	cmp	r1, #0
 8001926:	dc00      	bgt.n	800192a <__aeabi_dadd+0x1a2>
 8001928:	e09c      	b.n	8001a64 <__aeabi_dadd+0x2dc>
 800192a:	4647      	mov	r7, r8
 800192c:	2f00      	cmp	r7, #0
 800192e:	d167      	bne.n	8001a00 <__aeabi_dadd+0x278>
 8001930:	001f      	movs	r7, r3
 8001932:	4317      	orrs	r7, r2
 8001934:	d100      	bne.n	8001938 <__aeabi_dadd+0x1b0>
 8001936:	e0e4      	b.n	8001b02 <__aeabi_dadd+0x37a>
 8001938:	1e48      	subs	r0, r1, #1
 800193a:	2901      	cmp	r1, #1
 800193c:	d100      	bne.n	8001940 <__aeabi_dadd+0x1b8>
 800193e:	e19b      	b.n	8001c78 <__aeabi_dadd+0x4f0>
 8001940:	4f74      	ldr	r7, [pc, #464]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001942:	42b9      	cmp	r1, r7
 8001944:	d100      	bne.n	8001948 <__aeabi_dadd+0x1c0>
 8001946:	e0eb      	b.n	8001b20 <__aeabi_dadd+0x398>
 8001948:	2701      	movs	r7, #1
 800194a:	0001      	movs	r1, r0
 800194c:	2838      	cmp	r0, #56	@ 0x38
 800194e:	dc11      	bgt.n	8001974 <__aeabi_dadd+0x1ec>
 8001950:	291f      	cmp	r1, #31
 8001952:	dd00      	ble.n	8001956 <__aeabi_dadd+0x1ce>
 8001954:	e1c7      	b.n	8001ce6 <__aeabi_dadd+0x55e>
 8001956:	2720      	movs	r7, #32
 8001958:	1a78      	subs	r0, r7, r1
 800195a:	001f      	movs	r7, r3
 800195c:	4684      	mov	ip, r0
 800195e:	4087      	lsls	r7, r0
 8001960:	0010      	movs	r0, r2
 8001962:	40c8      	lsrs	r0, r1
 8001964:	4307      	orrs	r7, r0
 8001966:	4660      	mov	r0, ip
 8001968:	4082      	lsls	r2, r0
 800196a:	40cb      	lsrs	r3, r1
 800196c:	1e50      	subs	r0, r2, #1
 800196e:	4182      	sbcs	r2, r0
 8001970:	18f6      	adds	r6, r6, r3
 8001972:	4317      	orrs	r7, r2
 8001974:	444f      	add	r7, r9
 8001976:	454f      	cmp	r7, r9
 8001978:	4180      	sbcs	r0, r0
 800197a:	4240      	negs	r0, r0
 800197c:	1836      	adds	r6, r6, r0
 800197e:	0233      	lsls	r3, r6, #8
 8001980:	d557      	bpl.n	8001a32 <__aeabi_dadd+0x2aa>
 8001982:	4b64      	ldr	r3, [pc, #400]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001984:	3401      	adds	r4, #1
 8001986:	429c      	cmp	r4, r3
 8001988:	d045      	beq.n	8001a16 <__aeabi_dadd+0x28e>
 800198a:	2101      	movs	r1, #1
 800198c:	4b62      	ldr	r3, [pc, #392]	@ (8001b18 <__aeabi_dadd+0x390>)
 800198e:	087a      	lsrs	r2, r7, #1
 8001990:	401e      	ands	r6, r3
 8001992:	4039      	ands	r1, r7
 8001994:	430a      	orrs	r2, r1
 8001996:	07f7      	lsls	r7, r6, #31
 8001998:	4317      	orrs	r7, r2
 800199a:	0876      	lsrs	r6, r6, #1
 800199c:	e771      	b.n	8001882 <__aeabi_dadd+0xfa>
 800199e:	001f      	movs	r7, r3
 80019a0:	4317      	orrs	r7, r2
 80019a2:	d100      	bne.n	80019a6 <__aeabi_dadd+0x21e>
 80019a4:	e0ad      	b.n	8001b02 <__aeabi_dadd+0x37a>
 80019a6:	1e4f      	subs	r7, r1, #1
 80019a8:	46bc      	mov	ip, r7
 80019aa:	2901      	cmp	r1, #1
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dadd+0x228>
 80019ae:	e182      	b.n	8001cb6 <__aeabi_dadd+0x52e>
 80019b0:	4f58      	ldr	r7, [pc, #352]	@ (8001b14 <__aeabi_dadd+0x38c>)
 80019b2:	42b9      	cmp	r1, r7
 80019b4:	d100      	bne.n	80019b8 <__aeabi_dadd+0x230>
 80019b6:	e190      	b.n	8001cda <__aeabi_dadd+0x552>
 80019b8:	4661      	mov	r1, ip
 80019ba:	2701      	movs	r7, #1
 80019bc:	2938      	cmp	r1, #56	@ 0x38
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dadd+0x23a>
 80019c0:	e72e      	b.n	8001820 <__aeabi_dadd+0x98>
 80019c2:	e718      	b.n	80017f6 <__aeabi_dadd+0x6e>
 80019c4:	4f55      	ldr	r7, [pc, #340]	@ (8001b1c <__aeabi_dadd+0x394>)
 80019c6:	1c61      	adds	r1, r4, #1
 80019c8:	4239      	tst	r1, r7
 80019ca:	d000      	beq.n	80019ce <__aeabi_dadd+0x246>
 80019cc:	e0d0      	b.n	8001b70 <__aeabi_dadd+0x3e8>
 80019ce:	0031      	movs	r1, r6
 80019d0:	4648      	mov	r0, r9
 80019d2:	001f      	movs	r7, r3
 80019d4:	4301      	orrs	r1, r0
 80019d6:	4317      	orrs	r7, r2
 80019d8:	2c00      	cmp	r4, #0
 80019da:	d000      	beq.n	80019de <__aeabi_dadd+0x256>
 80019dc:	e13d      	b.n	8001c5a <__aeabi_dadd+0x4d2>
 80019de:	2900      	cmp	r1, #0
 80019e0:	d100      	bne.n	80019e4 <__aeabi_dadd+0x25c>
 80019e2:	e1bc      	b.n	8001d5e <__aeabi_dadd+0x5d6>
 80019e4:	2f00      	cmp	r7, #0
 80019e6:	d000      	beq.n	80019ea <__aeabi_dadd+0x262>
 80019e8:	e1bf      	b.n	8001d6a <__aeabi_dadd+0x5e2>
 80019ea:	464b      	mov	r3, r9
 80019ec:	2100      	movs	r1, #0
 80019ee:	08d8      	lsrs	r0, r3, #3
 80019f0:	0777      	lsls	r7, r6, #29
 80019f2:	4307      	orrs	r7, r0
 80019f4:	08f0      	lsrs	r0, r6, #3
 80019f6:	0306      	lsls	r6, r0, #12
 80019f8:	054c      	lsls	r4, r1, #21
 80019fa:	0b36      	lsrs	r6, r6, #12
 80019fc:	0d64      	lsrs	r4, r4, #21
 80019fe:	e00c      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001a00:	4f44      	ldr	r7, [pc, #272]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001a02:	42bc      	cmp	r4, r7
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dadd+0x280>
 8001a06:	e08b      	b.n	8001b20 <__aeabi_dadd+0x398>
 8001a08:	2701      	movs	r7, #1
 8001a0a:	2938      	cmp	r1, #56	@ 0x38
 8001a0c:	dcb2      	bgt.n	8001974 <__aeabi_dadd+0x1ec>
 8001a0e:	2780      	movs	r7, #128	@ 0x80
 8001a10:	043f      	lsls	r7, r7, #16
 8001a12:	433b      	orrs	r3, r7
 8001a14:	e79c      	b.n	8001950 <__aeabi_dadd+0x1c8>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2700      	movs	r7, #0
 8001a1a:	0524      	lsls	r4, r4, #20
 8001a1c:	4334      	orrs	r4, r6
 8001a1e:	07ed      	lsls	r5, r5, #31
 8001a20:	432c      	orrs	r4, r5
 8001a22:	0038      	movs	r0, r7
 8001a24:	0021      	movs	r1, r4
 8001a26:	b002      	add	sp, #8
 8001a28:	bce0      	pop	{r5, r6, r7}
 8001a2a:	46ba      	mov	sl, r7
 8001a2c:	46b1      	mov	r9, r6
 8001a2e:	46a8      	mov	r8, r5
 8001a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a32:	077b      	lsls	r3, r7, #29
 8001a34:	d004      	beq.n	8001a40 <__aeabi_dadd+0x2b8>
 8001a36:	230f      	movs	r3, #15
 8001a38:	403b      	ands	r3, r7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d000      	beq.n	8001a40 <__aeabi_dadd+0x2b8>
 8001a3e:	e728      	b.n	8001892 <__aeabi_dadd+0x10a>
 8001a40:	08f8      	lsrs	r0, r7, #3
 8001a42:	4b34      	ldr	r3, [pc, #208]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001a44:	0777      	lsls	r7, r6, #29
 8001a46:	4307      	orrs	r7, r0
 8001a48:	08f0      	lsrs	r0, r6, #3
 8001a4a:	429c      	cmp	r4, r3
 8001a4c:	d000      	beq.n	8001a50 <__aeabi_dadd+0x2c8>
 8001a4e:	e24a      	b.n	8001ee6 <__aeabi_dadd+0x75e>
 8001a50:	003b      	movs	r3, r7
 8001a52:	4303      	orrs	r3, r0
 8001a54:	d059      	beq.n	8001b0a <__aeabi_dadd+0x382>
 8001a56:	2680      	movs	r6, #128	@ 0x80
 8001a58:	0336      	lsls	r6, r6, #12
 8001a5a:	4306      	orrs	r6, r0
 8001a5c:	0336      	lsls	r6, r6, #12
 8001a5e:	4c2d      	ldr	r4, [pc, #180]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001a60:	0b36      	lsrs	r6, r6, #12
 8001a62:	e7da      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001a64:	2900      	cmp	r1, #0
 8001a66:	d061      	beq.n	8001b2c <__aeabi_dadd+0x3a4>
 8001a68:	4641      	mov	r1, r8
 8001a6a:	1b09      	subs	r1, r1, r4
 8001a6c:	2c00      	cmp	r4, #0
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dadd+0x2ea>
 8001a70:	e0b9      	b.n	8001be6 <__aeabi_dadd+0x45e>
 8001a72:	4c28      	ldr	r4, [pc, #160]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001a74:	45a0      	cmp	r8, r4
 8001a76:	d100      	bne.n	8001a7a <__aeabi_dadd+0x2f2>
 8001a78:	e1a5      	b.n	8001dc6 <__aeabi_dadd+0x63e>
 8001a7a:	2701      	movs	r7, #1
 8001a7c:	2938      	cmp	r1, #56	@ 0x38
 8001a7e:	dc13      	bgt.n	8001aa8 <__aeabi_dadd+0x320>
 8001a80:	2480      	movs	r4, #128	@ 0x80
 8001a82:	0424      	lsls	r4, r4, #16
 8001a84:	4326      	orrs	r6, r4
 8001a86:	291f      	cmp	r1, #31
 8001a88:	dd00      	ble.n	8001a8c <__aeabi_dadd+0x304>
 8001a8a:	e1c8      	b.n	8001e1e <__aeabi_dadd+0x696>
 8001a8c:	2420      	movs	r4, #32
 8001a8e:	0037      	movs	r7, r6
 8001a90:	4648      	mov	r0, r9
 8001a92:	1a64      	subs	r4, r4, r1
 8001a94:	40a7      	lsls	r7, r4
 8001a96:	40c8      	lsrs	r0, r1
 8001a98:	4307      	orrs	r7, r0
 8001a9a:	4648      	mov	r0, r9
 8001a9c:	40a0      	lsls	r0, r4
 8001a9e:	40ce      	lsrs	r6, r1
 8001aa0:	1e44      	subs	r4, r0, #1
 8001aa2:	41a0      	sbcs	r0, r4
 8001aa4:	199b      	adds	r3, r3, r6
 8001aa6:	4307      	orrs	r7, r0
 8001aa8:	18bf      	adds	r7, r7, r2
 8001aaa:	4297      	cmp	r7, r2
 8001aac:	4192      	sbcs	r2, r2
 8001aae:	4252      	negs	r2, r2
 8001ab0:	4644      	mov	r4, r8
 8001ab2:	18d6      	adds	r6, r2, r3
 8001ab4:	e763      	b.n	800197e <__aeabi_dadd+0x1f6>
 8001ab6:	0038      	movs	r0, r7
 8001ab8:	f001 fe4e 	bl	8003758 <__clzsi2>
 8001abc:	0003      	movs	r3, r0
 8001abe:	3318      	adds	r3, #24
 8001ac0:	2b1f      	cmp	r3, #31
 8001ac2:	dc00      	bgt.n	8001ac6 <__aeabi_dadd+0x33e>
 8001ac4:	e6bf      	b.n	8001846 <__aeabi_dadd+0xbe>
 8001ac6:	003a      	movs	r2, r7
 8001ac8:	3808      	subs	r0, #8
 8001aca:	4082      	lsls	r2, r0
 8001acc:	429c      	cmp	r4, r3
 8001ace:	dd00      	ble.n	8001ad2 <__aeabi_dadd+0x34a>
 8001ad0:	e083      	b.n	8001bda <__aeabi_dadd+0x452>
 8001ad2:	1b1b      	subs	r3, r3, r4
 8001ad4:	1c58      	adds	r0, r3, #1
 8001ad6:	281f      	cmp	r0, #31
 8001ad8:	dc00      	bgt.n	8001adc <__aeabi_dadd+0x354>
 8001ada:	e1b4      	b.n	8001e46 <__aeabi_dadd+0x6be>
 8001adc:	0017      	movs	r7, r2
 8001ade:	3b1f      	subs	r3, #31
 8001ae0:	40df      	lsrs	r7, r3
 8001ae2:	2820      	cmp	r0, #32
 8001ae4:	d005      	beq.n	8001af2 <__aeabi_dadd+0x36a>
 8001ae6:	2340      	movs	r3, #64	@ 0x40
 8001ae8:	1a1b      	subs	r3, r3, r0
 8001aea:	409a      	lsls	r2, r3
 8001aec:	1e53      	subs	r3, r2, #1
 8001aee:	419a      	sbcs	r2, r3
 8001af0:	4317      	orrs	r7, r2
 8001af2:	2400      	movs	r4, #0
 8001af4:	2f00      	cmp	r7, #0
 8001af6:	d00a      	beq.n	8001b0e <__aeabi_dadd+0x386>
 8001af8:	077b      	lsls	r3, r7, #29
 8001afa:	d000      	beq.n	8001afe <__aeabi_dadd+0x376>
 8001afc:	e6c4      	b.n	8001888 <__aeabi_dadd+0x100>
 8001afe:	0026      	movs	r6, r4
 8001b00:	e79e      	b.n	8001a40 <__aeabi_dadd+0x2b8>
 8001b02:	464b      	mov	r3, r9
 8001b04:	000c      	movs	r4, r1
 8001b06:	08d8      	lsrs	r0, r3, #3
 8001b08:	e79b      	b.n	8001a42 <__aeabi_dadd+0x2ba>
 8001b0a:	2700      	movs	r7, #0
 8001b0c:	4c01      	ldr	r4, [pc, #4]	@ (8001b14 <__aeabi_dadd+0x38c>)
 8001b0e:	2600      	movs	r6, #0
 8001b10:	e783      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	000007ff 	.word	0x000007ff
 8001b18:	ff7fffff 	.word	0xff7fffff
 8001b1c:	000007fe 	.word	0x000007fe
 8001b20:	464b      	mov	r3, r9
 8001b22:	0777      	lsls	r7, r6, #29
 8001b24:	08d8      	lsrs	r0, r3, #3
 8001b26:	4307      	orrs	r7, r0
 8001b28:	08f0      	lsrs	r0, r6, #3
 8001b2a:	e791      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001b2c:	4fcd      	ldr	r7, [pc, #820]	@ (8001e64 <__aeabi_dadd+0x6dc>)
 8001b2e:	1c61      	adds	r1, r4, #1
 8001b30:	4239      	tst	r1, r7
 8001b32:	d16b      	bne.n	8001c0c <__aeabi_dadd+0x484>
 8001b34:	0031      	movs	r1, r6
 8001b36:	4648      	mov	r0, r9
 8001b38:	4301      	orrs	r1, r0
 8001b3a:	2c00      	cmp	r4, #0
 8001b3c:	d000      	beq.n	8001b40 <__aeabi_dadd+0x3b8>
 8001b3e:	e14b      	b.n	8001dd8 <__aeabi_dadd+0x650>
 8001b40:	001f      	movs	r7, r3
 8001b42:	4317      	orrs	r7, r2
 8001b44:	2900      	cmp	r1, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_dadd+0x3c2>
 8001b48:	e181      	b.n	8001e4e <__aeabi_dadd+0x6c6>
 8001b4a:	2f00      	cmp	r7, #0
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_dadd+0x3c8>
 8001b4e:	e74c      	b.n	80019ea <__aeabi_dadd+0x262>
 8001b50:	444a      	add	r2, r9
 8001b52:	454a      	cmp	r2, r9
 8001b54:	4180      	sbcs	r0, r0
 8001b56:	18f6      	adds	r6, r6, r3
 8001b58:	4240      	negs	r0, r0
 8001b5a:	1836      	adds	r6, r6, r0
 8001b5c:	0233      	lsls	r3, r6, #8
 8001b5e:	d500      	bpl.n	8001b62 <__aeabi_dadd+0x3da>
 8001b60:	e1b0      	b.n	8001ec4 <__aeabi_dadd+0x73c>
 8001b62:	0017      	movs	r7, r2
 8001b64:	4691      	mov	r9, r2
 8001b66:	4337      	orrs	r7, r6
 8001b68:	d000      	beq.n	8001b6c <__aeabi_dadd+0x3e4>
 8001b6a:	e73e      	b.n	80019ea <__aeabi_dadd+0x262>
 8001b6c:	2600      	movs	r6, #0
 8001b6e:	e754      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001b70:	4649      	mov	r1, r9
 8001b72:	1a89      	subs	r1, r1, r2
 8001b74:	4688      	mov	r8, r1
 8001b76:	45c1      	cmp	r9, r8
 8001b78:	41bf      	sbcs	r7, r7
 8001b7a:	1af1      	subs	r1, r6, r3
 8001b7c:	427f      	negs	r7, r7
 8001b7e:	1bc9      	subs	r1, r1, r7
 8001b80:	020f      	lsls	r7, r1, #8
 8001b82:	d461      	bmi.n	8001c48 <__aeabi_dadd+0x4c0>
 8001b84:	4647      	mov	r7, r8
 8001b86:	430f      	orrs	r7, r1
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dadd+0x404>
 8001b8a:	e0bd      	b.n	8001d08 <__aeabi_dadd+0x580>
 8001b8c:	000e      	movs	r6, r1
 8001b8e:	4647      	mov	r7, r8
 8001b90:	e651      	b.n	8001836 <__aeabi_dadd+0xae>
 8001b92:	4cb5      	ldr	r4, [pc, #724]	@ (8001e68 <__aeabi_dadd+0x6e0>)
 8001b94:	45a0      	cmp	r8, r4
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x412>
 8001b98:	e100      	b.n	8001d9c <__aeabi_dadd+0x614>
 8001b9a:	2701      	movs	r7, #1
 8001b9c:	2938      	cmp	r1, #56	@ 0x38
 8001b9e:	dd00      	ble.n	8001ba2 <__aeabi_dadd+0x41a>
 8001ba0:	e6b8      	b.n	8001914 <__aeabi_dadd+0x18c>
 8001ba2:	2480      	movs	r4, #128	@ 0x80
 8001ba4:	0424      	lsls	r4, r4, #16
 8001ba6:	4326      	orrs	r6, r4
 8001ba8:	e6a3      	b.n	80018f2 <__aeabi_dadd+0x16a>
 8001baa:	4eb0      	ldr	r6, [pc, #704]	@ (8001e6c <__aeabi_dadd+0x6e4>)
 8001bac:	1ae4      	subs	r4, r4, r3
 8001bae:	4016      	ands	r6, r2
 8001bb0:	077b      	lsls	r3, r7, #29
 8001bb2:	d000      	beq.n	8001bb6 <__aeabi_dadd+0x42e>
 8001bb4:	e73f      	b.n	8001a36 <__aeabi_dadd+0x2ae>
 8001bb6:	e743      	b.n	8001a40 <__aeabi_dadd+0x2b8>
 8001bb8:	000f      	movs	r7, r1
 8001bba:	0018      	movs	r0, r3
 8001bbc:	3f20      	subs	r7, #32
 8001bbe:	40f8      	lsrs	r0, r7
 8001bc0:	4684      	mov	ip, r0
 8001bc2:	2920      	cmp	r1, #32
 8001bc4:	d003      	beq.n	8001bce <__aeabi_dadd+0x446>
 8001bc6:	2740      	movs	r7, #64	@ 0x40
 8001bc8:	1a79      	subs	r1, r7, r1
 8001bca:	408b      	lsls	r3, r1
 8001bcc:	431a      	orrs	r2, r3
 8001bce:	1e53      	subs	r3, r2, #1
 8001bd0:	419a      	sbcs	r2, r3
 8001bd2:	4663      	mov	r3, ip
 8001bd4:	0017      	movs	r7, r2
 8001bd6:	431f      	orrs	r7, r3
 8001bd8:	e622      	b.n	8001820 <__aeabi_dadd+0x98>
 8001bda:	48a4      	ldr	r0, [pc, #656]	@ (8001e6c <__aeabi_dadd+0x6e4>)
 8001bdc:	1ae1      	subs	r1, r4, r3
 8001bde:	4010      	ands	r0, r2
 8001be0:	0747      	lsls	r7, r0, #29
 8001be2:	08c0      	lsrs	r0, r0, #3
 8001be4:	e707      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001be6:	0034      	movs	r4, r6
 8001be8:	4648      	mov	r0, r9
 8001bea:	4304      	orrs	r4, r0
 8001bec:	d100      	bne.n	8001bf0 <__aeabi_dadd+0x468>
 8001bee:	e0fa      	b.n	8001de6 <__aeabi_dadd+0x65e>
 8001bf0:	1e4c      	subs	r4, r1, #1
 8001bf2:	2901      	cmp	r1, #1
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dadd+0x470>
 8001bf6:	e0d7      	b.n	8001da8 <__aeabi_dadd+0x620>
 8001bf8:	4f9b      	ldr	r7, [pc, #620]	@ (8001e68 <__aeabi_dadd+0x6e0>)
 8001bfa:	42b9      	cmp	r1, r7
 8001bfc:	d100      	bne.n	8001c00 <__aeabi_dadd+0x478>
 8001bfe:	e0e2      	b.n	8001dc6 <__aeabi_dadd+0x63e>
 8001c00:	2701      	movs	r7, #1
 8001c02:	2c38      	cmp	r4, #56	@ 0x38
 8001c04:	dd00      	ble.n	8001c08 <__aeabi_dadd+0x480>
 8001c06:	e74f      	b.n	8001aa8 <__aeabi_dadd+0x320>
 8001c08:	0021      	movs	r1, r4
 8001c0a:	e73c      	b.n	8001a86 <__aeabi_dadd+0x2fe>
 8001c0c:	4c96      	ldr	r4, [pc, #600]	@ (8001e68 <__aeabi_dadd+0x6e0>)
 8001c0e:	42a1      	cmp	r1, r4
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dadd+0x48c>
 8001c12:	e0dd      	b.n	8001dd0 <__aeabi_dadd+0x648>
 8001c14:	444a      	add	r2, r9
 8001c16:	454a      	cmp	r2, r9
 8001c18:	4180      	sbcs	r0, r0
 8001c1a:	18f3      	adds	r3, r6, r3
 8001c1c:	4240      	negs	r0, r0
 8001c1e:	1818      	adds	r0, r3, r0
 8001c20:	07c7      	lsls	r7, r0, #31
 8001c22:	0852      	lsrs	r2, r2, #1
 8001c24:	4317      	orrs	r7, r2
 8001c26:	0846      	lsrs	r6, r0, #1
 8001c28:	0752      	lsls	r2, r2, #29
 8001c2a:	d005      	beq.n	8001c38 <__aeabi_dadd+0x4b0>
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	000c      	movs	r4, r1
 8001c30:	403a      	ands	r2, r7
 8001c32:	2a04      	cmp	r2, #4
 8001c34:	d000      	beq.n	8001c38 <__aeabi_dadd+0x4b0>
 8001c36:	e62c      	b.n	8001892 <__aeabi_dadd+0x10a>
 8001c38:	0776      	lsls	r6, r6, #29
 8001c3a:	08ff      	lsrs	r7, r7, #3
 8001c3c:	4337      	orrs	r7, r6
 8001c3e:	0900      	lsrs	r0, r0, #4
 8001c40:	e6d9      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001c42:	2700      	movs	r7, #0
 8001c44:	2600      	movs	r6, #0
 8001c46:	e6e8      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001c48:	4649      	mov	r1, r9
 8001c4a:	1a57      	subs	r7, r2, r1
 8001c4c:	42ba      	cmp	r2, r7
 8001c4e:	4192      	sbcs	r2, r2
 8001c50:	1b9e      	subs	r6, r3, r6
 8001c52:	4252      	negs	r2, r2
 8001c54:	4665      	mov	r5, ip
 8001c56:	1ab6      	subs	r6, r6, r2
 8001c58:	e5ed      	b.n	8001836 <__aeabi_dadd+0xae>
 8001c5a:	2900      	cmp	r1, #0
 8001c5c:	d000      	beq.n	8001c60 <__aeabi_dadd+0x4d8>
 8001c5e:	e0c6      	b.n	8001dee <__aeabi_dadd+0x666>
 8001c60:	2f00      	cmp	r7, #0
 8001c62:	d167      	bne.n	8001d34 <__aeabi_dadd+0x5ac>
 8001c64:	2680      	movs	r6, #128	@ 0x80
 8001c66:	2500      	movs	r5, #0
 8001c68:	4c7f      	ldr	r4, [pc, #508]	@ (8001e68 <__aeabi_dadd+0x6e0>)
 8001c6a:	0336      	lsls	r6, r6, #12
 8001c6c:	e6d5      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001c6e:	4665      	mov	r5, ip
 8001c70:	000c      	movs	r4, r1
 8001c72:	001e      	movs	r6, r3
 8001c74:	08d0      	lsrs	r0, r2, #3
 8001c76:	e6e4      	b.n	8001a42 <__aeabi_dadd+0x2ba>
 8001c78:	444a      	add	r2, r9
 8001c7a:	454a      	cmp	r2, r9
 8001c7c:	4180      	sbcs	r0, r0
 8001c7e:	18f3      	adds	r3, r6, r3
 8001c80:	4240      	negs	r0, r0
 8001c82:	1818      	adds	r0, r3, r0
 8001c84:	0011      	movs	r1, r2
 8001c86:	0203      	lsls	r3, r0, #8
 8001c88:	d400      	bmi.n	8001c8c <__aeabi_dadd+0x504>
 8001c8a:	e096      	b.n	8001dba <__aeabi_dadd+0x632>
 8001c8c:	4b77      	ldr	r3, [pc, #476]	@ (8001e6c <__aeabi_dadd+0x6e4>)
 8001c8e:	0849      	lsrs	r1, r1, #1
 8001c90:	4018      	ands	r0, r3
 8001c92:	07c3      	lsls	r3, r0, #31
 8001c94:	430b      	orrs	r3, r1
 8001c96:	0844      	lsrs	r4, r0, #1
 8001c98:	0749      	lsls	r1, r1, #29
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dadd+0x516>
 8001c9c:	e129      	b.n	8001ef2 <__aeabi_dadd+0x76a>
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	2a04      	cmp	r2, #4
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dadd+0x520>
 8001ca6:	e0ea      	b.n	8001e7e <__aeabi_dadd+0x6f6>
 8001ca8:	1d1f      	adds	r7, r3, #4
 8001caa:	429f      	cmp	r7, r3
 8001cac:	41b6      	sbcs	r6, r6
 8001cae:	4276      	negs	r6, r6
 8001cb0:	1936      	adds	r6, r6, r4
 8001cb2:	2402      	movs	r4, #2
 8001cb4:	e6c4      	b.n	8001a40 <__aeabi_dadd+0x2b8>
 8001cb6:	4649      	mov	r1, r9
 8001cb8:	1a8f      	subs	r7, r1, r2
 8001cba:	45b9      	cmp	r9, r7
 8001cbc:	4180      	sbcs	r0, r0
 8001cbe:	1af6      	subs	r6, r6, r3
 8001cc0:	4240      	negs	r0, r0
 8001cc2:	1a36      	subs	r6, r6, r0
 8001cc4:	0233      	lsls	r3, r6, #8
 8001cc6:	d406      	bmi.n	8001cd6 <__aeabi_dadd+0x54e>
 8001cc8:	0773      	lsls	r3, r6, #29
 8001cca:	08ff      	lsrs	r7, r7, #3
 8001ccc:	2101      	movs	r1, #1
 8001cce:	431f      	orrs	r7, r3
 8001cd0:	08f0      	lsrs	r0, r6, #3
 8001cd2:	e690      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001cd4:	4665      	mov	r5, ip
 8001cd6:	2401      	movs	r4, #1
 8001cd8:	e5ab      	b.n	8001832 <__aeabi_dadd+0xaa>
 8001cda:	464b      	mov	r3, r9
 8001cdc:	0777      	lsls	r7, r6, #29
 8001cde:	08d8      	lsrs	r0, r3, #3
 8001ce0:	4307      	orrs	r7, r0
 8001ce2:	08f0      	lsrs	r0, r6, #3
 8001ce4:	e6b4      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001ce6:	000f      	movs	r7, r1
 8001ce8:	0018      	movs	r0, r3
 8001cea:	3f20      	subs	r7, #32
 8001cec:	40f8      	lsrs	r0, r7
 8001cee:	4684      	mov	ip, r0
 8001cf0:	2920      	cmp	r1, #32
 8001cf2:	d003      	beq.n	8001cfc <__aeabi_dadd+0x574>
 8001cf4:	2740      	movs	r7, #64	@ 0x40
 8001cf6:	1a79      	subs	r1, r7, r1
 8001cf8:	408b      	lsls	r3, r1
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	1e53      	subs	r3, r2, #1
 8001cfe:	419a      	sbcs	r2, r3
 8001d00:	4663      	mov	r3, ip
 8001d02:	0017      	movs	r7, r2
 8001d04:	431f      	orrs	r7, r3
 8001d06:	e635      	b.n	8001974 <__aeabi_dadd+0x1ec>
 8001d08:	2500      	movs	r5, #0
 8001d0a:	2400      	movs	r4, #0
 8001d0c:	2600      	movs	r6, #0
 8001d0e:	e684      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001d10:	000c      	movs	r4, r1
 8001d12:	0035      	movs	r5, r6
 8001d14:	3c20      	subs	r4, #32
 8001d16:	40e5      	lsrs	r5, r4
 8001d18:	2920      	cmp	r1, #32
 8001d1a:	d005      	beq.n	8001d28 <__aeabi_dadd+0x5a0>
 8001d1c:	2440      	movs	r4, #64	@ 0x40
 8001d1e:	1a61      	subs	r1, r4, r1
 8001d20:	408e      	lsls	r6, r1
 8001d22:	4649      	mov	r1, r9
 8001d24:	4331      	orrs	r1, r6
 8001d26:	4689      	mov	r9, r1
 8001d28:	4648      	mov	r0, r9
 8001d2a:	1e41      	subs	r1, r0, #1
 8001d2c:	4188      	sbcs	r0, r1
 8001d2e:	0007      	movs	r7, r0
 8001d30:	432f      	orrs	r7, r5
 8001d32:	e5ef      	b.n	8001914 <__aeabi_dadd+0x18c>
 8001d34:	08d2      	lsrs	r2, r2, #3
 8001d36:	075f      	lsls	r7, r3, #29
 8001d38:	4665      	mov	r5, ip
 8001d3a:	4317      	orrs	r7, r2
 8001d3c:	08d8      	lsrs	r0, r3, #3
 8001d3e:	e687      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001d40:	1a17      	subs	r7, r2, r0
 8001d42:	42ba      	cmp	r2, r7
 8001d44:	4192      	sbcs	r2, r2
 8001d46:	1b9e      	subs	r6, r3, r6
 8001d48:	4252      	negs	r2, r2
 8001d4a:	1ab6      	subs	r6, r6, r2
 8001d4c:	0233      	lsls	r3, r6, #8
 8001d4e:	d4c1      	bmi.n	8001cd4 <__aeabi_dadd+0x54c>
 8001d50:	0773      	lsls	r3, r6, #29
 8001d52:	08ff      	lsrs	r7, r7, #3
 8001d54:	4665      	mov	r5, ip
 8001d56:	2101      	movs	r1, #1
 8001d58:	431f      	orrs	r7, r3
 8001d5a:	08f0      	lsrs	r0, r6, #3
 8001d5c:	e64b      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001d5e:	2f00      	cmp	r7, #0
 8001d60:	d07b      	beq.n	8001e5a <__aeabi_dadd+0x6d2>
 8001d62:	4665      	mov	r5, ip
 8001d64:	001e      	movs	r6, r3
 8001d66:	4691      	mov	r9, r2
 8001d68:	e63f      	b.n	80019ea <__aeabi_dadd+0x262>
 8001d6a:	1a81      	subs	r1, r0, r2
 8001d6c:	4688      	mov	r8, r1
 8001d6e:	45c1      	cmp	r9, r8
 8001d70:	41a4      	sbcs	r4, r4
 8001d72:	1af1      	subs	r1, r6, r3
 8001d74:	4264      	negs	r4, r4
 8001d76:	1b09      	subs	r1, r1, r4
 8001d78:	2480      	movs	r4, #128	@ 0x80
 8001d7a:	0424      	lsls	r4, r4, #16
 8001d7c:	4221      	tst	r1, r4
 8001d7e:	d077      	beq.n	8001e70 <__aeabi_dadd+0x6e8>
 8001d80:	1a10      	subs	r0, r2, r0
 8001d82:	4282      	cmp	r2, r0
 8001d84:	4192      	sbcs	r2, r2
 8001d86:	0007      	movs	r7, r0
 8001d88:	1b9e      	subs	r6, r3, r6
 8001d8a:	4252      	negs	r2, r2
 8001d8c:	1ab6      	subs	r6, r6, r2
 8001d8e:	4337      	orrs	r7, r6
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x60c>
 8001d92:	e0a0      	b.n	8001ed6 <__aeabi_dadd+0x74e>
 8001d94:	4665      	mov	r5, ip
 8001d96:	2400      	movs	r4, #0
 8001d98:	2600      	movs	r6, #0
 8001d9a:	e63e      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001d9c:	075f      	lsls	r7, r3, #29
 8001d9e:	08d2      	lsrs	r2, r2, #3
 8001da0:	4665      	mov	r5, ip
 8001da2:	4317      	orrs	r7, r2
 8001da4:	08d8      	lsrs	r0, r3, #3
 8001da6:	e653      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001da8:	1881      	adds	r1, r0, r2
 8001daa:	4291      	cmp	r1, r2
 8001dac:	4192      	sbcs	r2, r2
 8001dae:	18f0      	adds	r0, r6, r3
 8001db0:	4252      	negs	r2, r2
 8001db2:	1880      	adds	r0, r0, r2
 8001db4:	0203      	lsls	r3, r0, #8
 8001db6:	d500      	bpl.n	8001dba <__aeabi_dadd+0x632>
 8001db8:	e768      	b.n	8001c8c <__aeabi_dadd+0x504>
 8001dba:	0747      	lsls	r7, r0, #29
 8001dbc:	08c9      	lsrs	r1, r1, #3
 8001dbe:	430f      	orrs	r7, r1
 8001dc0:	08c0      	lsrs	r0, r0, #3
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	e617      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001dc6:	08d2      	lsrs	r2, r2, #3
 8001dc8:	075f      	lsls	r7, r3, #29
 8001dca:	4317      	orrs	r7, r2
 8001dcc:	08d8      	lsrs	r0, r3, #3
 8001dce:	e63f      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001dd0:	000c      	movs	r4, r1
 8001dd2:	2600      	movs	r6, #0
 8001dd4:	2700      	movs	r7, #0
 8001dd6:	e620      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001dd8:	2900      	cmp	r1, #0
 8001dda:	d156      	bne.n	8001e8a <__aeabi_dadd+0x702>
 8001ddc:	075f      	lsls	r7, r3, #29
 8001dde:	08d2      	lsrs	r2, r2, #3
 8001de0:	4317      	orrs	r7, r2
 8001de2:	08d8      	lsrs	r0, r3, #3
 8001de4:	e634      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001de6:	000c      	movs	r4, r1
 8001de8:	001e      	movs	r6, r3
 8001dea:	08d0      	lsrs	r0, r2, #3
 8001dec:	e629      	b.n	8001a42 <__aeabi_dadd+0x2ba>
 8001dee:	08c1      	lsrs	r1, r0, #3
 8001df0:	0770      	lsls	r0, r6, #29
 8001df2:	4301      	orrs	r1, r0
 8001df4:	08f0      	lsrs	r0, r6, #3
 8001df6:	2f00      	cmp	r7, #0
 8001df8:	d062      	beq.n	8001ec0 <__aeabi_dadd+0x738>
 8001dfa:	2480      	movs	r4, #128	@ 0x80
 8001dfc:	0324      	lsls	r4, r4, #12
 8001dfe:	4220      	tst	r0, r4
 8001e00:	d007      	beq.n	8001e12 <__aeabi_dadd+0x68a>
 8001e02:	08de      	lsrs	r6, r3, #3
 8001e04:	4226      	tst	r6, r4
 8001e06:	d104      	bne.n	8001e12 <__aeabi_dadd+0x68a>
 8001e08:	4665      	mov	r5, ip
 8001e0a:	0030      	movs	r0, r6
 8001e0c:	08d1      	lsrs	r1, r2, #3
 8001e0e:	075b      	lsls	r3, r3, #29
 8001e10:	4319      	orrs	r1, r3
 8001e12:	0f4f      	lsrs	r7, r1, #29
 8001e14:	00c9      	lsls	r1, r1, #3
 8001e16:	08c9      	lsrs	r1, r1, #3
 8001e18:	077f      	lsls	r7, r7, #29
 8001e1a:	430f      	orrs	r7, r1
 8001e1c:	e618      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001e1e:	000c      	movs	r4, r1
 8001e20:	0030      	movs	r0, r6
 8001e22:	3c20      	subs	r4, #32
 8001e24:	40e0      	lsrs	r0, r4
 8001e26:	4684      	mov	ip, r0
 8001e28:	2920      	cmp	r1, #32
 8001e2a:	d005      	beq.n	8001e38 <__aeabi_dadd+0x6b0>
 8001e2c:	2440      	movs	r4, #64	@ 0x40
 8001e2e:	1a61      	subs	r1, r4, r1
 8001e30:	408e      	lsls	r6, r1
 8001e32:	4649      	mov	r1, r9
 8001e34:	4331      	orrs	r1, r6
 8001e36:	4689      	mov	r9, r1
 8001e38:	4648      	mov	r0, r9
 8001e3a:	1e41      	subs	r1, r0, #1
 8001e3c:	4188      	sbcs	r0, r1
 8001e3e:	4661      	mov	r1, ip
 8001e40:	0007      	movs	r7, r0
 8001e42:	430f      	orrs	r7, r1
 8001e44:	e630      	b.n	8001aa8 <__aeabi_dadd+0x320>
 8001e46:	2120      	movs	r1, #32
 8001e48:	2700      	movs	r7, #0
 8001e4a:	1a09      	subs	r1, r1, r0
 8001e4c:	e50e      	b.n	800186c <__aeabi_dadd+0xe4>
 8001e4e:	001e      	movs	r6, r3
 8001e50:	2f00      	cmp	r7, #0
 8001e52:	d000      	beq.n	8001e56 <__aeabi_dadd+0x6ce>
 8001e54:	e522      	b.n	800189c <__aeabi_dadd+0x114>
 8001e56:	2400      	movs	r4, #0
 8001e58:	e758      	b.n	8001d0c <__aeabi_dadd+0x584>
 8001e5a:	2500      	movs	r5, #0
 8001e5c:	2400      	movs	r4, #0
 8001e5e:	2600      	movs	r6, #0
 8001e60:	e5db      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	000007fe 	.word	0x000007fe
 8001e68:	000007ff 	.word	0x000007ff
 8001e6c:	ff7fffff 	.word	0xff7fffff
 8001e70:	4647      	mov	r7, r8
 8001e72:	430f      	orrs	r7, r1
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dadd+0x6f0>
 8001e76:	e747      	b.n	8001d08 <__aeabi_dadd+0x580>
 8001e78:	000e      	movs	r6, r1
 8001e7a:	46c1      	mov	r9, r8
 8001e7c:	e5b5      	b.n	80019ea <__aeabi_dadd+0x262>
 8001e7e:	08df      	lsrs	r7, r3, #3
 8001e80:	0764      	lsls	r4, r4, #29
 8001e82:	2102      	movs	r1, #2
 8001e84:	4327      	orrs	r7, r4
 8001e86:	0900      	lsrs	r0, r0, #4
 8001e88:	e5b5      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	08c0      	lsrs	r0, r0, #3
 8001e8e:	0777      	lsls	r7, r6, #29
 8001e90:	4307      	orrs	r7, r0
 8001e92:	4311      	orrs	r1, r2
 8001e94:	08f0      	lsrs	r0, r6, #3
 8001e96:	2900      	cmp	r1, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dadd+0x714>
 8001e9a:	e5d9      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001e9c:	2180      	movs	r1, #128	@ 0x80
 8001e9e:	0309      	lsls	r1, r1, #12
 8001ea0:	4208      	tst	r0, r1
 8001ea2:	d007      	beq.n	8001eb4 <__aeabi_dadd+0x72c>
 8001ea4:	08dc      	lsrs	r4, r3, #3
 8001ea6:	420c      	tst	r4, r1
 8001ea8:	d104      	bne.n	8001eb4 <__aeabi_dadd+0x72c>
 8001eaa:	08d2      	lsrs	r2, r2, #3
 8001eac:	075b      	lsls	r3, r3, #29
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	0017      	movs	r7, r2
 8001eb2:	0020      	movs	r0, r4
 8001eb4:	0f7b      	lsrs	r3, r7, #29
 8001eb6:	00ff      	lsls	r7, r7, #3
 8001eb8:	08ff      	lsrs	r7, r7, #3
 8001eba:	075b      	lsls	r3, r3, #29
 8001ebc:	431f      	orrs	r7, r3
 8001ebe:	e5c7      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001ec0:	000f      	movs	r7, r1
 8001ec2:	e5c5      	b.n	8001a50 <__aeabi_dadd+0x2c8>
 8001ec4:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <__aeabi_dadd+0x788>)
 8001ec6:	08d2      	lsrs	r2, r2, #3
 8001ec8:	4033      	ands	r3, r6
 8001eca:	075f      	lsls	r7, r3, #29
 8001ecc:	025b      	lsls	r3, r3, #9
 8001ece:	2401      	movs	r4, #1
 8001ed0:	4317      	orrs	r7, r2
 8001ed2:	0b1e      	lsrs	r6, r3, #12
 8001ed4:	e5a1      	b.n	8001a1a <__aeabi_dadd+0x292>
 8001ed6:	4226      	tst	r6, r4
 8001ed8:	d012      	beq.n	8001f00 <__aeabi_dadd+0x778>
 8001eda:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <__aeabi_dadd+0x788>)
 8001edc:	4665      	mov	r5, ip
 8001ede:	0002      	movs	r2, r0
 8001ee0:	2401      	movs	r4, #1
 8001ee2:	401e      	ands	r6, r3
 8001ee4:	e4e6      	b.n	80018b4 <__aeabi_dadd+0x12c>
 8001ee6:	0021      	movs	r1, r4
 8001ee8:	e585      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001eea:	0017      	movs	r7, r2
 8001eec:	e5a8      	b.n	8001a40 <__aeabi_dadd+0x2b8>
 8001eee:	003a      	movs	r2, r7
 8001ef0:	e4d4      	b.n	800189c <__aeabi_dadd+0x114>
 8001ef2:	08db      	lsrs	r3, r3, #3
 8001ef4:	0764      	lsls	r4, r4, #29
 8001ef6:	431c      	orrs	r4, r3
 8001ef8:	0027      	movs	r7, r4
 8001efa:	2102      	movs	r1, #2
 8001efc:	0900      	lsrs	r0, r0, #4
 8001efe:	e57a      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001f00:	08c0      	lsrs	r0, r0, #3
 8001f02:	0777      	lsls	r7, r6, #29
 8001f04:	4307      	orrs	r7, r0
 8001f06:	4665      	mov	r5, ip
 8001f08:	2100      	movs	r1, #0
 8001f0a:	08f0      	lsrs	r0, r6, #3
 8001f0c:	e573      	b.n	80019f6 <__aeabi_dadd+0x26e>
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	ff7fffff 	.word	0xff7fffff

08001f14 <__aeabi_ddiv>:
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	46de      	mov	lr, fp
 8001f18:	4645      	mov	r5, r8
 8001f1a:	4657      	mov	r7, sl
 8001f1c:	464e      	mov	r6, r9
 8001f1e:	b5e0      	push	{r5, r6, r7, lr}
 8001f20:	b087      	sub	sp, #28
 8001f22:	9200      	str	r2, [sp, #0]
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	030b      	lsls	r3, r1, #12
 8001f28:	0b1b      	lsrs	r3, r3, #12
 8001f2a:	469b      	mov	fp, r3
 8001f2c:	0fca      	lsrs	r2, r1, #31
 8001f2e:	004b      	lsls	r3, r1, #1
 8001f30:	0004      	movs	r4, r0
 8001f32:	4680      	mov	r8, r0
 8001f34:	0d5b      	lsrs	r3, r3, #21
 8001f36:	9202      	str	r2, [sp, #8]
 8001f38:	d100      	bne.n	8001f3c <__aeabi_ddiv+0x28>
 8001f3a:	e098      	b.n	800206e <__aeabi_ddiv+0x15a>
 8001f3c:	4a7c      	ldr	r2, [pc, #496]	@ (8002130 <__aeabi_ddiv+0x21c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d037      	beq.n	8001fb2 <__aeabi_ddiv+0x9e>
 8001f42:	4659      	mov	r1, fp
 8001f44:	0f42      	lsrs	r2, r0, #29
 8001f46:	00c9      	lsls	r1, r1, #3
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	2180      	movs	r1, #128	@ 0x80
 8001f4c:	0409      	lsls	r1, r1, #16
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	00c2      	lsls	r2, r0, #3
 8001f52:	4690      	mov	r8, r2
 8001f54:	4a77      	ldr	r2, [pc, #476]	@ (8002134 <__aeabi_ddiv+0x220>)
 8001f56:	4689      	mov	r9, r1
 8001f58:	4692      	mov	sl, r2
 8001f5a:	449a      	add	sl, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2400      	movs	r4, #0
 8001f60:	9303      	str	r3, [sp, #12]
 8001f62:	9e00      	ldr	r6, [sp, #0]
 8001f64:	9f01      	ldr	r7, [sp, #4]
 8001f66:	033b      	lsls	r3, r7, #12
 8001f68:	0b1b      	lsrs	r3, r3, #12
 8001f6a:	469b      	mov	fp, r3
 8001f6c:	007b      	lsls	r3, r7, #1
 8001f6e:	0030      	movs	r0, r6
 8001f70:	0d5b      	lsrs	r3, r3, #21
 8001f72:	0ffd      	lsrs	r5, r7, #31
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d059      	beq.n	800202c <__aeabi_ddiv+0x118>
 8001f78:	4a6d      	ldr	r2, [pc, #436]	@ (8002130 <__aeabi_ddiv+0x21c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d048      	beq.n	8002010 <__aeabi_ddiv+0xfc>
 8001f7e:	4659      	mov	r1, fp
 8001f80:	0f72      	lsrs	r2, r6, #29
 8001f82:	00c9      	lsls	r1, r1, #3
 8001f84:	430a      	orrs	r2, r1
 8001f86:	2180      	movs	r1, #128	@ 0x80
 8001f88:	0409      	lsls	r1, r1, #16
 8001f8a:	4311      	orrs	r1, r2
 8001f8c:	468b      	mov	fp, r1
 8001f8e:	4969      	ldr	r1, [pc, #420]	@ (8002134 <__aeabi_ddiv+0x220>)
 8001f90:	00f2      	lsls	r2, r6, #3
 8001f92:	468c      	mov	ip, r1
 8001f94:	4651      	mov	r1, sl
 8001f96:	4463      	add	r3, ip
 8001f98:	1acb      	subs	r3, r1, r3
 8001f9a:	469a      	mov	sl, r3
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	9e02      	ldr	r6, [sp, #8]
 8001fa0:	406e      	eors	r6, r5
 8001fa2:	b2f6      	uxtb	r6, r6
 8001fa4:	2c0f      	cmp	r4, #15
 8001fa6:	d900      	bls.n	8001faa <__aeabi_ddiv+0x96>
 8001fa8:	e0ce      	b.n	8002148 <__aeabi_ddiv+0x234>
 8001faa:	4b63      	ldr	r3, [pc, #396]	@ (8002138 <__aeabi_ddiv+0x224>)
 8001fac:	00a4      	lsls	r4, r4, #2
 8001fae:	591b      	ldr	r3, [r3, r4]
 8001fb0:	469f      	mov	pc, r3
 8001fb2:	465a      	mov	r2, fp
 8001fb4:	4302      	orrs	r2, r0
 8001fb6:	4691      	mov	r9, r2
 8001fb8:	d000      	beq.n	8001fbc <__aeabi_ddiv+0xa8>
 8001fba:	e090      	b.n	80020de <__aeabi_ddiv+0x1ca>
 8001fbc:	469a      	mov	sl, r3
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	4690      	mov	r8, r2
 8001fc2:	2408      	movs	r4, #8
 8001fc4:	9303      	str	r3, [sp, #12]
 8001fc6:	e7cc      	b.n	8001f62 <__aeabi_ddiv+0x4e>
 8001fc8:	46cb      	mov	fp, r9
 8001fca:	4642      	mov	r2, r8
 8001fcc:	9d02      	ldr	r5, [sp, #8]
 8001fce:	9903      	ldr	r1, [sp, #12]
 8001fd0:	2902      	cmp	r1, #2
 8001fd2:	d100      	bne.n	8001fd6 <__aeabi_ddiv+0xc2>
 8001fd4:	e1de      	b.n	8002394 <__aeabi_ddiv+0x480>
 8001fd6:	2903      	cmp	r1, #3
 8001fd8:	d100      	bne.n	8001fdc <__aeabi_ddiv+0xc8>
 8001fda:	e08d      	b.n	80020f8 <__aeabi_ddiv+0x1e4>
 8001fdc:	2901      	cmp	r1, #1
 8001fde:	d000      	beq.n	8001fe2 <__aeabi_ddiv+0xce>
 8001fe0:	e179      	b.n	80022d6 <__aeabi_ddiv+0x3c2>
 8001fe2:	002e      	movs	r6, r5
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	2400      	movs	r4, #0
 8001fea:	4690      	mov	r8, r2
 8001fec:	051b      	lsls	r3, r3, #20
 8001fee:	4323      	orrs	r3, r4
 8001ff0:	07f6      	lsls	r6, r6, #31
 8001ff2:	4333      	orrs	r3, r6
 8001ff4:	4640      	mov	r0, r8
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	b007      	add	sp, #28
 8001ffa:	bcf0      	pop	{r4, r5, r6, r7}
 8001ffc:	46bb      	mov	fp, r7
 8001ffe:	46b2      	mov	sl, r6
 8002000:	46a9      	mov	r9, r5
 8002002:	46a0      	mov	r8, r4
 8002004:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002006:	2200      	movs	r2, #0
 8002008:	2400      	movs	r4, #0
 800200a:	4690      	mov	r8, r2
 800200c:	4b48      	ldr	r3, [pc, #288]	@ (8002130 <__aeabi_ddiv+0x21c>)
 800200e:	e7ed      	b.n	8001fec <__aeabi_ddiv+0xd8>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b49      	ldr	r3, [pc, #292]	@ (800213c <__aeabi_ddiv+0x228>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d159      	bne.n	80020d4 <__aeabi_ddiv+0x1c0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	2102      	movs	r1, #2
 8002028:	469b      	mov	fp, r3
 800202a:	e7b8      	b.n	8001f9e <__aeabi_ddiv+0x8a>
 800202c:	465a      	mov	r2, fp
 800202e:	9b00      	ldr	r3, [sp, #0]
 8002030:	431a      	orrs	r2, r3
 8002032:	d049      	beq.n	80020c8 <__aeabi_ddiv+0x1b4>
 8002034:	465b      	mov	r3, fp
 8002036:	2b00      	cmp	r3, #0
 8002038:	d100      	bne.n	800203c <__aeabi_ddiv+0x128>
 800203a:	e19c      	b.n	8002376 <__aeabi_ddiv+0x462>
 800203c:	4658      	mov	r0, fp
 800203e:	f001 fb8b 	bl	8003758 <__clzsi2>
 8002042:	0002      	movs	r2, r0
 8002044:	0003      	movs	r3, r0
 8002046:	3a0b      	subs	r2, #11
 8002048:	271d      	movs	r7, #29
 800204a:	9e00      	ldr	r6, [sp, #0]
 800204c:	1aba      	subs	r2, r7, r2
 800204e:	0019      	movs	r1, r3
 8002050:	4658      	mov	r0, fp
 8002052:	40d6      	lsrs	r6, r2
 8002054:	3908      	subs	r1, #8
 8002056:	4088      	lsls	r0, r1
 8002058:	0032      	movs	r2, r6
 800205a:	4302      	orrs	r2, r0
 800205c:	4693      	mov	fp, r2
 800205e:	9a00      	ldr	r2, [sp, #0]
 8002060:	408a      	lsls	r2, r1
 8002062:	4937      	ldr	r1, [pc, #220]	@ (8002140 <__aeabi_ddiv+0x22c>)
 8002064:	4453      	add	r3, sl
 8002066:	468a      	mov	sl, r1
 8002068:	2100      	movs	r1, #0
 800206a:	449a      	add	sl, r3
 800206c:	e797      	b.n	8001f9e <__aeabi_ddiv+0x8a>
 800206e:	465b      	mov	r3, fp
 8002070:	4303      	orrs	r3, r0
 8002072:	4699      	mov	r9, r3
 8002074:	d021      	beq.n	80020ba <__aeabi_ddiv+0x1a6>
 8002076:	465b      	mov	r3, fp
 8002078:	2b00      	cmp	r3, #0
 800207a:	d100      	bne.n	800207e <__aeabi_ddiv+0x16a>
 800207c:	e169      	b.n	8002352 <__aeabi_ddiv+0x43e>
 800207e:	4658      	mov	r0, fp
 8002080:	f001 fb6a 	bl	8003758 <__clzsi2>
 8002084:	230b      	movs	r3, #11
 8002086:	425b      	negs	r3, r3
 8002088:	469c      	mov	ip, r3
 800208a:	0002      	movs	r2, r0
 800208c:	4484      	add	ip, r0
 800208e:	4666      	mov	r6, ip
 8002090:	231d      	movs	r3, #29
 8002092:	1b9b      	subs	r3, r3, r6
 8002094:	0026      	movs	r6, r4
 8002096:	0011      	movs	r1, r2
 8002098:	4658      	mov	r0, fp
 800209a:	40de      	lsrs	r6, r3
 800209c:	3908      	subs	r1, #8
 800209e:	4088      	lsls	r0, r1
 80020a0:	0033      	movs	r3, r6
 80020a2:	4303      	orrs	r3, r0
 80020a4:	4699      	mov	r9, r3
 80020a6:	0023      	movs	r3, r4
 80020a8:	408b      	lsls	r3, r1
 80020aa:	4698      	mov	r8, r3
 80020ac:	4b25      	ldr	r3, [pc, #148]	@ (8002144 <__aeabi_ddiv+0x230>)
 80020ae:	2400      	movs	r4, #0
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	469a      	mov	sl, r3
 80020b4:	2300      	movs	r3, #0
 80020b6:	9303      	str	r3, [sp, #12]
 80020b8:	e753      	b.n	8001f62 <__aeabi_ddiv+0x4e>
 80020ba:	2300      	movs	r3, #0
 80020bc:	4698      	mov	r8, r3
 80020be:	469a      	mov	sl, r3
 80020c0:	3301      	adds	r3, #1
 80020c2:	2404      	movs	r4, #4
 80020c4:	9303      	str	r3, [sp, #12]
 80020c6:	e74c      	b.n	8001f62 <__aeabi_ddiv+0x4e>
 80020c8:	2301      	movs	r3, #1
 80020ca:	431c      	orrs	r4, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	2101      	movs	r1, #1
 80020d0:	469b      	mov	fp, r3
 80020d2:	e764      	b.n	8001f9e <__aeabi_ddiv+0x8a>
 80020d4:	2303      	movs	r3, #3
 80020d6:	0032      	movs	r2, r6
 80020d8:	2103      	movs	r1, #3
 80020da:	431c      	orrs	r4, r3
 80020dc:	e75f      	b.n	8001f9e <__aeabi_ddiv+0x8a>
 80020de:	469a      	mov	sl, r3
 80020e0:	2303      	movs	r3, #3
 80020e2:	46d9      	mov	r9, fp
 80020e4:	240c      	movs	r4, #12
 80020e6:	9303      	str	r3, [sp, #12]
 80020e8:	e73b      	b.n	8001f62 <__aeabi_ddiv+0x4e>
 80020ea:	2300      	movs	r3, #0
 80020ec:	2480      	movs	r4, #128	@ 0x80
 80020ee:	4698      	mov	r8, r3
 80020f0:	2600      	movs	r6, #0
 80020f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002130 <__aeabi_ddiv+0x21c>)
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	e779      	b.n	8001fec <__aeabi_ddiv+0xd8>
 80020f8:	2480      	movs	r4, #128	@ 0x80
 80020fa:	465b      	mov	r3, fp
 80020fc:	0324      	lsls	r4, r4, #12
 80020fe:	431c      	orrs	r4, r3
 8002100:	0324      	lsls	r4, r4, #12
 8002102:	002e      	movs	r6, r5
 8002104:	4690      	mov	r8, r2
 8002106:	4b0a      	ldr	r3, [pc, #40]	@ (8002130 <__aeabi_ddiv+0x21c>)
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	e76f      	b.n	8001fec <__aeabi_ddiv+0xd8>
 800210c:	2480      	movs	r4, #128	@ 0x80
 800210e:	464b      	mov	r3, r9
 8002110:	0324      	lsls	r4, r4, #12
 8002112:	4223      	tst	r3, r4
 8002114:	d002      	beq.n	800211c <__aeabi_ddiv+0x208>
 8002116:	465b      	mov	r3, fp
 8002118:	4223      	tst	r3, r4
 800211a:	d0f0      	beq.n	80020fe <__aeabi_ddiv+0x1ea>
 800211c:	2480      	movs	r4, #128	@ 0x80
 800211e:	464b      	mov	r3, r9
 8002120:	0324      	lsls	r4, r4, #12
 8002122:	431c      	orrs	r4, r3
 8002124:	0324      	lsls	r4, r4, #12
 8002126:	9e02      	ldr	r6, [sp, #8]
 8002128:	4b01      	ldr	r3, [pc, #4]	@ (8002130 <__aeabi_ddiv+0x21c>)
 800212a:	0b24      	lsrs	r4, r4, #12
 800212c:	e75e      	b.n	8001fec <__aeabi_ddiv+0xd8>
 800212e:	46c0      	nop			@ (mov r8, r8)
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	0800ca2c 	.word	0x0800ca2c
 800213c:	fffff801 	.word	0xfffff801
 8002140:	000003f3 	.word	0x000003f3
 8002144:	fffffc0d 	.word	0xfffffc0d
 8002148:	45cb      	cmp	fp, r9
 800214a:	d200      	bcs.n	800214e <__aeabi_ddiv+0x23a>
 800214c:	e0f8      	b.n	8002340 <__aeabi_ddiv+0x42c>
 800214e:	d100      	bne.n	8002152 <__aeabi_ddiv+0x23e>
 8002150:	e0f3      	b.n	800233a <__aeabi_ddiv+0x426>
 8002152:	2301      	movs	r3, #1
 8002154:	425b      	negs	r3, r3
 8002156:	469c      	mov	ip, r3
 8002158:	4644      	mov	r4, r8
 800215a:	4648      	mov	r0, r9
 800215c:	2500      	movs	r5, #0
 800215e:	44e2      	add	sl, ip
 8002160:	465b      	mov	r3, fp
 8002162:	0e17      	lsrs	r7, r2, #24
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	431f      	orrs	r7, r3
 8002168:	0c19      	lsrs	r1, r3, #16
 800216a:	043b      	lsls	r3, r7, #16
 800216c:	0212      	lsls	r2, r2, #8
 800216e:	9700      	str	r7, [sp, #0]
 8002170:	0c1f      	lsrs	r7, r3, #16
 8002172:	4691      	mov	r9, r2
 8002174:	9102      	str	r1, [sp, #8]
 8002176:	9703      	str	r7, [sp, #12]
 8002178:	f7fe f866 	bl	8000248 <__aeabi_uidivmod>
 800217c:	0002      	movs	r2, r0
 800217e:	437a      	muls	r2, r7
 8002180:	040b      	lsls	r3, r1, #16
 8002182:	0c21      	lsrs	r1, r4, #16
 8002184:	4680      	mov	r8, r0
 8002186:	4319      	orrs	r1, r3
 8002188:	428a      	cmp	r2, r1
 800218a:	d909      	bls.n	80021a0 <__aeabi_ddiv+0x28c>
 800218c:	9f00      	ldr	r7, [sp, #0]
 800218e:	2301      	movs	r3, #1
 8002190:	46bc      	mov	ip, r7
 8002192:	425b      	negs	r3, r3
 8002194:	4461      	add	r1, ip
 8002196:	469c      	mov	ip, r3
 8002198:	44e0      	add	r8, ip
 800219a:	428f      	cmp	r7, r1
 800219c:	d800      	bhi.n	80021a0 <__aeabi_ddiv+0x28c>
 800219e:	e15c      	b.n	800245a <__aeabi_ddiv+0x546>
 80021a0:	1a88      	subs	r0, r1, r2
 80021a2:	9902      	ldr	r1, [sp, #8]
 80021a4:	f7fe f850 	bl	8000248 <__aeabi_uidivmod>
 80021a8:	9a03      	ldr	r2, [sp, #12]
 80021aa:	0424      	lsls	r4, r4, #16
 80021ac:	4342      	muls	r2, r0
 80021ae:	0409      	lsls	r1, r1, #16
 80021b0:	0c24      	lsrs	r4, r4, #16
 80021b2:	0003      	movs	r3, r0
 80021b4:	430c      	orrs	r4, r1
 80021b6:	42a2      	cmp	r2, r4
 80021b8:	d906      	bls.n	80021c8 <__aeabi_ddiv+0x2b4>
 80021ba:	9900      	ldr	r1, [sp, #0]
 80021bc:	3b01      	subs	r3, #1
 80021be:	468c      	mov	ip, r1
 80021c0:	4464      	add	r4, ip
 80021c2:	42a1      	cmp	r1, r4
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x2b4>
 80021c6:	e142      	b.n	800244e <__aeabi_ddiv+0x53a>
 80021c8:	1aa0      	subs	r0, r4, r2
 80021ca:	4642      	mov	r2, r8
 80021cc:	0412      	lsls	r2, r2, #16
 80021ce:	431a      	orrs	r2, r3
 80021d0:	4693      	mov	fp, r2
 80021d2:	464b      	mov	r3, r9
 80021d4:	4659      	mov	r1, fp
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	001f      	movs	r7, r3
 80021da:	9304      	str	r3, [sp, #16]
 80021dc:	040b      	lsls	r3, r1, #16
 80021de:	4649      	mov	r1, r9
 80021e0:	0409      	lsls	r1, r1, #16
 80021e2:	0c09      	lsrs	r1, r1, #16
 80021e4:	000c      	movs	r4, r1
 80021e6:	0c1b      	lsrs	r3, r3, #16
 80021e8:	435c      	muls	r4, r3
 80021ea:	0c12      	lsrs	r2, r2, #16
 80021ec:	437b      	muls	r3, r7
 80021ee:	4688      	mov	r8, r1
 80021f0:	4351      	muls	r1, r2
 80021f2:	437a      	muls	r2, r7
 80021f4:	0c27      	lsrs	r7, r4, #16
 80021f6:	46bc      	mov	ip, r7
 80021f8:	185b      	adds	r3, r3, r1
 80021fa:	4463      	add	r3, ip
 80021fc:	4299      	cmp	r1, r3
 80021fe:	d903      	bls.n	8002208 <__aeabi_ddiv+0x2f4>
 8002200:	2180      	movs	r1, #128	@ 0x80
 8002202:	0249      	lsls	r1, r1, #9
 8002204:	468c      	mov	ip, r1
 8002206:	4462      	add	r2, ip
 8002208:	0c19      	lsrs	r1, r3, #16
 800220a:	0424      	lsls	r4, r4, #16
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	0c24      	lsrs	r4, r4, #16
 8002210:	188a      	adds	r2, r1, r2
 8002212:	191c      	adds	r4, r3, r4
 8002214:	4290      	cmp	r0, r2
 8002216:	d302      	bcc.n	800221e <__aeabi_ddiv+0x30a>
 8002218:	d116      	bne.n	8002248 <__aeabi_ddiv+0x334>
 800221a:	42a5      	cmp	r5, r4
 800221c:	d214      	bcs.n	8002248 <__aeabi_ddiv+0x334>
 800221e:	465b      	mov	r3, fp
 8002220:	9f00      	ldr	r7, [sp, #0]
 8002222:	3b01      	subs	r3, #1
 8002224:	444d      	add	r5, r9
 8002226:	9305      	str	r3, [sp, #20]
 8002228:	454d      	cmp	r5, r9
 800222a:	419b      	sbcs	r3, r3
 800222c:	46bc      	mov	ip, r7
 800222e:	425b      	negs	r3, r3
 8002230:	4463      	add	r3, ip
 8002232:	18c0      	adds	r0, r0, r3
 8002234:	4287      	cmp	r7, r0
 8002236:	d300      	bcc.n	800223a <__aeabi_ddiv+0x326>
 8002238:	e102      	b.n	8002440 <__aeabi_ddiv+0x52c>
 800223a:	4282      	cmp	r2, r0
 800223c:	d900      	bls.n	8002240 <__aeabi_ddiv+0x32c>
 800223e:	e129      	b.n	8002494 <__aeabi_ddiv+0x580>
 8002240:	d100      	bne.n	8002244 <__aeabi_ddiv+0x330>
 8002242:	e124      	b.n	800248e <__aeabi_ddiv+0x57a>
 8002244:	9b05      	ldr	r3, [sp, #20]
 8002246:	469b      	mov	fp, r3
 8002248:	1b2c      	subs	r4, r5, r4
 800224a:	42a5      	cmp	r5, r4
 800224c:	41ad      	sbcs	r5, r5
 800224e:	9b00      	ldr	r3, [sp, #0]
 8002250:	1a80      	subs	r0, r0, r2
 8002252:	426d      	negs	r5, r5
 8002254:	1b40      	subs	r0, r0, r5
 8002256:	4283      	cmp	r3, r0
 8002258:	d100      	bne.n	800225c <__aeabi_ddiv+0x348>
 800225a:	e10f      	b.n	800247c <__aeabi_ddiv+0x568>
 800225c:	9902      	ldr	r1, [sp, #8]
 800225e:	f7fd fff3 	bl	8000248 <__aeabi_uidivmod>
 8002262:	9a03      	ldr	r2, [sp, #12]
 8002264:	040b      	lsls	r3, r1, #16
 8002266:	4342      	muls	r2, r0
 8002268:	0c21      	lsrs	r1, r4, #16
 800226a:	0005      	movs	r5, r0
 800226c:	4319      	orrs	r1, r3
 800226e:	428a      	cmp	r2, r1
 8002270:	d900      	bls.n	8002274 <__aeabi_ddiv+0x360>
 8002272:	e0cb      	b.n	800240c <__aeabi_ddiv+0x4f8>
 8002274:	1a88      	subs	r0, r1, r2
 8002276:	9902      	ldr	r1, [sp, #8]
 8002278:	f7fd ffe6 	bl	8000248 <__aeabi_uidivmod>
 800227c:	9a03      	ldr	r2, [sp, #12]
 800227e:	0424      	lsls	r4, r4, #16
 8002280:	4342      	muls	r2, r0
 8002282:	0409      	lsls	r1, r1, #16
 8002284:	0c24      	lsrs	r4, r4, #16
 8002286:	0003      	movs	r3, r0
 8002288:	430c      	orrs	r4, r1
 800228a:	42a2      	cmp	r2, r4
 800228c:	d900      	bls.n	8002290 <__aeabi_ddiv+0x37c>
 800228e:	e0ca      	b.n	8002426 <__aeabi_ddiv+0x512>
 8002290:	4641      	mov	r1, r8
 8002292:	1aa4      	subs	r4, r4, r2
 8002294:	042a      	lsls	r2, r5, #16
 8002296:	431a      	orrs	r2, r3
 8002298:	9f04      	ldr	r7, [sp, #16]
 800229a:	0413      	lsls	r3, r2, #16
 800229c:	0c1b      	lsrs	r3, r3, #16
 800229e:	4359      	muls	r1, r3
 80022a0:	4640      	mov	r0, r8
 80022a2:	437b      	muls	r3, r7
 80022a4:	469c      	mov	ip, r3
 80022a6:	0c15      	lsrs	r5, r2, #16
 80022a8:	4368      	muls	r0, r5
 80022aa:	0c0b      	lsrs	r3, r1, #16
 80022ac:	4484      	add	ip, r0
 80022ae:	4463      	add	r3, ip
 80022b0:	437d      	muls	r5, r7
 80022b2:	4298      	cmp	r0, r3
 80022b4:	d903      	bls.n	80022be <__aeabi_ddiv+0x3aa>
 80022b6:	2080      	movs	r0, #128	@ 0x80
 80022b8:	0240      	lsls	r0, r0, #9
 80022ba:	4684      	mov	ip, r0
 80022bc:	4465      	add	r5, ip
 80022be:	0c18      	lsrs	r0, r3, #16
 80022c0:	0409      	lsls	r1, r1, #16
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	0c09      	lsrs	r1, r1, #16
 80022c6:	1940      	adds	r0, r0, r5
 80022c8:	185b      	adds	r3, r3, r1
 80022ca:	4284      	cmp	r4, r0
 80022cc:	d327      	bcc.n	800231e <__aeabi_ddiv+0x40a>
 80022ce:	d023      	beq.n	8002318 <__aeabi_ddiv+0x404>
 80022d0:	2301      	movs	r3, #1
 80022d2:	0035      	movs	r5, r6
 80022d4:	431a      	orrs	r2, r3
 80022d6:	4b94      	ldr	r3, [pc, #592]	@ (8002528 <__aeabi_ddiv+0x614>)
 80022d8:	4453      	add	r3, sl
 80022da:	2b00      	cmp	r3, #0
 80022dc:	dd60      	ble.n	80023a0 <__aeabi_ddiv+0x48c>
 80022de:	0751      	lsls	r1, r2, #29
 80022e0:	d000      	beq.n	80022e4 <__aeabi_ddiv+0x3d0>
 80022e2:	e086      	b.n	80023f2 <__aeabi_ddiv+0x4de>
 80022e4:	002e      	movs	r6, r5
 80022e6:	08d1      	lsrs	r1, r2, #3
 80022e8:	465a      	mov	r2, fp
 80022ea:	01d2      	lsls	r2, r2, #7
 80022ec:	d506      	bpl.n	80022fc <__aeabi_ddiv+0x3e8>
 80022ee:	465a      	mov	r2, fp
 80022f0:	4b8e      	ldr	r3, [pc, #568]	@ (800252c <__aeabi_ddiv+0x618>)
 80022f2:	401a      	ands	r2, r3
 80022f4:	2380      	movs	r3, #128	@ 0x80
 80022f6:	4693      	mov	fp, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4453      	add	r3, sl
 80022fc:	4a8c      	ldr	r2, [pc, #560]	@ (8002530 <__aeabi_ddiv+0x61c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	dd00      	ble.n	8002304 <__aeabi_ddiv+0x3f0>
 8002302:	e680      	b.n	8002006 <__aeabi_ddiv+0xf2>
 8002304:	465a      	mov	r2, fp
 8002306:	0752      	lsls	r2, r2, #29
 8002308:	430a      	orrs	r2, r1
 800230a:	4690      	mov	r8, r2
 800230c:	465a      	mov	r2, fp
 800230e:	055b      	lsls	r3, r3, #21
 8002310:	0254      	lsls	r4, r2, #9
 8002312:	0b24      	lsrs	r4, r4, #12
 8002314:	0d5b      	lsrs	r3, r3, #21
 8002316:	e669      	b.n	8001fec <__aeabi_ddiv+0xd8>
 8002318:	0035      	movs	r5, r6
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0db      	beq.n	80022d6 <__aeabi_ddiv+0x3c2>
 800231e:	9d00      	ldr	r5, [sp, #0]
 8002320:	1e51      	subs	r1, r2, #1
 8002322:	46ac      	mov	ip, r5
 8002324:	4464      	add	r4, ip
 8002326:	42ac      	cmp	r4, r5
 8002328:	d200      	bcs.n	800232c <__aeabi_ddiv+0x418>
 800232a:	e09e      	b.n	800246a <__aeabi_ddiv+0x556>
 800232c:	4284      	cmp	r4, r0
 800232e:	d200      	bcs.n	8002332 <__aeabi_ddiv+0x41e>
 8002330:	e0e1      	b.n	80024f6 <__aeabi_ddiv+0x5e2>
 8002332:	d100      	bne.n	8002336 <__aeabi_ddiv+0x422>
 8002334:	e0ee      	b.n	8002514 <__aeabi_ddiv+0x600>
 8002336:	000a      	movs	r2, r1
 8002338:	e7ca      	b.n	80022d0 <__aeabi_ddiv+0x3bc>
 800233a:	4542      	cmp	r2, r8
 800233c:	d900      	bls.n	8002340 <__aeabi_ddiv+0x42c>
 800233e:	e708      	b.n	8002152 <__aeabi_ddiv+0x23e>
 8002340:	464b      	mov	r3, r9
 8002342:	07dc      	lsls	r4, r3, #31
 8002344:	0858      	lsrs	r0, r3, #1
 8002346:	4643      	mov	r3, r8
 8002348:	085b      	lsrs	r3, r3, #1
 800234a:	431c      	orrs	r4, r3
 800234c:	4643      	mov	r3, r8
 800234e:	07dd      	lsls	r5, r3, #31
 8002350:	e706      	b.n	8002160 <__aeabi_ddiv+0x24c>
 8002352:	f001 fa01 	bl	8003758 <__clzsi2>
 8002356:	2315      	movs	r3, #21
 8002358:	469c      	mov	ip, r3
 800235a:	4484      	add	ip, r0
 800235c:	0002      	movs	r2, r0
 800235e:	4663      	mov	r3, ip
 8002360:	3220      	adds	r2, #32
 8002362:	2b1c      	cmp	r3, #28
 8002364:	dc00      	bgt.n	8002368 <__aeabi_ddiv+0x454>
 8002366:	e692      	b.n	800208e <__aeabi_ddiv+0x17a>
 8002368:	0023      	movs	r3, r4
 800236a:	3808      	subs	r0, #8
 800236c:	4083      	lsls	r3, r0
 800236e:	4699      	mov	r9, r3
 8002370:	2300      	movs	r3, #0
 8002372:	4698      	mov	r8, r3
 8002374:	e69a      	b.n	80020ac <__aeabi_ddiv+0x198>
 8002376:	f001 f9ef 	bl	8003758 <__clzsi2>
 800237a:	0002      	movs	r2, r0
 800237c:	0003      	movs	r3, r0
 800237e:	3215      	adds	r2, #21
 8002380:	3320      	adds	r3, #32
 8002382:	2a1c      	cmp	r2, #28
 8002384:	dc00      	bgt.n	8002388 <__aeabi_ddiv+0x474>
 8002386:	e65f      	b.n	8002048 <__aeabi_ddiv+0x134>
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	3808      	subs	r0, #8
 800238c:	4081      	lsls	r1, r0
 800238e:	2200      	movs	r2, #0
 8002390:	468b      	mov	fp, r1
 8002392:	e666      	b.n	8002062 <__aeabi_ddiv+0x14e>
 8002394:	2200      	movs	r2, #0
 8002396:	002e      	movs	r6, r5
 8002398:	2400      	movs	r4, #0
 800239a:	4690      	mov	r8, r2
 800239c:	4b65      	ldr	r3, [pc, #404]	@ (8002534 <__aeabi_ddiv+0x620>)
 800239e:	e625      	b.n	8001fec <__aeabi_ddiv+0xd8>
 80023a0:	002e      	movs	r6, r5
 80023a2:	2101      	movs	r1, #1
 80023a4:	1ac9      	subs	r1, r1, r3
 80023a6:	2938      	cmp	r1, #56	@ 0x38
 80023a8:	dd00      	ble.n	80023ac <__aeabi_ddiv+0x498>
 80023aa:	e61b      	b.n	8001fe4 <__aeabi_ddiv+0xd0>
 80023ac:	291f      	cmp	r1, #31
 80023ae:	dc7e      	bgt.n	80024ae <__aeabi_ddiv+0x59a>
 80023b0:	4861      	ldr	r0, [pc, #388]	@ (8002538 <__aeabi_ddiv+0x624>)
 80023b2:	0014      	movs	r4, r2
 80023b4:	4450      	add	r0, sl
 80023b6:	465b      	mov	r3, fp
 80023b8:	4082      	lsls	r2, r0
 80023ba:	4083      	lsls	r3, r0
 80023bc:	40cc      	lsrs	r4, r1
 80023be:	1e50      	subs	r0, r2, #1
 80023c0:	4182      	sbcs	r2, r0
 80023c2:	4323      	orrs	r3, r4
 80023c4:	431a      	orrs	r2, r3
 80023c6:	465b      	mov	r3, fp
 80023c8:	40cb      	lsrs	r3, r1
 80023ca:	0751      	lsls	r1, r2, #29
 80023cc:	d009      	beq.n	80023e2 <__aeabi_ddiv+0x4ce>
 80023ce:	210f      	movs	r1, #15
 80023d0:	4011      	ands	r1, r2
 80023d2:	2904      	cmp	r1, #4
 80023d4:	d005      	beq.n	80023e2 <__aeabi_ddiv+0x4ce>
 80023d6:	1d11      	adds	r1, r2, #4
 80023d8:	4291      	cmp	r1, r2
 80023da:	4192      	sbcs	r2, r2
 80023dc:	4252      	negs	r2, r2
 80023de:	189b      	adds	r3, r3, r2
 80023e0:	000a      	movs	r2, r1
 80023e2:	0219      	lsls	r1, r3, #8
 80023e4:	d400      	bmi.n	80023e8 <__aeabi_ddiv+0x4d4>
 80023e6:	e09b      	b.n	8002520 <__aeabi_ddiv+0x60c>
 80023e8:	2200      	movs	r2, #0
 80023ea:	2301      	movs	r3, #1
 80023ec:	2400      	movs	r4, #0
 80023ee:	4690      	mov	r8, r2
 80023f0:	e5fc      	b.n	8001fec <__aeabi_ddiv+0xd8>
 80023f2:	210f      	movs	r1, #15
 80023f4:	4011      	ands	r1, r2
 80023f6:	2904      	cmp	r1, #4
 80023f8:	d100      	bne.n	80023fc <__aeabi_ddiv+0x4e8>
 80023fa:	e773      	b.n	80022e4 <__aeabi_ddiv+0x3d0>
 80023fc:	1d11      	adds	r1, r2, #4
 80023fe:	4291      	cmp	r1, r2
 8002400:	4192      	sbcs	r2, r2
 8002402:	4252      	negs	r2, r2
 8002404:	002e      	movs	r6, r5
 8002406:	08c9      	lsrs	r1, r1, #3
 8002408:	4493      	add	fp, r2
 800240a:	e76d      	b.n	80022e8 <__aeabi_ddiv+0x3d4>
 800240c:	9b00      	ldr	r3, [sp, #0]
 800240e:	3d01      	subs	r5, #1
 8002410:	469c      	mov	ip, r3
 8002412:	4461      	add	r1, ip
 8002414:	428b      	cmp	r3, r1
 8002416:	d900      	bls.n	800241a <__aeabi_ddiv+0x506>
 8002418:	e72c      	b.n	8002274 <__aeabi_ddiv+0x360>
 800241a:	428a      	cmp	r2, r1
 800241c:	d800      	bhi.n	8002420 <__aeabi_ddiv+0x50c>
 800241e:	e729      	b.n	8002274 <__aeabi_ddiv+0x360>
 8002420:	1e85      	subs	r5, r0, #2
 8002422:	4461      	add	r1, ip
 8002424:	e726      	b.n	8002274 <__aeabi_ddiv+0x360>
 8002426:	9900      	ldr	r1, [sp, #0]
 8002428:	3b01      	subs	r3, #1
 800242a:	468c      	mov	ip, r1
 800242c:	4464      	add	r4, ip
 800242e:	42a1      	cmp	r1, r4
 8002430:	d900      	bls.n	8002434 <__aeabi_ddiv+0x520>
 8002432:	e72d      	b.n	8002290 <__aeabi_ddiv+0x37c>
 8002434:	42a2      	cmp	r2, r4
 8002436:	d800      	bhi.n	800243a <__aeabi_ddiv+0x526>
 8002438:	e72a      	b.n	8002290 <__aeabi_ddiv+0x37c>
 800243a:	1e83      	subs	r3, r0, #2
 800243c:	4464      	add	r4, ip
 800243e:	e727      	b.n	8002290 <__aeabi_ddiv+0x37c>
 8002440:	4287      	cmp	r7, r0
 8002442:	d000      	beq.n	8002446 <__aeabi_ddiv+0x532>
 8002444:	e6fe      	b.n	8002244 <__aeabi_ddiv+0x330>
 8002446:	45a9      	cmp	r9, r5
 8002448:	d900      	bls.n	800244c <__aeabi_ddiv+0x538>
 800244a:	e6fb      	b.n	8002244 <__aeabi_ddiv+0x330>
 800244c:	e6f5      	b.n	800223a <__aeabi_ddiv+0x326>
 800244e:	42a2      	cmp	r2, r4
 8002450:	d800      	bhi.n	8002454 <__aeabi_ddiv+0x540>
 8002452:	e6b9      	b.n	80021c8 <__aeabi_ddiv+0x2b4>
 8002454:	1e83      	subs	r3, r0, #2
 8002456:	4464      	add	r4, ip
 8002458:	e6b6      	b.n	80021c8 <__aeabi_ddiv+0x2b4>
 800245a:	428a      	cmp	r2, r1
 800245c:	d800      	bhi.n	8002460 <__aeabi_ddiv+0x54c>
 800245e:	e69f      	b.n	80021a0 <__aeabi_ddiv+0x28c>
 8002460:	46bc      	mov	ip, r7
 8002462:	1e83      	subs	r3, r0, #2
 8002464:	4698      	mov	r8, r3
 8002466:	4461      	add	r1, ip
 8002468:	e69a      	b.n	80021a0 <__aeabi_ddiv+0x28c>
 800246a:	000a      	movs	r2, r1
 800246c:	4284      	cmp	r4, r0
 800246e:	d000      	beq.n	8002472 <__aeabi_ddiv+0x55e>
 8002470:	e72e      	b.n	80022d0 <__aeabi_ddiv+0x3bc>
 8002472:	454b      	cmp	r3, r9
 8002474:	d000      	beq.n	8002478 <__aeabi_ddiv+0x564>
 8002476:	e72b      	b.n	80022d0 <__aeabi_ddiv+0x3bc>
 8002478:	0035      	movs	r5, r6
 800247a:	e72c      	b.n	80022d6 <__aeabi_ddiv+0x3c2>
 800247c:	4b2a      	ldr	r3, [pc, #168]	@ (8002528 <__aeabi_ddiv+0x614>)
 800247e:	4a2f      	ldr	r2, [pc, #188]	@ (800253c <__aeabi_ddiv+0x628>)
 8002480:	4453      	add	r3, sl
 8002482:	4592      	cmp	sl, r2
 8002484:	db43      	blt.n	800250e <__aeabi_ddiv+0x5fa>
 8002486:	2201      	movs	r2, #1
 8002488:	2100      	movs	r1, #0
 800248a:	4493      	add	fp, r2
 800248c:	e72c      	b.n	80022e8 <__aeabi_ddiv+0x3d4>
 800248e:	42ac      	cmp	r4, r5
 8002490:	d800      	bhi.n	8002494 <__aeabi_ddiv+0x580>
 8002492:	e6d7      	b.n	8002244 <__aeabi_ddiv+0x330>
 8002494:	2302      	movs	r3, #2
 8002496:	425b      	negs	r3, r3
 8002498:	469c      	mov	ip, r3
 800249a:	9900      	ldr	r1, [sp, #0]
 800249c:	444d      	add	r5, r9
 800249e:	454d      	cmp	r5, r9
 80024a0:	419b      	sbcs	r3, r3
 80024a2:	44e3      	add	fp, ip
 80024a4:	468c      	mov	ip, r1
 80024a6:	425b      	negs	r3, r3
 80024a8:	4463      	add	r3, ip
 80024aa:	18c0      	adds	r0, r0, r3
 80024ac:	e6cc      	b.n	8002248 <__aeabi_ddiv+0x334>
 80024ae:	201f      	movs	r0, #31
 80024b0:	4240      	negs	r0, r0
 80024b2:	1ac3      	subs	r3, r0, r3
 80024b4:	4658      	mov	r0, fp
 80024b6:	40d8      	lsrs	r0, r3
 80024b8:	2920      	cmp	r1, #32
 80024ba:	d004      	beq.n	80024c6 <__aeabi_ddiv+0x5b2>
 80024bc:	4659      	mov	r1, fp
 80024be:	4b20      	ldr	r3, [pc, #128]	@ (8002540 <__aeabi_ddiv+0x62c>)
 80024c0:	4453      	add	r3, sl
 80024c2:	4099      	lsls	r1, r3
 80024c4:	430a      	orrs	r2, r1
 80024c6:	1e53      	subs	r3, r2, #1
 80024c8:	419a      	sbcs	r2, r3
 80024ca:	2307      	movs	r3, #7
 80024cc:	0019      	movs	r1, r3
 80024ce:	4302      	orrs	r2, r0
 80024d0:	2400      	movs	r4, #0
 80024d2:	4011      	ands	r1, r2
 80024d4:	4213      	tst	r3, r2
 80024d6:	d009      	beq.n	80024ec <__aeabi_ddiv+0x5d8>
 80024d8:	3308      	adds	r3, #8
 80024da:	4013      	ands	r3, r2
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d01d      	beq.n	800251c <__aeabi_ddiv+0x608>
 80024e0:	1d13      	adds	r3, r2, #4
 80024e2:	4293      	cmp	r3, r2
 80024e4:	4189      	sbcs	r1, r1
 80024e6:	001a      	movs	r2, r3
 80024e8:	4249      	negs	r1, r1
 80024ea:	0749      	lsls	r1, r1, #29
 80024ec:	08d2      	lsrs	r2, r2, #3
 80024ee:	430a      	orrs	r2, r1
 80024f0:	4690      	mov	r8, r2
 80024f2:	2300      	movs	r3, #0
 80024f4:	e57a      	b.n	8001fec <__aeabi_ddiv+0xd8>
 80024f6:	4649      	mov	r1, r9
 80024f8:	9f00      	ldr	r7, [sp, #0]
 80024fa:	004d      	lsls	r5, r1, #1
 80024fc:	454d      	cmp	r5, r9
 80024fe:	4189      	sbcs	r1, r1
 8002500:	46bc      	mov	ip, r7
 8002502:	4249      	negs	r1, r1
 8002504:	4461      	add	r1, ip
 8002506:	46a9      	mov	r9, r5
 8002508:	3a02      	subs	r2, #2
 800250a:	1864      	adds	r4, r4, r1
 800250c:	e7ae      	b.n	800246c <__aeabi_ddiv+0x558>
 800250e:	2201      	movs	r2, #1
 8002510:	4252      	negs	r2, r2
 8002512:	e746      	b.n	80023a2 <__aeabi_ddiv+0x48e>
 8002514:	4599      	cmp	r9, r3
 8002516:	d3ee      	bcc.n	80024f6 <__aeabi_ddiv+0x5e2>
 8002518:	000a      	movs	r2, r1
 800251a:	e7aa      	b.n	8002472 <__aeabi_ddiv+0x55e>
 800251c:	2100      	movs	r1, #0
 800251e:	e7e5      	b.n	80024ec <__aeabi_ddiv+0x5d8>
 8002520:	0759      	lsls	r1, r3, #29
 8002522:	025b      	lsls	r3, r3, #9
 8002524:	0b1c      	lsrs	r4, r3, #12
 8002526:	e7e1      	b.n	80024ec <__aeabi_ddiv+0x5d8>
 8002528:	000003ff 	.word	0x000003ff
 800252c:	feffffff 	.word	0xfeffffff
 8002530:	000007fe 	.word	0x000007fe
 8002534:	000007ff 	.word	0x000007ff
 8002538:	0000041e 	.word	0x0000041e
 800253c:	fffffc02 	.word	0xfffffc02
 8002540:	0000043e 	.word	0x0000043e

08002544 <__eqdf2>:
 8002544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002546:	4657      	mov	r7, sl
 8002548:	46de      	mov	lr, fp
 800254a:	464e      	mov	r6, r9
 800254c:	4645      	mov	r5, r8
 800254e:	b5e0      	push	{r5, r6, r7, lr}
 8002550:	000d      	movs	r5, r1
 8002552:	0004      	movs	r4, r0
 8002554:	0fe8      	lsrs	r0, r5, #31
 8002556:	4683      	mov	fp, r0
 8002558:	0309      	lsls	r1, r1, #12
 800255a:	0fd8      	lsrs	r0, r3, #31
 800255c:	0b09      	lsrs	r1, r1, #12
 800255e:	4682      	mov	sl, r0
 8002560:	4819      	ldr	r0, [pc, #100]	@ (80025c8 <__eqdf2+0x84>)
 8002562:	468c      	mov	ip, r1
 8002564:	031f      	lsls	r7, r3, #12
 8002566:	0069      	lsls	r1, r5, #1
 8002568:	005e      	lsls	r6, r3, #1
 800256a:	0d49      	lsrs	r1, r1, #21
 800256c:	0b3f      	lsrs	r7, r7, #12
 800256e:	0d76      	lsrs	r6, r6, #21
 8002570:	4281      	cmp	r1, r0
 8002572:	d018      	beq.n	80025a6 <__eqdf2+0x62>
 8002574:	4286      	cmp	r6, r0
 8002576:	d00f      	beq.n	8002598 <__eqdf2+0x54>
 8002578:	2001      	movs	r0, #1
 800257a:	42b1      	cmp	r1, r6
 800257c:	d10d      	bne.n	800259a <__eqdf2+0x56>
 800257e:	45bc      	cmp	ip, r7
 8002580:	d10b      	bne.n	800259a <__eqdf2+0x56>
 8002582:	4294      	cmp	r4, r2
 8002584:	d109      	bne.n	800259a <__eqdf2+0x56>
 8002586:	45d3      	cmp	fp, sl
 8002588:	d01c      	beq.n	80025c4 <__eqdf2+0x80>
 800258a:	2900      	cmp	r1, #0
 800258c:	d105      	bne.n	800259a <__eqdf2+0x56>
 800258e:	4660      	mov	r0, ip
 8002590:	4320      	orrs	r0, r4
 8002592:	1e43      	subs	r3, r0, #1
 8002594:	4198      	sbcs	r0, r3
 8002596:	e000      	b.n	800259a <__eqdf2+0x56>
 8002598:	2001      	movs	r0, #1
 800259a:	bcf0      	pop	{r4, r5, r6, r7}
 800259c:	46bb      	mov	fp, r7
 800259e:	46b2      	mov	sl, r6
 80025a0:	46a9      	mov	r9, r5
 80025a2:	46a0      	mov	r8, r4
 80025a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025a6:	2001      	movs	r0, #1
 80025a8:	428e      	cmp	r6, r1
 80025aa:	d1f6      	bne.n	800259a <__eqdf2+0x56>
 80025ac:	4661      	mov	r1, ip
 80025ae:	4339      	orrs	r1, r7
 80025b0:	000f      	movs	r7, r1
 80025b2:	4317      	orrs	r7, r2
 80025b4:	4327      	orrs	r7, r4
 80025b6:	d1f0      	bne.n	800259a <__eqdf2+0x56>
 80025b8:	465b      	mov	r3, fp
 80025ba:	4652      	mov	r2, sl
 80025bc:	1a98      	subs	r0, r3, r2
 80025be:	1e43      	subs	r3, r0, #1
 80025c0:	4198      	sbcs	r0, r3
 80025c2:	e7ea      	b.n	800259a <__eqdf2+0x56>
 80025c4:	2000      	movs	r0, #0
 80025c6:	e7e8      	b.n	800259a <__eqdf2+0x56>
 80025c8:	000007ff 	.word	0x000007ff

080025cc <__gedf2>:
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ce:	4657      	mov	r7, sl
 80025d0:	464e      	mov	r6, r9
 80025d2:	4645      	mov	r5, r8
 80025d4:	46de      	mov	lr, fp
 80025d6:	b5e0      	push	{r5, r6, r7, lr}
 80025d8:	000d      	movs	r5, r1
 80025da:	030e      	lsls	r6, r1, #12
 80025dc:	0049      	lsls	r1, r1, #1
 80025de:	0d49      	lsrs	r1, r1, #21
 80025e0:	468a      	mov	sl, r1
 80025e2:	0fdf      	lsrs	r7, r3, #31
 80025e4:	0fe9      	lsrs	r1, r5, #31
 80025e6:	46bc      	mov	ip, r7
 80025e8:	b083      	sub	sp, #12
 80025ea:	4f2f      	ldr	r7, [pc, #188]	@ (80026a8 <__gedf2+0xdc>)
 80025ec:	0004      	movs	r4, r0
 80025ee:	4680      	mov	r8, r0
 80025f0:	9101      	str	r1, [sp, #4]
 80025f2:	0058      	lsls	r0, r3, #1
 80025f4:	0319      	lsls	r1, r3, #12
 80025f6:	4691      	mov	r9, r2
 80025f8:	0b36      	lsrs	r6, r6, #12
 80025fa:	0b09      	lsrs	r1, r1, #12
 80025fc:	0d40      	lsrs	r0, r0, #21
 80025fe:	45ba      	cmp	sl, r7
 8002600:	d01d      	beq.n	800263e <__gedf2+0x72>
 8002602:	42b8      	cmp	r0, r7
 8002604:	d00d      	beq.n	8002622 <__gedf2+0x56>
 8002606:	4657      	mov	r7, sl
 8002608:	2f00      	cmp	r7, #0
 800260a:	d12a      	bne.n	8002662 <__gedf2+0x96>
 800260c:	4334      	orrs	r4, r6
 800260e:	2800      	cmp	r0, #0
 8002610:	d124      	bne.n	800265c <__gedf2+0x90>
 8002612:	430a      	orrs	r2, r1
 8002614:	d036      	beq.n	8002684 <__gedf2+0xb8>
 8002616:	2c00      	cmp	r4, #0
 8002618:	d141      	bne.n	800269e <__gedf2+0xd2>
 800261a:	4663      	mov	r3, ip
 800261c:	0058      	lsls	r0, r3, #1
 800261e:	3801      	subs	r0, #1
 8002620:	e015      	b.n	800264e <__gedf2+0x82>
 8002622:	4311      	orrs	r1, r2
 8002624:	d138      	bne.n	8002698 <__gedf2+0xcc>
 8002626:	4653      	mov	r3, sl
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <__gedf2+0x64>
 800262c:	4326      	orrs	r6, r4
 800262e:	d0f4      	beq.n	800261a <__gedf2+0x4e>
 8002630:	9b01      	ldr	r3, [sp, #4]
 8002632:	4563      	cmp	r3, ip
 8002634:	d107      	bne.n	8002646 <__gedf2+0x7a>
 8002636:	9b01      	ldr	r3, [sp, #4]
 8002638:	0058      	lsls	r0, r3, #1
 800263a:	3801      	subs	r0, #1
 800263c:	e007      	b.n	800264e <__gedf2+0x82>
 800263e:	4326      	orrs	r6, r4
 8002640:	d12a      	bne.n	8002698 <__gedf2+0xcc>
 8002642:	4550      	cmp	r0, sl
 8002644:	d021      	beq.n	800268a <__gedf2+0xbe>
 8002646:	2001      	movs	r0, #1
 8002648:	9b01      	ldr	r3, [sp, #4]
 800264a:	425f      	negs	r7, r3
 800264c:	4338      	orrs	r0, r7
 800264e:	b003      	add	sp, #12
 8002650:	bcf0      	pop	{r4, r5, r6, r7}
 8002652:	46bb      	mov	fp, r7
 8002654:	46b2      	mov	sl, r6
 8002656:	46a9      	mov	r9, r5
 8002658:	46a0      	mov	r8, r4
 800265a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800265c:	2c00      	cmp	r4, #0
 800265e:	d0dc      	beq.n	800261a <__gedf2+0x4e>
 8002660:	e7e6      	b.n	8002630 <__gedf2+0x64>
 8002662:	2800      	cmp	r0, #0
 8002664:	d0ef      	beq.n	8002646 <__gedf2+0x7a>
 8002666:	9b01      	ldr	r3, [sp, #4]
 8002668:	4563      	cmp	r3, ip
 800266a:	d1ec      	bne.n	8002646 <__gedf2+0x7a>
 800266c:	4582      	cmp	sl, r0
 800266e:	dcea      	bgt.n	8002646 <__gedf2+0x7a>
 8002670:	dbe1      	blt.n	8002636 <__gedf2+0x6a>
 8002672:	428e      	cmp	r6, r1
 8002674:	d8e7      	bhi.n	8002646 <__gedf2+0x7a>
 8002676:	d1de      	bne.n	8002636 <__gedf2+0x6a>
 8002678:	45c8      	cmp	r8, r9
 800267a:	d8e4      	bhi.n	8002646 <__gedf2+0x7a>
 800267c:	2000      	movs	r0, #0
 800267e:	45c8      	cmp	r8, r9
 8002680:	d2e5      	bcs.n	800264e <__gedf2+0x82>
 8002682:	e7d8      	b.n	8002636 <__gedf2+0x6a>
 8002684:	2c00      	cmp	r4, #0
 8002686:	d0e2      	beq.n	800264e <__gedf2+0x82>
 8002688:	e7dd      	b.n	8002646 <__gedf2+0x7a>
 800268a:	4311      	orrs	r1, r2
 800268c:	d104      	bne.n	8002698 <__gedf2+0xcc>
 800268e:	9b01      	ldr	r3, [sp, #4]
 8002690:	4563      	cmp	r3, ip
 8002692:	d1d8      	bne.n	8002646 <__gedf2+0x7a>
 8002694:	2000      	movs	r0, #0
 8002696:	e7da      	b.n	800264e <__gedf2+0x82>
 8002698:	2002      	movs	r0, #2
 800269a:	4240      	negs	r0, r0
 800269c:	e7d7      	b.n	800264e <__gedf2+0x82>
 800269e:	9b01      	ldr	r3, [sp, #4]
 80026a0:	4563      	cmp	r3, ip
 80026a2:	d0e6      	beq.n	8002672 <__gedf2+0xa6>
 80026a4:	e7cf      	b.n	8002646 <__gedf2+0x7a>
 80026a6:	46c0      	nop			@ (mov r8, r8)
 80026a8:	000007ff 	.word	0x000007ff

080026ac <__ledf2>:
 80026ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ae:	4657      	mov	r7, sl
 80026b0:	464e      	mov	r6, r9
 80026b2:	4645      	mov	r5, r8
 80026b4:	46de      	mov	lr, fp
 80026b6:	b5e0      	push	{r5, r6, r7, lr}
 80026b8:	000d      	movs	r5, r1
 80026ba:	030e      	lsls	r6, r1, #12
 80026bc:	0049      	lsls	r1, r1, #1
 80026be:	0d49      	lsrs	r1, r1, #21
 80026c0:	468a      	mov	sl, r1
 80026c2:	0fdf      	lsrs	r7, r3, #31
 80026c4:	0fe9      	lsrs	r1, r5, #31
 80026c6:	46bc      	mov	ip, r7
 80026c8:	b083      	sub	sp, #12
 80026ca:	4f2e      	ldr	r7, [pc, #184]	@ (8002784 <__ledf2+0xd8>)
 80026cc:	0004      	movs	r4, r0
 80026ce:	4680      	mov	r8, r0
 80026d0:	9101      	str	r1, [sp, #4]
 80026d2:	0058      	lsls	r0, r3, #1
 80026d4:	0319      	lsls	r1, r3, #12
 80026d6:	4691      	mov	r9, r2
 80026d8:	0b36      	lsrs	r6, r6, #12
 80026da:	0b09      	lsrs	r1, r1, #12
 80026dc:	0d40      	lsrs	r0, r0, #21
 80026de:	45ba      	cmp	sl, r7
 80026e0:	d01e      	beq.n	8002720 <__ledf2+0x74>
 80026e2:	42b8      	cmp	r0, r7
 80026e4:	d00d      	beq.n	8002702 <__ledf2+0x56>
 80026e6:	4657      	mov	r7, sl
 80026e8:	2f00      	cmp	r7, #0
 80026ea:	d127      	bne.n	800273c <__ledf2+0x90>
 80026ec:	4334      	orrs	r4, r6
 80026ee:	2800      	cmp	r0, #0
 80026f0:	d133      	bne.n	800275a <__ledf2+0xae>
 80026f2:	430a      	orrs	r2, r1
 80026f4:	d034      	beq.n	8002760 <__ledf2+0xb4>
 80026f6:	2c00      	cmp	r4, #0
 80026f8:	d140      	bne.n	800277c <__ledf2+0xd0>
 80026fa:	4663      	mov	r3, ip
 80026fc:	0058      	lsls	r0, r3, #1
 80026fe:	3801      	subs	r0, #1
 8002700:	e015      	b.n	800272e <__ledf2+0x82>
 8002702:	4311      	orrs	r1, r2
 8002704:	d112      	bne.n	800272c <__ledf2+0x80>
 8002706:	4653      	mov	r3, sl
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <__ledf2+0x64>
 800270c:	4326      	orrs	r6, r4
 800270e:	d0f4      	beq.n	80026fa <__ledf2+0x4e>
 8002710:	9b01      	ldr	r3, [sp, #4]
 8002712:	4563      	cmp	r3, ip
 8002714:	d01d      	beq.n	8002752 <__ledf2+0xa6>
 8002716:	2001      	movs	r0, #1
 8002718:	9b01      	ldr	r3, [sp, #4]
 800271a:	425f      	negs	r7, r3
 800271c:	4338      	orrs	r0, r7
 800271e:	e006      	b.n	800272e <__ledf2+0x82>
 8002720:	4326      	orrs	r6, r4
 8002722:	d103      	bne.n	800272c <__ledf2+0x80>
 8002724:	4550      	cmp	r0, sl
 8002726:	d1f6      	bne.n	8002716 <__ledf2+0x6a>
 8002728:	4311      	orrs	r1, r2
 800272a:	d01c      	beq.n	8002766 <__ledf2+0xba>
 800272c:	2002      	movs	r0, #2
 800272e:	b003      	add	sp, #12
 8002730:	bcf0      	pop	{r4, r5, r6, r7}
 8002732:	46bb      	mov	fp, r7
 8002734:	46b2      	mov	sl, r6
 8002736:	46a9      	mov	r9, r5
 8002738:	46a0      	mov	r8, r4
 800273a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800273c:	2800      	cmp	r0, #0
 800273e:	d0ea      	beq.n	8002716 <__ledf2+0x6a>
 8002740:	9b01      	ldr	r3, [sp, #4]
 8002742:	4563      	cmp	r3, ip
 8002744:	d1e7      	bne.n	8002716 <__ledf2+0x6a>
 8002746:	4582      	cmp	sl, r0
 8002748:	dce5      	bgt.n	8002716 <__ledf2+0x6a>
 800274a:	db02      	blt.n	8002752 <__ledf2+0xa6>
 800274c:	428e      	cmp	r6, r1
 800274e:	d8e2      	bhi.n	8002716 <__ledf2+0x6a>
 8002750:	d00e      	beq.n	8002770 <__ledf2+0xc4>
 8002752:	9b01      	ldr	r3, [sp, #4]
 8002754:	0058      	lsls	r0, r3, #1
 8002756:	3801      	subs	r0, #1
 8002758:	e7e9      	b.n	800272e <__ledf2+0x82>
 800275a:	2c00      	cmp	r4, #0
 800275c:	d0cd      	beq.n	80026fa <__ledf2+0x4e>
 800275e:	e7d7      	b.n	8002710 <__ledf2+0x64>
 8002760:	2c00      	cmp	r4, #0
 8002762:	d0e4      	beq.n	800272e <__ledf2+0x82>
 8002764:	e7d7      	b.n	8002716 <__ledf2+0x6a>
 8002766:	9b01      	ldr	r3, [sp, #4]
 8002768:	2000      	movs	r0, #0
 800276a:	4563      	cmp	r3, ip
 800276c:	d0df      	beq.n	800272e <__ledf2+0x82>
 800276e:	e7d2      	b.n	8002716 <__ledf2+0x6a>
 8002770:	45c8      	cmp	r8, r9
 8002772:	d8d0      	bhi.n	8002716 <__ledf2+0x6a>
 8002774:	2000      	movs	r0, #0
 8002776:	45c8      	cmp	r8, r9
 8002778:	d2d9      	bcs.n	800272e <__ledf2+0x82>
 800277a:	e7ea      	b.n	8002752 <__ledf2+0xa6>
 800277c:	9b01      	ldr	r3, [sp, #4]
 800277e:	4563      	cmp	r3, ip
 8002780:	d0e4      	beq.n	800274c <__ledf2+0xa0>
 8002782:	e7c8      	b.n	8002716 <__ledf2+0x6a>
 8002784:	000007ff 	.word	0x000007ff

08002788 <__aeabi_dmul>:
 8002788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278a:	4657      	mov	r7, sl
 800278c:	464e      	mov	r6, r9
 800278e:	46de      	mov	lr, fp
 8002790:	4645      	mov	r5, r8
 8002792:	b5e0      	push	{r5, r6, r7, lr}
 8002794:	001f      	movs	r7, r3
 8002796:	030b      	lsls	r3, r1, #12
 8002798:	0b1b      	lsrs	r3, r3, #12
 800279a:	0016      	movs	r6, r2
 800279c:	469a      	mov	sl, r3
 800279e:	0fca      	lsrs	r2, r1, #31
 80027a0:	004b      	lsls	r3, r1, #1
 80027a2:	0004      	movs	r4, r0
 80027a4:	4691      	mov	r9, r2
 80027a6:	b085      	sub	sp, #20
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	d100      	bne.n	80027ae <__aeabi_dmul+0x26>
 80027ac:	e1cf      	b.n	8002b4e <__aeabi_dmul+0x3c6>
 80027ae:	4acd      	ldr	r2, [pc, #820]	@ (8002ae4 <__aeabi_dmul+0x35c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d055      	beq.n	8002860 <__aeabi_dmul+0xd8>
 80027b4:	4651      	mov	r1, sl
 80027b6:	0f42      	lsrs	r2, r0, #29
 80027b8:	00c9      	lsls	r1, r1, #3
 80027ba:	430a      	orrs	r2, r1
 80027bc:	2180      	movs	r1, #128	@ 0x80
 80027be:	0409      	lsls	r1, r1, #16
 80027c0:	4311      	orrs	r1, r2
 80027c2:	00c2      	lsls	r2, r0, #3
 80027c4:	4690      	mov	r8, r2
 80027c6:	4ac8      	ldr	r2, [pc, #800]	@ (8002ae8 <__aeabi_dmul+0x360>)
 80027c8:	468a      	mov	sl, r1
 80027ca:	4693      	mov	fp, r2
 80027cc:	449b      	add	fp, r3
 80027ce:	2300      	movs	r3, #0
 80027d0:	2500      	movs	r5, #0
 80027d2:	9302      	str	r3, [sp, #8]
 80027d4:	033c      	lsls	r4, r7, #12
 80027d6:	007b      	lsls	r3, r7, #1
 80027d8:	0ffa      	lsrs	r2, r7, #31
 80027da:	9601      	str	r6, [sp, #4]
 80027dc:	0b24      	lsrs	r4, r4, #12
 80027de:	0d5b      	lsrs	r3, r3, #21
 80027e0:	9200      	str	r2, [sp, #0]
 80027e2:	d100      	bne.n	80027e6 <__aeabi_dmul+0x5e>
 80027e4:	e188      	b.n	8002af8 <__aeabi_dmul+0x370>
 80027e6:	4abf      	ldr	r2, [pc, #764]	@ (8002ae4 <__aeabi_dmul+0x35c>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d100      	bne.n	80027ee <__aeabi_dmul+0x66>
 80027ec:	e092      	b.n	8002914 <__aeabi_dmul+0x18c>
 80027ee:	4abe      	ldr	r2, [pc, #760]	@ (8002ae8 <__aeabi_dmul+0x360>)
 80027f0:	4694      	mov	ip, r2
 80027f2:	4463      	add	r3, ip
 80027f4:	449b      	add	fp, r3
 80027f6:	2d0a      	cmp	r5, #10
 80027f8:	dc42      	bgt.n	8002880 <__aeabi_dmul+0xf8>
 80027fa:	00e4      	lsls	r4, r4, #3
 80027fc:	0f73      	lsrs	r3, r6, #29
 80027fe:	4323      	orrs	r3, r4
 8002800:	2480      	movs	r4, #128	@ 0x80
 8002802:	4649      	mov	r1, r9
 8002804:	0424      	lsls	r4, r4, #16
 8002806:	431c      	orrs	r4, r3
 8002808:	00f3      	lsls	r3, r6, #3
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	9b00      	ldr	r3, [sp, #0]
 800280e:	2000      	movs	r0, #0
 8002810:	4059      	eors	r1, r3
 8002812:	b2cb      	uxtb	r3, r1
 8002814:	9303      	str	r3, [sp, #12]
 8002816:	2d02      	cmp	r5, #2
 8002818:	dc00      	bgt.n	800281c <__aeabi_dmul+0x94>
 800281a:	e094      	b.n	8002946 <__aeabi_dmul+0x1be>
 800281c:	2301      	movs	r3, #1
 800281e:	40ab      	lsls	r3, r5
 8002820:	001d      	movs	r5, r3
 8002822:	23a6      	movs	r3, #166	@ 0xa6
 8002824:	002a      	movs	r2, r5
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	401a      	ands	r2, r3
 800282a:	421d      	tst	r5, r3
 800282c:	d000      	beq.n	8002830 <__aeabi_dmul+0xa8>
 800282e:	e229      	b.n	8002c84 <__aeabi_dmul+0x4fc>
 8002830:	2390      	movs	r3, #144	@ 0x90
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	421d      	tst	r5, r3
 8002836:	d100      	bne.n	800283a <__aeabi_dmul+0xb2>
 8002838:	e24d      	b.n	8002cd6 <__aeabi_dmul+0x54e>
 800283a:	2300      	movs	r3, #0
 800283c:	2480      	movs	r4, #128	@ 0x80
 800283e:	4699      	mov	r9, r3
 8002840:	0324      	lsls	r4, r4, #12
 8002842:	4ba8      	ldr	r3, [pc, #672]	@ (8002ae4 <__aeabi_dmul+0x35c>)
 8002844:	0010      	movs	r0, r2
 8002846:	464a      	mov	r2, r9
 8002848:	051b      	lsls	r3, r3, #20
 800284a:	4323      	orrs	r3, r4
 800284c:	07d2      	lsls	r2, r2, #31
 800284e:	4313      	orrs	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	b005      	add	sp, #20
 8002854:	bcf0      	pop	{r4, r5, r6, r7}
 8002856:	46bb      	mov	fp, r7
 8002858:	46b2      	mov	sl, r6
 800285a:	46a9      	mov	r9, r5
 800285c:	46a0      	mov	r8, r4
 800285e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002860:	4652      	mov	r2, sl
 8002862:	4302      	orrs	r2, r0
 8002864:	4690      	mov	r8, r2
 8002866:	d000      	beq.n	800286a <__aeabi_dmul+0xe2>
 8002868:	e1ac      	b.n	8002bc4 <__aeabi_dmul+0x43c>
 800286a:	469b      	mov	fp, r3
 800286c:	2302      	movs	r3, #2
 800286e:	4692      	mov	sl, r2
 8002870:	2508      	movs	r5, #8
 8002872:	9302      	str	r3, [sp, #8]
 8002874:	e7ae      	b.n	80027d4 <__aeabi_dmul+0x4c>
 8002876:	9b00      	ldr	r3, [sp, #0]
 8002878:	46a2      	mov	sl, r4
 800287a:	4699      	mov	r9, r3
 800287c:	9b01      	ldr	r3, [sp, #4]
 800287e:	4698      	mov	r8, r3
 8002880:	9b02      	ldr	r3, [sp, #8]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d100      	bne.n	8002888 <__aeabi_dmul+0x100>
 8002886:	e1ca      	b.n	8002c1e <__aeabi_dmul+0x496>
 8002888:	2b03      	cmp	r3, #3
 800288a:	d100      	bne.n	800288e <__aeabi_dmul+0x106>
 800288c:	e192      	b.n	8002bb4 <__aeabi_dmul+0x42c>
 800288e:	2b01      	cmp	r3, #1
 8002890:	d110      	bne.n	80028b4 <__aeabi_dmul+0x12c>
 8002892:	2300      	movs	r3, #0
 8002894:	2400      	movs	r4, #0
 8002896:	2200      	movs	r2, #0
 8002898:	e7d4      	b.n	8002844 <__aeabi_dmul+0xbc>
 800289a:	2201      	movs	r2, #1
 800289c:	087b      	lsrs	r3, r7, #1
 800289e:	403a      	ands	r2, r7
 80028a0:	4313      	orrs	r3, r2
 80028a2:	4652      	mov	r2, sl
 80028a4:	07d2      	lsls	r2, r2, #31
 80028a6:	4313      	orrs	r3, r2
 80028a8:	4698      	mov	r8, r3
 80028aa:	4653      	mov	r3, sl
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	469a      	mov	sl, r3
 80028b0:	9b03      	ldr	r3, [sp, #12]
 80028b2:	4699      	mov	r9, r3
 80028b4:	465b      	mov	r3, fp
 80028b6:	1c58      	adds	r0, r3, #1
 80028b8:	2380      	movs	r3, #128	@ 0x80
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	445b      	add	r3, fp
 80028be:	2b00      	cmp	r3, #0
 80028c0:	dc00      	bgt.n	80028c4 <__aeabi_dmul+0x13c>
 80028c2:	e1b1      	b.n	8002c28 <__aeabi_dmul+0x4a0>
 80028c4:	4642      	mov	r2, r8
 80028c6:	0752      	lsls	r2, r2, #29
 80028c8:	d00b      	beq.n	80028e2 <__aeabi_dmul+0x15a>
 80028ca:	220f      	movs	r2, #15
 80028cc:	4641      	mov	r1, r8
 80028ce:	400a      	ands	r2, r1
 80028d0:	2a04      	cmp	r2, #4
 80028d2:	d006      	beq.n	80028e2 <__aeabi_dmul+0x15a>
 80028d4:	4642      	mov	r2, r8
 80028d6:	1d11      	adds	r1, r2, #4
 80028d8:	4541      	cmp	r1, r8
 80028da:	4192      	sbcs	r2, r2
 80028dc:	4688      	mov	r8, r1
 80028de:	4252      	negs	r2, r2
 80028e0:	4492      	add	sl, r2
 80028e2:	4652      	mov	r2, sl
 80028e4:	01d2      	lsls	r2, r2, #7
 80028e6:	d506      	bpl.n	80028f6 <__aeabi_dmul+0x16e>
 80028e8:	4652      	mov	r2, sl
 80028ea:	4b80      	ldr	r3, [pc, #512]	@ (8002aec <__aeabi_dmul+0x364>)
 80028ec:	401a      	ands	r2, r3
 80028ee:	2380      	movs	r3, #128	@ 0x80
 80028f0:	4692      	mov	sl, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	18c3      	adds	r3, r0, r3
 80028f6:	4a7e      	ldr	r2, [pc, #504]	@ (8002af0 <__aeabi_dmul+0x368>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	dd00      	ble.n	80028fe <__aeabi_dmul+0x176>
 80028fc:	e18f      	b.n	8002c1e <__aeabi_dmul+0x496>
 80028fe:	4642      	mov	r2, r8
 8002900:	08d1      	lsrs	r1, r2, #3
 8002902:	4652      	mov	r2, sl
 8002904:	0752      	lsls	r2, r2, #29
 8002906:	430a      	orrs	r2, r1
 8002908:	4651      	mov	r1, sl
 800290a:	055b      	lsls	r3, r3, #21
 800290c:	024c      	lsls	r4, r1, #9
 800290e:	0b24      	lsrs	r4, r4, #12
 8002910:	0d5b      	lsrs	r3, r3, #21
 8002912:	e797      	b.n	8002844 <__aeabi_dmul+0xbc>
 8002914:	4b73      	ldr	r3, [pc, #460]	@ (8002ae4 <__aeabi_dmul+0x35c>)
 8002916:	4326      	orrs	r6, r4
 8002918:	469c      	mov	ip, r3
 800291a:	44e3      	add	fp, ip
 800291c:	2e00      	cmp	r6, #0
 800291e:	d100      	bne.n	8002922 <__aeabi_dmul+0x19a>
 8002920:	e16f      	b.n	8002c02 <__aeabi_dmul+0x47a>
 8002922:	2303      	movs	r3, #3
 8002924:	4649      	mov	r1, r9
 8002926:	431d      	orrs	r5, r3
 8002928:	9b00      	ldr	r3, [sp, #0]
 800292a:	4059      	eors	r1, r3
 800292c:	b2cb      	uxtb	r3, r1
 800292e:	9303      	str	r3, [sp, #12]
 8002930:	2d0a      	cmp	r5, #10
 8002932:	dd00      	ble.n	8002936 <__aeabi_dmul+0x1ae>
 8002934:	e133      	b.n	8002b9e <__aeabi_dmul+0x416>
 8002936:	2301      	movs	r3, #1
 8002938:	40ab      	lsls	r3, r5
 800293a:	001d      	movs	r5, r3
 800293c:	2303      	movs	r3, #3
 800293e:	9302      	str	r3, [sp, #8]
 8002940:	2288      	movs	r2, #136	@ 0x88
 8002942:	422a      	tst	r2, r5
 8002944:	d197      	bne.n	8002876 <__aeabi_dmul+0xee>
 8002946:	4642      	mov	r2, r8
 8002948:	4643      	mov	r3, r8
 800294a:	0412      	lsls	r2, r2, #16
 800294c:	0c12      	lsrs	r2, r2, #16
 800294e:	0016      	movs	r6, r2
 8002950:	9801      	ldr	r0, [sp, #4]
 8002952:	0c1d      	lsrs	r5, r3, #16
 8002954:	0c03      	lsrs	r3, r0, #16
 8002956:	0400      	lsls	r0, r0, #16
 8002958:	0c00      	lsrs	r0, r0, #16
 800295a:	4346      	muls	r6, r0
 800295c:	46b4      	mov	ip, r6
 800295e:	001e      	movs	r6, r3
 8002960:	436e      	muls	r6, r5
 8002962:	9600      	str	r6, [sp, #0]
 8002964:	0016      	movs	r6, r2
 8002966:	0007      	movs	r7, r0
 8002968:	435e      	muls	r6, r3
 800296a:	4661      	mov	r1, ip
 800296c:	46b0      	mov	r8, r6
 800296e:	436f      	muls	r7, r5
 8002970:	0c0e      	lsrs	r6, r1, #16
 8002972:	44b8      	add	r8, r7
 8002974:	4446      	add	r6, r8
 8002976:	42b7      	cmp	r7, r6
 8002978:	d905      	bls.n	8002986 <__aeabi_dmul+0x1fe>
 800297a:	2180      	movs	r1, #128	@ 0x80
 800297c:	0249      	lsls	r1, r1, #9
 800297e:	4688      	mov	r8, r1
 8002980:	9f00      	ldr	r7, [sp, #0]
 8002982:	4447      	add	r7, r8
 8002984:	9700      	str	r7, [sp, #0]
 8002986:	4661      	mov	r1, ip
 8002988:	0409      	lsls	r1, r1, #16
 800298a:	0c09      	lsrs	r1, r1, #16
 800298c:	0c37      	lsrs	r7, r6, #16
 800298e:	0436      	lsls	r6, r6, #16
 8002990:	468c      	mov	ip, r1
 8002992:	0031      	movs	r1, r6
 8002994:	4461      	add	r1, ip
 8002996:	9101      	str	r1, [sp, #4]
 8002998:	0011      	movs	r1, r2
 800299a:	0c26      	lsrs	r6, r4, #16
 800299c:	0424      	lsls	r4, r4, #16
 800299e:	0c24      	lsrs	r4, r4, #16
 80029a0:	4361      	muls	r1, r4
 80029a2:	468c      	mov	ip, r1
 80029a4:	0021      	movs	r1, r4
 80029a6:	4369      	muls	r1, r5
 80029a8:	4689      	mov	r9, r1
 80029aa:	4661      	mov	r1, ip
 80029ac:	0c09      	lsrs	r1, r1, #16
 80029ae:	4688      	mov	r8, r1
 80029b0:	4372      	muls	r2, r6
 80029b2:	444a      	add	r2, r9
 80029b4:	4442      	add	r2, r8
 80029b6:	4375      	muls	r5, r6
 80029b8:	4591      	cmp	r9, r2
 80029ba:	d903      	bls.n	80029c4 <__aeabi_dmul+0x23c>
 80029bc:	2180      	movs	r1, #128	@ 0x80
 80029be:	0249      	lsls	r1, r1, #9
 80029c0:	4688      	mov	r8, r1
 80029c2:	4445      	add	r5, r8
 80029c4:	0c11      	lsrs	r1, r2, #16
 80029c6:	4688      	mov	r8, r1
 80029c8:	4661      	mov	r1, ip
 80029ca:	0409      	lsls	r1, r1, #16
 80029cc:	0c09      	lsrs	r1, r1, #16
 80029ce:	468c      	mov	ip, r1
 80029d0:	0412      	lsls	r2, r2, #16
 80029d2:	4462      	add	r2, ip
 80029d4:	18b9      	adds	r1, r7, r2
 80029d6:	9102      	str	r1, [sp, #8]
 80029d8:	4651      	mov	r1, sl
 80029da:	0c09      	lsrs	r1, r1, #16
 80029dc:	468c      	mov	ip, r1
 80029de:	4651      	mov	r1, sl
 80029e0:	040f      	lsls	r7, r1, #16
 80029e2:	0c3f      	lsrs	r7, r7, #16
 80029e4:	0039      	movs	r1, r7
 80029e6:	4341      	muls	r1, r0
 80029e8:	4445      	add	r5, r8
 80029ea:	4688      	mov	r8, r1
 80029ec:	4661      	mov	r1, ip
 80029ee:	4341      	muls	r1, r0
 80029f0:	468a      	mov	sl, r1
 80029f2:	4641      	mov	r1, r8
 80029f4:	4660      	mov	r0, ip
 80029f6:	0c09      	lsrs	r1, r1, #16
 80029f8:	4689      	mov	r9, r1
 80029fa:	4358      	muls	r0, r3
 80029fc:	437b      	muls	r3, r7
 80029fe:	4453      	add	r3, sl
 8002a00:	444b      	add	r3, r9
 8002a02:	459a      	cmp	sl, r3
 8002a04:	d903      	bls.n	8002a0e <__aeabi_dmul+0x286>
 8002a06:	2180      	movs	r1, #128	@ 0x80
 8002a08:	0249      	lsls	r1, r1, #9
 8002a0a:	4689      	mov	r9, r1
 8002a0c:	4448      	add	r0, r9
 8002a0e:	0c19      	lsrs	r1, r3, #16
 8002a10:	4689      	mov	r9, r1
 8002a12:	4641      	mov	r1, r8
 8002a14:	0409      	lsls	r1, r1, #16
 8002a16:	0c09      	lsrs	r1, r1, #16
 8002a18:	4688      	mov	r8, r1
 8002a1a:	0039      	movs	r1, r7
 8002a1c:	4361      	muls	r1, r4
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	4443      	add	r3, r8
 8002a22:	4688      	mov	r8, r1
 8002a24:	4661      	mov	r1, ip
 8002a26:	434c      	muls	r4, r1
 8002a28:	4371      	muls	r1, r6
 8002a2a:	468c      	mov	ip, r1
 8002a2c:	4641      	mov	r1, r8
 8002a2e:	4377      	muls	r7, r6
 8002a30:	0c0e      	lsrs	r6, r1, #16
 8002a32:	193f      	adds	r7, r7, r4
 8002a34:	19f6      	adds	r6, r6, r7
 8002a36:	4448      	add	r0, r9
 8002a38:	42b4      	cmp	r4, r6
 8002a3a:	d903      	bls.n	8002a44 <__aeabi_dmul+0x2bc>
 8002a3c:	2180      	movs	r1, #128	@ 0x80
 8002a3e:	0249      	lsls	r1, r1, #9
 8002a40:	4689      	mov	r9, r1
 8002a42:	44cc      	add	ip, r9
 8002a44:	9902      	ldr	r1, [sp, #8]
 8002a46:	9f00      	ldr	r7, [sp, #0]
 8002a48:	4689      	mov	r9, r1
 8002a4a:	0431      	lsls	r1, r6, #16
 8002a4c:	444f      	add	r7, r9
 8002a4e:	4689      	mov	r9, r1
 8002a50:	4641      	mov	r1, r8
 8002a52:	4297      	cmp	r7, r2
 8002a54:	4192      	sbcs	r2, r2
 8002a56:	040c      	lsls	r4, r1, #16
 8002a58:	0c24      	lsrs	r4, r4, #16
 8002a5a:	444c      	add	r4, r9
 8002a5c:	18ff      	adds	r7, r7, r3
 8002a5e:	4252      	negs	r2, r2
 8002a60:	1964      	adds	r4, r4, r5
 8002a62:	18a1      	adds	r1, r4, r2
 8002a64:	429f      	cmp	r7, r3
 8002a66:	419b      	sbcs	r3, r3
 8002a68:	4688      	mov	r8, r1
 8002a6a:	4682      	mov	sl, r0
 8002a6c:	425b      	negs	r3, r3
 8002a6e:	4699      	mov	r9, r3
 8002a70:	4590      	cmp	r8, r2
 8002a72:	4192      	sbcs	r2, r2
 8002a74:	42ac      	cmp	r4, r5
 8002a76:	41a4      	sbcs	r4, r4
 8002a78:	44c2      	add	sl, r8
 8002a7a:	44d1      	add	r9, sl
 8002a7c:	4252      	negs	r2, r2
 8002a7e:	4264      	negs	r4, r4
 8002a80:	4314      	orrs	r4, r2
 8002a82:	4599      	cmp	r9, r3
 8002a84:	419b      	sbcs	r3, r3
 8002a86:	4582      	cmp	sl, r0
 8002a88:	4192      	sbcs	r2, r2
 8002a8a:	425b      	negs	r3, r3
 8002a8c:	4252      	negs	r2, r2
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	464a      	mov	r2, r9
 8002a92:	0c36      	lsrs	r6, r6, #16
 8002a94:	19a4      	adds	r4, r4, r6
 8002a96:	18e3      	adds	r3, r4, r3
 8002a98:	4463      	add	r3, ip
 8002a9a:	025b      	lsls	r3, r3, #9
 8002a9c:	0dd2      	lsrs	r2, r2, #23
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	9901      	ldr	r1, [sp, #4]
 8002aa2:	4692      	mov	sl, r2
 8002aa4:	027a      	lsls	r2, r7, #9
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	1e50      	subs	r0, r2, #1
 8002aaa:	4182      	sbcs	r2, r0
 8002aac:	0dff      	lsrs	r7, r7, #23
 8002aae:	4317      	orrs	r7, r2
 8002ab0:	464a      	mov	r2, r9
 8002ab2:	0252      	lsls	r2, r2, #9
 8002ab4:	4317      	orrs	r7, r2
 8002ab6:	46b8      	mov	r8, r7
 8002ab8:	01db      	lsls	r3, r3, #7
 8002aba:	d500      	bpl.n	8002abe <__aeabi_dmul+0x336>
 8002abc:	e6ed      	b.n	800289a <__aeabi_dmul+0x112>
 8002abe:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <__aeabi_dmul+0x36c>)
 8002ac0:	9a03      	ldr	r2, [sp, #12]
 8002ac2:	445b      	add	r3, fp
 8002ac4:	4691      	mov	r9, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	dc00      	bgt.n	8002acc <__aeabi_dmul+0x344>
 8002aca:	e0ac      	b.n	8002c26 <__aeabi_dmul+0x49e>
 8002acc:	003a      	movs	r2, r7
 8002ace:	0752      	lsls	r2, r2, #29
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dmul+0x34c>
 8002ad2:	e710      	b.n	80028f6 <__aeabi_dmul+0x16e>
 8002ad4:	220f      	movs	r2, #15
 8002ad6:	4658      	mov	r0, fp
 8002ad8:	403a      	ands	r2, r7
 8002ada:	2a04      	cmp	r2, #4
 8002adc:	d000      	beq.n	8002ae0 <__aeabi_dmul+0x358>
 8002ade:	e6f9      	b.n	80028d4 <__aeabi_dmul+0x14c>
 8002ae0:	e709      	b.n	80028f6 <__aeabi_dmul+0x16e>
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	000007ff 	.word	0x000007ff
 8002ae8:	fffffc01 	.word	0xfffffc01
 8002aec:	feffffff 	.word	0xfeffffff
 8002af0:	000007fe 	.word	0x000007fe
 8002af4:	000003ff 	.word	0x000003ff
 8002af8:	0022      	movs	r2, r4
 8002afa:	4332      	orrs	r2, r6
 8002afc:	d06f      	beq.n	8002bde <__aeabi_dmul+0x456>
 8002afe:	2c00      	cmp	r4, #0
 8002b00:	d100      	bne.n	8002b04 <__aeabi_dmul+0x37c>
 8002b02:	e0c2      	b.n	8002c8a <__aeabi_dmul+0x502>
 8002b04:	0020      	movs	r0, r4
 8002b06:	f000 fe27 	bl	8003758 <__clzsi2>
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	3a0b      	subs	r2, #11
 8002b10:	201d      	movs	r0, #29
 8002b12:	1a82      	subs	r2, r0, r2
 8002b14:	0030      	movs	r0, r6
 8002b16:	0019      	movs	r1, r3
 8002b18:	40d0      	lsrs	r0, r2
 8002b1a:	3908      	subs	r1, #8
 8002b1c:	408c      	lsls	r4, r1
 8002b1e:	0002      	movs	r2, r0
 8002b20:	4322      	orrs	r2, r4
 8002b22:	0034      	movs	r4, r6
 8002b24:	408c      	lsls	r4, r1
 8002b26:	4659      	mov	r1, fp
 8002b28:	1acb      	subs	r3, r1, r3
 8002b2a:	4986      	ldr	r1, [pc, #536]	@ (8002d44 <__aeabi_dmul+0x5bc>)
 8002b2c:	468b      	mov	fp, r1
 8002b2e:	449b      	add	fp, r3
 8002b30:	2d0a      	cmp	r5, #10
 8002b32:	dd00      	ble.n	8002b36 <__aeabi_dmul+0x3ae>
 8002b34:	e6a4      	b.n	8002880 <__aeabi_dmul+0xf8>
 8002b36:	4649      	mov	r1, r9
 8002b38:	9b00      	ldr	r3, [sp, #0]
 8002b3a:	9401      	str	r4, [sp, #4]
 8002b3c:	4059      	eors	r1, r3
 8002b3e:	b2cb      	uxtb	r3, r1
 8002b40:	0014      	movs	r4, r2
 8002b42:	2000      	movs	r0, #0
 8002b44:	9303      	str	r3, [sp, #12]
 8002b46:	2d02      	cmp	r5, #2
 8002b48:	dd00      	ble.n	8002b4c <__aeabi_dmul+0x3c4>
 8002b4a:	e667      	b.n	800281c <__aeabi_dmul+0x94>
 8002b4c:	e6fb      	b.n	8002946 <__aeabi_dmul+0x1be>
 8002b4e:	4653      	mov	r3, sl
 8002b50:	4303      	orrs	r3, r0
 8002b52:	4698      	mov	r8, r3
 8002b54:	d03c      	beq.n	8002bd0 <__aeabi_dmul+0x448>
 8002b56:	4653      	mov	r3, sl
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d100      	bne.n	8002b5e <__aeabi_dmul+0x3d6>
 8002b5c:	e0a3      	b.n	8002ca6 <__aeabi_dmul+0x51e>
 8002b5e:	4650      	mov	r0, sl
 8002b60:	f000 fdfa 	bl	8003758 <__clzsi2>
 8002b64:	230b      	movs	r3, #11
 8002b66:	425b      	negs	r3, r3
 8002b68:	469c      	mov	ip, r3
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	4484      	add	ip, r0
 8002b6e:	0011      	movs	r1, r2
 8002b70:	4650      	mov	r0, sl
 8002b72:	3908      	subs	r1, #8
 8002b74:	4088      	lsls	r0, r1
 8002b76:	231d      	movs	r3, #29
 8002b78:	4680      	mov	r8, r0
 8002b7a:	4660      	mov	r0, ip
 8002b7c:	1a1b      	subs	r3, r3, r0
 8002b7e:	0020      	movs	r0, r4
 8002b80:	40d8      	lsrs	r0, r3
 8002b82:	0003      	movs	r3, r0
 8002b84:	4640      	mov	r0, r8
 8002b86:	4303      	orrs	r3, r0
 8002b88:	469a      	mov	sl, r3
 8002b8a:	0023      	movs	r3, r4
 8002b8c:	408b      	lsls	r3, r1
 8002b8e:	4698      	mov	r8, r3
 8002b90:	4b6c      	ldr	r3, [pc, #432]	@ (8002d44 <__aeabi_dmul+0x5bc>)
 8002b92:	2500      	movs	r5, #0
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	469b      	mov	fp, r3
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9302      	str	r3, [sp, #8]
 8002b9c:	e61a      	b.n	80027d4 <__aeabi_dmul+0x4c>
 8002b9e:	2d0f      	cmp	r5, #15
 8002ba0:	d000      	beq.n	8002ba4 <__aeabi_dmul+0x41c>
 8002ba2:	e0c9      	b.n	8002d38 <__aeabi_dmul+0x5b0>
 8002ba4:	2380      	movs	r3, #128	@ 0x80
 8002ba6:	4652      	mov	r2, sl
 8002ba8:	031b      	lsls	r3, r3, #12
 8002baa:	421a      	tst	r2, r3
 8002bac:	d002      	beq.n	8002bb4 <__aeabi_dmul+0x42c>
 8002bae:	421c      	tst	r4, r3
 8002bb0:	d100      	bne.n	8002bb4 <__aeabi_dmul+0x42c>
 8002bb2:	e092      	b.n	8002cda <__aeabi_dmul+0x552>
 8002bb4:	2480      	movs	r4, #128	@ 0x80
 8002bb6:	4653      	mov	r3, sl
 8002bb8:	0324      	lsls	r4, r4, #12
 8002bba:	431c      	orrs	r4, r3
 8002bbc:	0324      	lsls	r4, r4, #12
 8002bbe:	4642      	mov	r2, r8
 8002bc0:	0b24      	lsrs	r4, r4, #12
 8002bc2:	e63e      	b.n	8002842 <__aeabi_dmul+0xba>
 8002bc4:	469b      	mov	fp, r3
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	4680      	mov	r8, r0
 8002bca:	250c      	movs	r5, #12
 8002bcc:	9302      	str	r3, [sp, #8]
 8002bce:	e601      	b.n	80027d4 <__aeabi_dmul+0x4c>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	469a      	mov	sl, r3
 8002bd4:	469b      	mov	fp, r3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	2504      	movs	r5, #4
 8002bda:	9302      	str	r3, [sp, #8]
 8002bdc:	e5fa      	b.n	80027d4 <__aeabi_dmul+0x4c>
 8002bde:	2101      	movs	r1, #1
 8002be0:	430d      	orrs	r5, r1
 8002be2:	2d0a      	cmp	r5, #10
 8002be4:	dd00      	ble.n	8002be8 <__aeabi_dmul+0x460>
 8002be6:	e64b      	b.n	8002880 <__aeabi_dmul+0xf8>
 8002be8:	4649      	mov	r1, r9
 8002bea:	9800      	ldr	r0, [sp, #0]
 8002bec:	4041      	eors	r1, r0
 8002bee:	b2c9      	uxtb	r1, r1
 8002bf0:	9103      	str	r1, [sp, #12]
 8002bf2:	2d02      	cmp	r5, #2
 8002bf4:	dc00      	bgt.n	8002bf8 <__aeabi_dmul+0x470>
 8002bf6:	e096      	b.n	8002d26 <__aeabi_dmul+0x59e>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2400      	movs	r4, #0
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	9301      	str	r3, [sp, #4]
 8002c00:	e60c      	b.n	800281c <__aeabi_dmul+0x94>
 8002c02:	4649      	mov	r1, r9
 8002c04:	2302      	movs	r3, #2
 8002c06:	9a00      	ldr	r2, [sp, #0]
 8002c08:	432b      	orrs	r3, r5
 8002c0a:	4051      	eors	r1, r2
 8002c0c:	b2ca      	uxtb	r2, r1
 8002c0e:	9203      	str	r2, [sp, #12]
 8002c10:	2b0a      	cmp	r3, #10
 8002c12:	dd00      	ble.n	8002c16 <__aeabi_dmul+0x48e>
 8002c14:	e634      	b.n	8002880 <__aeabi_dmul+0xf8>
 8002c16:	2d00      	cmp	r5, #0
 8002c18:	d157      	bne.n	8002cca <__aeabi_dmul+0x542>
 8002c1a:	9b03      	ldr	r3, [sp, #12]
 8002c1c:	4699      	mov	r9, r3
 8002c1e:	2400      	movs	r4, #0
 8002c20:	2200      	movs	r2, #0
 8002c22:	4b49      	ldr	r3, [pc, #292]	@ (8002d48 <__aeabi_dmul+0x5c0>)
 8002c24:	e60e      	b.n	8002844 <__aeabi_dmul+0xbc>
 8002c26:	4658      	mov	r0, fp
 8002c28:	2101      	movs	r1, #1
 8002c2a:	1ac9      	subs	r1, r1, r3
 8002c2c:	2938      	cmp	r1, #56	@ 0x38
 8002c2e:	dd00      	ble.n	8002c32 <__aeabi_dmul+0x4aa>
 8002c30:	e62f      	b.n	8002892 <__aeabi_dmul+0x10a>
 8002c32:	291f      	cmp	r1, #31
 8002c34:	dd56      	ble.n	8002ce4 <__aeabi_dmul+0x55c>
 8002c36:	221f      	movs	r2, #31
 8002c38:	4654      	mov	r4, sl
 8002c3a:	4252      	negs	r2, r2
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	40dc      	lsrs	r4, r3
 8002c40:	2920      	cmp	r1, #32
 8002c42:	d007      	beq.n	8002c54 <__aeabi_dmul+0x4cc>
 8002c44:	4b41      	ldr	r3, [pc, #260]	@ (8002d4c <__aeabi_dmul+0x5c4>)
 8002c46:	4642      	mov	r2, r8
 8002c48:	469c      	mov	ip, r3
 8002c4a:	4653      	mov	r3, sl
 8002c4c:	4460      	add	r0, ip
 8002c4e:	4083      	lsls	r3, r0
 8002c50:	431a      	orrs	r2, r3
 8002c52:	4690      	mov	r8, r2
 8002c54:	4642      	mov	r2, r8
 8002c56:	2107      	movs	r1, #7
 8002c58:	1e53      	subs	r3, r2, #1
 8002c5a:	419a      	sbcs	r2, r3
 8002c5c:	000b      	movs	r3, r1
 8002c5e:	4322      	orrs	r2, r4
 8002c60:	4013      	ands	r3, r2
 8002c62:	2400      	movs	r4, #0
 8002c64:	4211      	tst	r1, r2
 8002c66:	d009      	beq.n	8002c7c <__aeabi_dmul+0x4f4>
 8002c68:	230f      	movs	r3, #15
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d05d      	beq.n	8002d2c <__aeabi_dmul+0x5a4>
 8002c70:	1d11      	adds	r1, r2, #4
 8002c72:	4291      	cmp	r1, r2
 8002c74:	419b      	sbcs	r3, r3
 8002c76:	000a      	movs	r2, r1
 8002c78:	425b      	negs	r3, r3
 8002c7a:	075b      	lsls	r3, r3, #29
 8002c7c:	08d2      	lsrs	r2, r2, #3
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	2300      	movs	r3, #0
 8002c82:	e5df      	b.n	8002844 <__aeabi_dmul+0xbc>
 8002c84:	9b03      	ldr	r3, [sp, #12]
 8002c86:	4699      	mov	r9, r3
 8002c88:	e5fa      	b.n	8002880 <__aeabi_dmul+0xf8>
 8002c8a:	9801      	ldr	r0, [sp, #4]
 8002c8c:	f000 fd64 	bl	8003758 <__clzsi2>
 8002c90:	0002      	movs	r2, r0
 8002c92:	0003      	movs	r3, r0
 8002c94:	3215      	adds	r2, #21
 8002c96:	3320      	adds	r3, #32
 8002c98:	2a1c      	cmp	r2, #28
 8002c9a:	dc00      	bgt.n	8002c9e <__aeabi_dmul+0x516>
 8002c9c:	e738      	b.n	8002b10 <__aeabi_dmul+0x388>
 8002c9e:	9a01      	ldr	r2, [sp, #4]
 8002ca0:	3808      	subs	r0, #8
 8002ca2:	4082      	lsls	r2, r0
 8002ca4:	e73f      	b.n	8002b26 <__aeabi_dmul+0x39e>
 8002ca6:	f000 fd57 	bl	8003758 <__clzsi2>
 8002caa:	2315      	movs	r3, #21
 8002cac:	469c      	mov	ip, r3
 8002cae:	4484      	add	ip, r0
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	4663      	mov	r3, ip
 8002cb4:	3220      	adds	r2, #32
 8002cb6:	2b1c      	cmp	r3, #28
 8002cb8:	dc00      	bgt.n	8002cbc <__aeabi_dmul+0x534>
 8002cba:	e758      	b.n	8002b6e <__aeabi_dmul+0x3e6>
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	4698      	mov	r8, r3
 8002cc0:	0023      	movs	r3, r4
 8002cc2:	3808      	subs	r0, #8
 8002cc4:	4083      	lsls	r3, r0
 8002cc6:	469a      	mov	sl, r3
 8002cc8:	e762      	b.n	8002b90 <__aeabi_dmul+0x408>
 8002cca:	001d      	movs	r5, r3
 8002ccc:	2300      	movs	r3, #0
 8002cce:	2400      	movs	r4, #0
 8002cd0:	2002      	movs	r0, #2
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	e5a2      	b.n	800281c <__aeabi_dmul+0x94>
 8002cd6:	9002      	str	r0, [sp, #8]
 8002cd8:	e632      	b.n	8002940 <__aeabi_dmul+0x1b8>
 8002cda:	431c      	orrs	r4, r3
 8002cdc:	9b00      	ldr	r3, [sp, #0]
 8002cde:	9a01      	ldr	r2, [sp, #4]
 8002ce0:	4699      	mov	r9, r3
 8002ce2:	e5ae      	b.n	8002842 <__aeabi_dmul+0xba>
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <__aeabi_dmul+0x5c8>)
 8002ce6:	4652      	mov	r2, sl
 8002ce8:	18c3      	adds	r3, r0, r3
 8002cea:	4640      	mov	r0, r8
 8002cec:	409a      	lsls	r2, r3
 8002cee:	40c8      	lsrs	r0, r1
 8002cf0:	4302      	orrs	r2, r0
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	4098      	lsls	r0, r3
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	1e58      	subs	r0, r3, #1
 8002cfa:	4183      	sbcs	r3, r0
 8002cfc:	4654      	mov	r4, sl
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	40cc      	lsrs	r4, r1
 8002d02:	0753      	lsls	r3, r2, #29
 8002d04:	d009      	beq.n	8002d1a <__aeabi_dmul+0x592>
 8002d06:	230f      	movs	r3, #15
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d005      	beq.n	8002d1a <__aeabi_dmul+0x592>
 8002d0e:	1d13      	adds	r3, r2, #4
 8002d10:	4293      	cmp	r3, r2
 8002d12:	4192      	sbcs	r2, r2
 8002d14:	4252      	negs	r2, r2
 8002d16:	18a4      	adds	r4, r4, r2
 8002d18:	001a      	movs	r2, r3
 8002d1a:	0223      	lsls	r3, r4, #8
 8002d1c:	d508      	bpl.n	8002d30 <__aeabi_dmul+0x5a8>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	2400      	movs	r4, #0
 8002d22:	2200      	movs	r2, #0
 8002d24:	e58e      	b.n	8002844 <__aeabi_dmul+0xbc>
 8002d26:	4689      	mov	r9, r1
 8002d28:	2400      	movs	r4, #0
 8002d2a:	e58b      	b.n	8002844 <__aeabi_dmul+0xbc>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e7a5      	b.n	8002c7c <__aeabi_dmul+0x4f4>
 8002d30:	0763      	lsls	r3, r4, #29
 8002d32:	0264      	lsls	r4, r4, #9
 8002d34:	0b24      	lsrs	r4, r4, #12
 8002d36:	e7a1      	b.n	8002c7c <__aeabi_dmul+0x4f4>
 8002d38:	9b00      	ldr	r3, [sp, #0]
 8002d3a:	46a2      	mov	sl, r4
 8002d3c:	4699      	mov	r9, r3
 8002d3e:	9b01      	ldr	r3, [sp, #4]
 8002d40:	4698      	mov	r8, r3
 8002d42:	e737      	b.n	8002bb4 <__aeabi_dmul+0x42c>
 8002d44:	fffffc0d 	.word	0xfffffc0d
 8002d48:	000007ff 	.word	0x000007ff
 8002d4c:	0000043e 	.word	0x0000043e
 8002d50:	0000041e 	.word	0x0000041e

08002d54 <__aeabi_dsub>:
 8002d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d56:	4657      	mov	r7, sl
 8002d58:	464e      	mov	r6, r9
 8002d5a:	4645      	mov	r5, r8
 8002d5c:	46de      	mov	lr, fp
 8002d5e:	b5e0      	push	{r5, r6, r7, lr}
 8002d60:	b083      	sub	sp, #12
 8002d62:	9000      	str	r0, [sp, #0]
 8002d64:	9101      	str	r1, [sp, #4]
 8002d66:	030c      	lsls	r4, r1, #12
 8002d68:	004d      	lsls	r5, r1, #1
 8002d6a:	0fce      	lsrs	r6, r1, #31
 8002d6c:	0a61      	lsrs	r1, r4, #9
 8002d6e:	9c00      	ldr	r4, [sp, #0]
 8002d70:	005f      	lsls	r7, r3, #1
 8002d72:	0f64      	lsrs	r4, r4, #29
 8002d74:	430c      	orrs	r4, r1
 8002d76:	9900      	ldr	r1, [sp, #0]
 8002d78:	9200      	str	r2, [sp, #0]
 8002d7a:	9301      	str	r3, [sp, #4]
 8002d7c:	00c8      	lsls	r0, r1, #3
 8002d7e:	0319      	lsls	r1, r3, #12
 8002d80:	0d7b      	lsrs	r3, r7, #21
 8002d82:	4699      	mov	r9, r3
 8002d84:	9b01      	ldr	r3, [sp, #4]
 8002d86:	4fcc      	ldr	r7, [pc, #816]	@ (80030b8 <__aeabi_dsub+0x364>)
 8002d88:	0fdb      	lsrs	r3, r3, #31
 8002d8a:	469c      	mov	ip, r3
 8002d8c:	0a4b      	lsrs	r3, r1, #9
 8002d8e:	9900      	ldr	r1, [sp, #0]
 8002d90:	4680      	mov	r8, r0
 8002d92:	0f49      	lsrs	r1, r1, #29
 8002d94:	4319      	orrs	r1, r3
 8002d96:	9b00      	ldr	r3, [sp, #0]
 8002d98:	468b      	mov	fp, r1
 8002d9a:	00da      	lsls	r2, r3, #3
 8002d9c:	4692      	mov	sl, r2
 8002d9e:	0d6d      	lsrs	r5, r5, #21
 8002da0:	45b9      	cmp	r9, r7
 8002da2:	d100      	bne.n	8002da6 <__aeabi_dsub+0x52>
 8002da4:	e0bf      	b.n	8002f26 <__aeabi_dsub+0x1d2>
 8002da6:	2301      	movs	r3, #1
 8002da8:	4661      	mov	r1, ip
 8002daa:	4059      	eors	r1, r3
 8002dac:	464b      	mov	r3, r9
 8002dae:	468c      	mov	ip, r1
 8002db0:	1aeb      	subs	r3, r5, r3
 8002db2:	428e      	cmp	r6, r1
 8002db4:	d075      	beq.n	8002ea2 <__aeabi_dsub+0x14e>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	dc00      	bgt.n	8002dbc <__aeabi_dsub+0x68>
 8002dba:	e2a3      	b.n	8003304 <__aeabi_dsub+0x5b0>
 8002dbc:	4649      	mov	r1, r9
 8002dbe:	2900      	cmp	r1, #0
 8002dc0:	d100      	bne.n	8002dc4 <__aeabi_dsub+0x70>
 8002dc2:	e0ce      	b.n	8002f62 <__aeabi_dsub+0x20e>
 8002dc4:	42bd      	cmp	r5, r7
 8002dc6:	d100      	bne.n	8002dca <__aeabi_dsub+0x76>
 8002dc8:	e200      	b.n	80031cc <__aeabi_dsub+0x478>
 8002dca:	2701      	movs	r7, #1
 8002dcc:	2b38      	cmp	r3, #56	@ 0x38
 8002dce:	dc19      	bgt.n	8002e04 <__aeabi_dsub+0xb0>
 8002dd0:	2780      	movs	r7, #128	@ 0x80
 8002dd2:	4659      	mov	r1, fp
 8002dd4:	043f      	lsls	r7, r7, #16
 8002dd6:	4339      	orrs	r1, r7
 8002dd8:	468b      	mov	fp, r1
 8002dda:	2b1f      	cmp	r3, #31
 8002ddc:	dd00      	ble.n	8002de0 <__aeabi_dsub+0x8c>
 8002dde:	e1fa      	b.n	80031d6 <__aeabi_dsub+0x482>
 8002de0:	2720      	movs	r7, #32
 8002de2:	1af9      	subs	r1, r7, r3
 8002de4:	468c      	mov	ip, r1
 8002de6:	4659      	mov	r1, fp
 8002de8:	4667      	mov	r7, ip
 8002dea:	40b9      	lsls	r1, r7
 8002dec:	000f      	movs	r7, r1
 8002dee:	0011      	movs	r1, r2
 8002df0:	40d9      	lsrs	r1, r3
 8002df2:	430f      	orrs	r7, r1
 8002df4:	4661      	mov	r1, ip
 8002df6:	408a      	lsls	r2, r1
 8002df8:	1e51      	subs	r1, r2, #1
 8002dfa:	418a      	sbcs	r2, r1
 8002dfc:	4659      	mov	r1, fp
 8002dfe:	40d9      	lsrs	r1, r3
 8002e00:	4317      	orrs	r7, r2
 8002e02:	1a64      	subs	r4, r4, r1
 8002e04:	1bc7      	subs	r7, r0, r7
 8002e06:	42b8      	cmp	r0, r7
 8002e08:	4180      	sbcs	r0, r0
 8002e0a:	4240      	negs	r0, r0
 8002e0c:	1a24      	subs	r4, r4, r0
 8002e0e:	0223      	lsls	r3, r4, #8
 8002e10:	d400      	bmi.n	8002e14 <__aeabi_dsub+0xc0>
 8002e12:	e140      	b.n	8003096 <__aeabi_dsub+0x342>
 8002e14:	0264      	lsls	r4, r4, #9
 8002e16:	0a64      	lsrs	r4, r4, #9
 8002e18:	2c00      	cmp	r4, #0
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0xca>
 8002e1c:	e154      	b.n	80030c8 <__aeabi_dsub+0x374>
 8002e1e:	0020      	movs	r0, r4
 8002e20:	f000 fc9a 	bl	8003758 <__clzsi2>
 8002e24:	0003      	movs	r3, r0
 8002e26:	3b08      	subs	r3, #8
 8002e28:	2120      	movs	r1, #32
 8002e2a:	0038      	movs	r0, r7
 8002e2c:	1aca      	subs	r2, r1, r3
 8002e2e:	40d0      	lsrs	r0, r2
 8002e30:	409c      	lsls	r4, r3
 8002e32:	0002      	movs	r2, r0
 8002e34:	409f      	lsls	r7, r3
 8002e36:	4322      	orrs	r2, r4
 8002e38:	429d      	cmp	r5, r3
 8002e3a:	dd00      	ble.n	8002e3e <__aeabi_dsub+0xea>
 8002e3c:	e1a6      	b.n	800318c <__aeabi_dsub+0x438>
 8002e3e:	1b58      	subs	r0, r3, r5
 8002e40:	3001      	adds	r0, #1
 8002e42:	1a09      	subs	r1, r1, r0
 8002e44:	003c      	movs	r4, r7
 8002e46:	408f      	lsls	r7, r1
 8002e48:	40c4      	lsrs	r4, r0
 8002e4a:	1e7b      	subs	r3, r7, #1
 8002e4c:	419f      	sbcs	r7, r3
 8002e4e:	0013      	movs	r3, r2
 8002e50:	408b      	lsls	r3, r1
 8002e52:	4327      	orrs	r7, r4
 8002e54:	431f      	orrs	r7, r3
 8002e56:	40c2      	lsrs	r2, r0
 8002e58:	003b      	movs	r3, r7
 8002e5a:	0014      	movs	r4, r2
 8002e5c:	2500      	movs	r5, #0
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	d100      	bne.n	8002e64 <__aeabi_dsub+0x110>
 8002e62:	e1f7      	b.n	8003254 <__aeabi_dsub+0x500>
 8002e64:	077b      	lsls	r3, r7, #29
 8002e66:	d100      	bne.n	8002e6a <__aeabi_dsub+0x116>
 8002e68:	e377      	b.n	800355a <__aeabi_dsub+0x806>
 8002e6a:	230f      	movs	r3, #15
 8002e6c:	0038      	movs	r0, r7
 8002e6e:	403b      	ands	r3, r7
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d004      	beq.n	8002e7e <__aeabi_dsub+0x12a>
 8002e74:	1d38      	adds	r0, r7, #4
 8002e76:	42b8      	cmp	r0, r7
 8002e78:	41bf      	sbcs	r7, r7
 8002e7a:	427f      	negs	r7, r7
 8002e7c:	19e4      	adds	r4, r4, r7
 8002e7e:	0223      	lsls	r3, r4, #8
 8002e80:	d400      	bmi.n	8002e84 <__aeabi_dsub+0x130>
 8002e82:	e368      	b.n	8003556 <__aeabi_dsub+0x802>
 8002e84:	4b8c      	ldr	r3, [pc, #560]	@ (80030b8 <__aeabi_dsub+0x364>)
 8002e86:	3501      	adds	r5, #1
 8002e88:	429d      	cmp	r5, r3
 8002e8a:	d100      	bne.n	8002e8e <__aeabi_dsub+0x13a>
 8002e8c:	e0f4      	b.n	8003078 <__aeabi_dsub+0x324>
 8002e8e:	4b8b      	ldr	r3, [pc, #556]	@ (80030bc <__aeabi_dsub+0x368>)
 8002e90:	056d      	lsls	r5, r5, #21
 8002e92:	401c      	ands	r4, r3
 8002e94:	0d6d      	lsrs	r5, r5, #21
 8002e96:	0767      	lsls	r7, r4, #29
 8002e98:	08c0      	lsrs	r0, r0, #3
 8002e9a:	0264      	lsls	r4, r4, #9
 8002e9c:	4307      	orrs	r7, r0
 8002e9e:	0b24      	lsrs	r4, r4, #12
 8002ea0:	e0ec      	b.n	800307c <__aeabi_dsub+0x328>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	dc00      	bgt.n	8002ea8 <__aeabi_dsub+0x154>
 8002ea6:	e329      	b.n	80034fc <__aeabi_dsub+0x7a8>
 8002ea8:	4649      	mov	r1, r9
 8002eaa:	2900      	cmp	r1, #0
 8002eac:	d000      	beq.n	8002eb0 <__aeabi_dsub+0x15c>
 8002eae:	e0d6      	b.n	800305e <__aeabi_dsub+0x30a>
 8002eb0:	4659      	mov	r1, fp
 8002eb2:	4311      	orrs	r1, r2
 8002eb4:	d100      	bne.n	8002eb8 <__aeabi_dsub+0x164>
 8002eb6:	e12e      	b.n	8003116 <__aeabi_dsub+0x3c2>
 8002eb8:	1e59      	subs	r1, r3, #1
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d100      	bne.n	8002ec0 <__aeabi_dsub+0x16c>
 8002ebe:	e1e6      	b.n	800328e <__aeabi_dsub+0x53a>
 8002ec0:	42bb      	cmp	r3, r7
 8002ec2:	d100      	bne.n	8002ec6 <__aeabi_dsub+0x172>
 8002ec4:	e182      	b.n	80031cc <__aeabi_dsub+0x478>
 8002ec6:	2701      	movs	r7, #1
 8002ec8:	000b      	movs	r3, r1
 8002eca:	2938      	cmp	r1, #56	@ 0x38
 8002ecc:	dc14      	bgt.n	8002ef8 <__aeabi_dsub+0x1a4>
 8002ece:	2b1f      	cmp	r3, #31
 8002ed0:	dd00      	ble.n	8002ed4 <__aeabi_dsub+0x180>
 8002ed2:	e23c      	b.n	800334e <__aeabi_dsub+0x5fa>
 8002ed4:	2720      	movs	r7, #32
 8002ed6:	1af9      	subs	r1, r7, r3
 8002ed8:	468c      	mov	ip, r1
 8002eda:	4659      	mov	r1, fp
 8002edc:	4667      	mov	r7, ip
 8002ede:	40b9      	lsls	r1, r7
 8002ee0:	000f      	movs	r7, r1
 8002ee2:	0011      	movs	r1, r2
 8002ee4:	40d9      	lsrs	r1, r3
 8002ee6:	430f      	orrs	r7, r1
 8002ee8:	4661      	mov	r1, ip
 8002eea:	408a      	lsls	r2, r1
 8002eec:	1e51      	subs	r1, r2, #1
 8002eee:	418a      	sbcs	r2, r1
 8002ef0:	4659      	mov	r1, fp
 8002ef2:	40d9      	lsrs	r1, r3
 8002ef4:	4317      	orrs	r7, r2
 8002ef6:	1864      	adds	r4, r4, r1
 8002ef8:	183f      	adds	r7, r7, r0
 8002efa:	4287      	cmp	r7, r0
 8002efc:	4180      	sbcs	r0, r0
 8002efe:	4240      	negs	r0, r0
 8002f00:	1824      	adds	r4, r4, r0
 8002f02:	0223      	lsls	r3, r4, #8
 8002f04:	d400      	bmi.n	8002f08 <__aeabi_dsub+0x1b4>
 8002f06:	e0c6      	b.n	8003096 <__aeabi_dsub+0x342>
 8002f08:	4b6b      	ldr	r3, [pc, #428]	@ (80030b8 <__aeabi_dsub+0x364>)
 8002f0a:	3501      	adds	r5, #1
 8002f0c:	429d      	cmp	r5, r3
 8002f0e:	d100      	bne.n	8002f12 <__aeabi_dsub+0x1be>
 8002f10:	e0b2      	b.n	8003078 <__aeabi_dsub+0x324>
 8002f12:	2101      	movs	r1, #1
 8002f14:	4b69      	ldr	r3, [pc, #420]	@ (80030bc <__aeabi_dsub+0x368>)
 8002f16:	087a      	lsrs	r2, r7, #1
 8002f18:	401c      	ands	r4, r3
 8002f1a:	4039      	ands	r1, r7
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	07e7      	lsls	r7, r4, #31
 8002f20:	4317      	orrs	r7, r2
 8002f22:	0864      	lsrs	r4, r4, #1
 8002f24:	e79e      	b.n	8002e64 <__aeabi_dsub+0x110>
 8002f26:	4b66      	ldr	r3, [pc, #408]	@ (80030c0 <__aeabi_dsub+0x36c>)
 8002f28:	4311      	orrs	r1, r2
 8002f2a:	468a      	mov	sl, r1
 8002f2c:	18eb      	adds	r3, r5, r3
 8002f2e:	2900      	cmp	r1, #0
 8002f30:	d028      	beq.n	8002f84 <__aeabi_dsub+0x230>
 8002f32:	4566      	cmp	r6, ip
 8002f34:	d02c      	beq.n	8002f90 <__aeabi_dsub+0x23c>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d05b      	beq.n	8002ff2 <__aeabi_dsub+0x29e>
 8002f3a:	2d00      	cmp	r5, #0
 8002f3c:	d100      	bne.n	8002f40 <__aeabi_dsub+0x1ec>
 8002f3e:	e12c      	b.n	800319a <__aeabi_dsub+0x446>
 8002f40:	465b      	mov	r3, fp
 8002f42:	4666      	mov	r6, ip
 8002f44:	075f      	lsls	r7, r3, #29
 8002f46:	08d2      	lsrs	r2, r2, #3
 8002f48:	4317      	orrs	r7, r2
 8002f4a:	08dd      	lsrs	r5, r3, #3
 8002f4c:	003b      	movs	r3, r7
 8002f4e:	432b      	orrs	r3, r5
 8002f50:	d100      	bne.n	8002f54 <__aeabi_dsub+0x200>
 8002f52:	e0e2      	b.n	800311a <__aeabi_dsub+0x3c6>
 8002f54:	2480      	movs	r4, #128	@ 0x80
 8002f56:	0324      	lsls	r4, r4, #12
 8002f58:	432c      	orrs	r4, r5
 8002f5a:	0324      	lsls	r4, r4, #12
 8002f5c:	4d56      	ldr	r5, [pc, #344]	@ (80030b8 <__aeabi_dsub+0x364>)
 8002f5e:	0b24      	lsrs	r4, r4, #12
 8002f60:	e08c      	b.n	800307c <__aeabi_dsub+0x328>
 8002f62:	4659      	mov	r1, fp
 8002f64:	4311      	orrs	r1, r2
 8002f66:	d100      	bne.n	8002f6a <__aeabi_dsub+0x216>
 8002f68:	e0d5      	b.n	8003116 <__aeabi_dsub+0x3c2>
 8002f6a:	1e59      	subs	r1, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d100      	bne.n	8002f72 <__aeabi_dsub+0x21e>
 8002f70:	e1b9      	b.n	80032e6 <__aeabi_dsub+0x592>
 8002f72:	42bb      	cmp	r3, r7
 8002f74:	d100      	bne.n	8002f78 <__aeabi_dsub+0x224>
 8002f76:	e1b1      	b.n	80032dc <__aeabi_dsub+0x588>
 8002f78:	2701      	movs	r7, #1
 8002f7a:	000b      	movs	r3, r1
 8002f7c:	2938      	cmp	r1, #56	@ 0x38
 8002f7e:	dd00      	ble.n	8002f82 <__aeabi_dsub+0x22e>
 8002f80:	e740      	b.n	8002e04 <__aeabi_dsub+0xb0>
 8002f82:	e72a      	b.n	8002dda <__aeabi_dsub+0x86>
 8002f84:	4661      	mov	r1, ip
 8002f86:	2701      	movs	r7, #1
 8002f88:	4079      	eors	r1, r7
 8002f8a:	468c      	mov	ip, r1
 8002f8c:	4566      	cmp	r6, ip
 8002f8e:	d1d2      	bne.n	8002f36 <__aeabi_dsub+0x1e2>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d100      	bne.n	8002f96 <__aeabi_dsub+0x242>
 8002f94:	e0c5      	b.n	8003122 <__aeabi_dsub+0x3ce>
 8002f96:	2d00      	cmp	r5, #0
 8002f98:	d000      	beq.n	8002f9c <__aeabi_dsub+0x248>
 8002f9a:	e155      	b.n	8003248 <__aeabi_dsub+0x4f4>
 8002f9c:	464b      	mov	r3, r9
 8002f9e:	0025      	movs	r5, r4
 8002fa0:	4305      	orrs	r5, r0
 8002fa2:	d100      	bne.n	8002fa6 <__aeabi_dsub+0x252>
 8002fa4:	e212      	b.n	80033cc <__aeabi_dsub+0x678>
 8002fa6:	1e59      	subs	r1, r3, #1
 8002fa8:	468c      	mov	ip, r1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d100      	bne.n	8002fb0 <__aeabi_dsub+0x25c>
 8002fae:	e249      	b.n	8003444 <__aeabi_dsub+0x6f0>
 8002fb0:	4d41      	ldr	r5, [pc, #260]	@ (80030b8 <__aeabi_dsub+0x364>)
 8002fb2:	42ab      	cmp	r3, r5
 8002fb4:	d100      	bne.n	8002fb8 <__aeabi_dsub+0x264>
 8002fb6:	e28f      	b.n	80034d8 <__aeabi_dsub+0x784>
 8002fb8:	2701      	movs	r7, #1
 8002fba:	2938      	cmp	r1, #56	@ 0x38
 8002fbc:	dc11      	bgt.n	8002fe2 <__aeabi_dsub+0x28e>
 8002fbe:	4663      	mov	r3, ip
 8002fc0:	2b1f      	cmp	r3, #31
 8002fc2:	dd00      	ble.n	8002fc6 <__aeabi_dsub+0x272>
 8002fc4:	e25b      	b.n	800347e <__aeabi_dsub+0x72a>
 8002fc6:	4661      	mov	r1, ip
 8002fc8:	2320      	movs	r3, #32
 8002fca:	0027      	movs	r7, r4
 8002fcc:	1a5b      	subs	r3, r3, r1
 8002fce:	0005      	movs	r5, r0
 8002fd0:	4098      	lsls	r0, r3
 8002fd2:	409f      	lsls	r7, r3
 8002fd4:	40cd      	lsrs	r5, r1
 8002fd6:	1e43      	subs	r3, r0, #1
 8002fd8:	4198      	sbcs	r0, r3
 8002fda:	40cc      	lsrs	r4, r1
 8002fdc:	432f      	orrs	r7, r5
 8002fde:	4307      	orrs	r7, r0
 8002fe0:	44a3      	add	fp, r4
 8002fe2:	18bf      	adds	r7, r7, r2
 8002fe4:	4297      	cmp	r7, r2
 8002fe6:	4192      	sbcs	r2, r2
 8002fe8:	4252      	negs	r2, r2
 8002fea:	445a      	add	r2, fp
 8002fec:	0014      	movs	r4, r2
 8002fee:	464d      	mov	r5, r9
 8002ff0:	e787      	b.n	8002f02 <__aeabi_dsub+0x1ae>
 8002ff2:	4f34      	ldr	r7, [pc, #208]	@ (80030c4 <__aeabi_dsub+0x370>)
 8002ff4:	1c6b      	adds	r3, r5, #1
 8002ff6:	423b      	tst	r3, r7
 8002ff8:	d000      	beq.n	8002ffc <__aeabi_dsub+0x2a8>
 8002ffa:	e0b6      	b.n	800316a <__aeabi_dsub+0x416>
 8002ffc:	4659      	mov	r1, fp
 8002ffe:	0023      	movs	r3, r4
 8003000:	4311      	orrs	r1, r2
 8003002:	000f      	movs	r7, r1
 8003004:	4303      	orrs	r3, r0
 8003006:	2d00      	cmp	r5, #0
 8003008:	d000      	beq.n	800300c <__aeabi_dsub+0x2b8>
 800300a:	e126      	b.n	800325a <__aeabi_dsub+0x506>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d100      	bne.n	8003012 <__aeabi_dsub+0x2be>
 8003010:	e1c0      	b.n	8003394 <__aeabi_dsub+0x640>
 8003012:	2900      	cmp	r1, #0
 8003014:	d100      	bne.n	8003018 <__aeabi_dsub+0x2c4>
 8003016:	e0a1      	b.n	800315c <__aeabi_dsub+0x408>
 8003018:	1a83      	subs	r3, r0, r2
 800301a:	4698      	mov	r8, r3
 800301c:	465b      	mov	r3, fp
 800301e:	4540      	cmp	r0, r8
 8003020:	41ad      	sbcs	r5, r5
 8003022:	1ae3      	subs	r3, r4, r3
 8003024:	426d      	negs	r5, r5
 8003026:	1b5b      	subs	r3, r3, r5
 8003028:	2580      	movs	r5, #128	@ 0x80
 800302a:	042d      	lsls	r5, r5, #16
 800302c:	422b      	tst	r3, r5
 800302e:	d100      	bne.n	8003032 <__aeabi_dsub+0x2de>
 8003030:	e14b      	b.n	80032ca <__aeabi_dsub+0x576>
 8003032:	465b      	mov	r3, fp
 8003034:	1a10      	subs	r0, r2, r0
 8003036:	4282      	cmp	r2, r0
 8003038:	4192      	sbcs	r2, r2
 800303a:	1b1c      	subs	r4, r3, r4
 800303c:	0007      	movs	r7, r0
 800303e:	2601      	movs	r6, #1
 8003040:	4663      	mov	r3, ip
 8003042:	4252      	negs	r2, r2
 8003044:	1aa4      	subs	r4, r4, r2
 8003046:	4327      	orrs	r7, r4
 8003048:	401e      	ands	r6, r3
 800304a:	2f00      	cmp	r7, #0
 800304c:	d100      	bne.n	8003050 <__aeabi_dsub+0x2fc>
 800304e:	e142      	b.n	80032d6 <__aeabi_dsub+0x582>
 8003050:	422c      	tst	r4, r5
 8003052:	d100      	bne.n	8003056 <__aeabi_dsub+0x302>
 8003054:	e26d      	b.n	8003532 <__aeabi_dsub+0x7de>
 8003056:	4b19      	ldr	r3, [pc, #100]	@ (80030bc <__aeabi_dsub+0x368>)
 8003058:	2501      	movs	r5, #1
 800305a:	401c      	ands	r4, r3
 800305c:	e71b      	b.n	8002e96 <__aeabi_dsub+0x142>
 800305e:	42bd      	cmp	r5, r7
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x310>
 8003062:	e13b      	b.n	80032dc <__aeabi_dsub+0x588>
 8003064:	2701      	movs	r7, #1
 8003066:	2b38      	cmp	r3, #56	@ 0x38
 8003068:	dd00      	ble.n	800306c <__aeabi_dsub+0x318>
 800306a:	e745      	b.n	8002ef8 <__aeabi_dsub+0x1a4>
 800306c:	2780      	movs	r7, #128	@ 0x80
 800306e:	4659      	mov	r1, fp
 8003070:	043f      	lsls	r7, r7, #16
 8003072:	4339      	orrs	r1, r7
 8003074:	468b      	mov	fp, r1
 8003076:	e72a      	b.n	8002ece <__aeabi_dsub+0x17a>
 8003078:	2400      	movs	r4, #0
 800307a:	2700      	movs	r7, #0
 800307c:	052d      	lsls	r5, r5, #20
 800307e:	4325      	orrs	r5, r4
 8003080:	07f6      	lsls	r6, r6, #31
 8003082:	4335      	orrs	r5, r6
 8003084:	0038      	movs	r0, r7
 8003086:	0029      	movs	r1, r5
 8003088:	b003      	add	sp, #12
 800308a:	bcf0      	pop	{r4, r5, r6, r7}
 800308c:	46bb      	mov	fp, r7
 800308e:	46b2      	mov	sl, r6
 8003090:	46a9      	mov	r9, r5
 8003092:	46a0      	mov	r8, r4
 8003094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003096:	077b      	lsls	r3, r7, #29
 8003098:	d004      	beq.n	80030a4 <__aeabi_dsub+0x350>
 800309a:	230f      	movs	r3, #15
 800309c:	403b      	ands	r3, r7
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d000      	beq.n	80030a4 <__aeabi_dsub+0x350>
 80030a2:	e6e7      	b.n	8002e74 <__aeabi_dsub+0x120>
 80030a4:	002b      	movs	r3, r5
 80030a6:	08f8      	lsrs	r0, r7, #3
 80030a8:	4a03      	ldr	r2, [pc, #12]	@ (80030b8 <__aeabi_dsub+0x364>)
 80030aa:	0767      	lsls	r7, r4, #29
 80030ac:	4307      	orrs	r7, r0
 80030ae:	08e5      	lsrs	r5, r4, #3
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d100      	bne.n	80030b6 <__aeabi_dsub+0x362>
 80030b4:	e74a      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80030b6:	e0a5      	b.n	8003204 <__aeabi_dsub+0x4b0>
 80030b8:	000007ff 	.word	0x000007ff
 80030bc:	ff7fffff 	.word	0xff7fffff
 80030c0:	fffff801 	.word	0xfffff801
 80030c4:	000007fe 	.word	0x000007fe
 80030c8:	0038      	movs	r0, r7
 80030ca:	f000 fb45 	bl	8003758 <__clzsi2>
 80030ce:	0003      	movs	r3, r0
 80030d0:	3318      	adds	r3, #24
 80030d2:	2b1f      	cmp	r3, #31
 80030d4:	dc00      	bgt.n	80030d8 <__aeabi_dsub+0x384>
 80030d6:	e6a7      	b.n	8002e28 <__aeabi_dsub+0xd4>
 80030d8:	003a      	movs	r2, r7
 80030da:	3808      	subs	r0, #8
 80030dc:	4082      	lsls	r2, r0
 80030de:	429d      	cmp	r5, r3
 80030e0:	dd00      	ble.n	80030e4 <__aeabi_dsub+0x390>
 80030e2:	e08a      	b.n	80031fa <__aeabi_dsub+0x4a6>
 80030e4:	1b5b      	subs	r3, r3, r5
 80030e6:	1c58      	adds	r0, r3, #1
 80030e8:	281f      	cmp	r0, #31
 80030ea:	dc00      	bgt.n	80030ee <__aeabi_dsub+0x39a>
 80030ec:	e1d8      	b.n	80034a0 <__aeabi_dsub+0x74c>
 80030ee:	0017      	movs	r7, r2
 80030f0:	3b1f      	subs	r3, #31
 80030f2:	40df      	lsrs	r7, r3
 80030f4:	2820      	cmp	r0, #32
 80030f6:	d005      	beq.n	8003104 <__aeabi_dsub+0x3b0>
 80030f8:	2340      	movs	r3, #64	@ 0x40
 80030fa:	1a1b      	subs	r3, r3, r0
 80030fc:	409a      	lsls	r2, r3
 80030fe:	1e53      	subs	r3, r2, #1
 8003100:	419a      	sbcs	r2, r3
 8003102:	4317      	orrs	r7, r2
 8003104:	2500      	movs	r5, #0
 8003106:	2f00      	cmp	r7, #0
 8003108:	d100      	bne.n	800310c <__aeabi_dsub+0x3b8>
 800310a:	e0e5      	b.n	80032d8 <__aeabi_dsub+0x584>
 800310c:	077b      	lsls	r3, r7, #29
 800310e:	d000      	beq.n	8003112 <__aeabi_dsub+0x3be>
 8003110:	e6ab      	b.n	8002e6a <__aeabi_dsub+0x116>
 8003112:	002c      	movs	r4, r5
 8003114:	e7c6      	b.n	80030a4 <__aeabi_dsub+0x350>
 8003116:	08c0      	lsrs	r0, r0, #3
 8003118:	e7c6      	b.n	80030a8 <__aeabi_dsub+0x354>
 800311a:	2700      	movs	r7, #0
 800311c:	2400      	movs	r4, #0
 800311e:	4dd1      	ldr	r5, [pc, #836]	@ (8003464 <__aeabi_dsub+0x710>)
 8003120:	e7ac      	b.n	800307c <__aeabi_dsub+0x328>
 8003122:	4fd1      	ldr	r7, [pc, #836]	@ (8003468 <__aeabi_dsub+0x714>)
 8003124:	1c6b      	adds	r3, r5, #1
 8003126:	423b      	tst	r3, r7
 8003128:	d171      	bne.n	800320e <__aeabi_dsub+0x4ba>
 800312a:	0023      	movs	r3, r4
 800312c:	4303      	orrs	r3, r0
 800312e:	2d00      	cmp	r5, #0
 8003130:	d000      	beq.n	8003134 <__aeabi_dsub+0x3e0>
 8003132:	e14e      	b.n	80033d2 <__aeabi_dsub+0x67e>
 8003134:	4657      	mov	r7, sl
 8003136:	2b00      	cmp	r3, #0
 8003138:	d100      	bne.n	800313c <__aeabi_dsub+0x3e8>
 800313a:	e1b5      	b.n	80034a8 <__aeabi_dsub+0x754>
 800313c:	2f00      	cmp	r7, #0
 800313e:	d00d      	beq.n	800315c <__aeabi_dsub+0x408>
 8003140:	1883      	adds	r3, r0, r2
 8003142:	4283      	cmp	r3, r0
 8003144:	4180      	sbcs	r0, r0
 8003146:	445c      	add	r4, fp
 8003148:	4240      	negs	r0, r0
 800314a:	1824      	adds	r4, r4, r0
 800314c:	0222      	lsls	r2, r4, #8
 800314e:	d500      	bpl.n	8003152 <__aeabi_dsub+0x3fe>
 8003150:	e1c8      	b.n	80034e4 <__aeabi_dsub+0x790>
 8003152:	001f      	movs	r7, r3
 8003154:	4698      	mov	r8, r3
 8003156:	4327      	orrs	r7, r4
 8003158:	d100      	bne.n	800315c <__aeabi_dsub+0x408>
 800315a:	e0bc      	b.n	80032d6 <__aeabi_dsub+0x582>
 800315c:	4643      	mov	r3, r8
 800315e:	0767      	lsls	r7, r4, #29
 8003160:	08db      	lsrs	r3, r3, #3
 8003162:	431f      	orrs	r7, r3
 8003164:	08e5      	lsrs	r5, r4, #3
 8003166:	2300      	movs	r3, #0
 8003168:	e04c      	b.n	8003204 <__aeabi_dsub+0x4b0>
 800316a:	1a83      	subs	r3, r0, r2
 800316c:	4698      	mov	r8, r3
 800316e:	465b      	mov	r3, fp
 8003170:	4540      	cmp	r0, r8
 8003172:	41bf      	sbcs	r7, r7
 8003174:	1ae3      	subs	r3, r4, r3
 8003176:	427f      	negs	r7, r7
 8003178:	1bdb      	subs	r3, r3, r7
 800317a:	021f      	lsls	r7, r3, #8
 800317c:	d47c      	bmi.n	8003278 <__aeabi_dsub+0x524>
 800317e:	4647      	mov	r7, r8
 8003180:	431f      	orrs	r7, r3
 8003182:	d100      	bne.n	8003186 <__aeabi_dsub+0x432>
 8003184:	e0a6      	b.n	80032d4 <__aeabi_dsub+0x580>
 8003186:	001c      	movs	r4, r3
 8003188:	4647      	mov	r7, r8
 800318a:	e645      	b.n	8002e18 <__aeabi_dsub+0xc4>
 800318c:	4cb7      	ldr	r4, [pc, #732]	@ (800346c <__aeabi_dsub+0x718>)
 800318e:	1aed      	subs	r5, r5, r3
 8003190:	4014      	ands	r4, r2
 8003192:	077b      	lsls	r3, r7, #29
 8003194:	d000      	beq.n	8003198 <__aeabi_dsub+0x444>
 8003196:	e780      	b.n	800309a <__aeabi_dsub+0x346>
 8003198:	e784      	b.n	80030a4 <__aeabi_dsub+0x350>
 800319a:	464b      	mov	r3, r9
 800319c:	0025      	movs	r5, r4
 800319e:	4305      	orrs	r5, r0
 80031a0:	d066      	beq.n	8003270 <__aeabi_dsub+0x51c>
 80031a2:	1e5f      	subs	r7, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x456>
 80031a8:	e0fc      	b.n	80033a4 <__aeabi_dsub+0x650>
 80031aa:	4dae      	ldr	r5, [pc, #696]	@ (8003464 <__aeabi_dsub+0x710>)
 80031ac:	42ab      	cmp	r3, r5
 80031ae:	d100      	bne.n	80031b2 <__aeabi_dsub+0x45e>
 80031b0:	e15e      	b.n	8003470 <__aeabi_dsub+0x71c>
 80031b2:	4666      	mov	r6, ip
 80031b4:	2f38      	cmp	r7, #56	@ 0x38
 80031b6:	dc00      	bgt.n	80031ba <__aeabi_dsub+0x466>
 80031b8:	e0b4      	b.n	8003324 <__aeabi_dsub+0x5d0>
 80031ba:	2001      	movs	r0, #1
 80031bc:	1a17      	subs	r7, r2, r0
 80031be:	42ba      	cmp	r2, r7
 80031c0:	4192      	sbcs	r2, r2
 80031c2:	465b      	mov	r3, fp
 80031c4:	4252      	negs	r2, r2
 80031c6:	464d      	mov	r5, r9
 80031c8:	1a9c      	subs	r4, r3, r2
 80031ca:	e620      	b.n	8002e0e <__aeabi_dsub+0xba>
 80031cc:	0767      	lsls	r7, r4, #29
 80031ce:	08c0      	lsrs	r0, r0, #3
 80031d0:	4307      	orrs	r7, r0
 80031d2:	08e5      	lsrs	r5, r4, #3
 80031d4:	e6ba      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80031d6:	001f      	movs	r7, r3
 80031d8:	4659      	mov	r1, fp
 80031da:	3f20      	subs	r7, #32
 80031dc:	40f9      	lsrs	r1, r7
 80031de:	000f      	movs	r7, r1
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d005      	beq.n	80031f0 <__aeabi_dsub+0x49c>
 80031e4:	2140      	movs	r1, #64	@ 0x40
 80031e6:	1acb      	subs	r3, r1, r3
 80031e8:	4659      	mov	r1, fp
 80031ea:	4099      	lsls	r1, r3
 80031ec:	430a      	orrs	r2, r1
 80031ee:	4692      	mov	sl, r2
 80031f0:	4653      	mov	r3, sl
 80031f2:	1e5a      	subs	r2, r3, #1
 80031f4:	4193      	sbcs	r3, r2
 80031f6:	431f      	orrs	r7, r3
 80031f8:	e604      	b.n	8002e04 <__aeabi_dsub+0xb0>
 80031fa:	1aeb      	subs	r3, r5, r3
 80031fc:	4d9b      	ldr	r5, [pc, #620]	@ (800346c <__aeabi_dsub+0x718>)
 80031fe:	4015      	ands	r5, r2
 8003200:	076f      	lsls	r7, r5, #29
 8003202:	08ed      	lsrs	r5, r5, #3
 8003204:	032c      	lsls	r4, r5, #12
 8003206:	055d      	lsls	r5, r3, #21
 8003208:	0b24      	lsrs	r4, r4, #12
 800320a:	0d6d      	lsrs	r5, r5, #21
 800320c:	e736      	b.n	800307c <__aeabi_dsub+0x328>
 800320e:	4d95      	ldr	r5, [pc, #596]	@ (8003464 <__aeabi_dsub+0x710>)
 8003210:	42ab      	cmp	r3, r5
 8003212:	d100      	bne.n	8003216 <__aeabi_dsub+0x4c2>
 8003214:	e0d6      	b.n	80033c4 <__aeabi_dsub+0x670>
 8003216:	1882      	adds	r2, r0, r2
 8003218:	0021      	movs	r1, r4
 800321a:	4282      	cmp	r2, r0
 800321c:	4180      	sbcs	r0, r0
 800321e:	4459      	add	r1, fp
 8003220:	4240      	negs	r0, r0
 8003222:	1808      	adds	r0, r1, r0
 8003224:	07c7      	lsls	r7, r0, #31
 8003226:	0852      	lsrs	r2, r2, #1
 8003228:	4317      	orrs	r7, r2
 800322a:	0844      	lsrs	r4, r0, #1
 800322c:	0752      	lsls	r2, r2, #29
 800322e:	d400      	bmi.n	8003232 <__aeabi_dsub+0x4de>
 8003230:	e185      	b.n	800353e <__aeabi_dsub+0x7ea>
 8003232:	220f      	movs	r2, #15
 8003234:	001d      	movs	r5, r3
 8003236:	403a      	ands	r2, r7
 8003238:	2a04      	cmp	r2, #4
 800323a:	d000      	beq.n	800323e <__aeabi_dsub+0x4ea>
 800323c:	e61a      	b.n	8002e74 <__aeabi_dsub+0x120>
 800323e:	08ff      	lsrs	r7, r7, #3
 8003240:	0764      	lsls	r4, r4, #29
 8003242:	4327      	orrs	r7, r4
 8003244:	0905      	lsrs	r5, r0, #4
 8003246:	e7dd      	b.n	8003204 <__aeabi_dsub+0x4b0>
 8003248:	465b      	mov	r3, fp
 800324a:	08d2      	lsrs	r2, r2, #3
 800324c:	075f      	lsls	r7, r3, #29
 800324e:	4317      	orrs	r7, r2
 8003250:	08dd      	lsrs	r5, r3, #3
 8003252:	e67b      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 8003254:	2700      	movs	r7, #0
 8003256:	2400      	movs	r4, #0
 8003258:	e710      	b.n	800307c <__aeabi_dsub+0x328>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d000      	beq.n	8003260 <__aeabi_dsub+0x50c>
 800325e:	e0d6      	b.n	800340e <__aeabi_dsub+0x6ba>
 8003260:	2900      	cmp	r1, #0
 8003262:	d000      	beq.n	8003266 <__aeabi_dsub+0x512>
 8003264:	e12f      	b.n	80034c6 <__aeabi_dsub+0x772>
 8003266:	2480      	movs	r4, #128	@ 0x80
 8003268:	2600      	movs	r6, #0
 800326a:	4d7e      	ldr	r5, [pc, #504]	@ (8003464 <__aeabi_dsub+0x710>)
 800326c:	0324      	lsls	r4, r4, #12
 800326e:	e705      	b.n	800307c <__aeabi_dsub+0x328>
 8003270:	4666      	mov	r6, ip
 8003272:	465c      	mov	r4, fp
 8003274:	08d0      	lsrs	r0, r2, #3
 8003276:	e717      	b.n	80030a8 <__aeabi_dsub+0x354>
 8003278:	465b      	mov	r3, fp
 800327a:	1a17      	subs	r7, r2, r0
 800327c:	42ba      	cmp	r2, r7
 800327e:	4192      	sbcs	r2, r2
 8003280:	1b1c      	subs	r4, r3, r4
 8003282:	2601      	movs	r6, #1
 8003284:	4663      	mov	r3, ip
 8003286:	4252      	negs	r2, r2
 8003288:	1aa4      	subs	r4, r4, r2
 800328a:	401e      	ands	r6, r3
 800328c:	e5c4      	b.n	8002e18 <__aeabi_dsub+0xc4>
 800328e:	1883      	adds	r3, r0, r2
 8003290:	4283      	cmp	r3, r0
 8003292:	4180      	sbcs	r0, r0
 8003294:	445c      	add	r4, fp
 8003296:	4240      	negs	r0, r0
 8003298:	1825      	adds	r5, r4, r0
 800329a:	022a      	lsls	r2, r5, #8
 800329c:	d400      	bmi.n	80032a0 <__aeabi_dsub+0x54c>
 800329e:	e0da      	b.n	8003456 <__aeabi_dsub+0x702>
 80032a0:	4a72      	ldr	r2, [pc, #456]	@ (800346c <__aeabi_dsub+0x718>)
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	4015      	ands	r5, r2
 80032a6:	07ea      	lsls	r2, r5, #31
 80032a8:	431a      	orrs	r2, r3
 80032aa:	0869      	lsrs	r1, r5, #1
 80032ac:	075b      	lsls	r3, r3, #29
 80032ae:	d400      	bmi.n	80032b2 <__aeabi_dsub+0x55e>
 80032b0:	e14a      	b.n	8003548 <__aeabi_dsub+0x7f4>
 80032b2:	230f      	movs	r3, #15
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d100      	bne.n	80032bc <__aeabi_dsub+0x568>
 80032ba:	e0fc      	b.n	80034b6 <__aeabi_dsub+0x762>
 80032bc:	1d17      	adds	r7, r2, #4
 80032be:	4297      	cmp	r7, r2
 80032c0:	41a4      	sbcs	r4, r4
 80032c2:	4264      	negs	r4, r4
 80032c4:	2502      	movs	r5, #2
 80032c6:	1864      	adds	r4, r4, r1
 80032c8:	e6ec      	b.n	80030a4 <__aeabi_dsub+0x350>
 80032ca:	4647      	mov	r7, r8
 80032cc:	001c      	movs	r4, r3
 80032ce:	431f      	orrs	r7, r3
 80032d0:	d000      	beq.n	80032d4 <__aeabi_dsub+0x580>
 80032d2:	e743      	b.n	800315c <__aeabi_dsub+0x408>
 80032d4:	2600      	movs	r6, #0
 80032d6:	2500      	movs	r5, #0
 80032d8:	2400      	movs	r4, #0
 80032da:	e6cf      	b.n	800307c <__aeabi_dsub+0x328>
 80032dc:	08c0      	lsrs	r0, r0, #3
 80032de:	0767      	lsls	r7, r4, #29
 80032e0:	4307      	orrs	r7, r0
 80032e2:	08e5      	lsrs	r5, r4, #3
 80032e4:	e632      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80032e6:	1a87      	subs	r7, r0, r2
 80032e8:	465b      	mov	r3, fp
 80032ea:	42b8      	cmp	r0, r7
 80032ec:	4180      	sbcs	r0, r0
 80032ee:	1ae4      	subs	r4, r4, r3
 80032f0:	4240      	negs	r0, r0
 80032f2:	1a24      	subs	r4, r4, r0
 80032f4:	0223      	lsls	r3, r4, #8
 80032f6:	d428      	bmi.n	800334a <__aeabi_dsub+0x5f6>
 80032f8:	0763      	lsls	r3, r4, #29
 80032fa:	08ff      	lsrs	r7, r7, #3
 80032fc:	431f      	orrs	r7, r3
 80032fe:	08e5      	lsrs	r5, r4, #3
 8003300:	2301      	movs	r3, #1
 8003302:	e77f      	b.n	8003204 <__aeabi_dsub+0x4b0>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d100      	bne.n	800330a <__aeabi_dsub+0x5b6>
 8003308:	e673      	b.n	8002ff2 <__aeabi_dsub+0x29e>
 800330a:	464b      	mov	r3, r9
 800330c:	1b5f      	subs	r7, r3, r5
 800330e:	003b      	movs	r3, r7
 8003310:	2d00      	cmp	r5, #0
 8003312:	d100      	bne.n	8003316 <__aeabi_dsub+0x5c2>
 8003314:	e742      	b.n	800319c <__aeabi_dsub+0x448>
 8003316:	2f38      	cmp	r7, #56	@ 0x38
 8003318:	dd00      	ble.n	800331c <__aeabi_dsub+0x5c8>
 800331a:	e0ec      	b.n	80034f6 <__aeabi_dsub+0x7a2>
 800331c:	2380      	movs	r3, #128	@ 0x80
 800331e:	000e      	movs	r6, r1
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	431c      	orrs	r4, r3
 8003324:	2f1f      	cmp	r7, #31
 8003326:	dc25      	bgt.n	8003374 <__aeabi_dsub+0x620>
 8003328:	2520      	movs	r5, #32
 800332a:	0023      	movs	r3, r4
 800332c:	1bed      	subs	r5, r5, r7
 800332e:	0001      	movs	r1, r0
 8003330:	40a8      	lsls	r0, r5
 8003332:	40ab      	lsls	r3, r5
 8003334:	40f9      	lsrs	r1, r7
 8003336:	1e45      	subs	r5, r0, #1
 8003338:	41a8      	sbcs	r0, r5
 800333a:	430b      	orrs	r3, r1
 800333c:	40fc      	lsrs	r4, r7
 800333e:	4318      	orrs	r0, r3
 8003340:	465b      	mov	r3, fp
 8003342:	1b1b      	subs	r3, r3, r4
 8003344:	469b      	mov	fp, r3
 8003346:	e739      	b.n	80031bc <__aeabi_dsub+0x468>
 8003348:	4666      	mov	r6, ip
 800334a:	2501      	movs	r5, #1
 800334c:	e562      	b.n	8002e14 <__aeabi_dsub+0xc0>
 800334e:	001f      	movs	r7, r3
 8003350:	4659      	mov	r1, fp
 8003352:	3f20      	subs	r7, #32
 8003354:	40f9      	lsrs	r1, r7
 8003356:	468c      	mov	ip, r1
 8003358:	2b20      	cmp	r3, #32
 800335a:	d005      	beq.n	8003368 <__aeabi_dsub+0x614>
 800335c:	2740      	movs	r7, #64	@ 0x40
 800335e:	4659      	mov	r1, fp
 8003360:	1afb      	subs	r3, r7, r3
 8003362:	4099      	lsls	r1, r3
 8003364:	430a      	orrs	r2, r1
 8003366:	4692      	mov	sl, r2
 8003368:	4657      	mov	r7, sl
 800336a:	1e7b      	subs	r3, r7, #1
 800336c:	419f      	sbcs	r7, r3
 800336e:	4663      	mov	r3, ip
 8003370:	431f      	orrs	r7, r3
 8003372:	e5c1      	b.n	8002ef8 <__aeabi_dsub+0x1a4>
 8003374:	003b      	movs	r3, r7
 8003376:	0025      	movs	r5, r4
 8003378:	3b20      	subs	r3, #32
 800337a:	40dd      	lsrs	r5, r3
 800337c:	2f20      	cmp	r7, #32
 800337e:	d004      	beq.n	800338a <__aeabi_dsub+0x636>
 8003380:	2340      	movs	r3, #64	@ 0x40
 8003382:	1bdb      	subs	r3, r3, r7
 8003384:	409c      	lsls	r4, r3
 8003386:	4320      	orrs	r0, r4
 8003388:	4680      	mov	r8, r0
 800338a:	4640      	mov	r0, r8
 800338c:	1e43      	subs	r3, r0, #1
 800338e:	4198      	sbcs	r0, r3
 8003390:	4328      	orrs	r0, r5
 8003392:	e713      	b.n	80031bc <__aeabi_dsub+0x468>
 8003394:	2900      	cmp	r1, #0
 8003396:	d09d      	beq.n	80032d4 <__aeabi_dsub+0x580>
 8003398:	2601      	movs	r6, #1
 800339a:	4663      	mov	r3, ip
 800339c:	465c      	mov	r4, fp
 800339e:	4690      	mov	r8, r2
 80033a0:	401e      	ands	r6, r3
 80033a2:	e6db      	b.n	800315c <__aeabi_dsub+0x408>
 80033a4:	1a17      	subs	r7, r2, r0
 80033a6:	465b      	mov	r3, fp
 80033a8:	42ba      	cmp	r2, r7
 80033aa:	4192      	sbcs	r2, r2
 80033ac:	1b1c      	subs	r4, r3, r4
 80033ae:	4252      	negs	r2, r2
 80033b0:	1aa4      	subs	r4, r4, r2
 80033b2:	0223      	lsls	r3, r4, #8
 80033b4:	d4c8      	bmi.n	8003348 <__aeabi_dsub+0x5f4>
 80033b6:	0763      	lsls	r3, r4, #29
 80033b8:	08ff      	lsrs	r7, r7, #3
 80033ba:	431f      	orrs	r7, r3
 80033bc:	4666      	mov	r6, ip
 80033be:	2301      	movs	r3, #1
 80033c0:	08e5      	lsrs	r5, r4, #3
 80033c2:	e71f      	b.n	8003204 <__aeabi_dsub+0x4b0>
 80033c4:	001d      	movs	r5, r3
 80033c6:	2400      	movs	r4, #0
 80033c8:	2700      	movs	r7, #0
 80033ca:	e657      	b.n	800307c <__aeabi_dsub+0x328>
 80033cc:	465c      	mov	r4, fp
 80033ce:	08d0      	lsrs	r0, r2, #3
 80033d0:	e66a      	b.n	80030a8 <__aeabi_dsub+0x354>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d100      	bne.n	80033d8 <__aeabi_dsub+0x684>
 80033d6:	e737      	b.n	8003248 <__aeabi_dsub+0x4f4>
 80033d8:	4653      	mov	r3, sl
 80033da:	08c0      	lsrs	r0, r0, #3
 80033dc:	0767      	lsls	r7, r4, #29
 80033de:	4307      	orrs	r7, r0
 80033e0:	08e5      	lsrs	r5, r4, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d100      	bne.n	80033e8 <__aeabi_dsub+0x694>
 80033e6:	e5b1      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80033e8:	2380      	movs	r3, #128	@ 0x80
 80033ea:	031b      	lsls	r3, r3, #12
 80033ec:	421d      	tst	r5, r3
 80033ee:	d008      	beq.n	8003402 <__aeabi_dsub+0x6ae>
 80033f0:	4659      	mov	r1, fp
 80033f2:	08c8      	lsrs	r0, r1, #3
 80033f4:	4218      	tst	r0, r3
 80033f6:	d104      	bne.n	8003402 <__aeabi_dsub+0x6ae>
 80033f8:	08d2      	lsrs	r2, r2, #3
 80033fa:	0749      	lsls	r1, r1, #29
 80033fc:	430a      	orrs	r2, r1
 80033fe:	0017      	movs	r7, r2
 8003400:	0005      	movs	r5, r0
 8003402:	0f7b      	lsrs	r3, r7, #29
 8003404:	00ff      	lsls	r7, r7, #3
 8003406:	08ff      	lsrs	r7, r7, #3
 8003408:	075b      	lsls	r3, r3, #29
 800340a:	431f      	orrs	r7, r3
 800340c:	e59e      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 800340e:	08c0      	lsrs	r0, r0, #3
 8003410:	0763      	lsls	r3, r4, #29
 8003412:	4318      	orrs	r0, r3
 8003414:	08e5      	lsrs	r5, r4, #3
 8003416:	2900      	cmp	r1, #0
 8003418:	d053      	beq.n	80034c2 <__aeabi_dsub+0x76e>
 800341a:	2380      	movs	r3, #128	@ 0x80
 800341c:	031b      	lsls	r3, r3, #12
 800341e:	421d      	tst	r5, r3
 8003420:	d00a      	beq.n	8003438 <__aeabi_dsub+0x6e4>
 8003422:	4659      	mov	r1, fp
 8003424:	08cc      	lsrs	r4, r1, #3
 8003426:	421c      	tst	r4, r3
 8003428:	d106      	bne.n	8003438 <__aeabi_dsub+0x6e4>
 800342a:	2601      	movs	r6, #1
 800342c:	4663      	mov	r3, ip
 800342e:	0025      	movs	r5, r4
 8003430:	08d0      	lsrs	r0, r2, #3
 8003432:	0749      	lsls	r1, r1, #29
 8003434:	4308      	orrs	r0, r1
 8003436:	401e      	ands	r6, r3
 8003438:	0f47      	lsrs	r7, r0, #29
 800343a:	00c0      	lsls	r0, r0, #3
 800343c:	08c0      	lsrs	r0, r0, #3
 800343e:	077f      	lsls	r7, r7, #29
 8003440:	4307      	orrs	r7, r0
 8003442:	e583      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 8003444:	1883      	adds	r3, r0, r2
 8003446:	4293      	cmp	r3, r2
 8003448:	4192      	sbcs	r2, r2
 800344a:	445c      	add	r4, fp
 800344c:	4252      	negs	r2, r2
 800344e:	18a5      	adds	r5, r4, r2
 8003450:	022a      	lsls	r2, r5, #8
 8003452:	d500      	bpl.n	8003456 <__aeabi_dsub+0x702>
 8003454:	e724      	b.n	80032a0 <__aeabi_dsub+0x54c>
 8003456:	076f      	lsls	r7, r5, #29
 8003458:	08db      	lsrs	r3, r3, #3
 800345a:	431f      	orrs	r7, r3
 800345c:	08ed      	lsrs	r5, r5, #3
 800345e:	2301      	movs	r3, #1
 8003460:	e6d0      	b.n	8003204 <__aeabi_dsub+0x4b0>
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	000007ff 	.word	0x000007ff
 8003468:	000007fe 	.word	0x000007fe
 800346c:	ff7fffff 	.word	0xff7fffff
 8003470:	465b      	mov	r3, fp
 8003472:	08d2      	lsrs	r2, r2, #3
 8003474:	075f      	lsls	r7, r3, #29
 8003476:	4666      	mov	r6, ip
 8003478:	4317      	orrs	r7, r2
 800347a:	08dd      	lsrs	r5, r3, #3
 800347c:	e566      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 800347e:	0025      	movs	r5, r4
 8003480:	3b20      	subs	r3, #32
 8003482:	40dd      	lsrs	r5, r3
 8003484:	4663      	mov	r3, ip
 8003486:	2b20      	cmp	r3, #32
 8003488:	d005      	beq.n	8003496 <__aeabi_dsub+0x742>
 800348a:	2340      	movs	r3, #64	@ 0x40
 800348c:	4661      	mov	r1, ip
 800348e:	1a5b      	subs	r3, r3, r1
 8003490:	409c      	lsls	r4, r3
 8003492:	4320      	orrs	r0, r4
 8003494:	4680      	mov	r8, r0
 8003496:	4647      	mov	r7, r8
 8003498:	1e7b      	subs	r3, r7, #1
 800349a:	419f      	sbcs	r7, r3
 800349c:	432f      	orrs	r7, r5
 800349e:	e5a0      	b.n	8002fe2 <__aeabi_dsub+0x28e>
 80034a0:	2120      	movs	r1, #32
 80034a2:	2700      	movs	r7, #0
 80034a4:	1a09      	subs	r1, r1, r0
 80034a6:	e4d2      	b.n	8002e4e <__aeabi_dsub+0xfa>
 80034a8:	2f00      	cmp	r7, #0
 80034aa:	d100      	bne.n	80034ae <__aeabi_dsub+0x75a>
 80034ac:	e713      	b.n	80032d6 <__aeabi_dsub+0x582>
 80034ae:	465c      	mov	r4, fp
 80034b0:	0017      	movs	r7, r2
 80034b2:	2500      	movs	r5, #0
 80034b4:	e5f6      	b.n	80030a4 <__aeabi_dsub+0x350>
 80034b6:	08d7      	lsrs	r7, r2, #3
 80034b8:	0749      	lsls	r1, r1, #29
 80034ba:	2302      	movs	r3, #2
 80034bc:	430f      	orrs	r7, r1
 80034be:	092d      	lsrs	r5, r5, #4
 80034c0:	e6a0      	b.n	8003204 <__aeabi_dsub+0x4b0>
 80034c2:	0007      	movs	r7, r0
 80034c4:	e542      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80034c6:	465b      	mov	r3, fp
 80034c8:	2601      	movs	r6, #1
 80034ca:	075f      	lsls	r7, r3, #29
 80034cc:	08dd      	lsrs	r5, r3, #3
 80034ce:	4663      	mov	r3, ip
 80034d0:	08d2      	lsrs	r2, r2, #3
 80034d2:	4317      	orrs	r7, r2
 80034d4:	401e      	ands	r6, r3
 80034d6:	e539      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80034d8:	465b      	mov	r3, fp
 80034da:	08d2      	lsrs	r2, r2, #3
 80034dc:	075f      	lsls	r7, r3, #29
 80034de:	4317      	orrs	r7, r2
 80034e0:	08dd      	lsrs	r5, r3, #3
 80034e2:	e533      	b.n	8002f4c <__aeabi_dsub+0x1f8>
 80034e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003560 <__aeabi_dsub+0x80c>)
 80034e6:	08db      	lsrs	r3, r3, #3
 80034e8:	4022      	ands	r2, r4
 80034ea:	0757      	lsls	r7, r2, #29
 80034ec:	0252      	lsls	r2, r2, #9
 80034ee:	2501      	movs	r5, #1
 80034f0:	431f      	orrs	r7, r3
 80034f2:	0b14      	lsrs	r4, r2, #12
 80034f4:	e5c2      	b.n	800307c <__aeabi_dsub+0x328>
 80034f6:	000e      	movs	r6, r1
 80034f8:	2001      	movs	r0, #1
 80034fa:	e65f      	b.n	80031bc <__aeabi_dsub+0x468>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00d      	beq.n	800351c <__aeabi_dsub+0x7c8>
 8003500:	464b      	mov	r3, r9
 8003502:	1b5b      	subs	r3, r3, r5
 8003504:	469c      	mov	ip, r3
 8003506:	2d00      	cmp	r5, #0
 8003508:	d100      	bne.n	800350c <__aeabi_dsub+0x7b8>
 800350a:	e548      	b.n	8002f9e <__aeabi_dsub+0x24a>
 800350c:	2701      	movs	r7, #1
 800350e:	2b38      	cmp	r3, #56	@ 0x38
 8003510:	dd00      	ble.n	8003514 <__aeabi_dsub+0x7c0>
 8003512:	e566      	b.n	8002fe2 <__aeabi_dsub+0x28e>
 8003514:	2380      	movs	r3, #128	@ 0x80
 8003516:	041b      	lsls	r3, r3, #16
 8003518:	431c      	orrs	r4, r3
 800351a:	e550      	b.n	8002fbe <__aeabi_dsub+0x26a>
 800351c:	1c6b      	adds	r3, r5, #1
 800351e:	4d11      	ldr	r5, [pc, #68]	@ (8003564 <__aeabi_dsub+0x810>)
 8003520:	422b      	tst	r3, r5
 8003522:	d000      	beq.n	8003526 <__aeabi_dsub+0x7d2>
 8003524:	e673      	b.n	800320e <__aeabi_dsub+0x4ba>
 8003526:	4659      	mov	r1, fp
 8003528:	0023      	movs	r3, r4
 800352a:	4311      	orrs	r1, r2
 800352c:	468a      	mov	sl, r1
 800352e:	4303      	orrs	r3, r0
 8003530:	e600      	b.n	8003134 <__aeabi_dsub+0x3e0>
 8003532:	0767      	lsls	r7, r4, #29
 8003534:	08c0      	lsrs	r0, r0, #3
 8003536:	2300      	movs	r3, #0
 8003538:	4307      	orrs	r7, r0
 800353a:	08e5      	lsrs	r5, r4, #3
 800353c:	e662      	b.n	8003204 <__aeabi_dsub+0x4b0>
 800353e:	0764      	lsls	r4, r4, #29
 8003540:	08ff      	lsrs	r7, r7, #3
 8003542:	4327      	orrs	r7, r4
 8003544:	0905      	lsrs	r5, r0, #4
 8003546:	e65d      	b.n	8003204 <__aeabi_dsub+0x4b0>
 8003548:	08d2      	lsrs	r2, r2, #3
 800354a:	0749      	lsls	r1, r1, #29
 800354c:	4311      	orrs	r1, r2
 800354e:	000f      	movs	r7, r1
 8003550:	2302      	movs	r3, #2
 8003552:	092d      	lsrs	r5, r5, #4
 8003554:	e656      	b.n	8003204 <__aeabi_dsub+0x4b0>
 8003556:	0007      	movs	r7, r0
 8003558:	e5a4      	b.n	80030a4 <__aeabi_dsub+0x350>
 800355a:	0038      	movs	r0, r7
 800355c:	e48f      	b.n	8002e7e <__aeabi_dsub+0x12a>
 800355e:	46c0      	nop			@ (mov r8, r8)
 8003560:	ff7fffff 	.word	0xff7fffff
 8003564:	000007fe 	.word	0x000007fe

08003568 <__aeabi_dcmpun>:
 8003568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356a:	46c6      	mov	lr, r8
 800356c:	031e      	lsls	r6, r3, #12
 800356e:	0b36      	lsrs	r6, r6, #12
 8003570:	46b0      	mov	r8, r6
 8003572:	4e0d      	ldr	r6, [pc, #52]	@ (80035a8 <__aeabi_dcmpun+0x40>)
 8003574:	030c      	lsls	r4, r1, #12
 8003576:	004d      	lsls	r5, r1, #1
 8003578:	005f      	lsls	r7, r3, #1
 800357a:	b500      	push	{lr}
 800357c:	0b24      	lsrs	r4, r4, #12
 800357e:	0d6d      	lsrs	r5, r5, #21
 8003580:	0d7f      	lsrs	r7, r7, #21
 8003582:	42b5      	cmp	r5, r6
 8003584:	d00b      	beq.n	800359e <__aeabi_dcmpun+0x36>
 8003586:	4908      	ldr	r1, [pc, #32]	@ (80035a8 <__aeabi_dcmpun+0x40>)
 8003588:	2000      	movs	r0, #0
 800358a:	428f      	cmp	r7, r1
 800358c:	d104      	bne.n	8003598 <__aeabi_dcmpun+0x30>
 800358e:	4646      	mov	r6, r8
 8003590:	4316      	orrs	r6, r2
 8003592:	0030      	movs	r0, r6
 8003594:	1e43      	subs	r3, r0, #1
 8003596:	4198      	sbcs	r0, r3
 8003598:	bc80      	pop	{r7}
 800359a:	46b8      	mov	r8, r7
 800359c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800359e:	4304      	orrs	r4, r0
 80035a0:	2001      	movs	r0, #1
 80035a2:	2c00      	cmp	r4, #0
 80035a4:	d1f8      	bne.n	8003598 <__aeabi_dcmpun+0x30>
 80035a6:	e7ee      	b.n	8003586 <__aeabi_dcmpun+0x1e>
 80035a8:	000007ff 	.word	0x000007ff

080035ac <__aeabi_d2iz>:
 80035ac:	000b      	movs	r3, r1
 80035ae:	0002      	movs	r2, r0
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	4d16      	ldr	r5, [pc, #88]	@ (800360c <__aeabi_d2iz+0x60>)
 80035b4:	030c      	lsls	r4, r1, #12
 80035b6:	b082      	sub	sp, #8
 80035b8:	0049      	lsls	r1, r1, #1
 80035ba:	2000      	movs	r0, #0
 80035bc:	9200      	str	r2, [sp, #0]
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	0b24      	lsrs	r4, r4, #12
 80035c2:	0d49      	lsrs	r1, r1, #21
 80035c4:	0fde      	lsrs	r6, r3, #31
 80035c6:	42a9      	cmp	r1, r5
 80035c8:	dd04      	ble.n	80035d4 <__aeabi_d2iz+0x28>
 80035ca:	4811      	ldr	r0, [pc, #68]	@ (8003610 <__aeabi_d2iz+0x64>)
 80035cc:	4281      	cmp	r1, r0
 80035ce:	dd03      	ble.n	80035d8 <__aeabi_d2iz+0x2c>
 80035d0:	4b10      	ldr	r3, [pc, #64]	@ (8003614 <__aeabi_d2iz+0x68>)
 80035d2:	18f0      	adds	r0, r6, r3
 80035d4:	b002      	add	sp, #8
 80035d6:	bd70      	pop	{r4, r5, r6, pc}
 80035d8:	2080      	movs	r0, #128	@ 0x80
 80035da:	0340      	lsls	r0, r0, #13
 80035dc:	4320      	orrs	r0, r4
 80035de:	4c0e      	ldr	r4, [pc, #56]	@ (8003618 <__aeabi_d2iz+0x6c>)
 80035e0:	1a64      	subs	r4, r4, r1
 80035e2:	2c1f      	cmp	r4, #31
 80035e4:	dd08      	ble.n	80035f8 <__aeabi_d2iz+0x4c>
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <__aeabi_d2iz+0x70>)
 80035e8:	1a5b      	subs	r3, r3, r1
 80035ea:	40d8      	lsrs	r0, r3
 80035ec:	0003      	movs	r3, r0
 80035ee:	4258      	negs	r0, r3
 80035f0:	2e00      	cmp	r6, #0
 80035f2:	d1ef      	bne.n	80035d4 <__aeabi_d2iz+0x28>
 80035f4:	0018      	movs	r0, r3
 80035f6:	e7ed      	b.n	80035d4 <__aeabi_d2iz+0x28>
 80035f8:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <__aeabi_d2iz+0x74>)
 80035fa:	9a00      	ldr	r2, [sp, #0]
 80035fc:	469c      	mov	ip, r3
 80035fe:	0003      	movs	r3, r0
 8003600:	4461      	add	r1, ip
 8003602:	408b      	lsls	r3, r1
 8003604:	40e2      	lsrs	r2, r4
 8003606:	4313      	orrs	r3, r2
 8003608:	e7f1      	b.n	80035ee <__aeabi_d2iz+0x42>
 800360a:	46c0      	nop			@ (mov r8, r8)
 800360c:	000003fe 	.word	0x000003fe
 8003610:	0000041d 	.word	0x0000041d
 8003614:	7fffffff 	.word	0x7fffffff
 8003618:	00000433 	.word	0x00000433
 800361c:	00000413 	.word	0x00000413
 8003620:	fffffbed 	.word	0xfffffbed

08003624 <__aeabi_i2d>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	2800      	cmp	r0, #0
 8003628:	d016      	beq.n	8003658 <__aeabi_i2d+0x34>
 800362a:	17c3      	asrs	r3, r0, #31
 800362c:	18c5      	adds	r5, r0, r3
 800362e:	405d      	eors	r5, r3
 8003630:	0fc4      	lsrs	r4, r0, #31
 8003632:	0028      	movs	r0, r5
 8003634:	f000 f890 	bl	8003758 <__clzsi2>
 8003638:	4b10      	ldr	r3, [pc, #64]	@ (800367c <__aeabi_i2d+0x58>)
 800363a:	1a1b      	subs	r3, r3, r0
 800363c:	055b      	lsls	r3, r3, #21
 800363e:	0d5b      	lsrs	r3, r3, #21
 8003640:	280a      	cmp	r0, #10
 8003642:	dc14      	bgt.n	800366e <__aeabi_i2d+0x4a>
 8003644:	0002      	movs	r2, r0
 8003646:	002e      	movs	r6, r5
 8003648:	3215      	adds	r2, #21
 800364a:	4096      	lsls	r6, r2
 800364c:	220b      	movs	r2, #11
 800364e:	1a12      	subs	r2, r2, r0
 8003650:	40d5      	lsrs	r5, r2
 8003652:	032d      	lsls	r5, r5, #12
 8003654:	0b2d      	lsrs	r5, r5, #12
 8003656:	e003      	b.n	8003660 <__aeabi_i2d+0x3c>
 8003658:	2400      	movs	r4, #0
 800365a:	2300      	movs	r3, #0
 800365c:	2500      	movs	r5, #0
 800365e:	2600      	movs	r6, #0
 8003660:	051b      	lsls	r3, r3, #20
 8003662:	432b      	orrs	r3, r5
 8003664:	07e4      	lsls	r4, r4, #31
 8003666:	4323      	orrs	r3, r4
 8003668:	0030      	movs	r0, r6
 800366a:	0019      	movs	r1, r3
 800366c:	bd70      	pop	{r4, r5, r6, pc}
 800366e:	380b      	subs	r0, #11
 8003670:	4085      	lsls	r5, r0
 8003672:	032d      	lsls	r5, r5, #12
 8003674:	2600      	movs	r6, #0
 8003676:	0b2d      	lsrs	r5, r5, #12
 8003678:	e7f2      	b.n	8003660 <__aeabi_i2d+0x3c>
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	0000041e 	.word	0x0000041e

08003680 <__aeabi_ui2d>:
 8003680:	b510      	push	{r4, lr}
 8003682:	1e04      	subs	r4, r0, #0
 8003684:	d010      	beq.n	80036a8 <__aeabi_ui2d+0x28>
 8003686:	f000 f867 	bl	8003758 <__clzsi2>
 800368a:	4b0e      	ldr	r3, [pc, #56]	@ (80036c4 <__aeabi_ui2d+0x44>)
 800368c:	1a1b      	subs	r3, r3, r0
 800368e:	055b      	lsls	r3, r3, #21
 8003690:	0d5b      	lsrs	r3, r3, #21
 8003692:	280a      	cmp	r0, #10
 8003694:	dc0f      	bgt.n	80036b6 <__aeabi_ui2d+0x36>
 8003696:	220b      	movs	r2, #11
 8003698:	0021      	movs	r1, r4
 800369a:	1a12      	subs	r2, r2, r0
 800369c:	40d1      	lsrs	r1, r2
 800369e:	3015      	adds	r0, #21
 80036a0:	030a      	lsls	r2, r1, #12
 80036a2:	4084      	lsls	r4, r0
 80036a4:	0b12      	lsrs	r2, r2, #12
 80036a6:	e001      	b.n	80036ac <__aeabi_ui2d+0x2c>
 80036a8:	2300      	movs	r3, #0
 80036aa:	2200      	movs	r2, #0
 80036ac:	051b      	lsls	r3, r3, #20
 80036ae:	4313      	orrs	r3, r2
 80036b0:	0020      	movs	r0, r4
 80036b2:	0019      	movs	r1, r3
 80036b4:	bd10      	pop	{r4, pc}
 80036b6:	0022      	movs	r2, r4
 80036b8:	380b      	subs	r0, #11
 80036ba:	4082      	lsls	r2, r0
 80036bc:	0312      	lsls	r2, r2, #12
 80036be:	2400      	movs	r4, #0
 80036c0:	0b12      	lsrs	r2, r2, #12
 80036c2:	e7f3      	b.n	80036ac <__aeabi_ui2d+0x2c>
 80036c4:	0000041e 	.word	0x0000041e

080036c8 <__aeabi_f2d>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	0242      	lsls	r2, r0, #9
 80036cc:	0043      	lsls	r3, r0, #1
 80036ce:	0fc4      	lsrs	r4, r0, #31
 80036d0:	20fe      	movs	r0, #254	@ 0xfe
 80036d2:	0e1b      	lsrs	r3, r3, #24
 80036d4:	1c59      	adds	r1, r3, #1
 80036d6:	0a55      	lsrs	r5, r2, #9
 80036d8:	4208      	tst	r0, r1
 80036da:	d00c      	beq.n	80036f6 <__aeabi_f2d+0x2e>
 80036dc:	21e0      	movs	r1, #224	@ 0xe0
 80036de:	0089      	lsls	r1, r1, #2
 80036e0:	468c      	mov	ip, r1
 80036e2:	076d      	lsls	r5, r5, #29
 80036e4:	0b12      	lsrs	r2, r2, #12
 80036e6:	4463      	add	r3, ip
 80036e8:	051b      	lsls	r3, r3, #20
 80036ea:	4313      	orrs	r3, r2
 80036ec:	07e4      	lsls	r4, r4, #31
 80036ee:	4323      	orrs	r3, r4
 80036f0:	0028      	movs	r0, r5
 80036f2:	0019      	movs	r1, r3
 80036f4:	bd70      	pop	{r4, r5, r6, pc}
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d114      	bne.n	8003724 <__aeabi_f2d+0x5c>
 80036fa:	2d00      	cmp	r5, #0
 80036fc:	d01b      	beq.n	8003736 <__aeabi_f2d+0x6e>
 80036fe:	0028      	movs	r0, r5
 8003700:	f000 f82a 	bl	8003758 <__clzsi2>
 8003704:	280a      	cmp	r0, #10
 8003706:	dc1c      	bgt.n	8003742 <__aeabi_f2d+0x7a>
 8003708:	230b      	movs	r3, #11
 800370a:	002a      	movs	r2, r5
 800370c:	1a1b      	subs	r3, r3, r0
 800370e:	40da      	lsrs	r2, r3
 8003710:	0003      	movs	r3, r0
 8003712:	3315      	adds	r3, #21
 8003714:	409d      	lsls	r5, r3
 8003716:	4b0e      	ldr	r3, [pc, #56]	@ (8003750 <__aeabi_f2d+0x88>)
 8003718:	0312      	lsls	r2, r2, #12
 800371a:	1a1b      	subs	r3, r3, r0
 800371c:	055b      	lsls	r3, r3, #21
 800371e:	0b12      	lsrs	r2, r2, #12
 8003720:	0d5b      	lsrs	r3, r3, #21
 8003722:	e7e1      	b.n	80036e8 <__aeabi_f2d+0x20>
 8003724:	2d00      	cmp	r5, #0
 8003726:	d009      	beq.n	800373c <__aeabi_f2d+0x74>
 8003728:	0b13      	lsrs	r3, r2, #12
 800372a:	2280      	movs	r2, #128	@ 0x80
 800372c:	0312      	lsls	r2, r2, #12
 800372e:	431a      	orrs	r2, r3
 8003730:	076d      	lsls	r5, r5, #29
 8003732:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <__aeabi_f2d+0x8c>)
 8003734:	e7d8      	b.n	80036e8 <__aeabi_f2d+0x20>
 8003736:	2300      	movs	r3, #0
 8003738:	2200      	movs	r2, #0
 800373a:	e7d5      	b.n	80036e8 <__aeabi_f2d+0x20>
 800373c:	2200      	movs	r2, #0
 800373e:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <__aeabi_f2d+0x8c>)
 8003740:	e7d2      	b.n	80036e8 <__aeabi_f2d+0x20>
 8003742:	0003      	movs	r3, r0
 8003744:	002a      	movs	r2, r5
 8003746:	3b0b      	subs	r3, #11
 8003748:	409a      	lsls	r2, r3
 800374a:	2500      	movs	r5, #0
 800374c:	e7e3      	b.n	8003716 <__aeabi_f2d+0x4e>
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	00000389 	.word	0x00000389
 8003754:	000007ff 	.word	0x000007ff

08003758 <__clzsi2>:
 8003758:	211c      	movs	r1, #28
 800375a:	2301      	movs	r3, #1
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	4298      	cmp	r0, r3
 8003760:	d301      	bcc.n	8003766 <__clzsi2+0xe>
 8003762:	0c00      	lsrs	r0, r0, #16
 8003764:	3910      	subs	r1, #16
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	4298      	cmp	r0, r3
 800376a:	d301      	bcc.n	8003770 <__clzsi2+0x18>
 800376c:	0a00      	lsrs	r0, r0, #8
 800376e:	3908      	subs	r1, #8
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	4298      	cmp	r0, r3
 8003774:	d301      	bcc.n	800377a <__clzsi2+0x22>
 8003776:	0900      	lsrs	r0, r0, #4
 8003778:	3904      	subs	r1, #4
 800377a:	a202      	add	r2, pc, #8	@ (adr r2, 8003784 <__clzsi2+0x2c>)
 800377c:	5c10      	ldrb	r0, [r2, r0]
 800377e:	1840      	adds	r0, r0, r1
 8003780:	4770      	bx	lr
 8003782:	46c0      	nop			@ (mov r8, r8)
 8003784:	02020304 	.word	0x02020304
 8003788:	01010101 	.word	0x01010101
	...

08003794 <__clzdi2>:
 8003794:	b510      	push	{r4, lr}
 8003796:	2900      	cmp	r1, #0
 8003798:	d103      	bne.n	80037a2 <__clzdi2+0xe>
 800379a:	f7ff ffdd 	bl	8003758 <__clzsi2>
 800379e:	3020      	adds	r0, #32
 80037a0:	e002      	b.n	80037a8 <__clzdi2+0x14>
 80037a2:	0008      	movs	r0, r1
 80037a4:	f7ff ffd8 	bl	8003758 <__clzsi2>
 80037a8:	bd10      	pop	{r4, pc}
 80037aa:	46c0      	nop			@ (mov r8, r8)

080037ac <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 80037ac:	b5b0      	push	{r4, r5, r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 f93a 	bl	8003a30 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	250f      	movs	r5, #15
 80037c0:	197c      	adds	r4, r7, r5
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	20d0      	movs	r0, #208	@ 0xd0
 80037c8:	f000 f8d8 	bl	800397c <bme68x_get_regs>
 80037cc:	0003      	movs	r3, r0
 80037ce:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 80037d0:	197b      	adds	r3, r7, r5
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	b25b      	sxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11b      	bne.n	8003812 <bme68x_init+0x66>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b61      	cmp	r3, #97	@ 0x61
 80037e0:	d113      	bne.n	800380a <bme68x_init+0x5e>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 80037e2:	197c      	adds	r4, r7, r5
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	0018      	movs	r0, r3
 80037e8:	f002 fae8 	bl	8005dbc <read_variant_id>
 80037ec:	0003      	movs	r3, r0
 80037ee:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 80037f0:	197b      	adds	r3, r7, r5
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	b25b      	sxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10b      	bne.n	8003812 <bme68x_init+0x66>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 80037fa:	197c      	adds	r4, r7, r5
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	0018      	movs	r0, r3
 8003800:	f002 f9a5 	bl	8005b4e <get_calib_data>
 8003804:	0003      	movs	r3, r0
 8003806:	7023      	strb	r3, [r4, #0]
 8003808:	e003      	b.n	8003812 <bme68x_init+0x66>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 800380a:	230f      	movs	r3, #15
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	22fd      	movs	r2, #253	@ 0xfd
 8003810:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8003812:	230f      	movs	r3, #15
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	b25b      	sxtb	r3, r3
}
 800381a:	0018      	movs	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	b004      	add	sp, #16
 8003820:	bdb0      	pop	{r4, r5, r7, pc}

08003822 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8003822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003824:	b08b      	sub	sp, #44	@ 0x2c
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8003830:	2310      	movs	r3, #16
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	0018      	movs	r0, r3
 8003836:	2314      	movs	r3, #20
 8003838:	001a      	movs	r2, r3
 800383a:	2100      	movs	r1, #0
 800383c:	f006 fddc 	bl	800a3f8 <memset>
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003840:	2527      	movs	r5, #39	@ 0x27
 8003842:	197c      	adds	r4, r7, r5
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	0018      	movs	r0, r3
 8003848:	f001 feff 	bl	800564a <null_ptr_check>
 800384c:	0003      	movs	r3, r0
 800384e:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8003850:	197b      	adds	r3, r7, r5
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	b25b      	sxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d000      	beq.n	800385c <bme68x_set_regs+0x3a>
 800385a:	e083      	b.n	8003964 <bme68x_set_regs+0x142>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d100      	bne.n	8003864 <bme68x_set_regs+0x42>
 8003862:	e07f      	b.n	8003964 <bme68x_set_regs+0x142>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d100      	bne.n	800386c <bme68x_set_regs+0x4a>
 800386a:	e07b      	b.n	8003964 <bme68x_set_regs+0x142>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d100      	bne.n	8003874 <bme68x_set_regs+0x52>
 8003872:	e070      	b.n	8003956 <bme68x_set_regs+0x134>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b0a      	cmp	r3, #10
 8003878:	d900      	bls.n	800387c <bme68x_set_regs+0x5a>
 800387a:	e06c      	b.n	8003956 <bme68x_set_regs+0x134>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 800387c:	2324      	movs	r3, #36	@ 0x24
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	2200      	movs	r2, #0
 8003882:	801a      	strh	r2, [r3, #0]
 8003884:	e03f      	b.n	8003906 <bme68x_set_regs+0xe4>
            {
                if (dev->intf == BME68X_SPI_INTF)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	7b1b      	ldrb	r3, [r3, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d11d      	bne.n	80038ca <bme68x_set_regs+0xa8>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 800388e:	2524      	movs	r5, #36	@ 0x24
 8003890:	197b      	adds	r3, r7, r5
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	18d3      	adds	r3, r2, r3
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2227      	movs	r2, #39	@ 0x27
 800389c:	18bc      	adds	r4, r7, r2
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	0011      	movs	r1, r2
 80038a2:	0018      	movs	r0, r3
 80038a4:	f001 fde3 	bl	800546e <set_mem_page>
 80038a8:	0003      	movs	r3, r0
 80038aa:	7023      	strb	r3, [r4, #0]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80038ac:	197b      	adds	r3, r7, r5
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	18d3      	adds	r3, r2, r3
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	197b      	adds	r3, r7, r5
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	217f      	movs	r1, #127	@ 0x7f
 80038be:	400a      	ands	r2, r1
 80038c0:	b2d1      	uxtb	r1, r2
 80038c2:	2210      	movs	r2, #16
 80038c4:	18ba      	adds	r2, r7, r2
 80038c6:	54d1      	strb	r1, [r2, r3]
 80038c8:	e00b      	b.n	80038e2 <bme68x_set_regs+0xc0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 80038ca:	2124      	movs	r1, #36	@ 0x24
 80038cc:	187b      	adds	r3, r7, r1
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	18d2      	adds	r2, r2, r3
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	7811      	ldrb	r1, [r2, #0]
 80038dc:	2210      	movs	r2, #16
 80038de:	18ba      	adds	r2, r7, r2
 80038e0:	54d1      	strb	r1, [r2, r3]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 80038e2:	2024      	movs	r0, #36	@ 0x24
 80038e4:	183b      	adds	r3, r7, r0
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	18d2      	adds	r2, r2, r3
 80038ec:	183b      	adds	r3, r7, r0
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	3301      	adds	r3, #1
 80038f4:	7811      	ldrb	r1, [r2, #0]
 80038f6:	2210      	movs	r2, #16
 80038f8:	18ba      	adds	r2, r7, r2
 80038fa:	54d1      	strb	r1, [r2, r3]
            for (index = 0; index < len; index++)
 80038fc:	183b      	adds	r3, r7, r0
 80038fe:	881a      	ldrh	r2, [r3, #0]
 8003900:	183b      	adds	r3, r7, r0
 8003902:	3201      	adds	r2, #1
 8003904:	801a      	strh	r2, [r3, #0]
 8003906:	2324      	movs	r3, #36	@ 0x24
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	429a      	cmp	r2, r3
 8003910:	d8b9      	bhi.n	8003886 <bme68x_set_regs+0x64>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8003912:	2627      	movs	r6, #39	@ 0x27
 8003914:	19bb      	adds	r3, r7, r6
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	b25b      	sxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d120      	bne.n	8003960 <bme68x_set_regs+0x13e>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003922:	2110      	movs	r1, #16
 8003924:	187b      	adds	r3, r7, r1
 8003926:	7818      	ldrb	r0, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	1e5a      	subs	r2, r3, #1
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685d      	ldr	r5, [r3, #4]
 8003932:	187b      	adds	r3, r7, r1
 8003934:	1c59      	adds	r1, r3, #1
 8003936:	002b      	movs	r3, r5
 8003938:	47a0      	blx	r4
 800393a:	0003      	movs	r3, r0
 800393c:	0019      	movs	r1, r3
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	224c      	movs	r2, #76	@ 0x4c
 8003942:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	224c      	movs	r2, #76	@ 0x4c
 8003948:	569b      	ldrsb	r3, [r3, r2]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <bme68x_set_regs+0x13e>
                {
                    rslt = BME68X_E_COM_FAIL;
 800394e:	19bb      	adds	r3, r7, r6
 8003950:	22fe      	movs	r2, #254	@ 0xfe
 8003952:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8003954:	e004      	b.n	8003960 <bme68x_set_regs+0x13e>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8003956:	2327      	movs	r3, #39	@ 0x27
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	22fc      	movs	r2, #252	@ 0xfc
 800395c:	701a      	strb	r2, [r3, #0]
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 800395e:	e005      	b.n	800396c <bme68x_set_regs+0x14a>
            if (rslt == BME68X_OK)
 8003960:	46c0      	nop			@ (mov r8, r8)
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8003962:	e003      	b.n	800396c <bme68x_set_regs+0x14a>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003964:	2327      	movs	r3, #39	@ 0x27
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	22ff      	movs	r2, #255	@ 0xff
 800396a:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800396c:	2327      	movs	r3, #39	@ 0x27
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	b25b      	sxtb	r3, r3
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	b00b      	add	sp, #44	@ 0x2c
 800397a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800397c <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60b9      	str	r1, [r7, #8]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	250f      	movs	r5, #15
 800398a:	197b      	adds	r3, r7, r5
 800398c:	1c02      	adds	r2, r0, #0
 800398e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003990:	2617      	movs	r6, #23
 8003992:	19bc      	adds	r4, r7, r6
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	0018      	movs	r0, r3
 8003998:	f001 fe57 	bl	800564a <null_ptr_check>
 800399c:	0003      	movs	r3, r0
 800399e:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_data)
 80039a0:	19bb      	adds	r3, r7, r6
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	b25b      	sxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d136      	bne.n	8003a18 <bme68x_get_regs+0x9c>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d033      	beq.n	8003a18 <bme68x_get_regs+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	7b1b      	ldrb	r3, [r3, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d115      	bne.n	80039e4 <bme68x_get_regs+0x68>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 80039b8:	19bc      	adds	r4, r7, r6
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	197b      	adds	r3, r7, r5
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	0011      	movs	r1, r2
 80039c2:	0018      	movs	r0, r3
 80039c4:	f001 fd53 	bl	800546e <set_mem_page>
 80039c8:	0003      	movs	r3, r0
 80039ca:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 80039cc:	19bb      	adds	r3, r7, r6
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	b25b      	sxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <bme68x_get_regs+0x68>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 80039d6:	197b      	adds	r3, r7, r5
 80039d8:	197a      	adds	r2, r7, r5
 80039da:	7812      	ldrb	r2, [r2, #0]
 80039dc:	2180      	movs	r1, #128	@ 0x80
 80039de:	4249      	negs	r1, r1
 80039e0:	430a      	orrs	r2, r1
 80039e2:	701a      	strb	r2, [r3, #0]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685d      	ldr	r5, [r3, #4]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	68b9      	ldr	r1, [r7, #8]
 80039f0:	230f      	movs	r3, #15
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	7818      	ldrb	r0, [r3, #0]
 80039f6:	002b      	movs	r3, r5
 80039f8:	47a0      	blx	r4
 80039fa:	0003      	movs	r3, r0
 80039fc:	0019      	movs	r1, r3
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	224c      	movs	r2, #76	@ 0x4c
 8003a02:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	224c      	movs	r2, #76	@ 0x4c
 8003a08:	569b      	ldrsb	r3, [r3, r2]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <bme68x_get_regs+0xa4>
        {
            rslt = BME68X_E_COM_FAIL;
 8003a0e:	2317      	movs	r3, #23
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	22fe      	movs	r2, #254	@ 0xfe
 8003a14:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != 0)
 8003a16:	e003      	b.n	8003a20 <bme68x_get_regs+0xa4>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003a18:	2317      	movs	r3, #23
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	22ff      	movs	r2, #255	@ 0xff
 8003a1e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003a20:	2317      	movs	r3, #23
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	b25b      	sxtb	r3, r3
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b007      	add	sp, #28
 8003a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a30 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8003a30:	b5b0      	push	{r4, r5, r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8003a38:	230e      	movs	r3, #14
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	22e0      	movs	r2, #224	@ 0xe0
 8003a3e:	701a      	strb	r2, [r3, #0]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8003a40:	230d      	movs	r3, #13
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	22b6      	movs	r2, #182	@ 0xb6
 8003a46:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003a48:	250f      	movs	r5, #15
 8003a4a:	197c      	adds	r4, r7, r5
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f001 fdfb 	bl	800564a <null_ptr_check>
 8003a54:	0003      	movs	r3, r0
 8003a56:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8003a58:	002a      	movs	r2, r5
 8003a5a:	18bb      	adds	r3, r7, r2
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	b25b      	sxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d133      	bne.n	8003acc <bme68x_soft_reset+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	7b1b      	ldrb	r3, [r3, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d106      	bne.n	8003a7a <bme68x_soft_reset+0x4a>
        {
            rslt = get_mem_page(dev);
 8003a6c:	18bc      	adds	r4, r7, r2
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	0018      	movs	r0, r3
 8003a72:	f001 fd79 	bl	8005568 <get_mem_page>
 8003a76:	0003      	movs	r3, r0
 8003a78:	7023      	strb	r3, [r4, #0]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8003a7a:	250f      	movs	r5, #15
 8003a7c:	197b      	adds	r3, r7, r5
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	b25b      	sxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d122      	bne.n	8003acc <bme68x_soft_reset+0x9c>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003a86:	197c      	adds	r4, r7, r5
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	220d      	movs	r2, #13
 8003a8c:	18b9      	adds	r1, r7, r2
 8003a8e:	220e      	movs	r2, #14
 8003a90:	18b8      	adds	r0, r7, r2
 8003a92:	2201      	movs	r2, #1
 8003a94:	f7ff fec5 	bl	8003822 <bme68x_set_regs>
 8003a98:	0003      	movs	r3, r0
 8003a9a:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8003a9c:	002c      	movs	r4, r5
 8003a9e:	193b      	adds	r3, r7, r4
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d111      	bne.n	8003acc <bme68x_soft_reset+0x9c>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	480a      	ldr	r0, [pc, #40]	@ (8003adc <bme68x_soft_reset+0xac>)
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	4790      	blx	r2

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7b1b      	ldrb	r3, [r3, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <bme68x_soft_reset+0x9c>
                {
                    rslt = get_mem_page(dev);
 8003abe:	193c      	adds	r4, r7, r4
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f001 fd50 	bl	8005568 <get_mem_page>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	7023      	strb	r3, [r4, #0]
                }
            }
        }
    }

    return rslt;
 8003acc:	230f      	movs	r3, #15
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	b25b      	sxtb	r3, r3
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b004      	add	sp, #16
 8003ada:	bdb0      	pop	{r4, r5, r7, pc}
 8003adc:	00002710 	.word	0x00002710

08003ae0 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8003ae0:	b5b0      	push	{r4, r5, r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8003aea:	231e      	movs	r3, #30
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	231d      	movs	r3, #29
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	2201      	movs	r2, #1
 8003af8:	701a      	strb	r2, [r3, #0]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8003afa:	2314      	movs	r3, #20
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	4a9f      	ldr	r2, [pc, #636]	@ (8003d7c <bme68x_set_conf+0x29c>)
 8003b00:	6811      	ldr	r1, [r2, #0]
 8003b02:	6019      	str	r1, [r3, #0]
 8003b04:	7912      	ldrb	r2, [r2, #4]
 8003b06:	711a      	strb	r2, [r3, #4]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8003b08:	230c      	movs	r3, #12
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	2305      	movs	r3, #5
 8003b10:	001a      	movs	r2, r3
 8003b12:	2100      	movs	r1, #0
 8003b14:	f006 fc70 	bl	800a3f8 <memset>

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8003b18:	251f      	movs	r5, #31
 8003b1a:	197c      	adds	r4, r7, r5
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	231c      	movs	r3, #28
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	0011      	movs	r1, r2
 8003b24:	0018      	movs	r0, r3
 8003b26:	f000 f9ab 	bl	8003e80 <bme68x_get_op_mode>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8003b2e:	197b      	adds	r3, r7, r5
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	b25b      	sxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d107      	bne.n	8003b48 <bme68x_set_conf+0x68>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8003b38:	197c      	adds	r4, r7, r5
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	2000      	movs	r0, #0
 8003b40:	f000 f91e 	bl	8003d80 <bme68x_set_op_mode>
 8003b44:	0003      	movs	r3, r0
 8003b46:	7023      	strb	r3, [r4, #0]
    }

    if (conf == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <bme68x_set_conf+0x78>
    {
        rslt = BME68X_E_NULL_PTR;
 8003b4e:	231f      	movs	r3, #31
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	22ff      	movs	r2, #255	@ 0xff
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	e0e2      	b.n	8003d1e <bme68x_set_conf+0x23e>
    }
    else if (rslt == BME68X_OK)
 8003b58:	251f      	movs	r5, #31
 8003b5a:	197b      	adds	r3, r7, r5
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	b25b      	sxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d000      	beq.n	8003b66 <bme68x_set_conf+0x86>
 8003b64:	e0db      	b.n	8003d1e <bme68x_set_conf+0x23e>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8003b66:	2314      	movs	r3, #20
 8003b68:	18fb      	adds	r3, r7, r3
 8003b6a:	7818      	ldrb	r0, [r3, #0]
 8003b6c:	197c      	adds	r4, r7, r5
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	220c      	movs	r2, #12
 8003b72:	18b9      	adds	r1, r7, r2
 8003b74:	2205      	movs	r2, #5
 8003b76:	f7ff ff01 	bl	800397c <bme68x_get_regs>
 8003b7a:	0003      	movs	r3, r0
 8003b7c:	7023      	strb	r3, [r4, #0]
        dev->info_msg = BME68X_OK;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	224d      	movs	r2, #77	@ 0x4d
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]
        if (rslt == BME68X_OK)
 8003b86:	197b      	adds	r3, r7, r5
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	b25b      	sxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <bme68x_set_conf+0xc4>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3303      	adds	r3, #3
 8003b94:	197c      	adds	r4, r7, r5
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	2107      	movs	r1, #7
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f001 fd1c 	bl	80055d8 <boundary_check>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003ba4:	221f      	movs	r2, #31
 8003ba6:	18bb      	adds	r3, r7, r2
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	b25b      	sxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	18bc      	adds	r4, r7, r2
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	2105      	movs	r1, #5
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f001 fd0c 	bl	80055d8 <boundary_check>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003bc4:	221f      	movs	r2, #31
 8003bc6:	18bb      	adds	r3, r7, r2
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	b25b      	sxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d109      	bne.n	8003be4 <bme68x_set_conf+0x104>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	18bc      	adds	r4, r7, r2
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	2105      	movs	r1, #5
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f001 fcfc 	bl	80055d8 <boundary_check>
 8003be0:	0003      	movs	r3, r0
 8003be2:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003be4:	221f      	movs	r2, #31
 8003be6:	18bb      	adds	r3, r7, r2
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	b25b      	sxtb	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d108      	bne.n	8003c02 <bme68x_set_conf+0x122>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	18bc      	adds	r4, r7, r2
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	2105      	movs	r1, #5
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f001 fced 	bl	80055d8 <boundary_check>
 8003bfe:	0003      	movs	r3, r0
 8003c00:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003c02:	221f      	movs	r2, #31
 8003c04:	18bb      	adds	r3, r7, r2
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	b25b      	sxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <bme68x_set_conf+0x142>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3304      	adds	r3, #4
 8003c12:	18bc      	adds	r4, r7, r2
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	2108      	movs	r1, #8
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f001 fcdd 	bl	80055d8 <boundary_check>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003c22:	231f      	movs	r3, #31
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	b25b      	sxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d177      	bne.n	8003d1e <bme68x_set_conf+0x23e>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8003c2e:	200c      	movs	r0, #12
 8003c30:	183b      	adds	r3, r7, r0
 8003c32:	791b      	ldrb	r3, [r3, #4]
 8003c34:	b25b      	sxtb	r3, r3
 8003c36:	221c      	movs	r2, #28
 8003c38:	4393      	bics	r3, r2
 8003c3a:	b25a      	sxtb	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	78db      	ldrb	r3, [r3, #3]
 8003c40:	b25b      	sxtb	r3, r3
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	b25b      	sxtb	r3, r3
 8003c46:	211c      	movs	r1, #28
 8003c48:	400b      	ands	r3, r1
 8003c4a:	b25b      	sxtb	r3, r3
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	183b      	adds	r3, r7, r0
 8003c54:	711a      	strb	r2, [r3, #4]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8003c56:	183b      	adds	r3, r7, r0
 8003c58:	78db      	ldrb	r3, [r3, #3]
 8003c5a:	b25b      	sxtb	r3, r3
 8003c5c:	221f      	movs	r2, #31
 8003c5e:	4013      	ands	r3, r2
 8003c60:	b25a      	sxtb	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	015b      	lsls	r3, r3, #5
 8003c6a:	b25b      	sxtb	r3, r3
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	b25b      	sxtb	r3, r3
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	183b      	adds	r3, r7, r0
 8003c74:	70da      	strb	r2, [r3, #3]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8003c76:	183b      	adds	r3, r7, r0
 8003c78:	78db      	ldrb	r3, [r3, #3]
 8003c7a:	b25b      	sxtb	r3, r3
 8003c7c:	221c      	movs	r2, #28
 8003c7e:	4393      	bics	r3, r2
 8003c80:	b25a      	sxtb	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	789b      	ldrb	r3, [r3, #2]
 8003c86:	b25b      	sxtb	r3, r3
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	b25b      	sxtb	r3, r3
 8003c8c:	211c      	movs	r1, #28
 8003c8e:	400b      	ands	r3, r1
 8003c90:	b25b      	sxtb	r3, r3
 8003c92:	4313      	orrs	r3, r2
 8003c94:	b25b      	sxtb	r3, r3
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	183b      	adds	r3, r7, r0
 8003c9a:	70da      	strb	r2, [r3, #3]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8003c9c:	183b      	adds	r3, r7, r0
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	b25b      	sxtb	r3, r3
 8003ca2:	2207      	movs	r2, #7
 8003ca4:	4393      	bics	r3, r2
 8003ca6:	b25a      	sxtb	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	b25b      	sxtb	r3, r3
 8003cae:	2107      	movs	r1, #7
 8003cb0:	400b      	ands	r3, r1
 8003cb2:	b25b      	sxtb	r3, r3
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	b25b      	sxtb	r3, r3
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	183b      	adds	r3, r7, r0
 8003cbc:	705a      	strb	r2, [r3, #1]
            if (conf->odr != BME68X_ODR_NONE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	791b      	ldrb	r3, [r3, #4]
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d008      	beq.n	8003cd8 <bme68x_set_conf+0x1f8>
            {
                odr20 = conf->odr;
 8003cc6:	231e      	movs	r3, #30
 8003cc8:	18fb      	adds	r3, r7, r3
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	7912      	ldrb	r2, [r2, #4]
 8003cce:	701a      	strb	r2, [r3, #0]
                odr3 = 0;
 8003cd0:	231d      	movs	r3, #29
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8003cd8:	210c      	movs	r1, #12
 8003cda:	187b      	adds	r3, r7, r1
 8003cdc:	791b      	ldrb	r3, [r3, #4]
 8003cde:	b25b      	sxtb	r3, r3
 8003ce0:	221f      	movs	r2, #31
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	b25a      	sxtb	r2, r3
 8003ce6:	231e      	movs	r3, #30
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b25b      	sxtb	r3, r3
 8003cee:	015b      	lsls	r3, r3, #5
 8003cf0:	b25b      	sxtb	r3, r3
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	b25b      	sxtb	r3, r3
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	711a      	strb	r2, [r3, #4]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8003cfc:	187b      	adds	r3, r7, r1
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b25b      	sxtb	r3, r3
 8003d02:	227f      	movs	r2, #127	@ 0x7f
 8003d04:	4013      	ands	r3, r2
 8003d06:	b25a      	sxtb	r2, r3
 8003d08:	231d      	movs	r3, #29
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	b25b      	sxtb	r3, r3
 8003d10:	01db      	lsls	r3, r3, #7
 8003d12:	b25b      	sxtb	r3, r3
 8003d14:	4313      	orrs	r3, r2
 8003d16:	b25b      	sxtb	r3, r3
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	187b      	adds	r3, r7, r1
 8003d1c:	701a      	strb	r2, [r3, #0]
        }
    }

    if (rslt == BME68X_OK)
 8003d1e:	221f      	movs	r2, #31
 8003d20:	18bb      	adds	r3, r7, r2
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	b25b      	sxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <bme68x_set_conf+0x260>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8003d2a:	18bc      	adds	r4, r7, r2
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	220c      	movs	r2, #12
 8003d30:	18b9      	adds	r1, r7, r2
 8003d32:	2214      	movs	r2, #20
 8003d34:	18b8      	adds	r0, r7, r2
 8003d36:	2205      	movs	r2, #5
 8003d38:	f7ff fd73 	bl	8003822 <bme68x_set_regs>
 8003d3c:	0003      	movs	r3, r0
 8003d3e:	7023      	strb	r3, [r4, #0]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8003d40:	221c      	movs	r2, #28
 8003d42:	18bb      	adds	r3, r7, r2
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00f      	beq.n	8003d6a <bme68x_set_conf+0x28a>
 8003d4a:	211f      	movs	r1, #31
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	b25b      	sxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d109      	bne.n	8003d6a <bme68x_set_conf+0x28a>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8003d56:	18bb      	adds	r3, r7, r2
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	187c      	adds	r4, r7, r1
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	0011      	movs	r1, r2
 8003d60:	0018      	movs	r0, r3
 8003d62:	f000 f80d 	bl	8003d80 <bme68x_set_op_mode>
 8003d66:	0003      	movs	r3, r0
 8003d68:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003d6a:	231f      	movs	r3, #31
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	b25b      	sxtb	r3, r3
}
 8003d72:	0018      	movs	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b008      	add	sp, #32
 8003d78:	bdb0      	pop	{r4, r5, r7, pc}
 8003d7a:	46c0      	nop			@ (mov r8, r8)
 8003d7c:	0800c768 	.word	0x0800c768

08003d80 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8003d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	0002      	movs	r2, r0
 8003d88:	6039      	str	r1, [r7, #0]
 8003d8a:	1dfb      	adds	r3, r7, #7
 8003d8c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8003d8e:	230e      	movs	r3, #14
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	2200      	movs	r2, #0
 8003d94:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8003d96:	230c      	movs	r3, #12
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	2274      	movs	r2, #116	@ 0x74
 8003d9c:	701a      	strb	r2, [r3, #0]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8003d9e:	260f      	movs	r6, #15
 8003da0:	19bc      	adds	r4, r7, r6
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	250d      	movs	r5, #13
 8003da6:	1979      	adds	r1, r7, r5
 8003da8:	2201      	movs	r2, #1
 8003daa:	2074      	movs	r0, #116	@ 0x74
 8003dac:	f7ff fde6 	bl	800397c <bme68x_get_regs>
 8003db0:	0003      	movs	r3, r0
 8003db2:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 8003db4:	0034      	movs	r4, r6
 8003db6:	193b      	adds	r3, r7, r4
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	b25b      	sxtb	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d123      	bne.n	8003e08 <bme68x_set_op_mode+0x88>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8003dc0:	0028      	movs	r0, r5
 8003dc2:	183b      	adds	r3, r7, r0
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	250e      	movs	r5, #14
 8003dc8:	197b      	adds	r3, r7, r5
 8003dca:	2103      	movs	r1, #3
 8003dcc:	400a      	ands	r2, r1
 8003dce:	701a      	strb	r2, [r3, #0]
            if (pow_mode != BME68X_SLEEP_MODE)
 8003dd0:	197b      	adds	r3, r7, r5
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d017      	beq.n	8003e08 <bme68x_set_op_mode+0x88>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8003dd8:	183b      	adds	r3, r7, r0
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2203      	movs	r2, #3
 8003dde:	4393      	bics	r3, r2
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	183b      	adds	r3, r7, r0
 8003de4:	701a      	strb	r2, [r3, #0]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003de6:	193c      	adds	r4, r7, r4
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	1839      	adds	r1, r7, r0
 8003dec:	220c      	movs	r2, #12
 8003dee:	18b8      	adds	r0, r7, r2
 8003df0:	2201      	movs	r2, #1
 8003df2:	f7ff fd16 	bl	8003822 <bme68x_set_regs>
 8003df6:	0003      	movs	r3, r0
 8003df8:	7023      	strb	r3, [r4, #0]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	481e      	ldr	r0, [pc, #120]	@ (8003e7c <bme68x_set_op_mode+0xfc>)
 8003e04:	0019      	movs	r1, r3
 8003e06:	4790      	blx	r2
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8003e08:	230e      	movs	r3, #14
 8003e0a:	18fb      	adds	r3, r7, r3
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <bme68x_set_op_mode+0x9e>
 8003e12:	230f      	movs	r3, #15
 8003e14:	18fb      	adds	r3, r7, r3
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	b25b      	sxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0bf      	beq.n	8003d9e <bme68x_set_op_mode+0x1e>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8003e1e:	1dfb      	adds	r3, r7, #7
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d021      	beq.n	8003e6a <bme68x_set_op_mode+0xea>
 8003e26:	240f      	movs	r4, #15
 8003e28:	193b      	adds	r3, r7, r4
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b25b      	sxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d11b      	bne.n	8003e6a <bme68x_set_op_mode+0xea>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8003e32:	200d      	movs	r0, #13
 8003e34:	183b      	adds	r3, r7, r0
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	b25b      	sxtb	r3, r3
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	b25a      	sxtb	r2, r3
 8003e40:	1dfb      	adds	r3, r7, #7
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	b25b      	sxtb	r3, r3
 8003e46:	2103      	movs	r1, #3
 8003e48:	400b      	ands	r3, r1
 8003e4a:	b25b      	sxtb	r3, r3
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	b25b      	sxtb	r3, r3
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	183b      	adds	r3, r7, r0
 8003e54:	701a      	strb	r2, [r3, #0]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003e56:	193c      	adds	r4, r7, r4
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	1839      	adds	r1, r7, r0
 8003e5c:	220c      	movs	r2, #12
 8003e5e:	18b8      	adds	r0, r7, r2
 8003e60:	2201      	movs	r2, #1
 8003e62:	f7ff fcde 	bl	8003822 <bme68x_set_regs>
 8003e66:	0003      	movs	r3, r0
 8003e68:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003e6a:	230f      	movs	r3, #15
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	b25b      	sxtb	r3, r3
}
 8003e72:	0018      	movs	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b005      	add	sp, #20
 8003e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	00002710 	.word	0x00002710

08003e80 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8003e80:	b5b0      	push	{r4, r5, r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d012      	beq.n	8003eb6 <bme68x_get_op_mode+0x36>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8003e90:	230f      	movs	r3, #15
 8003e92:	18fc      	adds	r4, r7, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	250e      	movs	r5, #14
 8003e98:	1979      	adds	r1, r7, r5
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	2074      	movs	r0, #116	@ 0x74
 8003e9e:	f7ff fd6d 	bl	800397c <bme68x_get_regs>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	7023      	strb	r3, [r4, #0]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8003ea6:	197b      	adds	r3, r7, r5
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2203      	movs	r2, #3
 8003eac:	4013      	ands	r3, r2
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	e003      	b.n	8003ebe <bme68x_get_op_mode+0x3e>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003eb6:	230f      	movs	r3, #15
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	22ff      	movs	r2, #255	@ 0xff
 8003ebc:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003ebe:	230f      	movs	r3, #15
 8003ec0:	18fb      	adds	r3, r7, r3
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	b25b      	sxtb	r3, r3
}
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b004      	add	sp, #16
 8003ecc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003ed0 <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8003ed0:	b5b0      	push	{r4, r5, r7, lr}
 8003ed2:	b08a      	sub	sp, #40	@ 0x28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	230f      	movs	r3, #15
 8003edc:	18fb      	adds	r3, r7, r3
 8003ede:	1c02      	adds	r2, r0, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8003ee6:	2314      	movs	r3, #20
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	4a37      	ldr	r2, [pc, #220]	@ (8003fc8 <bme68x_get_meas_dur+0xf8>)
 8003eec:	6811      	ldr	r1, [r2, #0]
 8003eee:	6019      	str	r1, [r3, #0]
 8003ef0:	8892      	ldrh	r2, [r2, #4]
 8003ef2:	809a      	strh	r2, [r3, #4]

    if (conf != NULL)
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d061      	beq.n	8003fbe <bme68x_get_meas_dur+0xee>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	3301      	adds	r3, #1
 8003efe:	2527      	movs	r5, #39	@ 0x27
 8003f00:	197c      	adds	r4, r7, r5
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	2105      	movs	r1, #5
 8003f06:	0018      	movs	r0, r3
 8003f08:	f001 fb66 	bl	80055d8 <boundary_check>
 8003f0c:	0003      	movs	r3, r0
 8003f0e:	7023      	strb	r3, [r4, #0]

        if (rslt == BME68X_OK)
 8003f10:	002a      	movs	r2, r5
 8003f12:	18bb      	adds	r3, r7, r2
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	b25b      	sxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d109      	bne.n	8003f30 <bme68x_get_meas_dur+0x60>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	3302      	adds	r3, #2
 8003f20:	18bc      	adds	r4, r7, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	2105      	movs	r1, #5
 8003f26:	0018      	movs	r0, r3
 8003f28:	f001 fb56 	bl	80055d8 <boundary_check>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003f30:	2227      	movs	r2, #39	@ 0x27
 8003f32:	18bb      	adds	r3, r7, r2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d108      	bne.n	8003f4e <bme68x_get_meas_dur+0x7e>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	18bc      	adds	r4, r7, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	2105      	movs	r1, #5
 8003f44:	0018      	movs	r0, r3
 8003f46:	f001 fb47 	bl	80055d8 <boundary_check>
 8003f4a:	0003      	movs	r3, r0
 8003f4c:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003f4e:	2327      	movs	r3, #39	@ 0x27
 8003f50:	18fb      	adds	r3, r7, r3
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	b25b      	sxtb	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d131      	bne.n	8003fbe <bme68x_get_meas_dur+0xee>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	785b      	ldrb	r3, [r3, #1]
 8003f5e:	001a      	movs	r2, r3
 8003f60:	2114      	movs	r1, #20
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	5c9b      	ldrb	r3, [r3, r2]
 8003f66:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	789b      	ldrb	r3, [r3, #2]
 8003f6c:	001a      	movs	r2, r3
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	5c9b      	ldrb	r3, [r3, r2]
 8003f72:	001a      	movs	r2, r3
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	189b      	adds	r3, r3, r2
 8003f78:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	001a      	movs	r2, r3
 8003f80:	187b      	adds	r3, r7, r1
 8003f82:	5c9b      	ldrb	r3, [r3, r2]
 8003f84:	001a      	movs	r2, r3
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	189b      	adds	r3, r3, r2
 8003f8a:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	4a0f      	ldr	r2, [pc, #60]	@ (8003fcc <bme68x_get_meas_dur+0xfc>)
 8003f90:	4353      	muls	r3, r2
 8003f92:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	4a0e      	ldr	r2, [pc, #56]	@ (8003fd0 <bme68x_get_meas_dur+0x100>)
 8003f98:	4694      	mov	ip, r2
 8003f9a:	4463      	add	r3, ip
 8003f9c:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8003fd4 <bme68x_get_meas_dur+0x104>)
 8003fa2:	4694      	mov	ip, r2
 8003fa4:	4463      	add	r3, ip
 8003fa6:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8003fa8:	230f      	movs	r3, #15
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d005      	beq.n	8003fbe <bme68x_get_meas_dur+0xee>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	22fa      	movs	r2, #250	@ 0xfa
 8003fb6:	0092      	lsls	r2, r2, #2
 8003fb8:	4694      	mov	ip, r2
 8003fba:	4463      	add	r3, ip
 8003fbc:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
}
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	b00a      	add	sp, #40	@ 0x28
 8003fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc8:	0800c770 	.word	0x0800c770
 8003fcc:	000007ab 	.word	0x000007ab
 8003fd0:	00000774 	.word	0x00000774
 8003fd4:	00000951 	.word	0x00000951

08003fd8 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8003fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fda:	b09b      	sub	sp, #108	@ 0x6c
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60b9      	str	r1, [r7, #8]
 8003fe0:	607a      	str	r2, [r7, #4]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	260f      	movs	r6, #15
 8003fe6:	19bb      	adds	r3, r7, r6
 8003fe8:	1c02      	adds	r2, r0, #0
 8003fea:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8003fec:	2366      	movs	r3, #102	@ 0x66
 8003fee:	18fb      	adds	r3, r7, r3
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	2365      	movs	r3, #101	@ 0x65
 8003ff6:	18fb      	adds	r3, r7, r3
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	2364      	movs	r3, #100	@ 0x64
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *field_ptr[3] = { 0 };
 8004004:	2458      	movs	r4, #88	@ 0x58
 8004006:	193b      	adds	r3, r7, r4
 8004008:	0018      	movs	r0, r3
 800400a:	230c      	movs	r3, #12
 800400c:	001a      	movs	r2, r3
 800400e:	2100      	movs	r1, #0
 8004010:	f006 f9f2 	bl	800a3f8 <memset>
    struct bme68x_data field_data[3] = { { 0 } };
 8004014:	2510      	movs	r5, #16
 8004016:	197b      	adds	r3, r7, r5
 8004018:	0018      	movs	r0, r3
 800401a:	2348      	movs	r3, #72	@ 0x48
 800401c:	001a      	movs	r2, r3
 800401e:	2100      	movs	r1, #0
 8004020:	f006 f9ea 	bl	800a3f8 <memset>

    field_ptr[0] = &field_data[0];
 8004024:	193b      	adds	r3, r7, r4
 8004026:	0029      	movs	r1, r5
 8004028:	187a      	adds	r2, r7, r1
 800402a:	601a      	str	r2, [r3, #0]
    field_ptr[1] = &field_data[1];
 800402c:	193b      	adds	r3, r7, r4
 800402e:	187a      	adds	r2, r7, r1
 8004030:	3218      	adds	r2, #24
 8004032:	605a      	str	r2, [r3, #4]
    field_ptr[2] = &field_data[2];
 8004034:	193b      	adds	r3, r7, r4
 8004036:	187a      	adds	r2, r7, r1
 8004038:	3230      	adds	r2, #48	@ 0x30
 800403a:	609a      	str	r2, [r3, #8]

    rslt = null_ptr_check(dev);
 800403c:	2567      	movs	r5, #103	@ 0x67
 800403e:	197c      	adds	r4, r7, r5
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	0018      	movs	r0, r3
 8004044:	f001 fb01 	bl	800564a <null_ptr_check>
 8004048:	0003      	movs	r3, r0
 800404a:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && (data != NULL))
 800404c:	002a      	movs	r2, r5
 800404e:	18bb      	adds	r3, r7, r2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b25b      	sxtb	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d000      	beq.n	800405a <bme68x_get_data+0x82>
 8004058:	e0e3      	b.n	8004222 <bme68x_get_data+0x24a>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d100      	bne.n	8004062 <bme68x_get_data+0x8a>
 8004060:	e0df      	b.n	8004222 <bme68x_get_data+0x24a>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8004062:	19bb      	adds	r3, r7, r6
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d122      	bne.n	80040b0 <bme68x_get_data+0xd8>
        {
            rslt = read_field_data(0, data, dev);
 800406a:	0015      	movs	r5, r2
 800406c:	18bc      	adds	r4, r7, r2
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	0019      	movs	r1, r3
 8004074:	2000      	movs	r0, #0
 8004076:	f000 fe67 	bl	8004d48 <read_field_data>
 800407a:	0003      	movs	r3, r0
 800407c:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 800407e:	197b      	adds	r3, r7, r5
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	b25b      	sxtb	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d000      	beq.n	800408a <bme68x_get_data+0xb2>
 8004088:	e0bd      	b.n	8004206 <bme68x_get_data+0x22e>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	b25b      	sxtb	r3, r3
 8004090:	2b00      	cmp	r3, #0
 8004092:	da04      	bge.n	800409e <bme68x_get_data+0xc6>
                {
                    new_fields = 1;
 8004094:	2364      	movs	r3, #100	@ 0x64
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	e0b3      	b.n	8004206 <bme68x_get_data+0x22e>
                }
                else
                {
                    new_fields = 0;
 800409e:	2364      	movs	r3, #100	@ 0x64
 80040a0:	18fb      	adds	r3, r7, r3
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
                    rslt = BME68X_W_NO_NEW_DATA;
 80040a6:	2367      	movs	r3, #103	@ 0x67
 80040a8:	18fb      	adds	r3, r7, r3
 80040aa:	2202      	movs	r2, #2
 80040ac:	701a      	strb	r2, [r3, #0]
 80040ae:	e0aa      	b.n	8004206 <bme68x_get_data+0x22e>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 80040b0:	220f      	movs	r2, #15
 80040b2:	18bb      	adds	r3, r7, r2
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d004      	beq.n	80040c4 <bme68x_get_data+0xec>
 80040ba:	18bb      	adds	r3, r7, r2
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d000      	beq.n	80040c4 <bme68x_get_data+0xec>
 80040c2:	e09c      	b.n	80041fe <bme68x_get_data+0x226>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 80040c4:	2367      	movs	r3, #103	@ 0x67
 80040c6:	18fc      	adds	r4, r7, r3
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	2358      	movs	r3, #88	@ 0x58
 80040cc:	18fb      	adds	r3, r7, r3
 80040ce:	0011      	movs	r1, r2
 80040d0:	0018      	movs	r0, r3
 80040d2:	f000 ffb9 	bl	8005048 <read_all_field_data>
 80040d6:	0003      	movs	r3, r0
 80040d8:	7023      	strb	r3, [r4, #0]

            new_fields = 0;
 80040da:	2364      	movs	r3, #100	@ 0x64
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80040e2:	2366      	movs	r3, #102	@ 0x66
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
 80040ea:	e016      	b.n	800411a <bme68x_get_data+0x142>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 80040ec:	2366      	movs	r3, #102	@ 0x66
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	2358      	movs	r3, #88	@ 0x58
 80040f4:	18fb      	adds	r3, r7, r3
 80040f6:	0092      	lsls	r2, r2, #2
 80040f8:	58d3      	ldr	r3, [r2, r3]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	b25b      	sxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	da05      	bge.n	800410e <bme68x_get_data+0x136>
                {
                    new_fields++;
 8004102:	2164      	movs	r1, #100	@ 0x64
 8004104:	187b      	adds	r3, r7, r1
 8004106:	781a      	ldrb	r2, [r3, #0]
 8004108:	187b      	adds	r3, r7, r1
 800410a:	3201      	adds	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 800410e:	2166      	movs	r1, #102	@ 0x66
 8004110:	187b      	adds	r3, r7, r1
 8004112:	781a      	ldrb	r2, [r3, #0]
 8004114:	187b      	adds	r3, r7, r1
 8004116:	3201      	adds	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	2366      	movs	r3, #102	@ 0x66
 800411c:	18fb      	adds	r3, r7, r3
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d805      	bhi.n	8004130 <bme68x_get_data+0x158>
 8004124:	2367      	movs	r3, #103	@ 0x67
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	b25b      	sxtb	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0dd      	beq.n	80040ec <bme68x_get_data+0x114>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8004130:	2366      	movs	r3, #102	@ 0x66
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	2200      	movs	r2, #0
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	e022      	b.n	8004180 <bme68x_get_data+0x1a8>
            {
                for (j = i + 1; j < 3; j++)
 800413a:	2365      	movs	r3, #101	@ 0x65
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	2266      	movs	r2, #102	@ 0x66
 8004140:	18ba      	adds	r2, r7, r2
 8004142:	7812      	ldrb	r2, [r2, #0]
 8004144:	3201      	adds	r2, #1
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	e00f      	b.n	800416a <bme68x_get_data+0x192>
                {
                    sort_sensor_data(i, j, field_ptr);
 800414a:	2358      	movs	r3, #88	@ 0x58
 800414c:	18fa      	adds	r2, r7, r3
 800414e:	2465      	movs	r4, #101	@ 0x65
 8004150:	193b      	adds	r3, r7, r4
 8004152:	7819      	ldrb	r1, [r3, #0]
 8004154:	2366      	movs	r3, #102	@ 0x66
 8004156:	18fb      	adds	r3, r7, r3
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	0018      	movs	r0, r3
 800415c:	f001 fc62 	bl	8005a24 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8004160:	193b      	adds	r3, r7, r4
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	193b      	adds	r3, r7, r4
 8004166:	3201      	adds	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	2365      	movs	r3, #101	@ 0x65
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d9ea      	bls.n	800414a <bme68x_get_data+0x172>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8004174:	2166      	movs	r1, #102	@ 0x66
 8004176:	187b      	adds	r3, r7, r1
 8004178:	781a      	ldrb	r2, [r3, #0]
 800417a:	187b      	adds	r3, r7, r1
 800417c:	3201      	adds	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
 8004180:	2366      	movs	r3, #102	@ 0x66
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d805      	bhi.n	8004196 <bme68x_get_data+0x1be>
 800418a:	2367      	movs	r3, #103	@ 0x67
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	b25b      	sxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0d1      	beq.n	800413a <bme68x_get_data+0x162>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8004196:	2366      	movs	r3, #102	@ 0x66
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	e019      	b.n	80041d4 <bme68x_get_data+0x1fc>
            {
                data[i] = *field_ptr[i];
 80041a0:	2566      	movs	r5, #102	@ 0x66
 80041a2:	197b      	adds	r3, r7, r5
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	2358      	movs	r3, #88	@ 0x58
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	0092      	lsls	r2, r2, #2
 80041ac:	58d1      	ldr	r1, [r2, r3]
 80041ae:	197b      	adds	r3, r7, r5
 80041b0:	781a      	ldrb	r2, [r3, #0]
 80041b2:	0013      	movs	r3, r2
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	189b      	adds	r3, r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	001a      	movs	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	000a      	movs	r2, r1
 80041c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80041c4:	c313      	stmia	r3!, {r0, r1, r4}
 80041c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80041c8:	c313      	stmia	r3!, {r0, r1, r4}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80041ca:	197b      	adds	r3, r7, r5
 80041cc:	781a      	ldrb	r2, [r3, #0]
 80041ce:	197b      	adds	r3, r7, r5
 80041d0:	3201      	adds	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	2366      	movs	r3, #102	@ 0x66
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d805      	bhi.n	80041ea <bme68x_get_data+0x212>
 80041de:	2367      	movs	r3, #103	@ 0x67
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b25b      	sxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0da      	beq.n	80041a0 <bme68x_get_data+0x1c8>
            }

            if (new_fields == 0)
 80041ea:	2364      	movs	r3, #100	@ 0x64
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d108      	bne.n	8004206 <bme68x_get_data+0x22e>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 80041f4:	2367      	movs	r3, #103	@ 0x67
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2202      	movs	r2, #2
 80041fa:	701a      	strb	r2, [r3, #0]
            if (new_fields == 0)
 80041fc:	e003      	b.n	8004206 <bme68x_get_data+0x22e>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 80041fe:	2367      	movs	r3, #103	@ 0x67
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	2201      	movs	r2, #1
 8004204:	701a      	strb	r2, [r3, #0]
        }

        if (n_data == NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d104      	bne.n	8004216 <bme68x_get_data+0x23e>
        {
            rslt = BME68X_E_NULL_PTR;
 800420c:	2367      	movs	r3, #103	@ 0x67
 800420e:	18fb      	adds	r3, r7, r3
 8004210:	22ff      	movs	r2, #255	@ 0xff
 8004212:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8004214:	e009      	b.n	800422a <bme68x_get_data+0x252>
        }
        else
        {
            *n_data = new_fields;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2264      	movs	r2, #100	@ 0x64
 800421a:	18ba      	adds	r2, r7, r2
 800421c:	7812      	ldrb	r2, [r2, #0]
 800421e:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8004220:	e003      	b.n	800422a <bme68x_get_data+0x252>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8004222:	2367      	movs	r3, #103	@ 0x67
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	22ff      	movs	r2, #255	@ 0xff
 8004228:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800422a:	2367      	movs	r3, #103	@ 0x67
 800422c:	18fb      	adds	r3, r7, r3
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	b25b      	sxtb	r3, r3
}
 8004232:	0018      	movs	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	b01b      	add	sp, #108	@ 0x6c
 8004238:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800423c <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 800423c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800423e:	b089      	sub	sp, #36	@ 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	260f      	movs	r6, #15
 8004248:	19bb      	adds	r3, r7, r6
 800424a:	1c02      	adds	r2, r0, #0
 800424c:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t nb_conv = 0;
 800424e:	231c      	movs	r3, #28
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	2200      	movs	r2, #0
 8004254:	701a      	strb	r2, [r3, #0]
    uint8_t hctrl, run_gas = 0;
 8004256:	221d      	movs	r2, #29
 8004258:	18bb      	adds	r3, r7, r2
 800425a:	2200      	movs	r2, #0
 800425c:	701a      	strb	r2, [r3, #0]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 800425e:	2214      	movs	r2, #20
 8004260:	18bb      	adds	r3, r7, r2
 8004262:	4a53      	ldr	r2, [pc, #332]	@ (80043b0 <bme68x_set_heatr_conf+0x174>)
 8004264:	801a      	strh	r2, [r3, #0]

    if (conf != NULL)
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d100      	bne.n	800426e <bme68x_set_heatr_conf+0x32>
 800426c:	e094      	b.n	8004398 <bme68x_set_heatr_conf+0x15c>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 800426e:	251f      	movs	r5, #31
 8004270:	197c      	adds	r4, r7, r5
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	0019      	movs	r1, r3
 8004276:	2000      	movs	r0, #0
 8004278:	f7ff fd82 	bl	8003d80 <bme68x_set_op_mode>
 800427c:	0003      	movs	r3, r0
 800427e:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 8004280:	197b      	adds	r3, r7, r5
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b25b      	sxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10b      	bne.n	80042a2 <bme68x_set_heatr_conf+0x66>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 800428a:	197c      	adds	r4, r7, r5
 800428c:	687d      	ldr	r5, [r7, #4]
 800428e:	231c      	movs	r3, #28
 8004290:	18fa      	adds	r2, r7, r3
 8004292:	19bb      	adds	r3, r7, r6
 8004294:	7819      	ldrb	r1, [r3, #0]
 8004296:	68b8      	ldr	r0, [r7, #8]
 8004298:	002b      	movs	r3, r5
 800429a:	f001 f9f9 	bl	8005690 <set_conf>
 800429e:	0003      	movs	r3, r0
 80042a0:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 80042a2:	251f      	movs	r5, #31
 80042a4:	197b      	adds	r3, r7, r5
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b25b      	sxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d000      	beq.n	80042b0 <bme68x_set_heatr_conf+0x74>
 80042ae:	e077      	b.n	80043a0 <bme68x_set_heatr_conf+0x164>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 80042b0:	197c      	adds	r4, r7, r5
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2218      	movs	r2, #24
 80042b6:	18b9      	adds	r1, r7, r2
 80042b8:	2202      	movs	r2, #2
 80042ba:	2070      	movs	r0, #112	@ 0x70
 80042bc:	f7ff fb5e 	bl	800397c <bme68x_get_regs>
 80042c0:	0003      	movs	r3, r0
 80042c2:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 80042c4:	197b      	adds	r3, r7, r5
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	b25b      	sxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d168      	bne.n	80043a0 <bme68x_set_heatr_conf+0x164>
            {
                if (conf->enable == BME68X_ENABLE)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d111      	bne.n	80042fa <bme68x_set_heatr_conf+0xbe>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 80042d6:	231e      	movs	r3, #30
 80042d8:	18fb      	adds	r3, r7, r3
 80042da:	2200      	movs	r2, #0
 80042dc:	701a      	strb	r2, [r3, #0]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d104      	bne.n	80042f0 <bme68x_set_heatr_conf+0xb4>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 80042e6:	231d      	movs	r3, #29
 80042e8:	18fb      	adds	r3, r7, r3
 80042ea:	2202      	movs	r2, #2
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	e00c      	b.n	800430a <bme68x_set_heatr_conf+0xce>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 80042f0:	231d      	movs	r3, #29
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	2201      	movs	r2, #1
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e007      	b.n	800430a <bme68x_set_heatr_conf+0xce>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 80042fa:	231e      	movs	r3, #30
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8004302:	231d      	movs	r3, #29
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 800430a:	2018      	movs	r0, #24
 800430c:	183b      	adds	r3, r7, r0
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	b25b      	sxtb	r3, r3
 8004312:	2208      	movs	r2, #8
 8004314:	4393      	bics	r3, r2
 8004316:	b25a      	sxtb	r2, r3
 8004318:	231e      	movs	r3, #30
 800431a:	18fb      	adds	r3, r7, r3
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	b25b      	sxtb	r3, r3
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	b25b      	sxtb	r3, r3
 8004324:	2108      	movs	r1, #8
 8004326:	400b      	ands	r3, r1
 8004328:	b25b      	sxtb	r3, r3
 800432a:	4313      	orrs	r3, r2
 800432c:	b25b      	sxtb	r3, r3
 800432e:	b2da      	uxtb	r2, r3
 8004330:	183b      	adds	r3, r7, r0
 8004332:	701a      	strb	r2, [r3, #0]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8004334:	183b      	adds	r3, r7, r0
 8004336:	785b      	ldrb	r3, [r3, #1]
 8004338:	b25b      	sxtb	r3, r3
 800433a:	220f      	movs	r2, #15
 800433c:	4393      	bics	r3, r2
 800433e:	b25a      	sxtb	r2, r3
 8004340:	231c      	movs	r3, #28
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b25b      	sxtb	r3, r3
 8004348:	210f      	movs	r1, #15
 800434a:	400b      	ands	r3, r1
 800434c:	b25b      	sxtb	r3, r3
 800434e:	4313      	orrs	r3, r2
 8004350:	b25b      	sxtb	r3, r3
 8004352:	b2da      	uxtb	r2, r3
 8004354:	183b      	adds	r3, r7, r0
 8004356:	705a      	strb	r2, [r3, #1]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8004358:	183b      	adds	r3, r7, r0
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	b25b      	sxtb	r3, r3
 800435e:	2230      	movs	r2, #48	@ 0x30
 8004360:	4393      	bics	r3, r2
 8004362:	b25a      	sxtb	r2, r3
 8004364:	231d      	movs	r3, #29
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	b25b      	sxtb	r3, r3
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	b25b      	sxtb	r3, r3
 8004370:	2130      	movs	r1, #48	@ 0x30
 8004372:	400b      	ands	r3, r1
 8004374:	b25b      	sxtb	r3, r3
 8004376:	4313      	orrs	r3, r2
 8004378:	b25b      	sxtb	r3, r3
 800437a:	b2da      	uxtb	r2, r3
 800437c:	183b      	adds	r3, r7, r0
 800437e:	705a      	strb	r2, [r3, #1]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8004380:	231f      	movs	r3, #31
 8004382:	18fc      	adds	r4, r7, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	1839      	adds	r1, r7, r0
 8004388:	2214      	movs	r2, #20
 800438a:	18b8      	adds	r0, r7, r2
 800438c:	2202      	movs	r2, #2
 800438e:	f7ff fa48 	bl	8003822 <bme68x_set_regs>
 8004392:	0003      	movs	r3, r0
 8004394:	7023      	strb	r3, [r4, #0]
 8004396:	e003      	b.n	80043a0 <bme68x_set_heatr_conf+0x164>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8004398:	231f      	movs	r3, #31
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	22ff      	movs	r2, #255	@ 0xff
 800439e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80043a0:	231f      	movs	r3, #31
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	b25b      	sxtb	r3, r3
}
 80043a8:	0018      	movs	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b009      	add	sp, #36	@ 0x24
 80043ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b0:	00007170 	.word	0x00007170

080043b4 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80043b4:	b5b0      	push	{r4, r5, r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f7fd f99c 	bl	80016fc <__aeabi_ui2f>
 80043c4:	1c03      	adds	r3, r0, #0
 80043c6:	218d      	movs	r1, #141	@ 0x8d
 80043c8:	05c9      	lsls	r1, r1, #23
 80043ca:	1c18      	adds	r0, r3, #0
 80043cc:	f7fc fb9a 	bl	8000b04 <__aeabi_fdiv>
 80043d0:	1c03      	adds	r3, r0, #0
 80043d2:	1c1c      	adds	r4, r3, #0
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	8bdb      	ldrh	r3, [r3, #30]
 80043d8:	0018      	movs	r0, r3
 80043da:	f7fd f98f 	bl	80016fc <__aeabi_ui2f>
 80043de:	1c03      	adds	r3, r0, #0
 80043e0:	2189      	movs	r1, #137	@ 0x89
 80043e2:	05c9      	lsls	r1, r1, #23
 80043e4:	1c18      	adds	r0, r3, #0
 80043e6:	f7fc fb8d 	bl	8000b04 <__aeabi_fdiv>
 80043ea:	1c03      	adds	r3, r0, #0
 80043ec:	1c19      	adds	r1, r3, #0
 80043ee:	1c20      	adds	r0, r4, #0
 80043f0:	f7fc feb0 	bl	8001154 <__aeabi_fsub>
 80043f4:	1c03      	adds	r3, r0, #0
 80043f6:	1c1c      	adds	r4, r3, #0
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2220      	movs	r2, #32
 80043fc:	5e9b      	ldrsh	r3, [r3, r2]
 80043fe:	0018      	movs	r0, r3
 8004400:	f7fd f92c 	bl	800165c <__aeabi_i2f>
 8004404:	1c03      	adds	r3, r0, #0
 8004406:	1c19      	adds	r1, r3, #0
 8004408:	1c20      	adds	r0, r4, #0
 800440a:	f7fc fd49 	bl	8000ea0 <__aeabi_fmul>
 800440e:	1c03      	adds	r3, r0, #0
 8004410:	617b      	str	r3, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fd f972 	bl	80016fc <__aeabi_ui2f>
 8004418:	1c03      	adds	r3, r0, #0
 800441a:	2190      	movs	r1, #144	@ 0x90
 800441c:	05c9      	lsls	r1, r1, #23
 800441e:	1c18      	adds	r0, r3, #0
 8004420:	f7fc fb70 	bl	8000b04 <__aeabi_fdiv>
 8004424:	1c03      	adds	r3, r0, #0
 8004426:	1c1c      	adds	r4, r3, #0
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	8bdb      	ldrh	r3, [r3, #30]
 800442c:	0018      	movs	r0, r3
 800442e:	f7fd f965 	bl	80016fc <__aeabi_ui2f>
 8004432:	1c03      	adds	r3, r0, #0
 8004434:	218c      	movs	r1, #140	@ 0x8c
 8004436:	05c9      	lsls	r1, r1, #23
 8004438:	1c18      	adds	r0, r3, #0
 800443a:	f7fc fb63 	bl	8000b04 <__aeabi_fdiv>
 800443e:	1c03      	adds	r3, r0, #0
 8004440:	1c19      	adds	r1, r3, #0
 8004442:	1c20      	adds	r0, r4, #0
 8004444:	f7fc fe86 	bl	8001154 <__aeabi_fsub>
 8004448:	1c03      	adds	r3, r0, #0
 800444a:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7fd f955 	bl	80016fc <__aeabi_ui2f>
 8004452:	1c03      	adds	r3, r0, #0
 8004454:	2190      	movs	r1, #144	@ 0x90
 8004456:	05c9      	lsls	r1, r1, #23
 8004458:	1c18      	adds	r0, r3, #0
 800445a:	f7fc fb53 	bl	8000b04 <__aeabi_fdiv>
 800445e:	1c03      	adds	r3, r0, #0
 8004460:	1c1d      	adds	r5, r3, #0
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	8bdb      	ldrh	r3, [r3, #30]
 8004466:	0018      	movs	r0, r3
 8004468:	f7fd f948 	bl	80016fc <__aeabi_ui2f>
 800446c:	1c03      	adds	r3, r0, #0
 800446e:	218c      	movs	r1, #140	@ 0x8c
 8004470:	05c9      	lsls	r1, r1, #23
 8004472:	1c18      	adds	r0, r3, #0
 8004474:	f7fc fb46 	bl	8000b04 <__aeabi_fdiv>
 8004478:	1c03      	adds	r3, r0, #0
 800447a:	1c19      	adds	r1, r3, #0
 800447c:	1c28      	adds	r0, r5, #0
 800447e:	f7fc fe69 	bl	8001154 <__aeabi_fsub>
 8004482:	1c03      	adds	r3, r0, #0
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8004484:	1c19      	adds	r1, r3, #0
 8004486:	1c20      	adds	r0, r4, #0
 8004488:	f7fc fd0a 	bl	8000ea0 <__aeabi_fmul>
 800448c:	1c03      	adds	r3, r0, #0
 800448e:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2222      	movs	r2, #34	@ 0x22
 8004494:	569b      	ldrsb	r3, [r3, r2]
 8004496:	0018      	movs	r0, r3
 8004498:	f7fd f8e0 	bl	800165c <__aeabi_i2f>
 800449c:	1c03      	adds	r3, r0, #0
 800449e:	2183      	movs	r1, #131	@ 0x83
 80044a0:	05c9      	lsls	r1, r1, #23
 80044a2:	1c18      	adds	r0, r3, #0
 80044a4:	f7fc fcfc 	bl	8000ea0 <__aeabi_fmul>
 80044a8:	1c03      	adds	r3, r0, #0
    var2 =
 80044aa:	1c19      	adds	r1, r3, #0
 80044ac:	1c20      	adds	r0, r4, #0
 80044ae:	f7fc fcf7 	bl	8000ea0 <__aeabi_fmul>
 80044b2:	1c03      	adds	r3, r0, #0
 80044b4:	613b      	str	r3, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 80044b6:	6939      	ldr	r1, [r7, #16]
 80044b8:	6978      	ldr	r0, [r7, #20]
 80044ba:	f7fc f931 	bl	8000720 <__aeabi_fadd>
 80044be:	1c03      	adds	r3, r0, #0
 80044c0:	1c1a      	adds	r2, r3, #0
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ca:	4905      	ldr	r1, [pc, #20]	@ (80044e0 <calc_temperature+0x12c>)
 80044cc:	1c18      	adds	r0, r3, #0
 80044ce:	f7fc fb19 	bl	8000b04 <__aeabi_fdiv>
 80044d2:	1c03      	adds	r3, r0, #0
 80044d4:	60fb      	str	r3, [r7, #12]

    return calc_temp;
 80044d6:	68fb      	ldr	r3, [r7, #12]
}
 80044d8:	1c18      	adds	r0, r3, #0
 80044da:	46bd      	mov	sp, r7
 80044dc:	b006      	add	sp, #24
 80044de:	bdb0      	pop	{r4, r5, r7, pc}
 80044e0:	45a00000 	.word	0x45a00000

080044e4 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 80044e4:	b590      	push	{r4, r7, lr}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f2:	2180      	movs	r1, #128	@ 0x80
 80044f4:	05c9      	lsls	r1, r1, #23
 80044f6:	1c18      	adds	r0, r3, #0
 80044f8:	f7fc fb04 	bl	8000b04 <__aeabi_fdiv>
 80044fc:	1c03      	adds	r3, r0, #0
 80044fe:	49a7      	ldr	r1, [pc, #668]	@ (800479c <calc_pressure+0x2b8>)
 8004500:	1c18      	adds	r0, r3, #0
 8004502:	f7fc fe27 	bl	8001154 <__aeabi_fsub>
 8004506:	1c03      	adds	r3, r0, #0
 8004508:	613b      	str	r3, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 800450a:	6939      	ldr	r1, [r7, #16]
 800450c:	6938      	ldr	r0, [r7, #16]
 800450e:	f7fc fcc7 	bl	8000ea0 <__aeabi_fmul>
 8004512:	1c03      	adds	r3, r0, #0
 8004514:	1c1c      	adds	r4, r3, #0
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	222e      	movs	r2, #46	@ 0x2e
 800451a:	569b      	ldrsb	r3, [r3, r2]
 800451c:	0018      	movs	r0, r3
 800451e:	f7fd f89d 	bl	800165c <__aeabi_i2f>
 8004522:	1c03      	adds	r3, r0, #0
 8004524:	2190      	movs	r1, #144	@ 0x90
 8004526:	05c9      	lsls	r1, r1, #23
 8004528:	1c18      	adds	r0, r3, #0
 800452a:	f7fc faeb 	bl	8000b04 <__aeabi_fdiv>
 800452e:	1c03      	adds	r3, r0, #0
 8004530:	1c19      	adds	r1, r3, #0
 8004532:	1c20      	adds	r0, r4, #0
 8004534:	f7fc fcb4 	bl	8000ea0 <__aeabi_fmul>
 8004538:	1c03      	adds	r3, r0, #0
 800453a:	60fb      	str	r3, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	222c      	movs	r2, #44	@ 0x2c
 8004540:	5e9b      	ldrsh	r3, [r3, r2]
 8004542:	0018      	movs	r0, r3
 8004544:	f7fd f88a 	bl	800165c <__aeabi_i2f>
 8004548:	1c03      	adds	r3, r0, #0
 800454a:	6939      	ldr	r1, [r7, #16]
 800454c:	1c18      	adds	r0, r3, #0
 800454e:	f7fc fca7 	bl	8000ea0 <__aeabi_fmul>
 8004552:	1c03      	adds	r3, r0, #0
 8004554:	1c19      	adds	r1, r3, #0
 8004556:	1c18      	adds	r0, r3, #0
 8004558:	f7fc f8e2 	bl	8000720 <__aeabi_fadd>
 800455c:	1c03      	adds	r3, r0, #0
 800455e:	1c19      	adds	r1, r3, #0
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f7fc f8dd 	bl	8000720 <__aeabi_fadd>
 8004566:	1c03      	adds	r3, r0, #0
 8004568:	60fb      	str	r3, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 800456a:	2181      	movs	r1, #129	@ 0x81
 800456c:	05c9      	lsls	r1, r1, #23
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f7fc fac8 	bl	8000b04 <__aeabi_fdiv>
 8004574:	1c03      	adds	r3, r0, #0
 8004576:	1c1c      	adds	r4, r3, #0
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	222a      	movs	r2, #42	@ 0x2a
 800457c:	5e9b      	ldrsh	r3, [r3, r2]
 800457e:	0018      	movs	r0, r3
 8004580:	f7fd f86c 	bl	800165c <__aeabi_i2f>
 8004584:	1c03      	adds	r3, r0, #0
 8004586:	218f      	movs	r1, #143	@ 0x8f
 8004588:	05c9      	lsls	r1, r1, #23
 800458a:	1c18      	adds	r0, r3, #0
 800458c:	f7fc fc88 	bl	8000ea0 <__aeabi_fmul>
 8004590:	1c03      	adds	r3, r0, #0
 8004592:	1c19      	adds	r1, r3, #0
 8004594:	1c20      	adds	r0, r4, #0
 8004596:	f7fc f8c3 	bl	8000720 <__aeabi_fadd>
 800459a:	1c03      	adds	r3, r0, #0
 800459c:	60fb      	str	r3, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2228      	movs	r2, #40	@ 0x28
 80045a2:	569b      	ldrsb	r3, [r3, r2]
 80045a4:	0018      	movs	r0, r3
 80045a6:	f7fd f859 	bl	800165c <__aeabi_i2f>
 80045aa:	1c03      	adds	r3, r0, #0
 80045ac:	6939      	ldr	r1, [r7, #16]
 80045ae:	1c18      	adds	r0, r3, #0
 80045b0:	f7fc fc76 	bl	8000ea0 <__aeabi_fmul>
 80045b4:	1c03      	adds	r3, r0, #0
 80045b6:	6939      	ldr	r1, [r7, #16]
 80045b8:	1c18      	adds	r0, r3, #0
 80045ba:	f7fc fc71 	bl	8000ea0 <__aeabi_fmul>
 80045be:	1c03      	adds	r3, r0, #0
 80045c0:	218d      	movs	r1, #141	@ 0x8d
 80045c2:	05c9      	lsls	r1, r1, #23
 80045c4:	1c18      	adds	r0, r3, #0
 80045c6:	f7fc fa9d 	bl	8000b04 <__aeabi_fdiv>
 80045ca:	1c03      	adds	r3, r0, #0
 80045cc:	1c1c      	adds	r4, r3, #0
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2226      	movs	r2, #38	@ 0x26
 80045d2:	5e9b      	ldrsh	r3, [r3, r2]
 80045d4:	0018      	movs	r0, r3
 80045d6:	f7fd f841 	bl	800165c <__aeabi_i2f>
 80045da:	1c03      	adds	r3, r0, #0
 80045dc:	6939      	ldr	r1, [r7, #16]
 80045de:	1c18      	adds	r0, r3, #0
 80045e0:	f7fc fc5e 	bl	8000ea0 <__aeabi_fmul>
 80045e4:	1c03      	adds	r3, r0, #0
 80045e6:	1c19      	adds	r1, r3, #0
 80045e8:	1c20      	adds	r0, r4, #0
 80045ea:	f7fc f899 	bl	8000720 <__aeabi_fadd>
 80045ee:	1c03      	adds	r3, r0, #0
 80045f0:	2192      	movs	r1, #146	@ 0x92
 80045f2:	05c9      	lsls	r1, r1, #23
 80045f4:	1c18      	adds	r0, r3, #0
 80045f6:	f7fc fa85 	bl	8000b04 <__aeabi_fdiv>
 80045fa:	1c03      	adds	r3, r0, #0
 80045fc:	613b      	str	r3, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 80045fe:	218e      	movs	r1, #142	@ 0x8e
 8004600:	05c9      	lsls	r1, r1, #23
 8004602:	6938      	ldr	r0, [r7, #16]
 8004604:	f7fc fa7e 	bl	8000b04 <__aeabi_fdiv>
 8004608:	1c03      	adds	r3, r0, #0
 800460a:	21fe      	movs	r1, #254	@ 0xfe
 800460c:	0589      	lsls	r1, r1, #22
 800460e:	1c18      	adds	r0, r3, #0
 8004610:	f7fc f886 	bl	8000720 <__aeabi_fadd>
 8004614:	1c03      	adds	r3, r0, #0
 8004616:	1c1c      	adds	r4, r3, #0
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800461c:	0018      	movs	r0, r3
 800461e:	f7fd f86d 	bl	80016fc <__aeabi_ui2f>
 8004622:	1c03      	adds	r3, r0, #0
 8004624:	1c19      	adds	r1, r3, #0
 8004626:	1c20      	adds	r0, r4, #0
 8004628:	f7fc fc3a 	bl	8000ea0 <__aeabi_fmul>
 800462c:	1c03      	adds	r3, r0, #0
 800462e:	613b      	str	r3, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7fd f863 	bl	80016fc <__aeabi_ui2f>
 8004636:	1c03      	adds	r3, r0, #0
 8004638:	1c19      	adds	r1, r3, #0
 800463a:	2093      	movs	r0, #147	@ 0x93
 800463c:	05c0      	lsls	r0, r0, #23
 800463e:	f7fc fd89 	bl	8001154 <__aeabi_fsub>
 8004642:	1c03      	adds	r3, r0, #0
 8004644:	617b      	str	r3, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8004646:	6938      	ldr	r0, [r7, #16]
 8004648:	f7fc ffe8 	bl	800161c <__aeabi_f2iz>
 800464c:	1e03      	subs	r3, r0, #0
 800464e:	d100      	bne.n	8004652 <calc_pressure+0x16e>
 8004650:	e09c      	b.n	800478c <calc_pressure+0x2a8>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8004652:	218b      	movs	r1, #139	@ 0x8b
 8004654:	05c9      	lsls	r1, r1, #23
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7fc fa54 	bl	8000b04 <__aeabi_fdiv>
 800465c:	1c03      	adds	r3, r0, #0
 800465e:	1c19      	adds	r1, r3, #0
 8004660:	6978      	ldr	r0, [r7, #20]
 8004662:	f7fc fd77 	bl	8001154 <__aeabi_fsub>
 8004666:	1c03      	adds	r3, r0, #0
 8004668:	494d      	ldr	r1, [pc, #308]	@ (80047a0 <calc_pressure+0x2bc>)
 800466a:	1c18      	adds	r0, r3, #0
 800466c:	f7fc fc18 	bl	8000ea0 <__aeabi_fmul>
 8004670:	1c03      	adds	r3, r0, #0
 8004672:	6939      	ldr	r1, [r7, #16]
 8004674:	1c18      	adds	r0, r3, #0
 8004676:	f7fc fa45 	bl	8000b04 <__aeabi_fdiv>
 800467a:	1c03      	adds	r3, r0, #0
 800467c:	617b      	str	r3, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2232      	movs	r2, #50	@ 0x32
 8004682:	5e9b      	ldrsh	r3, [r3, r2]
 8004684:	0018      	movs	r0, r3
 8004686:	f7fc ffe9 	bl	800165c <__aeabi_i2f>
 800468a:	1c03      	adds	r3, r0, #0
 800468c:	6979      	ldr	r1, [r7, #20]
 800468e:	1c18      	adds	r0, r3, #0
 8004690:	f7fc fc06 	bl	8000ea0 <__aeabi_fmul>
 8004694:	1c03      	adds	r3, r0, #0
 8004696:	6979      	ldr	r1, [r7, #20]
 8004698:	1c18      	adds	r0, r3, #0
 800469a:	f7fc fc01 	bl	8000ea0 <__aeabi_fmul>
 800469e:	1c03      	adds	r3, r0, #0
 80046a0:	219e      	movs	r1, #158	@ 0x9e
 80046a2:	05c9      	lsls	r1, r1, #23
 80046a4:	1c18      	adds	r0, r3, #0
 80046a6:	f7fc fa2d 	bl	8000b04 <__aeabi_fdiv>
 80046aa:	1c03      	adds	r3, r0, #0
 80046ac:	613b      	str	r3, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2230      	movs	r2, #48	@ 0x30
 80046b2:	5e9b      	ldrsh	r3, [r3, r2]
 80046b4:	0018      	movs	r0, r3
 80046b6:	f7fc ffd1 	bl	800165c <__aeabi_i2f>
 80046ba:	1c03      	adds	r3, r0, #0
 80046bc:	218e      	movs	r1, #142	@ 0x8e
 80046be:	05c9      	lsls	r1, r1, #23
 80046c0:	1c18      	adds	r0, r3, #0
 80046c2:	f7fc fa1f 	bl	8000b04 <__aeabi_fdiv>
 80046c6:	1c03      	adds	r3, r0, #0
 80046c8:	1c19      	adds	r1, r3, #0
 80046ca:	6978      	ldr	r0, [r7, #20]
 80046cc:	f7fc fbe8 	bl	8000ea0 <__aeabi_fmul>
 80046d0:	1c03      	adds	r3, r0, #0
 80046d2:	60fb      	str	r3, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 80046d4:	2187      	movs	r1, #135	@ 0x87
 80046d6:	05c9      	lsls	r1, r1, #23
 80046d8:	6978      	ldr	r0, [r7, #20]
 80046da:	f7fc fa13 	bl	8000b04 <__aeabi_fdiv>
 80046de:	1c03      	adds	r3, r0, #0
 80046e0:	1c1c      	adds	r4, r3, #0
 80046e2:	2187      	movs	r1, #135	@ 0x87
 80046e4:	05c9      	lsls	r1, r1, #23
 80046e6:	6978      	ldr	r0, [r7, #20]
 80046e8:	f7fc fa0c 	bl	8000b04 <__aeabi_fdiv>
 80046ec:	1c03      	adds	r3, r0, #0
 80046ee:	1c19      	adds	r1, r3, #0
 80046f0:	1c20      	adds	r0, r4, #0
 80046f2:	f7fc fbd5 	bl	8000ea0 <__aeabi_fmul>
 80046f6:	1c03      	adds	r3, r0, #0
 80046f8:	1c1c      	adds	r4, r3, #0
 80046fa:	2187      	movs	r1, #135	@ 0x87
 80046fc:	05c9      	lsls	r1, r1, #23
 80046fe:	6978      	ldr	r0, [r7, #20]
 8004700:	f7fc fa00 	bl	8000b04 <__aeabi_fdiv>
 8004704:	1c03      	adds	r3, r0, #0
 8004706:	1c19      	adds	r1, r3, #0
 8004708:	1c20      	adds	r0, r4, #0
 800470a:	f7fc fbc9 	bl	8000ea0 <__aeabi_fmul>
 800470e:	1c03      	adds	r3, r0, #0
 8004710:	1c1c      	adds	r4, r3, #0
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2234      	movs	r2, #52	@ 0x34
 8004716:	5c9b      	ldrb	r3, [r3, r2]
 8004718:	0018      	movs	r0, r3
 800471a:	f7fc ff9f 	bl	800165c <__aeabi_i2f>
 800471e:	1c03      	adds	r3, r0, #0
 8004720:	2190      	movs	r1, #144	@ 0x90
 8004722:	05c9      	lsls	r1, r1, #23
 8004724:	1c18      	adds	r0, r3, #0
 8004726:	f7fc f9ed 	bl	8000b04 <__aeabi_fdiv>
 800472a:	1c03      	adds	r3, r0, #0
 800472c:	1c19      	adds	r1, r3, #0
 800472e:	1c20      	adds	r0, r4, #0
 8004730:	f7fc fbb6 	bl	8000ea0 <__aeabi_fmul>
 8004734:	1c03      	adds	r3, r0, #0
 8004736:	60bb      	str	r3, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8004738:	68f9      	ldr	r1, [r7, #12]
 800473a:	6938      	ldr	r0, [r7, #16]
 800473c:	f7fb fff0 	bl	8000720 <__aeabi_fadd>
 8004740:	1c03      	adds	r3, r0, #0
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	1c18      	adds	r0, r3, #0
 8004746:	f7fb ffeb 	bl	8000720 <__aeabi_fadd>
 800474a:	1c03      	adds	r3, r0, #0
 800474c:	1c1c      	adds	r4, r3, #0
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	222f      	movs	r2, #47	@ 0x2f
 8004752:	569b      	ldrsb	r3, [r3, r2]
 8004754:	0018      	movs	r0, r3
 8004756:	f7fc ff81 	bl	800165c <__aeabi_i2f>
 800475a:	1c03      	adds	r3, r0, #0
 800475c:	2186      	movs	r1, #134	@ 0x86
 800475e:	05c9      	lsls	r1, r1, #23
 8004760:	1c18      	adds	r0, r3, #0
 8004762:	f7fc fb9d 	bl	8000ea0 <__aeabi_fmul>
 8004766:	1c03      	adds	r3, r0, #0
 8004768:	1c19      	adds	r1, r3, #0
 800476a:	1c20      	adds	r0, r4, #0
 800476c:	f7fb ffd8 	bl	8000720 <__aeabi_fadd>
 8004770:	1c03      	adds	r3, r0, #0
 8004772:	2183      	movs	r1, #131	@ 0x83
 8004774:	05c9      	lsls	r1, r1, #23
 8004776:	1c18      	adds	r0, r3, #0
 8004778:	f7fc f9c4 	bl	8000b04 <__aeabi_fdiv>
 800477c:	1c03      	adds	r3, r0, #0
 800477e:	1c19      	adds	r1, r3, #0
 8004780:	6978      	ldr	r0, [r7, #20]
 8004782:	f7fb ffcd 	bl	8000720 <__aeabi_fadd>
 8004786:	1c03      	adds	r3, r0, #0
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	e001      	b.n	8004790 <calc_pressure+0x2ac>
    }
    else
    {
        calc_pres = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8004790:	697b      	ldr	r3, [r7, #20]
}
 8004792:	1c18      	adds	r0, r3, #0
 8004794:	46bd      	mov	sp, r7
 8004796:	b007      	add	sp, #28
 8004798:	bd90      	pop	{r4, r7, pc}
 800479a:	46c0      	nop			@ (mov r8, r8)
 800479c:	477a0000 	.word	0x477a0000
 80047a0:	45c35000 	.word	0x45c35000

080047a4 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 80047a4:	b5b0      	push	{r4, r5, r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	0002      	movs	r2, r0
 80047ac:	6039      	str	r1, [r7, #0]
 80047ae:	1dbb      	adds	r3, r7, #6
 80047b0:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b6:	4967      	ldr	r1, [pc, #412]	@ (8004954 <calc_humidity+0x1b0>)
 80047b8:	1c18      	adds	r0, r3, #0
 80047ba:	f7fc f9a3 	bl	8000b04 <__aeabi_fdiv>
 80047be:	1c03      	adds	r3, r0, #0
 80047c0:	61bb      	str	r3, [r7, #24]
    var1 = (float)((float)hum_adc) -
 80047c2:	1dbb      	adds	r3, r7, #6
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	0018      	movs	r0, r3
 80047c8:	f7fc ff98 	bl	80016fc <__aeabi_ui2f>
 80047cc:	1c04      	adds	r4, r0, #0
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	8a1b      	ldrh	r3, [r3, #16]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f7fc ff92 	bl	80016fc <__aeabi_ui2f>
 80047d8:	1c03      	adds	r3, r0, #0
 80047da:	2183      	movs	r1, #131	@ 0x83
 80047dc:	05c9      	lsls	r1, r1, #23
 80047de:	1c18      	adds	r0, r3, #0
 80047e0:	f7fc fb5e 	bl	8000ea0 <__aeabi_fmul>
 80047e4:	1c03      	adds	r3, r0, #0
 80047e6:	1c1d      	adds	r5, r3, #0
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	7d1b      	ldrb	r3, [r3, #20]
 80047ec:	b25b      	sxtb	r3, r3
 80047ee:	0018      	movs	r0, r3
 80047f0:	f7fc ff34 	bl	800165c <__aeabi_i2f>
 80047f4:	1c03      	adds	r3, r0, #0
 80047f6:	2180      	movs	r1, #128	@ 0x80
 80047f8:	05c9      	lsls	r1, r1, #23
 80047fa:	1c18      	adds	r0, r3, #0
 80047fc:	f7fc f982 	bl	8000b04 <__aeabi_fdiv>
 8004800:	1c03      	adds	r3, r0, #0
 8004802:	69b9      	ldr	r1, [r7, #24]
 8004804:	1c18      	adds	r0, r3, #0
 8004806:	f7fc fb4b 	bl	8000ea0 <__aeabi_fmul>
 800480a:	1c03      	adds	r3, r0, #0
 800480c:	1c19      	adds	r1, r3, #0
 800480e:	1c28      	adds	r0, r5, #0
 8004810:	f7fb ff86 	bl	8000720 <__aeabi_fadd>
 8004814:	1c03      	adds	r3, r0, #0
    var1 = (float)((float)hum_adc) -
 8004816:	1c19      	adds	r1, r3, #0
 8004818:	1c20      	adds	r0, r4, #0
 800481a:	f7fc fc9b 	bl	8001154 <__aeabi_fsub>
 800481e:	1c03      	adds	r3, r0, #0
 8004820:	617b      	str	r3, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	8a5b      	ldrh	r3, [r3, #18]
 8004826:	0018      	movs	r0, r3
 8004828:	f7fc ff68 	bl	80016fc <__aeabi_ui2f>
 800482c:	1c03      	adds	r3, r0, #0
 800482e:	2191      	movs	r1, #145	@ 0x91
 8004830:	05c9      	lsls	r1, r1, #23
 8004832:	1c18      	adds	r0, r3, #0
 8004834:	f7fc f966 	bl	8000b04 <__aeabi_fdiv>
 8004838:	1c03      	adds	r3, r0, #0
 800483a:	1c1c      	adds	r4, r3, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	7d5b      	ldrb	r3, [r3, #21]
 8004840:	b25b      	sxtb	r3, r3
 8004842:	0018      	movs	r0, r3
 8004844:	f7fc ff0a 	bl	800165c <__aeabi_i2f>
 8004848:	1c03      	adds	r3, r0, #0
 800484a:	218d      	movs	r1, #141	@ 0x8d
 800484c:	05c9      	lsls	r1, r1, #23
 800484e:	1c18      	adds	r0, r3, #0
 8004850:	f7fc f958 	bl	8000b04 <__aeabi_fdiv>
 8004854:	1c03      	adds	r3, r0, #0
 8004856:	69b9      	ldr	r1, [r7, #24]
 8004858:	1c18      	adds	r0, r3, #0
 800485a:	f7fc fb21 	bl	8000ea0 <__aeabi_fmul>
 800485e:	1c03      	adds	r3, r0, #0
 8004860:	21fe      	movs	r1, #254	@ 0xfe
 8004862:	0589      	lsls	r1, r1, #22
 8004864:	1c18      	adds	r0, r3, #0
 8004866:	f7fb ff5b 	bl	8000720 <__aeabi_fadd>
 800486a:	1c03      	adds	r3, r0, #0
 800486c:	1c1d      	adds	r5, r3, #0
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	7d9b      	ldrb	r3, [r3, #22]
 8004872:	b25b      	sxtb	r3, r3
 8004874:	0018      	movs	r0, r3
 8004876:	f7fc fef1 	bl	800165c <__aeabi_i2f>
 800487a:	1c03      	adds	r3, r0, #0
 800487c:	2193      	movs	r1, #147	@ 0x93
 800487e:	05c9      	lsls	r1, r1, #23
 8004880:	1c18      	adds	r0, r3, #0
 8004882:	f7fc f93f 	bl	8000b04 <__aeabi_fdiv>
 8004886:	1c03      	adds	r3, r0, #0
 8004888:	69b9      	ldr	r1, [r7, #24]
 800488a:	1c18      	adds	r0, r3, #0
 800488c:	f7fc fb08 	bl	8000ea0 <__aeabi_fmul>
 8004890:	1c03      	adds	r3, r0, #0
 8004892:	69b9      	ldr	r1, [r7, #24]
 8004894:	1c18      	adds	r0, r3, #0
 8004896:	f7fc fb03 	bl	8000ea0 <__aeabi_fmul>
 800489a:	1c03      	adds	r3, r0, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 800489c:	1c19      	adds	r1, r3, #0
 800489e:	1c28      	adds	r0, r5, #0
 80048a0:	f7fb ff3e 	bl	8000720 <__aeabi_fadd>
 80048a4:	1c03      	adds	r3, r0, #0
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 80048a6:	1c19      	adds	r1, r3, #0
 80048a8:	1c20      	adds	r0, r4, #0
 80048aa:	f7fc faf9 	bl	8000ea0 <__aeabi_fmul>
 80048ae:	1c03      	adds	r3, r0, #0
    var2 = var1 *
 80048b0:	1c19      	adds	r1, r3, #0
 80048b2:	6978      	ldr	r0, [r7, #20]
 80048b4:	f7fc faf4 	bl	8000ea0 <__aeabi_fmul>
 80048b8:	1c03      	adds	r3, r0, #0
 80048ba:	613b      	str	r3, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	7ddb      	ldrb	r3, [r3, #23]
 80048c0:	0018      	movs	r0, r3
 80048c2:	f7fc ff1b 	bl	80016fc <__aeabi_ui2f>
 80048c6:	1c03      	adds	r3, r0, #0
 80048c8:	218d      	movs	r1, #141	@ 0x8d
 80048ca:	05c9      	lsls	r1, r1, #23
 80048cc:	1c18      	adds	r0, r3, #0
 80048ce:	f7fc f919 	bl	8000b04 <__aeabi_fdiv>
 80048d2:	1c03      	adds	r3, r0, #0
 80048d4:	60fb      	str	r3, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	7e1b      	ldrb	r3, [r3, #24]
 80048da:	b25b      	sxtb	r3, r3
 80048dc:	0018      	movs	r0, r3
 80048de:	f7fc febd 	bl	800165c <__aeabi_i2f>
 80048e2:	1c03      	adds	r3, r0, #0
 80048e4:	2194      	movs	r1, #148	@ 0x94
 80048e6:	05c9      	lsls	r1, r1, #23
 80048e8:	1c18      	adds	r0, r3, #0
 80048ea:	f7fc f90b 	bl	8000b04 <__aeabi_fdiv>
 80048ee:	1c03      	adds	r3, r0, #0
 80048f0:	60bb      	str	r3, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 80048f2:	69b9      	ldr	r1, [r7, #24]
 80048f4:	68b8      	ldr	r0, [r7, #8]
 80048f6:	f7fc fad3 	bl	8000ea0 <__aeabi_fmul>
 80048fa:	1c03      	adds	r3, r0, #0
 80048fc:	68f9      	ldr	r1, [r7, #12]
 80048fe:	1c18      	adds	r0, r3, #0
 8004900:	f7fb ff0e 	bl	8000720 <__aeabi_fadd>
 8004904:	1c03      	adds	r3, r0, #0
 8004906:	6939      	ldr	r1, [r7, #16]
 8004908:	1c18      	adds	r0, r3, #0
 800490a:	f7fc fac9 	bl	8000ea0 <__aeabi_fmul>
 800490e:	1c03      	adds	r3, r0, #0
 8004910:	6939      	ldr	r1, [r7, #16]
 8004912:	1c18      	adds	r0, r3, #0
 8004914:	f7fc fac4 	bl	8000ea0 <__aeabi_fmul>
 8004918:	1c03      	adds	r3, r0, #0
 800491a:	1c19      	adds	r1, r3, #0
 800491c:	6938      	ldr	r0, [r7, #16]
 800491e:	f7fb feff 	bl	8000720 <__aeabi_fadd>
 8004922:	1c03      	adds	r3, r0, #0
 8004924:	61fb      	str	r3, [r7, #28]
    if (calc_hum > 100.0f)
 8004926:	490c      	ldr	r1, [pc, #48]	@ (8004958 <calc_humidity+0x1b4>)
 8004928:	69f8      	ldr	r0, [r7, #28]
 800492a:	f7fb fde1 	bl	80004f0 <__aeabi_fcmpgt>
 800492e:	1e03      	subs	r3, r0, #0
 8004930:	d002      	beq.n	8004938 <calc_humidity+0x194>
    {
        calc_hum = 100.0f;
 8004932:	4b09      	ldr	r3, [pc, #36]	@ (8004958 <calc_humidity+0x1b4>)
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	e007      	b.n	8004948 <calc_humidity+0x1a4>
    }
    else if (calc_hum < 0.0f)
 8004938:	2100      	movs	r1, #0
 800493a:	69f8      	ldr	r0, [r7, #28]
 800493c:	f7fb fdc4 	bl	80004c8 <__aeabi_fcmplt>
 8004940:	1e03      	subs	r3, r0, #0
 8004942:	d001      	beq.n	8004948 <calc_humidity+0x1a4>
    {
        calc_hum = 0.0f;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8004948:	69fb      	ldr	r3, [r7, #28]
}
 800494a:	1c18      	adds	r0, r3, #0
 800494c:	46bd      	mov	sp, r7
 800494e:	b008      	add	sp, #32
 8004950:	bdb0      	pop	{r4, r5, r7, pc}
 8004952:	46c0      	nop			@ (mov r8, r8)
 8004954:	45a00000 	.word	0x45a00000
 8004958:	42c80000 	.word	0x42c80000

0800495c <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 800495c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800495e:	b0a9      	sub	sp, #164	@ 0xa4
 8004960:	af00      	add	r7, sp, #0
 8004962:	603a      	str	r2, [r7, #0]
 8004964:	1dbb      	adds	r3, r7, #6
 8004966:	1c02      	adds	r2, r0, #0
 8004968:	801a      	strh	r2, [r3, #0]
 800496a:	1d7b      	adds	r3, r7, #5
 800496c:	1c0a      	adds	r2, r1, #0
 800496e:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8004970:	1dbb      	adds	r3, r7, #6
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	0018      	movs	r0, r3
 8004976:	f7fc fec1 	bl	80016fc <__aeabi_ui2f>
 800497a:	1c03      	adds	r3, r0, #0
 800497c:	259c      	movs	r5, #156	@ 0x9c
 800497e:	197a      	adds	r2, r7, r5
 8004980:	6013      	str	r3, [r2, #0]
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8004982:	1d7b      	adds	r3, r7, #5
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	2201      	movs	r2, #1
 8004988:	409a      	lsls	r2, r3
 800498a:	0013      	movs	r3, r2
 800498c:	0018      	movs	r0, r3
 800498e:	f7fc feb5 	bl	80016fc <__aeabi_ui2f>
 8004992:	1c03      	adds	r3, r0, #0
 8004994:	2498      	movs	r4, #152	@ 0x98
 8004996:	193a      	adds	r2, r7, r4
 8004998:	6013      	str	r3, [r2, #0]
    const float lookup_k1_range[16] = {
 800499a:	2648      	movs	r6, #72	@ 0x48
 800499c:	19ba      	adds	r2, r7, r6
 800499e:	4b43      	ldr	r3, [pc, #268]	@ (8004aac <calc_gas_resistance_low+0x150>)
 80049a0:	0010      	movs	r0, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	2340      	movs	r3, #64	@ 0x40
 80049a6:	001a      	movs	r2, r3
 80049a8:	f005 fd6b 	bl	800a482 <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 80049ac:	2308      	movs	r3, #8
 80049ae:	18fa      	adds	r2, r7, r3
 80049b0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ab0 <calc_gas_resistance_low+0x154>)
 80049b2:	0010      	movs	r0, r2
 80049b4:	0019      	movs	r1, r3
 80049b6:	2340      	movs	r3, #64	@ 0x40
 80049b8:	001a      	movs	r2, r3
 80049ba:	f005 fd62 	bl	800a482 <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	223e      	movs	r2, #62	@ 0x3e
 80049c2:	569b      	ldrsb	r3, [r3, r2]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f7fc fe49 	bl	800165c <__aeabi_i2f>
 80049ca:	1c03      	adds	r3, r0, #0
 80049cc:	4939      	ldr	r1, [pc, #228]	@ (8004ab4 <calc_gas_resistance_low+0x158>)
 80049ce:	1c18      	adds	r0, r3, #0
 80049d0:	f7fc fa66 	bl	8000ea0 <__aeabi_fmul>
 80049d4:	1c03      	adds	r3, r0, #0
 80049d6:	4938      	ldr	r1, [pc, #224]	@ (8004ab8 <calc_gas_resistance_low+0x15c>)
 80049d8:	1c18      	adds	r0, r3, #0
 80049da:	f7fb fea1 	bl	8000720 <__aeabi_fadd>
 80049de:	1c03      	adds	r3, r0, #0
 80049e0:	2294      	movs	r2, #148	@ 0x94
 80049e2:	18b9      	adds	r1, r7, r2
 80049e4:	600b      	str	r3, [r1, #0]
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 80049e6:	1d7b      	adds	r3, r7, #5
 80049e8:	781a      	ldrb	r2, [r3, #0]
 80049ea:	19bb      	adds	r3, r7, r6
 80049ec:	0092      	lsls	r2, r2, #2
 80049ee:	58d3      	ldr	r3, [r2, r3]
 80049f0:	4932      	ldr	r1, [pc, #200]	@ (8004abc <calc_gas_resistance_low+0x160>)
 80049f2:	1c18      	adds	r0, r3, #0
 80049f4:	f7fc f886 	bl	8000b04 <__aeabi_fdiv>
 80049f8:	1c03      	adds	r3, r0, #0
 80049fa:	21fe      	movs	r1, #254	@ 0xfe
 80049fc:	0589      	lsls	r1, r1, #22
 80049fe:	1c18      	adds	r0, r3, #0
 8004a00:	f7fb fe8e 	bl	8000720 <__aeabi_fadd>
 8004a04:	1c03      	adds	r3, r0, #0
 8004a06:	1c19      	adds	r1, r3, #0
 8004a08:	2294      	movs	r2, #148	@ 0x94
 8004a0a:	18ba      	adds	r2, r7, r2
 8004a0c:	6810      	ldr	r0, [r2, #0]
 8004a0e:	f7fc fa47 	bl	8000ea0 <__aeabi_fmul>
 8004a12:	1c03      	adds	r3, r0, #0
 8004a14:	2690      	movs	r6, #144	@ 0x90
 8004a16:	19ba      	adds	r2, r7, r6
 8004a18:	6013      	str	r3, [r2, #0]
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8004a1a:	1d7b      	adds	r3, r7, #5
 8004a1c:	781a      	ldrb	r2, [r3, #0]
 8004a1e:	2308      	movs	r3, #8
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	0092      	lsls	r2, r2, #2
 8004a24:	58d3      	ldr	r3, [r2, r3]
 8004a26:	4925      	ldr	r1, [pc, #148]	@ (8004abc <calc_gas_resistance_low+0x160>)
 8004a28:	1c18      	adds	r0, r3, #0
 8004a2a:	f7fc f86b 	bl	8000b04 <__aeabi_fdiv>
 8004a2e:	1c03      	adds	r3, r0, #0
 8004a30:	21fe      	movs	r1, #254	@ 0xfe
 8004a32:	0589      	lsls	r1, r1, #22
 8004a34:	1c18      	adds	r0, r3, #0
 8004a36:	f7fb fe73 	bl	8000720 <__aeabi_fadd>
 8004a3a:	1c03      	adds	r3, r0, #0
 8004a3c:	228c      	movs	r2, #140	@ 0x8c
 8004a3e:	18b9      	adds	r1, r7, r2
 8004a40:	600b      	str	r3, [r1, #0]
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8004a42:	491f      	ldr	r1, [pc, #124]	@ (8004ac0 <calc_gas_resistance_low+0x164>)
 8004a44:	18bb      	adds	r3, r7, r2
 8004a46:	6818      	ldr	r0, [r3, #0]
 8004a48:	f7fc fa2a 	bl	8000ea0 <__aeabi_fmul>
 8004a4c:	1c03      	adds	r3, r0, #0
 8004a4e:	193a      	adds	r2, r7, r4
 8004a50:	6811      	ldr	r1, [r2, #0]
 8004a52:	1c18      	adds	r0, r3, #0
 8004a54:	f7fc fa24 	bl	8000ea0 <__aeabi_fmul>
 8004a58:	1c03      	adds	r3, r0, #0
 8004a5a:	1c1c      	adds	r4, r3, #0
 8004a5c:	2188      	movs	r1, #136	@ 0x88
 8004a5e:	05c9      	lsls	r1, r1, #23
 8004a60:	197b      	adds	r3, r7, r5
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	f7fc fb76 	bl	8001154 <__aeabi_fsub>
 8004a68:	1c03      	adds	r3, r0, #0
 8004a6a:	19ba      	adds	r2, r7, r6
 8004a6c:	6811      	ldr	r1, [r2, #0]
 8004a6e:	1c18      	adds	r0, r3, #0
 8004a70:	f7fc f848 	bl	8000b04 <__aeabi_fdiv>
 8004a74:	1c03      	adds	r3, r0, #0
 8004a76:	21fe      	movs	r1, #254	@ 0xfe
 8004a78:	0589      	lsls	r1, r1, #22
 8004a7a:	1c18      	adds	r0, r3, #0
 8004a7c:	f7fb fe50 	bl	8000720 <__aeabi_fadd>
 8004a80:	1c03      	adds	r3, r0, #0
 8004a82:	1c19      	adds	r1, r3, #0
 8004a84:	1c20      	adds	r0, r4, #0
 8004a86:	f7fc fa0b 	bl	8000ea0 <__aeabi_fmul>
 8004a8a:	1c03      	adds	r3, r0, #0
 8004a8c:	1c19      	adds	r1, r3, #0
 8004a8e:	20fe      	movs	r0, #254	@ 0xfe
 8004a90:	0580      	lsls	r0, r0, #22
 8004a92:	f7fc f837 	bl	8000b04 <__aeabi_fdiv>
 8004a96:	1c03      	adds	r3, r0, #0
 8004a98:	2288      	movs	r2, #136	@ 0x88
 8004a9a:	18b9      	adds	r1, r7, r2
 8004a9c:	600b      	str	r3, [r1, #0]

    return calc_gas_res;
 8004a9e:	18bb      	adds	r3, r7, r2
 8004aa0:	681b      	ldr	r3, [r3, #0]
}
 8004aa2:	1c18      	adds	r0, r3, #0
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	b029      	add	sp, #164	@ 0xa4
 8004aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aaa:	46c0      	nop			@ (mov r8, r8)
 8004aac:	0800c778 	.word	0x0800c778
 8004ab0:	0800c7b8 	.word	0x0800c7b8
 8004ab4:	40a00000 	.word	0x40a00000
 8004ab8:	44a78000 	.word	0x44a78000
 8004abc:	42c80000 	.word	0x42c80000
 8004ac0:	340637bd 	.word	0x340637bd

08004ac4 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	0002      	movs	r2, r0
 8004acc:	1dbb      	adds	r3, r7, #6
 8004ace:	801a      	strh	r2, [r3, #0]
 8004ad0:	1d7b      	adds	r3, r7, #5
 8004ad2:	1c0a      	adds	r2, r1, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8004ad6:	1d7b      	adds	r3, r7, #5
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2280      	movs	r2, #128	@ 0x80
 8004adc:	02d2      	lsls	r2, r2, #11
 8004ade:	40da      	lsrs	r2, r3
 8004ae0:	0013      	movs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8004ae4:	1dbb      	adds	r3, r7, #6
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	4a13      	ldr	r2, [pc, #76]	@ (8004b38 <calc_gas_resistance_high+0x74>)
 8004aea:	4694      	mov	ip, r2
 8004aec:	4463      	add	r3, ip
 8004aee:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	0013      	movs	r3, r2
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	2280      	movs	r2, #128	@ 0x80
 8004afe:	0152      	lsls	r2, r2, #5
 8004b00:	4694      	mov	ip, r2
 8004b02:	4463      	add	r3, ip
 8004b04:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8004b06:	6978      	ldr	r0, [r7, #20]
 8004b08:	f7fc fdf8 	bl	80016fc <__aeabi_ui2f>
 8004b0c:	1c03      	adds	r3, r0, #0
 8004b0e:	490b      	ldr	r1, [pc, #44]	@ (8004b3c <calc_gas_resistance_high+0x78>)
 8004b10:	1c18      	adds	r0, r3, #0
 8004b12:	f7fc f9c5 	bl	8000ea0 <__aeabi_fmul>
 8004b16:	1c03      	adds	r3, r0, #0
 8004b18:	1c1c      	adds	r4, r3, #0
 8004b1a:	6938      	ldr	r0, [r7, #16]
 8004b1c:	f7fc fd9e 	bl	800165c <__aeabi_i2f>
 8004b20:	1c03      	adds	r3, r0, #0
 8004b22:	1c19      	adds	r1, r3, #0
 8004b24:	1c20      	adds	r0, r4, #0
 8004b26:	f7fb ffed 	bl	8000b04 <__aeabi_fdiv>
 8004b2a:	1c03      	adds	r3, r0, #0
 8004b2c:	60fb      	str	r3, [r7, #12]

    return calc_gas_res;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
}
 8004b30:	1c18      	adds	r0, r3, #0
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b007      	add	sp, #28
 8004b36:	bd90      	pop	{r4, r7, pc}
 8004b38:	fffffe00 	.word	0xfffffe00
 8004b3c:	49742400 	.word	0x49742400

08004b40 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8004b40:	b5b0      	push	{r4, r5, r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	0002      	movs	r2, r0
 8004b48:	6039      	str	r1, [r7, #0]
 8004b4a:	1dbb      	adds	r3, r7, #6
 8004b4c:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8004b4e:	1dbb      	adds	r3, r7, #6
 8004b50:	881a      	ldrh	r2, [r3, #0]
 8004b52:	23c8      	movs	r3, #200	@ 0xc8
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d903      	bls.n	8004b62 <calc_res_heat+0x22>
    {
        temp = 400;
 8004b5a:	1dbb      	adds	r3, r7, #6
 8004b5c:	22c8      	movs	r2, #200	@ 0xc8
 8004b5e:	0052      	lsls	r2, r2, #1
 8004b60:	801a      	strh	r2, [r3, #0]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	7e5b      	ldrb	r3, [r3, #25]
 8004b66:	b25b      	sxtb	r3, r3
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f7fc fd77 	bl	800165c <__aeabi_i2f>
 8004b6e:	1c03      	adds	r3, r0, #0
 8004b70:	2183      	movs	r1, #131	@ 0x83
 8004b72:	05c9      	lsls	r1, r1, #23
 8004b74:	1c18      	adds	r0, r3, #0
 8004b76:	f7fb ffc5 	bl	8000b04 <__aeabi_fdiv>
 8004b7a:	1c03      	adds	r3, r0, #0
 8004b7c:	4950      	ldr	r1, [pc, #320]	@ (8004cc0 <calc_res_heat+0x180>)
 8004b7e:	1c18      	adds	r0, r3, #0
 8004b80:	f7fb fdce 	bl	8000720 <__aeabi_fadd>
 8004b84:	1c03      	adds	r3, r0, #0
 8004b86:	61fb      	str	r3, [r7, #28]
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	221a      	movs	r2, #26
 8004b8c:	5e9b      	ldrsh	r3, [r3, r2]
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f7fc fd64 	bl	800165c <__aeabi_i2f>
 8004b94:	1c03      	adds	r3, r0, #0
 8004b96:	218e      	movs	r1, #142	@ 0x8e
 8004b98:	05c9      	lsls	r1, r1, #23
 8004b9a:	1c18      	adds	r0, r3, #0
 8004b9c:	f7fb ffb2 	bl	8000b04 <__aeabi_fdiv>
 8004ba0:	1c03      	adds	r3, r0, #0
 8004ba2:	4948      	ldr	r1, [pc, #288]	@ (8004cc4 <calc_res_heat+0x184>)
 8004ba4:	1c18      	adds	r0, r3, #0
 8004ba6:	f7fc f97b 	bl	8000ea0 <__aeabi_fmul>
 8004baa:	1c03      	adds	r3, r0, #0
 8004bac:	4946      	ldr	r1, [pc, #280]	@ (8004cc8 <calc_res_heat+0x188>)
 8004bae:	1c18      	adds	r0, r3, #0
 8004bb0:	f7fb fdb6 	bl	8000720 <__aeabi_fadd>
 8004bb4:	1c03      	adds	r3, r0, #0
 8004bb6:	61bb      	str	r3, [r7, #24]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	7f1b      	ldrb	r3, [r3, #28]
 8004bbc:	b25b      	sxtb	r3, r3
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f7fc fd4c 	bl	800165c <__aeabi_i2f>
 8004bc4:	1c03      	adds	r3, r0, #0
 8004bc6:	2189      	movs	r1, #137	@ 0x89
 8004bc8:	05c9      	lsls	r1, r1, #23
 8004bca:	1c18      	adds	r0, r3, #0
 8004bcc:	f7fb ff9a 	bl	8000b04 <__aeabi_fdiv>
 8004bd0:	1c03      	adds	r3, r0, #0
 8004bd2:	617b      	str	r3, [r7, #20]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8004bd4:	1dbb      	adds	r3, r7, #6
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f7fc fd8f 	bl	80016fc <__aeabi_ui2f>
 8004bde:	1c03      	adds	r3, r0, #0
 8004be0:	69b9      	ldr	r1, [r7, #24]
 8004be2:	1c18      	adds	r0, r3, #0
 8004be4:	f7fc f95c 	bl	8000ea0 <__aeabi_fmul>
 8004be8:	1c03      	adds	r3, r0, #0
 8004bea:	21fe      	movs	r1, #254	@ 0xfe
 8004bec:	0589      	lsls	r1, r1, #22
 8004bee:	1c18      	adds	r0, r3, #0
 8004bf0:	f7fb fd96 	bl	8000720 <__aeabi_fadd>
 8004bf4:	1c03      	adds	r3, r0, #0
 8004bf6:	1c19      	adds	r1, r3, #0
 8004bf8:	69f8      	ldr	r0, [r7, #28]
 8004bfa:	f7fc f951 	bl	8000ea0 <__aeabi_fmul>
 8004bfe:	1c03      	adds	r3, r0, #0
 8004c00:	613b      	str	r3, [r7, #16]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	7b9b      	ldrb	r3, [r3, #14]
 8004c06:	b25b      	sxtb	r3, r3
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f7fc fd27 	bl	800165c <__aeabi_i2f>
 8004c0e:	1c03      	adds	r3, r0, #0
 8004c10:	6979      	ldr	r1, [r7, #20]
 8004c12:	1c18      	adds	r0, r3, #0
 8004c14:	f7fc f944 	bl	8000ea0 <__aeabi_fmul>
 8004c18:	1c03      	adds	r3, r0, #0
 8004c1a:	1c19      	adds	r1, r3, #0
 8004c1c:	6938      	ldr	r0, [r7, #16]
 8004c1e:	f7fb fd7f 	bl	8000720 <__aeabi_fadd>
 8004c22:	1c03      	adds	r3, r0, #0
 8004c24:	60fb      	str	r3, [r7, #12]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	223c      	movs	r2, #60	@ 0x3c
 8004c2a:	5c9b      	ldrb	r3, [r3, r2]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fc fd65 	bl	80016fc <__aeabi_ui2f>
 8004c32:	1c03      	adds	r3, r0, #0
 8004c34:	2181      	movs	r1, #129	@ 0x81
 8004c36:	05c9      	lsls	r1, r1, #23
 8004c38:	1c18      	adds	r0, r3, #0
 8004c3a:	f7fb fd71 	bl	8000720 <__aeabi_fadd>
 8004c3e:	1c03      	adds	r3, r0, #0
 8004c40:	1c19      	adds	r1, r3, #0
 8004c42:	2081      	movs	r0, #129	@ 0x81
 8004c44:	05c0      	lsls	r0, r0, #23
 8004c46:	f7fb ff5d 	bl	8000b04 <__aeabi_fdiv>
 8004c4a:	1c03      	adds	r3, r0, #0
 8004c4c:	68f9      	ldr	r1, [r7, #12]
 8004c4e:	1c18      	adds	r0, r3, #0
 8004c50:	f7fc f926 	bl	8000ea0 <__aeabi_fmul>
 8004c54:	1c03      	adds	r3, r0, #0
 8004c56:	1c1c      	adds	r4, r3, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	223d      	movs	r2, #61	@ 0x3d
 8004c5c:	569b      	ldrsb	r3, [r3, r2]
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7fc fcfc 	bl	800165c <__aeabi_i2f>
 8004c64:	1c03      	adds	r3, r0, #0
 8004c66:	4919      	ldr	r1, [pc, #100]	@ (8004ccc <calc_res_heat+0x18c>)
 8004c68:	1c18      	adds	r0, r3, #0
 8004c6a:	f7fc f919 	bl	8000ea0 <__aeabi_fmul>
 8004c6e:	1c03      	adds	r3, r0, #0
 8004c70:	21fe      	movs	r1, #254	@ 0xfe
 8004c72:	0589      	lsls	r1, r1, #22
 8004c74:	1c18      	adds	r0, r3, #0
 8004c76:	f7fb fd53 	bl	8000720 <__aeabi_fadd>
 8004c7a:	1c03      	adds	r3, r0, #0
 8004c7c:	1c19      	adds	r1, r3, #0
 8004c7e:	20fe      	movs	r0, #254	@ 0xfe
 8004c80:	0580      	lsls	r0, r0, #22
 8004c82:	f7fb ff3f 	bl	8000b04 <__aeabi_fdiv>
 8004c86:	1c03      	adds	r3, r0, #0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8004c88:	1c19      	adds	r1, r3, #0
 8004c8a:	1c20      	adds	r0, r4, #0
 8004c8c:	f7fc f908 	bl	8000ea0 <__aeabi_fmul>
 8004c90:	1c03      	adds	r3, r0, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8004c92:	490f      	ldr	r1, [pc, #60]	@ (8004cd0 <calc_res_heat+0x190>)
 8004c94:	1c18      	adds	r0, r3, #0
 8004c96:	f7fc fa5d 	bl	8001154 <__aeabi_fsub>
 8004c9a:	1c03      	adds	r3, r0, #0
        (uint8_t)(3.4f *
 8004c9c:	490d      	ldr	r1, [pc, #52]	@ (8004cd4 <calc_res_heat+0x194>)
 8004c9e:	1c18      	adds	r0, r3, #0
 8004ca0:	f7fc f8fe 	bl	8000ea0 <__aeabi_fmul>
 8004ca4:	1c03      	adds	r3, r0, #0
    res_heat =
 8004ca6:	250b      	movs	r5, #11
 8004ca8:	197c      	adds	r4, r7, r5
 8004caa:	1c18      	adds	r0, r3, #0
 8004cac:	f7fb fc54 	bl	8000558 <__aeabi_f2uiz>
 8004cb0:	0003      	movs	r3, r0
 8004cb2:	7023      	strb	r3, [r4, #0]
                   25));

    return res_heat;
 8004cb4:	197b      	adds	r3, r7, r5
 8004cb6:	781b      	ldrb	r3, [r3, #0]
}
 8004cb8:	0018      	movs	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	b008      	add	sp, #32
 8004cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8004cc0:	42440000 	.word	0x42440000
 8004cc4:	3a03126f 	.word	0x3a03126f
 8004cc8:	3b1a0275 	.word	0x3b1a0275
 8004ccc:	3b03126f 	.word	0x3b03126f
 8004cd0:	41c80000 	.word	0x41c80000
 8004cd4:	4059999a 	.word	0x4059999a

08004cd8 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	0002      	movs	r2, r0
 8004ce0:	1dbb      	adds	r3, r7, #6
 8004ce2:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 8004ce4:	230f      	movs	r3, #15
 8004ce6:	18fb      	adds	r3, r7, r3
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
    uint8_t durval;

    if (dur >= 0xfc0)
 8004cec:	1dbb      	adds	r3, r7, #6
 8004cee:	881a      	ldrh	r2, [r3, #0]
 8004cf0:	23fc      	movs	r3, #252	@ 0xfc
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d30f      	bcc.n	8004d18 <calc_gas_wait+0x40>
    {
        durval = 0xff; /* Max duration*/
 8004cf8:	230e      	movs	r3, #14
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	22ff      	movs	r2, #255	@ 0xff
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	e01a      	b.n	8004d38 <calc_gas_wait+0x60>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8004d02:	1dbb      	adds	r3, r7, #6
 8004d04:	1dba      	adds	r2, r7, #6
 8004d06:	8812      	ldrh	r2, [r2, #0]
 8004d08:	0892      	lsrs	r2, r2, #2
 8004d0a:	801a      	strh	r2, [r3, #0]
            factor += 1;
 8004d0c:	220f      	movs	r2, #15
 8004d0e:	18bb      	adds	r3, r7, r2
 8004d10:	18ba      	adds	r2, r7, r2
 8004d12:	7812      	ldrb	r2, [r2, #0]
 8004d14:	3201      	adds	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8004d18:	1dbb      	adds	r3, r7, #6
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d1e:	d8f0      	bhi.n	8004d02 <calc_gas_wait+0x2a>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8004d20:	1dbb      	adds	r3, r7, #6
 8004d22:	881b      	ldrh	r3, [r3, #0]
 8004d24:	b2d9      	uxtb	r1, r3
 8004d26:	230f      	movs	r3, #15
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	019b      	lsls	r3, r3, #6
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	230e      	movs	r3, #14
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	188a      	adds	r2, r1, r2
 8004d36:	701a      	strb	r2, [r3, #0]
    }

    return durval;
 8004d38:	230e      	movs	r3, #14
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	781b      	ldrb	r3, [r3, #0]
}
 8004d3e:	0018      	movs	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b004      	add	sp, #16
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8004d48:	b5b0      	push	{r4, r5, r7, lr}
 8004d4a:	b08e      	sub	sp, #56	@ 0x38
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	230f      	movs	r3, #15
 8004d54:	18fb      	adds	r3, r7, r3
 8004d56:	1c02      	adds	r2, r0, #0
 8004d58:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 8004d5a:	2337      	movs	r3, #55	@ 0x37
 8004d5c:	18fb      	adds	r3, r7, r3
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8004d62:	2310      	movs	r3, #16
 8004d64:	18fb      	adds	r3, r7, r3
 8004d66:	0018      	movs	r0, r3
 8004d68:	2311      	movs	r3, #17
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	f005 fb43 	bl	800a3f8 <memset>
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8004d72:	2336      	movs	r3, #54	@ 0x36
 8004d74:	18fb      	adds	r3, r7, r3
 8004d76:	2205      	movs	r2, #5
 8004d78:	701a      	strb	r2, [r3, #0]

    while ((tries) && (rslt == BME68X_OK))
 8004d7a:	e14e      	b.n	800501a <read_field_data+0x2d2>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8004d7c:	230f      	movs	r3, #15
 8004d7e:	18fb      	adds	r3, r7, r3
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	1c1a      	adds	r2, r3, #0
 8004d84:	0112      	lsls	r2, r2, #4
 8004d86:	18d3      	adds	r3, r2, r3
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	331d      	adds	r3, #29
 8004d8c:	b2d8      	uxtb	r0, r3
 8004d8e:	2537      	movs	r5, #55	@ 0x37
 8004d90:	197c      	adds	r4, r7, r5
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2210      	movs	r2, #16
 8004d96:	18b9      	adds	r1, r7, r2
 8004d98:	2211      	movs	r2, #17
 8004d9a:	f7fe fdef 	bl	800397c <bme68x_get_regs>
 8004d9e:	0003      	movs	r3, r0
 8004da0:	7023      	strb	r3, [r4, #0]
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d103      	bne.n	8004db0 <read_field_data+0x68>
        {
            rslt = BME68X_E_NULL_PTR;
 8004da8:	197b      	adds	r3, r7, r5
 8004daa:	22ff      	movs	r2, #255	@ 0xff
 8004dac:	701a      	strb	r2, [r3, #0]
            break;
 8004dae:	e140      	b.n	8005032 <read_field_data+0x2ea>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8004db0:	2010      	movs	r0, #16
 8004db2:	183b      	adds	r3, r7, r0
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	227f      	movs	r2, #127	@ 0x7f
 8004db8:	4393      	bics	r3, r2
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8004dc0:	183b      	adds	r3, r7, r0
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	220f      	movs	r2, #15
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 8004dce:	183b      	adds	r3, r7, r0
 8004dd0:	785a      	ldrb	r2, [r3, #1]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8004dd6:	183b      	adds	r3, r7, r0
 8004dd8:	789b      	ldrb	r3, [r3, #2]
 8004dda:	031a      	lsls	r2, r3, #12
 8004ddc:	183b      	adds	r3, r7, r0
 8004dde:	78db      	ldrb	r3, [r3, #3]
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	4313      	orrs	r3, r2
 8004de4:	183a      	adds	r2, r7, r0
 8004de6:	7912      	ldrb	r2, [r2, #4]
 8004de8:	0912      	lsrs	r2, r2, #4
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	4313      	orrs	r3, r2
 8004dee:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8004df0:	183b      	adds	r3, r7, r0
 8004df2:	795b      	ldrb	r3, [r3, #5]
 8004df4:	031a      	lsls	r2, r3, #12
 8004df6:	183b      	adds	r3, r7, r0
 8004df8:	799b      	ldrb	r3, [r3, #6]
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	183a      	adds	r2, r7, r0
 8004e00:	79d2      	ldrb	r2, [r2, #7]
 8004e02:	0912      	lsrs	r2, r2, #4
 8004e04:	b2d2      	uxtb	r2, r2
 8004e06:	4313      	orrs	r3, r2
 8004e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8004e0a:	183b      	adds	r3, r7, r0
 8004e0c:	7a1b      	ldrb	r3, [r3, #8]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	183b      	adds	r3, r7, r0
 8004e14:	7a5b      	ldrb	r3, [r3, #9]
 8004e16:	0019      	movs	r1, r3
 8004e18:	232a      	movs	r3, #42	@ 0x2a
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8004e20:	183b      	adds	r3, r7, r0
 8004e22:	7b5b      	ldrb	r3, [r3, #13]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	183b      	adds	r3, r7, r0
 8004e2a:	7b9b      	ldrb	r3, [r3, #14]
 8004e2c:	099b      	lsrs	r3, r3, #6
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	0019      	movs	r1, r3
 8004e32:	2328      	movs	r3, #40	@ 0x28
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	430a      	orrs	r2, r1
 8004e38:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8004e3a:	183b      	adds	r3, r7, r0
 8004e3c:	7bdb      	ldrb	r3, [r3, #15]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	183b      	adds	r3, r7, r0
 8004e44:	7c1b      	ldrb	r3, [r3, #16]
 8004e46:	099b      	lsrs	r3, r3, #6
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	0019      	movs	r1, r3
 8004e4c:	2326      	movs	r3, #38	@ 0x26
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	430a      	orrs	r2, r1
 8004e52:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8004e54:	183b      	adds	r3, r7, r0
 8004e56:	7b9a      	ldrb	r2, [r3, #14]
 8004e58:	2325      	movs	r3, #37	@ 0x25
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	210f      	movs	r1, #15
 8004e5e:	400a      	ands	r2, r1
 8004e60:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8004e62:	183b      	adds	r3, r7, r0
 8004e64:	7c1a      	ldrb	r2, [r3, #16]
 8004e66:	2324      	movs	r3, #36	@ 0x24
 8004e68:	18fb      	adds	r3, r7, r3
 8004e6a:	210f      	movs	r1, #15
 8004e6c:	400a      	ands	r2, r1
 8004e6e:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d11c      	bne.n	8004eb2 <read_field_data+0x16a>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	b25a      	sxtb	r2, r3
 8004e7e:	183b      	adds	r3, r7, r0
 8004e80:	7c1b      	ldrb	r3, [r3, #16]
 8004e82:	b25b      	sxtb	r3, r3
 8004e84:	2120      	movs	r1, #32
 8004e86:	400b      	ands	r3, r1
 8004e88:	b25b      	sxtb	r3, r3
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	b25b      	sxtb	r3, r3
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	b25a      	sxtb	r2, r3
 8004e9a:	183b      	adds	r3, r7, r0
 8004e9c:	7c1b      	ldrb	r3, [r3, #16]
 8004e9e:	b25b      	sxtb	r3, r3
 8004ea0:	2110      	movs	r1, #16
 8004ea2:	400b      	ands	r3, r1
 8004ea4:	b25b      	sxtb	r3, r3
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	b25b      	sxtb	r3, r3
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	e01c      	b.n	8004eec <read_field_data+0x1a4>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	b25a      	sxtb	r2, r3
 8004eb8:	2010      	movs	r0, #16
 8004eba:	183b      	adds	r3, r7, r0
 8004ebc:	7b9b      	ldrb	r3, [r3, #14]
 8004ebe:	b25b      	sxtb	r3, r3
 8004ec0:	2120      	movs	r1, #32
 8004ec2:	400b      	ands	r3, r1
 8004ec4:	b25b      	sxtb	r3, r3
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	b25b      	sxtb	r3, r3
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	b25a      	sxtb	r2, r3
 8004ed6:	183b      	adds	r3, r7, r0
 8004ed8:	7b9b      	ldrb	r3, [r3, #14]
 8004eda:	b25b      	sxtb	r3, r3
 8004edc:	2110      	movs	r1, #16
 8004ede:	400b      	ands	r3, r1
 8004ee0:	b25b      	sxtb	r3, r3
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	b25b      	sxtb	r3, r3
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	b25b      	sxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	db00      	blt.n	8004ef8 <read_field_data+0x1b0>
 8004ef6:	e07d      	b.n	8004ff4 <read_field_data+0x2ac>
 8004ef8:	2237      	movs	r2, #55	@ 0x37
 8004efa:	18bb      	adds	r3, r7, r2
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	b25b      	sxtb	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d000      	beq.n	8004f06 <read_field_data+0x1be>
 8004f04:	e076      	b.n	8004ff4 <read_field_data+0x2ac>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	335a      	adds	r3, #90	@ 0x5a
 8004f0c:	b2d8      	uxtb	r0, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	1cd9      	adds	r1, r3, #3
 8004f12:	0015      	movs	r5, r2
 8004f14:	18bc      	adds	r4, r7, r2
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f7fe fd2f 	bl	800397c <bme68x_get_regs>
 8004f1e:	0003      	movs	r3, r0
 8004f20:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8004f22:	002a      	movs	r2, r5
 8004f24:	18bb      	adds	r3, r7, r2
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	b25b      	sxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10c      	bne.n	8004f48 <read_field_data+0x200>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	785b      	ldrb	r3, [r3, #1]
 8004f32:	3350      	adds	r3, #80	@ 0x50
 8004f34:	b2d8      	uxtb	r0, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	1d19      	adds	r1, r3, #4
 8004f3a:	18bc      	adds	r4, r7, r2
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f7fe fd1c 	bl	800397c <bme68x_get_regs>
 8004f44:	0003      	movs	r3, r0
 8004f46:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 8004f48:	2237      	movs	r2, #55	@ 0x37
 8004f4a:	18bb      	adds	r3, r7, r2
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10c      	bne.n	8004f6e <read_field_data+0x226>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	785b      	ldrb	r3, [r3, #1]
 8004f58:	3364      	adds	r3, #100	@ 0x64
 8004f5a:	b2d8      	uxtb	r0, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	1d59      	adds	r1, r3, #5
 8004f60:	18bc      	adds	r4, r7, r2
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f7fe fd09 	bl	800397c <bme68x_get_regs>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 8004f6e:	2337      	movs	r3, #55	@ 0x37
 8004f70:	18fb      	adds	r3, r7, r3
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	b25b      	sxtb	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d13c      	bne.n	8004ff4 <read_field_data+0x2ac>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7e:	0011      	movs	r1, r2
 8004f80:	0018      	movs	r0, r3
 8004f82:	f7ff fa17 	bl	80043b4 <calc_temperature>
 8004f86:	1c02      	adds	r2, r0, #0
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	609a      	str	r2, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f90:	0011      	movs	r1, r2
 8004f92:	0018      	movs	r0, r3
 8004f94:	f7ff faa6 	bl	80044e4 <calc_pressure>
 8004f98:	1c02      	adds	r2, r0, #0
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	60da      	str	r2, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	232a      	movs	r3, #42	@ 0x2a
 8004fa2:	18fb      	adds	r3, r7, r3
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	0011      	movs	r1, r2
 8004fa8:	0018      	movs	r0, r3
 8004faa:	f7ff fbfb 	bl	80047a4 <calc_humidity>
 8004fae:	1c02      	adds	r2, r0, #0
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	611a      	str	r2, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d10d      	bne.n	8004fd8 <read_field_data+0x290>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8004fbc:	2324      	movs	r3, #36	@ 0x24
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	781a      	ldrb	r2, [r3, #0]
 8004fc2:	2326      	movs	r3, #38	@ 0x26
 8004fc4:	18fb      	adds	r3, r7, r3
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	0011      	movs	r1, r2
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f7ff fd7a 	bl	8004ac4 <calc_gas_resistance_high>
 8004fd0:	1c02      	adds	r2, r0, #0
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	615a      	str	r2, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8004fd6:	e02c      	b.n	8005032 <read_field_data+0x2ea>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	2325      	movs	r3, #37	@ 0x25
 8004fdc:	18fb      	adds	r3, r7, r3
 8004fde:	7819      	ldrb	r1, [r3, #0]
 8004fe0:	2328      	movs	r3, #40	@ 0x28
 8004fe2:	18fb      	adds	r3, r7, r3
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f7ff fcb8 	bl	800495c <calc_gas_resistance_low>
 8004fec:	1c02      	adds	r2, r0, #0
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	615a      	str	r2, [r3, #20]
                break;
 8004ff2:	e01e      	b.n	8005032 <read_field_data+0x2ea>
            }
        }

        if (rslt == BME68X_OK)
 8004ff4:	2337      	movs	r3, #55	@ 0x37
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	b25b      	sxtb	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <read_field_data+0x2c6>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	480e      	ldr	r0, [pc, #56]	@ (8005044 <read_field_data+0x2fc>)
 800500a:	0019      	movs	r1, r3
 800500c:	4790      	blx	r2
        }

        tries--;
 800500e:	2136      	movs	r1, #54	@ 0x36
 8005010:	187b      	adds	r3, r7, r1
 8005012:	781a      	ldrb	r2, [r3, #0]
 8005014:	187b      	adds	r3, r7, r1
 8005016:	3a01      	subs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
    while ((tries) && (rslt == BME68X_OK))
 800501a:	2336      	movs	r3, #54	@ 0x36
 800501c:	18fb      	adds	r3, r7, r3
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d006      	beq.n	8005032 <read_field_data+0x2ea>
 8005024:	2337      	movs	r3, #55	@ 0x37
 8005026:	18fb      	adds	r3, r7, r3
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	b25b      	sxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d100      	bne.n	8005032 <read_field_data+0x2ea>
 8005030:	e6a4      	b.n	8004d7c <read_field_data+0x34>
    }

    return rslt;
 8005032:	2337      	movs	r3, #55	@ 0x37
 8005034:	18fb      	adds	r3, r7, r3
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	b25b      	sxtb	r3, r3
}
 800503a:	0018      	movs	r0, r3
 800503c:	46bd      	mov	sp, r7
 800503e:	b00e      	add	sp, #56	@ 0x38
 8005040:	bdb0      	pop	{r4, r5, r7, pc}
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	00002710 	.word	0x00002710

08005048 <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 8005048:	b5b0      	push	{r4, r5, r7, lr}
 800504a:	b09c      	sub	sp, #112	@ 0x70
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8005052:	246f      	movs	r4, #111	@ 0x6f
 8005054:	193b      	adds	r3, r7, r4
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 800505a:	2328      	movs	r3, #40	@ 0x28
 800505c:	18fb      	adds	r3, r7, r3
 800505e:	0018      	movs	r0, r3
 8005060:	2333      	movs	r3, #51	@ 0x33
 8005062:	001a      	movs	r2, r3
 8005064:	2100      	movs	r1, #0
 8005066:	f005 f9c7 	bl	800a3f8 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 800506a:	2308      	movs	r3, #8
 800506c:	18fb      	adds	r3, r7, r3
 800506e:	0018      	movs	r0, r3
 8005070:	231e      	movs	r3, #30
 8005072:	001a      	movs	r2, r3
 8005074:	2100      	movs	r1, #0
 8005076:	f005 f9bf 	bl	800a3f8 <memset>
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10c      	bne.n	800509c <read_all_field_data+0x54>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3304      	adds	r3, #4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d107      	bne.n	800509c <read_all_field_data+0x54>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3308      	adds	r3, #8
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d102      	bne.n	800509c <read_all_field_data+0x54>
    {
        rslt = BME68X_E_NULL_PTR;
 8005096:	193b      	adds	r3, r7, r4
 8005098:	22ff      	movs	r2, #255	@ 0xff
 800509a:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BME68X_OK)
 800509c:	226f      	movs	r2, #111	@ 0x6f
 800509e:	18bb      	adds	r3, r7, r2
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	b25b      	sxtb	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d109      	bne.n	80050bc <read_all_field_data+0x74>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 80050a8:	18bc      	adds	r4, r7, r2
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2228      	movs	r2, #40	@ 0x28
 80050ae:	18b9      	adds	r1, r7, r2
 80050b0:	2233      	movs	r2, #51	@ 0x33
 80050b2:	201d      	movs	r0, #29
 80050b4:	f7fe fc62 	bl	800397c <bme68x_get_regs>
 80050b8:	0003      	movs	r3, r0
 80050ba:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 80050bc:	226f      	movs	r2, #111	@ 0x6f
 80050be:	18bb      	adds	r3, r7, r2
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	b25b      	sxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 80050c8:	18bc      	adds	r4, r7, r2
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2208      	movs	r2, #8
 80050ce:	18b9      	adds	r1, r7, r2
 80050d0:	221e      	movs	r2, #30
 80050d2:	2050      	movs	r0, #80	@ 0x50
 80050d4:	f7fe fc52 	bl	800397c <bme68x_get_regs>
 80050d8:	0003      	movs	r3, r0
 80050da:	7023      	strb	r3, [r4, #0]
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80050dc:	236e      	movs	r3, #110	@ 0x6e
 80050de:	18fb      	adds	r3, r7, r3
 80050e0:	2200      	movs	r2, #0
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	e1af      	b.n	8005446 <read_all_field_data+0x3fe>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 80050e6:	206d      	movs	r0, #109	@ 0x6d
 80050e8:	183a      	adds	r2, r7, r0
 80050ea:	256e      	movs	r5, #110	@ 0x6e
 80050ec:	197b      	adds	r3, r7, r5
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	1c19      	adds	r1, r3, #0
 80050f2:	0109      	lsls	r1, r1, #4
 80050f4:	18cb      	adds	r3, r1, r3
 80050f6:	7013      	strb	r3, [r2, #0]
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 80050f8:	183b      	adds	r3, r7, r0
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2428      	movs	r4, #40	@ 0x28
 80050fe:	193a      	adds	r2, r7, r4
 8005100:	5cd2      	ldrb	r2, [r2, r3]
 8005102:	197b      	adds	r3, r7, r5
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	18cb      	adds	r3, r1, r3
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	217f      	movs	r1, #127	@ 0x7f
 8005110:	438a      	bics	r2, r1
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8005116:	183b      	adds	r3, r7, r0
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	193a      	adds	r2, r7, r4
 800511c:	5cd2      	ldrb	r2, [r2, r3]
 800511e:	197b      	adds	r3, r7, r5
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	18cb      	adds	r3, r1, r3
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	210f      	movs	r1, #15
 800512c:	400a      	ands	r2, r1
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8005132:	183b      	adds	r3, r7, r0
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	197b      	adds	r3, r7, r5
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	18cb      	adds	r3, r1, r3
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	1939      	adds	r1, r7, r4
 8005146:	5c8a      	ldrb	r2, [r1, r2]
 8005148:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 800514a:	183b      	adds	r3, r7, r0
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	3302      	adds	r3, #2
 8005150:	193a      	adds	r2, r7, r4
 8005152:	5cd3      	ldrb	r3, [r2, r3]
 8005154:	031a      	lsls	r2, r3, #12
 8005156:	183b      	adds	r3, r7, r0
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	3303      	adds	r3, #3
 800515c:	1939      	adds	r1, r7, r4
 800515e:	5ccb      	ldrb	r3, [r1, r3]
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8005164:	183a      	adds	r2, r7, r0
 8005166:	7812      	ldrb	r2, [r2, #0]
 8005168:	3204      	adds	r2, #4
 800516a:	1939      	adds	r1, r7, r4
 800516c:	5c8a      	ldrb	r2, [r1, r2]
 800516e:	0912      	lsrs	r2, r2, #4
 8005170:	b2d2      	uxtb	r2, r2
        adc_pres =
 8005172:	4313      	orrs	r3, r2
 8005174:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8005176:	183b      	adds	r3, r7, r0
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	3305      	adds	r3, #5
 800517c:	193a      	adds	r2, r7, r4
 800517e:	5cd3      	ldrb	r3, [r2, r3]
 8005180:	031a      	lsls	r2, r3, #12
 8005182:	183b      	adds	r3, r7, r0
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	3306      	adds	r3, #6
 8005188:	1939      	adds	r1, r7, r4
 800518a:	5ccb      	ldrb	r3, [r1, r3]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 8005190:	183a      	adds	r2, r7, r0
 8005192:	7812      	ldrb	r2, [r2, #0]
 8005194:	3207      	adds	r2, #7
 8005196:	1939      	adds	r1, r7, r4
 8005198:	5c8a      	ldrb	r2, [r1, r2]
 800519a:	0912      	lsrs	r2, r2, #4
 800519c:	b2d2      	uxtb	r2, r2
        adc_temp =
 800519e:	4313      	orrs	r3, r2
 80051a0:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 80051a2:	183b      	adds	r3, r7, r0
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	3308      	adds	r3, #8
 80051a8:	193a      	adds	r2, r7, r4
 80051aa:	5cd3      	ldrb	r3, [r2, r3]
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	183b      	adds	r3, r7, r0
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	3309      	adds	r3, #9
 80051b6:	1939      	adds	r1, r7, r4
 80051b8:	5ccb      	ldrb	r3, [r1, r3]
 80051ba:	0019      	movs	r1, r3
 80051bc:	2362      	movs	r3, #98	@ 0x62
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	430a      	orrs	r2, r1
 80051c2:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 80051c4:	183b      	adds	r3, r7, r0
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	330d      	adds	r3, #13
 80051ca:	193a      	adds	r2, r7, r4
 80051cc:	5cd3      	ldrb	r3, [r2, r3]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	183b      	adds	r3, r7, r0
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	330e      	adds	r3, #14
 80051d8:	1939      	adds	r1, r7, r4
 80051da:	5ccb      	ldrb	r3, [r1, r3]
 80051dc:	099b      	lsrs	r3, r3, #6
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	0019      	movs	r1, r3
 80051e2:	2360      	movs	r3, #96	@ 0x60
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	430a      	orrs	r2, r1
 80051e8:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 80051ea:	183b      	adds	r3, r7, r0
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	330f      	adds	r3, #15
 80051f0:	193a      	adds	r2, r7, r4
 80051f2:	5cd3      	ldrb	r3, [r2, r3]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	183b      	adds	r3, r7, r0
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	3310      	adds	r3, #16
 80051fe:	1939      	adds	r1, r7, r4
 8005200:	5ccb      	ldrb	r3, [r1, r3]
 8005202:	099b      	lsrs	r3, r3, #6
 8005204:	b2db      	uxtb	r3, r3
 8005206:	0019      	movs	r1, r3
 8005208:	235e      	movs	r3, #94	@ 0x5e
 800520a:	18fb      	adds	r3, r7, r3
 800520c:	430a      	orrs	r2, r1
 800520e:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 8005210:	183b      	adds	r3, r7, r0
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	330e      	adds	r3, #14
 8005216:	193a      	adds	r2, r7, r4
 8005218:	5cd2      	ldrb	r2, [r2, r3]
 800521a:	235d      	movs	r3, #93	@ 0x5d
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	210f      	movs	r1, #15
 8005220:	400a      	ands	r2, r1
 8005222:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8005224:	183b      	adds	r3, r7, r0
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	3310      	adds	r3, #16
 800522a:	193a      	adds	r2, r7, r4
 800522c:	5cd2      	ldrb	r2, [r2, r3]
 800522e:	235c      	movs	r3, #92	@ 0x5c
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	210f      	movs	r1, #15
 8005234:	400a      	ands	r2, r1
 8005236:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d136      	bne.n	80052ae <read_all_field_data+0x266>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8005240:	197b      	adds	r3, r7, r5
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	18d3      	adds	r3, r2, r3
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	b25a      	sxtb	r2, r3
 8005250:	183b      	adds	r3, r7, r0
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	3310      	adds	r3, #16
 8005256:	1939      	adds	r1, r7, r4
 8005258:	5ccb      	ldrb	r3, [r1, r3]
 800525a:	b25b      	sxtb	r3, r3
 800525c:	2120      	movs	r1, #32
 800525e:	400b      	ands	r3, r1
 8005260:	b25b      	sxtb	r3, r3
 8005262:	4313      	orrs	r3, r2
 8005264:	b259      	sxtb	r1, r3
 8005266:	197b      	adds	r3, r7, r5
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	18d3      	adds	r3, r2, r3
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	b2ca      	uxtb	r2, r1
 8005274:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8005276:	197b      	adds	r3, r7, r5
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	18d3      	adds	r3, r2, r3
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	b25a      	sxtb	r2, r3
 8005286:	183b      	adds	r3, r7, r0
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	3310      	adds	r3, #16
 800528c:	1939      	adds	r1, r7, r4
 800528e:	5ccb      	ldrb	r3, [r1, r3]
 8005290:	b25b      	sxtb	r3, r3
 8005292:	2110      	movs	r1, #16
 8005294:	400b      	ands	r3, r1
 8005296:	b25b      	sxtb	r3, r3
 8005298:	4313      	orrs	r3, r2
 800529a:	b259      	sxtb	r1, r3
 800529c:	197b      	adds	r3, r7, r5
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	18d3      	adds	r3, r2, r3
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	b2ca      	uxtb	r2, r1
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	e038      	b.n	8005320 <read_all_field_data+0x2d8>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 80052ae:	206e      	movs	r0, #110	@ 0x6e
 80052b0:	183b      	adds	r3, r7, r0
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	18d3      	adds	r3, r2, r3
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	b25a      	sxtb	r2, r3
 80052c0:	246d      	movs	r4, #109	@ 0x6d
 80052c2:	193b      	adds	r3, r7, r4
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	330e      	adds	r3, #14
 80052c8:	2528      	movs	r5, #40	@ 0x28
 80052ca:	1979      	adds	r1, r7, r5
 80052cc:	5ccb      	ldrb	r3, [r1, r3]
 80052ce:	b25b      	sxtb	r3, r3
 80052d0:	2120      	movs	r1, #32
 80052d2:	400b      	ands	r3, r1
 80052d4:	b25b      	sxtb	r3, r3
 80052d6:	4313      	orrs	r3, r2
 80052d8:	b259      	sxtb	r1, r3
 80052da:	183b      	adds	r3, r7, r0
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	18d3      	adds	r3, r2, r3
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	b2ca      	uxtb	r2, r1
 80052e8:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 80052ea:	183b      	adds	r3, r7, r0
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	18d3      	adds	r3, r2, r3
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	b25a      	sxtb	r2, r3
 80052fa:	193b      	adds	r3, r7, r4
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	330e      	adds	r3, #14
 8005300:	1979      	adds	r1, r7, r5
 8005302:	5ccb      	ldrb	r3, [r1, r3]
 8005304:	b25b      	sxtb	r3, r3
 8005306:	2110      	movs	r1, #16
 8005308:	400b      	ands	r3, r1
 800530a:	b25b      	sxtb	r3, r3
 800530c:	4313      	orrs	r3, r2
 800530e:	b259      	sxtb	r1, r3
 8005310:	183b      	adds	r3, r7, r0
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	18d3      	adds	r3, r2, r3
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	b2ca      	uxtb	r2, r1
 800531e:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 8005320:	256e      	movs	r5, #110	@ 0x6e
 8005322:	197b      	adds	r3, r7, r5
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	18d3      	adds	r3, r2, r3
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	785b      	ldrb	r3, [r3, #1]
 8005330:	0019      	movs	r1, r3
 8005332:	197b      	adds	r3, r7, r5
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	18d3      	adds	r3, r2, r3
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2008      	movs	r0, #8
 8005340:	183a      	adds	r2, r7, r0
 8005342:	5c52      	ldrb	r2, [r2, r1]
 8005344:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8005346:	197b      	adds	r3, r7, r5
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	18d3      	adds	r3, r2, r3
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	785b      	ldrb	r3, [r3, #1]
 8005354:	330a      	adds	r3, #10
 8005356:	001a      	movs	r2, r3
 8005358:	197b      	adds	r3, r7, r5
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	18cb      	adds	r3, r1, r3
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	1839      	adds	r1, r7, r0
 8005366:	5c8a      	ldrb	r2, [r1, r2]
 8005368:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 800536a:	197b      	adds	r3, r7, r5
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	18d3      	adds	r3, r2, r3
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	3314      	adds	r3, #20
 800537a:	001a      	movs	r2, r3
 800537c:	197b      	adds	r3, r7, r5
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	18cb      	adds	r3, r1, r3
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	1839      	adds	r1, r7, r0
 800538a:	5c8a      	ldrb	r2, [r1, r2]
 800538c:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 800538e:	197b      	adds	r3, r7, r5
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	18d3      	adds	r3, r2, r3
 8005398:	681c      	ldr	r4, [r3, #0]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800539e:	0011      	movs	r1, r2
 80053a0:	0018      	movs	r0, r3
 80053a2:	f7ff f807 	bl	80043b4 <calc_temperature>
 80053a6:	1c03      	adds	r3, r0, #0
 80053a8:	60a3      	str	r3, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 80053aa:	197b      	adds	r3, r7, r5
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	18d3      	adds	r3, r2, r3
 80053b4:	681c      	ldr	r4, [r3, #0]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053ba:	0011      	movs	r1, r2
 80053bc:	0018      	movs	r0, r3
 80053be:	f7ff f891 	bl	80044e4 <calc_pressure>
 80053c2:	1c03      	adds	r3, r0, #0
 80053c4:	60e3      	str	r3, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 80053c6:	197b      	adds	r3, r7, r5
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	18d3      	adds	r3, r2, r3
 80053d0:	681c      	ldr	r4, [r3, #0]
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	2362      	movs	r3, #98	@ 0x62
 80053d6:	18fb      	adds	r3, r7, r3
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	0011      	movs	r1, r2
 80053dc:	0018      	movs	r0, r3
 80053de:	f7ff f9e1 	bl	80047a4 <calc_humidity>
 80053e2:	1c03      	adds	r3, r0, #0
 80053e4:	6123      	str	r3, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d112      	bne.n	8005414 <read_all_field_data+0x3cc>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80053ee:	197b      	adds	r3, r7, r5
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	18d3      	adds	r3, r2, r3
 80053f8:	681c      	ldr	r4, [r3, #0]
 80053fa:	235c      	movs	r3, #92	@ 0x5c
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	781a      	ldrb	r2, [r3, #0]
 8005400:	235e      	movs	r3, #94	@ 0x5e
 8005402:	18fb      	adds	r3, r7, r3
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	0011      	movs	r1, r2
 8005408:	0018      	movs	r0, r3
 800540a:	f7ff fb5b 	bl	8004ac4 <calc_gas_resistance_high>
 800540e:	1c03      	adds	r3, r0, #0
 8005410:	6163      	str	r3, [r4, #20]
 8005412:	e012      	b.n	800543a <read_all_field_data+0x3f2>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8005414:	236e      	movs	r3, #110	@ 0x6e
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	18d3      	adds	r3, r2, r3
 8005420:	681c      	ldr	r4, [r3, #0]
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	235d      	movs	r3, #93	@ 0x5d
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	7819      	ldrb	r1, [r3, #0]
 800542a:	2360      	movs	r3, #96	@ 0x60
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	0018      	movs	r0, r3
 8005432:	f7ff fa93 	bl	800495c <calc_gas_resistance_low>
 8005436:	1c03      	adds	r3, r0, #0
 8005438:	6163      	str	r3, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800543a:	216e      	movs	r1, #110	@ 0x6e
 800543c:	187b      	adds	r3, r7, r1
 800543e:	781a      	ldrb	r2, [r3, #0]
 8005440:	187b      	adds	r3, r7, r1
 8005442:	3201      	adds	r2, #1
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	236e      	movs	r3, #110	@ 0x6e
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b02      	cmp	r3, #2
 800544e:	d806      	bhi.n	800545e <read_all_field_data+0x416>
 8005450:	236f      	movs	r3, #111	@ 0x6f
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	b25b      	sxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d100      	bne.n	800545e <read_all_field_data+0x416>
 800545c:	e643      	b.n	80050e6 <read_all_field_data+0x9e>
        }
    }

    return rslt;
 800545e:	236f      	movs	r3, #111	@ 0x6f
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	b25b      	sxtb	r3, r3
}
 8005466:	0018      	movs	r0, r3
 8005468:	46bd      	mov	sp, r7
 800546a:	b01c      	add	sp, #112	@ 0x70
 800546c:	bdb0      	pop	{r4, r5, r7, pc}

0800546e <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 800546e:	b5b0      	push	{r4, r5, r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	0002      	movs	r2, r0
 8005476:	6039      	str	r1, [r7, #0]
 8005478:	1dfb      	adds	r3, r7, #7
 800547a:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 800547c:	250f      	movs	r5, #15
 800547e:	197c      	adds	r4, r7, r5
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	0018      	movs	r0, r3
 8005484:	f000 f8e1 	bl	800564a <null_ptr_check>
 8005488:	0003      	movs	r3, r0
 800548a:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 800548c:	197b      	adds	r3, r7, r5
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	b25b      	sxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d160      	bne.n	8005558 <set_mem_page+0xea>
    {
        if (reg_addr > 0x7f)
 8005496:	1dfb      	adds	r3, r7, #7
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	b25b      	sxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	da04      	bge.n	80054aa <set_mem_page+0x3c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80054a0:	230e      	movs	r3, #14
 80054a2:	18fb      	adds	r3, r7, r3
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e003      	b.n	80054b2 <set_mem_page+0x44>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80054aa:	230e      	movs	r3, #14
 80054ac:	18fb      	adds	r3, r7, r3
 80054ae:	2210      	movs	r2, #16
 80054b0:	701a      	strb	r2, [r3, #0]
        }

        if (mem_page != dev->mem_page)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	7b5b      	ldrb	r3, [r3, #13]
 80054b6:	210e      	movs	r1, #14
 80054b8:	187a      	adds	r2, r7, r1
 80054ba:	7812      	ldrb	r2, [r2, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d04b      	beq.n	8005558 <set_mem_page+0xea>
        {
            dev->mem_page = mem_page;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	187a      	adds	r2, r7, r1
 80054c4:	7812      	ldrb	r2, [r2, #0]
 80054c6:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	220d      	movs	r2, #13
 80054d2:	18b9      	adds	r1, r7, r2
 80054d4:	2201      	movs	r2, #1
 80054d6:	20f3      	movs	r0, #243	@ 0xf3
 80054d8:	47a0      	blx	r4
 80054da:	0003      	movs	r3, r0
 80054dc:	0019      	movs	r1, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	224c      	movs	r2, #76	@ 0x4c
 80054e2:	5499      	strb	r1, [r3, r2]
            if (dev->intf_rslt != 0)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	224c      	movs	r2, #76	@ 0x4c
 80054e8:	569b      	ldrsb	r3, [r3, r2]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <set_mem_page+0x88>
            {
                rslt = BME68X_E_COM_FAIL;
 80054ee:	230f      	movs	r3, #15
 80054f0:	18fb      	adds	r3, r7, r3
 80054f2:	22fe      	movs	r2, #254	@ 0xfe
 80054f4:	701a      	strb	r2, [r3, #0]
            }

            if (rslt == BME68X_OK)
 80054f6:	250f      	movs	r5, #15
 80054f8:	197b      	adds	r3, r7, r5
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	b25b      	sxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d12a      	bne.n	8005558 <set_mem_page+0xea>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8005502:	210d      	movs	r1, #13
 8005504:	187b      	adds	r3, r7, r1
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2210      	movs	r2, #16
 800550a:	4393      	bics	r3, r2
 800550c:	b2da      	uxtb	r2, r3
 800550e:	187b      	adds	r3, r7, r1
 8005510:	701a      	strb	r2, [r3, #0]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	7b5b      	ldrb	r3, [r3, #13]
 8005516:	b25b      	sxtb	r3, r3
 8005518:	2210      	movs	r2, #16
 800551a:	4013      	ands	r3, r2
 800551c:	b25a      	sxtb	r2, r3
 800551e:	187b      	adds	r3, r7, r1
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	b25b      	sxtb	r3, r3
 8005524:	4313      	orrs	r3, r2
 8005526:	b25b      	sxtb	r3, r3
 8005528:	b2da      	uxtb	r2, r3
 800552a:	187b      	adds	r3, r7, r1
 800552c:	701a      	strb	r2, [r3, #0]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	1879      	adds	r1, r7, r1
 8005538:	2201      	movs	r2, #1
 800553a:	2073      	movs	r0, #115	@ 0x73
 800553c:	47a0      	blx	r4
 800553e:	0003      	movs	r3, r0
 8005540:	0019      	movs	r1, r3
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	224c      	movs	r2, #76	@ 0x4c
 8005546:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	224c      	movs	r2, #76	@ 0x4c
 800554c:	569b      	ldrsb	r3, [r3, r2]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <set_mem_page+0xea>
                {
                    rslt = BME68X_E_COM_FAIL;
 8005552:	197b      	adds	r3, r7, r5
 8005554:	22fe      	movs	r2, #254	@ 0xfe
 8005556:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    return rslt;
 8005558:	230f      	movs	r3, #15
 800555a:	18fb      	adds	r3, r7, r3
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	b25b      	sxtb	r3, r3
}
 8005560:	0018      	movs	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	b004      	add	sp, #16
 8005566:	bdb0      	pop	{r4, r5, r7, pc}

08005568 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8005568:	b5b0      	push	{r4, r5, r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8005570:	250f      	movs	r5, #15
 8005572:	197c      	adds	r4, r7, r5
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	0018      	movs	r0, r3
 8005578:	f000 f867 	bl	800564a <null_ptr_check>
 800557c:	0003      	movs	r3, r0
 800557e:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8005580:	197b      	adds	r3, r7, r5
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	b25b      	sxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d11e      	bne.n	80055c8 <get_mem_page+0x60>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	220e      	movs	r2, #14
 8005594:	18b9      	adds	r1, r7, r2
 8005596:	2201      	movs	r2, #1
 8005598:	20f3      	movs	r0, #243	@ 0xf3
 800559a:	47a0      	blx	r4
 800559c:	0003      	movs	r3, r0
 800559e:	0019      	movs	r1, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	224c      	movs	r2, #76	@ 0x4c
 80055a4:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	224c      	movs	r2, #76	@ 0x4c
 80055aa:	569b      	ldrsb	r3, [r3, r2]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <get_mem_page+0x50>
        {
            rslt = BME68X_E_COM_FAIL;
 80055b0:	197b      	adds	r3, r7, r5
 80055b2:	22fe      	movs	r2, #254	@ 0xfe
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	e007      	b.n	80055c8 <get_mem_page+0x60>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 80055b8:	230e      	movs	r3, #14
 80055ba:	18fb      	adds	r3, r7, r3
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2210      	movs	r2, #16
 80055c0:	4013      	ands	r3, r2
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 80055c8:	230f      	movs	r3, #15
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	b25b      	sxtb	r3, r3
}
 80055d0:	0018      	movs	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b004      	add	sp, #16
 80055d6:	bdb0      	pop	{r4, r5, r7, pc}

080055d8 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 80055d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	250b      	movs	r5, #11
 80055e4:	197b      	adds	r3, r7, r5
 80055e6:	1c0a      	adds	r2, r1, #0
 80055e8:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80055ea:	2617      	movs	r6, #23
 80055ec:	19bc      	adds	r4, r7, r6
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	0018      	movs	r0, r3
 80055f2:	f000 f82a 	bl	800564a <null_ptr_check>
 80055f6:	0003      	movs	r3, r0
 80055f8:	7023      	strb	r3, [r4, #0]
    if ((value != NULL) && (rslt == BME68X_OK))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d018      	beq.n	8005632 <boundary_check+0x5a>
 8005600:	19bb      	adds	r3, r7, r6
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	b25b      	sxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d113      	bne.n	8005632 <boundary_check+0x5a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	197a      	adds	r2, r7, r5
 8005610:	7812      	ldrb	r2, [r2, #0]
 8005612:	429a      	cmp	r2, r3
 8005614:	d211      	bcs.n	800563a <boundary_check+0x62>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	197a      	adds	r2, r7, r5
 800561a:	7812      	ldrb	r2, [r2, #0]
 800561c:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	224d      	movs	r2, #77	@ 0x4d
 8005622:	5c9b      	ldrb	r3, [r3, r2]
 8005624:	2201      	movs	r2, #1
 8005626:	4313      	orrs	r3, r2
 8005628:	b2d9      	uxtb	r1, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	224d      	movs	r2, #77	@ 0x4d
 800562e:	5499      	strb	r1, [r3, r2]
        if (*value > max)
 8005630:	e003      	b.n	800563a <boundary_check+0x62>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8005632:	2317      	movs	r3, #23
 8005634:	18fb      	adds	r3, r7, r3
 8005636:	22ff      	movs	r2, #255	@ 0xff
 8005638:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800563a:	2317      	movs	r3, #23
 800563c:	18fb      	adds	r3, r7, r3
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	b25b      	sxtb	r3, r3
}
 8005642:	0018      	movs	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	b007      	add	sp, #28
 8005648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800564a <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 8005652:	230f      	movs	r3, #15
 8005654:	18fb      	adds	r3, r7, r3
 8005656:	2200      	movs	r2, #0
 8005658:	701a      	strb	r2, [r3, #0]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <null_ptr_check+0x2e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <null_ptr_check+0x2e>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <null_ptr_check+0x2e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005674:	2b00      	cmp	r3, #0
 8005676:	d103      	bne.n	8005680 <null_ptr_check+0x36>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8005678:	230f      	movs	r3, #15
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	22ff      	movs	r2, #255	@ 0xff
 800567e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8005680:	230f      	movs	r3, #15
 8005682:	18fb      	adds	r3, r7, r3
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	b25b      	sxtb	r3, r3
}
 8005688:	0018      	movs	r0, r3
 800568a:	46bd      	mov	sp, r7
 800568c:	b004      	add	sp, #16
 800568e:	bd80      	pop	{r7, pc}

08005690 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8005690:	b5b0      	push	{r4, r5, r7, lr}
 8005692:	b092      	sub	sp, #72	@ 0x48
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	607a      	str	r2, [r7, #4]
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	240b      	movs	r4, #11
 800569e:	193b      	adds	r3, r7, r4
 80056a0:	1c0a      	adds	r2, r1, #0
 80056a2:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 80056a4:	2347      	movs	r3, #71	@ 0x47
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 80056ac:	2345      	movs	r3, #69	@ 0x45
 80056ae:	18fb      	adds	r3, r7, r3
 80056b0:	2200      	movs	r2, #0
 80056b2:	701a      	strb	r2, [r3, #0]
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 80056b4:	2343      	movs	r3, #67	@ 0x43
 80056b6:	18fb      	adds	r3, r7, r3
 80056b8:	226e      	movs	r2, #110	@ 0x6e
 80056ba:	701a      	strb	r2, [r3, #0]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80056bc:	2338      	movs	r3, #56	@ 0x38
 80056be:	18fb      	adds	r3, r7, r3
 80056c0:	0018      	movs	r0, r3
 80056c2:	230a      	movs	r3, #10
 80056c4:	001a      	movs	r2, r3
 80056c6:	2100      	movs	r1, #0
 80056c8:	f004 fe96 	bl	800a3f8 <memset>
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80056cc:	232c      	movs	r3, #44	@ 0x2c
 80056ce:	18fb      	adds	r3, r7, r3
 80056d0:	0018      	movs	r0, r3
 80056d2:	230a      	movs	r3, #10
 80056d4:	001a      	movs	r2, r3
 80056d6:	2100      	movs	r1, #0
 80056d8:	f004 fe8e 	bl	800a3f8 <memset>
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80056dc:	2320      	movs	r3, #32
 80056de:	18fb      	adds	r3, r7, r3
 80056e0:	0018      	movs	r0, r3
 80056e2:	230a      	movs	r3, #10
 80056e4:	001a      	movs	r2, r3
 80056e6:	2100      	movs	r1, #0
 80056e8:	f004 fe86 	bl	800a3f8 <memset>
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80056ec:	2314      	movs	r3, #20
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	0018      	movs	r0, r3
 80056f2:	230a      	movs	r3, #10
 80056f4:	001a      	movs	r2, r3
 80056f6:	2100      	movs	r1, #0
 80056f8:	f004 fe7e 	bl	800a3f8 <memset>

    switch (op_mode)
 80056fc:	193b      	adds	r3, r7, r4
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b03      	cmp	r3, #3
 8005702:	d02d      	beq.n	8005760 <set_conf+0xd0>
 8005704:	dd00      	ble.n	8005708 <set_conf+0x78>
 8005706:	e10c      	b.n	8005922 <set_conf+0x292>
 8005708:	2b01      	cmp	r3, #1
 800570a:	d003      	beq.n	8005714 <set_conf+0x84>
 800570c:	2b02      	cmp	r3, #2
 800570e:	d100      	bne.n	8005712 <set_conf+0x82>
 8005710:	e088      	b.n	8005824 <set_conf+0x194>
 8005712:	e106      	b.n	8005922 <set_conf+0x292>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8005714:	2338      	movs	r3, #56	@ 0x38
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	225a      	movs	r2, #90	@ 0x5a
 800571a:	701a      	strb	r2, [r3, #0]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	885b      	ldrh	r3, [r3, #2]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	0011      	movs	r1, r2
 8005724:	0018      	movs	r0, r3
 8005726:	f7ff fa0b 	bl	8004b40 <calc_res_heat>
 800572a:	0003      	movs	r3, r0
 800572c:	001a      	movs	r2, r3
 800572e:	232c      	movs	r3, #44	@ 0x2c
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	701a      	strb	r2, [r3, #0]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8005734:	2320      	movs	r3, #32
 8005736:	18fb      	adds	r3, r7, r3
 8005738:	2264      	movs	r2, #100	@ 0x64
 800573a:	701a      	strb	r2, [r3, #0]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	889b      	ldrh	r3, [r3, #4]
 8005740:	0018      	movs	r0, r3
 8005742:	f7ff fac9 	bl	8004cd8 <calc_gas_wait>
 8005746:	0003      	movs	r3, r0
 8005748:	001a      	movs	r2, r3
 800574a:	2314      	movs	r3, #20
 800574c:	18fb      	adds	r3, r7, r3
 800574e:	701a      	strb	r2, [r3, #0]
            (*nb_conv) = 0;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8005756:	2345      	movs	r3, #69	@ 0x45
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
            break;
 800575e:	e0e6      	b.n	800592e <set_conf+0x29e>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d003      	beq.n	8005770 <set_conf+0xe0>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d104      	bne.n	800577a <set_conf+0xea>
            {
                rslt = BME68X_E_NULL_PTR;
 8005770:	2347      	movs	r3, #71	@ 0x47
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	22ff      	movs	r2, #255	@ 0xff
 8005776:	701a      	strb	r2, [r3, #0]
                break;
 8005778:	e0d9      	b.n	800592e <set_conf+0x29e>
            }

            for (i = 0; i < conf->profile_len; i++)
 800577a:	2346      	movs	r3, #70	@ 0x46
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	2200      	movs	r2, #0
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	e03e      	b.n	8005802 <set_conf+0x172>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8005784:	2046      	movs	r0, #70	@ 0x46
 8005786:	183b      	adds	r3, r7, r0
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	183a      	adds	r2, r7, r0
 800578c:	7812      	ldrb	r2, [r2, #0]
 800578e:	325a      	adds	r2, #90	@ 0x5a
 8005790:	b2d1      	uxtb	r1, r2
 8005792:	2238      	movs	r2, #56	@ 0x38
 8005794:	18ba      	adds	r2, r7, r2
 8005796:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	183b      	adds	r3, r7, r0
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	18d3      	adds	r3, r2, r3
 80057a4:	881a      	ldrh	r2, [r3, #0]
 80057a6:	0005      	movs	r5, r0
 80057a8:	183b      	adds	r3, r7, r0
 80057aa:	781c      	ldrb	r4, [r3, #0]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	0019      	movs	r1, r3
 80057b0:	0010      	movs	r0, r2
 80057b2:	f7ff f9c5 	bl	8004b40 <calc_res_heat>
 80057b6:	0003      	movs	r3, r0
 80057b8:	001a      	movs	r2, r3
 80057ba:	232c      	movs	r3, #44	@ 0x2c
 80057bc:	18fb      	adds	r3, r7, r3
 80057be:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80057c0:	0028      	movs	r0, r5
 80057c2:	183b      	adds	r3, r7, r0
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	183a      	adds	r2, r7, r0
 80057c8:	7812      	ldrb	r2, [r2, #0]
 80057ca:	3264      	adds	r2, #100	@ 0x64
 80057cc:	b2d1      	uxtb	r1, r2
 80057ce:	2220      	movs	r2, #32
 80057d0:	18ba      	adds	r2, r7, r2
 80057d2:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	183b      	adds	r3, r7, r0
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	18d3      	adds	r3, r2, r3
 80057e0:	881a      	ldrh	r2, [r3, #0]
 80057e2:	0005      	movs	r5, r0
 80057e4:	183b      	adds	r3, r7, r0
 80057e6:	781c      	ldrb	r4, [r3, #0]
 80057e8:	0010      	movs	r0, r2
 80057ea:	f7ff fa75 	bl	8004cd8 <calc_gas_wait>
 80057ee:	0003      	movs	r3, r0
 80057f0:	001a      	movs	r2, r3
 80057f2:	2314      	movs	r3, #20
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	551a      	strb	r2, [r3, r4]
            for (i = 0; i < conf->profile_len; i++)
 80057f8:	197b      	adds	r3, r7, r5
 80057fa:	781a      	ldrb	r2, [r3, #0]
 80057fc:	197b      	adds	r3, r7, r5
 80057fe:	3201      	adds	r2, #1
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	7c1b      	ldrb	r3, [r3, #16]
 8005806:	2246      	movs	r2, #70	@ 0x46
 8005808:	18ba      	adds	r2, r7, r2
 800580a:	7812      	ldrb	r2, [r2, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d3b9      	bcc.n	8005784 <set_conf+0xf4>
            }

            (*nb_conv) = conf->profile_len;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	7c1a      	ldrb	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8005818:	2345      	movs	r3, #69	@ 0x45
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	7c12      	ldrb	r2, [r2, #16]
 8005820:	701a      	strb	r2, [r3, #0]
            break;
 8005822:	e084      	b.n	800592e <set_conf+0x29e>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <set_conf+0x1a4>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <set_conf+0x1ae>
            {
                rslt = BME68X_E_NULL_PTR;
 8005834:	2347      	movs	r3, #71	@ 0x47
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	22ff      	movs	r2, #255	@ 0xff
 800583a:	701a      	strb	r2, [r3, #0]
                break;
 800583c:	e077      	b.n	800592e <set_conf+0x29e>
            }

            if (conf->shared_heatr_dur == 0)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8a5b      	ldrh	r3, [r3, #18]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d103      	bne.n	800584e <set_conf+0x1be>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8005846:	2347      	movs	r3, #71	@ 0x47
 8005848:	18fb      	adds	r3, r7, r3
 800584a:	2203      	movs	r2, #3
 800584c:	701a      	strb	r2, [r3, #0]
            }

            for (i = 0; i < conf->profile_len; i++)
 800584e:	2346      	movs	r3, #70	@ 0x46
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	e039      	b.n	80058cc <set_conf+0x23c>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8005858:	2046      	movs	r0, #70	@ 0x46
 800585a:	183b      	adds	r3, r7, r0
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	183a      	adds	r2, r7, r0
 8005860:	7812      	ldrb	r2, [r2, #0]
 8005862:	325a      	adds	r2, #90	@ 0x5a
 8005864:	b2d1      	uxtb	r1, r2
 8005866:	2238      	movs	r2, #56	@ 0x38
 8005868:	18ba      	adds	r2, r7, r2
 800586a:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	183b      	adds	r3, r7, r0
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	18d3      	adds	r3, r2, r3
 8005878:	881a      	ldrh	r2, [r3, #0]
 800587a:	0005      	movs	r5, r0
 800587c:	183b      	adds	r3, r7, r0
 800587e:	781c      	ldrb	r4, [r3, #0]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	0019      	movs	r1, r3
 8005884:	0010      	movs	r0, r2
 8005886:	f7ff f95b 	bl	8004b40 <calc_res_heat>
 800588a:	0003      	movs	r3, r0
 800588c:	001a      	movs	r2, r3
 800588e:	232c      	movs	r3, #44	@ 0x2c
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8005894:	0028      	movs	r0, r5
 8005896:	183b      	adds	r3, r7, r0
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	183a      	adds	r2, r7, r0
 800589c:	7812      	ldrb	r2, [r2, #0]
 800589e:	3264      	adds	r2, #100	@ 0x64
 80058a0:	b2d1      	uxtb	r1, r2
 80058a2:	2220      	movs	r2, #32
 80058a4:	18ba      	adds	r2, r7, r2
 80058a6:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	183b      	adds	r3, r7, r0
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	005b      	lsls	r3, r3, #1
 80058b2:	18d3      	adds	r3, r2, r3
 80058b4:	881a      	ldrh	r2, [r3, #0]
 80058b6:	183b      	adds	r3, r7, r0
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	b2d1      	uxtb	r1, r2
 80058bc:	2214      	movs	r2, #20
 80058be:	18ba      	adds	r2, r7, r2
 80058c0:	54d1      	strb	r1, [r2, r3]
            for (i = 0; i < conf->profile_len; i++)
 80058c2:	183b      	adds	r3, r7, r0
 80058c4:	781a      	ldrb	r2, [r3, #0]
 80058c6:	183b      	adds	r3, r7, r0
 80058c8:	3201      	adds	r2, #1
 80058ca:	701a      	strb	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	7c1b      	ldrb	r3, [r3, #16]
 80058d0:	2246      	movs	r2, #70	@ 0x46
 80058d2:	18ba      	adds	r2, r7, r2
 80058d4:	7812      	ldrb	r2, [r2, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d3be      	bcc.n	8005858 <set_conf+0x1c8>
            }

            (*nb_conv) = conf->profile_len;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	7c1a      	ldrb	r2, [r3, #16]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 80058e2:	2345      	movs	r3, #69	@ 0x45
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	7c12      	ldrb	r2, [r2, #16]
 80058ea:	701a      	strb	r2, [r3, #0]
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8a5b      	ldrh	r3, [r3, #18]
 80058f0:	0018      	movs	r0, r3
 80058f2:	f000 f84b 	bl	800598c <calc_heatr_dur_shared>
 80058f6:	0003      	movs	r3, r0
 80058f8:	001a      	movs	r2, r3
 80058fa:	2144      	movs	r1, #68	@ 0x44
 80058fc:	187b      	adds	r3, r7, r1
 80058fe:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8005900:	2247      	movs	r2, #71	@ 0x47
 8005902:	18bb      	adds	r3, r7, r2
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	b25b      	sxtb	r3, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10f      	bne.n	800592c <set_conf+0x29c>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 800590c:	18bc      	adds	r4, r7, r2
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	1879      	adds	r1, r7, r1
 8005912:	2243      	movs	r2, #67	@ 0x43
 8005914:	18b8      	adds	r0, r7, r2
 8005916:	2201      	movs	r2, #1
 8005918:	f7fd ff83 	bl	8003822 <bme68x_set_regs>
 800591c:	0003      	movs	r3, r0
 800591e:	7023      	strb	r3, [r4, #0]
            }

            break;
 8005920:	e004      	b.n	800592c <set_conf+0x29c>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8005922:	2347      	movs	r3, #71	@ 0x47
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	2201      	movs	r2, #1
 8005928:	701a      	strb	r2, [r3, #0]
 800592a:	e000      	b.n	800592e <set_conf+0x29e>
            break;
 800592c:	46c0      	nop			@ (mov r8, r8)
    }

    if (rslt == BME68X_OK)
 800592e:	2147      	movs	r1, #71	@ 0x47
 8005930:	187b      	adds	r3, r7, r1
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	b25b      	sxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10c      	bne.n	8005954 <set_conf+0x2c4>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 800593a:	2345      	movs	r3, #69	@ 0x45
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	781a      	ldrb	r2, [r3, #0]
 8005940:	187c      	adds	r4, r7, r1
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	212c      	movs	r1, #44	@ 0x2c
 8005946:	1879      	adds	r1, r7, r1
 8005948:	2038      	movs	r0, #56	@ 0x38
 800594a:	1838      	adds	r0, r7, r0
 800594c:	f7fd ff69 	bl	8003822 <bme68x_set_regs>
 8005950:	0003      	movs	r3, r0
 8005952:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8005954:	2147      	movs	r1, #71	@ 0x47
 8005956:	187b      	adds	r3, r7, r1
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	b25b      	sxtb	r3, r3
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10c      	bne.n	800597a <set_conf+0x2ea>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8005960:	2345      	movs	r3, #69	@ 0x45
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	781a      	ldrb	r2, [r3, #0]
 8005966:	187c      	adds	r4, r7, r1
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2114      	movs	r1, #20
 800596c:	1879      	adds	r1, r7, r1
 800596e:	2020      	movs	r0, #32
 8005970:	1838      	adds	r0, r7, r0
 8005972:	f7fd ff56 	bl	8003822 <bme68x_set_regs>
 8005976:	0003      	movs	r3, r0
 8005978:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800597a:	2347      	movs	r3, #71	@ 0x47
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	b25b      	sxtb	r3, r3
}
 8005982:	0018      	movs	r0, r3
 8005984:	46bd      	mov	sp, r7
 8005986:	b012      	add	sp, #72	@ 0x48
 8005988:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800598c <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	0002      	movs	r2, r0
 8005994:	1dbb      	adds	r3, r7, #6
 8005996:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 8005998:	230f      	movs	r3, #15
 800599a:	18fb      	adds	r3, r7, r3
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
    uint8_t heatdurval;

    if (dur >= 0x783)
 80059a0:	1dbb      	adds	r3, r7, #6
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005a20 <calc_heatr_dur_shared+0x94>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d904      	bls.n	80059b4 <calc_heatr_dur_shared+0x28>
    {
        heatdurval = 0xff; /* Max duration */
 80059aa:	230e      	movs	r3, #14
 80059ac:	18fb      	adds	r3, r7, r3
 80059ae:	22ff      	movs	r2, #255	@ 0xff
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	e02e      	b.n	8005a12 <calc_heatr_dur_shared+0x86>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 80059b4:	1dbb      	adds	r3, r7, #6
 80059b6:	881a      	ldrh	r2, [r3, #0]
 80059b8:	0013      	movs	r3, r2
 80059ba:	015b      	lsls	r3, r3, #5
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	189b      	adds	r3, r3, r2
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	001a      	movs	r2, r3
 80059c6:	23de      	movs	r3, #222	@ 0xde
 80059c8:	33ff      	adds	r3, #255	@ 0xff
 80059ca:	0019      	movs	r1, r3
 80059cc:	0010      	movs	r0, r2
 80059ce:	f7fa fbb5 	bl	800013c <__udivsi3>
 80059d2:	0003      	movs	r3, r0
 80059d4:	001a      	movs	r2, r3
 80059d6:	1dbb      	adds	r3, r7, #6
 80059d8:	801a      	strh	r2, [r3, #0]
        while (dur > 0x3F)
 80059da:	e00a      	b.n	80059f2 <calc_heatr_dur_shared+0x66>
        {
            dur = dur >> 2;
 80059dc:	1dbb      	adds	r3, r7, #6
 80059de:	1dba      	adds	r2, r7, #6
 80059e0:	8812      	ldrh	r2, [r2, #0]
 80059e2:	0892      	lsrs	r2, r2, #2
 80059e4:	801a      	strh	r2, [r3, #0]
            factor += 1;
 80059e6:	220f      	movs	r2, #15
 80059e8:	18bb      	adds	r3, r7, r2
 80059ea:	18ba      	adds	r2, r7, r2
 80059ec:	7812      	ldrb	r2, [r2, #0]
 80059ee:	3201      	adds	r2, #1
 80059f0:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 80059f2:	1dbb      	adds	r3, r7, #6
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80059f8:	d8f0      	bhi.n	80059dc <calc_heatr_dur_shared+0x50>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 80059fa:	1dbb      	adds	r3, r7, #6
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b2d9      	uxtb	r1, r3
 8005a00:	230f      	movs	r3, #15
 8005a02:	18fb      	adds	r3, r7, r3
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	019b      	lsls	r3, r3, #6
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	230e      	movs	r3, #14
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	188a      	adds	r2, r1, r2
 8005a10:	701a      	strb	r2, [r3, #0]
    }

    return heatdurval;
 8005a12:	230e      	movs	r3, #14
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	781b      	ldrb	r3, [r3, #0]
}
 8005a18:	0018      	movs	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b004      	add	sp, #16
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	00000782 	.word	0x00000782

08005a24 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	603a      	str	r2, [r7, #0]
 8005a2c:	1dfb      	adds	r3, r7, #7
 8005a2e:	1c02      	adds	r2, r0, #0
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	1dbb      	adds	r3, r7, #6
 8005a34:	1c0a      	adds	r2, r1, #0
 8005a36:	701a      	strb	r2, [r3, #0]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8005a38:	1dfb      	adds	r3, r7, #7
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	18d3      	adds	r3, r2, r3
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	789a      	ldrb	r2, [r3, #2]
 8005a46:	210e      	movs	r1, #14
 8005a48:	187b      	adds	r3, r7, r1
 8005a4a:	801a      	strh	r2, [r3, #0]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8005a4c:	1dbb      	adds	r3, r7, #6
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	18d3      	adds	r3, r2, r3
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	789a      	ldrb	r2, [r3, #2]
 8005a5a:	200c      	movs	r0, #12
 8005a5c:	183b      	adds	r3, r7, r0
 8005a5e:	801a      	strh	r2, [r3, #0]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8005a60:	1dfb      	adds	r3, r7, #7
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	18d3      	adds	r3, r2, r3
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	b25b      	sxtb	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	da2c      	bge.n	8005ace <sort_sensor_data+0xaa>
 8005a74:	1dbb      	adds	r3, r7, #6
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	18d3      	adds	r3, r2, r3
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	b25b      	sxtb	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	da22      	bge.n	8005ace <sort_sensor_data+0xaa>
    {
        int16_t diff = meas_index2 - meas_index1;
 8005a88:	183b      	adds	r3, r7, r0
 8005a8a:	881a      	ldrh	r2, [r3, #0]
 8005a8c:	187b      	adds	r3, r7, r1
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	210a      	movs	r1, #10
 8005a96:	187b      	adds	r3, r7, r1
 8005a98:	801a      	strh	r2, [r3, #0]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8005a9a:	000a      	movs	r2, r1
 8005a9c:	18bb      	adds	r3, r7, r2
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	5e5b      	ldrsh	r3, [r3, r1]
 8005aa2:	3302      	adds	r3, #2
 8005aa4:	db04      	blt.n	8005ab0 <sort_sensor_data+0x8c>
 8005aa6:	18bb      	adds	r3, r7, r2
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	5e9b      	ldrsh	r3, [r3, r2]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	db05      	blt.n	8005abc <sort_sensor_data+0x98>
 8005ab0:	230a      	movs	r3, #10
 8005ab2:	18fb      	adds	r3, r7, r3
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	5e9b      	ldrsh	r3, [r3, r2]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	dd1b      	ble.n	8005af4 <sort_sensor_data+0xd0>
        {
            swap_fields(low_index, high_index, field);
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	1dbb      	adds	r3, r7, #6
 8005ac0:	7819      	ldrb	r1, [r3, #0]
 8005ac2:	1dfb      	adds	r3, r7, #7
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	0018      	movs	r0, r3
 8005ac8:	f000 f819 	bl	8005afe <swap_fields>
    {
 8005acc:	e012      	b.n	8005af4 <sort_sensor_data+0xd0>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8005ace:	1dbb      	adds	r3, r7, #6
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	18d3      	adds	r3, r2, r3
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	b25b      	sxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	da09      	bge.n	8005af6 <sort_sensor_data+0xd2>
    {
        swap_fields(low_index, high_index, field);
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	1dbb      	adds	r3, r7, #6
 8005ae6:	7819      	ldrb	r1, [r3, #0]
 8005ae8:	1dfb      	adds	r3, r7, #7
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	0018      	movs	r0, r3
 8005aee:	f000 f806 	bl	8005afe <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8005af2:	e000      	b.n	8005af6 <sort_sensor_data+0xd2>
    {
 8005af4:	46c0      	nop			@ (mov r8, r8)
}
 8005af6:	46c0      	nop			@ (mov r8, r8)
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b004      	add	sp, #16
 8005afc:	bd80      	pop	{r7, pc}

08005afe <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b084      	sub	sp, #16
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	603a      	str	r2, [r7, #0]
 8005b06:	1dfb      	adds	r3, r7, #7
 8005b08:	1c02      	adds	r2, r0, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
 8005b0c:	1dbb      	adds	r3, r7, #6
 8005b0e:	1c0a      	adds	r2, r1, #0
 8005b10:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *temp;

    temp = field[index1];
 8005b12:	1dfb      	adds	r3, r7, #7
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	683a      	ldr	r2, [r7, #0]
 8005b1a:	18d3      	adds	r3, r2, r3
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8005b20:	1dbb      	adds	r3, r7, #6
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	18d2      	adds	r2, r2, r3
 8005b2a:	1dfb      	adds	r3, r7, #7
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	18cb      	adds	r3, r1, r3
 8005b34:	6812      	ldr	r2, [r2, #0]
 8005b36:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8005b38:	1dbb      	adds	r3, r7, #6
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	18d3      	adds	r3, r2, r3
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	601a      	str	r2, [r3, #0]
}
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b004      	add	sp, #16
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8005b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b50:	b08f      	sub	sp, #60	@ 0x3c
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8005b56:	2537      	movs	r5, #55	@ 0x37
 8005b58:	197c      	adds	r4, r7, r5
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	260c      	movs	r6, #12
 8005b5e:	19b9      	adds	r1, r7, r6
 8005b60:	2217      	movs	r2, #23
 8005b62:	208a      	movs	r0, #138	@ 0x8a
 8005b64:	f7fd ff0a 	bl	800397c <bme68x_get_regs>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8005b6c:	197b      	adds	r3, r7, r5
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	b25b      	sxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10b      	bne.n	8005b8e <get_calib_data+0x40>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8005b76:	197c      	adds	r4, r7, r5
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	19bb      	adds	r3, r7, r6
 8005b7c:	3317      	adds	r3, #23
 8005b7e:	0019      	movs	r1, r3
 8005b80:	0013      	movs	r3, r2
 8005b82:	220e      	movs	r2, #14
 8005b84:	20e1      	movs	r0, #225	@ 0xe1
 8005b86:	f7fd fef9 	bl	800397c <bme68x_get_regs>
 8005b8a:	0003      	movs	r3, r0
 8005b8c:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8005b8e:	2237      	movs	r2, #55	@ 0x37
 8005b90:	18bb      	adds	r3, r7, r2
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	b25b      	sxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10c      	bne.n	8005bb4 <get_calib_data+0x66>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8005b9a:	18bc      	adds	r4, r7, r2
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	230c      	movs	r3, #12
 8005ba0:	18fb      	adds	r3, r7, r3
 8005ba2:	3325      	adds	r3, #37	@ 0x25
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	0013      	movs	r3, r2
 8005ba8:	2205      	movs	r2, #5
 8005baa:	2000      	movs	r0, #0
 8005bac:	f7fd fee6 	bl	800397c <bme68x_get_regs>
 8005bb0:	0003      	movs	r3, r0
 8005bb2:	7023      	strb	r3, [r4, #0]
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8005bb4:	2337      	movs	r3, #55	@ 0x37
 8005bb6:	18fb      	adds	r3, r7, r3
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	b25b      	sxtb	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d000      	beq.n	8005bc2 <get_calib_data+0x74>
 8005bc0:	e0f4      	b.n	8005dac <get_calib_data+0x25e>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8005bc2:	210c      	movs	r1, #12
 8005bc4:	187b      	adds	r3, r7, r1
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	5c9b      	ldrb	r3, [r3, r2]
 8005bca:	b21b      	sxth	r3, r3
 8005bcc:	021b      	lsls	r3, r3, #8
 8005bce:	b21a      	sxth	r2, r3
 8005bd0:	187b      	adds	r3, r7, r1
 8005bd2:	7fdb      	ldrb	r3, [r3, #31]
 8005bd4:	b21b      	sxth	r3, r3
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	b21b      	sxth	r3, r3
 8005bda:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8005be0:	187b      	adds	r3, r7, r1
 8005be2:	785b      	ldrb	r3, [r3, #1]
 8005be4:	b21b      	sxth	r3, r3
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	b21a      	sxth	r2, r3
 8005bea:	187b      	adds	r3, r7, r1
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	b21b      	sxth	r3, r3
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8005bf8:	0008      	movs	r0, r1
 8005bfa:	187b      	adds	r3, r7, r1
 8005bfc:	789b      	ldrb	r3, [r3, #2]
 8005bfe:	b259      	sxtb	r1, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2222      	movs	r2, #34	@ 0x22
 8005c04:	5499      	strb	r1, [r3, r2]

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8005c06:	0001      	movs	r1, r0
 8005c08:	187b      	adds	r3, r7, r1
 8005c0a:	795b      	ldrb	r3, [r3, #5]
 8005c0c:	b21b      	sxth	r3, r3
 8005c0e:	021b      	lsls	r3, r3, #8
 8005c10:	b21a      	sxth	r2, r3
 8005c12:	187b      	adds	r3, r7, r1
 8005c14:	791b      	ldrb	r3, [r3, #4]
 8005c16:	b21b      	sxth	r3, r3
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	b21b      	sxth	r3, r3
 8005c1c:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8005c22:	187b      	adds	r3, r7, r1
 8005c24:	79db      	ldrb	r3, [r3, #7]
 8005c26:	b21b      	sxth	r3, r3
 8005c28:	021b      	lsls	r3, r3, #8
 8005c2a:	b21a      	sxth	r2, r3
 8005c2c:	187b      	adds	r3, r7, r1
 8005c2e:	799b      	ldrb	r3, [r3, #6]
 8005c30:	b21b      	sxth	r3, r3
 8005c32:	4313      	orrs	r3, r2
 8005c34:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8005c3a:	0008      	movs	r0, r1
 8005c3c:	187b      	adds	r3, r7, r1
 8005c3e:	7a1b      	ldrb	r3, [r3, #8]
 8005c40:	b259      	sxtb	r1, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2228      	movs	r2, #40	@ 0x28
 8005c46:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8005c48:	0001      	movs	r1, r0
 8005c4a:	187b      	adds	r3, r7, r1
 8005c4c:	7adb      	ldrb	r3, [r3, #11]
 8005c4e:	b21b      	sxth	r3, r3
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	b21a      	sxth	r2, r3
 8005c54:	187b      	adds	r3, r7, r1
 8005c56:	7a9b      	ldrb	r3, [r3, #10]
 8005c58:	b21b      	sxth	r3, r3
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8005c62:	187b      	adds	r3, r7, r1
 8005c64:	7b5b      	ldrb	r3, [r3, #13]
 8005c66:	b21b      	sxth	r3, r3
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	b21a      	sxth	r2, r3
 8005c6c:	187b      	adds	r3, r7, r1
 8005c6e:	7b1b      	ldrb	r3, [r3, #12]
 8005c70:	b21b      	sxth	r3, r3
 8005c72:	4313      	orrs	r3, r2
 8005c74:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8005c7a:	0008      	movs	r0, r1
 8005c7c:	183b      	adds	r3, r7, r0
 8005c7e:	7bdb      	ldrb	r3, [r3, #15]
 8005c80:	b259      	sxtb	r1, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	222e      	movs	r2, #46	@ 0x2e
 8005c86:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8005c88:	183b      	adds	r3, r7, r0
 8005c8a:	7b9b      	ldrb	r3, [r3, #14]
 8005c8c:	b259      	sxtb	r1, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	222f      	movs	r2, #47	@ 0x2f
 8005c92:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8005c94:	183b      	adds	r3, r7, r0
 8005c96:	7cdb      	ldrb	r3, [r3, #19]
 8005c98:	b21b      	sxth	r3, r3
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	b21a      	sxth	r2, r3
 8005c9e:	183b      	adds	r3, r7, r0
 8005ca0:	7c9b      	ldrb	r3, [r3, #18]
 8005ca2:	b21b      	sxth	r3, r3
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8005cac:	183b      	adds	r3, r7, r0
 8005cae:	7d5b      	ldrb	r3, [r3, #21]
 8005cb0:	b21b      	sxth	r3, r3
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	b21a      	sxth	r2, r3
 8005cb6:	183b      	adds	r3, r7, r0
 8005cb8:	7d1b      	ldrb	r3, [r3, #20]
 8005cba:	b21b      	sxth	r3, r3
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8005cc4:	183b      	adds	r3, r7, r0
 8005cc6:	7d99      	ldrb	r1, [r3, #22]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2234      	movs	r2, #52	@ 0x34
 8005ccc:	5499      	strb	r1, [r3, r2]

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8005cce:	183b      	adds	r3, r7, r0
 8005cd0:	7e5b      	ldrb	r3, [r3, #25]
 8005cd2:	b21b      	sxth	r3, r3
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8005cd8:	183b      	adds	r3, r7, r0
 8005cda:	7e1b      	ldrb	r3, [r3, #24]
 8005cdc:	b21b      	sxth	r3, r3
 8005cde:	210f      	movs	r1, #15
 8005ce0:	400b      	ands	r3, r1
 8005ce2:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	b21b      	sxth	r3, r3
 8005ce8:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8005cee:	183b      	adds	r3, r7, r0
 8005cf0:	7ddb      	ldrb	r3, [r3, #23]
 8005cf2:	b21b      	sxth	r3, r3
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	b21a      	sxth	r2, r3
 8005cf8:	183b      	adds	r3, r7, r0
 8005cfa:	7e1b      	ldrb	r3, [r3, #24]
 8005cfc:	091b      	lsrs	r3, r3, #4
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	b21b      	sxth	r3, r3
 8005d02:	4313      	orrs	r3, r2
 8005d04:	b21b      	sxth	r3, r3
 8005d06:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8005d0c:	183b      	adds	r3, r7, r0
 8005d0e:	7e9b      	ldrb	r3, [r3, #26]
 8005d10:	b25a      	sxtb	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8005d16:	183b      	adds	r3, r7, r0
 8005d18:	7edb      	ldrb	r3, [r3, #27]
 8005d1a:	b25a      	sxtb	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8005d20:	183b      	adds	r3, r7, r0
 8005d22:	7f1b      	ldrb	r3, [r3, #28]
 8005d24:	b25a      	sxtb	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8005d2a:	183b      	adds	r3, r7, r0
 8005d2c:	7f5a      	ldrb	r2, [r3, #29]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8005d32:	183b      	adds	r3, r7, r0
 8005d34:	7f9b      	ldrb	r3, [r3, #30]
 8005d36:	b25a      	sxtb	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8005d3c:	183b      	adds	r3, r7, r0
 8005d3e:	2223      	movs	r2, #35	@ 0x23
 8005d40:	5c9b      	ldrb	r3, [r3, r2]
 8005d42:	b25a      	sxtb	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8005d48:	183b      	adds	r3, r7, r0
 8005d4a:	2222      	movs	r2, #34	@ 0x22
 8005d4c:	5c9b      	ldrb	r3, [r3, r2]
 8005d4e:	b21b      	sxth	r3, r3
 8005d50:	021b      	lsls	r3, r3, #8
 8005d52:	b21a      	sxth	r2, r3
 8005d54:	183b      	adds	r3, r7, r0
 8005d56:	2121      	movs	r1, #33	@ 0x21
 8005d58:	5c5b      	ldrb	r3, [r3, r1]
 8005d5a:	b21b      	sxth	r3, r3
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8005d64:	183b      	adds	r3, r7, r0
 8005d66:	2224      	movs	r2, #36	@ 0x24
 8005d68:	5c9b      	ldrb	r3, [r3, r2]
 8005d6a:	b25a      	sxtb	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8005d70:	183b      	adds	r3, r7, r0
 8005d72:	2227      	movs	r2, #39	@ 0x27
 8005d74:	5c9b      	ldrb	r3, [r3, r2]
 8005d76:	001a      	movs	r2, r3
 8005d78:	2330      	movs	r3, #48	@ 0x30
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	d500      	bpl.n	8005d80 <get_calib_data+0x232>
 8005d7e:	330f      	adds	r3, #15
 8005d80:	111b      	asrs	r3, r3, #4
 8005d82:	b2d9      	uxtb	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	223c      	movs	r2, #60	@ 0x3c
 8005d88:	5499      	strb	r1, [r3, r2]
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8005d8a:	200c      	movs	r0, #12
 8005d8c:	183b      	adds	r3, r7, r0
 8005d8e:	2225      	movs	r2, #37	@ 0x25
 8005d90:	5c9b      	ldrb	r3, [r3, r2]
 8005d92:	b259      	sxtb	r1, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	223d      	movs	r2, #61	@ 0x3d
 8005d98:	5499      	strb	r1, [r3, r2]
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8005d9a:	183b      	adds	r3, r7, r0
 8005d9c:	2229      	movs	r2, #41	@ 0x29
 8005d9e:	5c9b      	ldrb	r3, [r3, r2]
 8005da0:	b25b      	sxtb	r3, r3
 8005da2:	111b      	asrs	r3, r3, #4
 8005da4:	b259      	sxtb	r1, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	223e      	movs	r2, #62	@ 0x3e
 8005daa:	5499      	strb	r1, [r3, r2]
    }

    return rslt;
 8005dac:	2337      	movs	r3, #55	@ 0x37
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	b25b      	sxtb	r3, r3
}
 8005db4:	0018      	movs	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b00f      	add	sp, #60	@ 0x3c
 8005dba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dbc <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8005dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8005dc4:	250e      	movs	r5, #14
 8005dc6:	197b      	adds	r3, r7, r5
 8005dc8:	2200      	movs	r2, #0
 8005dca:	701a      	strb	r2, [r3, #0]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8005dcc:	260f      	movs	r6, #15
 8005dce:	19bc      	adds	r4, r7, r6
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	1979      	adds	r1, r7, r5
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	20f0      	movs	r0, #240	@ 0xf0
 8005dd8:	f7fd fdd0 	bl	800397c <bme68x_get_regs>
 8005ddc:	0003      	movs	r3, r0
 8005dde:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 8005de0:	19bb      	adds	r3, r7, r6
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <read_variant_id+0x38>
    {
        dev->variant_id = reg_data;
 8005dea:	197b      	adds	r3, r7, r5
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	001a      	movs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8005df4:	230f      	movs	r3, #15
 8005df6:	18fb      	adds	r3, r7, r3
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	b25b      	sxtb	r3, r3
}
 8005dfc:	0018      	movs	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b005      	add	sp, #20
 8005e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e06:	46c6      	mov	lr, r8
 8005e08:	b500      	push	{lr}
 8005e0a:	4ceb      	ldr	r4, [pc, #940]	@ (80061b8 <main+0x3b4>)
 8005e0c:	44a5      	add	sp, r4
 8005e0e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e10:	f000 fd70 	bl	80068f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e14:	f000 f9fc 	bl	8006210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e18:	f000 fad0 	bl	80063bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005e1c:	f000 fa80 	bl	8006320 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8005e20:	f000 fa3e 	bl	80062a0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_I2C_IsDeviceReady(&hi2c1, BME68X_I2C_ADDR << 1, 3, HAL_MAX_DELAY) != HAL_OK) {
 8005e24:	2301      	movs	r3, #1
 8005e26:	425b      	negs	r3, r3
 8005e28:	48e4      	ldr	r0, [pc, #912]	@ (80061bc <main+0x3b8>)
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	21ee      	movs	r1, #238	@ 0xee
 8005e2e:	f001 fb2b 	bl	8007488 <HAL_I2C_IsDeviceReady>
 8005e32:	1e03      	subs	r3, r0, #0
 8005e34:	d01d      	beq.n	8005e72 <main+0x6e>
          char err[] = "BME68x not found on I2C bus\r\n";
 8005e36:	25ac      	movs	r5, #172	@ 0xac
 8005e38:	006d      	lsls	r5, r5, #1
 8005e3a:	2610      	movs	r6, #16
 8005e3c:	19ab      	adds	r3, r5, r6
 8005e3e:	19db      	adds	r3, r3, r7
 8005e40:	4adf      	ldr	r2, [pc, #892]	@ (80061c0 <main+0x3bc>)
 8005e42:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005e44:	c313      	stmia	r3!, {r0, r1, r4}
 8005e46:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005e48:	c313      	stmia	r3!, {r0, r1, r4}
 8005e4a:	6811      	ldr	r1, [r2, #0]
 8005e4c:	6019      	str	r1, [r3, #0]
 8005e4e:	8892      	ldrh	r2, [r2, #4]
 8005e50:	809a      	strh	r2, [r3, #4]
          HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 8005e52:	19ab      	adds	r3, r5, r6
 8005e54:	19db      	adds	r3, r3, r7
 8005e56:	0018      	movs	r0, r3
 8005e58:	f7fa f954 	bl	8000104 <strlen>
 8005e5c:	0003      	movs	r3, r0
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	2301      	movs	r3, #1
 8005e62:	425b      	negs	r3, r3
 8005e64:	19a9      	adds	r1, r5, r6
 8005e66:	19c9      	adds	r1, r1, r7
 8005e68:	48d6      	ldr	r0, [pc, #856]	@ (80061c4 <main+0x3c0>)
 8005e6a:	f002 febb 	bl	8008be4 <HAL_UART_Transmit>
          while(1);
 8005e6e:	46c0      	nop			@ (mov r8, r8)
 8005e70:	e7fd      	b.n	8005e6e <main+0x6a>
      }

      char msg[128];
      snprintf(msg, sizeof(msg), "BME68x found on I2C bus\r\n");
 8005e72:	4ad5      	ldr	r2, [pc, #852]	@ (80061c8 <main+0x3c4>)
 8005e74:	24bc      	movs	r4, #188	@ 0xbc
 8005e76:	0064      	lsls	r4, r4, #1
 8005e78:	2610      	movs	r6, #16
 8005e7a:	19a3      	adds	r3, r4, r6
 8005e7c:	19db      	adds	r3, r3, r7
 8005e7e:	2180      	movs	r1, #128	@ 0x80
 8005e80:	0018      	movs	r0, r3
 8005e82:	f004 f9bf 	bl	800a204 <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8005e86:	19a3      	adds	r3, r4, r6
 8005e88:	19db      	adds	r3, r3, r7
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f7fa f93a 	bl	8000104 <strlen>
 8005e90:	0003      	movs	r3, r0
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	2301      	movs	r3, #1
 8005e96:	425b      	negs	r3, r3
 8005e98:	19a1      	adds	r1, r4, r6
 8005e9a:	19c9      	adds	r1, r1, r7
 8005e9c:	48c9      	ldr	r0, [pc, #804]	@ (80061c4 <main+0x3c0>)
 8005e9e:	f002 fea1 	bl	8008be4 <HAL_UART_Transmit>

      gas_sensor.intf = BME68X_I2C_INTF;
 8005ea2:	4bca      	ldr	r3, [pc, #808]	@ (80061cc <main+0x3c8>)
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	731a      	strb	r2, [r3, #12]
      gas_sensor.read = user_i2c_read;
 8005ea8:	4bc8      	ldr	r3, [pc, #800]	@ (80061cc <main+0x3c8>)
 8005eaa:	4ac9      	ldr	r2, [pc, #804]	@ (80061d0 <main+0x3cc>)
 8005eac:	641a      	str	r2, [r3, #64]	@ 0x40
      gas_sensor.write = user_i2c_write;
 8005eae:	4bc7      	ldr	r3, [pc, #796]	@ (80061cc <main+0x3c8>)
 8005eb0:	4ac8      	ldr	r2, [pc, #800]	@ (80061d4 <main+0x3d0>)
 8005eb2:	645a      	str	r2, [r3, #68]	@ 0x44
      gas_sensor.delay_us = user_delay_us;
 8005eb4:	4bc5      	ldr	r3, [pc, #788]	@ (80061cc <main+0x3c8>)
 8005eb6:	4ac8      	ldr	r2, [pc, #800]	@ (80061d8 <main+0x3d4>)
 8005eb8:	649a      	str	r2, [r3, #72]	@ 0x48
      gas_sensor.intf_ptr = &hi2c1;
 8005eba:	4bc4      	ldr	r3, [pc, #784]	@ (80061cc <main+0x3c8>)
 8005ebc:	4abf      	ldr	r2, [pc, #764]	@ (80061bc <main+0x3b8>)
 8005ebe:	605a      	str	r2, [r3, #4]

      rslt = bme68x_init(&gas_sensor);
 8005ec0:	4bc2      	ldr	r3, [pc, #776]	@ (80061cc <main+0x3c8>)
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f7fd fc72 	bl	80037ac <bme68x_init>
 8005ec8:	0003      	movs	r3, r0
 8005eca:	001a      	movs	r2, r3
 8005ecc:	4bc3      	ldr	r3, [pc, #780]	@ (80061dc <main+0x3d8>)
 8005ece:	701a      	strb	r2, [r3, #0]
      if (rslt != BME68X_OK) {
 8005ed0:	4bc2      	ldr	r3, [pc, #776]	@ (80061dc <main+0x3d8>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	b25b      	sxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d01e      	beq.n	8005f18 <main+0x114>
          char err[] = "Sensor initialization failed\r\n";
 8005eda:	259c      	movs	r5, #156	@ 0x9c
 8005edc:	006d      	lsls	r5, r5, #1
 8005ede:	19ab      	adds	r3, r5, r6
 8005ee0:	19db      	adds	r3, r3, r7
 8005ee2:	4abf      	ldr	r2, [pc, #764]	@ (80061e0 <main+0x3dc>)
 8005ee4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ee6:	c313      	stmia	r3!, {r0, r1, r4}
 8005ee8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005eea:	c313      	stmia	r3!, {r0, r1, r4}
 8005eec:	6811      	ldr	r1, [r2, #0]
 8005eee:	6019      	str	r1, [r3, #0]
 8005ef0:	8891      	ldrh	r1, [r2, #4]
 8005ef2:	8099      	strh	r1, [r3, #4]
 8005ef4:	7992      	ldrb	r2, [r2, #6]
 8005ef6:	719a      	strb	r2, [r3, #6]
          HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 8005ef8:	19ab      	adds	r3, r5, r6
 8005efa:	19db      	adds	r3, r3, r7
 8005efc:	0018      	movs	r0, r3
 8005efe:	f7fa f901 	bl	8000104 <strlen>
 8005f02:	0003      	movs	r3, r0
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	2301      	movs	r3, #1
 8005f08:	425b      	negs	r3, r3
 8005f0a:	19a9      	adds	r1, r5, r6
 8005f0c:	19c9      	adds	r1, r1, r7
 8005f0e:	48ad      	ldr	r0, [pc, #692]	@ (80061c4 <main+0x3c0>)
 8005f10:	f002 fe68 	bl	8008be4 <HAL_UART_Transmit>
          while (1);
 8005f14:	46c0      	nop			@ (mov r8, r8)
 8005f16:	e7fd      	b.n	8005f14 <main+0x110>
      }

      uint8_t chip_id = 0;
 8005f18:	2478      	movs	r4, #120	@ 0x78
 8005f1a:	34ff      	adds	r4, #255	@ 0xff
 8005f1c:	2510      	movs	r5, #16
 8005f1e:	1963      	adds	r3, r4, r5
 8005f20:	19db      	adds	r3, r3, r7
 8005f22:	2200      	movs	r2, #0
 8005f24:	701a      	strb	r2, [r3, #0]
      rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &chip_id, 1, &gas_sensor);
 8005f26:	4ba9      	ldr	r3, [pc, #676]	@ (80061cc <main+0x3c8>)
 8005f28:	1962      	adds	r2, r4, r5
 8005f2a:	19d1      	adds	r1, r2, r7
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	20d0      	movs	r0, #208	@ 0xd0
 8005f30:	f7fd fd24 	bl	800397c <bme68x_get_regs>
 8005f34:	0003      	movs	r3, r0
 8005f36:	001a      	movs	r2, r3
 8005f38:	4ba8      	ldr	r3, [pc, #672]	@ (80061dc <main+0x3d8>)
 8005f3a:	701a      	strb	r2, [r3, #0]
      snprintf(msg, sizeof(msg), "Chip ID: 0x%02X (Expected: 0x%02X)\r\n", chip_id, BME68X_CHIP_ID);
 8005f3c:	1963      	adds	r3, r4, r5
 8005f3e:	19db      	adds	r3, r3, r7
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	0019      	movs	r1, r3
 8005f44:	4aa7      	ldr	r2, [pc, #668]	@ (80061e4 <main+0x3e0>)
 8005f46:	24bc      	movs	r4, #188	@ 0xbc
 8005f48:	0064      	lsls	r4, r4, #1
 8005f4a:	1963      	adds	r3, r4, r5
 8005f4c:	19d8      	adds	r0, r3, r7
 8005f4e:	2361      	movs	r3, #97	@ 0x61
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	000b      	movs	r3, r1
 8005f54:	2180      	movs	r1, #128	@ 0x80
 8005f56:	f004 f955 	bl	800a204 <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8005f5a:	1963      	adds	r3, r4, r5
 8005f5c:	19db      	adds	r3, r3, r7
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f7fa f8d0 	bl	8000104 <strlen>
 8005f64:	0003      	movs	r3, r0
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	2301      	movs	r3, #1
 8005f6a:	425b      	negs	r3, r3
 8005f6c:	1961      	adds	r1, r4, r5
 8005f6e:	19c9      	adds	r1, r1, r7
 8005f70:	4894      	ldr	r0, [pc, #592]	@ (80061c4 <main+0x3c0>)
 8005f72:	f002 fe37 	bl	8008be4 <HAL_UART_Transmit>

      conf.os_hum = BME68X_OS_2X;
 8005f76:	4b9c      	ldr	r3, [pc, #624]	@ (80061e8 <main+0x3e4>)
 8005f78:	2202      	movs	r2, #2
 8005f7a:	701a      	strb	r2, [r3, #0]
      conf.os_temp = BME68X_OS_8X;
 8005f7c:	4b9a      	ldr	r3, [pc, #616]	@ (80061e8 <main+0x3e4>)
 8005f7e:	2204      	movs	r2, #4
 8005f80:	705a      	strb	r2, [r3, #1]
      conf.os_pres = BME68X_OS_4X;
 8005f82:	4b99      	ldr	r3, [pc, #612]	@ (80061e8 <main+0x3e4>)
 8005f84:	2203      	movs	r2, #3
 8005f86:	709a      	strb	r2, [r3, #2]
      conf.filter = BME68X_FILTER_SIZE_3;
 8005f88:	4b97      	ldr	r3, [pc, #604]	@ (80061e8 <main+0x3e4>)
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	70da      	strb	r2, [r3, #3]
      bme68x_set_conf(&conf, &gas_sensor);
 8005f8e:	4a8f      	ldr	r2, [pc, #572]	@ (80061cc <main+0x3c8>)
 8005f90:	4b95      	ldr	r3, [pc, #596]	@ (80061e8 <main+0x3e4>)
 8005f92:	0011      	movs	r1, r2
 8005f94:	0018      	movs	r0, r3
 8005f96:	f7fd fda3 	bl	8003ae0 <bme68x_set_conf>

      heatr_conf.enable = BME68X_ENABLE;
 8005f9a:	4b94      	ldr	r3, [pc, #592]	@ (80061ec <main+0x3e8>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	701a      	strb	r2, [r3, #0]
      heatr_conf.heatr_temp = 300;
 8005fa0:	4b92      	ldr	r3, [pc, #584]	@ (80061ec <main+0x3e8>)
 8005fa2:	2296      	movs	r2, #150	@ 0x96
 8005fa4:	0052      	lsls	r2, r2, #1
 8005fa6:	805a      	strh	r2, [r3, #2]
      heatr_conf.heatr_dur = 100;
 8005fa8:	4b90      	ldr	r3, [pc, #576]	@ (80061ec <main+0x3e8>)
 8005faa:	2264      	movs	r2, #100	@ 0x64
 8005fac:	809a      	strh	r2, [r3, #4]
      bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &gas_sensor);
 8005fae:	4a87      	ldr	r2, [pc, #540]	@ (80061cc <main+0x3c8>)
 8005fb0:	4b8e      	ldr	r3, [pc, #568]	@ (80061ec <main+0x3e8>)
 8005fb2:	0019      	movs	r1, r3
 8005fb4:	2001      	movs	r0, #1
 8005fb6:	f7fe f941 	bl	800423c <bme68x_set_heatr_conf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &gas_sensor);
 8005fba:	4b84      	ldr	r3, [pc, #528]	@ (80061cc <main+0x3c8>)
 8005fbc:	0019      	movs	r1, r3
 8005fbe:	2001      	movs	r0, #1
 8005fc0:	f7fd fede 	bl	8003d80 <bme68x_set_op_mode>
 8005fc4:	0003      	movs	r3, r0
 8005fc6:	001a      	movs	r2, r3
 8005fc8:	4b84      	ldr	r3, [pc, #528]	@ (80061dc <main+0x3d8>)
 8005fca:	701a      	strb	r2, [r3, #0]
	          if (rslt != BME68X_OK) {
 8005fcc:	4b83      	ldr	r3, [pc, #524]	@ (80061dc <main+0x3d8>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	b25b      	sxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d01a      	beq.n	800600c <main+0x208>
	              char err[] = "Set op mode failed\r\n";
 8005fd6:	2590      	movs	r5, #144	@ 0x90
 8005fd8:	006d      	lsls	r5, r5, #1
 8005fda:	2610      	movs	r6, #16
 8005fdc:	19ab      	adds	r3, r5, r6
 8005fde:	19db      	adds	r3, r3, r7
 8005fe0:	4a83      	ldr	r2, [pc, #524]	@ (80061f0 <main+0x3ec>)
 8005fe2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005fe4:	c313      	stmia	r3!, {r0, r1, r4}
 8005fe6:	ca03      	ldmia	r2!, {r0, r1}
 8005fe8:	c303      	stmia	r3!, {r0, r1}
 8005fea:	7812      	ldrb	r2, [r2, #0]
 8005fec:	701a      	strb	r2, [r3, #0]
	              HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 8005fee:	19ab      	adds	r3, r5, r6
 8005ff0:	19db      	adds	r3, r3, r7
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f7fa f886 	bl	8000104 <strlen>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	425b      	negs	r3, r3
 8006000:	19a9      	adds	r1, r5, r6
 8006002:	19c9      	adds	r1, r1, r7
 8006004:	486f      	ldr	r0, [pc, #444]	@ (80061c4 <main+0x3c0>)
 8006006:	f002 fded 	bl	8008be4 <HAL_UART_Transmit>
	              continue;
 800600a:	e0d4      	b.n	80061b6 <main+0x3b2>
	          }

	          uint32_t meas_dur = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &gas_sensor);
 800600c:	4a6f      	ldr	r2, [pc, #444]	@ (80061cc <main+0x3c8>)
 800600e:	4b76      	ldr	r3, [pc, #472]	@ (80061e8 <main+0x3e4>)
 8006010:	0019      	movs	r1, r3
 8006012:	2001      	movs	r0, #1
 8006014:	f7fd ff5c 	bl	8003ed0 <bme68x_get_meas_dur>
 8006018:	0003      	movs	r3, r0
 800601a:	21fc      	movs	r1, #252	@ 0xfc
 800601c:	0049      	lsls	r1, r1, #1
 800601e:	2410      	movs	r4, #16
 8006020:	190a      	adds	r2, r1, r4
 8006022:	19d2      	adds	r2, r2, r7
 8006024:	6013      	str	r3, [r2, #0]
	          gas_sensor.delay_us(meas_dur + 10000, gas_sensor.intf_ptr); // wait a little longer than meas_dur
 8006026:	4b69      	ldr	r3, [pc, #420]	@ (80061cc <main+0x3c8>)
 8006028:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800602a:	190b      	adds	r3, r1, r4
 800602c:	19db      	adds	r3, r3, r7
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4970      	ldr	r1, [pc, #448]	@ (80061f4 <main+0x3f0>)
 8006032:	1858      	adds	r0, r3, r1
 8006034:	4b65      	ldr	r3, [pc, #404]	@ (80061cc <main+0x3c8>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	0019      	movs	r1, r3
 800603a:	4790      	blx	r2

	          rslt = bme68x_get_data(BME68X_FORCED_MODE, data, &n_fields, &gas_sensor);
 800603c:	4b63      	ldr	r3, [pc, #396]	@ (80061cc <main+0x3c8>)
 800603e:	4a6e      	ldr	r2, [pc, #440]	@ (80061f8 <main+0x3f4>)
 8006040:	496e      	ldr	r1, [pc, #440]	@ (80061fc <main+0x3f8>)
 8006042:	2001      	movs	r0, #1
 8006044:	f7fd ffc8 	bl	8003fd8 <bme68x_get_data>
 8006048:	0003      	movs	r3, r0
 800604a:	001a      	movs	r2, r3
 800604c:	4b63      	ldr	r3, [pc, #396]	@ (80061dc <main+0x3d8>)
 800604e:	701a      	strb	r2, [r3, #0]

	          if (rslt == BME68X_OK && n_fields > 0) {
 8006050:	4b62      	ldr	r3, [pc, #392]	@ (80061dc <main+0x3d8>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b25b      	sxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d000      	beq.n	800605c <main+0x258>
 800605a:	e088      	b.n	800616e <main+0x36a>
 800605c:	4b66      	ldr	r3, [pc, #408]	@ (80061f8 <main+0x3f4>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d100      	bne.n	8006066 <main+0x262>
 8006064:	e083      	b.n	800616e <main+0x36a>
	              char buf[256];
	              for (uint8_t i = 0; i < n_fields; i++) {
 8006066:	4b66      	ldr	r3, [pc, #408]	@ (8006200 <main+0x3fc>)
 8006068:	191b      	adds	r3, r3, r4
 800606a:	19db      	adds	r3, r3, r7
 800606c:	2200      	movs	r2, #0
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	e073      	b.n	800615a <main+0x356>
	                  snprintf(buf, sizeof(buf),
 8006072:	4e63      	ldr	r6, [pc, #396]	@ (8006200 <main+0x3fc>)
 8006074:	2210      	movs	r2, #16
 8006076:	18b3      	adds	r3, r6, r2
 8006078:	19db      	adds	r3, r3, r7
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	4698      	mov	r8, r3
	                      "Pressure        : %6.2f hPa\r\n"
	                      "Humidity        : %6.2f %%\r\n"
	                      "----------------------------------------\r\n",
	                      i,
	                      data[i].temperature,
	                      data[i].pressure,
 800607e:	18b3      	adds	r3, r6, r2
 8006080:	19db      	adds	r3, r3, r7
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	495d      	ldr	r1, [pc, #372]	@ (80061fc <main+0x3f8>)
 8006086:	0013      	movs	r3, r2
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	189b      	adds	r3, r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	18cb      	adds	r3, r1, r3
 8006090:	3308      	adds	r3, #8
 8006092:	681b      	ldr	r3, [r3, #0]
	                  snprintf(buf, sizeof(buf),
 8006094:	1c18      	adds	r0, r3, #0
 8006096:	f7fd fb17 	bl	80036c8 <__aeabi_f2d>
 800609a:	0004      	movs	r4, r0
 800609c:	000d      	movs	r5, r1
	                      data[i].humidity);
 800609e:	2010      	movs	r0, #16
 80060a0:	1833      	adds	r3, r6, r0
 80060a2:	19db      	adds	r3, r3, r7
 80060a4:	781a      	ldrb	r2, [r3, #0]
 80060a6:	4955      	ldr	r1, [pc, #340]	@ (80061fc <main+0x3f8>)
 80060a8:	0013      	movs	r3, r2
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	189b      	adds	r3, r3, r2
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	18cb      	adds	r3, r1, r3
 80060b2:	330c      	adds	r3, #12
 80060b4:	681b      	ldr	r3, [r3, #0]
	                  snprintf(buf, sizeof(buf),
 80060b6:	1c18      	adds	r0, r3, #0
 80060b8:	f7fd fb06 	bl	80036c8 <__aeabi_f2d>
 80060bc:	60b8      	str	r0, [r7, #8]
 80060be:	60f9      	str	r1, [r7, #12]
	                  HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80060c0:	2010      	movs	r0, #16
 80060c2:	1833      	adds	r3, r6, r0
 80060c4:	19db      	adds	r3, r3, r7
 80060c6:	781a      	ldrb	r2, [r3, #0]
 80060c8:	494c      	ldr	r1, [pc, #304]	@ (80061fc <main+0x3f8>)
 80060ca:	0013      	movs	r3, r2
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	189b      	adds	r3, r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	18cb      	adds	r3, r1, r3
 80060d4:	3310      	adds	r3, #16
 80060d6:	681b      	ldr	r3, [r3, #0]
	                  snprintf(buf, sizeof(buf),
 80060d8:	1c18      	adds	r0, r3, #0
 80060da:	f7fd faf5 	bl	80036c8 <__aeabi_f2d>
 80060de:	6038      	str	r0, [r7, #0]
 80060e0:	6079      	str	r1, [r7, #4]
	              }
 80060e2:	2010      	movs	r0, #16
 80060e4:	1833      	adds	r3, r6, r0
 80060e6:	19db      	adds	r3, r3, r7
 80060e8:	781a      	ldrb	r2, [r3, #0]
 80060ea:	4944      	ldr	r1, [pc, #272]	@ (80061fc <main+0x3f8>)
 80060ec:	0013      	movs	r3, r2
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	189b      	adds	r3, r3, r2
 80060f2:	00db      	lsls	r3, r3, #3
 80060f4:	18cb      	adds	r3, r1, r3
 80060f6:	3314      	adds	r3, #20
 80060f8:	681b      	ldr	r3, [r3, #0]
	                  snprintf(buf, sizeof(buf),
 80060fa:	1c18      	adds	r0, r3, #0
 80060fc:	f7fd fae4 	bl	80036c8 <__aeabi_f2d>
 8006100:	0002      	movs	r2, r0
 8006102:	000b      	movs	r3, r1
 8006104:	4e3f      	ldr	r6, [pc, #252]	@ (8006204 <main+0x400>)
 8006106:	2180      	movs	r1, #128	@ 0x80
 8006108:	0049      	lsls	r1, r1, #1
 800610a:	2010      	movs	r0, #16
 800610c:	1838      	adds	r0, r7, r0
 800610e:	9206      	str	r2, [sp, #24]
 8006110:	9307      	str	r3, [sp, #28]
 8006112:	683a      	ldr	r2, [r7, #0]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	9204      	str	r2, [sp, #16]
 8006118:	9305      	str	r3, [sp, #20]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	9202      	str	r2, [sp, #8]
 8006120:	9303      	str	r3, [sp, #12]
 8006122:	9400      	str	r4, [sp, #0]
 8006124:	9501      	str	r5, [sp, #4]
 8006126:	4643      	mov	r3, r8
 8006128:	0032      	movs	r2, r6
 800612a:	f004 f86b 	bl	800a204 <sniprintf>
	          } else {
 800612e:	2410      	movs	r4, #16
 8006130:	193b      	adds	r3, r7, r4
 8006132:	0018      	movs	r0, r3
 8006134:	f7f9 ffe6 	bl	8000104 <strlen>
 8006138:	0003      	movs	r3, r0
 800613a:	b29a      	uxth	r2, r3
 800613c:	2301      	movs	r3, #1
 800613e:	425b      	negs	r3, r3
 8006140:	1939      	adds	r1, r7, r4
 8006142:	4820      	ldr	r0, [pc, #128]	@ (80061c4 <main+0x3c0>)
 8006144:	f002 fd4e 	bl	8008be4 <HAL_UART_Transmit>
	              for (uint8_t i = 0; i < n_fields; i++) {
 8006148:	4e2d      	ldr	r6, [pc, #180]	@ (8006200 <main+0x3fc>)
 800614a:	0021      	movs	r1, r4
 800614c:	1933      	adds	r3, r6, r4
 800614e:	19db      	adds	r3, r3, r7
 8006150:	781a      	ldrb	r2, [r3, #0]
 8006152:	1873      	adds	r3, r6, r1
 8006154:	19db      	adds	r3, r3, r7
 8006156:	3201      	adds	r2, #1
 8006158:	701a      	strb	r2, [r3, #0]
 800615a:	4b27      	ldr	r3, [pc, #156]	@ (80061f8 <main+0x3f4>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	4a28      	ldr	r2, [pc, #160]	@ (8006200 <main+0x3fc>)
 8006160:	2110      	movs	r1, #16
 8006162:	1852      	adds	r2, r2, r1
 8006164:	19d2      	adds	r2, r2, r7
 8006166:	7812      	ldrb	r2, [r2, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d382      	bcc.n	8006072 <main+0x26e>
	          if (rslt == BME68X_OK && n_fields > 0) {
 800616c:	e01e      	b.n	80061ac <main+0x3a8>
	              char err[] = "No valid data or read error\r\n";
	              HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
	          }
 800616e:	4b26      	ldr	r3, [pc, #152]	@ (8006208 <main+0x404>)
 8006170:	2280      	movs	r2, #128	@ 0x80
 8006172:	0092      	lsls	r2, r2, #2
 8006174:	189b      	adds	r3, r3, r2
 8006176:	2210      	movs	r2, #16
 8006178:	4694      	mov	ip, r2
 800617a:	44bc      	add	ip, r7
 800617c:	4463      	add	r3, ip
 800617e:	4a23      	ldr	r2, [pc, #140]	@ (800620c <main+0x408>)
 8006180:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006182:	c313      	stmia	r3!, {r0, r1, r4}
 8006184:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006186:	c313      	stmia	r3!, {r0, r1, r4}
 8006188:	6811      	ldr	r1, [r2, #0]
 800618a:	6019      	str	r1, [r3, #0]
 800618c:	8892      	ldrh	r2, [r2, #4]
 800618e:	809a      	strh	r2, [r3, #4]

 8006190:	2488      	movs	r4, #136	@ 0x88
 8006192:	0064      	lsls	r4, r4, #1
 8006194:	193b      	adds	r3, r7, r4
 8006196:	0018      	movs	r0, r3
 8006198:	f7f9 ffb4 	bl	8000104 <strlen>
 800619c:	0003      	movs	r3, r0
 800619e:	b29a      	uxth	r2, r3
 80061a0:	2301      	movs	r3, #1
 80061a2:	425b      	negs	r3, r3
 80061a4:	1939      	adds	r1, r7, r4
 80061a6:	4807      	ldr	r0, [pc, #28]	@ (80061c4 <main+0x3c0>)
 80061a8:	f002 fd1c 	bl	8008be4 <HAL_UART_Transmit>
	          HAL_Delay(2000);
  }
  /* USER CODE END 3 */
 80061ac:	23fa      	movs	r3, #250	@ 0xfa
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	0018      	movs	r0, r3
 80061b2:	f000 fc25 	bl	8006a00 <HAL_Delay>
  {
 80061b6:	e700      	b.n	8005fba <main+0x1b6>
 80061b8:	fffffdd0 	.word	0xfffffdd0
 80061bc:	200001f0 	.word	0x200001f0
 80061c0:	0800c924 	.word	0x0800c924
 80061c4:	20000244 	.word	0x20000244
 80061c8:	0800c7f8 	.word	0x0800c7f8
 80061cc:	200002d8 	.word	0x200002d8
 80061d0:	0800643d 	.word	0x0800643d
 80061d4:	080064bd 	.word	0x080064bd
 80061d8:	08006401 	.word	0x08006401
 80061dc:	2000038d 	.word	0x2000038d
 80061e0:	0800c944 	.word	0x0800c944
 80061e4:	0800c814 	.word	0x0800c814
 80061e8:	20000328 	.word	0x20000328
 80061ec:	20000330 	.word	0x20000330
 80061f0:	0800c964 	.word	0x0800c964
 80061f4:	00002710 	.word	0x00002710
 80061f8:	2000038c 	.word	0x2000038c
 80061fc:	20000344 	.word	0x20000344
 8006200:	000001ff 	.word	0x000001ff
 8006204:	0800c83c 	.word	0x0800c83c
 8006208:	ffffff00 	.word	0xffffff00
 800620c:	0800c97c 	.word	0x0800c97c

08006210 <SystemClock_Config>:
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006210:	b590      	push	{r4, r7, lr}
 8006212:	b093      	sub	sp, #76	@ 0x4c
 8006214:	af00      	add	r7, sp, #0

 8006216:	2410      	movs	r4, #16
 8006218:	193b      	adds	r3, r7, r4
 800621a:	0018      	movs	r0, r3
 800621c:	2338      	movs	r3, #56	@ 0x38
 800621e:	001a      	movs	r2, r3
 8006220:	2100      	movs	r1, #0
 8006222:	f004 f8e9 	bl	800a3f8 <memset>
  /** Configure the main internal regulator output voltage
 8006226:	003b      	movs	r3, r7
 8006228:	0018      	movs	r0, r3
 800622a:	2310      	movs	r3, #16
 800622c:	001a      	movs	r2, r3
 800622e:	2100      	movs	r1, #0
 8006230:	f004 f8e2 	bl	800a3f8 <memset>
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
 8006234:	2380      	movs	r3, #128	@ 0x80
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	0018      	movs	r0, r3
 800623a:	f001 fdb5 	bl	8007da8 <HAL_PWREx_ControlVoltageScaling>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800623e:	193b      	adds	r3, r7, r4
 8006240:	2202      	movs	r2, #2
 8006242:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006244:	193b      	adds	r3, r7, r4
 8006246:	2280      	movs	r2, #128	@ 0x80
 8006248:	0052      	lsls	r2, r2, #1
 800624a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800624c:	193b      	adds	r3, r7, r4
 800624e:	2200      	movs	r2, #0
 8006250:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006252:	193b      	adds	r3, r7, r4
 8006254:	2240      	movs	r2, #64	@ 0x40
 8006256:	615a      	str	r2, [r3, #20]
  {
 8006258:	193b      	adds	r3, r7, r4
 800625a:	2200      	movs	r2, #0
 800625c:	61da      	str	r2, [r3, #28]
    Error_Handler();
 800625e:	193b      	adds	r3, r7, r4
 8006260:	0018      	movs	r0, r3
 8006262:	f001 fded 	bl	8007e40 <HAL_RCC_OscConfig>
 8006266:	1e03      	subs	r3, r0, #0
 8006268:	d001      	beq.n	800626e <SystemClock_Config+0x5e>
  }

 800626a:	f000 f94e 	bl	800650a <Error_Handler>
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800626e:	003b      	movs	r3, r7
 8006270:	2207      	movs	r2, #7
 8006272:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006274:	003b      	movs	r3, r7
 8006276:	2200      	movs	r2, #0
 8006278:	605a      	str	r2, [r3, #4]

 800627a:	003b      	movs	r3, r7
 800627c:	2200      	movs	r2, #0
 800627e:	609a      	str	r2, [r3, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006280:	003b      	movs	r3, r7
 8006282:	2200      	movs	r2, #0
 8006284:	60da      	str	r2, [r3, #12]
  {
    Error_Handler();
 8006286:	003b      	movs	r3, r7
 8006288:	2100      	movs	r1, #0
 800628a:	0018      	movs	r0, r3
 800628c:	f002 f8f2 	bl	8008474 <HAL_RCC_ClockConfig>
 8006290:	1e03      	subs	r3, r0, #0
 8006292:	d001      	beq.n	8006298 <SystemClock_Config+0x88>
  }
}
 8006294:	f000 f939 	bl	800650a <Error_Handler>

/**
 8006298:	46c0      	nop			@ (mov r8, r8)
 800629a:	46bd      	mov	sp, r7
 800629c:	b013      	add	sp, #76	@ 0x4c
 800629e:	bd90      	pop	{r4, r7, pc}

080062a0 <MX_I2C1_Init>:
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x00503D58;
  hi2c1.Init.OwnAddress1 = 0;
 80062a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006314 <MX_I2C1_Init+0x74>)
 80062a6:	4a1c      	ldr	r2, [pc, #112]	@ (8006318 <MX_I2C1_Init+0x78>)
 80062a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80062aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006314 <MX_I2C1_Init+0x74>)
 80062ac:	4a1b      	ldr	r2, [pc, #108]	@ (800631c <MX_I2C1_Init+0x7c>)
 80062ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80062b0:	4b18      	ldr	r3, [pc, #96]	@ (8006314 <MX_I2C1_Init+0x74>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80062b6:	4b17      	ldr	r3, [pc, #92]	@ (8006314 <MX_I2C1_Init+0x74>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80062bc:	4b15      	ldr	r3, [pc, #84]	@ (8006314 <MX_I2C1_Init+0x74>)
 80062be:	2200      	movs	r2, #0
 80062c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80062c2:	4b14      	ldr	r3, [pc, #80]	@ (8006314 <MX_I2C1_Init+0x74>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80062c8:	4b12      	ldr	r3, [pc, #72]	@ (8006314 <MX_I2C1_Init+0x74>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	619a      	str	r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80062ce:	4b11      	ldr	r3, [pc, #68]	@ (8006314 <MX_I2C1_Init+0x74>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	61da      	str	r2, [r3, #28]
  {
 80062d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006314 <MX_I2C1_Init+0x74>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	621a      	str	r2, [r3, #32]
    Error_Handler();
 80062da:	4b0e      	ldr	r3, [pc, #56]	@ (8006314 <MX_I2C1_Init+0x74>)
 80062dc:	0018      	movs	r0, r3
 80062de:	f000 fdcb 	bl	8006e78 <HAL_I2C_Init>
 80062e2:	1e03      	subs	r3, r0, #0
 80062e4:	d001      	beq.n	80062ea <MX_I2C1_Init+0x4a>
  }

 80062e6:	f000 f910 	bl	800650a <Error_Handler>
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
 80062ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006314 <MX_I2C1_Init+0x74>)
 80062ec:	2100      	movs	r1, #0
 80062ee:	0018      	movs	r0, r3
 80062f0:	f001 fcc2 	bl	8007c78 <HAL_I2CEx_ConfigAnalogFilter>
 80062f4:	1e03      	subs	r3, r0, #0
 80062f6:	d001      	beq.n	80062fc <MX_I2C1_Init+0x5c>
  }

 80062f8:	f000 f907 	bl	800650a <Error_Handler>
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
 80062fc:	4b05      	ldr	r3, [pc, #20]	@ (8006314 <MX_I2C1_Init+0x74>)
 80062fe:	2100      	movs	r1, #0
 8006300:	0018      	movs	r0, r3
 8006302:	f001 fd05 	bl	8007d10 <HAL_I2CEx_ConfigDigitalFilter>
 8006306:	1e03      	subs	r3, r0, #0
 8006308:	d001      	beq.n	800630e <MX_I2C1_Init+0x6e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
 800630a:	f000 f8fe 	bl	800650a <Error_Handler>

  /* USER CODE END I2C1_Init 2 */

}

/**
 800630e:	46c0      	nop			@ (mov r8, r8)
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	200001f0 	.word	0x200001f0
 8006318:	40005400 	.word	0x40005400
 800631c:	00503d58 	.word	0x00503d58

08006320 <MX_USART2_UART_Init>:
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006324:	4b23      	ldr	r3, [pc, #140]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 8006326:	4a24      	ldr	r2, [pc, #144]	@ (80063b8 <MX_USART2_UART_Init+0x98>)
 8006328:	601a      	str	r2, [r3, #0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800632a:	4b22      	ldr	r3, [pc, #136]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 800632c:	22e1      	movs	r2, #225	@ 0xe1
 800632e:	0252      	lsls	r2, r2, #9
 8006330:	605a      	str	r2, [r3, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006332:	4b20      	ldr	r3, [pc, #128]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 8006334:	2200      	movs	r2, #0
 8006336:	609a      	str	r2, [r3, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006338:	4b1e      	ldr	r3, [pc, #120]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 800633a:	2200      	movs	r2, #0
 800633c:	60da      	str	r2, [r3, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800633e:	4b1d      	ldr	r3, [pc, #116]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 8006340:	2200      	movs	r2, #0
 8006342:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006344:	4b1b      	ldr	r3, [pc, #108]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 8006346:	220c      	movs	r2, #12
 8006348:	615a      	str	r2, [r3, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800634a:	4b1a      	ldr	r3, [pc, #104]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 800634c:	2200      	movs	r2, #0
 800634e:	619a      	str	r2, [r3, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006350:	4b18      	ldr	r3, [pc, #96]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 8006352:	2200      	movs	r2, #0
 8006354:	61da      	str	r2, [r3, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006356:	4b17      	ldr	r3, [pc, #92]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 8006358:	2200      	movs	r2, #0
 800635a:	621a      	str	r2, [r3, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800635c:	4b15      	ldr	r3, [pc, #84]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 800635e:	2200      	movs	r2, #0
 8006360:	625a      	str	r2, [r3, #36]	@ 0x24
  {
 8006362:	4b14      	ldr	r3, [pc, #80]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 8006364:	2200      	movs	r2, #0
 8006366:	629a      	str	r2, [r3, #40]	@ 0x28
    Error_Handler();
 8006368:	4b12      	ldr	r3, [pc, #72]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 800636a:	0018      	movs	r0, r3
 800636c:	f002 fbe4 	bl	8008b38 <HAL_UART_Init>
 8006370:	1e03      	subs	r3, r0, #0
 8006372:	d001      	beq.n	8006378 <MX_USART2_UART_Init+0x58>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006374:	f000 f8c9 	bl	800650a <Error_Handler>
  {
    Error_Handler();
 8006378:	4b0e      	ldr	r3, [pc, #56]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 800637a:	2100      	movs	r1, #0
 800637c:	0018      	movs	r0, r3
 800637e:	f003 fa01 	bl	8009784 <HAL_UARTEx_SetTxFifoThreshold>
 8006382:	1e03      	subs	r3, r0, #0
 8006384:	d001      	beq.n	800638a <MX_USART2_UART_Init+0x6a>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006386:	f000 f8c0 	bl	800650a <Error_Handler>
  {
    Error_Handler();
 800638a:	4b0a      	ldr	r3, [pc, #40]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 800638c:	2100      	movs	r1, #0
 800638e:	0018      	movs	r0, r3
 8006390:	f003 fa38 	bl	8009804 <HAL_UARTEx_SetRxFifoThreshold>
 8006394:	1e03      	subs	r3, r0, #0
 8006396:	d001      	beq.n	800639c <MX_USART2_UART_Init+0x7c>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006398:	f000 f8b7 	bl	800650a <Error_Handler>
  {
    Error_Handler();
 800639c:	4b05      	ldr	r3, [pc, #20]	@ (80063b4 <MX_USART2_UART_Init+0x94>)
 800639e:	0018      	movs	r0, r3
 80063a0:	f003 f9b6 	bl	8009710 <HAL_UARTEx_DisableFifoMode>
 80063a4:	1e03      	subs	r3, r0, #0
 80063a6:	d001      	beq.n	80063ac <MX_USART2_UART_Init+0x8c>
  }
  /* USER CODE BEGIN USART2_Init 2 */
 80063a8:	f000 f8af 	bl	800650a <Error_Handler>

  /* USER CODE END USART2_Init 2 */

}

/**
 80063ac:	46c0      	nop			@ (mov r8, r8)
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	46c0      	nop			@ (mov r8, r8)
 80063b4:	20000244 	.word	0x20000244
 80063b8:	40004400 	.word	0x40004400

080063bc <MX_GPIO_Init>:
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  /* USER CODE BEGIN MX_GPIO_Init_1 */

 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

 80063c2:	4b0e      	ldr	r3, [pc, #56]	@ (80063fc <MX_GPIO_Init+0x40>)
 80063c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063c6:	4b0d      	ldr	r3, [pc, #52]	@ (80063fc <MX_GPIO_Init+0x40>)
 80063c8:	2101      	movs	r1, #1
 80063ca:	430a      	orrs	r2, r1
 80063cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80063ce:	4b0b      	ldr	r3, [pc, #44]	@ (80063fc <MX_GPIO_Init+0x40>)
 80063d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d2:	2201      	movs	r2, #1
 80063d4:	4013      	ands	r3, r2
 80063d6:	607b      	str	r3, [r7, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN MX_GPIO_Init_2 */
 80063da:	4b08      	ldr	r3, [pc, #32]	@ (80063fc <MX_GPIO_Init+0x40>)
 80063dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063de:	4b07      	ldr	r3, [pc, #28]	@ (80063fc <MX_GPIO_Init+0x40>)
 80063e0:	2102      	movs	r1, #2
 80063e2:	430a      	orrs	r2, r1
 80063e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80063e6:	4b05      	ldr	r3, [pc, #20]	@ (80063fc <MX_GPIO_Init+0x40>)
 80063e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ea:	2202      	movs	r2, #2
 80063ec:	4013      	ands	r3, r2
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
 80063f2:	46c0      	nop			@ (mov r8, r8)
 80063f4:	46bd      	mov	sp, r7
 80063f6:	b002      	add	sp, #8
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	46c0      	nop			@ (mov r8, r8)
 80063fc:	40021000 	.word	0x40021000

08006400 <user_delay_us>:
static void user_delay_us(uint32_t period, void *intf_ptr)
{
    uint32_t start = HAL_GetTick();
    while ((HAL_GetTick() - start) * 1000 < period);
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
}
 800640a:	f000 faef 	bl	80069ec <HAL_GetTick>
 800640e:	0003      	movs	r3, r0
 8006410:	60fb      	str	r3, [r7, #12]

 8006412:	46c0      	nop			@ (mov r8, r8)
 8006414:	f000 faea 	bl	80069ec <HAL_GetTick>
 8006418:	0002      	movs	r2, r0
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	1ad2      	subs	r2, r2, r3
 800641e:	0013      	movs	r3, r2
 8006420:	015b      	lsls	r3, r3, #5
 8006422:	1a9b      	subs	r3, r3, r2
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	189b      	adds	r3, r3, r2
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	001a      	movs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4293      	cmp	r3, r2
 8006430:	d8f0      	bhi.n	8006414 <user_delay_us+0x14>
static int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
 8006432:	46c0      	nop			@ (mov r8, r8)
 8006434:	46c0      	nop			@ (mov r8, r8)
 8006436:	46bd      	mov	sp, r7
 8006438:	b004      	add	sp, #16
 800643a:	bd80      	pop	{r7, pc}

0800643c <user_i2c_read>:
{
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
    if (HAL_I2C_Mem_Read(hi2c, BME68X_I2C_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY) != HAL_OK) {
 800643c:	b5b0      	push	{r4, r5, r7, lr}
 800643e:	b08e      	sub	sp, #56	@ 0x38
 8006440:	af04      	add	r7, sp, #16
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	210f      	movs	r1, #15
 800644a:	187b      	adds	r3, r7, r1
 800644c:	1c02      	adds	r2, r0, #0
 800644e:	701a      	strb	r2, [r3, #0]
        char err[] = "I2C read failed\r\n";
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 8006454:	187b      	adds	r3, r7, r1
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	b299      	uxth	r1, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	b29b      	uxth	r3, r3
 800645e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006460:	2201      	movs	r2, #1
 8006462:	4252      	negs	r2, r2
 8006464:	9202      	str	r2, [sp, #8]
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	2301      	movs	r3, #1
 800646e:	000a      	movs	r2, r1
 8006470:	21ee      	movs	r1, #238	@ 0xee
 8006472:	f000 fed5 	bl	8007220 <HAL_I2C_Mem_Read>
 8006476:	1e03      	subs	r3, r0, #0
 8006478:	d017      	beq.n	80064aa <user_i2c_read+0x6e>
        return -1;
 800647a:	2510      	movs	r5, #16
 800647c:	197b      	adds	r3, r7, r5
 800647e:	4a0d      	ldr	r2, [pc, #52]	@ (80064b4 <user_i2c_read+0x78>)
 8006480:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006482:	c313      	stmia	r3!, {r0, r1, r4}
 8006484:	6811      	ldr	r1, [r2, #0]
 8006486:	6019      	str	r1, [r3, #0]
 8006488:	8892      	ldrh	r2, [r2, #4]
 800648a:	809a      	strh	r2, [r3, #4]
    }
 800648c:	197b      	adds	r3, r7, r5
 800648e:	0018      	movs	r0, r3
 8006490:	f7f9 fe38 	bl	8000104 <strlen>
 8006494:	0003      	movs	r3, r0
 8006496:	b29a      	uxth	r2, r3
 8006498:	2301      	movs	r3, #1
 800649a:	425b      	negs	r3, r3
 800649c:	1979      	adds	r1, r7, r5
 800649e:	4806      	ldr	r0, [pc, #24]	@ (80064b8 <user_i2c_read+0x7c>)
 80064a0:	f002 fba0 	bl	8008be4 <HAL_UART_Transmit>
    return 0;
 80064a4:	2301      	movs	r3, #1
 80064a6:	425b      	negs	r3, r3
 80064a8:	e000      	b.n	80064ac <user_i2c_read+0x70>
}

 80064aa:	2300      	movs	r3, #0
static int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
 80064ac:	0018      	movs	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b00a      	add	sp, #40	@ 0x28
 80064b2:	bdb0      	pop	{r4, r5, r7, pc}
 80064b4:	0800c99c 	.word	0x0800c99c
 80064b8:	20000244 	.word	0x20000244

080064bc <user_i2c_write>:
{
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
    if (HAL_I2C_Mem_Write(hi2c, BME68X_I2C_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, len, HAL_MAX_DELAY) != HAL_OK)
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	@ 0x28
 80064c0:	af04      	add	r7, sp, #16
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	607a      	str	r2, [r7, #4]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	210f      	movs	r1, #15
 80064ca:	187b      	adds	r3, r7, r1
 80064cc:	1c02      	adds	r2, r0, #0
 80064ce:	701a      	strb	r2, [r3, #0]
        return -1;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	617b      	str	r3, [r7, #20]
    return 0;
 80064d4:	187b      	adds	r3, r7, r1
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	b299      	uxth	r1, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	6978      	ldr	r0, [r7, #20]
 80064e0:	2201      	movs	r2, #1
 80064e2:	4252      	negs	r2, r2
 80064e4:	9202      	str	r2, [sp, #8]
 80064e6:	9301      	str	r3, [sp, #4]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	2301      	movs	r3, #1
 80064ee:	000a      	movs	r2, r1
 80064f0:	21ee      	movs	r1, #238	@ 0xee
 80064f2:	f000 fd67 	bl	8006fc4 <HAL_I2C_Mem_Write>
 80064f6:	1e03      	subs	r3, r0, #0
 80064f8:	d002      	beq.n	8006500 <user_i2c_write+0x44>
}
 80064fa:	2301      	movs	r3, #1
 80064fc:	425b      	negs	r3, r3
 80064fe:	e000      	b.n	8006502 <user_i2c_write+0x46>

 8006500:	2300      	movs	r3, #0
/* USER CODE END 4 */
 8006502:	0018      	movs	r0, r3
 8006504:	46bd      	mov	sp, r7
 8006506:	b006      	add	sp, #24
 8006508:	bd80      	pop	{r7, pc}

0800650a <Error_Handler>:
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 800650a:	b580      	push	{r7, lr}
 800650c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800650e:	b672      	cpsid	i
}
 8006510:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
  {
  }
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	e7fd      	b.n	8006512 <Error_Handler+0x8>
	...

08006518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800651e:	4b0f      	ldr	r3, [pc, #60]	@ (800655c <HAL_MspInit+0x44>)
 8006520:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006522:	4b0e      	ldr	r3, [pc, #56]	@ (800655c <HAL_MspInit+0x44>)
 8006524:	2101      	movs	r1, #1
 8006526:	430a      	orrs	r2, r1
 8006528:	641a      	str	r2, [r3, #64]	@ 0x40
 800652a:	4b0c      	ldr	r3, [pc, #48]	@ (800655c <HAL_MspInit+0x44>)
 800652c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652e:	2201      	movs	r2, #1
 8006530:	4013      	ands	r3, r2
 8006532:	607b      	str	r3, [r7, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006536:	4b09      	ldr	r3, [pc, #36]	@ (800655c <HAL_MspInit+0x44>)
 8006538:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800653a:	4b08      	ldr	r3, [pc, #32]	@ (800655c <HAL_MspInit+0x44>)
 800653c:	2180      	movs	r1, #128	@ 0x80
 800653e:	0549      	lsls	r1, r1, #21
 8006540:	430a      	orrs	r2, r1
 8006542:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006544:	4b05      	ldr	r3, [pc, #20]	@ (800655c <HAL_MspInit+0x44>)
 8006546:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006548:	2380      	movs	r3, #128	@ 0x80
 800654a:	055b      	lsls	r3, r3, #21
 800654c:	4013      	ands	r3, r2
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006552:	46c0      	nop			@ (mov r8, r8)
 8006554:	46bd      	mov	sp, r7
 8006556:	b002      	add	sp, #8
 8006558:	bd80      	pop	{r7, pc}
 800655a:	46c0      	nop			@ (mov r8, r8)
 800655c:	40021000 	.word	0x40021000

08006560 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006560:	b590      	push	{r4, r7, lr}
 8006562:	b097      	sub	sp, #92	@ 0x5c
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006568:	2344      	movs	r3, #68	@ 0x44
 800656a:	18fb      	adds	r3, r7, r3
 800656c:	0018      	movs	r0, r3
 800656e:	2314      	movs	r3, #20
 8006570:	001a      	movs	r2, r3
 8006572:	2100      	movs	r1, #0
 8006574:	f003 ff40 	bl	800a3f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006578:	2410      	movs	r4, #16
 800657a:	193b      	adds	r3, r7, r4
 800657c:	0018      	movs	r0, r3
 800657e:	2334      	movs	r3, #52	@ 0x34
 8006580:	001a      	movs	r2, r3
 8006582:	2100      	movs	r1, #0
 8006584:	f003 ff38 	bl	800a3f8 <memset>
  if(hi2c->Instance==I2C1)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a22      	ldr	r2, [pc, #136]	@ (8006618 <HAL_I2C_MspInit+0xb8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d13e      	bne.n	8006610 <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006592:	193b      	adds	r3, r7, r4
 8006594:	2220      	movs	r2, #32
 8006596:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006598:	193b      	adds	r3, r7, r4
 800659a:	2200      	movs	r2, #0
 800659c:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800659e:	193b      	adds	r3, r7, r4
 80065a0:	0018      	movs	r0, r3
 80065a2:	f002 f911 	bl	80087c8 <HAL_RCCEx_PeriphCLKConfig>
 80065a6:	1e03      	subs	r3, r0, #0
 80065a8:	d001      	beq.n	80065ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80065aa:	f7ff ffae 	bl	800650a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065ae:	4b1b      	ldr	r3, [pc, #108]	@ (800661c <HAL_I2C_MspInit+0xbc>)
 80065b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065b2:	4b1a      	ldr	r3, [pc, #104]	@ (800661c <HAL_I2C_MspInit+0xbc>)
 80065b4:	2102      	movs	r1, #2
 80065b6:	430a      	orrs	r2, r1
 80065b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80065ba:	4b18      	ldr	r3, [pc, #96]	@ (800661c <HAL_I2C_MspInit+0xbc>)
 80065bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065be:	2202      	movs	r2, #2
 80065c0:	4013      	ands	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80065c6:	2144      	movs	r1, #68	@ 0x44
 80065c8:	187b      	adds	r3, r7, r1
 80065ca:	22c0      	movs	r2, #192	@ 0xc0
 80065cc:	0092      	lsls	r2, r2, #2
 80065ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065d0:	187b      	adds	r3, r7, r1
 80065d2:	2212      	movs	r2, #18
 80065d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d6:	187b      	adds	r3, r7, r1
 80065d8:	2200      	movs	r2, #0
 80065da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065dc:	187b      	adds	r3, r7, r1
 80065de:	2200      	movs	r2, #0
 80065e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80065e2:	187b      	adds	r3, r7, r1
 80065e4:	2206      	movs	r2, #6
 80065e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065e8:	187b      	adds	r3, r7, r1
 80065ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006620 <HAL_I2C_MspInit+0xc0>)
 80065ec:	0019      	movs	r1, r3
 80065ee:	0010      	movs	r0, r2
 80065f0:	f000 fade 	bl	8006bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80065f4:	4b09      	ldr	r3, [pc, #36]	@ (800661c <HAL_I2C_MspInit+0xbc>)
 80065f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065f8:	4b08      	ldr	r3, [pc, #32]	@ (800661c <HAL_I2C_MspInit+0xbc>)
 80065fa:	2180      	movs	r1, #128	@ 0x80
 80065fc:	0389      	lsls	r1, r1, #14
 80065fe:	430a      	orrs	r2, r1
 8006600:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006602:	4b06      	ldr	r3, [pc, #24]	@ (800661c <HAL_I2C_MspInit+0xbc>)
 8006604:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006606:	2380      	movs	r3, #128	@ 0x80
 8006608:	039b      	lsls	r3, r3, #14
 800660a:	4013      	ands	r3, r2
 800660c:	60bb      	str	r3, [r7, #8]
 800660e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006610:	46c0      	nop			@ (mov r8, r8)
 8006612:	46bd      	mov	sp, r7
 8006614:	b017      	add	sp, #92	@ 0x5c
 8006616:	bd90      	pop	{r4, r7, pc}
 8006618:	40005400 	.word	0x40005400
 800661c:	40021000 	.word	0x40021000
 8006620:	50000400 	.word	0x50000400

08006624 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006624:	b590      	push	{r4, r7, lr}
 8006626:	b097      	sub	sp, #92	@ 0x5c
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800662c:	2344      	movs	r3, #68	@ 0x44
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	0018      	movs	r0, r3
 8006632:	2314      	movs	r3, #20
 8006634:	001a      	movs	r2, r3
 8006636:	2100      	movs	r1, #0
 8006638:	f003 fede 	bl	800a3f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800663c:	2410      	movs	r4, #16
 800663e:	193b      	adds	r3, r7, r4
 8006640:	0018      	movs	r0, r3
 8006642:	2334      	movs	r3, #52	@ 0x34
 8006644:	001a      	movs	r2, r3
 8006646:	2100      	movs	r1, #0
 8006648:	f003 fed6 	bl	800a3f8 <memset>
  if(huart->Instance==USART2)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a22      	ldr	r2, [pc, #136]	@ (80066dc <HAL_UART_MspInit+0xb8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d13e      	bne.n	80066d4 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006656:	193b      	adds	r3, r7, r4
 8006658:	2202      	movs	r2, #2
 800665a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800665c:	193b      	adds	r3, r7, r4
 800665e:	2200      	movs	r2, #0
 8006660:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006662:	193b      	adds	r3, r7, r4
 8006664:	0018      	movs	r0, r3
 8006666:	f002 f8af 	bl	80087c8 <HAL_RCCEx_PeriphCLKConfig>
 800666a:	1e03      	subs	r3, r0, #0
 800666c:	d001      	beq.n	8006672 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800666e:	f7ff ff4c 	bl	800650a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006672:	4b1b      	ldr	r3, [pc, #108]	@ (80066e0 <HAL_UART_MspInit+0xbc>)
 8006674:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006676:	4b1a      	ldr	r3, [pc, #104]	@ (80066e0 <HAL_UART_MspInit+0xbc>)
 8006678:	2180      	movs	r1, #128	@ 0x80
 800667a:	0289      	lsls	r1, r1, #10
 800667c:	430a      	orrs	r2, r1
 800667e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006680:	4b17      	ldr	r3, [pc, #92]	@ (80066e0 <HAL_UART_MspInit+0xbc>)
 8006682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	029b      	lsls	r3, r3, #10
 8006688:	4013      	ands	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800668e:	4b14      	ldr	r3, [pc, #80]	@ (80066e0 <HAL_UART_MspInit+0xbc>)
 8006690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006692:	4b13      	ldr	r3, [pc, #76]	@ (80066e0 <HAL_UART_MspInit+0xbc>)
 8006694:	2101      	movs	r1, #1
 8006696:	430a      	orrs	r2, r1
 8006698:	635a      	str	r2, [r3, #52]	@ 0x34
 800669a:	4b11      	ldr	r3, [pc, #68]	@ (80066e0 <HAL_UART_MspInit+0xbc>)
 800669c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800669e:	2201      	movs	r2, #1
 80066a0:	4013      	ands	r3, r2
 80066a2:	60bb      	str	r3, [r7, #8]
 80066a4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80066a6:	2144      	movs	r1, #68	@ 0x44
 80066a8:	187b      	adds	r3, r7, r1
 80066aa:	220c      	movs	r2, #12
 80066ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ae:	187b      	adds	r3, r7, r1
 80066b0:	2202      	movs	r2, #2
 80066b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b4:	187b      	adds	r3, r7, r1
 80066b6:	2200      	movs	r2, #0
 80066b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ba:	187b      	adds	r3, r7, r1
 80066bc:	2200      	movs	r2, #0
 80066be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80066c0:	187b      	adds	r3, r7, r1
 80066c2:	2201      	movs	r2, #1
 80066c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066c6:	187a      	adds	r2, r7, r1
 80066c8:	23a0      	movs	r3, #160	@ 0xa0
 80066ca:	05db      	lsls	r3, r3, #23
 80066cc:	0011      	movs	r1, r2
 80066ce:	0018      	movs	r0, r3
 80066d0:	f000 fa6e 	bl	8006bb0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80066d4:	46c0      	nop			@ (mov r8, r8)
 80066d6:	46bd      	mov	sp, r7
 80066d8:	b017      	add	sp, #92	@ 0x5c
 80066da:	bd90      	pop	{r4, r7, pc}
 80066dc:	40004400 	.word	0x40004400
 80066e0:	40021000 	.word	0x40021000

080066e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80066e8:	46c0      	nop			@ (mov r8, r8)
 80066ea:	e7fd      	b.n	80066e8 <NMI_Handler+0x4>

080066ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066f0:	46c0      	nop			@ (mov r8, r8)
 80066f2:	e7fd      	b.n	80066f0 <HardFault_Handler+0x4>

080066f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80066f8:	46c0      	nop			@ (mov r8, r8)
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80066fe:	b580      	push	{r7, lr}
 8006700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006702:	46c0      	nop			@ (mov r8, r8)
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800670c:	f000 f95c 	bl	80069c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006710:	46c0      	nop			@ (mov r8, r8)
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	af00      	add	r7, sp, #0
  return 1;
 800671a:	2301      	movs	r3, #1
}
 800671c:	0018      	movs	r0, r3
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <_kill>:

int _kill(int pid, int sig)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b082      	sub	sp, #8
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800672c:	f003 fe6c 	bl	800a408 <__errno>
 8006730:	0003      	movs	r3, r0
 8006732:	2216      	movs	r2, #22
 8006734:	601a      	str	r2, [r3, #0]
  return -1;
 8006736:	2301      	movs	r3, #1
 8006738:	425b      	negs	r3, r3
}
 800673a:	0018      	movs	r0, r3
 800673c:	46bd      	mov	sp, r7
 800673e:	b002      	add	sp, #8
 8006740:	bd80      	pop	{r7, pc}

08006742 <_exit>:

void _exit (int status)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800674a:	2301      	movs	r3, #1
 800674c:	425a      	negs	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	0011      	movs	r1, r2
 8006752:	0018      	movs	r0, r3
 8006754:	f7ff ffe5 	bl	8006722 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006758:	46c0      	nop			@ (mov r8, r8)
 800675a:	e7fd      	b.n	8006758 <_exit+0x16>

0800675c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e00a      	b.n	8006784 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800676e:	e000      	b.n	8006772 <_read+0x16>
 8006770:	bf00      	nop
 8006772:	0001      	movs	r1, r0
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	60ba      	str	r2, [r7, #8]
 800677a:	b2ca      	uxtb	r2, r1
 800677c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	3301      	adds	r3, #1
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	429a      	cmp	r2, r3
 800678a:	dbf0      	blt.n	800676e <_read+0x12>
  }

  return len;
 800678c:	687b      	ldr	r3, [r7, #4]
}
 800678e:	0018      	movs	r0, r3
 8006790:	46bd      	mov	sp, r7
 8006792:	b006      	add	sp, #24
 8006794:	bd80      	pop	{r7, pc}

08006796 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b086      	sub	sp, #24
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	e009      	b.n	80067bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	1c5a      	adds	r2, r3, #1
 80067ac:	60ba      	str	r2, [r7, #8]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	0018      	movs	r0, r3
 80067b2:	e000      	b.n	80067b6 <_write+0x20>
 80067b4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	3301      	adds	r3, #1
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	dbf1      	blt.n	80067a8 <_write+0x12>
  }
  return len;
 80067c4:	687b      	ldr	r3, [r7, #4]
}
 80067c6:	0018      	movs	r0, r3
 80067c8:	46bd      	mov	sp, r7
 80067ca:	b006      	add	sp, #24
 80067cc:	bd80      	pop	{r7, pc}

080067ce <_close>:

int _close(int file)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b082      	sub	sp, #8
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80067d6:	2301      	movs	r3, #1
 80067d8:	425b      	negs	r3, r3
}
 80067da:	0018      	movs	r0, r3
 80067dc:	46bd      	mov	sp, r7
 80067de:	b002      	add	sp, #8
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2280      	movs	r2, #128	@ 0x80
 80067f0:	0192      	lsls	r2, r2, #6
 80067f2:	605a      	str	r2, [r3, #4]
  return 0;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	0018      	movs	r0, r3
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b002      	add	sp, #8
 80067fc:	bd80      	pop	{r7, pc}

080067fe <_isatty>:

int _isatty(int file)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006806:	2301      	movs	r3, #1
}
 8006808:	0018      	movs	r0, r3
 800680a:	46bd      	mov	sp, r7
 800680c:	b002      	add	sp, #8
 800680e:	bd80      	pop	{r7, pc}

08006810 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800681c:	2300      	movs	r3, #0
}
 800681e:	0018      	movs	r0, r3
 8006820:	46bd      	mov	sp, r7
 8006822:	b004      	add	sp, #16
 8006824:	bd80      	pop	{r7, pc}
	...

08006828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006830:	4a14      	ldr	r2, [pc, #80]	@ (8006884 <_sbrk+0x5c>)
 8006832:	4b15      	ldr	r3, [pc, #84]	@ (8006888 <_sbrk+0x60>)
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800683c:	4b13      	ldr	r3, [pc, #76]	@ (800688c <_sbrk+0x64>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d102      	bne.n	800684a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006844:	4b11      	ldr	r3, [pc, #68]	@ (800688c <_sbrk+0x64>)
 8006846:	4a12      	ldr	r2, [pc, #72]	@ (8006890 <_sbrk+0x68>)
 8006848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800684a:	4b10      	ldr	r3, [pc, #64]	@ (800688c <_sbrk+0x64>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	18d3      	adds	r3, r2, r3
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	429a      	cmp	r2, r3
 8006856:	d207      	bcs.n	8006868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006858:	f003 fdd6 	bl	800a408 <__errno>
 800685c:	0003      	movs	r3, r0
 800685e:	220c      	movs	r2, #12
 8006860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006862:	2301      	movs	r3, #1
 8006864:	425b      	negs	r3, r3
 8006866:	e009      	b.n	800687c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006868:	4b08      	ldr	r3, [pc, #32]	@ (800688c <_sbrk+0x64>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800686e:	4b07      	ldr	r3, [pc, #28]	@ (800688c <_sbrk+0x64>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	18d2      	adds	r2, r2, r3
 8006876:	4b05      	ldr	r3, [pc, #20]	@ (800688c <_sbrk+0x64>)
 8006878:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800687a:	68fb      	ldr	r3, [r7, #12]
}
 800687c:	0018      	movs	r0, r3
 800687e:	46bd      	mov	sp, r7
 8006880:	b006      	add	sp, #24
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20009000 	.word	0x20009000
 8006888:	00000400 	.word	0x00000400
 800688c:	20000390 	.word	0x20000390
 8006890:	200004e8 	.word	0x200004e8

08006894 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006898:	46c0      	nop			@ (mov r8, r8)
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80068a0:	480d      	ldr	r0, [pc, #52]	@ (80068d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80068a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80068a4:	f7ff fff6 	bl	8006894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80068a8:	480c      	ldr	r0, [pc, #48]	@ (80068dc <LoopForever+0x6>)
  ldr r1, =_edata
 80068aa:	490d      	ldr	r1, [pc, #52]	@ (80068e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80068ac:	4a0d      	ldr	r2, [pc, #52]	@ (80068e4 <LoopForever+0xe>)
  movs r3, #0
 80068ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068b0:	e002      	b.n	80068b8 <LoopCopyDataInit>

080068b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068b6:	3304      	adds	r3, #4

080068b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068bc:	d3f9      	bcc.n	80068b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068be:	4a0a      	ldr	r2, [pc, #40]	@ (80068e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80068c0:	4c0a      	ldr	r4, [pc, #40]	@ (80068ec <LoopForever+0x16>)
  movs r3, #0
 80068c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068c4:	e001      	b.n	80068ca <LoopFillZerobss>

080068c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068c8:	3204      	adds	r2, #4

080068ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068cc:	d3fb      	bcc.n	80068c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80068ce:	f003 fda1 	bl	800a414 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80068d2:	f7ff fa97 	bl	8005e04 <main>

080068d6 <LoopForever>:

LoopForever:
  b LoopForever
 80068d6:	e7fe      	b.n	80068d6 <LoopForever>
  ldr   r0, =_estack
 80068d8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80068dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80068e4:	0800ce7c 	.word	0x0800ce7c
  ldr r2, =_sbss
 80068e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80068ec:	200004e4 	.word	0x200004e4

080068f0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80068f0:	e7fe      	b.n	80068f0 <ADC1_COMP_IRQHandler>
	...

080068f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80068fa:	1dfb      	adds	r3, r7, #7
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006900:	4b0b      	ldr	r3, [pc, #44]	@ (8006930 <HAL_Init+0x3c>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4b0a      	ldr	r3, [pc, #40]	@ (8006930 <HAL_Init+0x3c>)
 8006906:	2180      	movs	r1, #128	@ 0x80
 8006908:	0049      	lsls	r1, r1, #1
 800690a:	430a      	orrs	r2, r1
 800690c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800690e:	2000      	movs	r0, #0
 8006910:	f000 f810 	bl	8006934 <HAL_InitTick>
 8006914:	1e03      	subs	r3, r0, #0
 8006916:	d003      	beq.n	8006920 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006918:	1dfb      	adds	r3, r7, #7
 800691a:	2201      	movs	r2, #1
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	e001      	b.n	8006924 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006920:	f7ff fdfa 	bl	8006518 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006924:	1dfb      	adds	r3, r7, #7
 8006926:	781b      	ldrb	r3, [r3, #0]
}
 8006928:	0018      	movs	r0, r3
 800692a:	46bd      	mov	sp, r7
 800692c:	b002      	add	sp, #8
 800692e:	bd80      	pop	{r7, pc}
 8006930:	40022000 	.word	0x40022000

08006934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006934:	b590      	push	{r4, r7, lr}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800693c:	230f      	movs	r3, #15
 800693e:	18fb      	adds	r3, r7, r3
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006944:	4b1d      	ldr	r3, [pc, #116]	@ (80069bc <HAL_InitTick+0x88>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d02b      	beq.n	80069a4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800694c:	4b1c      	ldr	r3, [pc, #112]	@ (80069c0 <HAL_InitTick+0x8c>)
 800694e:	681c      	ldr	r4, [r3, #0]
 8006950:	4b1a      	ldr	r3, [pc, #104]	@ (80069bc <HAL_InitTick+0x88>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	0019      	movs	r1, r3
 8006956:	23fa      	movs	r3, #250	@ 0xfa
 8006958:	0098      	lsls	r0, r3, #2
 800695a:	f7f9 fbef 	bl	800013c <__udivsi3>
 800695e:	0003      	movs	r3, r0
 8006960:	0019      	movs	r1, r3
 8006962:	0020      	movs	r0, r4
 8006964:	f7f9 fbea 	bl	800013c <__udivsi3>
 8006968:	0003      	movs	r3, r0
 800696a:	0018      	movs	r0, r3
 800696c:	f000 f913 	bl	8006b96 <HAL_SYSTICK_Config>
 8006970:	1e03      	subs	r3, r0, #0
 8006972:	d112      	bne.n	800699a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d80a      	bhi.n	8006990 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	2301      	movs	r3, #1
 800697e:	425b      	negs	r3, r3
 8006980:	2200      	movs	r2, #0
 8006982:	0018      	movs	r0, r3
 8006984:	f000 f8f2 	bl	8006b6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006988:	4b0e      	ldr	r3, [pc, #56]	@ (80069c4 <HAL_InitTick+0x90>)
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	e00d      	b.n	80069ac <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006990:	230f      	movs	r3, #15
 8006992:	18fb      	adds	r3, r7, r3
 8006994:	2201      	movs	r2, #1
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	e008      	b.n	80069ac <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800699a:	230f      	movs	r3, #15
 800699c:	18fb      	adds	r3, r7, r3
 800699e:	2201      	movs	r2, #1
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	e003      	b.n	80069ac <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80069a4:	230f      	movs	r3, #15
 80069a6:	18fb      	adds	r3, r7, r3
 80069a8:	2201      	movs	r2, #1
 80069aa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80069ac:	230f      	movs	r3, #15
 80069ae:	18fb      	adds	r3, r7, r3
 80069b0:	781b      	ldrb	r3, [r3, #0]
}
 80069b2:	0018      	movs	r0, r3
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b005      	add	sp, #20
 80069b8:	bd90      	pop	{r4, r7, pc}
 80069ba:	46c0      	nop			@ (mov r8, r8)
 80069bc:	20000008 	.word	0x20000008
 80069c0:	20000000 	.word	0x20000000
 80069c4:	20000004 	.word	0x20000004

080069c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80069cc:	4b05      	ldr	r3, [pc, #20]	@ (80069e4 <HAL_IncTick+0x1c>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	001a      	movs	r2, r3
 80069d2:	4b05      	ldr	r3, [pc, #20]	@ (80069e8 <HAL_IncTick+0x20>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	18d2      	adds	r2, r2, r3
 80069d8:	4b03      	ldr	r3, [pc, #12]	@ (80069e8 <HAL_IncTick+0x20>)
 80069da:	601a      	str	r2, [r3, #0]
}
 80069dc:	46c0      	nop			@ (mov r8, r8)
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	46c0      	nop			@ (mov r8, r8)
 80069e4:	20000008 	.word	0x20000008
 80069e8:	20000394 	.word	0x20000394

080069ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  return uwTick;
 80069f0:	4b02      	ldr	r3, [pc, #8]	@ (80069fc <HAL_GetTick+0x10>)
 80069f2:	681b      	ldr	r3, [r3, #0]
}
 80069f4:	0018      	movs	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	46c0      	nop			@ (mov r8, r8)
 80069fc:	20000394 	.word	0x20000394

08006a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a08:	f7ff fff0 	bl	80069ec <HAL_GetTick>
 8006a0c:	0003      	movs	r3, r0
 8006a0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	3301      	adds	r3, #1
 8006a18:	d005      	beq.n	8006a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a44 <HAL_Delay+0x44>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	001a      	movs	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	189b      	adds	r3, r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a26:	46c0      	nop			@ (mov r8, r8)
 8006a28:	f7ff ffe0 	bl	80069ec <HAL_GetTick>
 8006a2c:	0002      	movs	r2, r0
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d8f7      	bhi.n	8006a28 <HAL_Delay+0x28>
  {
  }
}
 8006a38:	46c0      	nop			@ (mov r8, r8)
 8006a3a:	46c0      	nop			@ (mov r8, r8)
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	b004      	add	sp, #16
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	46c0      	nop			@ (mov r8, r8)
 8006a44:	20000008 	.word	0x20000008

08006a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a48:	b590      	push	{r4, r7, lr}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	0002      	movs	r2, r0
 8006a50:	6039      	str	r1, [r7, #0]
 8006a52:	1dfb      	adds	r3, r7, #7
 8006a54:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006a56:	1dfb      	adds	r3, r7, #7
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a5c:	d828      	bhi.n	8006ab0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a5e:	4a2f      	ldr	r2, [pc, #188]	@ (8006b1c <__NVIC_SetPriority+0xd4>)
 8006a60:	1dfb      	adds	r3, r7, #7
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b25b      	sxtb	r3, r3
 8006a66:	089b      	lsrs	r3, r3, #2
 8006a68:	33c0      	adds	r3, #192	@ 0xc0
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	589b      	ldr	r3, [r3, r2]
 8006a6e:	1dfa      	adds	r2, r7, #7
 8006a70:	7812      	ldrb	r2, [r2, #0]
 8006a72:	0011      	movs	r1, r2
 8006a74:	2203      	movs	r2, #3
 8006a76:	400a      	ands	r2, r1
 8006a78:	00d2      	lsls	r2, r2, #3
 8006a7a:	21ff      	movs	r1, #255	@ 0xff
 8006a7c:	4091      	lsls	r1, r2
 8006a7e:	000a      	movs	r2, r1
 8006a80:	43d2      	mvns	r2, r2
 8006a82:	401a      	ands	r2, r3
 8006a84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	019b      	lsls	r3, r3, #6
 8006a8a:	22ff      	movs	r2, #255	@ 0xff
 8006a8c:	401a      	ands	r2, r3
 8006a8e:	1dfb      	adds	r3, r7, #7
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	0018      	movs	r0, r3
 8006a94:	2303      	movs	r3, #3
 8006a96:	4003      	ands	r3, r0
 8006a98:	00db      	lsls	r3, r3, #3
 8006a9a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006a9c:	481f      	ldr	r0, [pc, #124]	@ (8006b1c <__NVIC_SetPriority+0xd4>)
 8006a9e:	1dfb      	adds	r3, r7, #7
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	b25b      	sxtb	r3, r3
 8006aa4:	089b      	lsrs	r3, r3, #2
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	33c0      	adds	r3, #192	@ 0xc0
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006aae:	e031      	b.n	8006b14 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b20 <__NVIC_SetPriority+0xd8>)
 8006ab2:	1dfb      	adds	r3, r7, #7
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	0019      	movs	r1, r3
 8006ab8:	230f      	movs	r3, #15
 8006aba:	400b      	ands	r3, r1
 8006abc:	3b08      	subs	r3, #8
 8006abe:	089b      	lsrs	r3, r3, #2
 8006ac0:	3306      	adds	r3, #6
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	18d3      	adds	r3, r2, r3
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	1dfa      	adds	r2, r7, #7
 8006acc:	7812      	ldrb	r2, [r2, #0]
 8006ace:	0011      	movs	r1, r2
 8006ad0:	2203      	movs	r2, #3
 8006ad2:	400a      	ands	r2, r1
 8006ad4:	00d2      	lsls	r2, r2, #3
 8006ad6:	21ff      	movs	r1, #255	@ 0xff
 8006ad8:	4091      	lsls	r1, r2
 8006ada:	000a      	movs	r2, r1
 8006adc:	43d2      	mvns	r2, r2
 8006ade:	401a      	ands	r2, r3
 8006ae0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	019b      	lsls	r3, r3, #6
 8006ae6:	22ff      	movs	r2, #255	@ 0xff
 8006ae8:	401a      	ands	r2, r3
 8006aea:	1dfb      	adds	r3, r7, #7
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	0018      	movs	r0, r3
 8006af0:	2303      	movs	r3, #3
 8006af2:	4003      	ands	r3, r0
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006af8:	4809      	ldr	r0, [pc, #36]	@ (8006b20 <__NVIC_SetPriority+0xd8>)
 8006afa:	1dfb      	adds	r3, r7, #7
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	001c      	movs	r4, r3
 8006b00:	230f      	movs	r3, #15
 8006b02:	4023      	ands	r3, r4
 8006b04:	3b08      	subs	r3, #8
 8006b06:	089b      	lsrs	r3, r3, #2
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	3306      	adds	r3, #6
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	18c3      	adds	r3, r0, r3
 8006b10:	3304      	adds	r3, #4
 8006b12:	601a      	str	r2, [r3, #0]
}
 8006b14:	46c0      	nop			@ (mov r8, r8)
 8006b16:	46bd      	mov	sp, r7
 8006b18:	b003      	add	sp, #12
 8006b1a:	bd90      	pop	{r4, r7, pc}
 8006b1c:	e000e100 	.word	0xe000e100
 8006b20:	e000ed00 	.word	0xe000ed00

08006b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	1e5a      	subs	r2, r3, #1
 8006b30:	2380      	movs	r3, #128	@ 0x80
 8006b32:	045b      	lsls	r3, r3, #17
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d301      	bcc.n	8006b3c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e010      	b.n	8006b5e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b68 <SysTick_Config+0x44>)
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	3a01      	subs	r2, #1
 8006b42:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b44:	2301      	movs	r3, #1
 8006b46:	425b      	negs	r3, r3
 8006b48:	2103      	movs	r1, #3
 8006b4a:	0018      	movs	r0, r3
 8006b4c:	f7ff ff7c 	bl	8006a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b50:	4b05      	ldr	r3, [pc, #20]	@ (8006b68 <SysTick_Config+0x44>)
 8006b52:	2200      	movs	r2, #0
 8006b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b56:	4b04      	ldr	r3, [pc, #16]	@ (8006b68 <SysTick_Config+0x44>)
 8006b58:	2207      	movs	r2, #7
 8006b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	0018      	movs	r0, r3
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b002      	add	sp, #8
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	46c0      	nop			@ (mov r8, r8)
 8006b68:	e000e010 	.word	0xe000e010

08006b6c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
 8006b76:	210f      	movs	r1, #15
 8006b78:	187b      	adds	r3, r7, r1
 8006b7a:	1c02      	adds	r2, r0, #0
 8006b7c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	187b      	adds	r3, r7, r1
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	b25b      	sxtb	r3, r3
 8006b86:	0011      	movs	r1, r2
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f7ff ff5d 	bl	8006a48 <__NVIC_SetPriority>
}
 8006b8e:	46c0      	nop			@ (mov r8, r8)
 8006b90:	46bd      	mov	sp, r7
 8006b92:	b004      	add	sp, #16
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	0018      	movs	r0, r3
 8006ba2:	f7ff ffbf 	bl	8006b24 <SysTick_Config>
 8006ba6:	0003      	movs	r3, r0
}
 8006ba8:	0018      	movs	r0, r3
 8006baa:	46bd      	mov	sp, r7
 8006bac:	b002      	add	sp, #8
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bbe:	e147      	b.n	8006e50 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	697a      	ldr	r2, [r7, #20]
 8006bc8:	4091      	lsls	r1, r2
 8006bca:	000a      	movs	r2, r1
 8006bcc:	4013      	ands	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d100      	bne.n	8006bd8 <HAL_GPIO_Init+0x28>
 8006bd6:	e138      	b.n	8006e4a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2203      	movs	r2, #3
 8006bde:	4013      	ands	r3, r2
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d005      	beq.n	8006bf0 <HAL_GPIO_Init+0x40>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2203      	movs	r2, #3
 8006bea:	4013      	ands	r3, r2
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d130      	bne.n	8006c52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	409a      	lsls	r2, r3
 8006bfe:	0013      	movs	r3, r2
 8006c00:	43da      	mvns	r2, r3
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	4013      	ands	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	409a      	lsls	r2, r3
 8006c12:	0013      	movs	r3, r2
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c26:	2201      	movs	r2, #1
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	409a      	lsls	r2, r3
 8006c2c:	0013      	movs	r3, r2
 8006c2e:	43da      	mvns	r2, r3
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	4013      	ands	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	091b      	lsrs	r3, r3, #4
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	401a      	ands	r2, r3
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	409a      	lsls	r2, r3
 8006c44:	0013      	movs	r3, r2
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2203      	movs	r2, #3
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d017      	beq.n	8006c8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	2203      	movs	r2, #3
 8006c6a:	409a      	lsls	r2, r3
 8006c6c:	0013      	movs	r3, r2
 8006c6e:	43da      	mvns	r2, r3
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	4013      	ands	r3, r2
 8006c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	409a      	lsls	r2, r3
 8006c80:	0013      	movs	r3, r2
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2203      	movs	r2, #3
 8006c94:	4013      	ands	r3, r2
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d123      	bne.n	8006ce2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	08da      	lsrs	r2, r3, #3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	3208      	adds	r2, #8
 8006ca2:	0092      	lsls	r2, r2, #2
 8006ca4:	58d3      	ldr	r3, [r2, r3]
 8006ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	2207      	movs	r2, #7
 8006cac:	4013      	ands	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	220f      	movs	r2, #15
 8006cb2:	409a      	lsls	r2, r3
 8006cb4:	0013      	movs	r3, r2
 8006cb6:	43da      	mvns	r2, r3
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	691a      	ldr	r2, [r3, #16]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2107      	movs	r1, #7
 8006cc6:	400b      	ands	r3, r1
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	409a      	lsls	r2, r3
 8006ccc:	0013      	movs	r3, r2
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	08da      	lsrs	r2, r3, #3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3208      	adds	r2, #8
 8006cdc:	0092      	lsls	r2, r2, #2
 8006cde:	6939      	ldr	r1, [r7, #16]
 8006ce0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	2203      	movs	r2, #3
 8006cee:	409a      	lsls	r2, r3
 8006cf0:	0013      	movs	r3, r2
 8006cf2:	43da      	mvns	r2, r3
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2203      	movs	r2, #3
 8006d00:	401a      	ands	r2, r3
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	409a      	lsls	r2, r3
 8006d08:	0013      	movs	r3, r2
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	23c0      	movs	r3, #192	@ 0xc0
 8006d1c:	029b      	lsls	r3, r3, #10
 8006d1e:	4013      	ands	r3, r2
 8006d20:	d100      	bne.n	8006d24 <HAL_GPIO_Init+0x174>
 8006d22:	e092      	b.n	8006e4a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006d24:	4a50      	ldr	r2, [pc, #320]	@ (8006e68 <HAL_GPIO_Init+0x2b8>)
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	089b      	lsrs	r3, r3, #2
 8006d2a:	3318      	adds	r3, #24
 8006d2c:	009b      	lsls	r3, r3, #2
 8006d2e:	589b      	ldr	r3, [r3, r2]
 8006d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2203      	movs	r2, #3
 8006d36:	4013      	ands	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	220f      	movs	r2, #15
 8006d3c:	409a      	lsls	r2, r3
 8006d3e:	0013      	movs	r3, r2
 8006d40:	43da      	mvns	r2, r3
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	4013      	ands	r3, r2
 8006d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	23a0      	movs	r3, #160	@ 0xa0
 8006d4c:	05db      	lsls	r3, r3, #23
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d013      	beq.n	8006d7a <HAL_GPIO_Init+0x1ca>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a45      	ldr	r2, [pc, #276]	@ (8006e6c <HAL_GPIO_Init+0x2bc>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d00d      	beq.n	8006d76 <HAL_GPIO_Init+0x1c6>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a44      	ldr	r2, [pc, #272]	@ (8006e70 <HAL_GPIO_Init+0x2c0>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d007      	beq.n	8006d72 <HAL_GPIO_Init+0x1c2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4a43      	ldr	r2, [pc, #268]	@ (8006e74 <HAL_GPIO_Init+0x2c4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d101      	bne.n	8006d6e <HAL_GPIO_Init+0x1be>
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e006      	b.n	8006d7c <HAL_GPIO_Init+0x1cc>
 8006d6e:	2305      	movs	r3, #5
 8006d70:	e004      	b.n	8006d7c <HAL_GPIO_Init+0x1cc>
 8006d72:	2302      	movs	r3, #2
 8006d74:	e002      	b.n	8006d7c <HAL_GPIO_Init+0x1cc>
 8006d76:	2301      	movs	r3, #1
 8006d78:	e000      	b.n	8006d7c <HAL_GPIO_Init+0x1cc>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	2103      	movs	r1, #3
 8006d80:	400a      	ands	r2, r1
 8006d82:	00d2      	lsls	r2, r2, #3
 8006d84:	4093      	lsls	r3, r2
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006d8c:	4936      	ldr	r1, [pc, #216]	@ (8006e68 <HAL_GPIO_Init+0x2b8>)
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	089b      	lsrs	r3, r3, #2
 8006d92:	3318      	adds	r3, #24
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d9a:	4b33      	ldr	r3, [pc, #204]	@ (8006e68 <HAL_GPIO_Init+0x2b8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	43da      	mvns	r2, r3
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	4013      	ands	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	2380      	movs	r3, #128	@ 0x80
 8006db0:	035b      	lsls	r3, r3, #13
 8006db2:	4013      	ands	r3, r2
 8006db4:	d003      	beq.n	8006dbe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8006e68 <HAL_GPIO_Init+0x2b8>)
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006dc4:	4b28      	ldr	r3, [pc, #160]	@ (8006e68 <HAL_GPIO_Init+0x2b8>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	43da      	mvns	r2, r3
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685a      	ldr	r2, [r3, #4]
 8006dd8:	2380      	movs	r3, #128	@ 0x80
 8006dda:	039b      	lsls	r3, r3, #14
 8006ddc:	4013      	ands	r3, r2
 8006dde:	d003      	beq.n	8006de8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006de8:	4b1f      	ldr	r3, [pc, #124]	@ (8006e68 <HAL_GPIO_Init+0x2b8>)
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006dee:	4a1e      	ldr	r2, [pc, #120]	@ (8006e68 <HAL_GPIO_Init+0x2b8>)
 8006df0:	2384      	movs	r3, #132	@ 0x84
 8006df2:	58d3      	ldr	r3, [r2, r3]
 8006df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	43da      	mvns	r2, r3
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	2380      	movs	r3, #128	@ 0x80
 8006e06:	029b      	lsls	r3, r3, #10
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d003      	beq.n	8006e14 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006e14:	4914      	ldr	r1, [pc, #80]	@ (8006e68 <HAL_GPIO_Init+0x2b8>)
 8006e16:	2284      	movs	r2, #132	@ 0x84
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006e1c:	4a12      	ldr	r2, [pc, #72]	@ (8006e68 <HAL_GPIO_Init+0x2b8>)
 8006e1e:	2380      	movs	r3, #128	@ 0x80
 8006e20:	58d3      	ldr	r3, [r2, r3]
 8006e22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	43da      	mvns	r2, r3
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	2380      	movs	r3, #128	@ 0x80
 8006e34:	025b      	lsls	r3, r3, #9
 8006e36:	4013      	ands	r3, r2
 8006e38:	d003      	beq.n	8006e42 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8006e3a:	693a      	ldr	r2, [r7, #16]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006e42:	4909      	ldr	r1, [pc, #36]	@ (8006e68 <HAL_GPIO_Init+0x2b8>)
 8006e44:	2280      	movs	r2, #128	@ 0x80
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	40da      	lsrs	r2, r3
 8006e58:	1e13      	subs	r3, r2, #0
 8006e5a:	d000      	beq.n	8006e5e <HAL_GPIO_Init+0x2ae>
 8006e5c:	e6b0      	b.n	8006bc0 <HAL_GPIO_Init+0x10>
  }
}
 8006e5e:	46c0      	nop			@ (mov r8, r8)
 8006e60:	46c0      	nop			@ (mov r8, r8)
 8006e62:	46bd      	mov	sp, r7
 8006e64:	b006      	add	sp, #24
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40021800 	.word	0x40021800
 8006e6c:	50000400 	.word	0x50000400
 8006e70:	50000800 	.word	0x50000800
 8006e74:	50000c00 	.word	0x50000c00

08006e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e08f      	b.n	8006faa <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2241      	movs	r2, #65	@ 0x41
 8006e8e:	5c9b      	ldrb	r3, [r3, r2]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d107      	bne.n	8006ea6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2240      	movs	r2, #64	@ 0x40
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	f7ff fb5d 	bl	8006560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2241      	movs	r2, #65	@ 0x41
 8006eaa:	2124      	movs	r1, #36	@ 0x24
 8006eac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2101      	movs	r1, #1
 8006eba:	438a      	bics	r2, r1
 8006ebc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685a      	ldr	r2, [r3, #4]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	493b      	ldr	r1, [pc, #236]	@ (8006fb4 <HAL_I2C_Init+0x13c>)
 8006ec8:	400a      	ands	r2, r1
 8006eca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4938      	ldr	r1, [pc, #224]	@ (8006fb8 <HAL_I2C_Init+0x140>)
 8006ed8:	400a      	ands	r2, r1
 8006eda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d108      	bne.n	8006ef6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	689a      	ldr	r2, [r3, #8]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2180      	movs	r1, #128	@ 0x80
 8006eee:	0209      	lsls	r1, r1, #8
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	609a      	str	r2, [r3, #8]
 8006ef4:	e007      	b.n	8006f06 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2184      	movs	r1, #132	@ 0x84
 8006f00:	0209      	lsls	r1, r1, #8
 8006f02:	430a      	orrs	r2, r1
 8006f04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d109      	bne.n	8006f22 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2180      	movs	r1, #128	@ 0x80
 8006f1a:	0109      	lsls	r1, r1, #4
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	605a      	str	r2, [r3, #4]
 8006f20:	e007      	b.n	8006f32 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4923      	ldr	r1, [pc, #140]	@ (8006fbc <HAL_I2C_Init+0x144>)
 8006f2e:	400a      	ands	r2, r1
 8006f30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4920      	ldr	r1, [pc, #128]	@ (8006fc0 <HAL_I2C_Init+0x148>)
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	491a      	ldr	r1, [pc, #104]	@ (8006fb8 <HAL_I2C_Init+0x140>)
 8006f4e:	400a      	ands	r2, r1
 8006f50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691a      	ldr	r2, [r3, #16]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	695b      	ldr	r3, [r3, #20]
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	69d9      	ldr	r1, [r3, #28]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1a      	ldr	r2, [r3, #32]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2101      	movs	r1, #1
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2241      	movs	r2, #65	@ 0x41
 8006f96:	2120      	movs	r1, #32
 8006f98:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2242      	movs	r2, #66	@ 0x42
 8006fa4:	2100      	movs	r1, #0
 8006fa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	0018      	movs	r0, r3
 8006fac:	46bd      	mov	sp, r7
 8006fae:	b002      	add	sp, #8
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	46c0      	nop			@ (mov r8, r8)
 8006fb4:	f0ffffff 	.word	0xf0ffffff
 8006fb8:	ffff7fff 	.word	0xffff7fff
 8006fbc:	fffff7ff 	.word	0xfffff7ff
 8006fc0:	02008000 	.word	0x02008000

08006fc4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fc4:	b590      	push	{r4, r7, lr}
 8006fc6:	b089      	sub	sp, #36	@ 0x24
 8006fc8:	af02      	add	r7, sp, #8
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	000c      	movs	r4, r1
 8006fce:	0010      	movs	r0, r2
 8006fd0:	0019      	movs	r1, r3
 8006fd2:	230a      	movs	r3, #10
 8006fd4:	18fb      	adds	r3, r7, r3
 8006fd6:	1c22      	adds	r2, r4, #0
 8006fd8:	801a      	strh	r2, [r3, #0]
 8006fda:	2308      	movs	r3, #8
 8006fdc:	18fb      	adds	r3, r7, r3
 8006fde:	1c02      	adds	r2, r0, #0
 8006fe0:	801a      	strh	r2, [r3, #0]
 8006fe2:	1dbb      	adds	r3, r7, #6
 8006fe4:	1c0a      	adds	r2, r1, #0
 8006fe6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2241      	movs	r2, #65	@ 0x41
 8006fec:	5c9b      	ldrb	r3, [r3, r2]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b20      	cmp	r3, #32
 8006ff2:	d000      	beq.n	8006ff6 <HAL_I2C_Mem_Write+0x32>
 8006ff4:	e10c      	b.n	8007210 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d004      	beq.n	8007006 <HAL_I2C_Mem_Write+0x42>
 8006ffc:	232c      	movs	r3, #44	@ 0x2c
 8006ffe:	18fb      	adds	r3, r7, r3
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d105      	bne.n	8007012 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2280      	movs	r2, #128	@ 0x80
 800700a:	0092      	lsls	r2, r2, #2
 800700c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e0ff      	b.n	8007212 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2240      	movs	r2, #64	@ 0x40
 8007016:	5c9b      	ldrb	r3, [r3, r2]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d101      	bne.n	8007020 <HAL_I2C_Mem_Write+0x5c>
 800701c:	2302      	movs	r3, #2
 800701e:	e0f8      	b.n	8007212 <HAL_I2C_Mem_Write+0x24e>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2240      	movs	r2, #64	@ 0x40
 8007024:	2101      	movs	r1, #1
 8007026:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007028:	f7ff fce0 	bl	80069ec <HAL_GetTick>
 800702c:	0003      	movs	r3, r0
 800702e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007030:	2380      	movs	r3, #128	@ 0x80
 8007032:	0219      	lsls	r1, r3, #8
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	2319      	movs	r3, #25
 800703c:	2201      	movs	r2, #1
 800703e:	f000 fc07 	bl	8007850 <I2C_WaitOnFlagUntilTimeout>
 8007042:	1e03      	subs	r3, r0, #0
 8007044:	d001      	beq.n	800704a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e0e3      	b.n	8007212 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2241      	movs	r2, #65	@ 0x41
 800704e:	2121      	movs	r1, #33	@ 0x21
 8007050:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2242      	movs	r2, #66	@ 0x42
 8007056:	2140      	movs	r1, #64	@ 0x40
 8007058:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007064:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	222c      	movs	r2, #44	@ 0x2c
 800706a:	18ba      	adds	r2, r7, r2
 800706c:	8812      	ldrh	r2, [r2, #0]
 800706e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007076:	1dbb      	adds	r3, r7, #6
 8007078:	881c      	ldrh	r4, [r3, #0]
 800707a:	2308      	movs	r3, #8
 800707c:	18fb      	adds	r3, r7, r3
 800707e:	881a      	ldrh	r2, [r3, #0]
 8007080:	230a      	movs	r3, #10
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	8819      	ldrh	r1, [r3, #0]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	0023      	movs	r3, r4
 8007092:	f000 faf5 	bl	8007680 <I2C_RequestMemoryWrite>
 8007096:	1e03      	subs	r3, r0, #0
 8007098:	d005      	beq.n	80070a6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2240      	movs	r2, #64	@ 0x40
 800709e:	2100      	movs	r1, #0
 80070a0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e0b5      	b.n	8007212 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	2bff      	cmp	r3, #255	@ 0xff
 80070ae:	d911      	bls.n	80070d4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	22ff      	movs	r2, #255	@ 0xff
 80070b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	2380      	movs	r3, #128	@ 0x80
 80070be:	045c      	lsls	r4, r3, #17
 80070c0:	230a      	movs	r3, #10
 80070c2:	18fb      	adds	r3, r7, r3
 80070c4:	8819      	ldrh	r1, [r3, #0]
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	2300      	movs	r3, #0
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	0023      	movs	r3, r4
 80070ce:	f000 fd99 	bl	8007c04 <I2C_TransferConfig>
 80070d2:	e012      	b.n	80070fa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070e2:	b2da      	uxtb	r2, r3
 80070e4:	2380      	movs	r3, #128	@ 0x80
 80070e6:	049c      	lsls	r4, r3, #18
 80070e8:	230a      	movs	r3, #10
 80070ea:	18fb      	adds	r3, r7, r3
 80070ec:	8819      	ldrh	r1, [r3, #0]
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	2300      	movs	r3, #0
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	0023      	movs	r3, r4
 80070f6:	f000 fd85 	bl	8007c04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	0018      	movs	r0, r3
 8007102:	f000 fbfd 	bl	8007900 <I2C_WaitOnTXISFlagUntilTimeout>
 8007106:	1e03      	subs	r3, r0, #0
 8007108:	d001      	beq.n	800710e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e081      	b.n	8007212 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007136:	3b01      	subs	r3, #1
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007142:	b29b      	uxth	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d03a      	beq.n	80071be <HAL_I2C_Mem_Write+0x1fa>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800714c:	2b00      	cmp	r3, #0
 800714e:	d136      	bne.n	80071be <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	0013      	movs	r3, r2
 800715a:	2200      	movs	r2, #0
 800715c:	2180      	movs	r1, #128	@ 0x80
 800715e:	f000 fb77 	bl	8007850 <I2C_WaitOnFlagUntilTimeout>
 8007162:	1e03      	subs	r3, r0, #0
 8007164:	d001      	beq.n	800716a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e053      	b.n	8007212 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800716e:	b29b      	uxth	r3, r3
 8007170:	2bff      	cmp	r3, #255	@ 0xff
 8007172:	d911      	bls.n	8007198 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	22ff      	movs	r2, #255	@ 0xff
 8007178:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800717e:	b2da      	uxtb	r2, r3
 8007180:	2380      	movs	r3, #128	@ 0x80
 8007182:	045c      	lsls	r4, r3, #17
 8007184:	230a      	movs	r3, #10
 8007186:	18fb      	adds	r3, r7, r3
 8007188:	8819      	ldrh	r1, [r3, #0]
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	2300      	movs	r3, #0
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	0023      	movs	r3, r4
 8007192:	f000 fd37 	bl	8007c04 <I2C_TransferConfig>
 8007196:	e012      	b.n	80071be <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800719c:	b29a      	uxth	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	2380      	movs	r3, #128	@ 0x80
 80071aa:	049c      	lsls	r4, r3, #18
 80071ac:	230a      	movs	r3, #10
 80071ae:	18fb      	adds	r3, r7, r3
 80071b0:	8819      	ldrh	r1, [r3, #0]
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	2300      	movs	r3, #0
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	0023      	movs	r3, r4
 80071ba:	f000 fd23 	bl	8007c04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d198      	bne.n	80070fa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	0018      	movs	r0, r3
 80071d0:	f000 fbdc 	bl	800798c <I2C_WaitOnSTOPFlagUntilTimeout>
 80071d4:	1e03      	subs	r3, r0, #0
 80071d6:	d001      	beq.n	80071dc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e01a      	b.n	8007212 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2220      	movs	r2, #32
 80071e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	490b      	ldr	r1, [pc, #44]	@ (800721c <HAL_I2C_Mem_Write+0x258>)
 80071f0:	400a      	ands	r2, r1
 80071f2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2241      	movs	r2, #65	@ 0x41
 80071f8:	2120      	movs	r1, #32
 80071fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2242      	movs	r2, #66	@ 0x42
 8007200:	2100      	movs	r1, #0
 8007202:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2240      	movs	r2, #64	@ 0x40
 8007208:	2100      	movs	r1, #0
 800720a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	e000      	b.n	8007212 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8007210:	2302      	movs	r3, #2
  }
}
 8007212:	0018      	movs	r0, r3
 8007214:	46bd      	mov	sp, r7
 8007216:	b007      	add	sp, #28
 8007218:	bd90      	pop	{r4, r7, pc}
 800721a:	46c0      	nop			@ (mov r8, r8)
 800721c:	fe00e800 	.word	0xfe00e800

08007220 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b089      	sub	sp, #36	@ 0x24
 8007224:	af02      	add	r7, sp, #8
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	000c      	movs	r4, r1
 800722a:	0010      	movs	r0, r2
 800722c:	0019      	movs	r1, r3
 800722e:	230a      	movs	r3, #10
 8007230:	18fb      	adds	r3, r7, r3
 8007232:	1c22      	adds	r2, r4, #0
 8007234:	801a      	strh	r2, [r3, #0]
 8007236:	2308      	movs	r3, #8
 8007238:	18fb      	adds	r3, r7, r3
 800723a:	1c02      	adds	r2, r0, #0
 800723c:	801a      	strh	r2, [r3, #0]
 800723e:	1dbb      	adds	r3, r7, #6
 8007240:	1c0a      	adds	r2, r1, #0
 8007242:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2241      	movs	r2, #65	@ 0x41
 8007248:	5c9b      	ldrb	r3, [r3, r2]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	2b20      	cmp	r3, #32
 800724e:	d000      	beq.n	8007252 <HAL_I2C_Mem_Read+0x32>
 8007250:	e110      	b.n	8007474 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8007252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <HAL_I2C_Mem_Read+0x42>
 8007258:	232c      	movs	r3, #44	@ 0x2c
 800725a:	18fb      	adds	r3, r7, r3
 800725c:	881b      	ldrh	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d105      	bne.n	800726e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2280      	movs	r2, #128	@ 0x80
 8007266:	0092      	lsls	r2, r2, #2
 8007268:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e103      	b.n	8007476 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2240      	movs	r2, #64	@ 0x40
 8007272:	5c9b      	ldrb	r3, [r3, r2]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d101      	bne.n	800727c <HAL_I2C_Mem_Read+0x5c>
 8007278:	2302      	movs	r3, #2
 800727a:	e0fc      	b.n	8007476 <HAL_I2C_Mem_Read+0x256>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2240      	movs	r2, #64	@ 0x40
 8007280:	2101      	movs	r1, #1
 8007282:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007284:	f7ff fbb2 	bl	80069ec <HAL_GetTick>
 8007288:	0003      	movs	r3, r0
 800728a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800728c:	2380      	movs	r3, #128	@ 0x80
 800728e:	0219      	lsls	r1, r3, #8
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	2319      	movs	r3, #25
 8007298:	2201      	movs	r2, #1
 800729a:	f000 fad9 	bl	8007850 <I2C_WaitOnFlagUntilTimeout>
 800729e:	1e03      	subs	r3, r0, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e0e7      	b.n	8007476 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2241      	movs	r2, #65	@ 0x41
 80072aa:	2122      	movs	r1, #34	@ 0x22
 80072ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2242      	movs	r2, #66	@ 0x42
 80072b2:	2140      	movs	r1, #64	@ 0x40
 80072b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	222c      	movs	r2, #44	@ 0x2c
 80072c6:	18ba      	adds	r2, r7, r2
 80072c8:	8812      	ldrh	r2, [r2, #0]
 80072ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072d2:	1dbb      	adds	r3, r7, #6
 80072d4:	881c      	ldrh	r4, [r3, #0]
 80072d6:	2308      	movs	r3, #8
 80072d8:	18fb      	adds	r3, r7, r3
 80072da:	881a      	ldrh	r2, [r3, #0]
 80072dc:	230a      	movs	r3, #10
 80072de:	18fb      	adds	r3, r7, r3
 80072e0:	8819      	ldrh	r1, [r3, #0]
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	0023      	movs	r3, r4
 80072ee:	f000 fa2b 	bl	8007748 <I2C_RequestMemoryRead>
 80072f2:	1e03      	subs	r3, r0, #0
 80072f4:	d005      	beq.n	8007302 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2240      	movs	r2, #64	@ 0x40
 80072fa:	2100      	movs	r1, #0
 80072fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e0b9      	b.n	8007476 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007306:	b29b      	uxth	r3, r3
 8007308:	2bff      	cmp	r3, #255	@ 0xff
 800730a:	d911      	bls.n	8007330 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	22ff      	movs	r2, #255	@ 0xff
 8007310:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007316:	b2da      	uxtb	r2, r3
 8007318:	2380      	movs	r3, #128	@ 0x80
 800731a:	045c      	lsls	r4, r3, #17
 800731c:	230a      	movs	r3, #10
 800731e:	18fb      	adds	r3, r7, r3
 8007320:	8819      	ldrh	r1, [r3, #0]
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	4b56      	ldr	r3, [pc, #344]	@ (8007480 <HAL_I2C_Mem_Read+0x260>)
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	0023      	movs	r3, r4
 800732a:	f000 fc6b 	bl	8007c04 <I2C_TransferConfig>
 800732e:	e012      	b.n	8007356 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800733e:	b2da      	uxtb	r2, r3
 8007340:	2380      	movs	r3, #128	@ 0x80
 8007342:	049c      	lsls	r4, r3, #18
 8007344:	230a      	movs	r3, #10
 8007346:	18fb      	adds	r3, r7, r3
 8007348:	8819      	ldrh	r1, [r3, #0]
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	4b4c      	ldr	r3, [pc, #304]	@ (8007480 <HAL_I2C_Mem_Read+0x260>)
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	0023      	movs	r3, r4
 8007352:	f000 fc57 	bl	8007c04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	0013      	movs	r3, r2
 8007360:	2200      	movs	r2, #0
 8007362:	2104      	movs	r1, #4
 8007364:	f000 fa74 	bl	8007850 <I2C_WaitOnFlagUntilTimeout>
 8007368:	1e03      	subs	r3, r0, #0
 800736a:	d001      	beq.n	8007370 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e082      	b.n	8007476 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800738c:	3b01      	subs	r3, #1
 800738e:	b29a      	uxth	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d03a      	beq.n	8007422 <HAL_I2C_Mem_Read+0x202>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d136      	bne.n	8007422 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80073b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	0013      	movs	r3, r2
 80073be:	2200      	movs	r2, #0
 80073c0:	2180      	movs	r1, #128	@ 0x80
 80073c2:	f000 fa45 	bl	8007850 <I2C_WaitOnFlagUntilTimeout>
 80073c6:	1e03      	subs	r3, r0, #0
 80073c8:	d001      	beq.n	80073ce <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e053      	b.n	8007476 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	2bff      	cmp	r3, #255	@ 0xff
 80073d6:	d911      	bls.n	80073fc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	22ff      	movs	r2, #255	@ 0xff
 80073dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e2:	b2da      	uxtb	r2, r3
 80073e4:	2380      	movs	r3, #128	@ 0x80
 80073e6:	045c      	lsls	r4, r3, #17
 80073e8:	230a      	movs	r3, #10
 80073ea:	18fb      	adds	r3, r7, r3
 80073ec:	8819      	ldrh	r1, [r3, #0]
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	2300      	movs	r3, #0
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	0023      	movs	r3, r4
 80073f6:	f000 fc05 	bl	8007c04 <I2C_TransferConfig>
 80073fa:	e012      	b.n	8007422 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800740a:	b2da      	uxtb	r2, r3
 800740c:	2380      	movs	r3, #128	@ 0x80
 800740e:	049c      	lsls	r4, r3, #18
 8007410:	230a      	movs	r3, #10
 8007412:	18fb      	adds	r3, r7, r3
 8007414:	8819      	ldrh	r1, [r3, #0]
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	2300      	movs	r3, #0
 800741a:	9300      	str	r3, [sp, #0]
 800741c:	0023      	movs	r3, r4
 800741e:	f000 fbf1 	bl	8007c04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007426:	b29b      	uxth	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d194      	bne.n	8007356 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	0018      	movs	r0, r3
 8007434:	f000 faaa 	bl	800798c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007438:	1e03      	subs	r3, r0, #0
 800743a:	d001      	beq.n	8007440 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e01a      	b.n	8007476 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2220      	movs	r2, #32
 8007446:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	490c      	ldr	r1, [pc, #48]	@ (8007484 <HAL_I2C_Mem_Read+0x264>)
 8007454:	400a      	ands	r2, r1
 8007456:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2241      	movs	r2, #65	@ 0x41
 800745c:	2120      	movs	r1, #32
 800745e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2242      	movs	r2, #66	@ 0x42
 8007464:	2100      	movs	r1, #0
 8007466:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2240      	movs	r2, #64	@ 0x40
 800746c:	2100      	movs	r1, #0
 800746e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007470:	2300      	movs	r3, #0
 8007472:	e000      	b.n	8007476 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007474:	2302      	movs	r3, #2
  }
}
 8007476:	0018      	movs	r0, r3
 8007478:	46bd      	mov	sp, r7
 800747a:	b007      	add	sp, #28
 800747c:	bd90      	pop	{r4, r7, pc}
 800747e:	46c0      	nop			@ (mov r8, r8)
 8007480:	80002400 	.word	0x80002400
 8007484:	fe00e800 	.word	0xfe00e800

08007488 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08a      	sub	sp, #40	@ 0x28
 800748c:	af02      	add	r7, sp, #8
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	607a      	str	r2, [r7, #4]
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	230a      	movs	r3, #10
 8007496:	18fb      	adds	r3, r7, r3
 8007498:	1c0a      	adds	r2, r1, #0
 800749a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800749c:	2300      	movs	r3, #0
 800749e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2241      	movs	r2, #65	@ 0x41
 80074a4:	5c9b      	ldrb	r3, [r3, r2]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b20      	cmp	r3, #32
 80074aa:	d000      	beq.n	80074ae <HAL_I2C_IsDeviceReady+0x26>
 80074ac:	e0df      	b.n	800766e <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	699a      	ldr	r2, [r3, #24]
 80074b4:	2380      	movs	r3, #128	@ 0x80
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	401a      	ands	r2, r3
 80074ba:	2380      	movs	r3, #128	@ 0x80
 80074bc:	021b      	lsls	r3, r3, #8
 80074be:	429a      	cmp	r2, r3
 80074c0:	d101      	bne.n	80074c6 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80074c2:	2302      	movs	r3, #2
 80074c4:	e0d4      	b.n	8007670 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2240      	movs	r2, #64	@ 0x40
 80074ca:	5c9b      	ldrb	r3, [r3, r2]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d101      	bne.n	80074d4 <HAL_I2C_IsDeviceReady+0x4c>
 80074d0:	2302      	movs	r3, #2
 80074d2:	e0cd      	b.n	8007670 <HAL_I2C_IsDeviceReady+0x1e8>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2240      	movs	r2, #64	@ 0x40
 80074d8:	2101      	movs	r1, #1
 80074da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2241      	movs	r2, #65	@ 0x41
 80074e0:	2124      	movs	r1, #36	@ 0x24
 80074e2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2200      	movs	r2, #0
 80074e8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d107      	bne.n	8007502 <HAL_I2C_IsDeviceReady+0x7a>
 80074f2:	230a      	movs	r3, #10
 80074f4:	18fb      	adds	r3, r7, r3
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	059b      	lsls	r3, r3, #22
 80074fa:	0d9b      	lsrs	r3, r3, #22
 80074fc:	4a5e      	ldr	r2, [pc, #376]	@ (8007678 <HAL_I2C_IsDeviceReady+0x1f0>)
 80074fe:	431a      	orrs	r2, r3
 8007500:	e006      	b.n	8007510 <HAL_I2C_IsDeviceReady+0x88>
 8007502:	230a      	movs	r3, #10
 8007504:	18fb      	adds	r3, r7, r3
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	059b      	lsls	r3, r3, #22
 800750a:	0d9b      	lsrs	r3, r3, #22
 800750c:	4a5b      	ldr	r2, [pc, #364]	@ (800767c <HAL_I2C_IsDeviceReady+0x1f4>)
 800750e:	431a      	orrs	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007516:	f7ff fa69 	bl	80069ec <HAL_GetTick>
 800751a:	0003      	movs	r3, r0
 800751c:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	2220      	movs	r2, #32
 8007526:	4013      	ands	r3, r2
 8007528:	3b20      	subs	r3, #32
 800752a:	425a      	negs	r2, r3
 800752c:	4153      	adcs	r3, r2
 800752e:	b2da      	uxtb	r2, r3
 8007530:	231f      	movs	r3, #31
 8007532:	18fb      	adds	r3, r7, r3
 8007534:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	2210      	movs	r2, #16
 800753e:	4013      	ands	r3, r2
 8007540:	3b10      	subs	r3, #16
 8007542:	425a      	negs	r2, r3
 8007544:	4153      	adcs	r3, r2
 8007546:	b2da      	uxtb	r2, r3
 8007548:	231e      	movs	r3, #30
 800754a:	18fb      	adds	r3, r7, r3
 800754c:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800754e:	e035      	b.n	80075bc <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	3301      	adds	r3, #1
 8007554:	d01a      	beq.n	800758c <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007556:	f7ff fa49 	bl	80069ec <HAL_GetTick>
 800755a:	0002      	movs	r2, r0
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	429a      	cmp	r2, r3
 8007564:	d302      	bcc.n	800756c <HAL_I2C_IsDeviceReady+0xe4>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10f      	bne.n	800758c <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2241      	movs	r2, #65	@ 0x41
 8007570:	2120      	movs	r1, #32
 8007572:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007578:	2220      	movs	r2, #32
 800757a:	431a      	orrs	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2240      	movs	r2, #64	@ 0x40
 8007584:	2100      	movs	r1, #0
 8007586:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e071      	b.n	8007670 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	2220      	movs	r2, #32
 8007594:	4013      	ands	r3, r2
 8007596:	3b20      	subs	r3, #32
 8007598:	425a      	negs	r2, r3
 800759a:	4153      	adcs	r3, r2
 800759c:	b2da      	uxtb	r2, r3
 800759e:	231f      	movs	r3, #31
 80075a0:	18fb      	adds	r3, r7, r3
 80075a2:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	2210      	movs	r2, #16
 80075ac:	4013      	ands	r3, r2
 80075ae:	3b10      	subs	r3, #16
 80075b0:	425a      	negs	r2, r3
 80075b2:	4153      	adcs	r3, r2
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	231e      	movs	r3, #30
 80075b8:	18fb      	adds	r3, r7, r3
 80075ba:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80075bc:	231f      	movs	r3, #31
 80075be:	18fb      	adds	r3, r7, r3
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d104      	bne.n	80075d0 <HAL_I2C_IsDeviceReady+0x148>
 80075c6:	231e      	movs	r3, #30
 80075c8:	18fb      	adds	r3, r7, r3
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d0bf      	beq.n	8007550 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	2210      	movs	r2, #16
 80075d8:	4013      	ands	r3, r2
 80075da:	2b10      	cmp	r3, #16
 80075dc:	d01a      	beq.n	8007614 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	68f8      	ldr	r0, [r7, #12]
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	0013      	movs	r3, r2
 80075e8:	2200      	movs	r2, #0
 80075ea:	2120      	movs	r1, #32
 80075ec:	f000 f930 	bl	8007850 <I2C_WaitOnFlagUntilTimeout>
 80075f0:	1e03      	subs	r3, r0, #0
 80075f2:	d001      	beq.n	80075f8 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e03b      	b.n	8007670 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2220      	movs	r2, #32
 80075fe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2241      	movs	r2, #65	@ 0x41
 8007604:	2120      	movs	r1, #32
 8007606:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2240      	movs	r2, #64	@ 0x40
 800760c:	2100      	movs	r1, #0
 800760e:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	e02d      	b.n	8007670 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	0013      	movs	r3, r2
 800761e:	2200      	movs	r2, #0
 8007620:	2120      	movs	r1, #32
 8007622:	f000 f915 	bl	8007850 <I2C_WaitOnFlagUntilTimeout>
 8007626:	1e03      	subs	r3, r0, #0
 8007628:	d001      	beq.n	800762e <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e020      	b.n	8007670 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2210      	movs	r2, #16
 8007634:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2220      	movs	r2, #32
 800763c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	3301      	adds	r3, #1
 8007642:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	429a      	cmp	r2, r3
 800764a:	d900      	bls.n	800764e <HAL_I2C_IsDeviceReady+0x1c6>
 800764c:	e74d      	b.n	80074ea <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2241      	movs	r2, #65	@ 0x41
 8007652:	2120      	movs	r1, #32
 8007654:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800765a:	2220      	movs	r2, #32
 800765c:	431a      	orrs	r2, r3
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2240      	movs	r2, #64	@ 0x40
 8007666:	2100      	movs	r1, #0
 8007668:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e000      	b.n	8007670 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800766e:	2302      	movs	r3, #2
  }
}
 8007670:	0018      	movs	r0, r3
 8007672:	46bd      	mov	sp, r7
 8007674:	b008      	add	sp, #32
 8007676:	bd80      	pop	{r7, pc}
 8007678:	02002000 	.word	0x02002000
 800767c:	02002800 	.word	0x02002800

08007680 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007680:	b5b0      	push	{r4, r5, r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af02      	add	r7, sp, #8
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	000c      	movs	r4, r1
 800768a:	0010      	movs	r0, r2
 800768c:	0019      	movs	r1, r3
 800768e:	250a      	movs	r5, #10
 8007690:	197b      	adds	r3, r7, r5
 8007692:	1c22      	adds	r2, r4, #0
 8007694:	801a      	strh	r2, [r3, #0]
 8007696:	2308      	movs	r3, #8
 8007698:	18fb      	adds	r3, r7, r3
 800769a:	1c02      	adds	r2, r0, #0
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	1dbb      	adds	r3, r7, #6
 80076a0:	1c0a      	adds	r2, r1, #0
 80076a2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80076a4:	1dbb      	adds	r3, r7, #6
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	b2da      	uxtb	r2, r3
 80076aa:	2380      	movs	r3, #128	@ 0x80
 80076ac:	045c      	lsls	r4, r3, #17
 80076ae:	197b      	adds	r3, r7, r5
 80076b0:	8819      	ldrh	r1, [r3, #0]
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	4b23      	ldr	r3, [pc, #140]	@ (8007744 <I2C_RequestMemoryWrite+0xc4>)
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	0023      	movs	r3, r4
 80076ba:	f000 faa3 	bl	8007c04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076c0:	6a39      	ldr	r1, [r7, #32]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	0018      	movs	r0, r3
 80076c6:	f000 f91b 	bl	8007900 <I2C_WaitOnTXISFlagUntilTimeout>
 80076ca:	1e03      	subs	r3, r0, #0
 80076cc:	d001      	beq.n	80076d2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e033      	b.n	800773a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076d2:	1dbb      	adds	r3, r7, #6
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d107      	bne.n	80076ea <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076da:	2308      	movs	r3, #8
 80076dc:	18fb      	adds	r3, r7, r3
 80076de:	881b      	ldrh	r3, [r3, #0]
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80076e8:	e019      	b.n	800771e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076ea:	2308      	movs	r3, #8
 80076ec:	18fb      	adds	r3, r7, r3
 80076ee:	881b      	ldrh	r3, [r3, #0]
 80076f0:	0a1b      	lsrs	r3, r3, #8
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	b2da      	uxtb	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076fe:	6a39      	ldr	r1, [r7, #32]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	0018      	movs	r0, r3
 8007704:	f000 f8fc 	bl	8007900 <I2C_WaitOnTXISFlagUntilTimeout>
 8007708:	1e03      	subs	r3, r0, #0
 800770a:	d001      	beq.n	8007710 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e014      	b.n	800773a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007710:	2308      	movs	r3, #8
 8007712:	18fb      	adds	r3, r7, r3
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	b2da      	uxtb	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800771e:	6a3a      	ldr	r2, [r7, #32]
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	0013      	movs	r3, r2
 8007728:	2200      	movs	r2, #0
 800772a:	2180      	movs	r1, #128	@ 0x80
 800772c:	f000 f890 	bl	8007850 <I2C_WaitOnFlagUntilTimeout>
 8007730:	1e03      	subs	r3, r0, #0
 8007732:	d001      	beq.n	8007738 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e000      	b.n	800773a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	0018      	movs	r0, r3
 800773c:	46bd      	mov	sp, r7
 800773e:	b004      	add	sp, #16
 8007740:	bdb0      	pop	{r4, r5, r7, pc}
 8007742:	46c0      	nop			@ (mov r8, r8)
 8007744:	80002000 	.word	0x80002000

08007748 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007748:	b5b0      	push	{r4, r5, r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	000c      	movs	r4, r1
 8007752:	0010      	movs	r0, r2
 8007754:	0019      	movs	r1, r3
 8007756:	250a      	movs	r5, #10
 8007758:	197b      	adds	r3, r7, r5
 800775a:	1c22      	adds	r2, r4, #0
 800775c:	801a      	strh	r2, [r3, #0]
 800775e:	2308      	movs	r3, #8
 8007760:	18fb      	adds	r3, r7, r3
 8007762:	1c02      	adds	r2, r0, #0
 8007764:	801a      	strh	r2, [r3, #0]
 8007766:	1dbb      	adds	r3, r7, #6
 8007768:	1c0a      	adds	r2, r1, #0
 800776a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800776c:	1dbb      	adds	r3, r7, #6
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b2da      	uxtb	r2, r3
 8007772:	197b      	adds	r3, r7, r5
 8007774:	8819      	ldrh	r1, [r3, #0]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	4b23      	ldr	r3, [pc, #140]	@ (8007808 <I2C_RequestMemoryRead+0xc0>)
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	2300      	movs	r3, #0
 800777e:	f000 fa41 	bl	8007c04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007784:	6a39      	ldr	r1, [r7, #32]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	0018      	movs	r0, r3
 800778a:	f000 f8b9 	bl	8007900 <I2C_WaitOnTXISFlagUntilTimeout>
 800778e:	1e03      	subs	r3, r0, #0
 8007790:	d001      	beq.n	8007796 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e033      	b.n	80077fe <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007796:	1dbb      	adds	r3, r7, #6
 8007798:	881b      	ldrh	r3, [r3, #0]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d107      	bne.n	80077ae <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800779e:	2308      	movs	r3, #8
 80077a0:	18fb      	adds	r3, r7, r3
 80077a2:	881b      	ldrh	r3, [r3, #0]
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80077ac:	e019      	b.n	80077e2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80077ae:	2308      	movs	r3, #8
 80077b0:	18fb      	adds	r3, r7, r3
 80077b2:	881b      	ldrh	r3, [r3, #0]
 80077b4:	0a1b      	lsrs	r3, r3, #8
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077c2:	6a39      	ldr	r1, [r7, #32]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	0018      	movs	r0, r3
 80077c8:	f000 f89a 	bl	8007900 <I2C_WaitOnTXISFlagUntilTimeout>
 80077cc:	1e03      	subs	r3, r0, #0
 80077ce:	d001      	beq.n	80077d4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e014      	b.n	80077fe <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077d4:	2308      	movs	r3, #8
 80077d6:	18fb      	adds	r3, r7, r3
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80077e2:	6a3a      	ldr	r2, [r7, #32]
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	0013      	movs	r3, r2
 80077ec:	2200      	movs	r2, #0
 80077ee:	2140      	movs	r1, #64	@ 0x40
 80077f0:	f000 f82e 	bl	8007850 <I2C_WaitOnFlagUntilTimeout>
 80077f4:	1e03      	subs	r3, r0, #0
 80077f6:	d001      	beq.n	80077fc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	0018      	movs	r0, r3
 8007800:	46bd      	mov	sp, r7
 8007802:	b004      	add	sp, #16
 8007804:	bdb0      	pop	{r4, r5, r7, pc}
 8007806:	46c0      	nop			@ (mov r8, r8)
 8007808:	80002000 	.word	0x80002000

0800780c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	2202      	movs	r2, #2
 800781c:	4013      	ands	r3, r2
 800781e:	2b02      	cmp	r3, #2
 8007820:	d103      	bne.n	800782a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2200      	movs	r2, #0
 8007828:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	2201      	movs	r2, #1
 8007832:	4013      	ands	r3, r2
 8007834:	2b01      	cmp	r3, #1
 8007836:	d007      	beq.n	8007848 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699a      	ldr	r2, [r3, #24]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2101      	movs	r1, #1
 8007844:	430a      	orrs	r2, r1
 8007846:	619a      	str	r2, [r3, #24]
  }
}
 8007848:	46c0      	nop			@ (mov r8, r8)
 800784a:	46bd      	mov	sp, r7
 800784c:	b002      	add	sp, #8
 800784e:	bd80      	pop	{r7, pc}

08007850 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	603b      	str	r3, [r7, #0]
 800785c:	1dfb      	adds	r3, r7, #7
 800785e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007860:	e03a      	b.n	80078d8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	0018      	movs	r0, r3
 800786a:	f000 f8d3 	bl	8007a14 <I2C_IsErrorOccurred>
 800786e:	1e03      	subs	r3, r0, #0
 8007870:	d001      	beq.n	8007876 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e040      	b.n	80078f8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	3301      	adds	r3, #1
 800787a:	d02d      	beq.n	80078d8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800787c:	f7ff f8b6 	bl	80069ec <HAL_GetTick>
 8007880:	0002      	movs	r2, r0
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	429a      	cmp	r2, r3
 800788a:	d302      	bcc.n	8007892 <I2C_WaitOnFlagUntilTimeout+0x42>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d122      	bne.n	80078d8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	4013      	ands	r3, r2
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	425a      	negs	r2, r3
 80078a2:	4153      	adcs	r3, r2
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	001a      	movs	r2, r3
 80078a8:	1dfb      	adds	r3, r7, #7
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d113      	bne.n	80078d8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078b4:	2220      	movs	r2, #32
 80078b6:	431a      	orrs	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2241      	movs	r2, #65	@ 0x41
 80078c0:	2120      	movs	r1, #32
 80078c2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2242      	movs	r2, #66	@ 0x42
 80078c8:	2100      	movs	r1, #0
 80078ca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2240      	movs	r2, #64	@ 0x40
 80078d0:	2100      	movs	r1, #0
 80078d2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e00f      	b.n	80078f8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	4013      	ands	r3, r2
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	425a      	negs	r2, r3
 80078e8:	4153      	adcs	r3, r2
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	001a      	movs	r2, r3
 80078ee:	1dfb      	adds	r3, r7, #7
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d0b5      	beq.n	8007862 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	0018      	movs	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b004      	add	sp, #16
 80078fe:	bd80      	pop	{r7, pc}

08007900 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800790c:	e032      	b.n	8007974 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	68b9      	ldr	r1, [r7, #8]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	0018      	movs	r0, r3
 8007916:	f000 f87d 	bl	8007a14 <I2C_IsErrorOccurred>
 800791a:	1e03      	subs	r3, r0, #0
 800791c:	d001      	beq.n	8007922 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e030      	b.n	8007984 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	3301      	adds	r3, #1
 8007926:	d025      	beq.n	8007974 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007928:	f7ff f860 	bl	80069ec <HAL_GetTick>
 800792c:	0002      	movs	r2, r0
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	68ba      	ldr	r2, [r7, #8]
 8007934:	429a      	cmp	r2, r3
 8007936:	d302      	bcc.n	800793e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d11a      	bne.n	8007974 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	2202      	movs	r2, #2
 8007946:	4013      	ands	r3, r2
 8007948:	2b02      	cmp	r3, #2
 800794a:	d013      	beq.n	8007974 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007950:	2220      	movs	r2, #32
 8007952:	431a      	orrs	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2241      	movs	r2, #65	@ 0x41
 800795c:	2120      	movs	r1, #32
 800795e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2242      	movs	r2, #66	@ 0x42
 8007964:	2100      	movs	r1, #0
 8007966:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2240      	movs	r2, #64	@ 0x40
 800796c:	2100      	movs	r1, #0
 800796e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e007      	b.n	8007984 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	2202      	movs	r2, #2
 800797c:	4013      	ands	r3, r2
 800797e:	2b02      	cmp	r3, #2
 8007980:	d1c5      	bne.n	800790e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	0018      	movs	r0, r3
 8007986:	46bd      	mov	sp, r7
 8007988:	b004      	add	sp, #16
 800798a:	bd80      	pop	{r7, pc}

0800798c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007998:	e02f      	b.n	80079fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	68b9      	ldr	r1, [r7, #8]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	0018      	movs	r0, r3
 80079a2:	f000 f837 	bl	8007a14 <I2C_IsErrorOccurred>
 80079a6:	1e03      	subs	r3, r0, #0
 80079a8:	d001      	beq.n	80079ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e02d      	b.n	8007a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ae:	f7ff f81d 	bl	80069ec <HAL_GetTick>
 80079b2:	0002      	movs	r2, r0
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d302      	bcc.n	80079c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d11a      	bne.n	80079fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	2220      	movs	r2, #32
 80079cc:	4013      	ands	r3, r2
 80079ce:	2b20      	cmp	r3, #32
 80079d0:	d013      	beq.n	80079fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079d6:	2220      	movs	r2, #32
 80079d8:	431a      	orrs	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2241      	movs	r2, #65	@ 0x41
 80079e2:	2120      	movs	r1, #32
 80079e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2242      	movs	r2, #66	@ 0x42
 80079ea:	2100      	movs	r1, #0
 80079ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2240      	movs	r2, #64	@ 0x40
 80079f2:	2100      	movs	r1, #0
 80079f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e007      	b.n	8007a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	2220      	movs	r2, #32
 8007a02:	4013      	ands	r3, r2
 8007a04:	2b20      	cmp	r3, #32
 8007a06:	d1c8      	bne.n	800799a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	b004      	add	sp, #16
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08a      	sub	sp, #40	@ 0x28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a20:	2327      	movs	r3, #39	@ 0x27
 8007a22:	18fb      	adds	r3, r7, r3
 8007a24:	2200      	movs	r2, #0
 8007a26:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	2210      	movs	r2, #16
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	d100      	bne.n	8007a42 <I2C_IsErrorOccurred+0x2e>
 8007a40:	e079      	b.n	8007b36 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2210      	movs	r2, #16
 8007a48:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a4a:	e057      	b.n	8007afc <I2C_IsErrorOccurred+0xe8>
 8007a4c:	2227      	movs	r2, #39	@ 0x27
 8007a4e:	18bb      	adds	r3, r7, r2
 8007a50:	18ba      	adds	r2, r7, r2
 8007a52:	7812      	ldrb	r2, [r2, #0]
 8007a54:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	d04f      	beq.n	8007afc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a5c:	f7fe ffc6 	bl	80069ec <HAL_GetTick>
 8007a60:	0002      	movs	r2, r0
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d302      	bcc.n	8007a72 <I2C_IsErrorOccurred+0x5e>
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d144      	bne.n	8007afc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685a      	ldr	r2, [r3, #4]
 8007a78:	2380      	movs	r3, #128	@ 0x80
 8007a7a:	01db      	lsls	r3, r3, #7
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007a80:	2013      	movs	r0, #19
 8007a82:	183b      	adds	r3, r7, r0
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	2142      	movs	r1, #66	@ 0x42
 8007a88:	5c52      	ldrb	r2, [r2, r1]
 8007a8a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	2380      	movs	r3, #128	@ 0x80
 8007a94:	021b      	lsls	r3, r3, #8
 8007a96:	401a      	ands	r2, r3
 8007a98:	2380      	movs	r3, #128	@ 0x80
 8007a9a:	021b      	lsls	r3, r3, #8
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d126      	bne.n	8007aee <I2C_IsErrorOccurred+0xda>
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	2380      	movs	r3, #128	@ 0x80
 8007aa4:	01db      	lsls	r3, r3, #7
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d021      	beq.n	8007aee <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8007aaa:	183b      	adds	r3, r7, r0
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	2b20      	cmp	r3, #32
 8007ab0:	d01d      	beq.n	8007aee <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2180      	movs	r1, #128	@ 0x80
 8007abe:	01c9      	lsls	r1, r1, #7
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007ac4:	f7fe ff92 	bl	80069ec <HAL_GetTick>
 8007ac8:	0003      	movs	r3, r0
 8007aca:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007acc:	e00f      	b.n	8007aee <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007ace:	f7fe ff8d 	bl	80069ec <HAL_GetTick>
 8007ad2:	0002      	movs	r2, r0
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b19      	cmp	r3, #25
 8007ada:	d908      	bls.n	8007aee <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	2220      	movs	r2, #32
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007ae4:	2327      	movs	r3, #39	@ 0x27
 8007ae6:	18fb      	adds	r3, r7, r3
 8007ae8:	2201      	movs	r2, #1
 8007aea:	701a      	strb	r2, [r3, #0]

              break;
 8007aec:	e006      	b.n	8007afc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	2220      	movs	r2, #32
 8007af6:	4013      	ands	r3, r2
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	d1e8      	bne.n	8007ace <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	2220      	movs	r2, #32
 8007b04:	4013      	ands	r3, r2
 8007b06:	2b20      	cmp	r3, #32
 8007b08:	d004      	beq.n	8007b14 <I2C_IsErrorOccurred+0x100>
 8007b0a:	2327      	movs	r3, #39	@ 0x27
 8007b0c:	18fb      	adds	r3, r7, r3
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d09b      	beq.n	8007a4c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007b14:	2327      	movs	r3, #39	@ 0x27
 8007b16:	18fb      	adds	r3, r7, r3
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d103      	bne.n	8007b26 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2220      	movs	r2, #32
 8007b24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	2204      	movs	r2, #4
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007b2e:	2327      	movs	r3, #39	@ 0x27
 8007b30:	18fb      	adds	r3, r7, r3
 8007b32:	2201      	movs	r2, #1
 8007b34:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007b3e:	69ba      	ldr	r2, [r7, #24]
 8007b40:	2380      	movs	r3, #128	@ 0x80
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	4013      	ands	r3, r2
 8007b46:	d00c      	beq.n	8007b62 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2280      	movs	r2, #128	@ 0x80
 8007b56:	0052      	lsls	r2, r2, #1
 8007b58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b5a:	2327      	movs	r3, #39	@ 0x27
 8007b5c:	18fb      	adds	r3, r7, r3
 8007b5e:	2201      	movs	r2, #1
 8007b60:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	2380      	movs	r3, #128	@ 0x80
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	4013      	ands	r3, r2
 8007b6a:	d00c      	beq.n	8007b86 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	2208      	movs	r2, #8
 8007b70:	4313      	orrs	r3, r2
 8007b72:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2280      	movs	r2, #128	@ 0x80
 8007b7a:	00d2      	lsls	r2, r2, #3
 8007b7c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007b7e:	2327      	movs	r3, #39	@ 0x27
 8007b80:	18fb      	adds	r3, r7, r3
 8007b82:	2201      	movs	r2, #1
 8007b84:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007b86:	69ba      	ldr	r2, [r7, #24]
 8007b88:	2380      	movs	r3, #128	@ 0x80
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	d00c      	beq.n	8007baa <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	2202      	movs	r2, #2
 8007b94:	4313      	orrs	r3, r2
 8007b96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2280      	movs	r2, #128	@ 0x80
 8007b9e:	0092      	lsls	r2, r2, #2
 8007ba0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ba2:	2327      	movs	r3, #39	@ 0x27
 8007ba4:	18fb      	adds	r3, r7, r3
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007baa:	2327      	movs	r3, #39	@ 0x27
 8007bac:	18fb      	adds	r3, r7, r3
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01d      	beq.n	8007bf0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	0018      	movs	r0, r3
 8007bb8:	f7ff fe28 	bl	800780c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	490e      	ldr	r1, [pc, #56]	@ (8007c00 <I2C_IsErrorOccurred+0x1ec>)
 8007bc8:	400a      	ands	r2, r1
 8007bca:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2241      	movs	r2, #65	@ 0x41
 8007bdc:	2120      	movs	r1, #32
 8007bde:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2242      	movs	r2, #66	@ 0x42
 8007be4:	2100      	movs	r1, #0
 8007be6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2240      	movs	r2, #64	@ 0x40
 8007bec:	2100      	movs	r1, #0
 8007bee:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007bf0:	2327      	movs	r3, #39	@ 0x27
 8007bf2:	18fb      	adds	r3, r7, r3
 8007bf4:	781b      	ldrb	r3, [r3, #0]
}
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	b00a      	add	sp, #40	@ 0x28
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	46c0      	nop			@ (mov r8, r8)
 8007c00:	fe00e800 	.word	0xfe00e800

08007c04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c04:	b590      	push	{r4, r7, lr}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	0008      	movs	r0, r1
 8007c0e:	0011      	movs	r1, r2
 8007c10:	607b      	str	r3, [r7, #4]
 8007c12:	240a      	movs	r4, #10
 8007c14:	193b      	adds	r3, r7, r4
 8007c16:	1c02      	adds	r2, r0, #0
 8007c18:	801a      	strh	r2, [r3, #0]
 8007c1a:	2009      	movs	r0, #9
 8007c1c:	183b      	adds	r3, r7, r0
 8007c1e:	1c0a      	adds	r2, r1, #0
 8007c20:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c22:	193b      	adds	r3, r7, r4
 8007c24:	881b      	ldrh	r3, [r3, #0]
 8007c26:	059b      	lsls	r3, r3, #22
 8007c28:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c2a:	183b      	adds	r3, r7, r0
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	0419      	lsls	r1, r3, #16
 8007c30:	23ff      	movs	r3, #255	@ 0xff
 8007c32:	041b      	lsls	r3, r3, #16
 8007c34:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c36:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c4e:	0d51      	lsrs	r1, r2, #21
 8007c50:	2280      	movs	r2, #128	@ 0x80
 8007c52:	00d2      	lsls	r2, r2, #3
 8007c54:	400a      	ands	r2, r1
 8007c56:	4907      	ldr	r1, [pc, #28]	@ (8007c74 <I2C_TransferConfig+0x70>)
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	43d2      	mvns	r2, r2
 8007c5c:	401a      	ands	r2, r3
 8007c5e:	0011      	movs	r1, r2
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007c6a:	46c0      	nop			@ (mov r8, r8)
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	b007      	add	sp, #28
 8007c70:	bd90      	pop	{r4, r7, pc}
 8007c72:	46c0      	nop			@ (mov r8, r8)
 8007c74:	03ff63ff 	.word	0x03ff63ff

08007c78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2241      	movs	r2, #65	@ 0x41
 8007c86:	5c9b      	ldrb	r3, [r3, r2]
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	d138      	bne.n	8007d00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2240      	movs	r2, #64	@ 0x40
 8007c92:	5c9b      	ldrb	r3, [r3, r2]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d101      	bne.n	8007c9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	e032      	b.n	8007d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2240      	movs	r2, #64	@ 0x40
 8007ca0:	2101      	movs	r1, #1
 8007ca2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2241      	movs	r2, #65	@ 0x41
 8007ca8:	2124      	movs	r1, #36	@ 0x24
 8007caa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	438a      	bics	r2, r1
 8007cba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4911      	ldr	r1, [pc, #68]	@ (8007d0c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8007cc8:	400a      	ands	r2, r1
 8007cca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6819      	ldr	r1, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2241      	movs	r2, #65	@ 0x41
 8007cf0:	2120      	movs	r1, #32
 8007cf2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2240      	movs	r2, #64	@ 0x40
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e000      	b.n	8007d02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d00:	2302      	movs	r3, #2
  }
}
 8007d02:	0018      	movs	r0, r3
 8007d04:	46bd      	mov	sp, r7
 8007d06:	b002      	add	sp, #8
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	46c0      	nop			@ (mov r8, r8)
 8007d0c:	ffffefff 	.word	0xffffefff

08007d10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2241      	movs	r2, #65	@ 0x41
 8007d1e:	5c9b      	ldrb	r3, [r3, r2]
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d139      	bne.n	8007d9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2240      	movs	r2, #64	@ 0x40
 8007d2a:	5c9b      	ldrb	r3, [r3, r2]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d101      	bne.n	8007d34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d30:	2302      	movs	r3, #2
 8007d32:	e033      	b.n	8007d9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2240      	movs	r2, #64	@ 0x40
 8007d38:	2101      	movs	r1, #1
 8007d3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2241      	movs	r2, #65	@ 0x41
 8007d40:	2124      	movs	r1, #36	@ 0x24
 8007d42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2101      	movs	r1, #1
 8007d50:	438a      	bics	r2, r1
 8007d52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4a11      	ldr	r2, [pc, #68]	@ (8007da4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8007d60:	4013      	ands	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	021b      	lsls	r3, r3, #8
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2101      	movs	r1, #1
 8007d82:	430a      	orrs	r2, r1
 8007d84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2241      	movs	r2, #65	@ 0x41
 8007d8a:	2120      	movs	r1, #32
 8007d8c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2240      	movs	r2, #64	@ 0x40
 8007d92:	2100      	movs	r1, #0
 8007d94:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	e000      	b.n	8007d9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d9a:	2302      	movs	r3, #2
  }
}
 8007d9c:	0018      	movs	r0, r3
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	b004      	add	sp, #16
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	fffff0ff 	.word	0xfffff0ff

08007da8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8007db0:	4b19      	ldr	r3, [pc, #100]	@ (8007e18 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a19      	ldr	r2, [pc, #100]	@ (8007e1c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8007db6:	4013      	ands	r3, r2
 8007db8:	0019      	movs	r1, r3
 8007dba:	4b17      	ldr	r3, [pc, #92]	@ (8007e18 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	2380      	movs	r3, #128	@ 0x80
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d11f      	bne.n	8007e0c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8007dcc:	4b14      	ldr	r3, [pc, #80]	@ (8007e20 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	0013      	movs	r3, r2
 8007dd2:	005b      	lsls	r3, r3, #1
 8007dd4:	189b      	adds	r3, r3, r2
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	4912      	ldr	r1, [pc, #72]	@ (8007e24 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8007dda:	0018      	movs	r0, r3
 8007ddc:	f7f8 f9ae 	bl	800013c <__udivsi3>
 8007de0:	0003      	movs	r3, r0
 8007de2:	3301      	adds	r3, #1
 8007de4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007de6:	e008      	b.n	8007dfa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d003      	beq.n	8007df6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	60fb      	str	r3, [r7, #12]
 8007df4:	e001      	b.n	8007dfa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e009      	b.n	8007e0e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007dfa:	4b07      	ldr	r3, [pc, #28]	@ (8007e18 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8007dfc:	695a      	ldr	r2, [r3, #20]
 8007dfe:	2380      	movs	r3, #128	@ 0x80
 8007e00:	00db      	lsls	r3, r3, #3
 8007e02:	401a      	ands	r2, r3
 8007e04:	2380      	movs	r3, #128	@ 0x80
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d0ed      	beq.n	8007de8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	0018      	movs	r0, r3
 8007e10:	46bd      	mov	sp, r7
 8007e12:	b004      	add	sp, #16
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	46c0      	nop			@ (mov r8, r8)
 8007e18:	40007000 	.word	0x40007000
 8007e1c:	fffff9ff 	.word	0xfffff9ff
 8007e20:	20000000 	.word	0x20000000
 8007e24:	000f4240 	.word	0x000f4240

08007e28 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8007e2c:	4b03      	ldr	r3, [pc, #12]	@ (8007e3c <LL_RCC_GetAPB1Prescaler+0x14>)
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	23e0      	movs	r3, #224	@ 0xe0
 8007e32:	01db      	lsls	r3, r3, #7
 8007e34:	4013      	ands	r3, r2
}
 8007e36:	0018      	movs	r0, r3
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	40021000 	.word	0x40021000

08007e40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e2fe      	b.n	8008450 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2201      	movs	r2, #1
 8007e58:	4013      	ands	r3, r2
 8007e5a:	d100      	bne.n	8007e5e <HAL_RCC_OscConfig+0x1e>
 8007e5c:	e07c      	b.n	8007f58 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e5e:	4bc3      	ldr	r3, [pc, #780]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	2238      	movs	r2, #56	@ 0x38
 8007e64:	4013      	ands	r3, r2
 8007e66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e68:	4bc0      	ldr	r3, [pc, #768]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	2203      	movs	r2, #3
 8007e6e:	4013      	ands	r3, r2
 8007e70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	2b10      	cmp	r3, #16
 8007e76:	d102      	bne.n	8007e7e <HAL_RCC_OscConfig+0x3e>
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d002      	beq.n	8007e84 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d10b      	bne.n	8007e9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e84:	4bb9      	ldr	r3, [pc, #740]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	2380      	movs	r3, #128	@ 0x80
 8007e8a:	029b      	lsls	r3, r3, #10
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	d062      	beq.n	8007f56 <HAL_RCC_OscConfig+0x116>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d15e      	bne.n	8007f56 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e2d9      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	2380      	movs	r3, #128	@ 0x80
 8007ea2:	025b      	lsls	r3, r3, #9
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d107      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x78>
 8007ea8:	4bb0      	ldr	r3, [pc, #704]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	4baf      	ldr	r3, [pc, #700]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007eae:	2180      	movs	r1, #128	@ 0x80
 8007eb0:	0249      	lsls	r1, r1, #9
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	e020      	b.n	8007efa <HAL_RCC_OscConfig+0xba>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	23a0      	movs	r3, #160	@ 0xa0
 8007ebe:	02db      	lsls	r3, r3, #11
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d10e      	bne.n	8007ee2 <HAL_RCC_OscConfig+0xa2>
 8007ec4:	4ba9      	ldr	r3, [pc, #676]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	4ba8      	ldr	r3, [pc, #672]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007eca:	2180      	movs	r1, #128	@ 0x80
 8007ecc:	02c9      	lsls	r1, r1, #11
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	4ba6      	ldr	r3, [pc, #664]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	4ba5      	ldr	r3, [pc, #660]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007ed8:	2180      	movs	r1, #128	@ 0x80
 8007eda:	0249      	lsls	r1, r1, #9
 8007edc:	430a      	orrs	r2, r1
 8007ede:	601a      	str	r2, [r3, #0]
 8007ee0:	e00b      	b.n	8007efa <HAL_RCC_OscConfig+0xba>
 8007ee2:	4ba2      	ldr	r3, [pc, #648]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	4ba1      	ldr	r3, [pc, #644]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007ee8:	49a1      	ldr	r1, [pc, #644]	@ (8008170 <HAL_RCC_OscConfig+0x330>)
 8007eea:	400a      	ands	r2, r1
 8007eec:	601a      	str	r2, [r3, #0]
 8007eee:	4b9f      	ldr	r3, [pc, #636]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	4b9e      	ldr	r3, [pc, #632]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007ef4:	499f      	ldr	r1, [pc, #636]	@ (8008174 <HAL_RCC_OscConfig+0x334>)
 8007ef6:	400a      	ands	r2, r1
 8007ef8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d014      	beq.n	8007f2c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f02:	f7fe fd73 	bl	80069ec <HAL_GetTick>
 8007f06:	0003      	movs	r3, r0
 8007f08:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f0c:	f7fe fd6e 	bl	80069ec <HAL_GetTick>
 8007f10:	0002      	movs	r2, r0
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b64      	cmp	r3, #100	@ 0x64
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e298      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f1e:	4b93      	ldr	r3, [pc, #588]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	2380      	movs	r3, #128	@ 0x80
 8007f24:	029b      	lsls	r3, r3, #10
 8007f26:	4013      	ands	r3, r2
 8007f28:	d0f0      	beq.n	8007f0c <HAL_RCC_OscConfig+0xcc>
 8007f2a:	e015      	b.n	8007f58 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2c:	f7fe fd5e 	bl	80069ec <HAL_GetTick>
 8007f30:	0003      	movs	r3, r0
 8007f32:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f34:	e008      	b.n	8007f48 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f36:	f7fe fd59 	bl	80069ec <HAL_GetTick>
 8007f3a:	0002      	movs	r2, r0
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	2b64      	cmp	r3, #100	@ 0x64
 8007f42:	d901      	bls.n	8007f48 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e283      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f48:	4b88      	ldr	r3, [pc, #544]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	2380      	movs	r3, #128	@ 0x80
 8007f4e:	029b      	lsls	r3, r3, #10
 8007f50:	4013      	ands	r3, r2
 8007f52:	d1f0      	bne.n	8007f36 <HAL_RCC_OscConfig+0xf6>
 8007f54:	e000      	b.n	8007f58 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f56:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	4013      	ands	r3, r2
 8007f60:	d100      	bne.n	8007f64 <HAL_RCC_OscConfig+0x124>
 8007f62:	e099      	b.n	8008098 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f64:	4b81      	ldr	r3, [pc, #516]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	2238      	movs	r2, #56	@ 0x38
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	2203      	movs	r2, #3
 8007f74:	4013      	ands	r3, r2
 8007f76:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	2b10      	cmp	r3, #16
 8007f7c:	d102      	bne.n	8007f84 <HAL_RCC_OscConfig+0x144>
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d002      	beq.n	8007f8a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d135      	bne.n	8007ff6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f8a:	4b78      	ldr	r3, [pc, #480]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	2380      	movs	r3, #128	@ 0x80
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	4013      	ands	r3, r2
 8007f94:	d005      	beq.n	8007fa2 <HAL_RCC_OscConfig+0x162>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e256      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fa2:	4b72      	ldr	r3, [pc, #456]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	4a74      	ldr	r2, [pc, #464]	@ (8008178 <HAL_RCC_OscConfig+0x338>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	0019      	movs	r1, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	021a      	lsls	r2, r3, #8
 8007fb2:	4b6e      	ldr	r3, [pc, #440]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d112      	bne.n	8007fe4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007fbe:	4b6b      	ldr	r3, [pc, #428]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a6e      	ldr	r2, [pc, #440]	@ (800817c <HAL_RCC_OscConfig+0x33c>)
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	0019      	movs	r1, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	691a      	ldr	r2, [r3, #16]
 8007fcc:	4b67      	ldr	r3, [pc, #412]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8007fd2:	4b66      	ldr	r3, [pc, #408]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	0adb      	lsrs	r3, r3, #11
 8007fd8:	2207      	movs	r2, #7
 8007fda:	4013      	ands	r3, r2
 8007fdc:	4a68      	ldr	r2, [pc, #416]	@ (8008180 <HAL_RCC_OscConfig+0x340>)
 8007fde:	40da      	lsrs	r2, r3
 8007fe0:	4b68      	ldr	r3, [pc, #416]	@ (8008184 <HAL_RCC_OscConfig+0x344>)
 8007fe2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007fe4:	4b68      	ldr	r3, [pc, #416]	@ (8008188 <HAL_RCC_OscConfig+0x348>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	0018      	movs	r0, r3
 8007fea:	f7fe fca3 	bl	8006934 <HAL_InitTick>
 8007fee:	1e03      	subs	r3, r0, #0
 8007ff0:	d051      	beq.n	8008096 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e22c      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d030      	beq.n	8008060 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8007ffe:	4b5b      	ldr	r3, [pc, #364]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a5e      	ldr	r2, [pc, #376]	@ (800817c <HAL_RCC_OscConfig+0x33c>)
 8008004:	4013      	ands	r3, r2
 8008006:	0019      	movs	r1, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	4b57      	ldr	r3, [pc, #348]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 800800e:	430a      	orrs	r2, r1
 8008010:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008012:	4b56      	ldr	r3, [pc, #344]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	4b55      	ldr	r3, [pc, #340]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8008018:	2180      	movs	r1, #128	@ 0x80
 800801a:	0049      	lsls	r1, r1, #1
 800801c:	430a      	orrs	r2, r1
 800801e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008020:	f7fe fce4 	bl	80069ec <HAL_GetTick>
 8008024:	0003      	movs	r3, r0
 8008026:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008028:	e008      	b.n	800803c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800802a:	f7fe fcdf 	bl	80069ec <HAL_GetTick>
 800802e:	0002      	movs	r2, r0
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	2b02      	cmp	r3, #2
 8008036:	d901      	bls.n	800803c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	e209      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800803c:	4b4b      	ldr	r3, [pc, #300]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	2380      	movs	r3, #128	@ 0x80
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	4013      	ands	r3, r2
 8008046:	d0f0      	beq.n	800802a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008048:	4b48      	ldr	r3, [pc, #288]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	4a4a      	ldr	r2, [pc, #296]	@ (8008178 <HAL_RCC_OscConfig+0x338>)
 800804e:	4013      	ands	r3, r2
 8008050:	0019      	movs	r1, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	021a      	lsls	r2, r3, #8
 8008058:	4b44      	ldr	r3, [pc, #272]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 800805a:	430a      	orrs	r2, r1
 800805c:	605a      	str	r2, [r3, #4]
 800805e:	e01b      	b.n	8008098 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008060:	4b42      	ldr	r3, [pc, #264]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	4b41      	ldr	r3, [pc, #260]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8008066:	4949      	ldr	r1, [pc, #292]	@ (800818c <HAL_RCC_OscConfig+0x34c>)
 8008068:	400a      	ands	r2, r1
 800806a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806c:	f7fe fcbe 	bl	80069ec <HAL_GetTick>
 8008070:	0003      	movs	r3, r0
 8008072:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008074:	e008      	b.n	8008088 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008076:	f7fe fcb9 	bl	80069ec <HAL_GetTick>
 800807a:	0002      	movs	r2, r0
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d901      	bls.n	8008088 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e1e3      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008088:	4b38      	ldr	r3, [pc, #224]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	2380      	movs	r3, #128	@ 0x80
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	4013      	ands	r3, r2
 8008092:	d1f0      	bne.n	8008076 <HAL_RCC_OscConfig+0x236>
 8008094:	e000      	b.n	8008098 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008096:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2208      	movs	r2, #8
 800809e:	4013      	ands	r3, r2
 80080a0:	d047      	beq.n	8008132 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80080a2:	4b32      	ldr	r3, [pc, #200]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	2238      	movs	r2, #56	@ 0x38
 80080a8:	4013      	ands	r3, r2
 80080aa:	2b18      	cmp	r3, #24
 80080ac:	d10a      	bne.n	80080c4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80080ae:	4b2f      	ldr	r3, [pc, #188]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 80080b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080b2:	2202      	movs	r2, #2
 80080b4:	4013      	ands	r3, r2
 80080b6:	d03c      	beq.n	8008132 <HAL_RCC_OscConfig+0x2f2>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d138      	bne.n	8008132 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e1c5      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	699b      	ldr	r3, [r3, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d019      	beq.n	8008100 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80080cc:	4b27      	ldr	r3, [pc, #156]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 80080ce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80080d0:	4b26      	ldr	r3, [pc, #152]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 80080d2:	2101      	movs	r1, #1
 80080d4:	430a      	orrs	r2, r1
 80080d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d8:	f7fe fc88 	bl	80069ec <HAL_GetTick>
 80080dc:	0003      	movs	r3, r0
 80080de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080e0:	e008      	b.n	80080f4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080e2:	f7fe fc83 	bl	80069ec <HAL_GetTick>
 80080e6:	0002      	movs	r2, r0
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d901      	bls.n	80080f4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e1ad      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080f4:	4b1d      	ldr	r3, [pc, #116]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 80080f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080f8:	2202      	movs	r2, #2
 80080fa:	4013      	ands	r3, r2
 80080fc:	d0f1      	beq.n	80080e2 <HAL_RCC_OscConfig+0x2a2>
 80080fe:	e018      	b.n	8008132 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008100:	4b1a      	ldr	r3, [pc, #104]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8008102:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008104:	4b19      	ldr	r3, [pc, #100]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8008106:	2101      	movs	r1, #1
 8008108:	438a      	bics	r2, r1
 800810a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810c:	f7fe fc6e 	bl	80069ec <HAL_GetTick>
 8008110:	0003      	movs	r3, r0
 8008112:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008116:	f7fe fc69 	bl	80069ec <HAL_GetTick>
 800811a:	0002      	movs	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e193      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008128:	4b10      	ldr	r3, [pc, #64]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 800812a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800812c:	2202      	movs	r2, #2
 800812e:	4013      	ands	r3, r2
 8008130:	d1f1      	bne.n	8008116 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2204      	movs	r2, #4
 8008138:	4013      	ands	r3, r2
 800813a:	d100      	bne.n	800813e <HAL_RCC_OscConfig+0x2fe>
 800813c:	e0c6      	b.n	80082cc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800813e:	231f      	movs	r3, #31
 8008140:	18fb      	adds	r3, r7, r3
 8008142:	2200      	movs	r2, #0
 8008144:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008146:	4b09      	ldr	r3, [pc, #36]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	2238      	movs	r2, #56	@ 0x38
 800814c:	4013      	ands	r3, r2
 800814e:	2b20      	cmp	r3, #32
 8008150:	d11e      	bne.n	8008190 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008152:	4b06      	ldr	r3, [pc, #24]	@ (800816c <HAL_RCC_OscConfig+0x32c>)
 8008154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008156:	2202      	movs	r2, #2
 8008158:	4013      	ands	r3, r2
 800815a:	d100      	bne.n	800815e <HAL_RCC_OscConfig+0x31e>
 800815c:	e0b6      	b.n	80082cc <HAL_RCC_OscConfig+0x48c>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d000      	beq.n	8008168 <HAL_RCC_OscConfig+0x328>
 8008166:	e0b1      	b.n	80082cc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e171      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
 800816c:	40021000 	.word	0x40021000
 8008170:	fffeffff 	.word	0xfffeffff
 8008174:	fffbffff 	.word	0xfffbffff
 8008178:	ffff80ff 	.word	0xffff80ff
 800817c:	ffffc7ff 	.word	0xffffc7ff
 8008180:	00f42400 	.word	0x00f42400
 8008184:	20000000 	.word	0x20000000
 8008188:	20000004 	.word	0x20000004
 800818c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008190:	4bb1      	ldr	r3, [pc, #708]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008192:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008194:	2380      	movs	r3, #128	@ 0x80
 8008196:	055b      	lsls	r3, r3, #21
 8008198:	4013      	ands	r3, r2
 800819a:	d101      	bne.n	80081a0 <HAL_RCC_OscConfig+0x360>
 800819c:	2301      	movs	r3, #1
 800819e:	e000      	b.n	80081a2 <HAL_RCC_OscConfig+0x362>
 80081a0:	2300      	movs	r3, #0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d011      	beq.n	80081ca <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80081a6:	4bac      	ldr	r3, [pc, #688]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80081a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081aa:	4bab      	ldr	r3, [pc, #684]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80081ac:	2180      	movs	r1, #128	@ 0x80
 80081ae:	0549      	lsls	r1, r1, #21
 80081b0:	430a      	orrs	r2, r1
 80081b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80081b4:	4ba8      	ldr	r3, [pc, #672]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80081b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081b8:	2380      	movs	r3, #128	@ 0x80
 80081ba:	055b      	lsls	r3, r3, #21
 80081bc:	4013      	ands	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80081c2:	231f      	movs	r3, #31
 80081c4:	18fb      	adds	r3, r7, r3
 80081c6:	2201      	movs	r2, #1
 80081c8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081ca:	4ba4      	ldr	r3, [pc, #656]	@ (800845c <HAL_RCC_OscConfig+0x61c>)
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	2380      	movs	r3, #128	@ 0x80
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	4013      	ands	r3, r2
 80081d4:	d11a      	bne.n	800820c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081d6:	4ba1      	ldr	r3, [pc, #644]	@ (800845c <HAL_RCC_OscConfig+0x61c>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4ba0      	ldr	r3, [pc, #640]	@ (800845c <HAL_RCC_OscConfig+0x61c>)
 80081dc:	2180      	movs	r1, #128	@ 0x80
 80081de:	0049      	lsls	r1, r1, #1
 80081e0:	430a      	orrs	r2, r1
 80081e2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80081e4:	f7fe fc02 	bl	80069ec <HAL_GetTick>
 80081e8:	0003      	movs	r3, r0
 80081ea:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081ec:	e008      	b.n	8008200 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ee:	f7fe fbfd 	bl	80069ec <HAL_GetTick>
 80081f2:	0002      	movs	r2, r0
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d901      	bls.n	8008200 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e127      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008200:	4b96      	ldr	r3, [pc, #600]	@ (800845c <HAL_RCC_OscConfig+0x61c>)
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	2380      	movs	r3, #128	@ 0x80
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	4013      	ands	r3, r2
 800820a:	d0f0      	beq.n	80081ee <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d106      	bne.n	8008222 <HAL_RCC_OscConfig+0x3e2>
 8008214:	4b90      	ldr	r3, [pc, #576]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008216:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008218:	4b8f      	ldr	r3, [pc, #572]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 800821a:	2101      	movs	r1, #1
 800821c:	430a      	orrs	r2, r1
 800821e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008220:	e01c      	b.n	800825c <HAL_RCC_OscConfig+0x41c>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2b05      	cmp	r3, #5
 8008228:	d10c      	bne.n	8008244 <HAL_RCC_OscConfig+0x404>
 800822a:	4b8b      	ldr	r3, [pc, #556]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 800822c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800822e:	4b8a      	ldr	r3, [pc, #552]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008230:	2104      	movs	r1, #4
 8008232:	430a      	orrs	r2, r1
 8008234:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008236:	4b88      	ldr	r3, [pc, #544]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008238:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800823a:	4b87      	ldr	r3, [pc, #540]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 800823c:	2101      	movs	r1, #1
 800823e:	430a      	orrs	r2, r1
 8008240:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008242:	e00b      	b.n	800825c <HAL_RCC_OscConfig+0x41c>
 8008244:	4b84      	ldr	r3, [pc, #528]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008246:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008248:	4b83      	ldr	r3, [pc, #524]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 800824a:	2101      	movs	r1, #1
 800824c:	438a      	bics	r2, r1
 800824e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008250:	4b81      	ldr	r3, [pc, #516]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008252:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008254:	4b80      	ldr	r3, [pc, #512]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008256:	2104      	movs	r1, #4
 8008258:	438a      	bics	r2, r1
 800825a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d014      	beq.n	800828e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008264:	f7fe fbc2 	bl	80069ec <HAL_GetTick>
 8008268:	0003      	movs	r3, r0
 800826a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800826c:	e009      	b.n	8008282 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800826e:	f7fe fbbd 	bl	80069ec <HAL_GetTick>
 8008272:	0002      	movs	r2, r0
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	4a79      	ldr	r2, [pc, #484]	@ (8008460 <HAL_RCC_OscConfig+0x620>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d901      	bls.n	8008282 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800827e:	2303      	movs	r3, #3
 8008280:	e0e6      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008282:	4b75      	ldr	r3, [pc, #468]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008286:	2202      	movs	r2, #2
 8008288:	4013      	ands	r3, r2
 800828a:	d0f0      	beq.n	800826e <HAL_RCC_OscConfig+0x42e>
 800828c:	e013      	b.n	80082b6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800828e:	f7fe fbad 	bl	80069ec <HAL_GetTick>
 8008292:	0003      	movs	r3, r0
 8008294:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008296:	e009      	b.n	80082ac <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008298:	f7fe fba8 	bl	80069ec <HAL_GetTick>
 800829c:	0002      	movs	r2, r0
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	4a6f      	ldr	r2, [pc, #444]	@ (8008460 <HAL_RCC_OscConfig+0x620>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d901      	bls.n	80082ac <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80082a8:	2303      	movs	r3, #3
 80082aa:	e0d1      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082ac:	4b6a      	ldr	r3, [pc, #424]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80082ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082b0:	2202      	movs	r2, #2
 80082b2:	4013      	ands	r3, r2
 80082b4:	d1f0      	bne.n	8008298 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80082b6:	231f      	movs	r3, #31
 80082b8:	18fb      	adds	r3, r7, r3
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d105      	bne.n	80082cc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80082c0:	4b65      	ldr	r3, [pc, #404]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80082c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082c4:	4b64      	ldr	r3, [pc, #400]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80082c6:	4967      	ldr	r1, [pc, #412]	@ (8008464 <HAL_RCC_OscConfig+0x624>)
 80082c8:	400a      	ands	r2, r1
 80082ca:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d100      	bne.n	80082d6 <HAL_RCC_OscConfig+0x496>
 80082d4:	e0bb      	b.n	800844e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082d6:	4b60      	ldr	r3, [pc, #384]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	2238      	movs	r2, #56	@ 0x38
 80082dc:	4013      	ands	r3, r2
 80082de:	2b10      	cmp	r3, #16
 80082e0:	d100      	bne.n	80082e4 <HAL_RCC_OscConfig+0x4a4>
 80082e2:	e07b      	b.n	80083dc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d156      	bne.n	800839a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ec:	4b5a      	ldr	r3, [pc, #360]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	4b59      	ldr	r3, [pc, #356]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80082f2:	495d      	ldr	r1, [pc, #372]	@ (8008468 <HAL_RCC_OscConfig+0x628>)
 80082f4:	400a      	ands	r2, r1
 80082f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f8:	f7fe fb78 	bl	80069ec <HAL_GetTick>
 80082fc:	0003      	movs	r3, r0
 80082fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008300:	e008      	b.n	8008314 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008302:	f7fe fb73 	bl	80069ec <HAL_GetTick>
 8008306:	0002      	movs	r2, r0
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	2b02      	cmp	r3, #2
 800830e:	d901      	bls.n	8008314 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e09d      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008314:	4b50      	ldr	r3, [pc, #320]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	2380      	movs	r3, #128	@ 0x80
 800831a:	049b      	lsls	r3, r3, #18
 800831c:	4013      	ands	r3, r2
 800831e:	d1f0      	bne.n	8008302 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008320:	4b4d      	ldr	r3, [pc, #308]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	4a51      	ldr	r2, [pc, #324]	@ (800846c <HAL_RCC_OscConfig+0x62c>)
 8008326:	4013      	ands	r3, r2
 8008328:	0019      	movs	r1, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1a      	ldr	r2, [r3, #32]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008340:	431a      	orrs	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800834c:	431a      	orrs	r2, r3
 800834e:	4b42      	ldr	r3, [pc, #264]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008350:	430a      	orrs	r2, r1
 8008352:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008354:	4b40      	ldr	r3, [pc, #256]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	4b3f      	ldr	r3, [pc, #252]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 800835a:	2180      	movs	r1, #128	@ 0x80
 800835c:	0449      	lsls	r1, r1, #17
 800835e:	430a      	orrs	r2, r1
 8008360:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008362:	4b3d      	ldr	r3, [pc, #244]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	4b3c      	ldr	r3, [pc, #240]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 8008368:	2180      	movs	r1, #128	@ 0x80
 800836a:	0549      	lsls	r1, r1, #21
 800836c:	430a      	orrs	r2, r1
 800836e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008370:	f7fe fb3c 	bl	80069ec <HAL_GetTick>
 8008374:	0003      	movs	r3, r0
 8008376:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008378:	e008      	b.n	800838c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800837a:	f7fe fb37 	bl	80069ec <HAL_GetTick>
 800837e:	0002      	movs	r2, r0
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	2b02      	cmp	r3, #2
 8008386:	d901      	bls.n	800838c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e061      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800838c:	4b32      	ldr	r3, [pc, #200]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	2380      	movs	r3, #128	@ 0x80
 8008392:	049b      	lsls	r3, r3, #18
 8008394:	4013      	ands	r3, r2
 8008396:	d0f0      	beq.n	800837a <HAL_RCC_OscConfig+0x53a>
 8008398:	e059      	b.n	800844e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800839a:	4b2f      	ldr	r3, [pc, #188]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	4b2e      	ldr	r3, [pc, #184]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80083a0:	4931      	ldr	r1, [pc, #196]	@ (8008468 <HAL_RCC_OscConfig+0x628>)
 80083a2:	400a      	ands	r2, r1
 80083a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a6:	f7fe fb21 	bl	80069ec <HAL_GetTick>
 80083aa:	0003      	movs	r3, r0
 80083ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083ae:	e008      	b.n	80083c2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083b0:	f7fe fb1c 	bl	80069ec <HAL_GetTick>
 80083b4:	0002      	movs	r2, r0
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d901      	bls.n	80083c2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e046      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083c2:	4b25      	ldr	r3, [pc, #148]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	2380      	movs	r3, #128	@ 0x80
 80083c8:	049b      	lsls	r3, r3, #18
 80083ca:	4013      	ands	r3, r2
 80083cc:	d1f0      	bne.n	80083b0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80083ce:	4b22      	ldr	r3, [pc, #136]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	4b21      	ldr	r3, [pc, #132]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80083d4:	4926      	ldr	r1, [pc, #152]	@ (8008470 <HAL_RCC_OscConfig+0x630>)
 80083d6:	400a      	ands	r2, r1
 80083d8:	60da      	str	r2, [r3, #12]
 80083da:	e038      	b.n	800844e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	69db      	ldr	r3, [r3, #28]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d101      	bne.n	80083e8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e033      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80083e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008458 <HAL_RCC_OscConfig+0x618>)
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2203      	movs	r2, #3
 80083f2:	401a      	ands	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d126      	bne.n	800844a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2270      	movs	r2, #112	@ 0x70
 8008400:	401a      	ands	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008406:	429a      	cmp	r2, r3
 8008408:	d11f      	bne.n	800844a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	23fe      	movs	r3, #254	@ 0xfe
 800840e:	01db      	lsls	r3, r3, #7
 8008410:	401a      	ands	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008416:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008418:	429a      	cmp	r2, r3
 800841a:	d116      	bne.n	800844a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	23f8      	movs	r3, #248	@ 0xf8
 8008420:	039b      	lsls	r3, r3, #14
 8008422:	401a      	ands	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008428:	429a      	cmp	r2, r3
 800842a:	d10e      	bne.n	800844a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	23e0      	movs	r3, #224	@ 0xe0
 8008430:	051b      	lsls	r3, r3, #20
 8008432:	401a      	ands	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008438:	429a      	cmp	r2, r3
 800843a:	d106      	bne.n	800844a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	0f5b      	lsrs	r3, r3, #29
 8008440:	075a      	lsls	r2, r3, #29
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008446:	429a      	cmp	r2, r3
 8008448:	d001      	beq.n	800844e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e000      	b.n	8008450 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	0018      	movs	r0, r3
 8008452:	46bd      	mov	sp, r7
 8008454:	b008      	add	sp, #32
 8008456:	bd80      	pop	{r7, pc}
 8008458:	40021000 	.word	0x40021000
 800845c:	40007000 	.word	0x40007000
 8008460:	00001388 	.word	0x00001388
 8008464:	efffffff 	.word	0xefffffff
 8008468:	feffffff 	.word	0xfeffffff
 800846c:	11c1808c 	.word	0x11c1808c
 8008470:	eefefffc 	.word	0xeefefffc

08008474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008484:	2301      	movs	r3, #1
 8008486:	e0e9      	b.n	800865c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008488:	4b76      	ldr	r3, [pc, #472]	@ (8008664 <HAL_RCC_ClockConfig+0x1f0>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2207      	movs	r2, #7
 800848e:	4013      	ands	r3, r2
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	429a      	cmp	r2, r3
 8008494:	d91e      	bls.n	80084d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008496:	4b73      	ldr	r3, [pc, #460]	@ (8008664 <HAL_RCC_ClockConfig+0x1f0>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2207      	movs	r2, #7
 800849c:	4393      	bics	r3, r2
 800849e:	0019      	movs	r1, r3
 80084a0:	4b70      	ldr	r3, [pc, #448]	@ (8008664 <HAL_RCC_ClockConfig+0x1f0>)
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80084a8:	f7fe faa0 	bl	80069ec <HAL_GetTick>
 80084ac:	0003      	movs	r3, r0
 80084ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084b0:	e009      	b.n	80084c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084b2:	f7fe fa9b 	bl	80069ec <HAL_GetTick>
 80084b6:	0002      	movs	r2, r0
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	4a6a      	ldr	r2, [pc, #424]	@ (8008668 <HAL_RCC_ClockConfig+0x1f4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d901      	bls.n	80084c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e0ca      	b.n	800865c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80084c6:	4b67      	ldr	r3, [pc, #412]	@ (8008664 <HAL_RCC_ClockConfig+0x1f0>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2207      	movs	r2, #7
 80084cc:	4013      	ands	r3, r2
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d1ee      	bne.n	80084b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2202      	movs	r2, #2
 80084da:	4013      	ands	r3, r2
 80084dc:	d015      	beq.n	800850a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2204      	movs	r2, #4
 80084e4:	4013      	ands	r3, r2
 80084e6:	d006      	beq.n	80084f6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80084e8:	4b60      	ldr	r3, [pc, #384]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 80084ea:	689a      	ldr	r2, [r3, #8]
 80084ec:	4b5f      	ldr	r3, [pc, #380]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 80084ee:	21e0      	movs	r1, #224	@ 0xe0
 80084f0:	01c9      	lsls	r1, r1, #7
 80084f2:	430a      	orrs	r2, r1
 80084f4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084f6:	4b5d      	ldr	r3, [pc, #372]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	4a5d      	ldr	r2, [pc, #372]	@ (8008670 <HAL_RCC_ClockConfig+0x1fc>)
 80084fc:	4013      	ands	r3, r2
 80084fe:	0019      	movs	r1, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	4b59      	ldr	r3, [pc, #356]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 8008506:	430a      	orrs	r2, r1
 8008508:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2201      	movs	r2, #1
 8008510:	4013      	ands	r3, r2
 8008512:	d057      	beq.n	80085c4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d107      	bne.n	800852c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800851c:	4b53      	ldr	r3, [pc, #332]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	2380      	movs	r3, #128	@ 0x80
 8008522:	029b      	lsls	r3, r3, #10
 8008524:	4013      	ands	r3, r2
 8008526:	d12b      	bne.n	8008580 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e097      	b.n	800865c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	2b02      	cmp	r3, #2
 8008532:	d107      	bne.n	8008544 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008534:	4b4d      	ldr	r3, [pc, #308]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	2380      	movs	r3, #128	@ 0x80
 800853a:	049b      	lsls	r3, r3, #18
 800853c:	4013      	ands	r3, r2
 800853e:	d11f      	bne.n	8008580 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e08b      	b.n	800865c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d107      	bne.n	800855c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800854c:	4b47      	ldr	r3, [pc, #284]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	2380      	movs	r3, #128	@ 0x80
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	4013      	ands	r3, r2
 8008556:	d113      	bne.n	8008580 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e07f      	b.n	800865c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	2b03      	cmp	r3, #3
 8008562:	d106      	bne.n	8008572 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008564:	4b41      	ldr	r3, [pc, #260]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 8008566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008568:	2202      	movs	r2, #2
 800856a:	4013      	ands	r3, r2
 800856c:	d108      	bne.n	8008580 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e074      	b.n	800865c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008572:	4b3e      	ldr	r3, [pc, #248]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 8008574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008576:	2202      	movs	r2, #2
 8008578:	4013      	ands	r3, r2
 800857a:	d101      	bne.n	8008580 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e06d      	b.n	800865c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008580:	4b3a      	ldr	r3, [pc, #232]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	2207      	movs	r2, #7
 8008586:	4393      	bics	r3, r2
 8008588:	0019      	movs	r1, r3
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	4b37      	ldr	r3, [pc, #220]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 8008590:	430a      	orrs	r2, r1
 8008592:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008594:	f7fe fa2a 	bl	80069ec <HAL_GetTick>
 8008598:	0003      	movs	r3, r0
 800859a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800859c:	e009      	b.n	80085b2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800859e:	f7fe fa25 	bl	80069ec <HAL_GetTick>
 80085a2:	0002      	movs	r2, r0
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	4a2f      	ldr	r2, [pc, #188]	@ (8008668 <HAL_RCC_ClockConfig+0x1f4>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d901      	bls.n	80085b2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e054      	b.n	800865c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085b2:	4b2e      	ldr	r3, [pc, #184]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	2238      	movs	r2, #56	@ 0x38
 80085b8:	401a      	ands	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	00db      	lsls	r3, r3, #3
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d1ec      	bne.n	800859e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085c4:	4b27      	ldr	r3, [pc, #156]	@ (8008664 <HAL_RCC_ClockConfig+0x1f0>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2207      	movs	r2, #7
 80085ca:	4013      	ands	r3, r2
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d21e      	bcs.n	8008610 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085d2:	4b24      	ldr	r3, [pc, #144]	@ (8008664 <HAL_RCC_ClockConfig+0x1f0>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2207      	movs	r2, #7
 80085d8:	4393      	bics	r3, r2
 80085da:	0019      	movs	r1, r3
 80085dc:	4b21      	ldr	r3, [pc, #132]	@ (8008664 <HAL_RCC_ClockConfig+0x1f0>)
 80085de:	683a      	ldr	r2, [r7, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80085e4:	f7fe fa02 	bl	80069ec <HAL_GetTick>
 80085e8:	0003      	movs	r3, r0
 80085ea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80085ec:	e009      	b.n	8008602 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085ee:	f7fe f9fd 	bl	80069ec <HAL_GetTick>
 80085f2:	0002      	movs	r2, r0
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008668 <HAL_RCC_ClockConfig+0x1f4>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d901      	bls.n	8008602 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e02c      	b.n	800865c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008602:	4b18      	ldr	r3, [pc, #96]	@ (8008664 <HAL_RCC_ClockConfig+0x1f0>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2207      	movs	r2, #7
 8008608:	4013      	ands	r3, r2
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d1ee      	bne.n	80085ee <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2204      	movs	r2, #4
 8008616:	4013      	ands	r3, r2
 8008618:	d009      	beq.n	800862e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800861a:	4b14      	ldr	r3, [pc, #80]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	4a15      	ldr	r2, [pc, #84]	@ (8008674 <HAL_RCC_ClockConfig+0x200>)
 8008620:	4013      	ands	r3, r2
 8008622:	0019      	movs	r1, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	4b10      	ldr	r3, [pc, #64]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 800862a:	430a      	orrs	r2, r1
 800862c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800862e:	f000 f829 	bl	8008684 <HAL_RCC_GetSysClockFreq>
 8008632:	0001      	movs	r1, r0
 8008634:	4b0d      	ldr	r3, [pc, #52]	@ (800866c <HAL_RCC_ClockConfig+0x1f8>)
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	0a1b      	lsrs	r3, r3, #8
 800863a:	220f      	movs	r2, #15
 800863c:	401a      	ands	r2, r3
 800863e:	4b0e      	ldr	r3, [pc, #56]	@ (8008678 <HAL_RCC_ClockConfig+0x204>)
 8008640:	0092      	lsls	r2, r2, #2
 8008642:	58d3      	ldr	r3, [r2, r3]
 8008644:	221f      	movs	r2, #31
 8008646:	4013      	ands	r3, r2
 8008648:	000a      	movs	r2, r1
 800864a:	40da      	lsrs	r2, r3
 800864c:	4b0b      	ldr	r3, [pc, #44]	@ (800867c <HAL_RCC_ClockConfig+0x208>)
 800864e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008650:	4b0b      	ldr	r3, [pc, #44]	@ (8008680 <HAL_RCC_ClockConfig+0x20c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	0018      	movs	r0, r3
 8008656:	f7fe f96d 	bl	8006934 <HAL_InitTick>
 800865a:	0003      	movs	r3, r0
}
 800865c:	0018      	movs	r0, r3
 800865e:	46bd      	mov	sp, r7
 8008660:	b004      	add	sp, #16
 8008662:	bd80      	pop	{r7, pc}
 8008664:	40022000 	.word	0x40022000
 8008668:	00001388 	.word	0x00001388
 800866c:	40021000 	.word	0x40021000
 8008670:	fffff0ff 	.word	0xfffff0ff
 8008674:	ffff8fff 	.word	0xffff8fff
 8008678:	0800ca6c 	.word	0x0800ca6c
 800867c:	20000000 	.word	0x20000000
 8008680:	20000004 	.word	0x20000004

08008684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800868a:	4b3c      	ldr	r3, [pc, #240]	@ (800877c <HAL_RCC_GetSysClockFreq+0xf8>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	2238      	movs	r2, #56	@ 0x38
 8008690:	4013      	ands	r3, r2
 8008692:	d10f      	bne.n	80086b4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008694:	4b39      	ldr	r3, [pc, #228]	@ (800877c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	0adb      	lsrs	r3, r3, #11
 800869a:	2207      	movs	r2, #7
 800869c:	4013      	ands	r3, r2
 800869e:	2201      	movs	r2, #1
 80086a0:	409a      	lsls	r2, r3
 80086a2:	0013      	movs	r3, r2
 80086a4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80086a6:	6839      	ldr	r1, [r7, #0]
 80086a8:	4835      	ldr	r0, [pc, #212]	@ (8008780 <HAL_RCC_GetSysClockFreq+0xfc>)
 80086aa:	f7f7 fd47 	bl	800013c <__udivsi3>
 80086ae:	0003      	movs	r3, r0
 80086b0:	613b      	str	r3, [r7, #16]
 80086b2:	e05d      	b.n	8008770 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80086b4:	4b31      	ldr	r3, [pc, #196]	@ (800877c <HAL_RCC_GetSysClockFreq+0xf8>)
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2238      	movs	r2, #56	@ 0x38
 80086ba:	4013      	ands	r3, r2
 80086bc:	2b08      	cmp	r3, #8
 80086be:	d102      	bne.n	80086c6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80086c0:	4b30      	ldr	r3, [pc, #192]	@ (8008784 <HAL_RCC_GetSysClockFreq+0x100>)
 80086c2:	613b      	str	r3, [r7, #16]
 80086c4:	e054      	b.n	8008770 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086c6:	4b2d      	ldr	r3, [pc, #180]	@ (800877c <HAL_RCC_GetSysClockFreq+0xf8>)
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	2238      	movs	r2, #56	@ 0x38
 80086cc:	4013      	ands	r3, r2
 80086ce:	2b10      	cmp	r3, #16
 80086d0:	d138      	bne.n	8008744 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80086d2:	4b2a      	ldr	r3, [pc, #168]	@ (800877c <HAL_RCC_GetSysClockFreq+0xf8>)
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	2203      	movs	r2, #3
 80086d8:	4013      	ands	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086dc:	4b27      	ldr	r3, [pc, #156]	@ (800877c <HAL_RCC_GetSysClockFreq+0xf8>)
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	091b      	lsrs	r3, r3, #4
 80086e2:	2207      	movs	r2, #7
 80086e4:	4013      	ands	r3, r2
 80086e6:	3301      	adds	r3, #1
 80086e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d10d      	bne.n	800870c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086f0:	68b9      	ldr	r1, [r7, #8]
 80086f2:	4824      	ldr	r0, [pc, #144]	@ (8008784 <HAL_RCC_GetSysClockFreq+0x100>)
 80086f4:	f7f7 fd22 	bl	800013c <__udivsi3>
 80086f8:	0003      	movs	r3, r0
 80086fa:	0019      	movs	r1, r3
 80086fc:	4b1f      	ldr	r3, [pc, #124]	@ (800877c <HAL_RCC_GetSysClockFreq+0xf8>)
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	0a1b      	lsrs	r3, r3, #8
 8008702:	227f      	movs	r2, #127	@ 0x7f
 8008704:	4013      	ands	r3, r2
 8008706:	434b      	muls	r3, r1
 8008708:	617b      	str	r3, [r7, #20]
        break;
 800870a:	e00d      	b.n	8008728 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800870c:	68b9      	ldr	r1, [r7, #8]
 800870e:	481c      	ldr	r0, [pc, #112]	@ (8008780 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008710:	f7f7 fd14 	bl	800013c <__udivsi3>
 8008714:	0003      	movs	r3, r0
 8008716:	0019      	movs	r1, r3
 8008718:	4b18      	ldr	r3, [pc, #96]	@ (800877c <HAL_RCC_GetSysClockFreq+0xf8>)
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	0a1b      	lsrs	r3, r3, #8
 800871e:	227f      	movs	r2, #127	@ 0x7f
 8008720:	4013      	ands	r3, r2
 8008722:	434b      	muls	r3, r1
 8008724:	617b      	str	r3, [r7, #20]
        break;
 8008726:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008728:	4b14      	ldr	r3, [pc, #80]	@ (800877c <HAL_RCC_GetSysClockFreq+0xf8>)
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	0f5b      	lsrs	r3, r3, #29
 800872e:	2207      	movs	r2, #7
 8008730:	4013      	ands	r3, r2
 8008732:	3301      	adds	r3, #1
 8008734:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	6978      	ldr	r0, [r7, #20]
 800873a:	f7f7 fcff 	bl	800013c <__udivsi3>
 800873e:	0003      	movs	r3, r0
 8008740:	613b      	str	r3, [r7, #16]
 8008742:	e015      	b.n	8008770 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008744:	4b0d      	ldr	r3, [pc, #52]	@ (800877c <HAL_RCC_GetSysClockFreq+0xf8>)
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	2238      	movs	r2, #56	@ 0x38
 800874a:	4013      	ands	r3, r2
 800874c:	2b20      	cmp	r3, #32
 800874e:	d103      	bne.n	8008758 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008750:	2380      	movs	r3, #128	@ 0x80
 8008752:	021b      	lsls	r3, r3, #8
 8008754:	613b      	str	r3, [r7, #16]
 8008756:	e00b      	b.n	8008770 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008758:	4b08      	ldr	r3, [pc, #32]	@ (800877c <HAL_RCC_GetSysClockFreq+0xf8>)
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	2238      	movs	r2, #56	@ 0x38
 800875e:	4013      	ands	r3, r2
 8008760:	2b18      	cmp	r3, #24
 8008762:	d103      	bne.n	800876c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008764:	23fa      	movs	r3, #250	@ 0xfa
 8008766:	01db      	lsls	r3, r3, #7
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	e001      	b.n	8008770 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008770:	693b      	ldr	r3, [r7, #16]
}
 8008772:	0018      	movs	r0, r3
 8008774:	46bd      	mov	sp, r7
 8008776:	b006      	add	sp, #24
 8008778:	bd80      	pop	{r7, pc}
 800877a:	46c0      	nop			@ (mov r8, r8)
 800877c:	40021000 	.word	0x40021000
 8008780:	00f42400 	.word	0x00f42400
 8008784:	007a1200 	.word	0x007a1200

08008788 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800878c:	4b02      	ldr	r3, [pc, #8]	@ (8008798 <HAL_RCC_GetHCLKFreq+0x10>)
 800878e:	681b      	ldr	r3, [r3, #0]
}
 8008790:	0018      	movs	r0, r3
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	46c0      	nop			@ (mov r8, r8)
 8008798:	20000000 	.word	0x20000000

0800879c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800879c:	b5b0      	push	{r4, r5, r7, lr}
 800879e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80087a0:	f7ff fff2 	bl	8008788 <HAL_RCC_GetHCLKFreq>
 80087a4:	0004      	movs	r4, r0
 80087a6:	f7ff fb3f 	bl	8007e28 <LL_RCC_GetAPB1Prescaler>
 80087aa:	0003      	movs	r3, r0
 80087ac:	0b1a      	lsrs	r2, r3, #12
 80087ae:	4b05      	ldr	r3, [pc, #20]	@ (80087c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80087b0:	0092      	lsls	r2, r2, #2
 80087b2:	58d3      	ldr	r3, [r2, r3]
 80087b4:	221f      	movs	r2, #31
 80087b6:	4013      	ands	r3, r2
 80087b8:	40dc      	lsrs	r4, r3
 80087ba:	0023      	movs	r3, r4
}
 80087bc:	0018      	movs	r0, r3
 80087be:	46bd      	mov	sp, r7
 80087c0:	bdb0      	pop	{r4, r5, r7, pc}
 80087c2:	46c0      	nop			@ (mov r8, r8)
 80087c4:	0800caac 	.word	0x0800caac

080087c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80087d0:	2313      	movs	r3, #19
 80087d2:	18fb      	adds	r3, r7, r3
 80087d4:	2200      	movs	r2, #0
 80087d6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80087d8:	2312      	movs	r3, #18
 80087da:	18fb      	adds	r3, r7, r3
 80087dc:	2200      	movs	r2, #0
 80087de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	2380      	movs	r3, #128	@ 0x80
 80087e6:	029b      	lsls	r3, r3, #10
 80087e8:	4013      	ands	r3, r2
 80087ea:	d100      	bne.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x26>
 80087ec:	e0a3      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087ee:	2011      	movs	r0, #17
 80087f0:	183b      	adds	r3, r7, r0
 80087f2:	2200      	movs	r2, #0
 80087f4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087f6:	4bc3      	ldr	r3, [pc, #780]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80087f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087fa:	2380      	movs	r3, #128	@ 0x80
 80087fc:	055b      	lsls	r3, r3, #21
 80087fe:	4013      	ands	r3, r2
 8008800:	d110      	bne.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008802:	4bc0      	ldr	r3, [pc, #768]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008804:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008806:	4bbf      	ldr	r3, [pc, #764]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008808:	2180      	movs	r1, #128	@ 0x80
 800880a:	0549      	lsls	r1, r1, #21
 800880c:	430a      	orrs	r2, r1
 800880e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008810:	4bbc      	ldr	r3, [pc, #752]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008812:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008814:	2380      	movs	r3, #128	@ 0x80
 8008816:	055b      	lsls	r3, r3, #21
 8008818:	4013      	ands	r3, r2
 800881a:	60bb      	str	r3, [r7, #8]
 800881c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800881e:	183b      	adds	r3, r7, r0
 8008820:	2201      	movs	r2, #1
 8008822:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008824:	4bb8      	ldr	r3, [pc, #736]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	4bb7      	ldr	r3, [pc, #732]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800882a:	2180      	movs	r1, #128	@ 0x80
 800882c:	0049      	lsls	r1, r1, #1
 800882e:	430a      	orrs	r2, r1
 8008830:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008832:	f7fe f8db 	bl	80069ec <HAL_GetTick>
 8008836:	0003      	movs	r3, r0
 8008838:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800883a:	e00b      	b.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800883c:	f7fe f8d6 	bl	80069ec <HAL_GetTick>
 8008840:	0002      	movs	r2, r0
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	2b02      	cmp	r3, #2
 8008848:	d904      	bls.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800884a:	2313      	movs	r3, #19
 800884c:	18fb      	adds	r3, r7, r3
 800884e:	2203      	movs	r2, #3
 8008850:	701a      	strb	r2, [r3, #0]
        break;
 8008852:	e005      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008854:	4bac      	ldr	r3, [pc, #688]	@ (8008b08 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	2380      	movs	r3, #128	@ 0x80
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	4013      	ands	r3, r2
 800885e:	d0ed      	beq.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008860:	2313      	movs	r3, #19
 8008862:	18fb      	adds	r3, r7, r3
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d154      	bne.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800886a:	4ba6      	ldr	r3, [pc, #664]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800886c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800886e:	23c0      	movs	r3, #192	@ 0xc0
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4013      	ands	r3, r2
 8008874:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d019      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	429a      	cmp	r2, r3
 8008884:	d014      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008886:	4b9f      	ldr	r3, [pc, #636]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800888a:	4aa0      	ldr	r2, [pc, #640]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800888c:	4013      	ands	r3, r2
 800888e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008890:	4b9c      	ldr	r3, [pc, #624]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008892:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008894:	4b9b      	ldr	r3, [pc, #620]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008896:	2180      	movs	r1, #128	@ 0x80
 8008898:	0249      	lsls	r1, r1, #9
 800889a:	430a      	orrs	r2, r1
 800889c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800889e:	4b99      	ldr	r3, [pc, #612]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088a2:	4b98      	ldr	r3, [pc, #608]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088a4:	499a      	ldr	r1, [pc, #616]	@ (8008b10 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 80088a6:	400a      	ands	r2, r1
 80088a8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088aa:	4b96      	ldr	r3, [pc, #600]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2201      	movs	r2, #1
 80088b4:	4013      	ands	r3, r2
 80088b6:	d016      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b8:	f7fe f898 	bl	80069ec <HAL_GetTick>
 80088bc:	0003      	movs	r3, r0
 80088be:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088c0:	e00c      	b.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088c2:	f7fe f893 	bl	80069ec <HAL_GetTick>
 80088c6:	0002      	movs	r2, r0
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	4a91      	ldr	r2, [pc, #580]	@ (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d904      	bls.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80088d2:	2313      	movs	r3, #19
 80088d4:	18fb      	adds	r3, r7, r3
 80088d6:	2203      	movs	r2, #3
 80088d8:	701a      	strb	r2, [r3, #0]
            break;
 80088da:	e004      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088dc:	4b89      	ldr	r3, [pc, #548]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088e0:	2202      	movs	r2, #2
 80088e2:	4013      	ands	r3, r2
 80088e4:	d0ed      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80088e6:	2313      	movs	r3, #19
 80088e8:	18fb      	adds	r3, r7, r3
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80088f0:	4b84      	ldr	r3, [pc, #528]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80088f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088f4:	4a85      	ldr	r2, [pc, #532]	@ (8008b0c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	0019      	movs	r1, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088fe:	4b81      	ldr	r3, [pc, #516]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008900:	430a      	orrs	r2, r1
 8008902:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008904:	e00c      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008906:	2312      	movs	r3, #18
 8008908:	18fb      	adds	r3, r7, r3
 800890a:	2213      	movs	r2, #19
 800890c:	18ba      	adds	r2, r7, r2
 800890e:	7812      	ldrb	r2, [r2, #0]
 8008910:	701a      	strb	r2, [r3, #0]
 8008912:	e005      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008914:	2312      	movs	r3, #18
 8008916:	18fb      	adds	r3, r7, r3
 8008918:	2213      	movs	r2, #19
 800891a:	18ba      	adds	r2, r7, r2
 800891c:	7812      	ldrb	r2, [r2, #0]
 800891e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008920:	2311      	movs	r3, #17
 8008922:	18fb      	adds	r3, r7, r3
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	2b01      	cmp	r3, #1
 8008928:	d105      	bne.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800892a:	4b76      	ldr	r3, [pc, #472]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800892c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800892e:	4b75      	ldr	r3, [pc, #468]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008930:	4979      	ldr	r1, [pc, #484]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8008932:	400a      	ands	r2, r1
 8008934:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2201      	movs	r2, #1
 800893c:	4013      	ands	r3, r2
 800893e:	d009      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008940:	4b70      	ldr	r3, [pc, #448]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008944:	2203      	movs	r2, #3
 8008946:	4393      	bics	r3, r2
 8008948:	0019      	movs	r1, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685a      	ldr	r2, [r3, #4]
 800894e:	4b6d      	ldr	r3, [pc, #436]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008950:	430a      	orrs	r2, r1
 8008952:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2202      	movs	r2, #2
 800895a:	4013      	ands	r3, r2
 800895c:	d009      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800895e:	4b69      	ldr	r3, [pc, #420]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008962:	220c      	movs	r2, #12
 8008964:	4393      	bics	r3, r2
 8008966:	0019      	movs	r1, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	4b65      	ldr	r3, [pc, #404]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800896e:	430a      	orrs	r2, r1
 8008970:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2210      	movs	r2, #16
 8008978:	4013      	ands	r3, r2
 800897a:	d009      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800897c:	4b61      	ldr	r3, [pc, #388]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800897e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008980:	4a66      	ldr	r2, [pc, #408]	@ (8008b1c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8008982:	4013      	ands	r3, r2
 8008984:	0019      	movs	r1, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68da      	ldr	r2, [r3, #12]
 800898a:	4b5e      	ldr	r3, [pc, #376]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800898c:	430a      	orrs	r2, r1
 800898e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681a      	ldr	r2, [r3, #0]
 8008994:	2380      	movs	r3, #128	@ 0x80
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4013      	ands	r3, r2
 800899a:	d009      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800899c:	4b59      	ldr	r3, [pc, #356]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800899e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089a0:	4a5f      	ldr	r2, [pc, #380]	@ (8008b20 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80089a2:	4013      	ands	r3, r2
 80089a4:	0019      	movs	r1, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	699a      	ldr	r2, [r3, #24]
 80089aa:	4b56      	ldr	r3, [pc, #344]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089ac:	430a      	orrs	r2, r1
 80089ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	2380      	movs	r3, #128	@ 0x80
 80089b6:	00db      	lsls	r3, r3, #3
 80089b8:	4013      	ands	r3, r2
 80089ba:	d009      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089bc:	4b51      	ldr	r3, [pc, #324]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c0:	4a58      	ldr	r2, [pc, #352]	@ (8008b24 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80089c2:	4013      	ands	r3, r2
 80089c4:	0019      	movs	r1, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	69da      	ldr	r2, [r3, #28]
 80089ca:	4b4e      	ldr	r3, [pc, #312]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089cc:	430a      	orrs	r2, r1
 80089ce:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2220      	movs	r2, #32
 80089d6:	4013      	ands	r3, r2
 80089d8:	d009      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80089da:	4b4a      	ldr	r3, [pc, #296]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089de:	4a52      	ldr	r2, [pc, #328]	@ (8008b28 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80089e0:	4013      	ands	r3, r2
 80089e2:	0019      	movs	r1, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	691a      	ldr	r2, [r3, #16]
 80089e8:	4b46      	ldr	r3, [pc, #280]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089ea:	430a      	orrs	r2, r1
 80089ec:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	2380      	movs	r3, #128	@ 0x80
 80089f4:	01db      	lsls	r3, r3, #7
 80089f6:	4013      	ands	r3, r2
 80089f8:	d015      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089fa:	4b42      	ldr	r3, [pc, #264]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80089fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	0899      	lsrs	r1, r3, #2
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1a      	ldr	r2, [r3, #32]
 8008a06:	4b3f      	ldr	r3, [pc, #252]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a1a      	ldr	r2, [r3, #32]
 8008a10:	2380      	movs	r3, #128	@ 0x80
 8008a12:	05db      	lsls	r3, r3, #23
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d106      	bne.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008a18:	4b3a      	ldr	r3, [pc, #232]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a1a:	68da      	ldr	r2, [r3, #12]
 8008a1c:	4b39      	ldr	r3, [pc, #228]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a1e:	2180      	movs	r1, #128	@ 0x80
 8008a20:	0249      	lsls	r1, r1, #9
 8008a22:	430a      	orrs	r2, r1
 8008a24:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	2380      	movs	r3, #128	@ 0x80
 8008a2c:	031b      	lsls	r3, r3, #12
 8008a2e:	4013      	ands	r3, r2
 8008a30:	d009      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008a32:	4b34      	ldr	r3, [pc, #208]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a36:	2240      	movs	r2, #64	@ 0x40
 8008a38:	4393      	bics	r3, r2
 8008a3a:	0019      	movs	r1, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a40:	4b30      	ldr	r3, [pc, #192]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a42:	430a      	orrs	r2, r1
 8008a44:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	2380      	movs	r3, #128	@ 0x80
 8008a4c:	039b      	lsls	r3, r3, #14
 8008a4e:	4013      	ands	r3, r2
 8008a50:	d016      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008a52:	4b2c      	ldr	r3, [pc, #176]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a56:	4a35      	ldr	r2, [pc, #212]	@ (8008b2c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	0019      	movs	r1, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a60:	4b28      	ldr	r3, [pc, #160]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a62:	430a      	orrs	r2, r1
 8008a64:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a6a:	2380      	movs	r3, #128	@ 0x80
 8008a6c:	03db      	lsls	r3, r3, #15
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d106      	bne.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008a72:	4b24      	ldr	r3, [pc, #144]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	4b23      	ldr	r3, [pc, #140]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a78:	2180      	movs	r1, #128	@ 0x80
 8008a7a:	0449      	lsls	r1, r1, #17
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	2380      	movs	r3, #128	@ 0x80
 8008a86:	03db      	lsls	r3, r3, #15
 8008a88:	4013      	ands	r3, r2
 8008a8a:	d016      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a90:	4a27      	ldr	r2, [pc, #156]	@ (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008a92:	4013      	ands	r3, r2
 8008a94:	0019      	movs	r1, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008a9c:	430a      	orrs	r2, r1
 8008a9e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa4:	2380      	movs	r3, #128	@ 0x80
 8008aa6:	045b      	lsls	r3, r3, #17
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d106      	bne.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008aac:	4b15      	ldr	r3, [pc, #84]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	4b14      	ldr	r3, [pc, #80]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ab2:	2180      	movs	r1, #128	@ 0x80
 8008ab4:	0449      	lsls	r1, r1, #17
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	2380      	movs	r3, #128	@ 0x80
 8008ac0:	011b      	lsls	r3, r3, #4
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	d016      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aca:	4a1a      	ldr	r2, [pc, #104]	@ (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	0019      	movs	r1, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	695a      	ldr	r2, [r3, #20]
 8008ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	695a      	ldr	r2, [r3, #20]
 8008ade:	2380      	movs	r3, #128	@ 0x80
 8008ae0:	01db      	lsls	r3, r3, #7
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d106      	bne.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008ae6:	4b07      	ldr	r3, [pc, #28]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ae8:	68da      	ldr	r2, [r3, #12]
 8008aea:	4b06      	ldr	r3, [pc, #24]	@ (8008b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008aec:	2180      	movs	r1, #128	@ 0x80
 8008aee:	0249      	lsls	r1, r1, #9
 8008af0:	430a      	orrs	r2, r1
 8008af2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008af4:	2312      	movs	r3, #18
 8008af6:	18fb      	adds	r3, r7, r3
 8008af8:	781b      	ldrb	r3, [r3, #0]
}
 8008afa:	0018      	movs	r0, r3
 8008afc:	46bd      	mov	sp, r7
 8008afe:	b006      	add	sp, #24
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	46c0      	nop			@ (mov r8, r8)
 8008b04:	40021000 	.word	0x40021000
 8008b08:	40007000 	.word	0x40007000
 8008b0c:	fffffcff 	.word	0xfffffcff
 8008b10:	fffeffff 	.word	0xfffeffff
 8008b14:	00001388 	.word	0x00001388
 8008b18:	efffffff 	.word	0xefffffff
 8008b1c:	fffff3ff 	.word	0xfffff3ff
 8008b20:	fff3ffff 	.word	0xfff3ffff
 8008b24:	ffcfffff 	.word	0xffcfffff
 8008b28:	ffffcfff 	.word	0xffffcfff
 8008b2c:	ffbfffff 	.word	0xffbfffff
 8008b30:	feffffff 	.word	0xfeffffff
 8008b34:	ffff3fff 	.word	0xffff3fff

08008b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e046      	b.n	8008bd8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2288      	movs	r2, #136	@ 0x88
 8008b4e:	589b      	ldr	r3, [r3, r2]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d107      	bne.n	8008b64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2284      	movs	r2, #132	@ 0x84
 8008b58:	2100      	movs	r1, #0
 8008b5a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	0018      	movs	r0, r3
 8008b60:	f7fd fd60 	bl	8006624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2288      	movs	r2, #136	@ 0x88
 8008b68:	2124      	movs	r1, #36	@ 0x24
 8008b6a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2101      	movs	r1, #1
 8008b78:	438a      	bics	r2, r1
 8008b7a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d003      	beq.n	8008b8c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	0018      	movs	r0, r3
 8008b88:	f000 fb8e 	bl	80092a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	0018      	movs	r0, r3
 8008b90:	f000 f8cc 	bl	8008d2c <UART_SetConfig>
 8008b94:	0003      	movs	r3, r0
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d101      	bne.n	8008b9e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e01c      	b.n	8008bd8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	685a      	ldr	r2, [r3, #4]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	490d      	ldr	r1, [pc, #52]	@ (8008be0 <HAL_UART_Init+0xa8>)
 8008baa:	400a      	ands	r2, r1
 8008bac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	212a      	movs	r1, #42	@ 0x2a
 8008bba:	438a      	bics	r2, r1
 8008bbc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2101      	movs	r1, #1
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	f000 fc1d 	bl	8009410 <UART_CheckIdleState>
 8008bd6:	0003      	movs	r3, r0
}
 8008bd8:	0018      	movs	r0, r3
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	b002      	add	sp, #8
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	ffffb7ff 	.word	0xffffb7ff

08008be4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b08a      	sub	sp, #40	@ 0x28
 8008be8:	af02      	add	r7, sp, #8
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	603b      	str	r3, [r7, #0]
 8008bf0:	1dbb      	adds	r3, r7, #6
 8008bf2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2288      	movs	r2, #136	@ 0x88
 8008bf8:	589b      	ldr	r3, [r3, r2]
 8008bfa:	2b20      	cmp	r3, #32
 8008bfc:	d000      	beq.n	8008c00 <HAL_UART_Transmit+0x1c>
 8008bfe:	e090      	b.n	8008d22 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_UART_Transmit+0x2a>
 8008c06:	1dbb      	adds	r3, r7, #6
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e088      	b.n	8008d24 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	689a      	ldr	r2, [r3, #8]
 8008c16:	2380      	movs	r3, #128	@ 0x80
 8008c18:	015b      	lsls	r3, r3, #5
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d109      	bne.n	8008c32 <HAL_UART_Transmit+0x4e>
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d105      	bne.n	8008c32 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	d001      	beq.n	8008c32 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e078      	b.n	8008d24 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2290      	movs	r2, #144	@ 0x90
 8008c36:	2100      	movs	r1, #0
 8008c38:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2288      	movs	r2, #136	@ 0x88
 8008c3e:	2121      	movs	r1, #33	@ 0x21
 8008c40:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c42:	f7fd fed3 	bl	80069ec <HAL_GetTick>
 8008c46:	0003      	movs	r3, r0
 8008c48:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	1dba      	adds	r2, r7, #6
 8008c4e:	2154      	movs	r1, #84	@ 0x54
 8008c50:	8812      	ldrh	r2, [r2, #0]
 8008c52:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	1dba      	adds	r2, r7, #6
 8008c58:	2156      	movs	r1, #86	@ 0x56
 8008c5a:	8812      	ldrh	r2, [r2, #0]
 8008c5c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	689a      	ldr	r2, [r3, #8]
 8008c62:	2380      	movs	r3, #128	@ 0x80
 8008c64:	015b      	lsls	r3, r3, #5
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d108      	bne.n	8008c7c <HAL_UART_Transmit+0x98>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	691b      	ldr	r3, [r3, #16]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d104      	bne.n	8008c7c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	61bb      	str	r3, [r7, #24]
 8008c7a:	e003      	b.n	8008c84 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008c84:	e030      	b.n	8008ce8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	68f8      	ldr	r0, [r7, #12]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	0013      	movs	r3, r2
 8008c90:	2200      	movs	r2, #0
 8008c92:	2180      	movs	r1, #128	@ 0x80
 8008c94:	f000 fc66 	bl	8009564 <UART_WaitOnFlagUntilTimeout>
 8008c98:	1e03      	subs	r3, r0, #0
 8008c9a:	d005      	beq.n	8008ca8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2288      	movs	r2, #136	@ 0x88
 8008ca0:	2120      	movs	r1, #32
 8008ca2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e03d      	b.n	8008d24 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10b      	bne.n	8008cc6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	001a      	movs	r2, r3
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	05d2      	lsls	r2, r2, #23
 8008cba:	0dd2      	lsrs	r2, r2, #23
 8008cbc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	3302      	adds	r3, #2
 8008cc2:	61bb      	str	r3, [r7, #24]
 8008cc4:	e007      	b.n	8008cd6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2256      	movs	r2, #86	@ 0x56
 8008cda:	5a9b      	ldrh	r3, [r3, r2]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	b299      	uxth	r1, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2256      	movs	r2, #86	@ 0x56
 8008ce6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2256      	movs	r2, #86	@ 0x56
 8008cec:	5a9b      	ldrh	r3, [r3, r2]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1c8      	bne.n	8008c86 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cf4:	697a      	ldr	r2, [r7, #20]
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	0013      	movs	r3, r2
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2140      	movs	r1, #64	@ 0x40
 8008d02:	f000 fc2f 	bl	8009564 <UART_WaitOnFlagUntilTimeout>
 8008d06:	1e03      	subs	r3, r0, #0
 8008d08:	d005      	beq.n	8008d16 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2288      	movs	r2, #136	@ 0x88
 8008d0e:	2120      	movs	r1, #32
 8008d10:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e006      	b.n	8008d24 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2288      	movs	r2, #136	@ 0x88
 8008d1a:	2120      	movs	r1, #32
 8008d1c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e000      	b.n	8008d24 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8008d22:	2302      	movs	r3, #2
  }
}
 8008d24:	0018      	movs	r0, r3
 8008d26:	46bd      	mov	sp, r7
 8008d28:	b008      	add	sp, #32
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d2c:	b5b0      	push	{r4, r5, r7, lr}
 8008d2e:	b090      	sub	sp, #64	@ 0x40
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d34:	231a      	movs	r3, #26
 8008d36:	2220      	movs	r2, #32
 8008d38:	189b      	adds	r3, r3, r2
 8008d3a:	19db      	adds	r3, r3, r7
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	4313      	orrs	r3, r2
 8008d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4aaf      	ldr	r2, [pc, #700]	@ (800901c <UART_SetConfig+0x2f0>)
 8008d60:	4013      	ands	r3, r2
 8008d62:	0019      	movs	r1, r3
 8008d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d6a:	430b      	orrs	r3, r1
 8008d6c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	4aaa      	ldr	r2, [pc, #680]	@ (8009020 <UART_SetConfig+0x2f4>)
 8008d76:	4013      	ands	r3, r2
 8008d78:	0018      	movs	r0, r3
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7c:	68d9      	ldr	r1, [r3, #12]
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	0003      	movs	r3, r0
 8008d84:	430b      	orrs	r3, r1
 8008d86:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8a:	699b      	ldr	r3, [r3, #24]
 8008d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4aa4      	ldr	r2, [pc, #656]	@ (8009024 <UART_SetConfig+0x2f8>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d004      	beq.n	8008da2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d9a:	6a1b      	ldr	r3, [r3, #32]
 8008d9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	689b      	ldr	r3, [r3, #8]
 8008da8:	4a9f      	ldr	r2, [pc, #636]	@ (8009028 <UART_SetConfig+0x2fc>)
 8008daa:	4013      	ands	r3, r2
 8008dac:	0019      	movs	r1, r3
 8008dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008db4:	430b      	orrs	r3, r1
 8008db6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dbe:	220f      	movs	r2, #15
 8008dc0:	4393      	bics	r3, r2
 8008dc2:	0018      	movs	r0, r3
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dc6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	0003      	movs	r3, r0
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a95      	ldr	r2, [pc, #596]	@ (800902c <UART_SetConfig+0x300>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d131      	bne.n	8008e40 <UART_SetConfig+0x114>
 8008ddc:	4b94      	ldr	r3, [pc, #592]	@ (8009030 <UART_SetConfig+0x304>)
 8008dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de0:	2203      	movs	r2, #3
 8008de2:	4013      	ands	r3, r2
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d01d      	beq.n	8008e24 <UART_SetConfig+0xf8>
 8008de8:	d823      	bhi.n	8008e32 <UART_SetConfig+0x106>
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d00c      	beq.n	8008e08 <UART_SetConfig+0xdc>
 8008dee:	d820      	bhi.n	8008e32 <UART_SetConfig+0x106>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <UART_SetConfig+0xce>
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d00e      	beq.n	8008e16 <UART_SetConfig+0xea>
 8008df8:	e01b      	b.n	8008e32 <UART_SetConfig+0x106>
 8008dfa:	231b      	movs	r3, #27
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	189b      	adds	r3, r3, r2
 8008e00:	19db      	adds	r3, r3, r7
 8008e02:	2200      	movs	r2, #0
 8008e04:	701a      	strb	r2, [r3, #0]
 8008e06:	e0b4      	b.n	8008f72 <UART_SetConfig+0x246>
 8008e08:	231b      	movs	r3, #27
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	189b      	adds	r3, r3, r2
 8008e0e:	19db      	adds	r3, r3, r7
 8008e10:	2202      	movs	r2, #2
 8008e12:	701a      	strb	r2, [r3, #0]
 8008e14:	e0ad      	b.n	8008f72 <UART_SetConfig+0x246>
 8008e16:	231b      	movs	r3, #27
 8008e18:	2220      	movs	r2, #32
 8008e1a:	189b      	adds	r3, r3, r2
 8008e1c:	19db      	adds	r3, r3, r7
 8008e1e:	2204      	movs	r2, #4
 8008e20:	701a      	strb	r2, [r3, #0]
 8008e22:	e0a6      	b.n	8008f72 <UART_SetConfig+0x246>
 8008e24:	231b      	movs	r3, #27
 8008e26:	2220      	movs	r2, #32
 8008e28:	189b      	adds	r3, r3, r2
 8008e2a:	19db      	adds	r3, r3, r7
 8008e2c:	2208      	movs	r2, #8
 8008e2e:	701a      	strb	r2, [r3, #0]
 8008e30:	e09f      	b.n	8008f72 <UART_SetConfig+0x246>
 8008e32:	231b      	movs	r3, #27
 8008e34:	2220      	movs	r2, #32
 8008e36:	189b      	adds	r3, r3, r2
 8008e38:	19db      	adds	r3, r3, r7
 8008e3a:	2210      	movs	r2, #16
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	e098      	b.n	8008f72 <UART_SetConfig+0x246>
 8008e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a7b      	ldr	r2, [pc, #492]	@ (8009034 <UART_SetConfig+0x308>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d131      	bne.n	8008eae <UART_SetConfig+0x182>
 8008e4a:	4b79      	ldr	r3, [pc, #484]	@ (8009030 <UART_SetConfig+0x304>)
 8008e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e4e:	220c      	movs	r2, #12
 8008e50:	4013      	ands	r3, r2
 8008e52:	2b0c      	cmp	r3, #12
 8008e54:	d01d      	beq.n	8008e92 <UART_SetConfig+0x166>
 8008e56:	d823      	bhi.n	8008ea0 <UART_SetConfig+0x174>
 8008e58:	2b08      	cmp	r3, #8
 8008e5a:	d00c      	beq.n	8008e76 <UART_SetConfig+0x14a>
 8008e5c:	d820      	bhi.n	8008ea0 <UART_SetConfig+0x174>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <UART_SetConfig+0x13c>
 8008e62:	2b04      	cmp	r3, #4
 8008e64:	d00e      	beq.n	8008e84 <UART_SetConfig+0x158>
 8008e66:	e01b      	b.n	8008ea0 <UART_SetConfig+0x174>
 8008e68:	231b      	movs	r3, #27
 8008e6a:	2220      	movs	r2, #32
 8008e6c:	189b      	adds	r3, r3, r2
 8008e6e:	19db      	adds	r3, r3, r7
 8008e70:	2200      	movs	r2, #0
 8008e72:	701a      	strb	r2, [r3, #0]
 8008e74:	e07d      	b.n	8008f72 <UART_SetConfig+0x246>
 8008e76:	231b      	movs	r3, #27
 8008e78:	2220      	movs	r2, #32
 8008e7a:	189b      	adds	r3, r3, r2
 8008e7c:	19db      	adds	r3, r3, r7
 8008e7e:	2202      	movs	r2, #2
 8008e80:	701a      	strb	r2, [r3, #0]
 8008e82:	e076      	b.n	8008f72 <UART_SetConfig+0x246>
 8008e84:	231b      	movs	r3, #27
 8008e86:	2220      	movs	r2, #32
 8008e88:	189b      	adds	r3, r3, r2
 8008e8a:	19db      	adds	r3, r3, r7
 8008e8c:	2204      	movs	r2, #4
 8008e8e:	701a      	strb	r2, [r3, #0]
 8008e90:	e06f      	b.n	8008f72 <UART_SetConfig+0x246>
 8008e92:	231b      	movs	r3, #27
 8008e94:	2220      	movs	r2, #32
 8008e96:	189b      	adds	r3, r3, r2
 8008e98:	19db      	adds	r3, r3, r7
 8008e9a:	2208      	movs	r2, #8
 8008e9c:	701a      	strb	r2, [r3, #0]
 8008e9e:	e068      	b.n	8008f72 <UART_SetConfig+0x246>
 8008ea0:	231b      	movs	r3, #27
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	189b      	adds	r3, r3, r2
 8008ea6:	19db      	adds	r3, r3, r7
 8008ea8:	2210      	movs	r2, #16
 8008eaa:	701a      	strb	r2, [r3, #0]
 8008eac:	e061      	b.n	8008f72 <UART_SetConfig+0x246>
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a61      	ldr	r2, [pc, #388]	@ (8009038 <UART_SetConfig+0x30c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d106      	bne.n	8008ec6 <UART_SetConfig+0x19a>
 8008eb8:	231b      	movs	r3, #27
 8008eba:	2220      	movs	r2, #32
 8008ebc:	189b      	adds	r3, r3, r2
 8008ebe:	19db      	adds	r3, r3, r7
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	701a      	strb	r2, [r3, #0]
 8008ec4:	e055      	b.n	8008f72 <UART_SetConfig+0x246>
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a5c      	ldr	r2, [pc, #368]	@ (800903c <UART_SetConfig+0x310>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d106      	bne.n	8008ede <UART_SetConfig+0x1b2>
 8008ed0:	231b      	movs	r3, #27
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	189b      	adds	r3, r3, r2
 8008ed6:	19db      	adds	r3, r3, r7
 8008ed8:	2200      	movs	r2, #0
 8008eda:	701a      	strb	r2, [r3, #0]
 8008edc:	e049      	b.n	8008f72 <UART_SetConfig+0x246>
 8008ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a50      	ldr	r2, [pc, #320]	@ (8009024 <UART_SetConfig+0x2f8>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d13e      	bne.n	8008f66 <UART_SetConfig+0x23a>
 8008ee8:	4b51      	ldr	r3, [pc, #324]	@ (8009030 <UART_SetConfig+0x304>)
 8008eea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008eec:	23c0      	movs	r3, #192	@ 0xc0
 8008eee:	011b      	lsls	r3, r3, #4
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	22c0      	movs	r2, #192	@ 0xc0
 8008ef4:	0112      	lsls	r2, r2, #4
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d027      	beq.n	8008f4a <UART_SetConfig+0x21e>
 8008efa:	22c0      	movs	r2, #192	@ 0xc0
 8008efc:	0112      	lsls	r2, r2, #4
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d82a      	bhi.n	8008f58 <UART_SetConfig+0x22c>
 8008f02:	2280      	movs	r2, #128	@ 0x80
 8008f04:	0112      	lsls	r2, r2, #4
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d011      	beq.n	8008f2e <UART_SetConfig+0x202>
 8008f0a:	2280      	movs	r2, #128	@ 0x80
 8008f0c:	0112      	lsls	r2, r2, #4
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d822      	bhi.n	8008f58 <UART_SetConfig+0x22c>
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d004      	beq.n	8008f20 <UART_SetConfig+0x1f4>
 8008f16:	2280      	movs	r2, #128	@ 0x80
 8008f18:	00d2      	lsls	r2, r2, #3
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d00e      	beq.n	8008f3c <UART_SetConfig+0x210>
 8008f1e:	e01b      	b.n	8008f58 <UART_SetConfig+0x22c>
 8008f20:	231b      	movs	r3, #27
 8008f22:	2220      	movs	r2, #32
 8008f24:	189b      	adds	r3, r3, r2
 8008f26:	19db      	adds	r3, r3, r7
 8008f28:	2200      	movs	r2, #0
 8008f2a:	701a      	strb	r2, [r3, #0]
 8008f2c:	e021      	b.n	8008f72 <UART_SetConfig+0x246>
 8008f2e:	231b      	movs	r3, #27
 8008f30:	2220      	movs	r2, #32
 8008f32:	189b      	adds	r3, r3, r2
 8008f34:	19db      	adds	r3, r3, r7
 8008f36:	2202      	movs	r2, #2
 8008f38:	701a      	strb	r2, [r3, #0]
 8008f3a:	e01a      	b.n	8008f72 <UART_SetConfig+0x246>
 8008f3c:	231b      	movs	r3, #27
 8008f3e:	2220      	movs	r2, #32
 8008f40:	189b      	adds	r3, r3, r2
 8008f42:	19db      	adds	r3, r3, r7
 8008f44:	2204      	movs	r2, #4
 8008f46:	701a      	strb	r2, [r3, #0]
 8008f48:	e013      	b.n	8008f72 <UART_SetConfig+0x246>
 8008f4a:	231b      	movs	r3, #27
 8008f4c:	2220      	movs	r2, #32
 8008f4e:	189b      	adds	r3, r3, r2
 8008f50:	19db      	adds	r3, r3, r7
 8008f52:	2208      	movs	r2, #8
 8008f54:	701a      	strb	r2, [r3, #0]
 8008f56:	e00c      	b.n	8008f72 <UART_SetConfig+0x246>
 8008f58:	231b      	movs	r3, #27
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	189b      	adds	r3, r3, r2
 8008f5e:	19db      	adds	r3, r3, r7
 8008f60:	2210      	movs	r2, #16
 8008f62:	701a      	strb	r2, [r3, #0]
 8008f64:	e005      	b.n	8008f72 <UART_SetConfig+0x246>
 8008f66:	231b      	movs	r3, #27
 8008f68:	2220      	movs	r2, #32
 8008f6a:	189b      	adds	r3, r3, r2
 8008f6c:	19db      	adds	r3, r3, r7
 8008f6e:	2210      	movs	r2, #16
 8008f70:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a2b      	ldr	r2, [pc, #172]	@ (8009024 <UART_SetConfig+0x2f8>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d000      	beq.n	8008f7e <UART_SetConfig+0x252>
 8008f7c:	e0a9      	b.n	80090d2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f7e:	231b      	movs	r3, #27
 8008f80:	2220      	movs	r2, #32
 8008f82:	189b      	adds	r3, r3, r2
 8008f84:	19db      	adds	r3, r3, r7
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d015      	beq.n	8008fb8 <UART_SetConfig+0x28c>
 8008f8c:	dc18      	bgt.n	8008fc0 <UART_SetConfig+0x294>
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	d00d      	beq.n	8008fae <UART_SetConfig+0x282>
 8008f92:	dc15      	bgt.n	8008fc0 <UART_SetConfig+0x294>
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <UART_SetConfig+0x272>
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d005      	beq.n	8008fa8 <UART_SetConfig+0x27c>
 8008f9c:	e010      	b.n	8008fc0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f9e:	f7ff fbfd 	bl	800879c <HAL_RCC_GetPCLK1Freq>
 8008fa2:	0003      	movs	r3, r0
 8008fa4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fa6:	e014      	b.n	8008fd2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fa8:	4b25      	ldr	r3, [pc, #148]	@ (8009040 <UART_SetConfig+0x314>)
 8008faa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fac:	e011      	b.n	8008fd2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fae:	f7ff fb69 	bl	8008684 <HAL_RCC_GetSysClockFreq>
 8008fb2:	0003      	movs	r3, r0
 8008fb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fb6:	e00c      	b.n	8008fd2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fb8:	2380      	movs	r3, #128	@ 0x80
 8008fba:	021b      	lsls	r3, r3, #8
 8008fbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fbe:	e008      	b.n	8008fd2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8008fc4:	231a      	movs	r3, #26
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	189b      	adds	r3, r3, r2
 8008fca:	19db      	adds	r3, r3, r7
 8008fcc:	2201      	movs	r2, #1
 8008fce:	701a      	strb	r2, [r3, #0]
        break;
 8008fd0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d100      	bne.n	8008fda <UART_SetConfig+0x2ae>
 8008fd8:	e14b      	b.n	8009272 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008fde:	4b19      	ldr	r3, [pc, #100]	@ (8009044 <UART_SetConfig+0x318>)
 8008fe0:	0052      	lsls	r2, r2, #1
 8008fe2:	5ad3      	ldrh	r3, [r2, r3]
 8008fe4:	0019      	movs	r1, r3
 8008fe6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008fe8:	f7f7 f8a8 	bl	800013c <__udivsi3>
 8008fec:	0003      	movs	r3, r0
 8008fee:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	0013      	movs	r3, r2
 8008ff6:	005b      	lsls	r3, r3, #1
 8008ff8:	189b      	adds	r3, r3, r2
 8008ffa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d305      	bcc.n	800900c <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009006:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009008:	429a      	cmp	r2, r3
 800900a:	d91d      	bls.n	8009048 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 800900c:	231a      	movs	r3, #26
 800900e:	2220      	movs	r2, #32
 8009010:	189b      	adds	r3, r3, r2
 8009012:	19db      	adds	r3, r3, r7
 8009014:	2201      	movs	r2, #1
 8009016:	701a      	strb	r2, [r3, #0]
 8009018:	e12b      	b.n	8009272 <UART_SetConfig+0x546>
 800901a:	46c0      	nop			@ (mov r8, r8)
 800901c:	cfff69f3 	.word	0xcfff69f3
 8009020:	ffffcfff 	.word	0xffffcfff
 8009024:	40008000 	.word	0x40008000
 8009028:	11fff4ff 	.word	0x11fff4ff
 800902c:	40013800 	.word	0x40013800
 8009030:	40021000 	.word	0x40021000
 8009034:	40004400 	.word	0x40004400
 8009038:	40004800 	.word	0x40004800
 800903c:	40004c00 	.word	0x40004c00
 8009040:	00f42400 	.word	0x00f42400
 8009044:	0800cacc 	.word	0x0800cacc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800904a:	61bb      	str	r3, [r7, #24]
 800904c:	2300      	movs	r3, #0
 800904e:	61fb      	str	r3, [r7, #28]
 8009050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009052:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009054:	4b92      	ldr	r3, [pc, #584]	@ (80092a0 <UART_SetConfig+0x574>)
 8009056:	0052      	lsls	r2, r2, #1
 8009058:	5ad3      	ldrh	r3, [r2, r3]
 800905a:	613b      	str	r3, [r7, #16]
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	69b8      	ldr	r0, [r7, #24]
 8009066:	69f9      	ldr	r1, [r7, #28]
 8009068:	f7f7 fa56 	bl	8000518 <__aeabi_uldivmod>
 800906c:	0002      	movs	r2, r0
 800906e:	000b      	movs	r3, r1
 8009070:	0e11      	lsrs	r1, r2, #24
 8009072:	021d      	lsls	r5, r3, #8
 8009074:	430d      	orrs	r5, r1
 8009076:	0214      	lsls	r4, r2, #8
 8009078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	085b      	lsrs	r3, r3, #1
 800907e:	60bb      	str	r3, [r7, #8]
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	68b8      	ldr	r0, [r7, #8]
 8009086:	68f9      	ldr	r1, [r7, #12]
 8009088:	1900      	adds	r0, r0, r4
 800908a:	4169      	adcs	r1, r5
 800908c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	603b      	str	r3, [r7, #0]
 8009092:	2300      	movs	r3, #0
 8009094:	607b      	str	r3, [r7, #4]
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f7f7 fa3d 	bl	8000518 <__aeabi_uldivmod>
 800909e:	0002      	movs	r2, r0
 80090a0:	000b      	movs	r3, r1
 80090a2:	0013      	movs	r3, r2
 80090a4:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090a8:	23c0      	movs	r3, #192	@ 0xc0
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d309      	bcc.n	80090c4 <UART_SetConfig+0x398>
 80090b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090b2:	2380      	movs	r3, #128	@ 0x80
 80090b4:	035b      	lsls	r3, r3, #13
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d204      	bcs.n	80090c4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80090ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090c0:	60da      	str	r2, [r3, #12]
 80090c2:	e0d6      	b.n	8009272 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80090c4:	231a      	movs	r3, #26
 80090c6:	2220      	movs	r2, #32
 80090c8:	189b      	adds	r3, r3, r2
 80090ca:	19db      	adds	r3, r3, r7
 80090cc:	2201      	movs	r2, #1
 80090ce:	701a      	strb	r2, [r3, #0]
 80090d0:	e0cf      	b.n	8009272 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d4:	69da      	ldr	r2, [r3, #28]
 80090d6:	2380      	movs	r3, #128	@ 0x80
 80090d8:	021b      	lsls	r3, r3, #8
 80090da:	429a      	cmp	r2, r3
 80090dc:	d000      	beq.n	80090e0 <UART_SetConfig+0x3b4>
 80090de:	e070      	b.n	80091c2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80090e0:	231b      	movs	r3, #27
 80090e2:	2220      	movs	r2, #32
 80090e4:	189b      	adds	r3, r3, r2
 80090e6:	19db      	adds	r3, r3, r7
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	2b08      	cmp	r3, #8
 80090ec:	d015      	beq.n	800911a <UART_SetConfig+0x3ee>
 80090ee:	dc18      	bgt.n	8009122 <UART_SetConfig+0x3f6>
 80090f0:	2b04      	cmp	r3, #4
 80090f2:	d00d      	beq.n	8009110 <UART_SetConfig+0x3e4>
 80090f4:	dc15      	bgt.n	8009122 <UART_SetConfig+0x3f6>
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d002      	beq.n	8009100 <UART_SetConfig+0x3d4>
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d005      	beq.n	800910a <UART_SetConfig+0x3de>
 80090fe:	e010      	b.n	8009122 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009100:	f7ff fb4c 	bl	800879c <HAL_RCC_GetPCLK1Freq>
 8009104:	0003      	movs	r3, r0
 8009106:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009108:	e014      	b.n	8009134 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800910a:	4b66      	ldr	r3, [pc, #408]	@ (80092a4 <UART_SetConfig+0x578>)
 800910c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800910e:	e011      	b.n	8009134 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009110:	f7ff fab8 	bl	8008684 <HAL_RCC_GetSysClockFreq>
 8009114:	0003      	movs	r3, r0
 8009116:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009118:	e00c      	b.n	8009134 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800911a:	2380      	movs	r3, #128	@ 0x80
 800911c:	021b      	lsls	r3, r3, #8
 800911e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009120:	e008      	b.n	8009134 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8009122:	2300      	movs	r3, #0
 8009124:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8009126:	231a      	movs	r3, #26
 8009128:	2220      	movs	r2, #32
 800912a:	189b      	adds	r3, r3, r2
 800912c:	19db      	adds	r3, r3, r7
 800912e:	2201      	movs	r2, #1
 8009130:	701a      	strb	r2, [r3, #0]
        break;
 8009132:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009136:	2b00      	cmp	r3, #0
 8009138:	d100      	bne.n	800913c <UART_SetConfig+0x410>
 800913a:	e09a      	b.n	8009272 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800913c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009140:	4b57      	ldr	r3, [pc, #348]	@ (80092a0 <UART_SetConfig+0x574>)
 8009142:	0052      	lsls	r2, r2, #1
 8009144:	5ad3      	ldrh	r3, [r2, r3]
 8009146:	0019      	movs	r1, r3
 8009148:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800914a:	f7f6 fff7 	bl	800013c <__udivsi3>
 800914e:	0003      	movs	r3, r0
 8009150:	005a      	lsls	r2, r3, #1
 8009152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	085b      	lsrs	r3, r3, #1
 8009158:	18d2      	adds	r2, r2, r3
 800915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	0019      	movs	r1, r3
 8009160:	0010      	movs	r0, r2
 8009162:	f7f6 ffeb 	bl	800013c <__udivsi3>
 8009166:	0003      	movs	r3, r0
 8009168:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800916a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916c:	2b0f      	cmp	r3, #15
 800916e:	d921      	bls.n	80091b4 <UART_SetConfig+0x488>
 8009170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009172:	2380      	movs	r3, #128	@ 0x80
 8009174:	025b      	lsls	r3, r3, #9
 8009176:	429a      	cmp	r2, r3
 8009178:	d21c      	bcs.n	80091b4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	b29a      	uxth	r2, r3
 800917e:	200e      	movs	r0, #14
 8009180:	2420      	movs	r4, #32
 8009182:	1903      	adds	r3, r0, r4
 8009184:	19db      	adds	r3, r3, r7
 8009186:	210f      	movs	r1, #15
 8009188:	438a      	bics	r2, r1
 800918a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800918c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918e:	085b      	lsrs	r3, r3, #1
 8009190:	b29b      	uxth	r3, r3
 8009192:	2207      	movs	r2, #7
 8009194:	4013      	ands	r3, r2
 8009196:	b299      	uxth	r1, r3
 8009198:	1903      	adds	r3, r0, r4
 800919a:	19db      	adds	r3, r3, r7
 800919c:	1902      	adds	r2, r0, r4
 800919e:	19d2      	adds	r2, r2, r7
 80091a0:	8812      	ldrh	r2, [r2, #0]
 80091a2:	430a      	orrs	r2, r1
 80091a4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80091a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	1902      	adds	r2, r0, r4
 80091ac:	19d2      	adds	r2, r2, r7
 80091ae:	8812      	ldrh	r2, [r2, #0]
 80091b0:	60da      	str	r2, [r3, #12]
 80091b2:	e05e      	b.n	8009272 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80091b4:	231a      	movs	r3, #26
 80091b6:	2220      	movs	r2, #32
 80091b8:	189b      	adds	r3, r3, r2
 80091ba:	19db      	adds	r3, r3, r7
 80091bc:	2201      	movs	r2, #1
 80091be:	701a      	strb	r2, [r3, #0]
 80091c0:	e057      	b.n	8009272 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091c2:	231b      	movs	r3, #27
 80091c4:	2220      	movs	r2, #32
 80091c6:	189b      	adds	r3, r3, r2
 80091c8:	19db      	adds	r3, r3, r7
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2b08      	cmp	r3, #8
 80091ce:	d015      	beq.n	80091fc <UART_SetConfig+0x4d0>
 80091d0:	dc18      	bgt.n	8009204 <UART_SetConfig+0x4d8>
 80091d2:	2b04      	cmp	r3, #4
 80091d4:	d00d      	beq.n	80091f2 <UART_SetConfig+0x4c6>
 80091d6:	dc15      	bgt.n	8009204 <UART_SetConfig+0x4d8>
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <UART_SetConfig+0x4b6>
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d005      	beq.n	80091ec <UART_SetConfig+0x4c0>
 80091e0:	e010      	b.n	8009204 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091e2:	f7ff fadb 	bl	800879c <HAL_RCC_GetPCLK1Freq>
 80091e6:	0003      	movs	r3, r0
 80091e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091ea:	e014      	b.n	8009216 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091ec:	4b2d      	ldr	r3, [pc, #180]	@ (80092a4 <UART_SetConfig+0x578>)
 80091ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091f0:	e011      	b.n	8009216 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091f2:	f7ff fa47 	bl	8008684 <HAL_RCC_GetSysClockFreq>
 80091f6:	0003      	movs	r3, r0
 80091f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091fa:	e00c      	b.n	8009216 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091fc:	2380      	movs	r3, #128	@ 0x80
 80091fe:	021b      	lsls	r3, r3, #8
 8009200:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009202:	e008      	b.n	8009216 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8009208:	231a      	movs	r3, #26
 800920a:	2220      	movs	r2, #32
 800920c:	189b      	adds	r3, r3, r2
 800920e:	19db      	adds	r3, r3, r7
 8009210:	2201      	movs	r2, #1
 8009212:	701a      	strb	r2, [r3, #0]
        break;
 8009214:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8009216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009218:	2b00      	cmp	r3, #0
 800921a:	d02a      	beq.n	8009272 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800921c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009220:	4b1f      	ldr	r3, [pc, #124]	@ (80092a0 <UART_SetConfig+0x574>)
 8009222:	0052      	lsls	r2, r2, #1
 8009224:	5ad3      	ldrh	r3, [r2, r3]
 8009226:	0019      	movs	r1, r3
 8009228:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800922a:	f7f6 ff87 	bl	800013c <__udivsi3>
 800922e:	0003      	movs	r3, r0
 8009230:	001a      	movs	r2, r3
 8009232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	085b      	lsrs	r3, r3, #1
 8009238:	18d2      	adds	r2, r2, r3
 800923a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	0019      	movs	r1, r3
 8009240:	0010      	movs	r0, r2
 8009242:	f7f6 ff7b 	bl	800013c <__udivsi3>
 8009246:	0003      	movs	r3, r0
 8009248:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800924a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924c:	2b0f      	cmp	r3, #15
 800924e:	d90a      	bls.n	8009266 <UART_SetConfig+0x53a>
 8009250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009252:	2380      	movs	r3, #128	@ 0x80
 8009254:	025b      	lsls	r3, r3, #9
 8009256:	429a      	cmp	r2, r3
 8009258:	d205      	bcs.n	8009266 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800925a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925c:	b29a      	uxth	r2, r3
 800925e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	60da      	str	r2, [r3, #12]
 8009264:	e005      	b.n	8009272 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8009266:	231a      	movs	r3, #26
 8009268:	2220      	movs	r2, #32
 800926a:	189b      	adds	r3, r3, r2
 800926c:	19db      	adds	r3, r3, r7
 800926e:	2201      	movs	r2, #1
 8009270:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009274:	226a      	movs	r2, #106	@ 0x6a
 8009276:	2101      	movs	r1, #1
 8009278:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800927a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927c:	2268      	movs	r2, #104	@ 0x68
 800927e:	2101      	movs	r1, #1
 8009280:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009284:	2200      	movs	r2, #0
 8009286:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928a:	2200      	movs	r2, #0
 800928c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800928e:	231a      	movs	r3, #26
 8009290:	2220      	movs	r2, #32
 8009292:	189b      	adds	r3, r3, r2
 8009294:	19db      	adds	r3, r3, r7
 8009296:	781b      	ldrb	r3, [r3, #0]
}
 8009298:	0018      	movs	r0, r3
 800929a:	46bd      	mov	sp, r7
 800929c:	b010      	add	sp, #64	@ 0x40
 800929e:	bdb0      	pop	{r4, r5, r7, pc}
 80092a0:	0800cacc 	.word	0x0800cacc
 80092a4:	00f42400 	.word	0x00f42400

080092a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b4:	2208      	movs	r2, #8
 80092b6:	4013      	ands	r3, r2
 80092b8:	d00b      	beq.n	80092d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	4a4a      	ldr	r2, [pc, #296]	@ (80093ec <UART_AdvFeatureConfig+0x144>)
 80092c2:	4013      	ands	r3, r2
 80092c4:	0019      	movs	r1, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d6:	2201      	movs	r2, #1
 80092d8:	4013      	ands	r3, r2
 80092da:	d00b      	beq.n	80092f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	4a43      	ldr	r2, [pc, #268]	@ (80093f0 <UART_AdvFeatureConfig+0x148>)
 80092e4:	4013      	ands	r3, r2
 80092e6:	0019      	movs	r1, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f8:	2202      	movs	r2, #2
 80092fa:	4013      	ands	r3, r2
 80092fc:	d00b      	beq.n	8009316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	4a3b      	ldr	r2, [pc, #236]	@ (80093f4 <UART_AdvFeatureConfig+0x14c>)
 8009306:	4013      	ands	r3, r2
 8009308:	0019      	movs	r1, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800931a:	2204      	movs	r2, #4
 800931c:	4013      	ands	r3, r2
 800931e:	d00b      	beq.n	8009338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	4a34      	ldr	r2, [pc, #208]	@ (80093f8 <UART_AdvFeatureConfig+0x150>)
 8009328:	4013      	ands	r3, r2
 800932a:	0019      	movs	r1, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933c:	2210      	movs	r2, #16
 800933e:	4013      	ands	r3, r2
 8009340:	d00b      	beq.n	800935a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	4a2c      	ldr	r2, [pc, #176]	@ (80093fc <UART_AdvFeatureConfig+0x154>)
 800934a:	4013      	ands	r3, r2
 800934c:	0019      	movs	r1, r3
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935e:	2220      	movs	r2, #32
 8009360:	4013      	ands	r3, r2
 8009362:	d00b      	beq.n	800937c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	4a25      	ldr	r2, [pc, #148]	@ (8009400 <UART_AdvFeatureConfig+0x158>)
 800936c:	4013      	ands	r3, r2
 800936e:	0019      	movs	r1, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	430a      	orrs	r2, r1
 800937a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009380:	2240      	movs	r2, #64	@ 0x40
 8009382:	4013      	ands	r3, r2
 8009384:	d01d      	beq.n	80093c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	4a1d      	ldr	r2, [pc, #116]	@ (8009404 <UART_AdvFeatureConfig+0x15c>)
 800938e:	4013      	ands	r3, r2
 8009390:	0019      	movs	r1, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	430a      	orrs	r2, r1
 800939c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093a2:	2380      	movs	r3, #128	@ 0x80
 80093a4:	035b      	lsls	r3, r3, #13
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d10b      	bne.n	80093c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	4a15      	ldr	r2, [pc, #84]	@ (8009408 <UART_AdvFeatureConfig+0x160>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	0019      	movs	r1, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c6:	2280      	movs	r2, #128	@ 0x80
 80093c8:	4013      	ands	r3, r2
 80093ca:	d00b      	beq.n	80093e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	4a0e      	ldr	r2, [pc, #56]	@ (800940c <UART_AdvFeatureConfig+0x164>)
 80093d4:	4013      	ands	r3, r2
 80093d6:	0019      	movs	r1, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	430a      	orrs	r2, r1
 80093e2:	605a      	str	r2, [r3, #4]
  }
}
 80093e4:	46c0      	nop			@ (mov r8, r8)
 80093e6:	46bd      	mov	sp, r7
 80093e8:	b002      	add	sp, #8
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	ffff7fff 	.word	0xffff7fff
 80093f0:	fffdffff 	.word	0xfffdffff
 80093f4:	fffeffff 	.word	0xfffeffff
 80093f8:	fffbffff 	.word	0xfffbffff
 80093fc:	ffffefff 	.word	0xffffefff
 8009400:	ffffdfff 	.word	0xffffdfff
 8009404:	ffefffff 	.word	0xffefffff
 8009408:	ff9fffff 	.word	0xff9fffff
 800940c:	fff7ffff 	.word	0xfff7ffff

08009410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b092      	sub	sp, #72	@ 0x48
 8009414:	af02      	add	r7, sp, #8
 8009416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2290      	movs	r2, #144	@ 0x90
 800941c:	2100      	movs	r1, #0
 800941e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009420:	f7fd fae4 	bl	80069ec <HAL_GetTick>
 8009424:	0003      	movs	r3, r0
 8009426:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2208      	movs	r2, #8
 8009430:	4013      	ands	r3, r2
 8009432:	2b08      	cmp	r3, #8
 8009434:	d12d      	bne.n	8009492 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009438:	2280      	movs	r2, #128	@ 0x80
 800943a:	0391      	lsls	r1, r2, #14
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	4a47      	ldr	r2, [pc, #284]	@ (800955c <UART_CheckIdleState+0x14c>)
 8009440:	9200      	str	r2, [sp, #0]
 8009442:	2200      	movs	r2, #0
 8009444:	f000 f88e 	bl	8009564 <UART_WaitOnFlagUntilTimeout>
 8009448:	1e03      	subs	r3, r0, #0
 800944a:	d022      	beq.n	8009492 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800944c:	f3ef 8310 	mrs	r3, PRIMASK
 8009450:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009454:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009456:	2301      	movs	r3, #1
 8009458:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800945a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945c:	f383 8810 	msr	PRIMASK, r3
}
 8009460:	46c0      	nop			@ (mov r8, r8)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681a      	ldr	r2, [r3, #0]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2180      	movs	r1, #128	@ 0x80
 800946e:	438a      	bics	r2, r1
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009478:	f383 8810 	msr	PRIMASK, r3
}
 800947c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2288      	movs	r2, #136	@ 0x88
 8009482:	2120      	movs	r1, #32
 8009484:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2284      	movs	r2, #132	@ 0x84
 800948a:	2100      	movs	r1, #0
 800948c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e060      	b.n	8009554 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2204      	movs	r2, #4
 800949a:	4013      	ands	r3, r2
 800949c:	2b04      	cmp	r3, #4
 800949e:	d146      	bne.n	800952e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a2:	2280      	movs	r2, #128	@ 0x80
 80094a4:	03d1      	lsls	r1, r2, #15
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	4a2c      	ldr	r2, [pc, #176]	@ (800955c <UART_CheckIdleState+0x14c>)
 80094aa:	9200      	str	r2, [sp, #0]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f000 f859 	bl	8009564 <UART_WaitOnFlagUntilTimeout>
 80094b2:	1e03      	subs	r3, r0, #0
 80094b4:	d03b      	beq.n	800952e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094b6:	f3ef 8310 	mrs	r3, PRIMASK
 80094ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80094bc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094be:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c0:	2301      	movs	r3, #1
 80094c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	f383 8810 	msr	PRIMASK, r3
}
 80094ca:	46c0      	nop			@ (mov r8, r8)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4922      	ldr	r1, [pc, #136]	@ (8009560 <UART_CheckIdleState+0x150>)
 80094d8:	400a      	ands	r2, r1
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	f383 8810 	msr	PRIMASK, r3
}
 80094e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094e8:	f3ef 8310 	mrs	r3, PRIMASK
 80094ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80094ee:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80094f2:	2301      	movs	r3, #1
 80094f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	f383 8810 	msr	PRIMASK, r3
}
 80094fc:	46c0      	nop			@ (mov r8, r8)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2101      	movs	r1, #1
 800950a:	438a      	bics	r2, r1
 800950c:	609a      	str	r2, [r3, #8]
 800950e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009510:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	f383 8810 	msr	PRIMASK, r3
}
 8009518:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	228c      	movs	r2, #140	@ 0x8c
 800951e:	2120      	movs	r1, #32
 8009520:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2284      	movs	r2, #132	@ 0x84
 8009526:	2100      	movs	r1, #0
 8009528:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e012      	b.n	8009554 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2288      	movs	r2, #136	@ 0x88
 8009532:	2120      	movs	r1, #32
 8009534:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	228c      	movs	r2, #140	@ 0x8c
 800953a:	2120      	movs	r1, #32
 800953c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2284      	movs	r2, #132	@ 0x84
 800954e:	2100      	movs	r1, #0
 8009550:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	0018      	movs	r0, r3
 8009556:	46bd      	mov	sp, r7
 8009558:	b010      	add	sp, #64	@ 0x40
 800955a:	bd80      	pop	{r7, pc}
 800955c:	01ffffff 	.word	0x01ffffff
 8009560:	fffffedf 	.word	0xfffffedf

08009564 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	603b      	str	r3, [r7, #0]
 8009570:	1dfb      	adds	r3, r7, #7
 8009572:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009574:	e051      	b.n	800961a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	3301      	adds	r3, #1
 800957a:	d04e      	beq.n	800961a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800957c:	f7fd fa36 	bl	80069ec <HAL_GetTick>
 8009580:	0002      	movs	r2, r0
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	69ba      	ldr	r2, [r7, #24]
 8009588:	429a      	cmp	r2, r3
 800958a:	d302      	bcc.n	8009592 <UART_WaitOnFlagUntilTimeout+0x2e>
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009592:	2303      	movs	r3, #3
 8009594:	e051      	b.n	800963a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2204      	movs	r2, #4
 800959e:	4013      	ands	r3, r2
 80095a0:	d03b      	beq.n	800961a <UART_WaitOnFlagUntilTimeout+0xb6>
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b80      	cmp	r3, #128	@ 0x80
 80095a6:	d038      	beq.n	800961a <UART_WaitOnFlagUntilTimeout+0xb6>
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2b40      	cmp	r3, #64	@ 0x40
 80095ac:	d035      	beq.n	800961a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	2208      	movs	r2, #8
 80095b6:	4013      	ands	r3, r2
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d111      	bne.n	80095e0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2208      	movs	r2, #8
 80095c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	0018      	movs	r0, r3
 80095c8:	f000 f83c 	bl	8009644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2290      	movs	r2, #144	@ 0x90
 80095d0:	2108      	movs	r1, #8
 80095d2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2284      	movs	r2, #132	@ 0x84
 80095d8:	2100      	movs	r1, #0
 80095da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	e02c      	b.n	800963a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	69da      	ldr	r2, [r3, #28]
 80095e6:	2380      	movs	r3, #128	@ 0x80
 80095e8:	011b      	lsls	r3, r3, #4
 80095ea:	401a      	ands	r2, r3
 80095ec:	2380      	movs	r3, #128	@ 0x80
 80095ee:	011b      	lsls	r3, r3, #4
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d112      	bne.n	800961a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2280      	movs	r2, #128	@ 0x80
 80095fa:	0112      	lsls	r2, r2, #4
 80095fc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	0018      	movs	r0, r3
 8009602:	f000 f81f 	bl	8009644 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2290      	movs	r2, #144	@ 0x90
 800960a:	2120      	movs	r1, #32
 800960c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2284      	movs	r2, #132	@ 0x84
 8009612:	2100      	movs	r1, #0
 8009614:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e00f      	b.n	800963a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	69db      	ldr	r3, [r3, #28]
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	4013      	ands	r3, r2
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	425a      	negs	r2, r3
 800962a:	4153      	adcs	r3, r2
 800962c:	b2db      	uxtb	r3, r3
 800962e:	001a      	movs	r2, r3
 8009630:	1dfb      	adds	r3, r7, #7
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	429a      	cmp	r2, r3
 8009636:	d09e      	beq.n	8009576 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	0018      	movs	r0, r3
 800963c:	46bd      	mov	sp, r7
 800963e:	b004      	add	sp, #16
 8009640:	bd80      	pop	{r7, pc}
	...

08009644 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b08e      	sub	sp, #56	@ 0x38
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800964c:	f3ef 8310 	mrs	r3, PRIMASK
 8009650:	617b      	str	r3, [r7, #20]
  return(result);
 8009652:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009654:	637b      	str	r3, [r7, #52]	@ 0x34
 8009656:	2301      	movs	r3, #1
 8009658:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	f383 8810 	msr	PRIMASK, r3
}
 8009660:	46c0      	nop			@ (mov r8, r8)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4926      	ldr	r1, [pc, #152]	@ (8009708 <UART_EndRxTransfer+0xc4>)
 800966e:	400a      	ands	r2, r1
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009674:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	f383 8810 	msr	PRIMASK, r3
}
 800967c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800967e:	f3ef 8310 	mrs	r3, PRIMASK
 8009682:	623b      	str	r3, [r7, #32]
  return(result);
 8009684:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009686:	633b      	str	r3, [r7, #48]	@ 0x30
 8009688:	2301      	movs	r3, #1
 800968a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800968c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968e:	f383 8810 	msr	PRIMASK, r3
}
 8009692:	46c0      	nop			@ (mov r8, r8)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689a      	ldr	r2, [r3, #8]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	491b      	ldr	r1, [pc, #108]	@ (800970c <UART_EndRxTransfer+0xc8>)
 80096a0:	400a      	ands	r2, r1
 80096a2:	609a      	str	r2, [r3, #8]
 80096a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096aa:	f383 8810 	msr	PRIMASK, r3
}
 80096ae:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d118      	bne.n	80096ea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096b8:	f3ef 8310 	mrs	r3, PRIMASK
 80096bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80096be:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096c2:	2301      	movs	r3, #1
 80096c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f383 8810 	msr	PRIMASK, r3
}
 80096cc:	46c0      	nop			@ (mov r8, r8)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2110      	movs	r1, #16
 80096da:	438a      	bics	r2, r1
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	f383 8810 	msr	PRIMASK, r3
}
 80096e8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	228c      	movs	r2, #140	@ 0x8c
 80096ee:	2120      	movs	r1, #32
 80096f0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80096fe:	46c0      	nop			@ (mov r8, r8)
 8009700:	46bd      	mov	sp, r7
 8009702:	b00e      	add	sp, #56	@ 0x38
 8009704:	bd80      	pop	{r7, pc}
 8009706:	46c0      	nop			@ (mov r8, r8)
 8009708:	fffffedf 	.word	0xfffffedf
 800970c:	effffffe 	.word	0xeffffffe

08009710 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2284      	movs	r2, #132	@ 0x84
 800971c:	5c9b      	ldrb	r3, [r3, r2]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d101      	bne.n	8009726 <HAL_UARTEx_DisableFifoMode+0x16>
 8009722:	2302      	movs	r3, #2
 8009724:	e027      	b.n	8009776 <HAL_UARTEx_DisableFifoMode+0x66>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2284      	movs	r2, #132	@ 0x84
 800972a:	2101      	movs	r1, #1
 800972c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2288      	movs	r2, #136	@ 0x88
 8009732:	2124      	movs	r1, #36	@ 0x24
 8009734:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2101      	movs	r1, #1
 800974a:	438a      	bics	r2, r1
 800974c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	4a0b      	ldr	r2, [pc, #44]	@ (8009780 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009752:	4013      	ands	r3, r2
 8009754:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68fa      	ldr	r2, [r7, #12]
 8009762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2288      	movs	r2, #136	@ 0x88
 8009768:	2120      	movs	r1, #32
 800976a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2284      	movs	r2, #132	@ 0x84
 8009770:	2100      	movs	r1, #0
 8009772:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	0018      	movs	r0, r3
 8009778:	46bd      	mov	sp, r7
 800977a:	b004      	add	sp, #16
 800977c:	bd80      	pop	{r7, pc}
 800977e:	46c0      	nop			@ (mov r8, r8)
 8009780:	dfffffff 	.word	0xdfffffff

08009784 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2284      	movs	r2, #132	@ 0x84
 8009792:	5c9b      	ldrb	r3, [r3, r2]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d101      	bne.n	800979c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009798:	2302      	movs	r3, #2
 800979a:	e02e      	b.n	80097fa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2284      	movs	r2, #132	@ 0x84
 80097a0:	2101      	movs	r1, #1
 80097a2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2288      	movs	r2, #136	@ 0x88
 80097a8:	2124      	movs	r1, #36	@ 0x24
 80097aa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2101      	movs	r1, #1
 80097c0:	438a      	bics	r2, r1
 80097c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	00db      	lsls	r3, r3, #3
 80097cc:	08d9      	lsrs	r1, r3, #3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	430a      	orrs	r2, r1
 80097d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	0018      	movs	r0, r3
 80097dc:	f000 f854 	bl	8009888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2288      	movs	r2, #136	@ 0x88
 80097ec:	2120      	movs	r1, #32
 80097ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2284      	movs	r2, #132	@ 0x84
 80097f4:	2100      	movs	r1, #0
 80097f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	0018      	movs	r0, r3
 80097fc:	46bd      	mov	sp, r7
 80097fe:	b004      	add	sp, #16
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2284      	movs	r2, #132	@ 0x84
 8009812:	5c9b      	ldrb	r3, [r3, r2]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d101      	bne.n	800981c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009818:	2302      	movs	r3, #2
 800981a:	e02f      	b.n	800987c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2284      	movs	r2, #132	@ 0x84
 8009820:	2101      	movs	r1, #1
 8009822:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2288      	movs	r2, #136	@ 0x88
 8009828:	2124      	movs	r1, #36	@ 0x24
 800982a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2101      	movs	r1, #1
 8009840:	438a      	bics	r2, r1
 8009842:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	4a0e      	ldr	r2, [pc, #56]	@ (8009884 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800984c:	4013      	ands	r3, r2
 800984e:	0019      	movs	r1, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	0018      	movs	r0, r3
 800985e:	f000 f813 	bl	8009888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2288      	movs	r2, #136	@ 0x88
 800986e:	2120      	movs	r1, #32
 8009870:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2284      	movs	r2, #132	@ 0x84
 8009876:	2100      	movs	r1, #0
 8009878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	0018      	movs	r0, r3
 800987e:	46bd      	mov	sp, r7
 8009880:	b004      	add	sp, #16
 8009882:	bd80      	pop	{r7, pc}
 8009884:	f1ffffff 	.word	0xf1ffffff

08009888 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009894:	2b00      	cmp	r3, #0
 8009896:	d108      	bne.n	80098aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	226a      	movs	r2, #106	@ 0x6a
 800989c:	2101      	movs	r1, #1
 800989e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2268      	movs	r2, #104	@ 0x68
 80098a4:	2101      	movs	r1, #1
 80098a6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098a8:	e043      	b.n	8009932 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098aa:	260f      	movs	r6, #15
 80098ac:	19bb      	adds	r3, r7, r6
 80098ae:	2208      	movs	r2, #8
 80098b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098b2:	200e      	movs	r0, #14
 80098b4:	183b      	adds	r3, r7, r0
 80098b6:	2208      	movs	r2, #8
 80098b8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	0e5b      	lsrs	r3, r3, #25
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	240d      	movs	r4, #13
 80098c6:	193b      	adds	r3, r7, r4
 80098c8:	2107      	movs	r1, #7
 80098ca:	400a      	ands	r2, r1
 80098cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	0f5b      	lsrs	r3, r3, #29
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	250c      	movs	r5, #12
 80098da:	197b      	adds	r3, r7, r5
 80098dc:	2107      	movs	r1, #7
 80098de:	400a      	ands	r2, r1
 80098e0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098e2:	183b      	adds	r3, r7, r0
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	197a      	adds	r2, r7, r5
 80098e8:	7812      	ldrb	r2, [r2, #0]
 80098ea:	4914      	ldr	r1, [pc, #80]	@ (800993c <UARTEx_SetNbDataToProcess+0xb4>)
 80098ec:	5c8a      	ldrb	r2, [r1, r2]
 80098ee:	435a      	muls	r2, r3
 80098f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80098f2:	197b      	adds	r3, r7, r5
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	4a12      	ldr	r2, [pc, #72]	@ (8009940 <UARTEx_SetNbDataToProcess+0xb8>)
 80098f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098fa:	0019      	movs	r1, r3
 80098fc:	f7f6 fca8 	bl	8000250 <__divsi3>
 8009900:	0003      	movs	r3, r0
 8009902:	b299      	uxth	r1, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	226a      	movs	r2, #106	@ 0x6a
 8009908:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800990a:	19bb      	adds	r3, r7, r6
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	193a      	adds	r2, r7, r4
 8009910:	7812      	ldrb	r2, [r2, #0]
 8009912:	490a      	ldr	r1, [pc, #40]	@ (800993c <UARTEx_SetNbDataToProcess+0xb4>)
 8009914:	5c8a      	ldrb	r2, [r1, r2]
 8009916:	435a      	muls	r2, r3
 8009918:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800991a:	193b      	adds	r3, r7, r4
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	4a08      	ldr	r2, [pc, #32]	@ (8009940 <UARTEx_SetNbDataToProcess+0xb8>)
 8009920:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009922:	0019      	movs	r1, r3
 8009924:	f7f6 fc94 	bl	8000250 <__divsi3>
 8009928:	0003      	movs	r3, r0
 800992a:	b299      	uxth	r1, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2268      	movs	r2, #104	@ 0x68
 8009930:	5299      	strh	r1, [r3, r2]
}
 8009932:	46c0      	nop			@ (mov r8, r8)
 8009934:	46bd      	mov	sp, r7
 8009936:	b005      	add	sp, #20
 8009938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800993a:	46c0      	nop			@ (mov r8, r8)
 800993c:	0800cae4 	.word	0x0800cae4
 8009940:	0800caec 	.word	0x0800caec

08009944 <__cvt>:
 8009944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009946:	001f      	movs	r7, r3
 8009948:	2300      	movs	r3, #0
 800994a:	0016      	movs	r6, r2
 800994c:	b08b      	sub	sp, #44	@ 0x2c
 800994e:	429f      	cmp	r7, r3
 8009950:	da04      	bge.n	800995c <__cvt+0x18>
 8009952:	2180      	movs	r1, #128	@ 0x80
 8009954:	0609      	lsls	r1, r1, #24
 8009956:	187b      	adds	r3, r7, r1
 8009958:	001f      	movs	r7, r3
 800995a:	232d      	movs	r3, #45	@ 0x2d
 800995c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800995e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009960:	7013      	strb	r3, [r2, #0]
 8009962:	2320      	movs	r3, #32
 8009964:	2203      	movs	r2, #3
 8009966:	439d      	bics	r5, r3
 8009968:	2d46      	cmp	r5, #70	@ 0x46
 800996a:	d007      	beq.n	800997c <__cvt+0x38>
 800996c:	002b      	movs	r3, r5
 800996e:	3b45      	subs	r3, #69	@ 0x45
 8009970:	4259      	negs	r1, r3
 8009972:	414b      	adcs	r3, r1
 8009974:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8009976:	3a01      	subs	r2, #1
 8009978:	18cb      	adds	r3, r1, r3
 800997a:	9310      	str	r3, [sp, #64]	@ 0x40
 800997c:	ab09      	add	r3, sp, #36	@ 0x24
 800997e:	9304      	str	r3, [sp, #16]
 8009980:	ab08      	add	r3, sp, #32
 8009982:	9303      	str	r3, [sp, #12]
 8009984:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009986:	9200      	str	r2, [sp, #0]
 8009988:	9302      	str	r3, [sp, #8]
 800998a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800998c:	0032      	movs	r2, r6
 800998e:	9301      	str	r3, [sp, #4]
 8009990:	003b      	movs	r3, r7
 8009992:	f000 fe05 	bl	800a5a0 <_dtoa_r>
 8009996:	0004      	movs	r4, r0
 8009998:	2d47      	cmp	r5, #71	@ 0x47
 800999a:	d11b      	bne.n	80099d4 <__cvt+0x90>
 800999c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800999e:	07db      	lsls	r3, r3, #31
 80099a0:	d511      	bpl.n	80099c6 <__cvt+0x82>
 80099a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099a4:	18c3      	adds	r3, r0, r3
 80099a6:	9307      	str	r3, [sp, #28]
 80099a8:	2200      	movs	r2, #0
 80099aa:	2300      	movs	r3, #0
 80099ac:	0030      	movs	r0, r6
 80099ae:	0039      	movs	r1, r7
 80099b0:	f7f6 fd4a 	bl	8000448 <__aeabi_dcmpeq>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d001      	beq.n	80099bc <__cvt+0x78>
 80099b8:	9b07      	ldr	r3, [sp, #28]
 80099ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80099bc:	2230      	movs	r2, #48	@ 0x30
 80099be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c0:	9907      	ldr	r1, [sp, #28]
 80099c2:	428b      	cmp	r3, r1
 80099c4:	d320      	bcc.n	8009a08 <__cvt+0xc4>
 80099c6:	0020      	movs	r0, r4
 80099c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80099cc:	1b1b      	subs	r3, r3, r4
 80099ce:	6013      	str	r3, [r2, #0]
 80099d0:	b00b      	add	sp, #44	@ 0x2c
 80099d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099d6:	18c3      	adds	r3, r0, r3
 80099d8:	9307      	str	r3, [sp, #28]
 80099da:	2d46      	cmp	r5, #70	@ 0x46
 80099dc:	d1e4      	bne.n	80099a8 <__cvt+0x64>
 80099de:	7803      	ldrb	r3, [r0, #0]
 80099e0:	2b30      	cmp	r3, #48	@ 0x30
 80099e2:	d10c      	bne.n	80099fe <__cvt+0xba>
 80099e4:	2200      	movs	r2, #0
 80099e6:	2300      	movs	r3, #0
 80099e8:	0030      	movs	r0, r6
 80099ea:	0039      	movs	r1, r7
 80099ec:	f7f6 fd2c 	bl	8000448 <__aeabi_dcmpeq>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d104      	bne.n	80099fe <__cvt+0xba>
 80099f4:	2301      	movs	r3, #1
 80099f6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80099f8:	1a9b      	subs	r3, r3, r2
 80099fa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a00:	9a07      	ldr	r2, [sp, #28]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	18d3      	adds	r3, r2, r3
 8009a06:	e7ce      	b.n	80099a6 <__cvt+0x62>
 8009a08:	1c59      	adds	r1, r3, #1
 8009a0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a0c:	701a      	strb	r2, [r3, #0]
 8009a0e:	e7d6      	b.n	80099be <__cvt+0x7a>

08009a10 <__exponent>:
 8009a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a12:	232b      	movs	r3, #43	@ 0x2b
 8009a14:	b085      	sub	sp, #20
 8009a16:	0005      	movs	r5, r0
 8009a18:	1e0c      	subs	r4, r1, #0
 8009a1a:	7002      	strb	r2, [r0, #0]
 8009a1c:	da01      	bge.n	8009a22 <__exponent+0x12>
 8009a1e:	424c      	negs	r4, r1
 8009a20:	3302      	adds	r3, #2
 8009a22:	706b      	strb	r3, [r5, #1]
 8009a24:	2c09      	cmp	r4, #9
 8009a26:	dd2c      	ble.n	8009a82 <__exponent+0x72>
 8009a28:	ab02      	add	r3, sp, #8
 8009a2a:	1dde      	adds	r6, r3, #7
 8009a2c:	0020      	movs	r0, r4
 8009a2e:	210a      	movs	r1, #10
 8009a30:	f7f6 fcf4 	bl	800041c <__aeabi_idivmod>
 8009a34:	0037      	movs	r7, r6
 8009a36:	3130      	adds	r1, #48	@ 0x30
 8009a38:	3e01      	subs	r6, #1
 8009a3a:	0020      	movs	r0, r4
 8009a3c:	7031      	strb	r1, [r6, #0]
 8009a3e:	210a      	movs	r1, #10
 8009a40:	9401      	str	r4, [sp, #4]
 8009a42:	f7f6 fc05 	bl	8000250 <__divsi3>
 8009a46:	9b01      	ldr	r3, [sp, #4]
 8009a48:	0004      	movs	r4, r0
 8009a4a:	2b63      	cmp	r3, #99	@ 0x63
 8009a4c:	dcee      	bgt.n	8009a2c <__exponent+0x1c>
 8009a4e:	1eba      	subs	r2, r7, #2
 8009a50:	1ca8      	adds	r0, r5, #2
 8009a52:	0001      	movs	r1, r0
 8009a54:	0013      	movs	r3, r2
 8009a56:	3430      	adds	r4, #48	@ 0x30
 8009a58:	7014      	strb	r4, [r2, #0]
 8009a5a:	ac02      	add	r4, sp, #8
 8009a5c:	3407      	adds	r4, #7
 8009a5e:	429c      	cmp	r4, r3
 8009a60:	d80a      	bhi.n	8009a78 <__exponent+0x68>
 8009a62:	2300      	movs	r3, #0
 8009a64:	4294      	cmp	r4, r2
 8009a66:	d303      	bcc.n	8009a70 <__exponent+0x60>
 8009a68:	3309      	adds	r3, #9
 8009a6a:	aa02      	add	r2, sp, #8
 8009a6c:	189b      	adds	r3, r3, r2
 8009a6e:	1bdb      	subs	r3, r3, r7
 8009a70:	18c0      	adds	r0, r0, r3
 8009a72:	1b40      	subs	r0, r0, r5
 8009a74:	b005      	add	sp, #20
 8009a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a78:	781c      	ldrb	r4, [r3, #0]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	700c      	strb	r4, [r1, #0]
 8009a7e:	3101      	adds	r1, #1
 8009a80:	e7eb      	b.n	8009a5a <__exponent+0x4a>
 8009a82:	2330      	movs	r3, #48	@ 0x30
 8009a84:	18e4      	adds	r4, r4, r3
 8009a86:	70ab      	strb	r3, [r5, #2]
 8009a88:	1d28      	adds	r0, r5, #4
 8009a8a:	70ec      	strb	r4, [r5, #3]
 8009a8c:	e7f1      	b.n	8009a72 <__exponent+0x62>
	...

08009a90 <_printf_float>:
 8009a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a92:	b097      	sub	sp, #92	@ 0x5c
 8009a94:	000d      	movs	r5, r1
 8009a96:	920a      	str	r2, [sp, #40]	@ 0x28
 8009a98:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8009a9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a9c:	9009      	str	r0, [sp, #36]	@ 0x24
 8009a9e:	f000 fce1 	bl	800a464 <_localeconv_r>
 8009aa2:	6803      	ldr	r3, [r0, #0]
 8009aa4:	0018      	movs	r0, r3
 8009aa6:	930d      	str	r3, [sp, #52]	@ 0x34
 8009aa8:	f7f6 fb2c 	bl	8000104 <strlen>
 8009aac:	2300      	movs	r3, #0
 8009aae:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009ab0:	9314      	str	r3, [sp, #80]	@ 0x50
 8009ab2:	7e2b      	ldrb	r3, [r5, #24]
 8009ab4:	2207      	movs	r2, #7
 8009ab6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ab8:	682b      	ldr	r3, [r5, #0]
 8009aba:	930e      	str	r3, [sp, #56]	@ 0x38
 8009abc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	05c9      	lsls	r1, r1, #23
 8009ac2:	d545      	bpl.n	8009b50 <_printf_float+0xc0>
 8009ac4:	189b      	adds	r3, r3, r2
 8009ac6:	4393      	bics	r3, r2
 8009ac8:	001a      	movs	r2, r3
 8009aca:	3208      	adds	r2, #8
 8009acc:	6022      	str	r2, [r4, #0]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	681e      	ldr	r6, [r3, #0]
 8009ad2:	685f      	ldr	r7, [r3, #4]
 8009ad4:	007b      	lsls	r3, r7, #1
 8009ad6:	085b      	lsrs	r3, r3, #1
 8009ad8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009ada:	9610      	str	r6, [sp, #64]	@ 0x40
 8009adc:	64ae      	str	r6, [r5, #72]	@ 0x48
 8009ade:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8009ae0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009ae2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009ae4:	4ba7      	ldr	r3, [pc, #668]	@ (8009d84 <_printf_float+0x2f4>)
 8009ae6:	4252      	negs	r2, r2
 8009ae8:	f7f9 fd3e 	bl	8003568 <__aeabi_dcmpun>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d131      	bne.n	8009b54 <_printf_float+0xc4>
 8009af0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009af2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009af4:	2201      	movs	r2, #1
 8009af6:	4ba3      	ldr	r3, [pc, #652]	@ (8009d84 <_printf_float+0x2f4>)
 8009af8:	4252      	negs	r2, r2
 8009afa:	f7f6 fcb5 	bl	8000468 <__aeabi_dcmple>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d128      	bne.n	8009b54 <_printf_float+0xc4>
 8009b02:	2200      	movs	r2, #0
 8009b04:	2300      	movs	r3, #0
 8009b06:	0030      	movs	r0, r6
 8009b08:	0039      	movs	r1, r7
 8009b0a:	f7f6 fca3 	bl	8000454 <__aeabi_dcmplt>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d003      	beq.n	8009b1a <_printf_float+0x8a>
 8009b12:	002b      	movs	r3, r5
 8009b14:	222d      	movs	r2, #45	@ 0x2d
 8009b16:	3343      	adds	r3, #67	@ 0x43
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b1c:	4f9a      	ldr	r7, [pc, #616]	@ (8009d88 <_printf_float+0x2f8>)
 8009b1e:	2b47      	cmp	r3, #71	@ 0x47
 8009b20:	d800      	bhi.n	8009b24 <_printf_float+0x94>
 8009b22:	4f9a      	ldr	r7, [pc, #616]	@ (8009d8c <_printf_float+0x2fc>)
 8009b24:	2303      	movs	r3, #3
 8009b26:	2400      	movs	r4, #0
 8009b28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b2a:	612b      	str	r3, [r5, #16]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	439a      	bics	r2, r3
 8009b30:	602a      	str	r2, [r5, #0]
 8009b32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b34:	0029      	movs	r1, r5
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b3c:	aa15      	add	r2, sp, #84	@ 0x54
 8009b3e:	f000 f9e5 	bl	8009f0c <_printf_common>
 8009b42:	3001      	adds	r0, #1
 8009b44:	d000      	beq.n	8009b48 <_printf_float+0xb8>
 8009b46:	e09e      	b.n	8009c86 <_printf_float+0x1f6>
 8009b48:	2001      	movs	r0, #1
 8009b4a:	4240      	negs	r0, r0
 8009b4c:	b017      	add	sp, #92	@ 0x5c
 8009b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b50:	3307      	adds	r3, #7
 8009b52:	e7b8      	b.n	8009ac6 <_printf_float+0x36>
 8009b54:	0032      	movs	r2, r6
 8009b56:	003b      	movs	r3, r7
 8009b58:	0030      	movs	r0, r6
 8009b5a:	0039      	movs	r1, r7
 8009b5c:	f7f9 fd04 	bl	8003568 <__aeabi_dcmpun>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d00b      	beq.n	8009b7c <_printf_float+0xec>
 8009b64:	2f00      	cmp	r7, #0
 8009b66:	da03      	bge.n	8009b70 <_printf_float+0xe0>
 8009b68:	002b      	movs	r3, r5
 8009b6a:	222d      	movs	r2, #45	@ 0x2d
 8009b6c:	3343      	adds	r3, #67	@ 0x43
 8009b6e:	701a      	strb	r2, [r3, #0]
 8009b70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b72:	4f87      	ldr	r7, [pc, #540]	@ (8009d90 <_printf_float+0x300>)
 8009b74:	2b47      	cmp	r3, #71	@ 0x47
 8009b76:	d8d5      	bhi.n	8009b24 <_printf_float+0x94>
 8009b78:	4f86      	ldr	r7, [pc, #536]	@ (8009d94 <_printf_float+0x304>)
 8009b7a:	e7d3      	b.n	8009b24 <_printf_float+0x94>
 8009b7c:	2220      	movs	r2, #32
 8009b7e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8009b80:	686b      	ldr	r3, [r5, #4]
 8009b82:	4394      	bics	r4, r2
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	d146      	bne.n	8009c16 <_printf_float+0x186>
 8009b88:	3307      	adds	r3, #7
 8009b8a:	606b      	str	r3, [r5, #4]
 8009b8c:	2380      	movs	r3, #128	@ 0x80
 8009b8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b90:	00db      	lsls	r3, r3, #3
 8009b92:	4313      	orrs	r3, r2
 8009b94:	2200      	movs	r2, #0
 8009b96:	602b      	str	r3, [r5, #0]
 8009b98:	9206      	str	r2, [sp, #24]
 8009b9a:	aa14      	add	r2, sp, #80	@ 0x50
 8009b9c:	9205      	str	r2, [sp, #20]
 8009b9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009ba0:	a90a      	add	r1, sp, #40	@ 0x28
 8009ba2:	9204      	str	r2, [sp, #16]
 8009ba4:	aa13      	add	r2, sp, #76	@ 0x4c
 8009ba6:	9203      	str	r2, [sp, #12]
 8009ba8:	2223      	movs	r2, #35	@ 0x23
 8009baa:	1852      	adds	r2, r2, r1
 8009bac:	9202      	str	r2, [sp, #8]
 8009bae:	9301      	str	r3, [sp, #4]
 8009bb0:	686b      	ldr	r3, [r5, #4]
 8009bb2:	0032      	movs	r2, r6
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bb8:	003b      	movs	r3, r7
 8009bba:	f7ff fec3 	bl	8009944 <__cvt>
 8009bbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009bc0:	0007      	movs	r7, r0
 8009bc2:	2c47      	cmp	r4, #71	@ 0x47
 8009bc4:	d12d      	bne.n	8009c22 <_printf_float+0x192>
 8009bc6:	1cd3      	adds	r3, r2, #3
 8009bc8:	db02      	blt.n	8009bd0 <_printf_float+0x140>
 8009bca:	686b      	ldr	r3, [r5, #4]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	dd47      	ble.n	8009c60 <_printf_float+0x1d0>
 8009bd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bd2:	3b02      	subs	r3, #2
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	930c      	str	r3, [sp, #48]	@ 0x30
 8009bd8:	0028      	movs	r0, r5
 8009bda:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009bdc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009bde:	3901      	subs	r1, #1
 8009be0:	3050      	adds	r0, #80	@ 0x50
 8009be2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009be4:	f7ff ff14 	bl	8009a10 <__exponent>
 8009be8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009bea:	0004      	movs	r4, r0
 8009bec:	1813      	adds	r3, r2, r0
 8009bee:	612b      	str	r3, [r5, #16]
 8009bf0:	2a01      	cmp	r2, #1
 8009bf2:	dc02      	bgt.n	8009bfa <_printf_float+0x16a>
 8009bf4:	682a      	ldr	r2, [r5, #0]
 8009bf6:	07d2      	lsls	r2, r2, #31
 8009bf8:	d501      	bpl.n	8009bfe <_printf_float+0x16e>
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	612b      	str	r3, [r5, #16]
 8009bfe:	2323      	movs	r3, #35	@ 0x23
 8009c00:	aa0a      	add	r2, sp, #40	@ 0x28
 8009c02:	189b      	adds	r3, r3, r2
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d100      	bne.n	8009c0c <_printf_float+0x17c>
 8009c0a:	e792      	b.n	8009b32 <_printf_float+0xa2>
 8009c0c:	002b      	movs	r3, r5
 8009c0e:	222d      	movs	r2, #45	@ 0x2d
 8009c10:	3343      	adds	r3, #67	@ 0x43
 8009c12:	701a      	strb	r2, [r3, #0]
 8009c14:	e78d      	b.n	8009b32 <_printf_float+0xa2>
 8009c16:	2c47      	cmp	r4, #71	@ 0x47
 8009c18:	d1b8      	bne.n	8009b8c <_printf_float+0xfc>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1b6      	bne.n	8009b8c <_printf_float+0xfc>
 8009c1e:	3301      	adds	r3, #1
 8009c20:	e7b3      	b.n	8009b8a <_printf_float+0xfa>
 8009c22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c24:	2b65      	cmp	r3, #101	@ 0x65
 8009c26:	d9d7      	bls.n	8009bd8 <_printf_float+0x148>
 8009c28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c2a:	2b66      	cmp	r3, #102	@ 0x66
 8009c2c:	d11a      	bne.n	8009c64 <_printf_float+0x1d4>
 8009c2e:	686b      	ldr	r3, [r5, #4]
 8009c30:	2a00      	cmp	r2, #0
 8009c32:	dd09      	ble.n	8009c48 <_printf_float+0x1b8>
 8009c34:	612a      	str	r2, [r5, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d102      	bne.n	8009c40 <_printf_float+0x1b0>
 8009c3a:	6829      	ldr	r1, [r5, #0]
 8009c3c:	07c9      	lsls	r1, r1, #31
 8009c3e:	d50b      	bpl.n	8009c58 <_printf_float+0x1c8>
 8009c40:	3301      	adds	r3, #1
 8009c42:	189b      	adds	r3, r3, r2
 8009c44:	612b      	str	r3, [r5, #16]
 8009c46:	e007      	b.n	8009c58 <_printf_float+0x1c8>
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d103      	bne.n	8009c54 <_printf_float+0x1c4>
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	6829      	ldr	r1, [r5, #0]
 8009c50:	4211      	tst	r1, r2
 8009c52:	d000      	beq.n	8009c56 <_printf_float+0x1c6>
 8009c54:	1c9a      	adds	r2, r3, #2
 8009c56:	612a      	str	r2, [r5, #16]
 8009c58:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c5a:	2400      	movs	r4, #0
 8009c5c:	65ab      	str	r3, [r5, #88]	@ 0x58
 8009c5e:	e7ce      	b.n	8009bfe <_printf_float+0x16e>
 8009c60:	2367      	movs	r3, #103	@ 0x67
 8009c62:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c64:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8009c66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c68:	4299      	cmp	r1, r3
 8009c6a:	db06      	blt.n	8009c7a <_printf_float+0x1ea>
 8009c6c:	682b      	ldr	r3, [r5, #0]
 8009c6e:	6129      	str	r1, [r5, #16]
 8009c70:	07db      	lsls	r3, r3, #31
 8009c72:	d5f1      	bpl.n	8009c58 <_printf_float+0x1c8>
 8009c74:	3101      	adds	r1, #1
 8009c76:	6129      	str	r1, [r5, #16]
 8009c78:	e7ee      	b.n	8009c58 <_printf_float+0x1c8>
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	2900      	cmp	r1, #0
 8009c7e:	dce0      	bgt.n	8009c42 <_printf_float+0x1b2>
 8009c80:	1892      	adds	r2, r2, r2
 8009c82:	1a52      	subs	r2, r2, r1
 8009c84:	e7dd      	b.n	8009c42 <_printf_float+0x1b2>
 8009c86:	682a      	ldr	r2, [r5, #0]
 8009c88:	0553      	lsls	r3, r2, #21
 8009c8a:	d408      	bmi.n	8009c9e <_printf_float+0x20e>
 8009c8c:	692b      	ldr	r3, [r5, #16]
 8009c8e:	003a      	movs	r2, r7
 8009c90:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c94:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009c96:	47a0      	blx	r4
 8009c98:	3001      	adds	r0, #1
 8009c9a:	d129      	bne.n	8009cf0 <_printf_float+0x260>
 8009c9c:	e754      	b.n	8009b48 <_printf_float+0xb8>
 8009c9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ca0:	2b65      	cmp	r3, #101	@ 0x65
 8009ca2:	d800      	bhi.n	8009ca6 <_printf_float+0x216>
 8009ca4:	e0db      	b.n	8009e5e <_printf_float+0x3ce>
 8009ca6:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009ca8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009caa:	2200      	movs	r2, #0
 8009cac:	2300      	movs	r3, #0
 8009cae:	f7f6 fbcb 	bl	8000448 <__aeabi_dcmpeq>
 8009cb2:	2800      	cmp	r0, #0
 8009cb4:	d033      	beq.n	8009d1e <_printf_float+0x28e>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	4a37      	ldr	r2, [pc, #220]	@ (8009d98 <_printf_float+0x308>)
 8009cba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009cbc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009cbe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009cc0:	47a0      	blx	r4
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	d100      	bne.n	8009cc8 <_printf_float+0x238>
 8009cc6:	e73f      	b.n	8009b48 <_printf_float+0xb8>
 8009cc8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009cca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ccc:	42b3      	cmp	r3, r6
 8009cce:	db02      	blt.n	8009cd6 <_printf_float+0x246>
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	07db      	lsls	r3, r3, #31
 8009cd4:	d50c      	bpl.n	8009cf0 <_printf_float+0x260>
 8009cd6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009cd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009cdc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ce0:	47a0      	blx	r4
 8009ce2:	2400      	movs	r4, #0
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d100      	bne.n	8009cea <_printf_float+0x25a>
 8009ce8:	e72e      	b.n	8009b48 <_printf_float+0xb8>
 8009cea:	1e73      	subs	r3, r6, #1
 8009cec:	42a3      	cmp	r3, r4
 8009cee:	dc0a      	bgt.n	8009d06 <_printf_float+0x276>
 8009cf0:	682b      	ldr	r3, [r5, #0]
 8009cf2:	079b      	lsls	r3, r3, #30
 8009cf4:	d500      	bpl.n	8009cf8 <_printf_float+0x268>
 8009cf6:	e106      	b.n	8009f06 <_printf_float+0x476>
 8009cf8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009cfa:	68e8      	ldr	r0, [r5, #12]
 8009cfc:	4298      	cmp	r0, r3
 8009cfe:	db00      	blt.n	8009d02 <_printf_float+0x272>
 8009d00:	e724      	b.n	8009b4c <_printf_float+0xbc>
 8009d02:	0018      	movs	r0, r3
 8009d04:	e722      	b.n	8009b4c <_printf_float+0xbc>
 8009d06:	002a      	movs	r2, r5
 8009d08:	2301      	movs	r3, #1
 8009d0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d0e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009d10:	321a      	adds	r2, #26
 8009d12:	47b8      	blx	r7
 8009d14:	3001      	adds	r0, #1
 8009d16:	d100      	bne.n	8009d1a <_printf_float+0x28a>
 8009d18:	e716      	b.n	8009b48 <_printf_float+0xb8>
 8009d1a:	3401      	adds	r4, #1
 8009d1c:	e7e5      	b.n	8009cea <_printf_float+0x25a>
 8009d1e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	dc3b      	bgt.n	8009d9c <_printf_float+0x30c>
 8009d24:	2301      	movs	r3, #1
 8009d26:	4a1c      	ldr	r2, [pc, #112]	@ (8009d98 <_printf_float+0x308>)
 8009d28:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d2c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009d2e:	47a0      	blx	r4
 8009d30:	3001      	adds	r0, #1
 8009d32:	d100      	bne.n	8009d36 <_printf_float+0x2a6>
 8009d34:	e708      	b.n	8009b48 <_printf_float+0xb8>
 8009d36:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8009d38:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d3a:	4333      	orrs	r3, r6
 8009d3c:	d102      	bne.n	8009d44 <_printf_float+0x2b4>
 8009d3e:	682b      	ldr	r3, [r5, #0]
 8009d40:	07db      	lsls	r3, r3, #31
 8009d42:	d5d5      	bpl.n	8009cf0 <_printf_float+0x260>
 8009d44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d46:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d48:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d4c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009d4e:	47a0      	blx	r4
 8009d50:	2300      	movs	r3, #0
 8009d52:	3001      	adds	r0, #1
 8009d54:	d100      	bne.n	8009d58 <_printf_float+0x2c8>
 8009d56:	e6f7      	b.n	8009b48 <_printf_float+0xb8>
 8009d58:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d5a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009d5c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d5e:	425b      	negs	r3, r3
 8009d60:	4293      	cmp	r3, r2
 8009d62:	dc01      	bgt.n	8009d68 <_printf_float+0x2d8>
 8009d64:	0033      	movs	r3, r6
 8009d66:	e792      	b.n	8009c8e <_printf_float+0x1fe>
 8009d68:	002a      	movs	r2, r5
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009d6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d70:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009d72:	321a      	adds	r2, #26
 8009d74:	47a0      	blx	r4
 8009d76:	3001      	adds	r0, #1
 8009d78:	d100      	bne.n	8009d7c <_printf_float+0x2ec>
 8009d7a:	e6e5      	b.n	8009b48 <_printf_float+0xb8>
 8009d7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d7e:	3301      	adds	r3, #1
 8009d80:	e7ea      	b.n	8009d58 <_printf_float+0x2c8>
 8009d82:	46c0      	nop			@ (mov r8, r8)
 8009d84:	7fefffff 	.word	0x7fefffff
 8009d88:	0800caf8 	.word	0x0800caf8
 8009d8c:	0800caf4 	.word	0x0800caf4
 8009d90:	0800cb00 	.word	0x0800cb00
 8009d94:	0800cafc 	.word	0x0800cafc
 8009d98:	0800cb04 	.word	0x0800cb04
 8009d9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d9e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009da0:	930c      	str	r3, [sp, #48]	@ 0x30
 8009da2:	429e      	cmp	r6, r3
 8009da4:	dd00      	ble.n	8009da8 <_printf_float+0x318>
 8009da6:	001e      	movs	r6, r3
 8009da8:	2e00      	cmp	r6, #0
 8009daa:	dc31      	bgt.n	8009e10 <_printf_float+0x380>
 8009dac:	43f3      	mvns	r3, r6
 8009dae:	2400      	movs	r4, #0
 8009db0:	17db      	asrs	r3, r3, #31
 8009db2:	4033      	ands	r3, r6
 8009db4:	930e      	str	r3, [sp, #56]	@ 0x38
 8009db6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8009db8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dba:	1af3      	subs	r3, r6, r3
 8009dbc:	42a3      	cmp	r3, r4
 8009dbe:	dc30      	bgt.n	8009e22 <_printf_float+0x392>
 8009dc0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009dc2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	dc38      	bgt.n	8009e3a <_printf_float+0x3aa>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	07db      	lsls	r3, r3, #31
 8009dcc:	d435      	bmi.n	8009e3a <_printf_float+0x3aa>
 8009dce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8009dd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009dd2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009dd4:	1b9b      	subs	r3, r3, r6
 8009dd6:	1b14      	subs	r4, r2, r4
 8009dd8:	429c      	cmp	r4, r3
 8009dda:	dd00      	ble.n	8009dde <_printf_float+0x34e>
 8009ddc:	001c      	movs	r4, r3
 8009dde:	2c00      	cmp	r4, #0
 8009de0:	dc34      	bgt.n	8009e4c <_printf_float+0x3bc>
 8009de2:	43e3      	mvns	r3, r4
 8009de4:	2600      	movs	r6, #0
 8009de6:	17db      	asrs	r3, r3, #31
 8009de8:	401c      	ands	r4, r3
 8009dea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009dec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009dee:	1ad3      	subs	r3, r2, r3
 8009df0:	1b1b      	subs	r3, r3, r4
 8009df2:	42b3      	cmp	r3, r6
 8009df4:	dc00      	bgt.n	8009df8 <_printf_float+0x368>
 8009df6:	e77b      	b.n	8009cf0 <_printf_float+0x260>
 8009df8:	002a      	movs	r2, r5
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009dfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e00:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009e02:	321a      	adds	r2, #26
 8009e04:	47b8      	blx	r7
 8009e06:	3001      	adds	r0, #1
 8009e08:	d100      	bne.n	8009e0c <_printf_float+0x37c>
 8009e0a:	e69d      	b.n	8009b48 <_printf_float+0xb8>
 8009e0c:	3601      	adds	r6, #1
 8009e0e:	e7ec      	b.n	8009dea <_printf_float+0x35a>
 8009e10:	0033      	movs	r3, r6
 8009e12:	003a      	movs	r2, r7
 8009e14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e18:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009e1a:	47a0      	blx	r4
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	d1c5      	bne.n	8009dac <_printf_float+0x31c>
 8009e20:	e692      	b.n	8009b48 <_printf_float+0xb8>
 8009e22:	002a      	movs	r2, r5
 8009e24:	2301      	movs	r3, #1
 8009e26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e2a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009e2c:	321a      	adds	r2, #26
 8009e2e:	47b0      	blx	r6
 8009e30:	3001      	adds	r0, #1
 8009e32:	d100      	bne.n	8009e36 <_printf_float+0x3a6>
 8009e34:	e688      	b.n	8009b48 <_printf_float+0xb8>
 8009e36:	3401      	adds	r4, #1
 8009e38:	e7bd      	b.n	8009db6 <_printf_float+0x326>
 8009e3a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e3e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e42:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009e44:	47a0      	blx	r4
 8009e46:	3001      	adds	r0, #1
 8009e48:	d1c1      	bne.n	8009dce <_printf_float+0x33e>
 8009e4a:	e67d      	b.n	8009b48 <_printf_float+0xb8>
 8009e4c:	19ba      	adds	r2, r7, r6
 8009e4e:	0023      	movs	r3, r4
 8009e50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e54:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009e56:	47b0      	blx	r6
 8009e58:	3001      	adds	r0, #1
 8009e5a:	d1c2      	bne.n	8009de2 <_printf_float+0x352>
 8009e5c:	e674      	b.n	8009b48 <_printf_float+0xb8>
 8009e5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009e60:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	dc02      	bgt.n	8009e6c <_printf_float+0x3dc>
 8009e66:	2301      	movs	r3, #1
 8009e68:	421a      	tst	r2, r3
 8009e6a:	d039      	beq.n	8009ee0 <_printf_float+0x450>
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	003a      	movs	r2, r7
 8009e70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e74:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009e76:	47b0      	blx	r6
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d100      	bne.n	8009e7e <_printf_float+0x3ee>
 8009e7c:	e664      	b.n	8009b48 <_printf_float+0xb8>
 8009e7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e80:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e84:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e86:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009e88:	47b0      	blx	r6
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	d100      	bne.n	8009e90 <_printf_float+0x400>
 8009e8e:	e65b      	b.n	8009b48 <_printf_float+0xb8>
 8009e90:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8009e92:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8009e94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e96:	2200      	movs	r2, #0
 8009e98:	3b01      	subs	r3, #1
 8009e9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f7f6 fad3 	bl	8000448 <__aeabi_dcmpeq>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d11a      	bne.n	8009edc <_printf_float+0x44c>
 8009ea6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ea8:	1c7a      	adds	r2, r7, #1
 8009eaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009eac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009eae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009eb0:	47b0      	blx	r6
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	d10e      	bne.n	8009ed4 <_printf_float+0x444>
 8009eb6:	e647      	b.n	8009b48 <_printf_float+0xb8>
 8009eb8:	002a      	movs	r2, r5
 8009eba:	2301      	movs	r3, #1
 8009ebc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ebe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ec0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009ec2:	321a      	adds	r2, #26
 8009ec4:	47b8      	blx	r7
 8009ec6:	3001      	adds	r0, #1
 8009ec8:	d100      	bne.n	8009ecc <_printf_float+0x43c>
 8009eca:	e63d      	b.n	8009b48 <_printf_float+0xb8>
 8009ecc:	3601      	adds	r6, #1
 8009ece:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ed0:	429e      	cmp	r6, r3
 8009ed2:	dbf1      	blt.n	8009eb8 <_printf_float+0x428>
 8009ed4:	002a      	movs	r2, r5
 8009ed6:	0023      	movs	r3, r4
 8009ed8:	3250      	adds	r2, #80	@ 0x50
 8009eda:	e6d9      	b.n	8009c90 <_printf_float+0x200>
 8009edc:	2600      	movs	r6, #0
 8009ede:	e7f6      	b.n	8009ece <_printf_float+0x43e>
 8009ee0:	003a      	movs	r2, r7
 8009ee2:	e7e2      	b.n	8009eaa <_printf_float+0x41a>
 8009ee4:	002a      	movs	r2, r5
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009eec:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009eee:	3219      	adds	r2, #25
 8009ef0:	47b0      	blx	r6
 8009ef2:	3001      	adds	r0, #1
 8009ef4:	d100      	bne.n	8009ef8 <_printf_float+0x468>
 8009ef6:	e627      	b.n	8009b48 <_printf_float+0xb8>
 8009ef8:	3401      	adds	r4, #1
 8009efa:	68eb      	ldr	r3, [r5, #12]
 8009efc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009efe:	1a9b      	subs	r3, r3, r2
 8009f00:	42a3      	cmp	r3, r4
 8009f02:	dcef      	bgt.n	8009ee4 <_printf_float+0x454>
 8009f04:	e6f8      	b.n	8009cf8 <_printf_float+0x268>
 8009f06:	2400      	movs	r4, #0
 8009f08:	e7f7      	b.n	8009efa <_printf_float+0x46a>
 8009f0a:	46c0      	nop			@ (mov r8, r8)

08009f0c <_printf_common>:
 8009f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f0e:	0016      	movs	r6, r2
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	688a      	ldr	r2, [r1, #8]
 8009f14:	690b      	ldr	r3, [r1, #16]
 8009f16:	000c      	movs	r4, r1
 8009f18:	9000      	str	r0, [sp, #0]
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	da00      	bge.n	8009f20 <_printf_common+0x14>
 8009f1e:	0013      	movs	r3, r2
 8009f20:	0022      	movs	r2, r4
 8009f22:	6033      	str	r3, [r6, #0]
 8009f24:	3243      	adds	r2, #67	@ 0x43
 8009f26:	7812      	ldrb	r2, [r2, #0]
 8009f28:	2a00      	cmp	r2, #0
 8009f2a:	d001      	beq.n	8009f30 <_printf_common+0x24>
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	6033      	str	r3, [r6, #0]
 8009f30:	6823      	ldr	r3, [r4, #0]
 8009f32:	069b      	lsls	r3, r3, #26
 8009f34:	d502      	bpl.n	8009f3c <_printf_common+0x30>
 8009f36:	6833      	ldr	r3, [r6, #0]
 8009f38:	3302      	adds	r3, #2
 8009f3a:	6033      	str	r3, [r6, #0]
 8009f3c:	6822      	ldr	r2, [r4, #0]
 8009f3e:	2306      	movs	r3, #6
 8009f40:	0015      	movs	r5, r2
 8009f42:	401d      	ands	r5, r3
 8009f44:	421a      	tst	r2, r3
 8009f46:	d027      	beq.n	8009f98 <_printf_common+0x8c>
 8009f48:	0023      	movs	r3, r4
 8009f4a:	3343      	adds	r3, #67	@ 0x43
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	1e5a      	subs	r2, r3, #1
 8009f50:	4193      	sbcs	r3, r2
 8009f52:	6822      	ldr	r2, [r4, #0]
 8009f54:	0692      	lsls	r2, r2, #26
 8009f56:	d430      	bmi.n	8009fba <_printf_common+0xae>
 8009f58:	0022      	movs	r2, r4
 8009f5a:	9901      	ldr	r1, [sp, #4]
 8009f5c:	9800      	ldr	r0, [sp, #0]
 8009f5e:	9d08      	ldr	r5, [sp, #32]
 8009f60:	3243      	adds	r2, #67	@ 0x43
 8009f62:	47a8      	blx	r5
 8009f64:	3001      	adds	r0, #1
 8009f66:	d025      	beq.n	8009fb4 <_printf_common+0xa8>
 8009f68:	2206      	movs	r2, #6
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	2500      	movs	r5, #0
 8009f6e:	4013      	ands	r3, r2
 8009f70:	2b04      	cmp	r3, #4
 8009f72:	d105      	bne.n	8009f80 <_printf_common+0x74>
 8009f74:	6833      	ldr	r3, [r6, #0]
 8009f76:	68e5      	ldr	r5, [r4, #12]
 8009f78:	1aed      	subs	r5, r5, r3
 8009f7a:	43eb      	mvns	r3, r5
 8009f7c:	17db      	asrs	r3, r3, #31
 8009f7e:	401d      	ands	r5, r3
 8009f80:	68a3      	ldr	r3, [r4, #8]
 8009f82:	6922      	ldr	r2, [r4, #16]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	dd01      	ble.n	8009f8c <_printf_common+0x80>
 8009f88:	1a9b      	subs	r3, r3, r2
 8009f8a:	18ed      	adds	r5, r5, r3
 8009f8c:	2600      	movs	r6, #0
 8009f8e:	42b5      	cmp	r5, r6
 8009f90:	d120      	bne.n	8009fd4 <_printf_common+0xc8>
 8009f92:	2000      	movs	r0, #0
 8009f94:	e010      	b.n	8009fb8 <_printf_common+0xac>
 8009f96:	3501      	adds	r5, #1
 8009f98:	68e3      	ldr	r3, [r4, #12]
 8009f9a:	6832      	ldr	r2, [r6, #0]
 8009f9c:	1a9b      	subs	r3, r3, r2
 8009f9e:	42ab      	cmp	r3, r5
 8009fa0:	ddd2      	ble.n	8009f48 <_printf_common+0x3c>
 8009fa2:	0022      	movs	r2, r4
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	9901      	ldr	r1, [sp, #4]
 8009fa8:	9800      	ldr	r0, [sp, #0]
 8009faa:	9f08      	ldr	r7, [sp, #32]
 8009fac:	3219      	adds	r2, #25
 8009fae:	47b8      	blx	r7
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d1f0      	bne.n	8009f96 <_printf_common+0x8a>
 8009fb4:	2001      	movs	r0, #1
 8009fb6:	4240      	negs	r0, r0
 8009fb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009fba:	2030      	movs	r0, #48	@ 0x30
 8009fbc:	18e1      	adds	r1, r4, r3
 8009fbe:	3143      	adds	r1, #67	@ 0x43
 8009fc0:	7008      	strb	r0, [r1, #0]
 8009fc2:	0021      	movs	r1, r4
 8009fc4:	1c5a      	adds	r2, r3, #1
 8009fc6:	3145      	adds	r1, #69	@ 0x45
 8009fc8:	7809      	ldrb	r1, [r1, #0]
 8009fca:	18a2      	adds	r2, r4, r2
 8009fcc:	3243      	adds	r2, #67	@ 0x43
 8009fce:	3302      	adds	r3, #2
 8009fd0:	7011      	strb	r1, [r2, #0]
 8009fd2:	e7c1      	b.n	8009f58 <_printf_common+0x4c>
 8009fd4:	0022      	movs	r2, r4
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	9901      	ldr	r1, [sp, #4]
 8009fda:	9800      	ldr	r0, [sp, #0]
 8009fdc:	9f08      	ldr	r7, [sp, #32]
 8009fde:	321a      	adds	r2, #26
 8009fe0:	47b8      	blx	r7
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	d0e6      	beq.n	8009fb4 <_printf_common+0xa8>
 8009fe6:	3601      	adds	r6, #1
 8009fe8:	e7d1      	b.n	8009f8e <_printf_common+0x82>
	...

08009fec <_printf_i>:
 8009fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fee:	b08b      	sub	sp, #44	@ 0x2c
 8009ff0:	9206      	str	r2, [sp, #24]
 8009ff2:	000a      	movs	r2, r1
 8009ff4:	3243      	adds	r2, #67	@ 0x43
 8009ff6:	9307      	str	r3, [sp, #28]
 8009ff8:	9005      	str	r0, [sp, #20]
 8009ffa:	9203      	str	r2, [sp, #12]
 8009ffc:	7e0a      	ldrb	r2, [r1, #24]
 8009ffe:	000c      	movs	r4, r1
 800a000:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a002:	2a78      	cmp	r2, #120	@ 0x78
 800a004:	d809      	bhi.n	800a01a <_printf_i+0x2e>
 800a006:	2a62      	cmp	r2, #98	@ 0x62
 800a008:	d80b      	bhi.n	800a022 <_printf_i+0x36>
 800a00a:	2a00      	cmp	r2, #0
 800a00c:	d100      	bne.n	800a010 <_printf_i+0x24>
 800a00e:	e0ba      	b.n	800a186 <_printf_i+0x19a>
 800a010:	497a      	ldr	r1, [pc, #488]	@ (800a1fc <_printf_i+0x210>)
 800a012:	9104      	str	r1, [sp, #16]
 800a014:	2a58      	cmp	r2, #88	@ 0x58
 800a016:	d100      	bne.n	800a01a <_printf_i+0x2e>
 800a018:	e08e      	b.n	800a138 <_printf_i+0x14c>
 800a01a:	0025      	movs	r5, r4
 800a01c:	3542      	adds	r5, #66	@ 0x42
 800a01e:	702a      	strb	r2, [r5, #0]
 800a020:	e022      	b.n	800a068 <_printf_i+0x7c>
 800a022:	0010      	movs	r0, r2
 800a024:	3863      	subs	r0, #99	@ 0x63
 800a026:	2815      	cmp	r0, #21
 800a028:	d8f7      	bhi.n	800a01a <_printf_i+0x2e>
 800a02a:	f7f6 f87d 	bl	8000128 <__gnu_thumb1_case_shi>
 800a02e:	0016      	.short	0x0016
 800a030:	fff6001f 	.word	0xfff6001f
 800a034:	fff6fff6 	.word	0xfff6fff6
 800a038:	001ffff6 	.word	0x001ffff6
 800a03c:	fff6fff6 	.word	0xfff6fff6
 800a040:	fff6fff6 	.word	0xfff6fff6
 800a044:	0036009f 	.word	0x0036009f
 800a048:	fff6007e 	.word	0xfff6007e
 800a04c:	00b0fff6 	.word	0x00b0fff6
 800a050:	0036fff6 	.word	0x0036fff6
 800a054:	fff6fff6 	.word	0xfff6fff6
 800a058:	0082      	.short	0x0082
 800a05a:	0025      	movs	r5, r4
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	3542      	adds	r5, #66	@ 0x42
 800a060:	1d11      	adds	r1, r2, #4
 800a062:	6019      	str	r1, [r3, #0]
 800a064:	6813      	ldr	r3, [r2, #0]
 800a066:	702b      	strb	r3, [r5, #0]
 800a068:	2301      	movs	r3, #1
 800a06a:	e09e      	b.n	800a1aa <_printf_i+0x1be>
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	6809      	ldr	r1, [r1, #0]
 800a070:	1d02      	adds	r2, r0, #4
 800a072:	060d      	lsls	r5, r1, #24
 800a074:	d50b      	bpl.n	800a08e <_printf_i+0xa2>
 800a076:	6806      	ldr	r6, [r0, #0]
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	2e00      	cmp	r6, #0
 800a07c:	da03      	bge.n	800a086 <_printf_i+0x9a>
 800a07e:	232d      	movs	r3, #45	@ 0x2d
 800a080:	9a03      	ldr	r2, [sp, #12]
 800a082:	4276      	negs	r6, r6
 800a084:	7013      	strb	r3, [r2, #0]
 800a086:	4b5d      	ldr	r3, [pc, #372]	@ (800a1fc <_printf_i+0x210>)
 800a088:	270a      	movs	r7, #10
 800a08a:	9304      	str	r3, [sp, #16]
 800a08c:	e018      	b.n	800a0c0 <_printf_i+0xd4>
 800a08e:	6806      	ldr	r6, [r0, #0]
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	0649      	lsls	r1, r1, #25
 800a094:	d5f1      	bpl.n	800a07a <_printf_i+0x8e>
 800a096:	b236      	sxth	r6, r6
 800a098:	e7ef      	b.n	800a07a <_printf_i+0x8e>
 800a09a:	6808      	ldr	r0, [r1, #0]
 800a09c:	6819      	ldr	r1, [r3, #0]
 800a09e:	c940      	ldmia	r1!, {r6}
 800a0a0:	0605      	lsls	r5, r0, #24
 800a0a2:	d402      	bmi.n	800a0aa <_printf_i+0xbe>
 800a0a4:	0640      	lsls	r0, r0, #25
 800a0a6:	d500      	bpl.n	800a0aa <_printf_i+0xbe>
 800a0a8:	b2b6      	uxth	r6, r6
 800a0aa:	6019      	str	r1, [r3, #0]
 800a0ac:	4b53      	ldr	r3, [pc, #332]	@ (800a1fc <_printf_i+0x210>)
 800a0ae:	270a      	movs	r7, #10
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	2a6f      	cmp	r2, #111	@ 0x6f
 800a0b4:	d100      	bne.n	800a0b8 <_printf_i+0xcc>
 800a0b6:	3f02      	subs	r7, #2
 800a0b8:	0023      	movs	r3, r4
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	3343      	adds	r3, #67	@ 0x43
 800a0be:	701a      	strb	r2, [r3, #0]
 800a0c0:	6863      	ldr	r3, [r4, #4]
 800a0c2:	60a3      	str	r3, [r4, #8]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	db06      	blt.n	800a0d6 <_printf_i+0xea>
 800a0c8:	2104      	movs	r1, #4
 800a0ca:	6822      	ldr	r2, [r4, #0]
 800a0cc:	9d03      	ldr	r5, [sp, #12]
 800a0ce:	438a      	bics	r2, r1
 800a0d0:	6022      	str	r2, [r4, #0]
 800a0d2:	4333      	orrs	r3, r6
 800a0d4:	d00c      	beq.n	800a0f0 <_printf_i+0x104>
 800a0d6:	9d03      	ldr	r5, [sp, #12]
 800a0d8:	0030      	movs	r0, r6
 800a0da:	0039      	movs	r1, r7
 800a0dc:	f7f6 f8b4 	bl	8000248 <__aeabi_uidivmod>
 800a0e0:	9b04      	ldr	r3, [sp, #16]
 800a0e2:	3d01      	subs	r5, #1
 800a0e4:	5c5b      	ldrb	r3, [r3, r1]
 800a0e6:	702b      	strb	r3, [r5, #0]
 800a0e8:	0033      	movs	r3, r6
 800a0ea:	0006      	movs	r6, r0
 800a0ec:	429f      	cmp	r7, r3
 800a0ee:	d9f3      	bls.n	800a0d8 <_printf_i+0xec>
 800a0f0:	2f08      	cmp	r7, #8
 800a0f2:	d109      	bne.n	800a108 <_printf_i+0x11c>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	07db      	lsls	r3, r3, #31
 800a0f8:	d506      	bpl.n	800a108 <_printf_i+0x11c>
 800a0fa:	6862      	ldr	r2, [r4, #4]
 800a0fc:	6923      	ldr	r3, [r4, #16]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	dc02      	bgt.n	800a108 <_printf_i+0x11c>
 800a102:	2330      	movs	r3, #48	@ 0x30
 800a104:	3d01      	subs	r5, #1
 800a106:	702b      	strb	r3, [r5, #0]
 800a108:	9b03      	ldr	r3, [sp, #12]
 800a10a:	1b5b      	subs	r3, r3, r5
 800a10c:	6123      	str	r3, [r4, #16]
 800a10e:	9b07      	ldr	r3, [sp, #28]
 800a110:	0021      	movs	r1, r4
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	9805      	ldr	r0, [sp, #20]
 800a116:	9b06      	ldr	r3, [sp, #24]
 800a118:	aa09      	add	r2, sp, #36	@ 0x24
 800a11a:	f7ff fef7 	bl	8009f0c <_printf_common>
 800a11e:	3001      	adds	r0, #1
 800a120:	d148      	bne.n	800a1b4 <_printf_i+0x1c8>
 800a122:	2001      	movs	r0, #1
 800a124:	4240      	negs	r0, r0
 800a126:	b00b      	add	sp, #44	@ 0x2c
 800a128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a12a:	2220      	movs	r2, #32
 800a12c:	6809      	ldr	r1, [r1, #0]
 800a12e:	430a      	orrs	r2, r1
 800a130:	6022      	str	r2, [r4, #0]
 800a132:	2278      	movs	r2, #120	@ 0x78
 800a134:	4932      	ldr	r1, [pc, #200]	@ (800a200 <_printf_i+0x214>)
 800a136:	9104      	str	r1, [sp, #16]
 800a138:	0021      	movs	r1, r4
 800a13a:	3145      	adds	r1, #69	@ 0x45
 800a13c:	700a      	strb	r2, [r1, #0]
 800a13e:	6819      	ldr	r1, [r3, #0]
 800a140:	6822      	ldr	r2, [r4, #0]
 800a142:	c940      	ldmia	r1!, {r6}
 800a144:	0610      	lsls	r0, r2, #24
 800a146:	d402      	bmi.n	800a14e <_printf_i+0x162>
 800a148:	0650      	lsls	r0, r2, #25
 800a14a:	d500      	bpl.n	800a14e <_printf_i+0x162>
 800a14c:	b2b6      	uxth	r6, r6
 800a14e:	6019      	str	r1, [r3, #0]
 800a150:	07d3      	lsls	r3, r2, #31
 800a152:	d502      	bpl.n	800a15a <_printf_i+0x16e>
 800a154:	2320      	movs	r3, #32
 800a156:	4313      	orrs	r3, r2
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	2e00      	cmp	r6, #0
 800a15c:	d001      	beq.n	800a162 <_printf_i+0x176>
 800a15e:	2710      	movs	r7, #16
 800a160:	e7aa      	b.n	800a0b8 <_printf_i+0xcc>
 800a162:	2220      	movs	r2, #32
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	4393      	bics	r3, r2
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	e7f8      	b.n	800a15e <_printf_i+0x172>
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	680d      	ldr	r5, [r1, #0]
 800a170:	1d10      	adds	r0, r2, #4
 800a172:	6949      	ldr	r1, [r1, #20]
 800a174:	6018      	str	r0, [r3, #0]
 800a176:	6813      	ldr	r3, [r2, #0]
 800a178:	062e      	lsls	r6, r5, #24
 800a17a:	d501      	bpl.n	800a180 <_printf_i+0x194>
 800a17c:	6019      	str	r1, [r3, #0]
 800a17e:	e002      	b.n	800a186 <_printf_i+0x19a>
 800a180:	066d      	lsls	r5, r5, #25
 800a182:	d5fb      	bpl.n	800a17c <_printf_i+0x190>
 800a184:	8019      	strh	r1, [r3, #0]
 800a186:	2300      	movs	r3, #0
 800a188:	9d03      	ldr	r5, [sp, #12]
 800a18a:	6123      	str	r3, [r4, #16]
 800a18c:	e7bf      	b.n	800a10e <_printf_i+0x122>
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	1d11      	adds	r1, r2, #4
 800a192:	6019      	str	r1, [r3, #0]
 800a194:	6815      	ldr	r5, [r2, #0]
 800a196:	2100      	movs	r1, #0
 800a198:	0028      	movs	r0, r5
 800a19a:	6862      	ldr	r2, [r4, #4]
 800a19c:	f000 f966 	bl	800a46c <memchr>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d001      	beq.n	800a1a8 <_printf_i+0x1bc>
 800a1a4:	1b40      	subs	r0, r0, r5
 800a1a6:	6060      	str	r0, [r4, #4]
 800a1a8:	6863      	ldr	r3, [r4, #4]
 800a1aa:	6123      	str	r3, [r4, #16]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9a03      	ldr	r2, [sp, #12]
 800a1b0:	7013      	strb	r3, [r2, #0]
 800a1b2:	e7ac      	b.n	800a10e <_printf_i+0x122>
 800a1b4:	002a      	movs	r2, r5
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	9906      	ldr	r1, [sp, #24]
 800a1ba:	9805      	ldr	r0, [sp, #20]
 800a1bc:	9d07      	ldr	r5, [sp, #28]
 800a1be:	47a8      	blx	r5
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d0ae      	beq.n	800a122 <_printf_i+0x136>
 800a1c4:	6823      	ldr	r3, [r4, #0]
 800a1c6:	079b      	lsls	r3, r3, #30
 800a1c8:	d415      	bmi.n	800a1f6 <_printf_i+0x20a>
 800a1ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1cc:	68e0      	ldr	r0, [r4, #12]
 800a1ce:	4298      	cmp	r0, r3
 800a1d0:	daa9      	bge.n	800a126 <_printf_i+0x13a>
 800a1d2:	0018      	movs	r0, r3
 800a1d4:	e7a7      	b.n	800a126 <_printf_i+0x13a>
 800a1d6:	0022      	movs	r2, r4
 800a1d8:	2301      	movs	r3, #1
 800a1da:	9906      	ldr	r1, [sp, #24]
 800a1dc:	9805      	ldr	r0, [sp, #20]
 800a1de:	9e07      	ldr	r6, [sp, #28]
 800a1e0:	3219      	adds	r2, #25
 800a1e2:	47b0      	blx	r6
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d09c      	beq.n	800a122 <_printf_i+0x136>
 800a1e8:	3501      	adds	r5, #1
 800a1ea:	68e3      	ldr	r3, [r4, #12]
 800a1ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1ee:	1a9b      	subs	r3, r3, r2
 800a1f0:	42ab      	cmp	r3, r5
 800a1f2:	dcf0      	bgt.n	800a1d6 <_printf_i+0x1ea>
 800a1f4:	e7e9      	b.n	800a1ca <_printf_i+0x1de>
 800a1f6:	2500      	movs	r5, #0
 800a1f8:	e7f7      	b.n	800a1ea <_printf_i+0x1fe>
 800a1fa:	46c0      	nop			@ (mov r8, r8)
 800a1fc:	0800cb06 	.word	0x0800cb06
 800a200:	0800cb17 	.word	0x0800cb17

0800a204 <sniprintf>:
 800a204:	b40c      	push	{r2, r3}
 800a206:	b530      	push	{r4, r5, lr}
 800a208:	4b18      	ldr	r3, [pc, #96]	@ (800a26c <sniprintf+0x68>)
 800a20a:	000c      	movs	r4, r1
 800a20c:	681d      	ldr	r5, [r3, #0]
 800a20e:	b09d      	sub	sp, #116	@ 0x74
 800a210:	2900      	cmp	r1, #0
 800a212:	da08      	bge.n	800a226 <sniprintf+0x22>
 800a214:	238b      	movs	r3, #139	@ 0x8b
 800a216:	2001      	movs	r0, #1
 800a218:	602b      	str	r3, [r5, #0]
 800a21a:	4240      	negs	r0, r0
 800a21c:	b01d      	add	sp, #116	@ 0x74
 800a21e:	bc30      	pop	{r4, r5}
 800a220:	bc08      	pop	{r3}
 800a222:	b002      	add	sp, #8
 800a224:	4718      	bx	r3
 800a226:	2382      	movs	r3, #130	@ 0x82
 800a228:	466a      	mov	r2, sp
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	8293      	strh	r3, [r2, #20]
 800a22e:	2300      	movs	r3, #0
 800a230:	9002      	str	r0, [sp, #8]
 800a232:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a234:	9006      	str	r0, [sp, #24]
 800a236:	4299      	cmp	r1, r3
 800a238:	d000      	beq.n	800a23c <sniprintf+0x38>
 800a23a:	1e4b      	subs	r3, r1, #1
 800a23c:	9304      	str	r3, [sp, #16]
 800a23e:	9307      	str	r3, [sp, #28]
 800a240:	2301      	movs	r3, #1
 800a242:	466a      	mov	r2, sp
 800a244:	425b      	negs	r3, r3
 800a246:	82d3      	strh	r3, [r2, #22]
 800a248:	0028      	movs	r0, r5
 800a24a:	ab21      	add	r3, sp, #132	@ 0x84
 800a24c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a24e:	a902      	add	r1, sp, #8
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	f000 fff5 	bl	800b240 <_svfiprintf_r>
 800a256:	1c43      	adds	r3, r0, #1
 800a258:	da01      	bge.n	800a25e <sniprintf+0x5a>
 800a25a:	238b      	movs	r3, #139	@ 0x8b
 800a25c:	602b      	str	r3, [r5, #0]
 800a25e:	2c00      	cmp	r4, #0
 800a260:	d0dc      	beq.n	800a21c <sniprintf+0x18>
 800a262:	2200      	movs	r2, #0
 800a264:	9b02      	ldr	r3, [sp, #8]
 800a266:	701a      	strb	r2, [r3, #0]
 800a268:	e7d8      	b.n	800a21c <sniprintf+0x18>
 800a26a:	46c0      	nop			@ (mov r8, r8)
 800a26c:	20000018 	.word	0x20000018

0800a270 <std>:
 800a270:	2300      	movs	r3, #0
 800a272:	b510      	push	{r4, lr}
 800a274:	0004      	movs	r4, r0
 800a276:	6003      	str	r3, [r0, #0]
 800a278:	6043      	str	r3, [r0, #4]
 800a27a:	6083      	str	r3, [r0, #8]
 800a27c:	8181      	strh	r1, [r0, #12]
 800a27e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a280:	81c2      	strh	r2, [r0, #14]
 800a282:	6103      	str	r3, [r0, #16]
 800a284:	6143      	str	r3, [r0, #20]
 800a286:	6183      	str	r3, [r0, #24]
 800a288:	0019      	movs	r1, r3
 800a28a:	2208      	movs	r2, #8
 800a28c:	305c      	adds	r0, #92	@ 0x5c
 800a28e:	f000 f8b3 	bl	800a3f8 <memset>
 800a292:	4b0b      	ldr	r3, [pc, #44]	@ (800a2c0 <std+0x50>)
 800a294:	6224      	str	r4, [r4, #32]
 800a296:	6263      	str	r3, [r4, #36]	@ 0x24
 800a298:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c4 <std+0x54>)
 800a29a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a29c:	4b0a      	ldr	r3, [pc, #40]	@ (800a2c8 <std+0x58>)
 800a29e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a2a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a2cc <std+0x5c>)
 800a2a2:	6323      	str	r3, [r4, #48]	@ 0x30
 800a2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d0 <std+0x60>)
 800a2a6:	429c      	cmp	r4, r3
 800a2a8:	d005      	beq.n	800a2b6 <std+0x46>
 800a2aa:	4b0a      	ldr	r3, [pc, #40]	@ (800a2d4 <std+0x64>)
 800a2ac:	429c      	cmp	r4, r3
 800a2ae:	d002      	beq.n	800a2b6 <std+0x46>
 800a2b0:	4b09      	ldr	r3, [pc, #36]	@ (800a2d8 <std+0x68>)
 800a2b2:	429c      	cmp	r4, r3
 800a2b4:	d103      	bne.n	800a2be <std+0x4e>
 800a2b6:	0020      	movs	r0, r4
 800a2b8:	3058      	adds	r0, #88	@ 0x58
 800a2ba:	f000 f8cf 	bl	800a45c <__retarget_lock_init_recursive>
 800a2be:	bd10      	pop	{r4, pc}
 800a2c0:	0800be51 	.word	0x0800be51
 800a2c4:	0800be79 	.word	0x0800be79
 800a2c8:	0800beb1 	.word	0x0800beb1
 800a2cc:	0800bedd 	.word	0x0800bedd
 800a2d0:	20000398 	.word	0x20000398
 800a2d4:	20000400 	.word	0x20000400
 800a2d8:	20000468 	.word	0x20000468

0800a2dc <stdio_exit_handler>:
 800a2dc:	b510      	push	{r4, lr}
 800a2de:	4a03      	ldr	r2, [pc, #12]	@ (800a2ec <stdio_exit_handler+0x10>)
 800a2e0:	4903      	ldr	r1, [pc, #12]	@ (800a2f0 <stdio_exit_handler+0x14>)
 800a2e2:	4804      	ldr	r0, [pc, #16]	@ (800a2f4 <stdio_exit_handler+0x18>)
 800a2e4:	f000 f86c 	bl	800a3c0 <_fwalk_sglue>
 800a2e8:	bd10      	pop	{r4, pc}
 800a2ea:	46c0      	nop			@ (mov r8, r8)
 800a2ec:	2000000c 	.word	0x2000000c
 800a2f0:	0800b6a1 	.word	0x0800b6a1
 800a2f4:	2000001c 	.word	0x2000001c

0800a2f8 <cleanup_stdio>:
 800a2f8:	6841      	ldr	r1, [r0, #4]
 800a2fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a328 <cleanup_stdio+0x30>)
 800a2fc:	b510      	push	{r4, lr}
 800a2fe:	0004      	movs	r4, r0
 800a300:	4299      	cmp	r1, r3
 800a302:	d001      	beq.n	800a308 <cleanup_stdio+0x10>
 800a304:	f001 f9cc 	bl	800b6a0 <_fflush_r>
 800a308:	68a1      	ldr	r1, [r4, #8]
 800a30a:	4b08      	ldr	r3, [pc, #32]	@ (800a32c <cleanup_stdio+0x34>)
 800a30c:	4299      	cmp	r1, r3
 800a30e:	d002      	beq.n	800a316 <cleanup_stdio+0x1e>
 800a310:	0020      	movs	r0, r4
 800a312:	f001 f9c5 	bl	800b6a0 <_fflush_r>
 800a316:	68e1      	ldr	r1, [r4, #12]
 800a318:	4b05      	ldr	r3, [pc, #20]	@ (800a330 <cleanup_stdio+0x38>)
 800a31a:	4299      	cmp	r1, r3
 800a31c:	d002      	beq.n	800a324 <cleanup_stdio+0x2c>
 800a31e:	0020      	movs	r0, r4
 800a320:	f001 f9be 	bl	800b6a0 <_fflush_r>
 800a324:	bd10      	pop	{r4, pc}
 800a326:	46c0      	nop			@ (mov r8, r8)
 800a328:	20000398 	.word	0x20000398
 800a32c:	20000400 	.word	0x20000400
 800a330:	20000468 	.word	0x20000468

0800a334 <global_stdio_init.part.0>:
 800a334:	b510      	push	{r4, lr}
 800a336:	4b09      	ldr	r3, [pc, #36]	@ (800a35c <global_stdio_init.part.0+0x28>)
 800a338:	4a09      	ldr	r2, [pc, #36]	@ (800a360 <global_stdio_init.part.0+0x2c>)
 800a33a:	2104      	movs	r1, #4
 800a33c:	601a      	str	r2, [r3, #0]
 800a33e:	4809      	ldr	r0, [pc, #36]	@ (800a364 <global_stdio_init.part.0+0x30>)
 800a340:	2200      	movs	r2, #0
 800a342:	f7ff ff95 	bl	800a270 <std>
 800a346:	2201      	movs	r2, #1
 800a348:	2109      	movs	r1, #9
 800a34a:	4807      	ldr	r0, [pc, #28]	@ (800a368 <global_stdio_init.part.0+0x34>)
 800a34c:	f7ff ff90 	bl	800a270 <std>
 800a350:	2202      	movs	r2, #2
 800a352:	2112      	movs	r1, #18
 800a354:	4805      	ldr	r0, [pc, #20]	@ (800a36c <global_stdio_init.part.0+0x38>)
 800a356:	f7ff ff8b 	bl	800a270 <std>
 800a35a:	bd10      	pop	{r4, pc}
 800a35c:	200004d0 	.word	0x200004d0
 800a360:	0800a2dd 	.word	0x0800a2dd
 800a364:	20000398 	.word	0x20000398
 800a368:	20000400 	.word	0x20000400
 800a36c:	20000468 	.word	0x20000468

0800a370 <__sfp_lock_acquire>:
 800a370:	b510      	push	{r4, lr}
 800a372:	4802      	ldr	r0, [pc, #8]	@ (800a37c <__sfp_lock_acquire+0xc>)
 800a374:	f000 f873 	bl	800a45e <__retarget_lock_acquire_recursive>
 800a378:	bd10      	pop	{r4, pc}
 800a37a:	46c0      	nop			@ (mov r8, r8)
 800a37c:	200004d5 	.word	0x200004d5

0800a380 <__sfp_lock_release>:
 800a380:	b510      	push	{r4, lr}
 800a382:	4802      	ldr	r0, [pc, #8]	@ (800a38c <__sfp_lock_release+0xc>)
 800a384:	f000 f86c 	bl	800a460 <__retarget_lock_release_recursive>
 800a388:	bd10      	pop	{r4, pc}
 800a38a:	46c0      	nop			@ (mov r8, r8)
 800a38c:	200004d5 	.word	0x200004d5

0800a390 <__sinit>:
 800a390:	b510      	push	{r4, lr}
 800a392:	0004      	movs	r4, r0
 800a394:	f7ff ffec 	bl	800a370 <__sfp_lock_acquire>
 800a398:	6a23      	ldr	r3, [r4, #32]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <__sinit+0x14>
 800a39e:	f7ff ffef 	bl	800a380 <__sfp_lock_release>
 800a3a2:	bd10      	pop	{r4, pc}
 800a3a4:	4b04      	ldr	r3, [pc, #16]	@ (800a3b8 <__sinit+0x28>)
 800a3a6:	6223      	str	r3, [r4, #32]
 800a3a8:	4b04      	ldr	r3, [pc, #16]	@ (800a3bc <__sinit+0x2c>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1f6      	bne.n	800a39e <__sinit+0xe>
 800a3b0:	f7ff ffc0 	bl	800a334 <global_stdio_init.part.0>
 800a3b4:	e7f3      	b.n	800a39e <__sinit+0xe>
 800a3b6:	46c0      	nop			@ (mov r8, r8)
 800a3b8:	0800a2f9 	.word	0x0800a2f9
 800a3bc:	200004d0 	.word	0x200004d0

0800a3c0 <_fwalk_sglue>:
 800a3c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3c2:	0014      	movs	r4, r2
 800a3c4:	2600      	movs	r6, #0
 800a3c6:	9000      	str	r0, [sp, #0]
 800a3c8:	9101      	str	r1, [sp, #4]
 800a3ca:	68a5      	ldr	r5, [r4, #8]
 800a3cc:	6867      	ldr	r7, [r4, #4]
 800a3ce:	3f01      	subs	r7, #1
 800a3d0:	d504      	bpl.n	800a3dc <_fwalk_sglue+0x1c>
 800a3d2:	6824      	ldr	r4, [r4, #0]
 800a3d4:	2c00      	cmp	r4, #0
 800a3d6:	d1f8      	bne.n	800a3ca <_fwalk_sglue+0xa>
 800a3d8:	0030      	movs	r0, r6
 800a3da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a3dc:	89ab      	ldrh	r3, [r5, #12]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d908      	bls.n	800a3f4 <_fwalk_sglue+0x34>
 800a3e2:	220e      	movs	r2, #14
 800a3e4:	5eab      	ldrsh	r3, [r5, r2]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	d004      	beq.n	800a3f4 <_fwalk_sglue+0x34>
 800a3ea:	0029      	movs	r1, r5
 800a3ec:	9800      	ldr	r0, [sp, #0]
 800a3ee:	9b01      	ldr	r3, [sp, #4]
 800a3f0:	4798      	blx	r3
 800a3f2:	4306      	orrs	r6, r0
 800a3f4:	3568      	adds	r5, #104	@ 0x68
 800a3f6:	e7ea      	b.n	800a3ce <_fwalk_sglue+0xe>

0800a3f8 <memset>:
 800a3f8:	0003      	movs	r3, r0
 800a3fa:	1882      	adds	r2, r0, r2
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d100      	bne.n	800a402 <memset+0xa>
 800a400:	4770      	bx	lr
 800a402:	7019      	strb	r1, [r3, #0]
 800a404:	3301      	adds	r3, #1
 800a406:	e7f9      	b.n	800a3fc <memset+0x4>

0800a408 <__errno>:
 800a408:	4b01      	ldr	r3, [pc, #4]	@ (800a410 <__errno+0x8>)
 800a40a:	6818      	ldr	r0, [r3, #0]
 800a40c:	4770      	bx	lr
 800a40e:	46c0      	nop			@ (mov r8, r8)
 800a410:	20000018 	.word	0x20000018

0800a414 <__libc_init_array>:
 800a414:	b570      	push	{r4, r5, r6, lr}
 800a416:	2600      	movs	r6, #0
 800a418:	4c0c      	ldr	r4, [pc, #48]	@ (800a44c <__libc_init_array+0x38>)
 800a41a:	4d0d      	ldr	r5, [pc, #52]	@ (800a450 <__libc_init_array+0x3c>)
 800a41c:	1b64      	subs	r4, r4, r5
 800a41e:	10a4      	asrs	r4, r4, #2
 800a420:	42a6      	cmp	r6, r4
 800a422:	d109      	bne.n	800a438 <__libc_init_array+0x24>
 800a424:	2600      	movs	r6, #0
 800a426:	f002 f991 	bl	800c74c <_init>
 800a42a:	4c0a      	ldr	r4, [pc, #40]	@ (800a454 <__libc_init_array+0x40>)
 800a42c:	4d0a      	ldr	r5, [pc, #40]	@ (800a458 <__libc_init_array+0x44>)
 800a42e:	1b64      	subs	r4, r4, r5
 800a430:	10a4      	asrs	r4, r4, #2
 800a432:	42a6      	cmp	r6, r4
 800a434:	d105      	bne.n	800a442 <__libc_init_array+0x2e>
 800a436:	bd70      	pop	{r4, r5, r6, pc}
 800a438:	00b3      	lsls	r3, r6, #2
 800a43a:	58eb      	ldr	r3, [r5, r3]
 800a43c:	4798      	blx	r3
 800a43e:	3601      	adds	r6, #1
 800a440:	e7ee      	b.n	800a420 <__libc_init_array+0xc>
 800a442:	00b3      	lsls	r3, r6, #2
 800a444:	58eb      	ldr	r3, [r5, r3]
 800a446:	4798      	blx	r3
 800a448:	3601      	adds	r6, #1
 800a44a:	e7f2      	b.n	800a432 <__libc_init_array+0x1e>
 800a44c:	0800ce74 	.word	0x0800ce74
 800a450:	0800ce74 	.word	0x0800ce74
 800a454:	0800ce78 	.word	0x0800ce78
 800a458:	0800ce74 	.word	0x0800ce74

0800a45c <__retarget_lock_init_recursive>:
 800a45c:	4770      	bx	lr

0800a45e <__retarget_lock_acquire_recursive>:
 800a45e:	4770      	bx	lr

0800a460 <__retarget_lock_release_recursive>:
 800a460:	4770      	bx	lr
	...

0800a464 <_localeconv_r>:
 800a464:	4800      	ldr	r0, [pc, #0]	@ (800a468 <_localeconv_r+0x4>)
 800a466:	4770      	bx	lr
 800a468:	20000158 	.word	0x20000158

0800a46c <memchr>:
 800a46c:	b2c9      	uxtb	r1, r1
 800a46e:	1882      	adds	r2, r0, r2
 800a470:	4290      	cmp	r0, r2
 800a472:	d101      	bne.n	800a478 <memchr+0xc>
 800a474:	2000      	movs	r0, #0
 800a476:	4770      	bx	lr
 800a478:	7803      	ldrb	r3, [r0, #0]
 800a47a:	428b      	cmp	r3, r1
 800a47c:	d0fb      	beq.n	800a476 <memchr+0xa>
 800a47e:	3001      	adds	r0, #1
 800a480:	e7f6      	b.n	800a470 <memchr+0x4>

0800a482 <memcpy>:
 800a482:	2300      	movs	r3, #0
 800a484:	b510      	push	{r4, lr}
 800a486:	429a      	cmp	r2, r3
 800a488:	d100      	bne.n	800a48c <memcpy+0xa>
 800a48a:	bd10      	pop	{r4, pc}
 800a48c:	5ccc      	ldrb	r4, [r1, r3]
 800a48e:	54c4      	strb	r4, [r0, r3]
 800a490:	3301      	adds	r3, #1
 800a492:	e7f8      	b.n	800a486 <memcpy+0x4>

0800a494 <quorem>:
 800a494:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a496:	6903      	ldr	r3, [r0, #16]
 800a498:	690c      	ldr	r4, [r1, #16]
 800a49a:	b089      	sub	sp, #36	@ 0x24
 800a49c:	9003      	str	r0, [sp, #12]
 800a49e:	9106      	str	r1, [sp, #24]
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	42a3      	cmp	r3, r4
 800a4a4:	db63      	blt.n	800a56e <quorem+0xda>
 800a4a6:	000b      	movs	r3, r1
 800a4a8:	3c01      	subs	r4, #1
 800a4aa:	3314      	adds	r3, #20
 800a4ac:	00a5      	lsls	r5, r4, #2
 800a4ae:	9304      	str	r3, [sp, #16]
 800a4b0:	195b      	adds	r3, r3, r5
 800a4b2:	9305      	str	r3, [sp, #20]
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	3314      	adds	r3, #20
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	195d      	adds	r5, r3, r5
 800a4bc:	9b05      	ldr	r3, [sp, #20]
 800a4be:	682f      	ldr	r7, [r5, #0]
 800a4c0:	681e      	ldr	r6, [r3, #0]
 800a4c2:	0038      	movs	r0, r7
 800a4c4:	3601      	adds	r6, #1
 800a4c6:	0031      	movs	r1, r6
 800a4c8:	f7f5 fe38 	bl	800013c <__udivsi3>
 800a4cc:	9002      	str	r0, [sp, #8]
 800a4ce:	42b7      	cmp	r7, r6
 800a4d0:	d327      	bcc.n	800a522 <quorem+0x8e>
 800a4d2:	9b04      	ldr	r3, [sp, #16]
 800a4d4:	2700      	movs	r7, #0
 800a4d6:	469c      	mov	ip, r3
 800a4d8:	9e01      	ldr	r6, [sp, #4]
 800a4da:	9707      	str	r7, [sp, #28]
 800a4dc:	4662      	mov	r2, ip
 800a4de:	ca08      	ldmia	r2!, {r3}
 800a4e0:	6830      	ldr	r0, [r6, #0]
 800a4e2:	4694      	mov	ip, r2
 800a4e4:	9a02      	ldr	r2, [sp, #8]
 800a4e6:	b299      	uxth	r1, r3
 800a4e8:	4351      	muls	r1, r2
 800a4ea:	0c1b      	lsrs	r3, r3, #16
 800a4ec:	4353      	muls	r3, r2
 800a4ee:	19c9      	adds	r1, r1, r7
 800a4f0:	0c0a      	lsrs	r2, r1, #16
 800a4f2:	189b      	adds	r3, r3, r2
 800a4f4:	b289      	uxth	r1, r1
 800a4f6:	b282      	uxth	r2, r0
 800a4f8:	1a52      	subs	r2, r2, r1
 800a4fa:	9907      	ldr	r1, [sp, #28]
 800a4fc:	0c1f      	lsrs	r7, r3, #16
 800a4fe:	1852      	adds	r2, r2, r1
 800a500:	0c00      	lsrs	r0, r0, #16
 800a502:	b29b      	uxth	r3, r3
 800a504:	1411      	asrs	r1, r2, #16
 800a506:	1ac3      	subs	r3, r0, r3
 800a508:	185b      	adds	r3, r3, r1
 800a50a:	1419      	asrs	r1, r3, #16
 800a50c:	b292      	uxth	r2, r2
 800a50e:	041b      	lsls	r3, r3, #16
 800a510:	431a      	orrs	r2, r3
 800a512:	9b05      	ldr	r3, [sp, #20]
 800a514:	9107      	str	r1, [sp, #28]
 800a516:	c604      	stmia	r6!, {r2}
 800a518:	4563      	cmp	r3, ip
 800a51a:	d2df      	bcs.n	800a4dc <quorem+0x48>
 800a51c:	682b      	ldr	r3, [r5, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d02b      	beq.n	800a57a <quorem+0xe6>
 800a522:	9906      	ldr	r1, [sp, #24]
 800a524:	9803      	ldr	r0, [sp, #12]
 800a526:	f001 fb7d 	bl	800bc24 <__mcmp>
 800a52a:	2800      	cmp	r0, #0
 800a52c:	db1e      	blt.n	800a56c <quorem+0xd8>
 800a52e:	2600      	movs	r6, #0
 800a530:	9d01      	ldr	r5, [sp, #4]
 800a532:	9904      	ldr	r1, [sp, #16]
 800a534:	c901      	ldmia	r1!, {r0}
 800a536:	682b      	ldr	r3, [r5, #0]
 800a538:	b287      	uxth	r7, r0
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	1bd2      	subs	r2, r2, r7
 800a53e:	1992      	adds	r2, r2, r6
 800a540:	0c00      	lsrs	r0, r0, #16
 800a542:	0c1b      	lsrs	r3, r3, #16
 800a544:	1a1b      	subs	r3, r3, r0
 800a546:	1410      	asrs	r0, r2, #16
 800a548:	181b      	adds	r3, r3, r0
 800a54a:	141e      	asrs	r6, r3, #16
 800a54c:	b292      	uxth	r2, r2
 800a54e:	041b      	lsls	r3, r3, #16
 800a550:	431a      	orrs	r2, r3
 800a552:	9b05      	ldr	r3, [sp, #20]
 800a554:	c504      	stmia	r5!, {r2}
 800a556:	428b      	cmp	r3, r1
 800a558:	d2ec      	bcs.n	800a534 <quorem+0xa0>
 800a55a:	9a01      	ldr	r2, [sp, #4]
 800a55c:	00a3      	lsls	r3, r4, #2
 800a55e:	18d3      	adds	r3, r2, r3
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	2a00      	cmp	r2, #0
 800a564:	d014      	beq.n	800a590 <quorem+0xfc>
 800a566:	9b02      	ldr	r3, [sp, #8]
 800a568:	3301      	adds	r3, #1
 800a56a:	9302      	str	r3, [sp, #8]
 800a56c:	9802      	ldr	r0, [sp, #8]
 800a56e:	b009      	add	sp, #36	@ 0x24
 800a570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a572:	682b      	ldr	r3, [r5, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d104      	bne.n	800a582 <quorem+0xee>
 800a578:	3c01      	subs	r4, #1
 800a57a:	9b01      	ldr	r3, [sp, #4]
 800a57c:	3d04      	subs	r5, #4
 800a57e:	42ab      	cmp	r3, r5
 800a580:	d3f7      	bcc.n	800a572 <quorem+0xde>
 800a582:	9b03      	ldr	r3, [sp, #12]
 800a584:	611c      	str	r4, [r3, #16]
 800a586:	e7cc      	b.n	800a522 <quorem+0x8e>
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	2a00      	cmp	r2, #0
 800a58c:	d104      	bne.n	800a598 <quorem+0x104>
 800a58e:	3c01      	subs	r4, #1
 800a590:	9a01      	ldr	r2, [sp, #4]
 800a592:	3b04      	subs	r3, #4
 800a594:	429a      	cmp	r2, r3
 800a596:	d3f7      	bcc.n	800a588 <quorem+0xf4>
 800a598:	9b03      	ldr	r3, [sp, #12]
 800a59a:	611c      	str	r4, [r3, #16]
 800a59c:	e7e3      	b.n	800a566 <quorem+0xd2>
	...

0800a5a0 <_dtoa_r>:
 800a5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5a2:	0014      	movs	r4, r2
 800a5a4:	001d      	movs	r5, r3
 800a5a6:	69c6      	ldr	r6, [r0, #28]
 800a5a8:	b09d      	sub	sp, #116	@ 0x74
 800a5aa:	940a      	str	r4, [sp, #40]	@ 0x28
 800a5ac:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a5ae:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800a5b0:	9003      	str	r0, [sp, #12]
 800a5b2:	2e00      	cmp	r6, #0
 800a5b4:	d10f      	bne.n	800a5d6 <_dtoa_r+0x36>
 800a5b6:	2010      	movs	r0, #16
 800a5b8:	f000 ff40 	bl	800b43c <malloc>
 800a5bc:	9b03      	ldr	r3, [sp, #12]
 800a5be:	1e02      	subs	r2, r0, #0
 800a5c0:	61d8      	str	r0, [r3, #28]
 800a5c2:	d104      	bne.n	800a5ce <_dtoa_r+0x2e>
 800a5c4:	21ef      	movs	r1, #239	@ 0xef
 800a5c6:	4bc7      	ldr	r3, [pc, #796]	@ (800a8e4 <_dtoa_r+0x344>)
 800a5c8:	48c7      	ldr	r0, [pc, #796]	@ (800a8e8 <_dtoa_r+0x348>)
 800a5ca:	f001 fd2f 	bl	800c02c <__assert_func>
 800a5ce:	6046      	str	r6, [r0, #4]
 800a5d0:	6086      	str	r6, [r0, #8]
 800a5d2:	6006      	str	r6, [r0, #0]
 800a5d4:	60c6      	str	r6, [r0, #12]
 800a5d6:	9b03      	ldr	r3, [sp, #12]
 800a5d8:	69db      	ldr	r3, [r3, #28]
 800a5da:	6819      	ldr	r1, [r3, #0]
 800a5dc:	2900      	cmp	r1, #0
 800a5de:	d00b      	beq.n	800a5f8 <_dtoa_r+0x58>
 800a5e0:	685a      	ldr	r2, [r3, #4]
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4093      	lsls	r3, r2
 800a5e6:	604a      	str	r2, [r1, #4]
 800a5e8:	608b      	str	r3, [r1, #8]
 800a5ea:	9803      	ldr	r0, [sp, #12]
 800a5ec:	f001 f8d8 	bl	800b7a0 <_Bfree>
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	9b03      	ldr	r3, [sp, #12]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	601a      	str	r2, [r3, #0]
 800a5f8:	2d00      	cmp	r5, #0
 800a5fa:	da1e      	bge.n	800a63a <_dtoa_r+0x9a>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	603b      	str	r3, [r7, #0]
 800a600:	006b      	lsls	r3, r5, #1
 800a602:	085b      	lsrs	r3, r3, #1
 800a604:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a606:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a608:	4bb8      	ldr	r3, [pc, #736]	@ (800a8ec <_dtoa_r+0x34c>)
 800a60a:	4ab8      	ldr	r2, [pc, #736]	@ (800a8ec <_dtoa_r+0x34c>)
 800a60c:	403b      	ands	r3, r7
 800a60e:	4293      	cmp	r3, r2
 800a610:	d116      	bne.n	800a640 <_dtoa_r+0xa0>
 800a612:	4bb7      	ldr	r3, [pc, #732]	@ (800a8f0 <_dtoa_r+0x350>)
 800a614:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	033b      	lsls	r3, r7, #12
 800a61a:	0b1b      	lsrs	r3, r3, #12
 800a61c:	4323      	orrs	r3, r4
 800a61e:	d101      	bne.n	800a624 <_dtoa_r+0x84>
 800a620:	f000 fd80 	bl	800b124 <_dtoa_r+0xb84>
 800a624:	4bb3      	ldr	r3, [pc, #716]	@ (800a8f4 <_dtoa_r+0x354>)
 800a626:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a628:	9308      	str	r3, [sp, #32]
 800a62a:	2a00      	cmp	r2, #0
 800a62c:	d002      	beq.n	800a634 <_dtoa_r+0x94>
 800a62e:	4bb2      	ldr	r3, [pc, #712]	@ (800a8f8 <_dtoa_r+0x358>)
 800a630:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a632:	6013      	str	r3, [r2, #0]
 800a634:	9808      	ldr	r0, [sp, #32]
 800a636:	b01d      	add	sp, #116	@ 0x74
 800a638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a63a:	2300      	movs	r3, #0
 800a63c:	603b      	str	r3, [r7, #0]
 800a63e:	e7e2      	b.n	800a606 <_dtoa_r+0x66>
 800a640:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a642:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a644:	9212      	str	r2, [sp, #72]	@ 0x48
 800a646:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a648:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a64a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a64c:	2200      	movs	r2, #0
 800a64e:	2300      	movs	r3, #0
 800a650:	f7f5 fefa 	bl	8000448 <__aeabi_dcmpeq>
 800a654:	1e06      	subs	r6, r0, #0
 800a656:	d00b      	beq.n	800a670 <_dtoa_r+0xd0>
 800a658:	2301      	movs	r3, #1
 800a65a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a65c:	6013      	str	r3, [r2, #0]
 800a65e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <_dtoa_r+0xca>
 800a664:	4ba5      	ldr	r3, [pc, #660]	@ (800a8fc <_dtoa_r+0x35c>)
 800a666:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a668:	6013      	str	r3, [r2, #0]
 800a66a:	4ba5      	ldr	r3, [pc, #660]	@ (800a900 <_dtoa_r+0x360>)
 800a66c:	9308      	str	r3, [sp, #32]
 800a66e:	e7e1      	b.n	800a634 <_dtoa_r+0x94>
 800a670:	ab1a      	add	r3, sp, #104	@ 0x68
 800a672:	9301      	str	r3, [sp, #4]
 800a674:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	9803      	ldr	r0, [sp, #12]
 800a67a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a67c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a67e:	f001 fb87 	bl	800bd90 <__d2b>
 800a682:	007a      	lsls	r2, r7, #1
 800a684:	9005      	str	r0, [sp, #20]
 800a686:	0d52      	lsrs	r2, r2, #21
 800a688:	d100      	bne.n	800a68c <_dtoa_r+0xec>
 800a68a:	e07b      	b.n	800a784 <_dtoa_r+0x1e4>
 800a68c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a68e:	9618      	str	r6, [sp, #96]	@ 0x60
 800a690:	0319      	lsls	r1, r3, #12
 800a692:	4b9c      	ldr	r3, [pc, #624]	@ (800a904 <_dtoa_r+0x364>)
 800a694:	0b09      	lsrs	r1, r1, #12
 800a696:	430b      	orrs	r3, r1
 800a698:	499b      	ldr	r1, [pc, #620]	@ (800a908 <_dtoa_r+0x368>)
 800a69a:	1857      	adds	r7, r2, r1
 800a69c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a69e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a6a0:	0019      	movs	r1, r3
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	4b99      	ldr	r3, [pc, #612]	@ (800a90c <_dtoa_r+0x36c>)
 800a6a6:	f7f8 fb55 	bl	8002d54 <__aeabi_dsub>
 800a6aa:	4a99      	ldr	r2, [pc, #612]	@ (800a910 <_dtoa_r+0x370>)
 800a6ac:	4b99      	ldr	r3, [pc, #612]	@ (800a914 <_dtoa_r+0x374>)
 800a6ae:	f7f8 f86b 	bl	8002788 <__aeabi_dmul>
 800a6b2:	4a99      	ldr	r2, [pc, #612]	@ (800a918 <_dtoa_r+0x378>)
 800a6b4:	4b99      	ldr	r3, [pc, #612]	@ (800a91c <_dtoa_r+0x37c>)
 800a6b6:	f7f7 f867 	bl	8001788 <__aeabi_dadd>
 800a6ba:	0004      	movs	r4, r0
 800a6bc:	0038      	movs	r0, r7
 800a6be:	000d      	movs	r5, r1
 800a6c0:	f7f8 ffb0 	bl	8003624 <__aeabi_i2d>
 800a6c4:	4a96      	ldr	r2, [pc, #600]	@ (800a920 <_dtoa_r+0x380>)
 800a6c6:	4b97      	ldr	r3, [pc, #604]	@ (800a924 <_dtoa_r+0x384>)
 800a6c8:	f7f8 f85e 	bl	8002788 <__aeabi_dmul>
 800a6cc:	0002      	movs	r2, r0
 800a6ce:	000b      	movs	r3, r1
 800a6d0:	0020      	movs	r0, r4
 800a6d2:	0029      	movs	r1, r5
 800a6d4:	f7f7 f858 	bl	8001788 <__aeabi_dadd>
 800a6d8:	0004      	movs	r4, r0
 800a6da:	000d      	movs	r5, r1
 800a6dc:	f7f8 ff66 	bl	80035ac <__aeabi_d2iz>
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	9004      	str	r0, [sp, #16]
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	0020      	movs	r0, r4
 800a6e8:	0029      	movs	r1, r5
 800a6ea:	f7f5 feb3 	bl	8000454 <__aeabi_dcmplt>
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d00b      	beq.n	800a70a <_dtoa_r+0x16a>
 800a6f2:	9804      	ldr	r0, [sp, #16]
 800a6f4:	f7f8 ff96 	bl	8003624 <__aeabi_i2d>
 800a6f8:	002b      	movs	r3, r5
 800a6fa:	0022      	movs	r2, r4
 800a6fc:	f7f5 fea4 	bl	8000448 <__aeabi_dcmpeq>
 800a700:	4243      	negs	r3, r0
 800a702:	4158      	adcs	r0, r3
 800a704:	9b04      	ldr	r3, [sp, #16]
 800a706:	1a1b      	subs	r3, r3, r0
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	2301      	movs	r3, #1
 800a70c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a70e:	9b04      	ldr	r3, [sp, #16]
 800a710:	2b16      	cmp	r3, #22
 800a712:	d810      	bhi.n	800a736 <_dtoa_r+0x196>
 800a714:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a716:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a718:	9a04      	ldr	r2, [sp, #16]
 800a71a:	4b83      	ldr	r3, [pc, #524]	@ (800a928 <_dtoa_r+0x388>)
 800a71c:	00d2      	lsls	r2, r2, #3
 800a71e:	189b      	adds	r3, r3, r2
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	f7f5 fe96 	bl	8000454 <__aeabi_dcmplt>
 800a728:	2800      	cmp	r0, #0
 800a72a:	d047      	beq.n	800a7bc <_dtoa_r+0x21c>
 800a72c:	9b04      	ldr	r3, [sp, #16]
 800a72e:	3b01      	subs	r3, #1
 800a730:	9304      	str	r3, [sp, #16]
 800a732:	2300      	movs	r3, #0
 800a734:	9315      	str	r3, [sp, #84]	@ 0x54
 800a736:	2200      	movs	r2, #0
 800a738:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a73a:	9206      	str	r2, [sp, #24]
 800a73c:	1bdb      	subs	r3, r3, r7
 800a73e:	1e5a      	subs	r2, r3, #1
 800a740:	d53e      	bpl.n	800a7c0 <_dtoa_r+0x220>
 800a742:	2201      	movs	r2, #1
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	9306      	str	r3, [sp, #24]
 800a748:	2300      	movs	r3, #0
 800a74a:	930d      	str	r3, [sp, #52]	@ 0x34
 800a74c:	9b04      	ldr	r3, [sp, #16]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	db38      	blt.n	800a7c4 <_dtoa_r+0x224>
 800a752:	9a04      	ldr	r2, [sp, #16]
 800a754:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a756:	4694      	mov	ip, r2
 800a758:	4463      	add	r3, ip
 800a75a:	930d      	str	r3, [sp, #52]	@ 0x34
 800a75c:	2300      	movs	r3, #0
 800a75e:	9214      	str	r2, [sp, #80]	@ 0x50
 800a760:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a762:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a764:	2401      	movs	r4, #1
 800a766:	2b09      	cmp	r3, #9
 800a768:	d862      	bhi.n	800a830 <_dtoa_r+0x290>
 800a76a:	2b05      	cmp	r3, #5
 800a76c:	dd02      	ble.n	800a774 <_dtoa_r+0x1d4>
 800a76e:	2400      	movs	r4, #0
 800a770:	3b04      	subs	r3, #4
 800a772:	9322      	str	r3, [sp, #136]	@ 0x88
 800a774:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a776:	1e98      	subs	r0, r3, #2
 800a778:	2803      	cmp	r0, #3
 800a77a:	d863      	bhi.n	800a844 <_dtoa_r+0x2a4>
 800a77c:	f7f5 fcca 	bl	8000114 <__gnu_thumb1_case_uqi>
 800a780:	2b385654 	.word	0x2b385654
 800a784:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a786:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800a788:	18f6      	adds	r6, r6, r3
 800a78a:	4b68      	ldr	r3, [pc, #416]	@ (800a92c <_dtoa_r+0x38c>)
 800a78c:	18f2      	adds	r2, r6, r3
 800a78e:	2a20      	cmp	r2, #32
 800a790:	dd0f      	ble.n	800a7b2 <_dtoa_r+0x212>
 800a792:	2340      	movs	r3, #64	@ 0x40
 800a794:	1a9b      	subs	r3, r3, r2
 800a796:	409f      	lsls	r7, r3
 800a798:	4b65      	ldr	r3, [pc, #404]	@ (800a930 <_dtoa_r+0x390>)
 800a79a:	0038      	movs	r0, r7
 800a79c:	18f3      	adds	r3, r6, r3
 800a79e:	40dc      	lsrs	r4, r3
 800a7a0:	4320      	orrs	r0, r4
 800a7a2:	f7f8 ff6d 	bl	8003680 <__aeabi_ui2d>
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	4b62      	ldr	r3, [pc, #392]	@ (800a934 <_dtoa_r+0x394>)
 800a7aa:	1e77      	subs	r7, r6, #1
 800a7ac:	18cb      	adds	r3, r1, r3
 800a7ae:	9218      	str	r2, [sp, #96]	@ 0x60
 800a7b0:	e776      	b.n	800a6a0 <_dtoa_r+0x100>
 800a7b2:	2320      	movs	r3, #32
 800a7b4:	0020      	movs	r0, r4
 800a7b6:	1a9b      	subs	r3, r3, r2
 800a7b8:	4098      	lsls	r0, r3
 800a7ba:	e7f2      	b.n	800a7a2 <_dtoa_r+0x202>
 800a7bc:	9015      	str	r0, [sp, #84]	@ 0x54
 800a7be:	e7ba      	b.n	800a736 <_dtoa_r+0x196>
 800a7c0:	920d      	str	r2, [sp, #52]	@ 0x34
 800a7c2:	e7c3      	b.n	800a74c <_dtoa_r+0x1ac>
 800a7c4:	9b06      	ldr	r3, [sp, #24]
 800a7c6:	9a04      	ldr	r2, [sp, #16]
 800a7c8:	1a9b      	subs	r3, r3, r2
 800a7ca:	9306      	str	r3, [sp, #24]
 800a7cc:	4253      	negs	r3, r2
 800a7ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	9314      	str	r3, [sp, #80]	@ 0x50
 800a7d4:	e7c5      	b.n	800a762 <_dtoa_r+0x1c2>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a7da:	9310      	str	r3, [sp, #64]	@ 0x40
 800a7dc:	4694      	mov	ip, r2
 800a7de:	9b04      	ldr	r3, [sp, #16]
 800a7e0:	4463      	add	r3, ip
 800a7e2:	930e      	str	r3, [sp, #56]	@ 0x38
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	dc08      	bgt.n	800a7fe <_dtoa_r+0x25e>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e006      	b.n	800a7fe <_dtoa_r+0x25e>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	9310      	str	r3, [sp, #64]	@ 0x40
 800a7f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	dd28      	ble.n	800a84c <_dtoa_r+0x2ac>
 800a7fa:	930e      	str	r3, [sp, #56]	@ 0x38
 800a7fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7fe:	9a03      	ldr	r2, [sp, #12]
 800a800:	2100      	movs	r1, #0
 800a802:	69d0      	ldr	r0, [r2, #28]
 800a804:	2204      	movs	r2, #4
 800a806:	0015      	movs	r5, r2
 800a808:	3514      	adds	r5, #20
 800a80a:	429d      	cmp	r5, r3
 800a80c:	d923      	bls.n	800a856 <_dtoa_r+0x2b6>
 800a80e:	6041      	str	r1, [r0, #4]
 800a810:	9803      	ldr	r0, [sp, #12]
 800a812:	f000 ff81 	bl	800b718 <_Balloc>
 800a816:	9008      	str	r0, [sp, #32]
 800a818:	2800      	cmp	r0, #0
 800a81a:	d11f      	bne.n	800a85c <_dtoa_r+0x2bc>
 800a81c:	21b0      	movs	r1, #176	@ 0xb0
 800a81e:	4b46      	ldr	r3, [pc, #280]	@ (800a938 <_dtoa_r+0x398>)
 800a820:	4831      	ldr	r0, [pc, #196]	@ (800a8e8 <_dtoa_r+0x348>)
 800a822:	9a08      	ldr	r2, [sp, #32]
 800a824:	31ff      	adds	r1, #255	@ 0xff
 800a826:	e6d0      	b.n	800a5ca <_dtoa_r+0x2a>
 800a828:	2300      	movs	r3, #0
 800a82a:	e7e2      	b.n	800a7f2 <_dtoa_r+0x252>
 800a82c:	2300      	movs	r3, #0
 800a82e:	e7d3      	b.n	800a7d8 <_dtoa_r+0x238>
 800a830:	2300      	movs	r3, #0
 800a832:	9410      	str	r4, [sp, #64]	@ 0x40
 800a834:	9322      	str	r3, [sp, #136]	@ 0x88
 800a836:	3b01      	subs	r3, #1
 800a838:	2200      	movs	r2, #0
 800a83a:	930e      	str	r3, [sp, #56]	@ 0x38
 800a83c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a83e:	3313      	adds	r3, #19
 800a840:	9223      	str	r2, [sp, #140]	@ 0x8c
 800a842:	e7dc      	b.n	800a7fe <_dtoa_r+0x25e>
 800a844:	2301      	movs	r3, #1
 800a846:	9310      	str	r3, [sp, #64]	@ 0x40
 800a848:	3b02      	subs	r3, #2
 800a84a:	e7f5      	b.n	800a838 <_dtoa_r+0x298>
 800a84c:	2301      	movs	r3, #1
 800a84e:	001a      	movs	r2, r3
 800a850:	930e      	str	r3, [sp, #56]	@ 0x38
 800a852:	9309      	str	r3, [sp, #36]	@ 0x24
 800a854:	e7f4      	b.n	800a840 <_dtoa_r+0x2a0>
 800a856:	3101      	adds	r1, #1
 800a858:	0052      	lsls	r2, r2, #1
 800a85a:	e7d4      	b.n	800a806 <_dtoa_r+0x266>
 800a85c:	9b03      	ldr	r3, [sp, #12]
 800a85e:	9a08      	ldr	r2, [sp, #32]
 800a860:	69db      	ldr	r3, [r3, #28]
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a866:	2b0e      	cmp	r3, #14
 800a868:	d900      	bls.n	800a86c <_dtoa_r+0x2cc>
 800a86a:	e0d6      	b.n	800aa1a <_dtoa_r+0x47a>
 800a86c:	2c00      	cmp	r4, #0
 800a86e:	d100      	bne.n	800a872 <_dtoa_r+0x2d2>
 800a870:	e0d3      	b.n	800aa1a <_dtoa_r+0x47a>
 800a872:	9b04      	ldr	r3, [sp, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	dd63      	ble.n	800a940 <_dtoa_r+0x3a0>
 800a878:	210f      	movs	r1, #15
 800a87a:	9a04      	ldr	r2, [sp, #16]
 800a87c:	4b2a      	ldr	r3, [pc, #168]	@ (800a928 <_dtoa_r+0x388>)
 800a87e:	400a      	ands	r2, r1
 800a880:	00d2      	lsls	r2, r2, #3
 800a882:	189b      	adds	r3, r3, r2
 800a884:	681e      	ldr	r6, [r3, #0]
 800a886:	685f      	ldr	r7, [r3, #4]
 800a888:	9b04      	ldr	r3, [sp, #16]
 800a88a:	2402      	movs	r4, #2
 800a88c:	111d      	asrs	r5, r3, #4
 800a88e:	05db      	lsls	r3, r3, #23
 800a890:	d50a      	bpl.n	800a8a8 <_dtoa_r+0x308>
 800a892:	4b2a      	ldr	r3, [pc, #168]	@ (800a93c <_dtoa_r+0x39c>)
 800a894:	400d      	ands	r5, r1
 800a896:	6a1a      	ldr	r2, [r3, #32]
 800a898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a89c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a89e:	f7f7 fb39 	bl	8001f14 <__aeabi_ddiv>
 800a8a2:	900a      	str	r0, [sp, #40]	@ 0x28
 800a8a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a8a6:	3401      	adds	r4, #1
 800a8a8:	4b24      	ldr	r3, [pc, #144]	@ (800a93c <_dtoa_r+0x39c>)
 800a8aa:	930c      	str	r3, [sp, #48]	@ 0x30
 800a8ac:	2d00      	cmp	r5, #0
 800a8ae:	d108      	bne.n	800a8c2 <_dtoa_r+0x322>
 800a8b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a8b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a8b4:	0032      	movs	r2, r6
 800a8b6:	003b      	movs	r3, r7
 800a8b8:	f7f7 fb2c 	bl	8001f14 <__aeabi_ddiv>
 800a8bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a8be:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a8c0:	e059      	b.n	800a976 <_dtoa_r+0x3d6>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	421d      	tst	r5, r3
 800a8c6:	d009      	beq.n	800a8dc <_dtoa_r+0x33c>
 800a8c8:	18e4      	adds	r4, r4, r3
 800a8ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8cc:	0030      	movs	r0, r6
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	0039      	movs	r1, r7
 800a8d4:	f7f7 ff58 	bl	8002788 <__aeabi_dmul>
 800a8d8:	0006      	movs	r6, r0
 800a8da:	000f      	movs	r7, r1
 800a8dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a8de:	106d      	asrs	r5, r5, #1
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	e7e2      	b.n	800a8aa <_dtoa_r+0x30a>
 800a8e4:	0800cb35 	.word	0x0800cb35
 800a8e8:	0800cb4c 	.word	0x0800cb4c
 800a8ec:	7ff00000 	.word	0x7ff00000
 800a8f0:	0000270f 	.word	0x0000270f
 800a8f4:	0800cb31 	.word	0x0800cb31
 800a8f8:	0800cb34 	.word	0x0800cb34
 800a8fc:	0800cb05 	.word	0x0800cb05
 800a900:	0800cb04 	.word	0x0800cb04
 800a904:	3ff00000 	.word	0x3ff00000
 800a908:	fffffc01 	.word	0xfffffc01
 800a90c:	3ff80000 	.word	0x3ff80000
 800a910:	636f4361 	.word	0x636f4361
 800a914:	3fd287a7 	.word	0x3fd287a7
 800a918:	8b60c8b3 	.word	0x8b60c8b3
 800a91c:	3fc68a28 	.word	0x3fc68a28
 800a920:	509f79fb 	.word	0x509f79fb
 800a924:	3fd34413 	.word	0x3fd34413
 800a928:	0800cca0 	.word	0x0800cca0
 800a92c:	00000432 	.word	0x00000432
 800a930:	00000412 	.word	0x00000412
 800a934:	fe100000 	.word	0xfe100000
 800a938:	0800cba4 	.word	0x0800cba4
 800a93c:	0800cc78 	.word	0x0800cc78
 800a940:	9b04      	ldr	r3, [sp, #16]
 800a942:	2402      	movs	r4, #2
 800a944:	2b00      	cmp	r3, #0
 800a946:	d016      	beq.n	800a976 <_dtoa_r+0x3d6>
 800a948:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a94a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a94c:	220f      	movs	r2, #15
 800a94e:	425d      	negs	r5, r3
 800a950:	402a      	ands	r2, r5
 800a952:	4bd5      	ldr	r3, [pc, #852]	@ (800aca8 <_dtoa_r+0x708>)
 800a954:	00d2      	lsls	r2, r2, #3
 800a956:	189b      	adds	r3, r3, r2
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	f7f7 ff14 	bl	8002788 <__aeabi_dmul>
 800a960:	2701      	movs	r7, #1
 800a962:	2300      	movs	r3, #0
 800a964:	900a      	str	r0, [sp, #40]	@ 0x28
 800a966:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a968:	4ed0      	ldr	r6, [pc, #832]	@ (800acac <_dtoa_r+0x70c>)
 800a96a:	112d      	asrs	r5, r5, #4
 800a96c:	2d00      	cmp	r5, #0
 800a96e:	d000      	beq.n	800a972 <_dtoa_r+0x3d2>
 800a970:	e095      	b.n	800aa9e <_dtoa_r+0x4fe>
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1a2      	bne.n	800a8bc <_dtoa_r+0x31c>
 800a976:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a978:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a97a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d100      	bne.n	800a982 <_dtoa_r+0x3e2>
 800a980:	e098      	b.n	800aab4 <_dtoa_r+0x514>
 800a982:	2200      	movs	r2, #0
 800a984:	0030      	movs	r0, r6
 800a986:	0039      	movs	r1, r7
 800a988:	4bc9      	ldr	r3, [pc, #804]	@ (800acb0 <_dtoa_r+0x710>)
 800a98a:	f7f5 fd63 	bl	8000454 <__aeabi_dcmplt>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d100      	bne.n	800a994 <_dtoa_r+0x3f4>
 800a992:	e08f      	b.n	800aab4 <_dtoa_r+0x514>
 800a994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	d100      	bne.n	800a99c <_dtoa_r+0x3fc>
 800a99a:	e08b      	b.n	800aab4 <_dtoa_r+0x514>
 800a99c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	dd37      	ble.n	800aa12 <_dtoa_r+0x472>
 800a9a2:	9b04      	ldr	r3, [sp, #16]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a9aa:	0030      	movs	r0, r6
 800a9ac:	4bc1      	ldr	r3, [pc, #772]	@ (800acb4 <_dtoa_r+0x714>)
 800a9ae:	0039      	movs	r1, r7
 800a9b0:	f7f7 feea 	bl	8002788 <__aeabi_dmul>
 800a9b4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a9b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a9b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9ba:	3401      	adds	r4, #1
 800a9bc:	0020      	movs	r0, r4
 800a9be:	9311      	str	r3, [sp, #68]	@ 0x44
 800a9c0:	f7f8 fe30 	bl	8003624 <__aeabi_i2d>
 800a9c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9c8:	f7f7 fede 	bl	8002788 <__aeabi_dmul>
 800a9cc:	4bba      	ldr	r3, [pc, #744]	@ (800acb8 <_dtoa_r+0x718>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f7f6 feda 	bl	8001788 <__aeabi_dadd>
 800a9d4:	4bb9      	ldr	r3, [pc, #740]	@ (800acbc <_dtoa_r+0x71c>)
 800a9d6:	0006      	movs	r6, r0
 800a9d8:	18cf      	adds	r7, r1, r3
 800a9da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d16d      	bne.n	800aabc <_dtoa_r+0x51c>
 800a9e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a9e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	4bb6      	ldr	r3, [pc, #728]	@ (800acc0 <_dtoa_r+0x720>)
 800a9e8:	f7f8 f9b4 	bl	8002d54 <__aeabi_dsub>
 800a9ec:	0032      	movs	r2, r6
 800a9ee:	003b      	movs	r3, r7
 800a9f0:	0004      	movs	r4, r0
 800a9f2:	000d      	movs	r5, r1
 800a9f4:	f7f5 fd42 	bl	800047c <__aeabi_dcmpgt>
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	d000      	beq.n	800a9fe <_dtoa_r+0x45e>
 800a9fc:	e2b6      	b.n	800af6c <_dtoa_r+0x9cc>
 800a9fe:	2180      	movs	r1, #128	@ 0x80
 800aa00:	0609      	lsls	r1, r1, #24
 800aa02:	187b      	adds	r3, r7, r1
 800aa04:	0032      	movs	r2, r6
 800aa06:	0020      	movs	r0, r4
 800aa08:	0029      	movs	r1, r5
 800aa0a:	f7f5 fd23 	bl	8000454 <__aeabi_dcmplt>
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	d128      	bne.n	800aa64 <_dtoa_r+0x4c4>
 800aa12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa14:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800aa16:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa18:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa1a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	da00      	bge.n	800aa22 <_dtoa_r+0x482>
 800aa20:	e174      	b.n	800ad0c <_dtoa_r+0x76c>
 800aa22:	9a04      	ldr	r2, [sp, #16]
 800aa24:	2a0e      	cmp	r2, #14
 800aa26:	dd00      	ble.n	800aa2a <_dtoa_r+0x48a>
 800aa28:	e170      	b.n	800ad0c <_dtoa_r+0x76c>
 800aa2a:	4b9f      	ldr	r3, [pc, #636]	@ (800aca8 <_dtoa_r+0x708>)
 800aa2c:	00d2      	lsls	r2, r2, #3
 800aa2e:	189b      	adds	r3, r3, r2
 800aa30:	685c      	ldr	r4, [r3, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	9306      	str	r3, [sp, #24]
 800aa36:	9407      	str	r4, [sp, #28]
 800aa38:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	db00      	blt.n	800aa40 <_dtoa_r+0x4a0>
 800aa3e:	e0e7      	b.n	800ac10 <_dtoa_r+0x670>
 800aa40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	dd00      	ble.n	800aa48 <_dtoa_r+0x4a8>
 800aa46:	e0e3      	b.n	800ac10 <_dtoa_r+0x670>
 800aa48:	d10c      	bne.n	800aa64 <_dtoa_r+0x4c4>
 800aa4a:	9806      	ldr	r0, [sp, #24]
 800aa4c:	9907      	ldr	r1, [sp, #28]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	4b9b      	ldr	r3, [pc, #620]	@ (800acc0 <_dtoa_r+0x720>)
 800aa52:	f7f7 fe99 	bl	8002788 <__aeabi_dmul>
 800aa56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa5a:	f7f5 fd19 	bl	8000490 <__aeabi_dcmpge>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d100      	bne.n	800aa64 <_dtoa_r+0x4c4>
 800aa62:	e286      	b.n	800af72 <_dtoa_r+0x9d2>
 800aa64:	2600      	movs	r6, #0
 800aa66:	0037      	movs	r7, r6
 800aa68:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aa6a:	9c08      	ldr	r4, [sp, #32]
 800aa6c:	43db      	mvns	r3, r3
 800aa6e:	930c      	str	r3, [sp, #48]	@ 0x30
 800aa70:	9704      	str	r7, [sp, #16]
 800aa72:	2700      	movs	r7, #0
 800aa74:	0031      	movs	r1, r6
 800aa76:	9803      	ldr	r0, [sp, #12]
 800aa78:	f000 fe92 	bl	800b7a0 <_Bfree>
 800aa7c:	9b04      	ldr	r3, [sp, #16]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d100      	bne.n	800aa84 <_dtoa_r+0x4e4>
 800aa82:	e0bb      	b.n	800abfc <_dtoa_r+0x65c>
 800aa84:	2f00      	cmp	r7, #0
 800aa86:	d005      	beq.n	800aa94 <_dtoa_r+0x4f4>
 800aa88:	429f      	cmp	r7, r3
 800aa8a:	d003      	beq.n	800aa94 <_dtoa_r+0x4f4>
 800aa8c:	0039      	movs	r1, r7
 800aa8e:	9803      	ldr	r0, [sp, #12]
 800aa90:	f000 fe86 	bl	800b7a0 <_Bfree>
 800aa94:	9904      	ldr	r1, [sp, #16]
 800aa96:	9803      	ldr	r0, [sp, #12]
 800aa98:	f000 fe82 	bl	800b7a0 <_Bfree>
 800aa9c:	e0ae      	b.n	800abfc <_dtoa_r+0x65c>
 800aa9e:	423d      	tst	r5, r7
 800aaa0:	d005      	beq.n	800aaae <_dtoa_r+0x50e>
 800aaa2:	6832      	ldr	r2, [r6, #0]
 800aaa4:	6873      	ldr	r3, [r6, #4]
 800aaa6:	f7f7 fe6f 	bl	8002788 <__aeabi_dmul>
 800aaaa:	003b      	movs	r3, r7
 800aaac:	3401      	adds	r4, #1
 800aaae:	106d      	asrs	r5, r5, #1
 800aab0:	3608      	adds	r6, #8
 800aab2:	e75b      	b.n	800a96c <_dtoa_r+0x3cc>
 800aab4:	9b04      	ldr	r3, [sp, #16]
 800aab6:	930c      	str	r3, [sp, #48]	@ 0x30
 800aab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaba:	e77f      	b.n	800a9bc <_dtoa_r+0x41c>
 800aabc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aabe:	4b7a      	ldr	r3, [pc, #488]	@ (800aca8 <_dtoa_r+0x708>)
 800aac0:	3a01      	subs	r2, #1
 800aac2:	00d2      	lsls	r2, r2, #3
 800aac4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800aac6:	189b      	adds	r3, r3, r2
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	2900      	cmp	r1, #0
 800aace:	d04c      	beq.n	800ab6a <_dtoa_r+0x5ca>
 800aad0:	2000      	movs	r0, #0
 800aad2:	497c      	ldr	r1, [pc, #496]	@ (800acc4 <_dtoa_r+0x724>)
 800aad4:	f7f7 fa1e 	bl	8001f14 <__aeabi_ddiv>
 800aad8:	0032      	movs	r2, r6
 800aada:	003b      	movs	r3, r7
 800aadc:	f7f8 f93a 	bl	8002d54 <__aeabi_dsub>
 800aae0:	9a08      	ldr	r2, [sp, #32]
 800aae2:	0006      	movs	r6, r0
 800aae4:	4694      	mov	ip, r2
 800aae6:	000f      	movs	r7, r1
 800aae8:	9b08      	ldr	r3, [sp, #32]
 800aaea:	9316      	str	r3, [sp, #88]	@ 0x58
 800aaec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aaee:	4463      	add	r3, ip
 800aaf0:	9311      	str	r3, [sp, #68]	@ 0x44
 800aaf2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aaf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800aaf6:	f7f8 fd59 	bl	80035ac <__aeabi_d2iz>
 800aafa:	0005      	movs	r5, r0
 800aafc:	f7f8 fd92 	bl	8003624 <__aeabi_i2d>
 800ab00:	0002      	movs	r2, r0
 800ab02:	000b      	movs	r3, r1
 800ab04:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab06:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab08:	f7f8 f924 	bl	8002d54 <__aeabi_dsub>
 800ab0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab0e:	3530      	adds	r5, #48	@ 0x30
 800ab10:	1c5c      	adds	r4, r3, #1
 800ab12:	701d      	strb	r5, [r3, #0]
 800ab14:	0032      	movs	r2, r6
 800ab16:	003b      	movs	r3, r7
 800ab18:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab1a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ab1c:	f7f5 fc9a 	bl	8000454 <__aeabi_dcmplt>
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d16b      	bne.n	800abfc <_dtoa_r+0x65c>
 800ab24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab28:	2000      	movs	r0, #0
 800ab2a:	4961      	ldr	r1, [pc, #388]	@ (800acb0 <_dtoa_r+0x710>)
 800ab2c:	f7f8 f912 	bl	8002d54 <__aeabi_dsub>
 800ab30:	0032      	movs	r2, r6
 800ab32:	003b      	movs	r3, r7
 800ab34:	f7f5 fc8e 	bl	8000454 <__aeabi_dcmplt>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	d000      	beq.n	800ab3e <_dtoa_r+0x59e>
 800ab3c:	e0c6      	b.n	800accc <_dtoa_r+0x72c>
 800ab3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab40:	42a3      	cmp	r3, r4
 800ab42:	d100      	bne.n	800ab46 <_dtoa_r+0x5a6>
 800ab44:	e765      	b.n	800aa12 <_dtoa_r+0x472>
 800ab46:	2200      	movs	r2, #0
 800ab48:	0030      	movs	r0, r6
 800ab4a:	0039      	movs	r1, r7
 800ab4c:	4b59      	ldr	r3, [pc, #356]	@ (800acb4 <_dtoa_r+0x714>)
 800ab4e:	f7f7 fe1b 	bl	8002788 <__aeabi_dmul>
 800ab52:	2200      	movs	r2, #0
 800ab54:	0006      	movs	r6, r0
 800ab56:	000f      	movs	r7, r1
 800ab58:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab5c:	4b55      	ldr	r3, [pc, #340]	@ (800acb4 <_dtoa_r+0x714>)
 800ab5e:	f7f7 fe13 	bl	8002788 <__aeabi_dmul>
 800ab62:	9416      	str	r4, [sp, #88]	@ 0x58
 800ab64:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab66:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ab68:	e7c3      	b.n	800aaf2 <_dtoa_r+0x552>
 800ab6a:	0030      	movs	r0, r6
 800ab6c:	0039      	movs	r1, r7
 800ab6e:	f7f7 fe0b 	bl	8002788 <__aeabi_dmul>
 800ab72:	9d08      	ldr	r5, [sp, #32]
 800ab74:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab76:	002b      	movs	r3, r5
 800ab78:	4694      	mov	ip, r2
 800ab7a:	9016      	str	r0, [sp, #88]	@ 0x58
 800ab7c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800ab7e:	4463      	add	r3, ip
 800ab80:	9319      	str	r3, [sp, #100]	@ 0x64
 800ab82:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab86:	f7f8 fd11 	bl	80035ac <__aeabi_d2iz>
 800ab8a:	0004      	movs	r4, r0
 800ab8c:	f7f8 fd4a 	bl	8003624 <__aeabi_i2d>
 800ab90:	000b      	movs	r3, r1
 800ab92:	0002      	movs	r2, r0
 800ab94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ab96:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab98:	f7f8 f8dc 	bl	8002d54 <__aeabi_dsub>
 800ab9c:	3430      	adds	r4, #48	@ 0x30
 800ab9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aba0:	702c      	strb	r4, [r5, #0]
 800aba2:	3501      	adds	r5, #1
 800aba4:	0006      	movs	r6, r0
 800aba6:	000f      	movs	r7, r1
 800aba8:	42ab      	cmp	r3, r5
 800abaa:	d12a      	bne.n	800ac02 <_dtoa_r+0x662>
 800abac:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800abae:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800abb0:	9b08      	ldr	r3, [sp, #32]
 800abb2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800abb4:	469c      	mov	ip, r3
 800abb6:	2200      	movs	r2, #0
 800abb8:	4b42      	ldr	r3, [pc, #264]	@ (800acc4 <_dtoa_r+0x724>)
 800abba:	4464      	add	r4, ip
 800abbc:	f7f6 fde4 	bl	8001788 <__aeabi_dadd>
 800abc0:	0002      	movs	r2, r0
 800abc2:	000b      	movs	r3, r1
 800abc4:	0030      	movs	r0, r6
 800abc6:	0039      	movs	r1, r7
 800abc8:	f7f5 fc58 	bl	800047c <__aeabi_dcmpgt>
 800abcc:	2800      	cmp	r0, #0
 800abce:	d000      	beq.n	800abd2 <_dtoa_r+0x632>
 800abd0:	e07c      	b.n	800accc <_dtoa_r+0x72c>
 800abd2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800abd4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abd6:	2000      	movs	r0, #0
 800abd8:	493a      	ldr	r1, [pc, #232]	@ (800acc4 <_dtoa_r+0x724>)
 800abda:	f7f8 f8bb 	bl	8002d54 <__aeabi_dsub>
 800abde:	0002      	movs	r2, r0
 800abe0:	000b      	movs	r3, r1
 800abe2:	0030      	movs	r0, r6
 800abe4:	0039      	movs	r1, r7
 800abe6:	f7f5 fc35 	bl	8000454 <__aeabi_dcmplt>
 800abea:	2800      	cmp	r0, #0
 800abec:	d100      	bne.n	800abf0 <_dtoa_r+0x650>
 800abee:	e710      	b.n	800aa12 <_dtoa_r+0x472>
 800abf0:	0023      	movs	r3, r4
 800abf2:	3c01      	subs	r4, #1
 800abf4:	7822      	ldrb	r2, [r4, #0]
 800abf6:	2a30      	cmp	r2, #48	@ 0x30
 800abf8:	d0fa      	beq.n	800abf0 <_dtoa_r+0x650>
 800abfa:	001c      	movs	r4, r3
 800abfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800abfe:	9304      	str	r3, [sp, #16]
 800ac00:	e042      	b.n	800ac88 <_dtoa_r+0x6e8>
 800ac02:	2200      	movs	r2, #0
 800ac04:	4b2b      	ldr	r3, [pc, #172]	@ (800acb4 <_dtoa_r+0x714>)
 800ac06:	f7f7 fdbf 	bl	8002788 <__aeabi_dmul>
 800ac0a:	900a      	str	r0, [sp, #40]	@ 0x28
 800ac0c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ac0e:	e7b8      	b.n	800ab82 <_dtoa_r+0x5e2>
 800ac10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac12:	9d08      	ldr	r5, [sp, #32]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	195b      	adds	r3, r3, r5
 800ac18:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ac1a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ac1c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac1e:	9a06      	ldr	r2, [sp, #24]
 800ac20:	9b07      	ldr	r3, [sp, #28]
 800ac22:	0030      	movs	r0, r6
 800ac24:	0039      	movs	r1, r7
 800ac26:	f7f7 f975 	bl	8001f14 <__aeabi_ddiv>
 800ac2a:	f7f8 fcbf 	bl	80035ac <__aeabi_d2iz>
 800ac2e:	9009      	str	r0, [sp, #36]	@ 0x24
 800ac30:	f7f8 fcf8 	bl	8003624 <__aeabi_i2d>
 800ac34:	9a06      	ldr	r2, [sp, #24]
 800ac36:	9b07      	ldr	r3, [sp, #28]
 800ac38:	f7f7 fda6 	bl	8002788 <__aeabi_dmul>
 800ac3c:	0002      	movs	r2, r0
 800ac3e:	000b      	movs	r3, r1
 800ac40:	0030      	movs	r0, r6
 800ac42:	0039      	movs	r1, r7
 800ac44:	f7f8 f886 	bl	8002d54 <__aeabi_dsub>
 800ac48:	002b      	movs	r3, r5
 800ac4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac4c:	3501      	adds	r5, #1
 800ac4e:	3230      	adds	r2, #48	@ 0x30
 800ac50:	701a      	strb	r2, [r3, #0]
 800ac52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac54:	002c      	movs	r4, r5
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d14b      	bne.n	800acf2 <_dtoa_r+0x752>
 800ac5a:	0002      	movs	r2, r0
 800ac5c:	000b      	movs	r3, r1
 800ac5e:	f7f6 fd93 	bl	8001788 <__aeabi_dadd>
 800ac62:	9a06      	ldr	r2, [sp, #24]
 800ac64:	9b07      	ldr	r3, [sp, #28]
 800ac66:	0006      	movs	r6, r0
 800ac68:	000f      	movs	r7, r1
 800ac6a:	f7f5 fc07 	bl	800047c <__aeabi_dcmpgt>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d12a      	bne.n	800acc8 <_dtoa_r+0x728>
 800ac72:	9a06      	ldr	r2, [sp, #24]
 800ac74:	9b07      	ldr	r3, [sp, #28]
 800ac76:	0030      	movs	r0, r6
 800ac78:	0039      	movs	r1, r7
 800ac7a:	f7f5 fbe5 	bl	8000448 <__aeabi_dcmpeq>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d002      	beq.n	800ac88 <_dtoa_r+0x6e8>
 800ac82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac84:	07dd      	lsls	r5, r3, #31
 800ac86:	d41f      	bmi.n	800acc8 <_dtoa_r+0x728>
 800ac88:	9905      	ldr	r1, [sp, #20]
 800ac8a:	9803      	ldr	r0, [sp, #12]
 800ac8c:	f000 fd88 	bl	800b7a0 <_Bfree>
 800ac90:	2300      	movs	r3, #0
 800ac92:	7023      	strb	r3, [r4, #0]
 800ac94:	9b04      	ldr	r3, [sp, #16]
 800ac96:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ac98:	3301      	adds	r3, #1
 800ac9a:	6013      	str	r3, [r2, #0]
 800ac9c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d100      	bne.n	800aca4 <_dtoa_r+0x704>
 800aca2:	e4c7      	b.n	800a634 <_dtoa_r+0x94>
 800aca4:	601c      	str	r4, [r3, #0]
 800aca6:	e4c5      	b.n	800a634 <_dtoa_r+0x94>
 800aca8:	0800cca0 	.word	0x0800cca0
 800acac:	0800cc78 	.word	0x0800cc78
 800acb0:	3ff00000 	.word	0x3ff00000
 800acb4:	40240000 	.word	0x40240000
 800acb8:	401c0000 	.word	0x401c0000
 800acbc:	fcc00000 	.word	0xfcc00000
 800acc0:	40140000 	.word	0x40140000
 800acc4:	3fe00000 	.word	0x3fe00000
 800acc8:	9b04      	ldr	r3, [sp, #16]
 800acca:	930c      	str	r3, [sp, #48]	@ 0x30
 800accc:	0023      	movs	r3, r4
 800acce:	001c      	movs	r4, r3
 800acd0:	3b01      	subs	r3, #1
 800acd2:	781a      	ldrb	r2, [r3, #0]
 800acd4:	2a39      	cmp	r2, #57	@ 0x39
 800acd6:	d108      	bne.n	800acea <_dtoa_r+0x74a>
 800acd8:	9a08      	ldr	r2, [sp, #32]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d1f7      	bne.n	800acce <_dtoa_r+0x72e>
 800acde:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ace0:	9908      	ldr	r1, [sp, #32]
 800ace2:	3201      	adds	r2, #1
 800ace4:	920c      	str	r2, [sp, #48]	@ 0x30
 800ace6:	2230      	movs	r2, #48	@ 0x30
 800ace8:	700a      	strb	r2, [r1, #0]
 800acea:	781a      	ldrb	r2, [r3, #0]
 800acec:	3201      	adds	r2, #1
 800acee:	701a      	strb	r2, [r3, #0]
 800acf0:	e784      	b.n	800abfc <_dtoa_r+0x65c>
 800acf2:	2200      	movs	r2, #0
 800acf4:	4bc6      	ldr	r3, [pc, #792]	@ (800b010 <_dtoa_r+0xa70>)
 800acf6:	f7f7 fd47 	bl	8002788 <__aeabi_dmul>
 800acfa:	2200      	movs	r2, #0
 800acfc:	2300      	movs	r3, #0
 800acfe:	0006      	movs	r6, r0
 800ad00:	000f      	movs	r7, r1
 800ad02:	f7f5 fba1 	bl	8000448 <__aeabi_dcmpeq>
 800ad06:	2800      	cmp	r0, #0
 800ad08:	d089      	beq.n	800ac1e <_dtoa_r+0x67e>
 800ad0a:	e7bd      	b.n	800ac88 <_dtoa_r+0x6e8>
 800ad0c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800ad0e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800ad10:	9c06      	ldr	r4, [sp, #24]
 800ad12:	2f00      	cmp	r7, #0
 800ad14:	d014      	beq.n	800ad40 <_dtoa_r+0x7a0>
 800ad16:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ad18:	2a01      	cmp	r2, #1
 800ad1a:	dd00      	ble.n	800ad1e <_dtoa_r+0x77e>
 800ad1c:	e0e4      	b.n	800aee8 <_dtoa_r+0x948>
 800ad1e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800ad20:	2a00      	cmp	r2, #0
 800ad22:	d100      	bne.n	800ad26 <_dtoa_r+0x786>
 800ad24:	e0da      	b.n	800aedc <_dtoa_r+0x93c>
 800ad26:	4abb      	ldr	r2, [pc, #748]	@ (800b014 <_dtoa_r+0xa74>)
 800ad28:	189b      	adds	r3, r3, r2
 800ad2a:	9a06      	ldr	r2, [sp, #24]
 800ad2c:	2101      	movs	r1, #1
 800ad2e:	18d2      	adds	r2, r2, r3
 800ad30:	9206      	str	r2, [sp, #24]
 800ad32:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad34:	9803      	ldr	r0, [sp, #12]
 800ad36:	18d3      	adds	r3, r2, r3
 800ad38:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad3a:	f000 fde9 	bl	800b910 <__i2b>
 800ad3e:	0007      	movs	r7, r0
 800ad40:	2c00      	cmp	r4, #0
 800ad42:	d00e      	beq.n	800ad62 <_dtoa_r+0x7c2>
 800ad44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	dd0b      	ble.n	800ad62 <_dtoa_r+0x7c2>
 800ad4a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad4c:	0023      	movs	r3, r4
 800ad4e:	4294      	cmp	r4, r2
 800ad50:	dd00      	ble.n	800ad54 <_dtoa_r+0x7b4>
 800ad52:	0013      	movs	r3, r2
 800ad54:	9a06      	ldr	r2, [sp, #24]
 800ad56:	1ae4      	subs	r4, r4, r3
 800ad58:	1ad2      	subs	r2, r2, r3
 800ad5a:	9206      	str	r2, [sp, #24]
 800ad5c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad5e:	1ad3      	subs	r3, r2, r3
 800ad60:	930d      	str	r3, [sp, #52]	@ 0x34
 800ad62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d021      	beq.n	800adac <_dtoa_r+0x80c>
 800ad68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d100      	bne.n	800ad70 <_dtoa_r+0x7d0>
 800ad6e:	e0d3      	b.n	800af18 <_dtoa_r+0x978>
 800ad70:	9e05      	ldr	r6, [sp, #20]
 800ad72:	2d00      	cmp	r5, #0
 800ad74:	d014      	beq.n	800ada0 <_dtoa_r+0x800>
 800ad76:	0039      	movs	r1, r7
 800ad78:	002a      	movs	r2, r5
 800ad7a:	9803      	ldr	r0, [sp, #12]
 800ad7c:	f000 fe8a 	bl	800ba94 <__pow5mult>
 800ad80:	9a05      	ldr	r2, [sp, #20]
 800ad82:	0001      	movs	r1, r0
 800ad84:	0007      	movs	r7, r0
 800ad86:	9803      	ldr	r0, [sp, #12]
 800ad88:	f000 fdda 	bl	800b940 <__multiply>
 800ad8c:	0006      	movs	r6, r0
 800ad8e:	9905      	ldr	r1, [sp, #20]
 800ad90:	9803      	ldr	r0, [sp, #12]
 800ad92:	f000 fd05 	bl	800b7a0 <_Bfree>
 800ad96:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad98:	9605      	str	r6, [sp, #20]
 800ad9a:	1b5b      	subs	r3, r3, r5
 800ad9c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad9e:	d005      	beq.n	800adac <_dtoa_r+0x80c>
 800ada0:	0031      	movs	r1, r6
 800ada2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ada4:	9803      	ldr	r0, [sp, #12]
 800ada6:	f000 fe75 	bl	800ba94 <__pow5mult>
 800adaa:	9005      	str	r0, [sp, #20]
 800adac:	2101      	movs	r1, #1
 800adae:	9803      	ldr	r0, [sp, #12]
 800adb0:	f000 fdae 	bl	800b910 <__i2b>
 800adb4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800adb6:	0006      	movs	r6, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d100      	bne.n	800adbe <_dtoa_r+0x81e>
 800adbc:	e1bc      	b.n	800b138 <_dtoa_r+0xb98>
 800adbe:	001a      	movs	r2, r3
 800adc0:	0001      	movs	r1, r0
 800adc2:	9803      	ldr	r0, [sp, #12]
 800adc4:	f000 fe66 	bl	800ba94 <__pow5mult>
 800adc8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800adca:	0006      	movs	r6, r0
 800adcc:	2500      	movs	r5, #0
 800adce:	2b01      	cmp	r3, #1
 800add0:	dc16      	bgt.n	800ae00 <_dtoa_r+0x860>
 800add2:	2500      	movs	r5, #0
 800add4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800add6:	42ab      	cmp	r3, r5
 800add8:	d10e      	bne.n	800adf8 <_dtoa_r+0x858>
 800adda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800addc:	031b      	lsls	r3, r3, #12
 800adde:	42ab      	cmp	r3, r5
 800ade0:	d10a      	bne.n	800adf8 <_dtoa_r+0x858>
 800ade2:	4b8d      	ldr	r3, [pc, #564]	@ (800b018 <_dtoa_r+0xa78>)
 800ade4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ade6:	4213      	tst	r3, r2
 800ade8:	d006      	beq.n	800adf8 <_dtoa_r+0x858>
 800adea:	9b06      	ldr	r3, [sp, #24]
 800adec:	3501      	adds	r5, #1
 800adee:	3301      	adds	r3, #1
 800adf0:	9306      	str	r3, [sp, #24]
 800adf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adf4:	3301      	adds	r3, #1
 800adf6:	930d      	str	r3, [sp, #52]	@ 0x34
 800adf8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800adfa:	2001      	movs	r0, #1
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d008      	beq.n	800ae12 <_dtoa_r+0x872>
 800ae00:	6933      	ldr	r3, [r6, #16]
 800ae02:	3303      	adds	r3, #3
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	18f3      	adds	r3, r6, r3
 800ae08:	6858      	ldr	r0, [r3, #4]
 800ae0a:	f000 fd31 	bl	800b870 <__hi0bits>
 800ae0e:	2320      	movs	r3, #32
 800ae10:	1a18      	subs	r0, r3, r0
 800ae12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae14:	1818      	adds	r0, r3, r0
 800ae16:	0002      	movs	r2, r0
 800ae18:	231f      	movs	r3, #31
 800ae1a:	401a      	ands	r2, r3
 800ae1c:	4218      	tst	r0, r3
 800ae1e:	d100      	bne.n	800ae22 <_dtoa_r+0x882>
 800ae20:	e081      	b.n	800af26 <_dtoa_r+0x986>
 800ae22:	3301      	adds	r3, #1
 800ae24:	1a9b      	subs	r3, r3, r2
 800ae26:	2b04      	cmp	r3, #4
 800ae28:	dd79      	ble.n	800af1e <_dtoa_r+0x97e>
 800ae2a:	231c      	movs	r3, #28
 800ae2c:	1a9b      	subs	r3, r3, r2
 800ae2e:	9a06      	ldr	r2, [sp, #24]
 800ae30:	18e4      	adds	r4, r4, r3
 800ae32:	18d2      	adds	r2, r2, r3
 800ae34:	9206      	str	r2, [sp, #24]
 800ae36:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae38:	18d3      	adds	r3, r2, r3
 800ae3a:	930d      	str	r3, [sp, #52]	@ 0x34
 800ae3c:	9b06      	ldr	r3, [sp, #24]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	dd05      	ble.n	800ae4e <_dtoa_r+0x8ae>
 800ae42:	001a      	movs	r2, r3
 800ae44:	9905      	ldr	r1, [sp, #20]
 800ae46:	9803      	ldr	r0, [sp, #12]
 800ae48:	f000 fe80 	bl	800bb4c <__lshift>
 800ae4c:	9005      	str	r0, [sp, #20]
 800ae4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	dd05      	ble.n	800ae60 <_dtoa_r+0x8c0>
 800ae54:	0031      	movs	r1, r6
 800ae56:	001a      	movs	r2, r3
 800ae58:	9803      	ldr	r0, [sp, #12]
 800ae5a:	f000 fe77 	bl	800bb4c <__lshift>
 800ae5e:	0006      	movs	r6, r0
 800ae60:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d061      	beq.n	800af2a <_dtoa_r+0x98a>
 800ae66:	0031      	movs	r1, r6
 800ae68:	9805      	ldr	r0, [sp, #20]
 800ae6a:	f000 fedb 	bl	800bc24 <__mcmp>
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	da5b      	bge.n	800af2a <_dtoa_r+0x98a>
 800ae72:	9b04      	ldr	r3, [sp, #16]
 800ae74:	220a      	movs	r2, #10
 800ae76:	3b01      	subs	r3, #1
 800ae78:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae7a:	9905      	ldr	r1, [sp, #20]
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	9803      	ldr	r0, [sp, #12]
 800ae80:	f000 fcb2 	bl	800b7e8 <__multadd>
 800ae84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ae86:	9005      	str	r0, [sp, #20]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d100      	bne.n	800ae8e <_dtoa_r+0x8ee>
 800ae8c:	e15b      	b.n	800b146 <_dtoa_r+0xba6>
 800ae8e:	2300      	movs	r3, #0
 800ae90:	0039      	movs	r1, r7
 800ae92:	220a      	movs	r2, #10
 800ae94:	9803      	ldr	r0, [sp, #12]
 800ae96:	f000 fca7 	bl	800b7e8 <__multadd>
 800ae9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae9c:	0007      	movs	r7, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	dc4d      	bgt.n	800af3e <_dtoa_r+0x99e>
 800aea2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	dd46      	ble.n	800af36 <_dtoa_r+0x996>
 800aea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d000      	beq.n	800aeb0 <_dtoa_r+0x910>
 800aeae:	e5db      	b.n	800aa68 <_dtoa_r+0x4c8>
 800aeb0:	0031      	movs	r1, r6
 800aeb2:	2205      	movs	r2, #5
 800aeb4:	9803      	ldr	r0, [sp, #12]
 800aeb6:	f000 fc97 	bl	800b7e8 <__multadd>
 800aeba:	0006      	movs	r6, r0
 800aebc:	0001      	movs	r1, r0
 800aebe:	9805      	ldr	r0, [sp, #20]
 800aec0:	f000 feb0 	bl	800bc24 <__mcmp>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	dc00      	bgt.n	800aeca <_dtoa_r+0x92a>
 800aec8:	e5ce      	b.n	800aa68 <_dtoa_r+0x4c8>
 800aeca:	9b08      	ldr	r3, [sp, #32]
 800aecc:	9a08      	ldr	r2, [sp, #32]
 800aece:	1c5c      	adds	r4, r3, #1
 800aed0:	2331      	movs	r3, #49	@ 0x31
 800aed2:	7013      	strb	r3, [r2, #0]
 800aed4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aed6:	3301      	adds	r3, #1
 800aed8:	930c      	str	r3, [sp, #48]	@ 0x30
 800aeda:	e5c9      	b.n	800aa70 <_dtoa_r+0x4d0>
 800aedc:	2336      	movs	r3, #54	@ 0x36
 800aede:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aee0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800aee2:	1a9b      	subs	r3, r3, r2
 800aee4:	9c06      	ldr	r4, [sp, #24]
 800aee6:	e720      	b.n	800ad2a <_dtoa_r+0x78a>
 800aee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeea:	1e5d      	subs	r5, r3, #1
 800aeec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeee:	42ab      	cmp	r3, r5
 800aef0:	db08      	blt.n	800af04 <_dtoa_r+0x964>
 800aef2:	1b5d      	subs	r5, r3, r5
 800aef4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	daf4      	bge.n	800aee4 <_dtoa_r+0x944>
 800aefa:	9b06      	ldr	r3, [sp, #24]
 800aefc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aefe:	1a9c      	subs	r4, r3, r2
 800af00:	2300      	movs	r3, #0
 800af02:	e712      	b.n	800ad2a <_dtoa_r+0x78a>
 800af04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800af08:	1aeb      	subs	r3, r5, r3
 800af0a:	18d3      	adds	r3, r2, r3
 800af0c:	9314      	str	r3, [sp, #80]	@ 0x50
 800af0e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800af10:	9c06      	ldr	r4, [sp, #24]
 800af12:	2500      	movs	r5, #0
 800af14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af16:	e708      	b.n	800ad2a <_dtoa_r+0x78a>
 800af18:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800af1a:	9905      	ldr	r1, [sp, #20]
 800af1c:	e742      	b.n	800ada4 <_dtoa_r+0x804>
 800af1e:	2b04      	cmp	r3, #4
 800af20:	d08c      	beq.n	800ae3c <_dtoa_r+0x89c>
 800af22:	331c      	adds	r3, #28
 800af24:	e783      	b.n	800ae2e <_dtoa_r+0x88e>
 800af26:	0013      	movs	r3, r2
 800af28:	e7fb      	b.n	800af22 <_dtoa_r+0x982>
 800af2a:	9b04      	ldr	r3, [sp, #16]
 800af2c:	930c      	str	r3, [sp, #48]	@ 0x30
 800af2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af30:	930e      	str	r3, [sp, #56]	@ 0x38
 800af32:	2b00      	cmp	r3, #0
 800af34:	ddb5      	ble.n	800aea2 <_dtoa_r+0x902>
 800af36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d100      	bne.n	800af3e <_dtoa_r+0x99e>
 800af3c:	e107      	b.n	800b14e <_dtoa_r+0xbae>
 800af3e:	2c00      	cmp	r4, #0
 800af40:	dd05      	ble.n	800af4e <_dtoa_r+0x9ae>
 800af42:	0039      	movs	r1, r7
 800af44:	0022      	movs	r2, r4
 800af46:	9803      	ldr	r0, [sp, #12]
 800af48:	f000 fe00 	bl	800bb4c <__lshift>
 800af4c:	0007      	movs	r7, r0
 800af4e:	9704      	str	r7, [sp, #16]
 800af50:	2d00      	cmp	r5, #0
 800af52:	d020      	beq.n	800af96 <_dtoa_r+0x9f6>
 800af54:	6879      	ldr	r1, [r7, #4]
 800af56:	9803      	ldr	r0, [sp, #12]
 800af58:	f000 fbde 	bl	800b718 <_Balloc>
 800af5c:	1e04      	subs	r4, r0, #0
 800af5e:	d10c      	bne.n	800af7a <_dtoa_r+0x9da>
 800af60:	0022      	movs	r2, r4
 800af62:	4b2e      	ldr	r3, [pc, #184]	@ (800b01c <_dtoa_r+0xa7c>)
 800af64:	482e      	ldr	r0, [pc, #184]	@ (800b020 <_dtoa_r+0xa80>)
 800af66:	492f      	ldr	r1, [pc, #188]	@ (800b024 <_dtoa_r+0xa84>)
 800af68:	f7ff fb2f 	bl	800a5ca <_dtoa_r+0x2a>
 800af6c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800af6e:	0037      	movs	r7, r6
 800af70:	e7ab      	b.n	800aeca <_dtoa_r+0x92a>
 800af72:	9b04      	ldr	r3, [sp, #16]
 800af74:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800af76:	930c      	str	r3, [sp, #48]	@ 0x30
 800af78:	e7f9      	b.n	800af6e <_dtoa_r+0x9ce>
 800af7a:	0039      	movs	r1, r7
 800af7c:	693a      	ldr	r2, [r7, #16]
 800af7e:	310c      	adds	r1, #12
 800af80:	3202      	adds	r2, #2
 800af82:	0092      	lsls	r2, r2, #2
 800af84:	300c      	adds	r0, #12
 800af86:	f7ff fa7c 	bl	800a482 <memcpy>
 800af8a:	2201      	movs	r2, #1
 800af8c:	0021      	movs	r1, r4
 800af8e:	9803      	ldr	r0, [sp, #12]
 800af90:	f000 fddc 	bl	800bb4c <__lshift>
 800af94:	9004      	str	r0, [sp, #16]
 800af96:	9b08      	ldr	r3, [sp, #32]
 800af98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af9a:	9306      	str	r3, [sp, #24]
 800af9c:	3b01      	subs	r3, #1
 800af9e:	189b      	adds	r3, r3, r2
 800afa0:	2201      	movs	r2, #1
 800afa2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800afa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afa6:	4013      	ands	r3, r2
 800afa8:	930e      	str	r3, [sp, #56]	@ 0x38
 800afaa:	0031      	movs	r1, r6
 800afac:	9805      	ldr	r0, [sp, #20]
 800afae:	f7ff fa71 	bl	800a494 <quorem>
 800afb2:	0039      	movs	r1, r7
 800afb4:	0005      	movs	r5, r0
 800afb6:	900a      	str	r0, [sp, #40]	@ 0x28
 800afb8:	9805      	ldr	r0, [sp, #20]
 800afba:	f000 fe33 	bl	800bc24 <__mcmp>
 800afbe:	9a04      	ldr	r2, [sp, #16]
 800afc0:	900d      	str	r0, [sp, #52]	@ 0x34
 800afc2:	0031      	movs	r1, r6
 800afc4:	9803      	ldr	r0, [sp, #12]
 800afc6:	f000 fe49 	bl	800bc5c <__mdiff>
 800afca:	2201      	movs	r2, #1
 800afcc:	68c3      	ldr	r3, [r0, #12]
 800afce:	0004      	movs	r4, r0
 800afd0:	3530      	adds	r5, #48	@ 0x30
 800afd2:	9209      	str	r2, [sp, #36]	@ 0x24
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d104      	bne.n	800afe2 <_dtoa_r+0xa42>
 800afd8:	0001      	movs	r1, r0
 800afda:	9805      	ldr	r0, [sp, #20]
 800afdc:	f000 fe22 	bl	800bc24 <__mcmp>
 800afe0:	9009      	str	r0, [sp, #36]	@ 0x24
 800afe2:	0021      	movs	r1, r4
 800afe4:	9803      	ldr	r0, [sp, #12]
 800afe6:	f000 fbdb 	bl	800b7a0 <_Bfree>
 800afea:	9b06      	ldr	r3, [sp, #24]
 800afec:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800afee:	1c5c      	adds	r4, r3, #1
 800aff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aff2:	4313      	orrs	r3, r2
 800aff4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aff6:	4313      	orrs	r3, r2
 800aff8:	d116      	bne.n	800b028 <_dtoa_r+0xa88>
 800affa:	2d39      	cmp	r5, #57	@ 0x39
 800affc:	d02f      	beq.n	800b05e <_dtoa_r+0xabe>
 800affe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b000:	2b00      	cmp	r3, #0
 800b002:	dd01      	ble.n	800b008 <_dtoa_r+0xa68>
 800b004:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b006:	3531      	adds	r5, #49	@ 0x31
 800b008:	9b06      	ldr	r3, [sp, #24]
 800b00a:	701d      	strb	r5, [r3, #0]
 800b00c:	e532      	b.n	800aa74 <_dtoa_r+0x4d4>
 800b00e:	46c0      	nop			@ (mov r8, r8)
 800b010:	40240000 	.word	0x40240000
 800b014:	00000433 	.word	0x00000433
 800b018:	7ff00000 	.word	0x7ff00000
 800b01c:	0800cba4 	.word	0x0800cba4
 800b020:	0800cb4c 	.word	0x0800cb4c
 800b024:	000002ef 	.word	0x000002ef
 800b028:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	db04      	blt.n	800b038 <_dtoa_r+0xa98>
 800b02e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b030:	4313      	orrs	r3, r2
 800b032:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b034:	4313      	orrs	r3, r2
 800b036:	d11e      	bne.n	800b076 <_dtoa_r+0xad6>
 800b038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	dde4      	ble.n	800b008 <_dtoa_r+0xa68>
 800b03e:	9905      	ldr	r1, [sp, #20]
 800b040:	2201      	movs	r2, #1
 800b042:	9803      	ldr	r0, [sp, #12]
 800b044:	f000 fd82 	bl	800bb4c <__lshift>
 800b048:	0031      	movs	r1, r6
 800b04a:	9005      	str	r0, [sp, #20]
 800b04c:	f000 fdea 	bl	800bc24 <__mcmp>
 800b050:	2800      	cmp	r0, #0
 800b052:	dc02      	bgt.n	800b05a <_dtoa_r+0xaba>
 800b054:	d1d8      	bne.n	800b008 <_dtoa_r+0xa68>
 800b056:	07eb      	lsls	r3, r5, #31
 800b058:	d5d6      	bpl.n	800b008 <_dtoa_r+0xa68>
 800b05a:	2d39      	cmp	r5, #57	@ 0x39
 800b05c:	d1d2      	bne.n	800b004 <_dtoa_r+0xa64>
 800b05e:	2339      	movs	r3, #57	@ 0x39
 800b060:	9a06      	ldr	r2, [sp, #24]
 800b062:	7013      	strb	r3, [r2, #0]
 800b064:	0023      	movs	r3, r4
 800b066:	001c      	movs	r4, r3
 800b068:	3b01      	subs	r3, #1
 800b06a:	781a      	ldrb	r2, [r3, #0]
 800b06c:	2a39      	cmp	r2, #57	@ 0x39
 800b06e:	d050      	beq.n	800b112 <_dtoa_r+0xb72>
 800b070:	3201      	adds	r2, #1
 800b072:	701a      	strb	r2, [r3, #0]
 800b074:	e4fe      	b.n	800aa74 <_dtoa_r+0x4d4>
 800b076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b078:	2b00      	cmp	r3, #0
 800b07a:	dd03      	ble.n	800b084 <_dtoa_r+0xae4>
 800b07c:	2d39      	cmp	r5, #57	@ 0x39
 800b07e:	d0ee      	beq.n	800b05e <_dtoa_r+0xabe>
 800b080:	3501      	adds	r5, #1
 800b082:	e7c1      	b.n	800b008 <_dtoa_r+0xa68>
 800b084:	9b06      	ldr	r3, [sp, #24]
 800b086:	9a06      	ldr	r2, [sp, #24]
 800b088:	701d      	strb	r5, [r3, #0]
 800b08a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d02b      	beq.n	800b0e8 <_dtoa_r+0xb48>
 800b090:	2300      	movs	r3, #0
 800b092:	220a      	movs	r2, #10
 800b094:	9905      	ldr	r1, [sp, #20]
 800b096:	9803      	ldr	r0, [sp, #12]
 800b098:	f000 fba6 	bl	800b7e8 <__multadd>
 800b09c:	9b04      	ldr	r3, [sp, #16]
 800b09e:	9005      	str	r0, [sp, #20]
 800b0a0:	429f      	cmp	r7, r3
 800b0a2:	d109      	bne.n	800b0b8 <_dtoa_r+0xb18>
 800b0a4:	0039      	movs	r1, r7
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	220a      	movs	r2, #10
 800b0aa:	9803      	ldr	r0, [sp, #12]
 800b0ac:	f000 fb9c 	bl	800b7e8 <__multadd>
 800b0b0:	0007      	movs	r7, r0
 800b0b2:	9004      	str	r0, [sp, #16]
 800b0b4:	9406      	str	r4, [sp, #24]
 800b0b6:	e778      	b.n	800afaa <_dtoa_r+0xa0a>
 800b0b8:	0039      	movs	r1, r7
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	220a      	movs	r2, #10
 800b0be:	9803      	ldr	r0, [sp, #12]
 800b0c0:	f000 fb92 	bl	800b7e8 <__multadd>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	0007      	movs	r7, r0
 800b0c8:	220a      	movs	r2, #10
 800b0ca:	9904      	ldr	r1, [sp, #16]
 800b0cc:	9803      	ldr	r0, [sp, #12]
 800b0ce:	f000 fb8b 	bl	800b7e8 <__multadd>
 800b0d2:	9004      	str	r0, [sp, #16]
 800b0d4:	e7ee      	b.n	800b0b4 <_dtoa_r+0xb14>
 800b0d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0d8:	2401      	movs	r4, #1
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	dd00      	ble.n	800b0e0 <_dtoa_r+0xb40>
 800b0de:	001c      	movs	r4, r3
 800b0e0:	9704      	str	r7, [sp, #16]
 800b0e2:	2700      	movs	r7, #0
 800b0e4:	9b08      	ldr	r3, [sp, #32]
 800b0e6:	191c      	adds	r4, r3, r4
 800b0e8:	9905      	ldr	r1, [sp, #20]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	9803      	ldr	r0, [sp, #12]
 800b0ee:	f000 fd2d 	bl	800bb4c <__lshift>
 800b0f2:	0031      	movs	r1, r6
 800b0f4:	9005      	str	r0, [sp, #20]
 800b0f6:	f000 fd95 	bl	800bc24 <__mcmp>
 800b0fa:	2800      	cmp	r0, #0
 800b0fc:	dcb2      	bgt.n	800b064 <_dtoa_r+0xac4>
 800b0fe:	d101      	bne.n	800b104 <_dtoa_r+0xb64>
 800b100:	07ed      	lsls	r5, r5, #31
 800b102:	d4af      	bmi.n	800b064 <_dtoa_r+0xac4>
 800b104:	0023      	movs	r3, r4
 800b106:	001c      	movs	r4, r3
 800b108:	3b01      	subs	r3, #1
 800b10a:	781a      	ldrb	r2, [r3, #0]
 800b10c:	2a30      	cmp	r2, #48	@ 0x30
 800b10e:	d0fa      	beq.n	800b106 <_dtoa_r+0xb66>
 800b110:	e4b0      	b.n	800aa74 <_dtoa_r+0x4d4>
 800b112:	9a08      	ldr	r2, [sp, #32]
 800b114:	429a      	cmp	r2, r3
 800b116:	d1a6      	bne.n	800b066 <_dtoa_r+0xac6>
 800b118:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b11a:	3301      	adds	r3, #1
 800b11c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b11e:	2331      	movs	r3, #49	@ 0x31
 800b120:	7013      	strb	r3, [r2, #0]
 800b122:	e4a7      	b.n	800aa74 <_dtoa_r+0x4d4>
 800b124:	4b14      	ldr	r3, [pc, #80]	@ (800b178 <_dtoa_r+0xbd8>)
 800b126:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b128:	9308      	str	r3, [sp, #32]
 800b12a:	4b14      	ldr	r3, [pc, #80]	@ (800b17c <_dtoa_r+0xbdc>)
 800b12c:	2a00      	cmp	r2, #0
 800b12e:	d001      	beq.n	800b134 <_dtoa_r+0xb94>
 800b130:	f7ff fa7e 	bl	800a630 <_dtoa_r+0x90>
 800b134:	f7ff fa7e 	bl	800a634 <_dtoa_r+0x94>
 800b138:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	dc00      	bgt.n	800b140 <_dtoa_r+0xba0>
 800b13e:	e648      	b.n	800add2 <_dtoa_r+0x832>
 800b140:	2001      	movs	r0, #1
 800b142:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800b144:	e665      	b.n	800ae12 <_dtoa_r+0x872>
 800b146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b148:	2b00      	cmp	r3, #0
 800b14a:	dc00      	bgt.n	800b14e <_dtoa_r+0xbae>
 800b14c:	e6a9      	b.n	800aea2 <_dtoa_r+0x902>
 800b14e:	2400      	movs	r4, #0
 800b150:	0031      	movs	r1, r6
 800b152:	9805      	ldr	r0, [sp, #20]
 800b154:	f7ff f99e 	bl	800a494 <quorem>
 800b158:	9b08      	ldr	r3, [sp, #32]
 800b15a:	3030      	adds	r0, #48	@ 0x30
 800b15c:	5518      	strb	r0, [r3, r4]
 800b15e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b160:	3401      	adds	r4, #1
 800b162:	0005      	movs	r5, r0
 800b164:	42a3      	cmp	r3, r4
 800b166:	ddb6      	ble.n	800b0d6 <_dtoa_r+0xb36>
 800b168:	2300      	movs	r3, #0
 800b16a:	220a      	movs	r2, #10
 800b16c:	9905      	ldr	r1, [sp, #20]
 800b16e:	9803      	ldr	r0, [sp, #12]
 800b170:	f000 fb3a 	bl	800b7e8 <__multadd>
 800b174:	9005      	str	r0, [sp, #20]
 800b176:	e7eb      	b.n	800b150 <_dtoa_r+0xbb0>
 800b178:	0800cb28 	.word	0x0800cb28
 800b17c:	0800cb30 	.word	0x0800cb30

0800b180 <__ssputs_r>:
 800b180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b182:	688e      	ldr	r6, [r1, #8]
 800b184:	b085      	sub	sp, #20
 800b186:	001f      	movs	r7, r3
 800b188:	000c      	movs	r4, r1
 800b18a:	680b      	ldr	r3, [r1, #0]
 800b18c:	9002      	str	r0, [sp, #8]
 800b18e:	9203      	str	r2, [sp, #12]
 800b190:	42be      	cmp	r6, r7
 800b192:	d830      	bhi.n	800b1f6 <__ssputs_r+0x76>
 800b194:	210c      	movs	r1, #12
 800b196:	5e62      	ldrsh	r2, [r4, r1]
 800b198:	2190      	movs	r1, #144	@ 0x90
 800b19a:	00c9      	lsls	r1, r1, #3
 800b19c:	420a      	tst	r2, r1
 800b19e:	d028      	beq.n	800b1f2 <__ssputs_r+0x72>
 800b1a0:	2003      	movs	r0, #3
 800b1a2:	6921      	ldr	r1, [r4, #16]
 800b1a4:	1a5b      	subs	r3, r3, r1
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	6963      	ldr	r3, [r4, #20]
 800b1aa:	4343      	muls	r3, r0
 800b1ac:	9801      	ldr	r0, [sp, #4]
 800b1ae:	0fdd      	lsrs	r5, r3, #31
 800b1b0:	18ed      	adds	r5, r5, r3
 800b1b2:	1c7b      	adds	r3, r7, #1
 800b1b4:	181b      	adds	r3, r3, r0
 800b1b6:	106d      	asrs	r5, r5, #1
 800b1b8:	42ab      	cmp	r3, r5
 800b1ba:	d900      	bls.n	800b1be <__ssputs_r+0x3e>
 800b1bc:	001d      	movs	r5, r3
 800b1be:	0552      	lsls	r2, r2, #21
 800b1c0:	d528      	bpl.n	800b214 <__ssputs_r+0x94>
 800b1c2:	0029      	movs	r1, r5
 800b1c4:	9802      	ldr	r0, [sp, #8]
 800b1c6:	f000 f965 	bl	800b494 <_malloc_r>
 800b1ca:	1e06      	subs	r6, r0, #0
 800b1cc:	d02c      	beq.n	800b228 <__ssputs_r+0xa8>
 800b1ce:	9a01      	ldr	r2, [sp, #4]
 800b1d0:	6921      	ldr	r1, [r4, #16]
 800b1d2:	f7ff f956 	bl	800a482 <memcpy>
 800b1d6:	89a2      	ldrh	r2, [r4, #12]
 800b1d8:	4b18      	ldr	r3, [pc, #96]	@ (800b23c <__ssputs_r+0xbc>)
 800b1da:	401a      	ands	r2, r3
 800b1dc:	2380      	movs	r3, #128	@ 0x80
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	81a3      	strh	r3, [r4, #12]
 800b1e2:	9b01      	ldr	r3, [sp, #4]
 800b1e4:	6126      	str	r6, [r4, #16]
 800b1e6:	18f6      	adds	r6, r6, r3
 800b1e8:	6026      	str	r6, [r4, #0]
 800b1ea:	003e      	movs	r6, r7
 800b1ec:	6165      	str	r5, [r4, #20]
 800b1ee:	1aed      	subs	r5, r5, r3
 800b1f0:	60a5      	str	r5, [r4, #8]
 800b1f2:	42be      	cmp	r6, r7
 800b1f4:	d900      	bls.n	800b1f8 <__ssputs_r+0x78>
 800b1f6:	003e      	movs	r6, r7
 800b1f8:	0032      	movs	r2, r6
 800b1fa:	9903      	ldr	r1, [sp, #12]
 800b1fc:	6820      	ldr	r0, [r4, #0]
 800b1fe:	f000 fea3 	bl	800bf48 <memmove>
 800b202:	2000      	movs	r0, #0
 800b204:	68a3      	ldr	r3, [r4, #8]
 800b206:	1b9b      	subs	r3, r3, r6
 800b208:	60a3      	str	r3, [r4, #8]
 800b20a:	6823      	ldr	r3, [r4, #0]
 800b20c:	199b      	adds	r3, r3, r6
 800b20e:	6023      	str	r3, [r4, #0]
 800b210:	b005      	add	sp, #20
 800b212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b214:	002a      	movs	r2, r5
 800b216:	9802      	ldr	r0, [sp, #8]
 800b218:	f000 fe66 	bl	800bee8 <_realloc_r>
 800b21c:	1e06      	subs	r6, r0, #0
 800b21e:	d1e0      	bne.n	800b1e2 <__ssputs_r+0x62>
 800b220:	6921      	ldr	r1, [r4, #16]
 800b222:	9802      	ldr	r0, [sp, #8]
 800b224:	f000 ff4e 	bl	800c0c4 <_free_r>
 800b228:	230c      	movs	r3, #12
 800b22a:	2001      	movs	r0, #1
 800b22c:	9a02      	ldr	r2, [sp, #8]
 800b22e:	4240      	negs	r0, r0
 800b230:	6013      	str	r3, [r2, #0]
 800b232:	89a2      	ldrh	r2, [r4, #12]
 800b234:	3334      	adds	r3, #52	@ 0x34
 800b236:	4313      	orrs	r3, r2
 800b238:	81a3      	strh	r3, [r4, #12]
 800b23a:	e7e9      	b.n	800b210 <__ssputs_r+0x90>
 800b23c:	fffffb7f 	.word	0xfffffb7f

0800b240 <_svfiprintf_r>:
 800b240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b242:	b0a1      	sub	sp, #132	@ 0x84
 800b244:	9003      	str	r0, [sp, #12]
 800b246:	001d      	movs	r5, r3
 800b248:	898b      	ldrh	r3, [r1, #12]
 800b24a:	000f      	movs	r7, r1
 800b24c:	0016      	movs	r6, r2
 800b24e:	061b      	lsls	r3, r3, #24
 800b250:	d511      	bpl.n	800b276 <_svfiprintf_r+0x36>
 800b252:	690b      	ldr	r3, [r1, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10e      	bne.n	800b276 <_svfiprintf_r+0x36>
 800b258:	2140      	movs	r1, #64	@ 0x40
 800b25a:	f000 f91b 	bl	800b494 <_malloc_r>
 800b25e:	6038      	str	r0, [r7, #0]
 800b260:	6138      	str	r0, [r7, #16]
 800b262:	2800      	cmp	r0, #0
 800b264:	d105      	bne.n	800b272 <_svfiprintf_r+0x32>
 800b266:	230c      	movs	r3, #12
 800b268:	9a03      	ldr	r2, [sp, #12]
 800b26a:	6013      	str	r3, [r2, #0]
 800b26c:	2001      	movs	r0, #1
 800b26e:	4240      	negs	r0, r0
 800b270:	e0cf      	b.n	800b412 <_svfiprintf_r+0x1d2>
 800b272:	2340      	movs	r3, #64	@ 0x40
 800b274:	617b      	str	r3, [r7, #20]
 800b276:	2300      	movs	r3, #0
 800b278:	ac08      	add	r4, sp, #32
 800b27a:	6163      	str	r3, [r4, #20]
 800b27c:	3320      	adds	r3, #32
 800b27e:	7663      	strb	r3, [r4, #25]
 800b280:	3310      	adds	r3, #16
 800b282:	76a3      	strb	r3, [r4, #26]
 800b284:	9507      	str	r5, [sp, #28]
 800b286:	0035      	movs	r5, r6
 800b288:	782b      	ldrb	r3, [r5, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <_svfiprintf_r+0x52>
 800b28e:	2b25      	cmp	r3, #37	@ 0x25
 800b290:	d148      	bne.n	800b324 <_svfiprintf_r+0xe4>
 800b292:	1bab      	subs	r3, r5, r6
 800b294:	9305      	str	r3, [sp, #20]
 800b296:	42b5      	cmp	r5, r6
 800b298:	d00b      	beq.n	800b2b2 <_svfiprintf_r+0x72>
 800b29a:	0032      	movs	r2, r6
 800b29c:	0039      	movs	r1, r7
 800b29e:	9803      	ldr	r0, [sp, #12]
 800b2a0:	f7ff ff6e 	bl	800b180 <__ssputs_r>
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	d100      	bne.n	800b2aa <_svfiprintf_r+0x6a>
 800b2a8:	e0ae      	b.n	800b408 <_svfiprintf_r+0x1c8>
 800b2aa:	6963      	ldr	r3, [r4, #20]
 800b2ac:	9a05      	ldr	r2, [sp, #20]
 800b2ae:	189b      	adds	r3, r3, r2
 800b2b0:	6163      	str	r3, [r4, #20]
 800b2b2:	782b      	ldrb	r3, [r5, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d100      	bne.n	800b2ba <_svfiprintf_r+0x7a>
 800b2b8:	e0a6      	b.n	800b408 <_svfiprintf_r+0x1c8>
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4252      	negs	r2, r2
 800b2c0:	6062      	str	r2, [r4, #4]
 800b2c2:	a904      	add	r1, sp, #16
 800b2c4:	3254      	adds	r2, #84	@ 0x54
 800b2c6:	1852      	adds	r2, r2, r1
 800b2c8:	1c6e      	adds	r6, r5, #1
 800b2ca:	6023      	str	r3, [r4, #0]
 800b2cc:	60e3      	str	r3, [r4, #12]
 800b2ce:	60a3      	str	r3, [r4, #8]
 800b2d0:	7013      	strb	r3, [r2, #0]
 800b2d2:	65a3      	str	r3, [r4, #88]	@ 0x58
 800b2d4:	4b54      	ldr	r3, [pc, #336]	@ (800b428 <_svfiprintf_r+0x1e8>)
 800b2d6:	2205      	movs	r2, #5
 800b2d8:	0018      	movs	r0, r3
 800b2da:	7831      	ldrb	r1, [r6, #0]
 800b2dc:	9305      	str	r3, [sp, #20]
 800b2de:	f7ff f8c5 	bl	800a46c <memchr>
 800b2e2:	1c75      	adds	r5, r6, #1
 800b2e4:	2800      	cmp	r0, #0
 800b2e6:	d11f      	bne.n	800b328 <_svfiprintf_r+0xe8>
 800b2e8:	6822      	ldr	r2, [r4, #0]
 800b2ea:	06d3      	lsls	r3, r2, #27
 800b2ec:	d504      	bpl.n	800b2f8 <_svfiprintf_r+0xb8>
 800b2ee:	2353      	movs	r3, #83	@ 0x53
 800b2f0:	a904      	add	r1, sp, #16
 800b2f2:	185b      	adds	r3, r3, r1
 800b2f4:	2120      	movs	r1, #32
 800b2f6:	7019      	strb	r1, [r3, #0]
 800b2f8:	0713      	lsls	r3, r2, #28
 800b2fa:	d504      	bpl.n	800b306 <_svfiprintf_r+0xc6>
 800b2fc:	2353      	movs	r3, #83	@ 0x53
 800b2fe:	a904      	add	r1, sp, #16
 800b300:	185b      	adds	r3, r3, r1
 800b302:	212b      	movs	r1, #43	@ 0x2b
 800b304:	7019      	strb	r1, [r3, #0]
 800b306:	7833      	ldrb	r3, [r6, #0]
 800b308:	2b2a      	cmp	r3, #42	@ 0x2a
 800b30a:	d016      	beq.n	800b33a <_svfiprintf_r+0xfa>
 800b30c:	0035      	movs	r5, r6
 800b30e:	2100      	movs	r1, #0
 800b310:	200a      	movs	r0, #10
 800b312:	68e3      	ldr	r3, [r4, #12]
 800b314:	782a      	ldrb	r2, [r5, #0]
 800b316:	1c6e      	adds	r6, r5, #1
 800b318:	3a30      	subs	r2, #48	@ 0x30
 800b31a:	2a09      	cmp	r2, #9
 800b31c:	d950      	bls.n	800b3c0 <_svfiprintf_r+0x180>
 800b31e:	2900      	cmp	r1, #0
 800b320:	d111      	bne.n	800b346 <_svfiprintf_r+0x106>
 800b322:	e017      	b.n	800b354 <_svfiprintf_r+0x114>
 800b324:	3501      	adds	r5, #1
 800b326:	e7af      	b.n	800b288 <_svfiprintf_r+0x48>
 800b328:	9b05      	ldr	r3, [sp, #20]
 800b32a:	6822      	ldr	r2, [r4, #0]
 800b32c:	1ac0      	subs	r0, r0, r3
 800b32e:	2301      	movs	r3, #1
 800b330:	4083      	lsls	r3, r0
 800b332:	4313      	orrs	r3, r2
 800b334:	002e      	movs	r6, r5
 800b336:	6023      	str	r3, [r4, #0]
 800b338:	e7cc      	b.n	800b2d4 <_svfiprintf_r+0x94>
 800b33a:	9b07      	ldr	r3, [sp, #28]
 800b33c:	1d19      	adds	r1, r3, #4
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	9107      	str	r1, [sp, #28]
 800b342:	2b00      	cmp	r3, #0
 800b344:	db01      	blt.n	800b34a <_svfiprintf_r+0x10a>
 800b346:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b348:	e004      	b.n	800b354 <_svfiprintf_r+0x114>
 800b34a:	425b      	negs	r3, r3
 800b34c:	60e3      	str	r3, [r4, #12]
 800b34e:	2302      	movs	r3, #2
 800b350:	4313      	orrs	r3, r2
 800b352:	6023      	str	r3, [r4, #0]
 800b354:	782b      	ldrb	r3, [r5, #0]
 800b356:	2b2e      	cmp	r3, #46	@ 0x2e
 800b358:	d10c      	bne.n	800b374 <_svfiprintf_r+0x134>
 800b35a:	786b      	ldrb	r3, [r5, #1]
 800b35c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b35e:	d134      	bne.n	800b3ca <_svfiprintf_r+0x18a>
 800b360:	9b07      	ldr	r3, [sp, #28]
 800b362:	3502      	adds	r5, #2
 800b364:	1d1a      	adds	r2, r3, #4
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	9207      	str	r2, [sp, #28]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	da01      	bge.n	800b372 <_svfiprintf_r+0x132>
 800b36e:	2301      	movs	r3, #1
 800b370:	425b      	negs	r3, r3
 800b372:	9309      	str	r3, [sp, #36]	@ 0x24
 800b374:	4e2d      	ldr	r6, [pc, #180]	@ (800b42c <_svfiprintf_r+0x1ec>)
 800b376:	2203      	movs	r2, #3
 800b378:	0030      	movs	r0, r6
 800b37a:	7829      	ldrb	r1, [r5, #0]
 800b37c:	f7ff f876 	bl	800a46c <memchr>
 800b380:	2800      	cmp	r0, #0
 800b382:	d006      	beq.n	800b392 <_svfiprintf_r+0x152>
 800b384:	2340      	movs	r3, #64	@ 0x40
 800b386:	1b80      	subs	r0, r0, r6
 800b388:	4083      	lsls	r3, r0
 800b38a:	6822      	ldr	r2, [r4, #0]
 800b38c:	3501      	adds	r5, #1
 800b38e:	4313      	orrs	r3, r2
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	7829      	ldrb	r1, [r5, #0]
 800b394:	2206      	movs	r2, #6
 800b396:	4826      	ldr	r0, [pc, #152]	@ (800b430 <_svfiprintf_r+0x1f0>)
 800b398:	1c6e      	adds	r6, r5, #1
 800b39a:	7621      	strb	r1, [r4, #24]
 800b39c:	f7ff f866 	bl	800a46c <memchr>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	d038      	beq.n	800b416 <_svfiprintf_r+0x1d6>
 800b3a4:	4b23      	ldr	r3, [pc, #140]	@ (800b434 <_svfiprintf_r+0x1f4>)
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d122      	bne.n	800b3f0 <_svfiprintf_r+0x1b0>
 800b3aa:	2207      	movs	r2, #7
 800b3ac:	9b07      	ldr	r3, [sp, #28]
 800b3ae:	3307      	adds	r3, #7
 800b3b0:	4393      	bics	r3, r2
 800b3b2:	3308      	adds	r3, #8
 800b3b4:	9307      	str	r3, [sp, #28]
 800b3b6:	6963      	ldr	r3, [r4, #20]
 800b3b8:	9a04      	ldr	r2, [sp, #16]
 800b3ba:	189b      	adds	r3, r3, r2
 800b3bc:	6163      	str	r3, [r4, #20]
 800b3be:	e762      	b.n	800b286 <_svfiprintf_r+0x46>
 800b3c0:	4343      	muls	r3, r0
 800b3c2:	0035      	movs	r5, r6
 800b3c4:	2101      	movs	r1, #1
 800b3c6:	189b      	adds	r3, r3, r2
 800b3c8:	e7a4      	b.n	800b314 <_svfiprintf_r+0xd4>
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	200a      	movs	r0, #10
 800b3ce:	0019      	movs	r1, r3
 800b3d0:	3501      	adds	r5, #1
 800b3d2:	6063      	str	r3, [r4, #4]
 800b3d4:	782a      	ldrb	r2, [r5, #0]
 800b3d6:	1c6e      	adds	r6, r5, #1
 800b3d8:	3a30      	subs	r2, #48	@ 0x30
 800b3da:	2a09      	cmp	r2, #9
 800b3dc:	d903      	bls.n	800b3e6 <_svfiprintf_r+0x1a6>
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d0c8      	beq.n	800b374 <_svfiprintf_r+0x134>
 800b3e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b3e4:	e7c6      	b.n	800b374 <_svfiprintf_r+0x134>
 800b3e6:	4341      	muls	r1, r0
 800b3e8:	0035      	movs	r5, r6
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	1889      	adds	r1, r1, r2
 800b3ee:	e7f1      	b.n	800b3d4 <_svfiprintf_r+0x194>
 800b3f0:	aa07      	add	r2, sp, #28
 800b3f2:	9200      	str	r2, [sp, #0]
 800b3f4:	0021      	movs	r1, r4
 800b3f6:	003a      	movs	r2, r7
 800b3f8:	4b0f      	ldr	r3, [pc, #60]	@ (800b438 <_svfiprintf_r+0x1f8>)
 800b3fa:	9803      	ldr	r0, [sp, #12]
 800b3fc:	f7fe fb48 	bl	8009a90 <_printf_float>
 800b400:	9004      	str	r0, [sp, #16]
 800b402:	9b04      	ldr	r3, [sp, #16]
 800b404:	3301      	adds	r3, #1
 800b406:	d1d6      	bne.n	800b3b6 <_svfiprintf_r+0x176>
 800b408:	89bb      	ldrh	r3, [r7, #12]
 800b40a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b40c:	065b      	lsls	r3, r3, #25
 800b40e:	d500      	bpl.n	800b412 <_svfiprintf_r+0x1d2>
 800b410:	e72c      	b.n	800b26c <_svfiprintf_r+0x2c>
 800b412:	b021      	add	sp, #132	@ 0x84
 800b414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b416:	aa07      	add	r2, sp, #28
 800b418:	9200      	str	r2, [sp, #0]
 800b41a:	0021      	movs	r1, r4
 800b41c:	003a      	movs	r2, r7
 800b41e:	4b06      	ldr	r3, [pc, #24]	@ (800b438 <_svfiprintf_r+0x1f8>)
 800b420:	9803      	ldr	r0, [sp, #12]
 800b422:	f7fe fde3 	bl	8009fec <_printf_i>
 800b426:	e7eb      	b.n	800b400 <_svfiprintf_r+0x1c0>
 800b428:	0800cbb5 	.word	0x0800cbb5
 800b42c:	0800cbbb 	.word	0x0800cbbb
 800b430:	0800cbbf 	.word	0x0800cbbf
 800b434:	08009a91 	.word	0x08009a91
 800b438:	0800b181 	.word	0x0800b181

0800b43c <malloc>:
 800b43c:	b510      	push	{r4, lr}
 800b43e:	4b03      	ldr	r3, [pc, #12]	@ (800b44c <malloc+0x10>)
 800b440:	0001      	movs	r1, r0
 800b442:	6818      	ldr	r0, [r3, #0]
 800b444:	f000 f826 	bl	800b494 <_malloc_r>
 800b448:	bd10      	pop	{r4, pc}
 800b44a:	46c0      	nop			@ (mov r8, r8)
 800b44c:	20000018 	.word	0x20000018

0800b450 <sbrk_aligned>:
 800b450:	b570      	push	{r4, r5, r6, lr}
 800b452:	4e0f      	ldr	r6, [pc, #60]	@ (800b490 <sbrk_aligned+0x40>)
 800b454:	000d      	movs	r5, r1
 800b456:	6831      	ldr	r1, [r6, #0]
 800b458:	0004      	movs	r4, r0
 800b45a:	2900      	cmp	r1, #0
 800b45c:	d102      	bne.n	800b464 <sbrk_aligned+0x14>
 800b45e:	f000 fdad 	bl	800bfbc <_sbrk_r>
 800b462:	6030      	str	r0, [r6, #0]
 800b464:	0029      	movs	r1, r5
 800b466:	0020      	movs	r0, r4
 800b468:	f000 fda8 	bl	800bfbc <_sbrk_r>
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	d103      	bne.n	800b478 <sbrk_aligned+0x28>
 800b470:	2501      	movs	r5, #1
 800b472:	426d      	negs	r5, r5
 800b474:	0028      	movs	r0, r5
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	2303      	movs	r3, #3
 800b47a:	1cc5      	adds	r5, r0, #3
 800b47c:	439d      	bics	r5, r3
 800b47e:	42a8      	cmp	r0, r5
 800b480:	d0f8      	beq.n	800b474 <sbrk_aligned+0x24>
 800b482:	1a29      	subs	r1, r5, r0
 800b484:	0020      	movs	r0, r4
 800b486:	f000 fd99 	bl	800bfbc <_sbrk_r>
 800b48a:	3001      	adds	r0, #1
 800b48c:	d1f2      	bne.n	800b474 <sbrk_aligned+0x24>
 800b48e:	e7ef      	b.n	800b470 <sbrk_aligned+0x20>
 800b490:	200004d8 	.word	0x200004d8

0800b494 <_malloc_r>:
 800b494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b496:	2203      	movs	r2, #3
 800b498:	1ccb      	adds	r3, r1, #3
 800b49a:	4393      	bics	r3, r2
 800b49c:	3308      	adds	r3, #8
 800b49e:	0005      	movs	r5, r0
 800b4a0:	001f      	movs	r7, r3
 800b4a2:	2b0c      	cmp	r3, #12
 800b4a4:	d234      	bcs.n	800b510 <_malloc_r+0x7c>
 800b4a6:	270c      	movs	r7, #12
 800b4a8:	42b9      	cmp	r1, r7
 800b4aa:	d833      	bhi.n	800b514 <_malloc_r+0x80>
 800b4ac:	0028      	movs	r0, r5
 800b4ae:	f000 f923 	bl	800b6f8 <__malloc_lock>
 800b4b2:	4e37      	ldr	r6, [pc, #220]	@ (800b590 <_malloc_r+0xfc>)
 800b4b4:	6833      	ldr	r3, [r6, #0]
 800b4b6:	001c      	movs	r4, r3
 800b4b8:	2c00      	cmp	r4, #0
 800b4ba:	d12f      	bne.n	800b51c <_malloc_r+0x88>
 800b4bc:	0039      	movs	r1, r7
 800b4be:	0028      	movs	r0, r5
 800b4c0:	f7ff ffc6 	bl	800b450 <sbrk_aligned>
 800b4c4:	0004      	movs	r4, r0
 800b4c6:	1c43      	adds	r3, r0, #1
 800b4c8:	d15f      	bne.n	800b58a <_malloc_r+0xf6>
 800b4ca:	6834      	ldr	r4, [r6, #0]
 800b4cc:	9400      	str	r4, [sp, #0]
 800b4ce:	9b00      	ldr	r3, [sp, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d14a      	bne.n	800b56a <_malloc_r+0xd6>
 800b4d4:	2c00      	cmp	r4, #0
 800b4d6:	d052      	beq.n	800b57e <_malloc_r+0xea>
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	0028      	movs	r0, r5
 800b4dc:	18e3      	adds	r3, r4, r3
 800b4de:	9900      	ldr	r1, [sp, #0]
 800b4e0:	9301      	str	r3, [sp, #4]
 800b4e2:	f000 fd6b 	bl	800bfbc <_sbrk_r>
 800b4e6:	9b01      	ldr	r3, [sp, #4]
 800b4e8:	4283      	cmp	r3, r0
 800b4ea:	d148      	bne.n	800b57e <_malloc_r+0xea>
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	0028      	movs	r0, r5
 800b4f0:	1aff      	subs	r7, r7, r3
 800b4f2:	0039      	movs	r1, r7
 800b4f4:	f7ff ffac 	bl	800b450 <sbrk_aligned>
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	d040      	beq.n	800b57e <_malloc_r+0xea>
 800b4fc:	6823      	ldr	r3, [r4, #0]
 800b4fe:	19db      	adds	r3, r3, r7
 800b500:	6023      	str	r3, [r4, #0]
 800b502:	6833      	ldr	r3, [r6, #0]
 800b504:	685a      	ldr	r2, [r3, #4]
 800b506:	2a00      	cmp	r2, #0
 800b508:	d133      	bne.n	800b572 <_malloc_r+0xde>
 800b50a:	9b00      	ldr	r3, [sp, #0]
 800b50c:	6033      	str	r3, [r6, #0]
 800b50e:	e019      	b.n	800b544 <_malloc_r+0xb0>
 800b510:	2b00      	cmp	r3, #0
 800b512:	dac9      	bge.n	800b4a8 <_malloc_r+0x14>
 800b514:	230c      	movs	r3, #12
 800b516:	602b      	str	r3, [r5, #0]
 800b518:	2000      	movs	r0, #0
 800b51a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b51c:	6821      	ldr	r1, [r4, #0]
 800b51e:	1bc9      	subs	r1, r1, r7
 800b520:	d420      	bmi.n	800b564 <_malloc_r+0xd0>
 800b522:	290b      	cmp	r1, #11
 800b524:	d90a      	bls.n	800b53c <_malloc_r+0xa8>
 800b526:	19e2      	adds	r2, r4, r7
 800b528:	6027      	str	r7, [r4, #0]
 800b52a:	42a3      	cmp	r3, r4
 800b52c:	d104      	bne.n	800b538 <_malloc_r+0xa4>
 800b52e:	6032      	str	r2, [r6, #0]
 800b530:	6863      	ldr	r3, [r4, #4]
 800b532:	6011      	str	r1, [r2, #0]
 800b534:	6053      	str	r3, [r2, #4]
 800b536:	e005      	b.n	800b544 <_malloc_r+0xb0>
 800b538:	605a      	str	r2, [r3, #4]
 800b53a:	e7f9      	b.n	800b530 <_malloc_r+0x9c>
 800b53c:	6862      	ldr	r2, [r4, #4]
 800b53e:	42a3      	cmp	r3, r4
 800b540:	d10e      	bne.n	800b560 <_malloc_r+0xcc>
 800b542:	6032      	str	r2, [r6, #0]
 800b544:	0028      	movs	r0, r5
 800b546:	f000 f8df 	bl	800b708 <__malloc_unlock>
 800b54a:	0020      	movs	r0, r4
 800b54c:	2207      	movs	r2, #7
 800b54e:	300b      	adds	r0, #11
 800b550:	1d23      	adds	r3, r4, #4
 800b552:	4390      	bics	r0, r2
 800b554:	1ac2      	subs	r2, r0, r3
 800b556:	4298      	cmp	r0, r3
 800b558:	d0df      	beq.n	800b51a <_malloc_r+0x86>
 800b55a:	1a1b      	subs	r3, r3, r0
 800b55c:	50a3      	str	r3, [r4, r2]
 800b55e:	e7dc      	b.n	800b51a <_malloc_r+0x86>
 800b560:	605a      	str	r2, [r3, #4]
 800b562:	e7ef      	b.n	800b544 <_malloc_r+0xb0>
 800b564:	0023      	movs	r3, r4
 800b566:	6864      	ldr	r4, [r4, #4]
 800b568:	e7a6      	b.n	800b4b8 <_malloc_r+0x24>
 800b56a:	9c00      	ldr	r4, [sp, #0]
 800b56c:	6863      	ldr	r3, [r4, #4]
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	e7ad      	b.n	800b4ce <_malloc_r+0x3a>
 800b572:	001a      	movs	r2, r3
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	42a3      	cmp	r3, r4
 800b578:	d1fb      	bne.n	800b572 <_malloc_r+0xde>
 800b57a:	2300      	movs	r3, #0
 800b57c:	e7da      	b.n	800b534 <_malloc_r+0xa0>
 800b57e:	230c      	movs	r3, #12
 800b580:	0028      	movs	r0, r5
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	f000 f8c0 	bl	800b708 <__malloc_unlock>
 800b588:	e7c6      	b.n	800b518 <_malloc_r+0x84>
 800b58a:	6007      	str	r7, [r0, #0]
 800b58c:	e7da      	b.n	800b544 <_malloc_r+0xb0>
 800b58e:	46c0      	nop			@ (mov r8, r8)
 800b590:	200004dc 	.word	0x200004dc

0800b594 <__sflush_r>:
 800b594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b596:	220c      	movs	r2, #12
 800b598:	5e8b      	ldrsh	r3, [r1, r2]
 800b59a:	0005      	movs	r5, r0
 800b59c:	000c      	movs	r4, r1
 800b59e:	071a      	lsls	r2, r3, #28
 800b5a0:	d456      	bmi.n	800b650 <__sflush_r+0xbc>
 800b5a2:	684a      	ldr	r2, [r1, #4]
 800b5a4:	2a00      	cmp	r2, #0
 800b5a6:	dc02      	bgt.n	800b5ae <__sflush_r+0x1a>
 800b5a8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800b5aa:	2a00      	cmp	r2, #0
 800b5ac:	dd4e      	ble.n	800b64c <__sflush_r+0xb8>
 800b5ae:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b5b0:	2f00      	cmp	r7, #0
 800b5b2:	d04b      	beq.n	800b64c <__sflush_r+0xb8>
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	2080      	movs	r0, #128	@ 0x80
 800b5b8:	682e      	ldr	r6, [r5, #0]
 800b5ba:	602a      	str	r2, [r5, #0]
 800b5bc:	001a      	movs	r2, r3
 800b5be:	0140      	lsls	r0, r0, #5
 800b5c0:	6a21      	ldr	r1, [r4, #32]
 800b5c2:	4002      	ands	r2, r0
 800b5c4:	4203      	tst	r3, r0
 800b5c6:	d033      	beq.n	800b630 <__sflush_r+0x9c>
 800b5c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	075b      	lsls	r3, r3, #29
 800b5ce:	d506      	bpl.n	800b5de <__sflush_r+0x4a>
 800b5d0:	6863      	ldr	r3, [r4, #4]
 800b5d2:	1ad2      	subs	r2, r2, r3
 800b5d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <__sflush_r+0x4a>
 800b5da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b5dc:	1ad2      	subs	r2, r2, r3
 800b5de:	2300      	movs	r3, #0
 800b5e0:	0028      	movs	r0, r5
 800b5e2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800b5e4:	6a21      	ldr	r1, [r4, #32]
 800b5e6:	47b8      	blx	r7
 800b5e8:	89a2      	ldrh	r2, [r4, #12]
 800b5ea:	1c43      	adds	r3, r0, #1
 800b5ec:	d106      	bne.n	800b5fc <__sflush_r+0x68>
 800b5ee:	6829      	ldr	r1, [r5, #0]
 800b5f0:	291d      	cmp	r1, #29
 800b5f2:	d846      	bhi.n	800b682 <__sflush_r+0xee>
 800b5f4:	4b29      	ldr	r3, [pc, #164]	@ (800b69c <__sflush_r+0x108>)
 800b5f6:	40cb      	lsrs	r3, r1
 800b5f8:	07db      	lsls	r3, r3, #31
 800b5fa:	d542      	bpl.n	800b682 <__sflush_r+0xee>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	6063      	str	r3, [r4, #4]
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	6023      	str	r3, [r4, #0]
 800b604:	04d2      	lsls	r2, r2, #19
 800b606:	d505      	bpl.n	800b614 <__sflush_r+0x80>
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	d102      	bne.n	800b612 <__sflush_r+0x7e>
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d100      	bne.n	800b614 <__sflush_r+0x80>
 800b612:	6560      	str	r0, [r4, #84]	@ 0x54
 800b614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b616:	602e      	str	r6, [r5, #0]
 800b618:	2900      	cmp	r1, #0
 800b61a:	d017      	beq.n	800b64c <__sflush_r+0xb8>
 800b61c:	0023      	movs	r3, r4
 800b61e:	3344      	adds	r3, #68	@ 0x44
 800b620:	4299      	cmp	r1, r3
 800b622:	d002      	beq.n	800b62a <__sflush_r+0x96>
 800b624:	0028      	movs	r0, r5
 800b626:	f000 fd4d 	bl	800c0c4 <_free_r>
 800b62a:	2300      	movs	r3, #0
 800b62c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b62e:	e00d      	b.n	800b64c <__sflush_r+0xb8>
 800b630:	2301      	movs	r3, #1
 800b632:	0028      	movs	r0, r5
 800b634:	47b8      	blx	r7
 800b636:	0002      	movs	r2, r0
 800b638:	1c43      	adds	r3, r0, #1
 800b63a:	d1c6      	bne.n	800b5ca <__sflush_r+0x36>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d0c3      	beq.n	800b5ca <__sflush_r+0x36>
 800b642:	2b1d      	cmp	r3, #29
 800b644:	d001      	beq.n	800b64a <__sflush_r+0xb6>
 800b646:	2b16      	cmp	r3, #22
 800b648:	d11a      	bne.n	800b680 <__sflush_r+0xec>
 800b64a:	602e      	str	r6, [r5, #0]
 800b64c:	2000      	movs	r0, #0
 800b64e:	e01e      	b.n	800b68e <__sflush_r+0xfa>
 800b650:	690e      	ldr	r6, [r1, #16]
 800b652:	2e00      	cmp	r6, #0
 800b654:	d0fa      	beq.n	800b64c <__sflush_r+0xb8>
 800b656:	680f      	ldr	r7, [r1, #0]
 800b658:	600e      	str	r6, [r1, #0]
 800b65a:	1bba      	subs	r2, r7, r6
 800b65c:	9201      	str	r2, [sp, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	079b      	lsls	r3, r3, #30
 800b662:	d100      	bne.n	800b666 <__sflush_r+0xd2>
 800b664:	694a      	ldr	r2, [r1, #20]
 800b666:	60a2      	str	r2, [r4, #8]
 800b668:	9b01      	ldr	r3, [sp, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	ddee      	ble.n	800b64c <__sflush_r+0xb8>
 800b66e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b670:	0032      	movs	r2, r6
 800b672:	001f      	movs	r7, r3
 800b674:	0028      	movs	r0, r5
 800b676:	9b01      	ldr	r3, [sp, #4]
 800b678:	6a21      	ldr	r1, [r4, #32]
 800b67a:	47b8      	blx	r7
 800b67c:	2800      	cmp	r0, #0
 800b67e:	dc07      	bgt.n	800b690 <__sflush_r+0xfc>
 800b680:	89a2      	ldrh	r2, [r4, #12]
 800b682:	2340      	movs	r3, #64	@ 0x40
 800b684:	2001      	movs	r0, #1
 800b686:	4313      	orrs	r3, r2
 800b688:	b21b      	sxth	r3, r3
 800b68a:	81a3      	strh	r3, [r4, #12]
 800b68c:	4240      	negs	r0, r0
 800b68e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b690:	9b01      	ldr	r3, [sp, #4]
 800b692:	1836      	adds	r6, r6, r0
 800b694:	1a1b      	subs	r3, r3, r0
 800b696:	9301      	str	r3, [sp, #4]
 800b698:	e7e6      	b.n	800b668 <__sflush_r+0xd4>
 800b69a:	46c0      	nop			@ (mov r8, r8)
 800b69c:	20400001 	.word	0x20400001

0800b6a0 <_fflush_r>:
 800b6a0:	690b      	ldr	r3, [r1, #16]
 800b6a2:	b570      	push	{r4, r5, r6, lr}
 800b6a4:	0005      	movs	r5, r0
 800b6a6:	000c      	movs	r4, r1
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d102      	bne.n	800b6b2 <_fflush_r+0x12>
 800b6ac:	2500      	movs	r5, #0
 800b6ae:	0028      	movs	r0, r5
 800b6b0:	bd70      	pop	{r4, r5, r6, pc}
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d004      	beq.n	800b6c0 <_fflush_r+0x20>
 800b6b6:	6a03      	ldr	r3, [r0, #32]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d101      	bne.n	800b6c0 <_fflush_r+0x20>
 800b6bc:	f7fe fe68 	bl	800a390 <__sinit>
 800b6c0:	220c      	movs	r2, #12
 800b6c2:	5ea3      	ldrsh	r3, [r4, r2]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d0f1      	beq.n	800b6ac <_fflush_r+0xc>
 800b6c8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6ca:	07d2      	lsls	r2, r2, #31
 800b6cc:	d404      	bmi.n	800b6d8 <_fflush_r+0x38>
 800b6ce:	059b      	lsls	r3, r3, #22
 800b6d0:	d402      	bmi.n	800b6d8 <_fflush_r+0x38>
 800b6d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6d4:	f7fe fec3 	bl	800a45e <__retarget_lock_acquire_recursive>
 800b6d8:	0028      	movs	r0, r5
 800b6da:	0021      	movs	r1, r4
 800b6dc:	f7ff ff5a 	bl	800b594 <__sflush_r>
 800b6e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b6e2:	0005      	movs	r5, r0
 800b6e4:	07db      	lsls	r3, r3, #31
 800b6e6:	d4e2      	bmi.n	800b6ae <_fflush_r+0xe>
 800b6e8:	89a3      	ldrh	r3, [r4, #12]
 800b6ea:	059b      	lsls	r3, r3, #22
 800b6ec:	d4df      	bmi.n	800b6ae <_fflush_r+0xe>
 800b6ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6f0:	f7fe feb6 	bl	800a460 <__retarget_lock_release_recursive>
 800b6f4:	e7db      	b.n	800b6ae <_fflush_r+0xe>
	...

0800b6f8 <__malloc_lock>:
 800b6f8:	b510      	push	{r4, lr}
 800b6fa:	4802      	ldr	r0, [pc, #8]	@ (800b704 <__malloc_lock+0xc>)
 800b6fc:	f7fe feaf 	bl	800a45e <__retarget_lock_acquire_recursive>
 800b700:	bd10      	pop	{r4, pc}
 800b702:	46c0      	nop			@ (mov r8, r8)
 800b704:	200004d4 	.word	0x200004d4

0800b708 <__malloc_unlock>:
 800b708:	b510      	push	{r4, lr}
 800b70a:	4802      	ldr	r0, [pc, #8]	@ (800b714 <__malloc_unlock+0xc>)
 800b70c:	f7fe fea8 	bl	800a460 <__retarget_lock_release_recursive>
 800b710:	bd10      	pop	{r4, pc}
 800b712:	46c0      	nop			@ (mov r8, r8)
 800b714:	200004d4 	.word	0x200004d4

0800b718 <_Balloc>:
 800b718:	b570      	push	{r4, r5, r6, lr}
 800b71a:	69c5      	ldr	r5, [r0, #28]
 800b71c:	0006      	movs	r6, r0
 800b71e:	000c      	movs	r4, r1
 800b720:	2d00      	cmp	r5, #0
 800b722:	d10e      	bne.n	800b742 <_Balloc+0x2a>
 800b724:	2010      	movs	r0, #16
 800b726:	f7ff fe89 	bl	800b43c <malloc>
 800b72a:	1e02      	subs	r2, r0, #0
 800b72c:	61f0      	str	r0, [r6, #28]
 800b72e:	d104      	bne.n	800b73a <_Balloc+0x22>
 800b730:	216b      	movs	r1, #107	@ 0x6b
 800b732:	4b19      	ldr	r3, [pc, #100]	@ (800b798 <_Balloc+0x80>)
 800b734:	4819      	ldr	r0, [pc, #100]	@ (800b79c <_Balloc+0x84>)
 800b736:	f000 fc79 	bl	800c02c <__assert_func>
 800b73a:	6045      	str	r5, [r0, #4]
 800b73c:	6085      	str	r5, [r0, #8]
 800b73e:	6005      	str	r5, [r0, #0]
 800b740:	60c5      	str	r5, [r0, #12]
 800b742:	69f5      	ldr	r5, [r6, #28]
 800b744:	68eb      	ldr	r3, [r5, #12]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d013      	beq.n	800b772 <_Balloc+0x5a>
 800b74a:	69f3      	ldr	r3, [r6, #28]
 800b74c:	00a2      	lsls	r2, r4, #2
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	189b      	adds	r3, r3, r2
 800b752:	6818      	ldr	r0, [r3, #0]
 800b754:	2800      	cmp	r0, #0
 800b756:	d118      	bne.n	800b78a <_Balloc+0x72>
 800b758:	2101      	movs	r1, #1
 800b75a:	000d      	movs	r5, r1
 800b75c:	40a5      	lsls	r5, r4
 800b75e:	1d6a      	adds	r2, r5, #5
 800b760:	0030      	movs	r0, r6
 800b762:	0092      	lsls	r2, r2, #2
 800b764:	f000 fc80 	bl	800c068 <_calloc_r>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d00c      	beq.n	800b786 <_Balloc+0x6e>
 800b76c:	6044      	str	r4, [r0, #4]
 800b76e:	6085      	str	r5, [r0, #8]
 800b770:	e00d      	b.n	800b78e <_Balloc+0x76>
 800b772:	2221      	movs	r2, #33	@ 0x21
 800b774:	2104      	movs	r1, #4
 800b776:	0030      	movs	r0, r6
 800b778:	f000 fc76 	bl	800c068 <_calloc_r>
 800b77c:	69f3      	ldr	r3, [r6, #28]
 800b77e:	60e8      	str	r0, [r5, #12]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1e1      	bne.n	800b74a <_Balloc+0x32>
 800b786:	2000      	movs	r0, #0
 800b788:	bd70      	pop	{r4, r5, r6, pc}
 800b78a:	6802      	ldr	r2, [r0, #0]
 800b78c:	601a      	str	r2, [r3, #0]
 800b78e:	2300      	movs	r3, #0
 800b790:	6103      	str	r3, [r0, #16]
 800b792:	60c3      	str	r3, [r0, #12]
 800b794:	e7f8      	b.n	800b788 <_Balloc+0x70>
 800b796:	46c0      	nop			@ (mov r8, r8)
 800b798:	0800cb35 	.word	0x0800cb35
 800b79c:	0800cbc6 	.word	0x0800cbc6

0800b7a0 <_Bfree>:
 800b7a0:	b570      	push	{r4, r5, r6, lr}
 800b7a2:	69c6      	ldr	r6, [r0, #28]
 800b7a4:	0005      	movs	r5, r0
 800b7a6:	000c      	movs	r4, r1
 800b7a8:	2e00      	cmp	r6, #0
 800b7aa:	d10e      	bne.n	800b7ca <_Bfree+0x2a>
 800b7ac:	2010      	movs	r0, #16
 800b7ae:	f7ff fe45 	bl	800b43c <malloc>
 800b7b2:	1e02      	subs	r2, r0, #0
 800b7b4:	61e8      	str	r0, [r5, #28]
 800b7b6:	d104      	bne.n	800b7c2 <_Bfree+0x22>
 800b7b8:	218f      	movs	r1, #143	@ 0x8f
 800b7ba:	4b09      	ldr	r3, [pc, #36]	@ (800b7e0 <_Bfree+0x40>)
 800b7bc:	4809      	ldr	r0, [pc, #36]	@ (800b7e4 <_Bfree+0x44>)
 800b7be:	f000 fc35 	bl	800c02c <__assert_func>
 800b7c2:	6046      	str	r6, [r0, #4]
 800b7c4:	6086      	str	r6, [r0, #8]
 800b7c6:	6006      	str	r6, [r0, #0]
 800b7c8:	60c6      	str	r6, [r0, #12]
 800b7ca:	2c00      	cmp	r4, #0
 800b7cc:	d007      	beq.n	800b7de <_Bfree+0x3e>
 800b7ce:	69eb      	ldr	r3, [r5, #28]
 800b7d0:	6862      	ldr	r2, [r4, #4]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	0092      	lsls	r2, r2, #2
 800b7d6:	189b      	adds	r3, r3, r2
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	6022      	str	r2, [r4, #0]
 800b7dc:	601c      	str	r4, [r3, #0]
 800b7de:	bd70      	pop	{r4, r5, r6, pc}
 800b7e0:	0800cb35 	.word	0x0800cb35
 800b7e4:	0800cbc6 	.word	0x0800cbc6

0800b7e8 <__multadd>:
 800b7e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7ea:	000f      	movs	r7, r1
 800b7ec:	9001      	str	r0, [sp, #4]
 800b7ee:	000c      	movs	r4, r1
 800b7f0:	001e      	movs	r6, r3
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	690d      	ldr	r5, [r1, #16]
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	3001      	adds	r0, #1
 800b7fc:	b299      	uxth	r1, r3
 800b7fe:	4351      	muls	r1, r2
 800b800:	0c1b      	lsrs	r3, r3, #16
 800b802:	4353      	muls	r3, r2
 800b804:	1989      	adds	r1, r1, r6
 800b806:	0c0e      	lsrs	r6, r1, #16
 800b808:	199b      	adds	r3, r3, r6
 800b80a:	0c1e      	lsrs	r6, r3, #16
 800b80c:	b289      	uxth	r1, r1
 800b80e:	041b      	lsls	r3, r3, #16
 800b810:	185b      	adds	r3, r3, r1
 800b812:	c708      	stmia	r7!, {r3}
 800b814:	4285      	cmp	r5, r0
 800b816:	dcef      	bgt.n	800b7f8 <__multadd+0x10>
 800b818:	2e00      	cmp	r6, #0
 800b81a:	d022      	beq.n	800b862 <__multadd+0x7a>
 800b81c:	68a3      	ldr	r3, [r4, #8]
 800b81e:	42ab      	cmp	r3, r5
 800b820:	dc19      	bgt.n	800b856 <__multadd+0x6e>
 800b822:	6861      	ldr	r1, [r4, #4]
 800b824:	9801      	ldr	r0, [sp, #4]
 800b826:	3101      	adds	r1, #1
 800b828:	f7ff ff76 	bl	800b718 <_Balloc>
 800b82c:	1e07      	subs	r7, r0, #0
 800b82e:	d105      	bne.n	800b83c <__multadd+0x54>
 800b830:	003a      	movs	r2, r7
 800b832:	21ba      	movs	r1, #186	@ 0xba
 800b834:	4b0c      	ldr	r3, [pc, #48]	@ (800b868 <__multadd+0x80>)
 800b836:	480d      	ldr	r0, [pc, #52]	@ (800b86c <__multadd+0x84>)
 800b838:	f000 fbf8 	bl	800c02c <__assert_func>
 800b83c:	0021      	movs	r1, r4
 800b83e:	6922      	ldr	r2, [r4, #16]
 800b840:	310c      	adds	r1, #12
 800b842:	3202      	adds	r2, #2
 800b844:	0092      	lsls	r2, r2, #2
 800b846:	300c      	adds	r0, #12
 800b848:	f7fe fe1b 	bl	800a482 <memcpy>
 800b84c:	0021      	movs	r1, r4
 800b84e:	9801      	ldr	r0, [sp, #4]
 800b850:	f7ff ffa6 	bl	800b7a0 <_Bfree>
 800b854:	003c      	movs	r4, r7
 800b856:	1d2b      	adds	r3, r5, #4
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	18e3      	adds	r3, r4, r3
 800b85c:	3501      	adds	r5, #1
 800b85e:	605e      	str	r6, [r3, #4]
 800b860:	6125      	str	r5, [r4, #16]
 800b862:	0020      	movs	r0, r4
 800b864:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b866:	46c0      	nop			@ (mov r8, r8)
 800b868:	0800cba4 	.word	0x0800cba4
 800b86c:	0800cbc6 	.word	0x0800cbc6

0800b870 <__hi0bits>:
 800b870:	2280      	movs	r2, #128	@ 0x80
 800b872:	0003      	movs	r3, r0
 800b874:	0252      	lsls	r2, r2, #9
 800b876:	2000      	movs	r0, #0
 800b878:	4293      	cmp	r3, r2
 800b87a:	d201      	bcs.n	800b880 <__hi0bits+0x10>
 800b87c:	041b      	lsls	r3, r3, #16
 800b87e:	3010      	adds	r0, #16
 800b880:	2280      	movs	r2, #128	@ 0x80
 800b882:	0452      	lsls	r2, r2, #17
 800b884:	4293      	cmp	r3, r2
 800b886:	d201      	bcs.n	800b88c <__hi0bits+0x1c>
 800b888:	3008      	adds	r0, #8
 800b88a:	021b      	lsls	r3, r3, #8
 800b88c:	2280      	movs	r2, #128	@ 0x80
 800b88e:	0552      	lsls	r2, r2, #21
 800b890:	4293      	cmp	r3, r2
 800b892:	d201      	bcs.n	800b898 <__hi0bits+0x28>
 800b894:	3004      	adds	r0, #4
 800b896:	011b      	lsls	r3, r3, #4
 800b898:	2280      	movs	r2, #128	@ 0x80
 800b89a:	05d2      	lsls	r2, r2, #23
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d201      	bcs.n	800b8a4 <__hi0bits+0x34>
 800b8a0:	3002      	adds	r0, #2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	db03      	blt.n	800b8b0 <__hi0bits+0x40>
 800b8a8:	3001      	adds	r0, #1
 800b8aa:	4213      	tst	r3, r2
 800b8ac:	d100      	bne.n	800b8b0 <__hi0bits+0x40>
 800b8ae:	2020      	movs	r0, #32
 800b8b0:	4770      	bx	lr

0800b8b2 <__lo0bits>:
 800b8b2:	6803      	ldr	r3, [r0, #0]
 800b8b4:	0001      	movs	r1, r0
 800b8b6:	2207      	movs	r2, #7
 800b8b8:	0018      	movs	r0, r3
 800b8ba:	4010      	ands	r0, r2
 800b8bc:	4213      	tst	r3, r2
 800b8be:	d00d      	beq.n	800b8dc <__lo0bits+0x2a>
 800b8c0:	3a06      	subs	r2, #6
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	4213      	tst	r3, r2
 800b8c6:	d105      	bne.n	800b8d4 <__lo0bits+0x22>
 800b8c8:	3002      	adds	r0, #2
 800b8ca:	4203      	tst	r3, r0
 800b8cc:	d003      	beq.n	800b8d6 <__lo0bits+0x24>
 800b8ce:	40d3      	lsrs	r3, r2
 800b8d0:	0010      	movs	r0, r2
 800b8d2:	600b      	str	r3, [r1, #0]
 800b8d4:	4770      	bx	lr
 800b8d6:	089b      	lsrs	r3, r3, #2
 800b8d8:	600b      	str	r3, [r1, #0]
 800b8da:	e7fb      	b.n	800b8d4 <__lo0bits+0x22>
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	2a00      	cmp	r2, #0
 800b8e0:	d101      	bne.n	800b8e6 <__lo0bits+0x34>
 800b8e2:	2010      	movs	r0, #16
 800b8e4:	0c1b      	lsrs	r3, r3, #16
 800b8e6:	b2da      	uxtb	r2, r3
 800b8e8:	2a00      	cmp	r2, #0
 800b8ea:	d101      	bne.n	800b8f0 <__lo0bits+0x3e>
 800b8ec:	3008      	adds	r0, #8
 800b8ee:	0a1b      	lsrs	r3, r3, #8
 800b8f0:	071a      	lsls	r2, r3, #28
 800b8f2:	d101      	bne.n	800b8f8 <__lo0bits+0x46>
 800b8f4:	3004      	adds	r0, #4
 800b8f6:	091b      	lsrs	r3, r3, #4
 800b8f8:	079a      	lsls	r2, r3, #30
 800b8fa:	d101      	bne.n	800b900 <__lo0bits+0x4e>
 800b8fc:	3002      	adds	r0, #2
 800b8fe:	089b      	lsrs	r3, r3, #2
 800b900:	07da      	lsls	r2, r3, #31
 800b902:	d4e9      	bmi.n	800b8d8 <__lo0bits+0x26>
 800b904:	3001      	adds	r0, #1
 800b906:	085b      	lsrs	r3, r3, #1
 800b908:	d1e6      	bne.n	800b8d8 <__lo0bits+0x26>
 800b90a:	2020      	movs	r0, #32
 800b90c:	e7e2      	b.n	800b8d4 <__lo0bits+0x22>
	...

0800b910 <__i2b>:
 800b910:	b510      	push	{r4, lr}
 800b912:	000c      	movs	r4, r1
 800b914:	2101      	movs	r1, #1
 800b916:	f7ff feff 	bl	800b718 <_Balloc>
 800b91a:	2800      	cmp	r0, #0
 800b91c:	d107      	bne.n	800b92e <__i2b+0x1e>
 800b91e:	2146      	movs	r1, #70	@ 0x46
 800b920:	4c05      	ldr	r4, [pc, #20]	@ (800b938 <__i2b+0x28>)
 800b922:	0002      	movs	r2, r0
 800b924:	4b05      	ldr	r3, [pc, #20]	@ (800b93c <__i2b+0x2c>)
 800b926:	0020      	movs	r0, r4
 800b928:	31ff      	adds	r1, #255	@ 0xff
 800b92a:	f000 fb7f 	bl	800c02c <__assert_func>
 800b92e:	2301      	movs	r3, #1
 800b930:	6144      	str	r4, [r0, #20]
 800b932:	6103      	str	r3, [r0, #16]
 800b934:	bd10      	pop	{r4, pc}
 800b936:	46c0      	nop			@ (mov r8, r8)
 800b938:	0800cbc6 	.word	0x0800cbc6
 800b93c:	0800cba4 	.word	0x0800cba4

0800b940 <__multiply>:
 800b940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b942:	0014      	movs	r4, r2
 800b944:	690a      	ldr	r2, [r1, #16]
 800b946:	6923      	ldr	r3, [r4, #16]
 800b948:	000d      	movs	r5, r1
 800b94a:	b089      	sub	sp, #36	@ 0x24
 800b94c:	429a      	cmp	r2, r3
 800b94e:	db02      	blt.n	800b956 <__multiply+0x16>
 800b950:	0023      	movs	r3, r4
 800b952:	000c      	movs	r4, r1
 800b954:	001d      	movs	r5, r3
 800b956:	6927      	ldr	r7, [r4, #16]
 800b958:	692e      	ldr	r6, [r5, #16]
 800b95a:	6861      	ldr	r1, [r4, #4]
 800b95c:	19bb      	adds	r3, r7, r6
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	68a3      	ldr	r3, [r4, #8]
 800b962:	19ba      	adds	r2, r7, r6
 800b964:	4293      	cmp	r3, r2
 800b966:	da00      	bge.n	800b96a <__multiply+0x2a>
 800b968:	3101      	adds	r1, #1
 800b96a:	f7ff fed5 	bl	800b718 <_Balloc>
 800b96e:	4684      	mov	ip, r0
 800b970:	2800      	cmp	r0, #0
 800b972:	d106      	bne.n	800b982 <__multiply+0x42>
 800b974:	21b1      	movs	r1, #177	@ 0xb1
 800b976:	4662      	mov	r2, ip
 800b978:	4b44      	ldr	r3, [pc, #272]	@ (800ba8c <__multiply+0x14c>)
 800b97a:	4845      	ldr	r0, [pc, #276]	@ (800ba90 <__multiply+0x150>)
 800b97c:	0049      	lsls	r1, r1, #1
 800b97e:	f000 fb55 	bl	800c02c <__assert_func>
 800b982:	0002      	movs	r2, r0
 800b984:	19bb      	adds	r3, r7, r6
 800b986:	3214      	adds	r2, #20
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	18d3      	adds	r3, r2, r3
 800b98c:	9301      	str	r3, [sp, #4]
 800b98e:	2100      	movs	r1, #0
 800b990:	0013      	movs	r3, r2
 800b992:	9801      	ldr	r0, [sp, #4]
 800b994:	4283      	cmp	r3, r0
 800b996:	d328      	bcc.n	800b9ea <__multiply+0xaa>
 800b998:	0023      	movs	r3, r4
 800b99a:	00bf      	lsls	r7, r7, #2
 800b99c:	3314      	adds	r3, #20
 800b99e:	9304      	str	r3, [sp, #16]
 800b9a0:	3514      	adds	r5, #20
 800b9a2:	19db      	adds	r3, r3, r7
 800b9a4:	00b6      	lsls	r6, r6, #2
 800b9a6:	9302      	str	r3, [sp, #8]
 800b9a8:	19ab      	adds	r3, r5, r6
 800b9aa:	9307      	str	r3, [sp, #28]
 800b9ac:	2304      	movs	r3, #4
 800b9ae:	9305      	str	r3, [sp, #20]
 800b9b0:	0023      	movs	r3, r4
 800b9b2:	9902      	ldr	r1, [sp, #8]
 800b9b4:	3315      	adds	r3, #21
 800b9b6:	4299      	cmp	r1, r3
 800b9b8:	d305      	bcc.n	800b9c6 <__multiply+0x86>
 800b9ba:	1b0c      	subs	r4, r1, r4
 800b9bc:	3c15      	subs	r4, #21
 800b9be:	08a4      	lsrs	r4, r4, #2
 800b9c0:	3401      	adds	r4, #1
 800b9c2:	00a3      	lsls	r3, r4, #2
 800b9c4:	9305      	str	r3, [sp, #20]
 800b9c6:	9b07      	ldr	r3, [sp, #28]
 800b9c8:	429d      	cmp	r5, r3
 800b9ca:	d310      	bcc.n	800b9ee <__multiply+0xae>
 800b9cc:	9b00      	ldr	r3, [sp, #0]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	dd05      	ble.n	800b9de <__multiply+0x9e>
 800b9d2:	9b01      	ldr	r3, [sp, #4]
 800b9d4:	3b04      	subs	r3, #4
 800b9d6:	9301      	str	r3, [sp, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d052      	beq.n	800ba84 <__multiply+0x144>
 800b9de:	4663      	mov	r3, ip
 800b9e0:	4660      	mov	r0, ip
 800b9e2:	9a00      	ldr	r2, [sp, #0]
 800b9e4:	611a      	str	r2, [r3, #16]
 800b9e6:	b009      	add	sp, #36	@ 0x24
 800b9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ea:	c302      	stmia	r3!, {r1}
 800b9ec:	e7d1      	b.n	800b992 <__multiply+0x52>
 800b9ee:	682c      	ldr	r4, [r5, #0]
 800b9f0:	b2a4      	uxth	r4, r4
 800b9f2:	2c00      	cmp	r4, #0
 800b9f4:	d01f      	beq.n	800ba36 <__multiply+0xf6>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	0017      	movs	r7, r2
 800b9fa:	9e04      	ldr	r6, [sp, #16]
 800b9fc:	9303      	str	r3, [sp, #12]
 800b9fe:	ce08      	ldmia	r6!, {r3}
 800ba00:	6839      	ldr	r1, [r7, #0]
 800ba02:	9306      	str	r3, [sp, #24]
 800ba04:	466b      	mov	r3, sp
 800ba06:	8b1b      	ldrh	r3, [r3, #24]
 800ba08:	b288      	uxth	r0, r1
 800ba0a:	4363      	muls	r3, r4
 800ba0c:	181b      	adds	r3, r3, r0
 800ba0e:	9803      	ldr	r0, [sp, #12]
 800ba10:	0c09      	lsrs	r1, r1, #16
 800ba12:	181b      	adds	r3, r3, r0
 800ba14:	9806      	ldr	r0, [sp, #24]
 800ba16:	0c00      	lsrs	r0, r0, #16
 800ba18:	4360      	muls	r0, r4
 800ba1a:	1840      	adds	r0, r0, r1
 800ba1c:	0c19      	lsrs	r1, r3, #16
 800ba1e:	1841      	adds	r1, r0, r1
 800ba20:	0c08      	lsrs	r0, r1, #16
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	0409      	lsls	r1, r1, #16
 800ba26:	4319      	orrs	r1, r3
 800ba28:	9b02      	ldr	r3, [sp, #8]
 800ba2a:	9003      	str	r0, [sp, #12]
 800ba2c:	c702      	stmia	r7!, {r1}
 800ba2e:	42b3      	cmp	r3, r6
 800ba30:	d8e5      	bhi.n	800b9fe <__multiply+0xbe>
 800ba32:	9b05      	ldr	r3, [sp, #20]
 800ba34:	50d0      	str	r0, [r2, r3]
 800ba36:	682c      	ldr	r4, [r5, #0]
 800ba38:	0c24      	lsrs	r4, r4, #16
 800ba3a:	d020      	beq.n	800ba7e <__multiply+0x13e>
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	0010      	movs	r0, r2
 800ba40:	6813      	ldr	r3, [r2, #0]
 800ba42:	9e04      	ldr	r6, [sp, #16]
 800ba44:	9103      	str	r1, [sp, #12]
 800ba46:	6831      	ldr	r1, [r6, #0]
 800ba48:	6807      	ldr	r7, [r0, #0]
 800ba4a:	b289      	uxth	r1, r1
 800ba4c:	4361      	muls	r1, r4
 800ba4e:	0c3f      	lsrs	r7, r7, #16
 800ba50:	19c9      	adds	r1, r1, r7
 800ba52:	9f03      	ldr	r7, [sp, #12]
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	19c9      	adds	r1, r1, r7
 800ba58:	040f      	lsls	r7, r1, #16
 800ba5a:	431f      	orrs	r7, r3
 800ba5c:	6007      	str	r7, [r0, #0]
 800ba5e:	ce80      	ldmia	r6!, {r7}
 800ba60:	6843      	ldr	r3, [r0, #4]
 800ba62:	0c3f      	lsrs	r7, r7, #16
 800ba64:	4367      	muls	r7, r4
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	0c09      	lsrs	r1, r1, #16
 800ba6a:	18fb      	adds	r3, r7, r3
 800ba6c:	185b      	adds	r3, r3, r1
 800ba6e:	0c19      	lsrs	r1, r3, #16
 800ba70:	9103      	str	r1, [sp, #12]
 800ba72:	9902      	ldr	r1, [sp, #8]
 800ba74:	3004      	adds	r0, #4
 800ba76:	42b1      	cmp	r1, r6
 800ba78:	d8e5      	bhi.n	800ba46 <__multiply+0x106>
 800ba7a:	9905      	ldr	r1, [sp, #20]
 800ba7c:	5053      	str	r3, [r2, r1]
 800ba7e:	3504      	adds	r5, #4
 800ba80:	3204      	adds	r2, #4
 800ba82:	e7a0      	b.n	800b9c6 <__multiply+0x86>
 800ba84:	9b00      	ldr	r3, [sp, #0]
 800ba86:	3b01      	subs	r3, #1
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	e79f      	b.n	800b9cc <__multiply+0x8c>
 800ba8c:	0800cba4 	.word	0x0800cba4
 800ba90:	0800cbc6 	.word	0x0800cbc6

0800ba94 <__pow5mult>:
 800ba94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba96:	2303      	movs	r3, #3
 800ba98:	0015      	movs	r5, r2
 800ba9a:	0007      	movs	r7, r0
 800ba9c:	000e      	movs	r6, r1
 800ba9e:	401a      	ands	r2, r3
 800baa0:	421d      	tst	r5, r3
 800baa2:	d008      	beq.n	800bab6 <__pow5mult+0x22>
 800baa4:	4925      	ldr	r1, [pc, #148]	@ (800bb3c <__pow5mult+0xa8>)
 800baa6:	3a01      	subs	r2, #1
 800baa8:	0092      	lsls	r2, r2, #2
 800baaa:	5852      	ldr	r2, [r2, r1]
 800baac:	2300      	movs	r3, #0
 800baae:	0031      	movs	r1, r6
 800bab0:	f7ff fe9a 	bl	800b7e8 <__multadd>
 800bab4:	0006      	movs	r6, r0
 800bab6:	10ad      	asrs	r5, r5, #2
 800bab8:	d03d      	beq.n	800bb36 <__pow5mult+0xa2>
 800baba:	69fc      	ldr	r4, [r7, #28]
 800babc:	2c00      	cmp	r4, #0
 800babe:	d10f      	bne.n	800bae0 <__pow5mult+0x4c>
 800bac0:	2010      	movs	r0, #16
 800bac2:	f7ff fcbb 	bl	800b43c <malloc>
 800bac6:	1e02      	subs	r2, r0, #0
 800bac8:	61f8      	str	r0, [r7, #28]
 800baca:	d105      	bne.n	800bad8 <__pow5mult+0x44>
 800bacc:	21b4      	movs	r1, #180	@ 0xb4
 800bace:	4b1c      	ldr	r3, [pc, #112]	@ (800bb40 <__pow5mult+0xac>)
 800bad0:	481c      	ldr	r0, [pc, #112]	@ (800bb44 <__pow5mult+0xb0>)
 800bad2:	31ff      	adds	r1, #255	@ 0xff
 800bad4:	f000 faaa 	bl	800c02c <__assert_func>
 800bad8:	6044      	str	r4, [r0, #4]
 800bada:	6084      	str	r4, [r0, #8]
 800badc:	6004      	str	r4, [r0, #0]
 800bade:	60c4      	str	r4, [r0, #12]
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	689c      	ldr	r4, [r3, #8]
 800bae4:	9301      	str	r3, [sp, #4]
 800bae6:	2c00      	cmp	r4, #0
 800bae8:	d108      	bne.n	800bafc <__pow5mult+0x68>
 800baea:	0038      	movs	r0, r7
 800baec:	4916      	ldr	r1, [pc, #88]	@ (800bb48 <__pow5mult+0xb4>)
 800baee:	f7ff ff0f 	bl	800b910 <__i2b>
 800baf2:	9b01      	ldr	r3, [sp, #4]
 800baf4:	0004      	movs	r4, r0
 800baf6:	6098      	str	r0, [r3, #8]
 800baf8:	2300      	movs	r3, #0
 800bafa:	6003      	str	r3, [r0, #0]
 800bafc:	2301      	movs	r3, #1
 800bafe:	421d      	tst	r5, r3
 800bb00:	d00a      	beq.n	800bb18 <__pow5mult+0x84>
 800bb02:	0031      	movs	r1, r6
 800bb04:	0022      	movs	r2, r4
 800bb06:	0038      	movs	r0, r7
 800bb08:	f7ff ff1a 	bl	800b940 <__multiply>
 800bb0c:	0031      	movs	r1, r6
 800bb0e:	9001      	str	r0, [sp, #4]
 800bb10:	0038      	movs	r0, r7
 800bb12:	f7ff fe45 	bl	800b7a0 <_Bfree>
 800bb16:	9e01      	ldr	r6, [sp, #4]
 800bb18:	106d      	asrs	r5, r5, #1
 800bb1a:	d00c      	beq.n	800bb36 <__pow5mult+0xa2>
 800bb1c:	6820      	ldr	r0, [r4, #0]
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	d107      	bne.n	800bb32 <__pow5mult+0x9e>
 800bb22:	0022      	movs	r2, r4
 800bb24:	0021      	movs	r1, r4
 800bb26:	0038      	movs	r0, r7
 800bb28:	f7ff ff0a 	bl	800b940 <__multiply>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	6020      	str	r0, [r4, #0]
 800bb30:	6003      	str	r3, [r0, #0]
 800bb32:	0004      	movs	r4, r0
 800bb34:	e7e2      	b.n	800bafc <__pow5mult+0x68>
 800bb36:	0030      	movs	r0, r6
 800bb38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb3a:	46c0      	nop			@ (mov r8, r8)
 800bb3c:	0800cc68 	.word	0x0800cc68
 800bb40:	0800cb35 	.word	0x0800cb35
 800bb44:	0800cbc6 	.word	0x0800cbc6
 800bb48:	00000271 	.word	0x00000271

0800bb4c <__lshift>:
 800bb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb4e:	000c      	movs	r4, r1
 800bb50:	0016      	movs	r6, r2
 800bb52:	6923      	ldr	r3, [r4, #16]
 800bb54:	1157      	asrs	r7, r2, #5
 800bb56:	b085      	sub	sp, #20
 800bb58:	18fb      	adds	r3, r7, r3
 800bb5a:	9301      	str	r3, [sp, #4]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	6849      	ldr	r1, [r1, #4]
 800bb62:	68a3      	ldr	r3, [r4, #8]
 800bb64:	9002      	str	r0, [sp, #8]
 800bb66:	9a00      	ldr	r2, [sp, #0]
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	db10      	blt.n	800bb8e <__lshift+0x42>
 800bb6c:	9802      	ldr	r0, [sp, #8]
 800bb6e:	f7ff fdd3 	bl	800b718 <_Balloc>
 800bb72:	2300      	movs	r3, #0
 800bb74:	0001      	movs	r1, r0
 800bb76:	0005      	movs	r5, r0
 800bb78:	001a      	movs	r2, r3
 800bb7a:	3114      	adds	r1, #20
 800bb7c:	4298      	cmp	r0, r3
 800bb7e:	d10c      	bne.n	800bb9a <__lshift+0x4e>
 800bb80:	21ef      	movs	r1, #239	@ 0xef
 800bb82:	002a      	movs	r2, r5
 800bb84:	4b25      	ldr	r3, [pc, #148]	@ (800bc1c <__lshift+0xd0>)
 800bb86:	4826      	ldr	r0, [pc, #152]	@ (800bc20 <__lshift+0xd4>)
 800bb88:	0049      	lsls	r1, r1, #1
 800bb8a:	f000 fa4f 	bl	800c02c <__assert_func>
 800bb8e:	3101      	adds	r1, #1
 800bb90:	005b      	lsls	r3, r3, #1
 800bb92:	e7e8      	b.n	800bb66 <__lshift+0x1a>
 800bb94:	0098      	lsls	r0, r3, #2
 800bb96:	500a      	str	r2, [r1, r0]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	42bb      	cmp	r3, r7
 800bb9c:	dbfa      	blt.n	800bb94 <__lshift+0x48>
 800bb9e:	43fb      	mvns	r3, r7
 800bba0:	17db      	asrs	r3, r3, #31
 800bba2:	401f      	ands	r7, r3
 800bba4:	00bf      	lsls	r7, r7, #2
 800bba6:	0023      	movs	r3, r4
 800bba8:	201f      	movs	r0, #31
 800bbaa:	19c9      	adds	r1, r1, r7
 800bbac:	0037      	movs	r7, r6
 800bbae:	6922      	ldr	r2, [r4, #16]
 800bbb0:	3314      	adds	r3, #20
 800bbb2:	0092      	lsls	r2, r2, #2
 800bbb4:	189a      	adds	r2, r3, r2
 800bbb6:	4007      	ands	r7, r0
 800bbb8:	4206      	tst	r6, r0
 800bbba:	d029      	beq.n	800bc10 <__lshift+0xc4>
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	1bc0      	subs	r0, r0, r7
 800bbc0:	9003      	str	r0, [sp, #12]
 800bbc2:	468c      	mov	ip, r1
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	681e      	ldr	r6, [r3, #0]
 800bbc8:	40be      	lsls	r6, r7
 800bbca:	4306      	orrs	r6, r0
 800bbcc:	4660      	mov	r0, ip
 800bbce:	c040      	stmia	r0!, {r6}
 800bbd0:	4684      	mov	ip, r0
 800bbd2:	9e03      	ldr	r6, [sp, #12]
 800bbd4:	cb01      	ldmia	r3!, {r0}
 800bbd6:	40f0      	lsrs	r0, r6
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d8f4      	bhi.n	800bbc6 <__lshift+0x7a>
 800bbdc:	0026      	movs	r6, r4
 800bbde:	3615      	adds	r6, #21
 800bbe0:	2304      	movs	r3, #4
 800bbe2:	42b2      	cmp	r2, r6
 800bbe4:	d304      	bcc.n	800bbf0 <__lshift+0xa4>
 800bbe6:	1b13      	subs	r3, r2, r4
 800bbe8:	3b15      	subs	r3, #21
 800bbea:	089b      	lsrs	r3, r3, #2
 800bbec:	3301      	adds	r3, #1
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	50c8      	str	r0, [r1, r3]
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d002      	beq.n	800bbfc <__lshift+0xb0>
 800bbf6:	9b01      	ldr	r3, [sp, #4]
 800bbf8:	3302      	adds	r3, #2
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	9b00      	ldr	r3, [sp, #0]
 800bbfe:	9802      	ldr	r0, [sp, #8]
 800bc00:	3b01      	subs	r3, #1
 800bc02:	0021      	movs	r1, r4
 800bc04:	612b      	str	r3, [r5, #16]
 800bc06:	f7ff fdcb 	bl	800b7a0 <_Bfree>
 800bc0a:	0028      	movs	r0, r5
 800bc0c:	b005      	add	sp, #20
 800bc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc10:	cb01      	ldmia	r3!, {r0}
 800bc12:	c101      	stmia	r1!, {r0}
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d8fb      	bhi.n	800bc10 <__lshift+0xc4>
 800bc18:	e7f0      	b.n	800bbfc <__lshift+0xb0>
 800bc1a:	46c0      	nop			@ (mov r8, r8)
 800bc1c:	0800cba4 	.word	0x0800cba4
 800bc20:	0800cbc6 	.word	0x0800cbc6

0800bc24 <__mcmp>:
 800bc24:	b530      	push	{r4, r5, lr}
 800bc26:	690b      	ldr	r3, [r1, #16]
 800bc28:	6904      	ldr	r4, [r0, #16]
 800bc2a:	0002      	movs	r2, r0
 800bc2c:	1ae0      	subs	r0, r4, r3
 800bc2e:	429c      	cmp	r4, r3
 800bc30:	d10f      	bne.n	800bc52 <__mcmp+0x2e>
 800bc32:	3214      	adds	r2, #20
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	3114      	adds	r1, #20
 800bc38:	0014      	movs	r4, r2
 800bc3a:	18c9      	adds	r1, r1, r3
 800bc3c:	18d2      	adds	r2, r2, r3
 800bc3e:	3a04      	subs	r2, #4
 800bc40:	3904      	subs	r1, #4
 800bc42:	6815      	ldr	r5, [r2, #0]
 800bc44:	680b      	ldr	r3, [r1, #0]
 800bc46:	429d      	cmp	r5, r3
 800bc48:	d004      	beq.n	800bc54 <__mcmp+0x30>
 800bc4a:	2001      	movs	r0, #1
 800bc4c:	429d      	cmp	r5, r3
 800bc4e:	d200      	bcs.n	800bc52 <__mcmp+0x2e>
 800bc50:	3802      	subs	r0, #2
 800bc52:	bd30      	pop	{r4, r5, pc}
 800bc54:	4294      	cmp	r4, r2
 800bc56:	d3f2      	bcc.n	800bc3e <__mcmp+0x1a>
 800bc58:	e7fb      	b.n	800bc52 <__mcmp+0x2e>
	...

0800bc5c <__mdiff>:
 800bc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc5e:	000c      	movs	r4, r1
 800bc60:	b087      	sub	sp, #28
 800bc62:	9000      	str	r0, [sp, #0]
 800bc64:	0011      	movs	r1, r2
 800bc66:	0020      	movs	r0, r4
 800bc68:	0017      	movs	r7, r2
 800bc6a:	f7ff ffdb 	bl	800bc24 <__mcmp>
 800bc6e:	1e05      	subs	r5, r0, #0
 800bc70:	d110      	bne.n	800bc94 <__mdiff+0x38>
 800bc72:	0001      	movs	r1, r0
 800bc74:	9800      	ldr	r0, [sp, #0]
 800bc76:	f7ff fd4f 	bl	800b718 <_Balloc>
 800bc7a:	1e02      	subs	r2, r0, #0
 800bc7c:	d104      	bne.n	800bc88 <__mdiff+0x2c>
 800bc7e:	4b40      	ldr	r3, [pc, #256]	@ (800bd80 <__mdiff+0x124>)
 800bc80:	4840      	ldr	r0, [pc, #256]	@ (800bd84 <__mdiff+0x128>)
 800bc82:	4941      	ldr	r1, [pc, #260]	@ (800bd88 <__mdiff+0x12c>)
 800bc84:	f000 f9d2 	bl	800c02c <__assert_func>
 800bc88:	2301      	movs	r3, #1
 800bc8a:	6145      	str	r5, [r0, #20]
 800bc8c:	6103      	str	r3, [r0, #16]
 800bc8e:	0010      	movs	r0, r2
 800bc90:	b007      	add	sp, #28
 800bc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc94:	2600      	movs	r6, #0
 800bc96:	42b0      	cmp	r0, r6
 800bc98:	da03      	bge.n	800bca2 <__mdiff+0x46>
 800bc9a:	0023      	movs	r3, r4
 800bc9c:	003c      	movs	r4, r7
 800bc9e:	001f      	movs	r7, r3
 800bca0:	3601      	adds	r6, #1
 800bca2:	6861      	ldr	r1, [r4, #4]
 800bca4:	9800      	ldr	r0, [sp, #0]
 800bca6:	f7ff fd37 	bl	800b718 <_Balloc>
 800bcaa:	1e02      	subs	r2, r0, #0
 800bcac:	d103      	bne.n	800bcb6 <__mdiff+0x5a>
 800bcae:	4b34      	ldr	r3, [pc, #208]	@ (800bd80 <__mdiff+0x124>)
 800bcb0:	4834      	ldr	r0, [pc, #208]	@ (800bd84 <__mdiff+0x128>)
 800bcb2:	4936      	ldr	r1, [pc, #216]	@ (800bd8c <__mdiff+0x130>)
 800bcb4:	e7e6      	b.n	800bc84 <__mdiff+0x28>
 800bcb6:	6923      	ldr	r3, [r4, #16]
 800bcb8:	3414      	adds	r4, #20
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	18e3      	adds	r3, r4, r3
 800bcc0:	0021      	movs	r1, r4
 800bcc2:	9401      	str	r4, [sp, #4]
 800bcc4:	003c      	movs	r4, r7
 800bcc6:	9302      	str	r3, [sp, #8]
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	3414      	adds	r4, #20
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	18e3      	adds	r3, r4, r3
 800bcd0:	9303      	str	r3, [sp, #12]
 800bcd2:	0003      	movs	r3, r0
 800bcd4:	60c6      	str	r6, [r0, #12]
 800bcd6:	468c      	mov	ip, r1
 800bcd8:	2000      	movs	r0, #0
 800bcda:	3314      	adds	r3, #20
 800bcdc:	9304      	str	r3, [sp, #16]
 800bcde:	9305      	str	r3, [sp, #20]
 800bce0:	4663      	mov	r3, ip
 800bce2:	cb20      	ldmia	r3!, {r5}
 800bce4:	b2a9      	uxth	r1, r5
 800bce6:	000e      	movs	r6, r1
 800bce8:	469c      	mov	ip, r3
 800bcea:	cc08      	ldmia	r4!, {r3}
 800bcec:	0c2d      	lsrs	r5, r5, #16
 800bcee:	b299      	uxth	r1, r3
 800bcf0:	1a71      	subs	r1, r6, r1
 800bcf2:	1809      	adds	r1, r1, r0
 800bcf4:	0c1b      	lsrs	r3, r3, #16
 800bcf6:	1408      	asrs	r0, r1, #16
 800bcf8:	1aeb      	subs	r3, r5, r3
 800bcfa:	181b      	adds	r3, r3, r0
 800bcfc:	1418      	asrs	r0, r3, #16
 800bcfe:	b289      	uxth	r1, r1
 800bd00:	041b      	lsls	r3, r3, #16
 800bd02:	4319      	orrs	r1, r3
 800bd04:	9b05      	ldr	r3, [sp, #20]
 800bd06:	c302      	stmia	r3!, {r1}
 800bd08:	9305      	str	r3, [sp, #20]
 800bd0a:	9b03      	ldr	r3, [sp, #12]
 800bd0c:	42a3      	cmp	r3, r4
 800bd0e:	d8e7      	bhi.n	800bce0 <__mdiff+0x84>
 800bd10:	0039      	movs	r1, r7
 800bd12:	9c03      	ldr	r4, [sp, #12]
 800bd14:	3115      	adds	r1, #21
 800bd16:	2304      	movs	r3, #4
 800bd18:	428c      	cmp	r4, r1
 800bd1a:	d304      	bcc.n	800bd26 <__mdiff+0xca>
 800bd1c:	1be3      	subs	r3, r4, r7
 800bd1e:	3b15      	subs	r3, #21
 800bd20:	089b      	lsrs	r3, r3, #2
 800bd22:	3301      	adds	r3, #1
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	9901      	ldr	r1, [sp, #4]
 800bd28:	18cd      	adds	r5, r1, r3
 800bd2a:	9904      	ldr	r1, [sp, #16]
 800bd2c:	002e      	movs	r6, r5
 800bd2e:	18cb      	adds	r3, r1, r3
 800bd30:	001f      	movs	r7, r3
 800bd32:	9902      	ldr	r1, [sp, #8]
 800bd34:	428e      	cmp	r6, r1
 800bd36:	d311      	bcc.n	800bd5c <__mdiff+0x100>
 800bd38:	9c02      	ldr	r4, [sp, #8]
 800bd3a:	1ee9      	subs	r1, r5, #3
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	428c      	cmp	r4, r1
 800bd40:	d304      	bcc.n	800bd4c <__mdiff+0xf0>
 800bd42:	0021      	movs	r1, r4
 800bd44:	3103      	adds	r1, #3
 800bd46:	1b49      	subs	r1, r1, r5
 800bd48:	0889      	lsrs	r1, r1, #2
 800bd4a:	0088      	lsls	r0, r1, #2
 800bd4c:	181b      	adds	r3, r3, r0
 800bd4e:	3b04      	subs	r3, #4
 800bd50:	6819      	ldr	r1, [r3, #0]
 800bd52:	2900      	cmp	r1, #0
 800bd54:	d010      	beq.n	800bd78 <__mdiff+0x11c>
 800bd56:	9b00      	ldr	r3, [sp, #0]
 800bd58:	6113      	str	r3, [r2, #16]
 800bd5a:	e798      	b.n	800bc8e <__mdiff+0x32>
 800bd5c:	4684      	mov	ip, r0
 800bd5e:	ce02      	ldmia	r6!, {r1}
 800bd60:	b288      	uxth	r0, r1
 800bd62:	4460      	add	r0, ip
 800bd64:	1400      	asrs	r0, r0, #16
 800bd66:	0c0c      	lsrs	r4, r1, #16
 800bd68:	1904      	adds	r4, r0, r4
 800bd6a:	4461      	add	r1, ip
 800bd6c:	1420      	asrs	r0, r4, #16
 800bd6e:	b289      	uxth	r1, r1
 800bd70:	0424      	lsls	r4, r4, #16
 800bd72:	4321      	orrs	r1, r4
 800bd74:	c702      	stmia	r7!, {r1}
 800bd76:	e7dc      	b.n	800bd32 <__mdiff+0xd6>
 800bd78:	9900      	ldr	r1, [sp, #0]
 800bd7a:	3901      	subs	r1, #1
 800bd7c:	9100      	str	r1, [sp, #0]
 800bd7e:	e7e6      	b.n	800bd4e <__mdiff+0xf2>
 800bd80:	0800cba4 	.word	0x0800cba4
 800bd84:	0800cbc6 	.word	0x0800cbc6
 800bd88:	00000237 	.word	0x00000237
 800bd8c:	00000245 	.word	0x00000245

0800bd90 <__d2b>:
 800bd90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd92:	2101      	movs	r1, #1
 800bd94:	0016      	movs	r6, r2
 800bd96:	001f      	movs	r7, r3
 800bd98:	f7ff fcbe 	bl	800b718 <_Balloc>
 800bd9c:	1e04      	subs	r4, r0, #0
 800bd9e:	d105      	bne.n	800bdac <__d2b+0x1c>
 800bda0:	0022      	movs	r2, r4
 800bda2:	4b25      	ldr	r3, [pc, #148]	@ (800be38 <__d2b+0xa8>)
 800bda4:	4825      	ldr	r0, [pc, #148]	@ (800be3c <__d2b+0xac>)
 800bda6:	4926      	ldr	r1, [pc, #152]	@ (800be40 <__d2b+0xb0>)
 800bda8:	f000 f940 	bl	800c02c <__assert_func>
 800bdac:	033b      	lsls	r3, r7, #12
 800bdae:	007d      	lsls	r5, r7, #1
 800bdb0:	0b1b      	lsrs	r3, r3, #12
 800bdb2:	0d6d      	lsrs	r5, r5, #21
 800bdb4:	d002      	beq.n	800bdbc <__d2b+0x2c>
 800bdb6:	2280      	movs	r2, #128	@ 0x80
 800bdb8:	0352      	lsls	r2, r2, #13
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	9301      	str	r3, [sp, #4]
 800bdbe:	2e00      	cmp	r6, #0
 800bdc0:	d025      	beq.n	800be0e <__d2b+0x7e>
 800bdc2:	4668      	mov	r0, sp
 800bdc4:	9600      	str	r6, [sp, #0]
 800bdc6:	f7ff fd74 	bl	800b8b2 <__lo0bits>
 800bdca:	9b01      	ldr	r3, [sp, #4]
 800bdcc:	9900      	ldr	r1, [sp, #0]
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	d01b      	beq.n	800be0a <__d2b+0x7a>
 800bdd2:	2220      	movs	r2, #32
 800bdd4:	001e      	movs	r6, r3
 800bdd6:	1a12      	subs	r2, r2, r0
 800bdd8:	4096      	lsls	r6, r2
 800bdda:	0032      	movs	r2, r6
 800bddc:	40c3      	lsrs	r3, r0
 800bdde:	430a      	orrs	r2, r1
 800bde0:	6162      	str	r2, [r4, #20]
 800bde2:	9301      	str	r3, [sp, #4]
 800bde4:	9e01      	ldr	r6, [sp, #4]
 800bde6:	61a6      	str	r6, [r4, #24]
 800bde8:	1e73      	subs	r3, r6, #1
 800bdea:	419e      	sbcs	r6, r3
 800bdec:	3601      	adds	r6, #1
 800bdee:	6126      	str	r6, [r4, #16]
 800bdf0:	2d00      	cmp	r5, #0
 800bdf2:	d014      	beq.n	800be1e <__d2b+0x8e>
 800bdf4:	2635      	movs	r6, #53	@ 0x35
 800bdf6:	4b13      	ldr	r3, [pc, #76]	@ (800be44 <__d2b+0xb4>)
 800bdf8:	18ed      	adds	r5, r5, r3
 800bdfa:	9b08      	ldr	r3, [sp, #32]
 800bdfc:	182d      	adds	r5, r5, r0
 800bdfe:	601d      	str	r5, [r3, #0]
 800be00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be02:	1a36      	subs	r6, r6, r0
 800be04:	601e      	str	r6, [r3, #0]
 800be06:	0020      	movs	r0, r4
 800be08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be0a:	6161      	str	r1, [r4, #20]
 800be0c:	e7ea      	b.n	800bde4 <__d2b+0x54>
 800be0e:	a801      	add	r0, sp, #4
 800be10:	f7ff fd4f 	bl	800b8b2 <__lo0bits>
 800be14:	9b01      	ldr	r3, [sp, #4]
 800be16:	2601      	movs	r6, #1
 800be18:	6163      	str	r3, [r4, #20]
 800be1a:	3020      	adds	r0, #32
 800be1c:	e7e7      	b.n	800bdee <__d2b+0x5e>
 800be1e:	4b0a      	ldr	r3, [pc, #40]	@ (800be48 <__d2b+0xb8>)
 800be20:	18c0      	adds	r0, r0, r3
 800be22:	9b08      	ldr	r3, [sp, #32]
 800be24:	6018      	str	r0, [r3, #0]
 800be26:	4b09      	ldr	r3, [pc, #36]	@ (800be4c <__d2b+0xbc>)
 800be28:	18f3      	adds	r3, r6, r3
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	18e3      	adds	r3, r4, r3
 800be2e:	6958      	ldr	r0, [r3, #20]
 800be30:	f7ff fd1e 	bl	800b870 <__hi0bits>
 800be34:	0176      	lsls	r6, r6, #5
 800be36:	e7e3      	b.n	800be00 <__d2b+0x70>
 800be38:	0800cba4 	.word	0x0800cba4
 800be3c:	0800cbc6 	.word	0x0800cbc6
 800be40:	0000030f 	.word	0x0000030f
 800be44:	fffffbcd 	.word	0xfffffbcd
 800be48:	fffffbce 	.word	0xfffffbce
 800be4c:	3fffffff 	.word	0x3fffffff

0800be50 <__sread>:
 800be50:	b570      	push	{r4, r5, r6, lr}
 800be52:	000c      	movs	r4, r1
 800be54:	250e      	movs	r5, #14
 800be56:	5f49      	ldrsh	r1, [r1, r5]
 800be58:	f000 f89c 	bl	800bf94 <_read_r>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	db03      	blt.n	800be68 <__sread+0x18>
 800be60:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800be62:	181b      	adds	r3, r3, r0
 800be64:	6563      	str	r3, [r4, #84]	@ 0x54
 800be66:	bd70      	pop	{r4, r5, r6, pc}
 800be68:	89a3      	ldrh	r3, [r4, #12]
 800be6a:	4a02      	ldr	r2, [pc, #8]	@ (800be74 <__sread+0x24>)
 800be6c:	4013      	ands	r3, r2
 800be6e:	81a3      	strh	r3, [r4, #12]
 800be70:	e7f9      	b.n	800be66 <__sread+0x16>
 800be72:	46c0      	nop			@ (mov r8, r8)
 800be74:	ffffefff 	.word	0xffffefff

0800be78 <__swrite>:
 800be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7a:	001f      	movs	r7, r3
 800be7c:	898b      	ldrh	r3, [r1, #12]
 800be7e:	0005      	movs	r5, r0
 800be80:	000c      	movs	r4, r1
 800be82:	0016      	movs	r6, r2
 800be84:	05db      	lsls	r3, r3, #23
 800be86:	d505      	bpl.n	800be94 <__swrite+0x1c>
 800be88:	230e      	movs	r3, #14
 800be8a:	5ec9      	ldrsh	r1, [r1, r3]
 800be8c:	2200      	movs	r2, #0
 800be8e:	2302      	movs	r3, #2
 800be90:	f000 f86c 	bl	800bf6c <_lseek_r>
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	4a05      	ldr	r2, [pc, #20]	@ (800beac <__swrite+0x34>)
 800be98:	0028      	movs	r0, r5
 800be9a:	4013      	ands	r3, r2
 800be9c:	81a3      	strh	r3, [r4, #12]
 800be9e:	0032      	movs	r2, r6
 800bea0:	230e      	movs	r3, #14
 800bea2:	5ee1      	ldrsh	r1, [r4, r3]
 800bea4:	003b      	movs	r3, r7
 800bea6:	f000 f89b 	bl	800bfe0 <_write_r>
 800beaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beac:	ffffefff 	.word	0xffffefff

0800beb0 <__sseek>:
 800beb0:	b570      	push	{r4, r5, r6, lr}
 800beb2:	000c      	movs	r4, r1
 800beb4:	250e      	movs	r5, #14
 800beb6:	5f49      	ldrsh	r1, [r1, r5]
 800beb8:	f000 f858 	bl	800bf6c <_lseek_r>
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	1c42      	adds	r2, r0, #1
 800bec0:	d103      	bne.n	800beca <__sseek+0x1a>
 800bec2:	4a05      	ldr	r2, [pc, #20]	@ (800bed8 <__sseek+0x28>)
 800bec4:	4013      	ands	r3, r2
 800bec6:	81a3      	strh	r3, [r4, #12]
 800bec8:	bd70      	pop	{r4, r5, r6, pc}
 800beca:	2280      	movs	r2, #128	@ 0x80
 800becc:	0152      	lsls	r2, r2, #5
 800bece:	4313      	orrs	r3, r2
 800bed0:	81a3      	strh	r3, [r4, #12]
 800bed2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bed4:	e7f8      	b.n	800bec8 <__sseek+0x18>
 800bed6:	46c0      	nop			@ (mov r8, r8)
 800bed8:	ffffefff 	.word	0xffffefff

0800bedc <__sclose>:
 800bedc:	b510      	push	{r4, lr}
 800bede:	230e      	movs	r3, #14
 800bee0:	5ec9      	ldrsh	r1, [r1, r3]
 800bee2:	f000 f891 	bl	800c008 <_close_r>
 800bee6:	bd10      	pop	{r4, pc}

0800bee8 <_realloc_r>:
 800bee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beea:	0006      	movs	r6, r0
 800beec:	000c      	movs	r4, r1
 800beee:	0015      	movs	r5, r2
 800bef0:	2900      	cmp	r1, #0
 800bef2:	d105      	bne.n	800bf00 <_realloc_r+0x18>
 800bef4:	0011      	movs	r1, r2
 800bef6:	f7ff facd 	bl	800b494 <_malloc_r>
 800befa:	0004      	movs	r4, r0
 800befc:	0020      	movs	r0, r4
 800befe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bf00:	2a00      	cmp	r2, #0
 800bf02:	d103      	bne.n	800bf0c <_realloc_r+0x24>
 800bf04:	f000 f8de 	bl	800c0c4 <_free_r>
 800bf08:	002c      	movs	r4, r5
 800bf0a:	e7f7      	b.n	800befc <_realloc_r+0x14>
 800bf0c:	f000 f936 	bl	800c17c <_malloc_usable_size_r>
 800bf10:	0007      	movs	r7, r0
 800bf12:	4285      	cmp	r5, r0
 800bf14:	d802      	bhi.n	800bf1c <_realloc_r+0x34>
 800bf16:	0843      	lsrs	r3, r0, #1
 800bf18:	42ab      	cmp	r3, r5
 800bf1a:	d3ef      	bcc.n	800befc <_realloc_r+0x14>
 800bf1c:	0029      	movs	r1, r5
 800bf1e:	0030      	movs	r0, r6
 800bf20:	f7ff fab8 	bl	800b494 <_malloc_r>
 800bf24:	9001      	str	r0, [sp, #4]
 800bf26:	2800      	cmp	r0, #0
 800bf28:	d101      	bne.n	800bf2e <_realloc_r+0x46>
 800bf2a:	9c01      	ldr	r4, [sp, #4]
 800bf2c:	e7e6      	b.n	800befc <_realloc_r+0x14>
 800bf2e:	002a      	movs	r2, r5
 800bf30:	42bd      	cmp	r5, r7
 800bf32:	d900      	bls.n	800bf36 <_realloc_r+0x4e>
 800bf34:	003a      	movs	r2, r7
 800bf36:	0021      	movs	r1, r4
 800bf38:	9801      	ldr	r0, [sp, #4]
 800bf3a:	f7fe faa2 	bl	800a482 <memcpy>
 800bf3e:	0021      	movs	r1, r4
 800bf40:	0030      	movs	r0, r6
 800bf42:	f000 f8bf 	bl	800c0c4 <_free_r>
 800bf46:	e7f0      	b.n	800bf2a <_realloc_r+0x42>

0800bf48 <memmove>:
 800bf48:	b510      	push	{r4, lr}
 800bf4a:	4288      	cmp	r0, r1
 800bf4c:	d902      	bls.n	800bf54 <memmove+0xc>
 800bf4e:	188b      	adds	r3, r1, r2
 800bf50:	4298      	cmp	r0, r3
 800bf52:	d308      	bcc.n	800bf66 <memmove+0x1e>
 800bf54:	2300      	movs	r3, #0
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d007      	beq.n	800bf6a <memmove+0x22>
 800bf5a:	5ccc      	ldrb	r4, [r1, r3]
 800bf5c:	54c4      	strb	r4, [r0, r3]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	e7f9      	b.n	800bf56 <memmove+0xe>
 800bf62:	5c8b      	ldrb	r3, [r1, r2]
 800bf64:	5483      	strb	r3, [r0, r2]
 800bf66:	3a01      	subs	r2, #1
 800bf68:	d2fb      	bcs.n	800bf62 <memmove+0x1a>
 800bf6a:	bd10      	pop	{r4, pc}

0800bf6c <_lseek_r>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	0004      	movs	r4, r0
 800bf70:	0008      	movs	r0, r1
 800bf72:	0011      	movs	r1, r2
 800bf74:	001a      	movs	r2, r3
 800bf76:	2300      	movs	r3, #0
 800bf78:	4d05      	ldr	r5, [pc, #20]	@ (800bf90 <_lseek_r+0x24>)
 800bf7a:	602b      	str	r3, [r5, #0]
 800bf7c:	f7fa fc48 	bl	8006810 <_lseek>
 800bf80:	1c43      	adds	r3, r0, #1
 800bf82:	d103      	bne.n	800bf8c <_lseek_r+0x20>
 800bf84:	682b      	ldr	r3, [r5, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d000      	beq.n	800bf8c <_lseek_r+0x20>
 800bf8a:	6023      	str	r3, [r4, #0]
 800bf8c:	bd70      	pop	{r4, r5, r6, pc}
 800bf8e:	46c0      	nop			@ (mov r8, r8)
 800bf90:	200004e0 	.word	0x200004e0

0800bf94 <_read_r>:
 800bf94:	b570      	push	{r4, r5, r6, lr}
 800bf96:	0004      	movs	r4, r0
 800bf98:	0008      	movs	r0, r1
 800bf9a:	0011      	movs	r1, r2
 800bf9c:	001a      	movs	r2, r3
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	4d05      	ldr	r5, [pc, #20]	@ (800bfb8 <_read_r+0x24>)
 800bfa2:	602b      	str	r3, [r5, #0]
 800bfa4:	f7fa fbda 	bl	800675c <_read>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d103      	bne.n	800bfb4 <_read_r+0x20>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d000      	beq.n	800bfb4 <_read_r+0x20>
 800bfb2:	6023      	str	r3, [r4, #0]
 800bfb4:	bd70      	pop	{r4, r5, r6, pc}
 800bfb6:	46c0      	nop			@ (mov r8, r8)
 800bfb8:	200004e0 	.word	0x200004e0

0800bfbc <_sbrk_r>:
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	b570      	push	{r4, r5, r6, lr}
 800bfc0:	4d06      	ldr	r5, [pc, #24]	@ (800bfdc <_sbrk_r+0x20>)
 800bfc2:	0004      	movs	r4, r0
 800bfc4:	0008      	movs	r0, r1
 800bfc6:	602b      	str	r3, [r5, #0]
 800bfc8:	f7fa fc2e 	bl	8006828 <_sbrk>
 800bfcc:	1c43      	adds	r3, r0, #1
 800bfce:	d103      	bne.n	800bfd8 <_sbrk_r+0x1c>
 800bfd0:	682b      	ldr	r3, [r5, #0]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d000      	beq.n	800bfd8 <_sbrk_r+0x1c>
 800bfd6:	6023      	str	r3, [r4, #0]
 800bfd8:	bd70      	pop	{r4, r5, r6, pc}
 800bfda:	46c0      	nop			@ (mov r8, r8)
 800bfdc:	200004e0 	.word	0x200004e0

0800bfe0 <_write_r>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	0004      	movs	r4, r0
 800bfe4:	0008      	movs	r0, r1
 800bfe6:	0011      	movs	r1, r2
 800bfe8:	001a      	movs	r2, r3
 800bfea:	2300      	movs	r3, #0
 800bfec:	4d05      	ldr	r5, [pc, #20]	@ (800c004 <_write_r+0x24>)
 800bfee:	602b      	str	r3, [r5, #0]
 800bff0:	f7fa fbd1 	bl	8006796 <_write>
 800bff4:	1c43      	adds	r3, r0, #1
 800bff6:	d103      	bne.n	800c000 <_write_r+0x20>
 800bff8:	682b      	ldr	r3, [r5, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d000      	beq.n	800c000 <_write_r+0x20>
 800bffe:	6023      	str	r3, [r4, #0]
 800c000:	bd70      	pop	{r4, r5, r6, pc}
 800c002:	46c0      	nop			@ (mov r8, r8)
 800c004:	200004e0 	.word	0x200004e0

0800c008 <_close_r>:
 800c008:	2300      	movs	r3, #0
 800c00a:	b570      	push	{r4, r5, r6, lr}
 800c00c:	4d06      	ldr	r5, [pc, #24]	@ (800c028 <_close_r+0x20>)
 800c00e:	0004      	movs	r4, r0
 800c010:	0008      	movs	r0, r1
 800c012:	602b      	str	r3, [r5, #0]
 800c014:	f7fa fbdb 	bl	80067ce <_close>
 800c018:	1c43      	adds	r3, r0, #1
 800c01a:	d103      	bne.n	800c024 <_close_r+0x1c>
 800c01c:	682b      	ldr	r3, [r5, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d000      	beq.n	800c024 <_close_r+0x1c>
 800c022:	6023      	str	r3, [r4, #0]
 800c024:	bd70      	pop	{r4, r5, r6, pc}
 800c026:	46c0      	nop			@ (mov r8, r8)
 800c028:	200004e0 	.word	0x200004e0

0800c02c <__assert_func>:
 800c02c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c02e:	0014      	movs	r4, r2
 800c030:	001a      	movs	r2, r3
 800c032:	4b09      	ldr	r3, [pc, #36]	@ (800c058 <__assert_func+0x2c>)
 800c034:	0005      	movs	r5, r0
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	000e      	movs	r6, r1
 800c03a:	68d8      	ldr	r0, [r3, #12]
 800c03c:	4b07      	ldr	r3, [pc, #28]	@ (800c05c <__assert_func+0x30>)
 800c03e:	2c00      	cmp	r4, #0
 800c040:	d101      	bne.n	800c046 <__assert_func+0x1a>
 800c042:	4b07      	ldr	r3, [pc, #28]	@ (800c060 <__assert_func+0x34>)
 800c044:	001c      	movs	r4, r3
 800c046:	4907      	ldr	r1, [pc, #28]	@ (800c064 <__assert_func+0x38>)
 800c048:	9301      	str	r3, [sp, #4]
 800c04a:	9402      	str	r4, [sp, #8]
 800c04c:	002b      	movs	r3, r5
 800c04e:	9600      	str	r6, [sp, #0]
 800c050:	f000 f89c 	bl	800c18c <fiprintf>
 800c054:	f000 f8b7 	bl	800c1c6 <abort>
 800c058:	20000018 	.word	0x20000018
 800c05c:	0800cc29 	.word	0x0800cc29
 800c060:	0800cc64 	.word	0x0800cc64
 800c064:	0800cc36 	.word	0x0800cc36

0800c068 <_calloc_r>:
 800c068:	b570      	push	{r4, r5, r6, lr}
 800c06a:	0c0b      	lsrs	r3, r1, #16
 800c06c:	0c15      	lsrs	r5, r2, #16
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d11e      	bne.n	800c0b0 <_calloc_r+0x48>
 800c072:	2d00      	cmp	r5, #0
 800c074:	d10c      	bne.n	800c090 <_calloc_r+0x28>
 800c076:	b289      	uxth	r1, r1
 800c078:	b294      	uxth	r4, r2
 800c07a:	434c      	muls	r4, r1
 800c07c:	0021      	movs	r1, r4
 800c07e:	f7ff fa09 	bl	800b494 <_malloc_r>
 800c082:	1e05      	subs	r5, r0, #0
 800c084:	d01b      	beq.n	800c0be <_calloc_r+0x56>
 800c086:	0022      	movs	r2, r4
 800c088:	2100      	movs	r1, #0
 800c08a:	f7fe f9b5 	bl	800a3f8 <memset>
 800c08e:	e016      	b.n	800c0be <_calloc_r+0x56>
 800c090:	1c2b      	adds	r3, r5, #0
 800c092:	1c0c      	adds	r4, r1, #0
 800c094:	b289      	uxth	r1, r1
 800c096:	b292      	uxth	r2, r2
 800c098:	434a      	muls	r2, r1
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	b2a1      	uxth	r1, r4
 800c09e:	4359      	muls	r1, r3
 800c0a0:	0c14      	lsrs	r4, r2, #16
 800c0a2:	190c      	adds	r4, r1, r4
 800c0a4:	0c23      	lsrs	r3, r4, #16
 800c0a6:	d107      	bne.n	800c0b8 <_calloc_r+0x50>
 800c0a8:	0424      	lsls	r4, r4, #16
 800c0aa:	b292      	uxth	r2, r2
 800c0ac:	4314      	orrs	r4, r2
 800c0ae:	e7e5      	b.n	800c07c <_calloc_r+0x14>
 800c0b0:	2d00      	cmp	r5, #0
 800c0b2:	d101      	bne.n	800c0b8 <_calloc_r+0x50>
 800c0b4:	1c14      	adds	r4, r2, #0
 800c0b6:	e7ed      	b.n	800c094 <_calloc_r+0x2c>
 800c0b8:	230c      	movs	r3, #12
 800c0ba:	2500      	movs	r5, #0
 800c0bc:	6003      	str	r3, [r0, #0]
 800c0be:	0028      	movs	r0, r5
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c0c4 <_free_r>:
 800c0c4:	b570      	push	{r4, r5, r6, lr}
 800c0c6:	0005      	movs	r5, r0
 800c0c8:	1e0c      	subs	r4, r1, #0
 800c0ca:	d010      	beq.n	800c0ee <_free_r+0x2a>
 800c0cc:	3c04      	subs	r4, #4
 800c0ce:	6823      	ldr	r3, [r4, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	da00      	bge.n	800c0d6 <_free_r+0x12>
 800c0d4:	18e4      	adds	r4, r4, r3
 800c0d6:	0028      	movs	r0, r5
 800c0d8:	f7ff fb0e 	bl	800b6f8 <__malloc_lock>
 800c0dc:	4a1d      	ldr	r2, [pc, #116]	@ (800c154 <_free_r+0x90>)
 800c0de:	6813      	ldr	r3, [r2, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d105      	bne.n	800c0f0 <_free_r+0x2c>
 800c0e4:	6063      	str	r3, [r4, #4]
 800c0e6:	6014      	str	r4, [r2, #0]
 800c0e8:	0028      	movs	r0, r5
 800c0ea:	f7ff fb0d 	bl	800b708 <__malloc_unlock>
 800c0ee:	bd70      	pop	{r4, r5, r6, pc}
 800c0f0:	42a3      	cmp	r3, r4
 800c0f2:	d908      	bls.n	800c106 <_free_r+0x42>
 800c0f4:	6820      	ldr	r0, [r4, #0]
 800c0f6:	1821      	adds	r1, r4, r0
 800c0f8:	428b      	cmp	r3, r1
 800c0fa:	d1f3      	bne.n	800c0e4 <_free_r+0x20>
 800c0fc:	6819      	ldr	r1, [r3, #0]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	1809      	adds	r1, r1, r0
 800c102:	6021      	str	r1, [r4, #0]
 800c104:	e7ee      	b.n	800c0e4 <_free_r+0x20>
 800c106:	001a      	movs	r2, r3
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d001      	beq.n	800c112 <_free_r+0x4e>
 800c10e:	42a3      	cmp	r3, r4
 800c110:	d9f9      	bls.n	800c106 <_free_r+0x42>
 800c112:	6811      	ldr	r1, [r2, #0]
 800c114:	1850      	adds	r0, r2, r1
 800c116:	42a0      	cmp	r0, r4
 800c118:	d10b      	bne.n	800c132 <_free_r+0x6e>
 800c11a:	6820      	ldr	r0, [r4, #0]
 800c11c:	1809      	adds	r1, r1, r0
 800c11e:	1850      	adds	r0, r2, r1
 800c120:	6011      	str	r1, [r2, #0]
 800c122:	4283      	cmp	r3, r0
 800c124:	d1e0      	bne.n	800c0e8 <_free_r+0x24>
 800c126:	6818      	ldr	r0, [r3, #0]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	1841      	adds	r1, r0, r1
 800c12c:	6011      	str	r1, [r2, #0]
 800c12e:	6053      	str	r3, [r2, #4]
 800c130:	e7da      	b.n	800c0e8 <_free_r+0x24>
 800c132:	42a0      	cmp	r0, r4
 800c134:	d902      	bls.n	800c13c <_free_r+0x78>
 800c136:	230c      	movs	r3, #12
 800c138:	602b      	str	r3, [r5, #0]
 800c13a:	e7d5      	b.n	800c0e8 <_free_r+0x24>
 800c13c:	6820      	ldr	r0, [r4, #0]
 800c13e:	1821      	adds	r1, r4, r0
 800c140:	428b      	cmp	r3, r1
 800c142:	d103      	bne.n	800c14c <_free_r+0x88>
 800c144:	6819      	ldr	r1, [r3, #0]
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	1809      	adds	r1, r1, r0
 800c14a:	6021      	str	r1, [r4, #0]
 800c14c:	6063      	str	r3, [r4, #4]
 800c14e:	6054      	str	r4, [r2, #4]
 800c150:	e7ca      	b.n	800c0e8 <_free_r+0x24>
 800c152:	46c0      	nop			@ (mov r8, r8)
 800c154:	200004dc 	.word	0x200004dc

0800c158 <__ascii_mbtowc>:
 800c158:	b082      	sub	sp, #8
 800c15a:	2900      	cmp	r1, #0
 800c15c:	d100      	bne.n	800c160 <__ascii_mbtowc+0x8>
 800c15e:	a901      	add	r1, sp, #4
 800c160:	1e10      	subs	r0, r2, #0
 800c162:	d006      	beq.n	800c172 <__ascii_mbtowc+0x1a>
 800c164:	2b00      	cmp	r3, #0
 800c166:	d006      	beq.n	800c176 <__ascii_mbtowc+0x1e>
 800c168:	7813      	ldrb	r3, [r2, #0]
 800c16a:	600b      	str	r3, [r1, #0]
 800c16c:	7810      	ldrb	r0, [r2, #0]
 800c16e:	1e43      	subs	r3, r0, #1
 800c170:	4198      	sbcs	r0, r3
 800c172:	b002      	add	sp, #8
 800c174:	4770      	bx	lr
 800c176:	2002      	movs	r0, #2
 800c178:	4240      	negs	r0, r0
 800c17a:	e7fa      	b.n	800c172 <__ascii_mbtowc+0x1a>

0800c17c <_malloc_usable_size_r>:
 800c17c:	1f0b      	subs	r3, r1, #4
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	1f18      	subs	r0, r3, #4
 800c182:	2b00      	cmp	r3, #0
 800c184:	da01      	bge.n	800c18a <_malloc_usable_size_r+0xe>
 800c186:	580b      	ldr	r3, [r1, r0]
 800c188:	18c0      	adds	r0, r0, r3
 800c18a:	4770      	bx	lr

0800c18c <fiprintf>:
 800c18c:	b40e      	push	{r1, r2, r3}
 800c18e:	b517      	push	{r0, r1, r2, r4, lr}
 800c190:	4c05      	ldr	r4, [pc, #20]	@ (800c1a8 <fiprintf+0x1c>)
 800c192:	ab05      	add	r3, sp, #20
 800c194:	cb04      	ldmia	r3!, {r2}
 800c196:	0001      	movs	r1, r0
 800c198:	6820      	ldr	r0, [r4, #0]
 800c19a:	9301      	str	r3, [sp, #4]
 800c19c:	f000 f842 	bl	800c224 <_vfiprintf_r>
 800c1a0:	bc1e      	pop	{r1, r2, r3, r4}
 800c1a2:	bc08      	pop	{r3}
 800c1a4:	b003      	add	sp, #12
 800c1a6:	4718      	bx	r3
 800c1a8:	20000018 	.word	0x20000018

0800c1ac <__ascii_wctomb>:
 800c1ac:	0003      	movs	r3, r0
 800c1ae:	1e08      	subs	r0, r1, #0
 800c1b0:	d005      	beq.n	800c1be <__ascii_wctomb+0x12>
 800c1b2:	2aff      	cmp	r2, #255	@ 0xff
 800c1b4:	d904      	bls.n	800c1c0 <__ascii_wctomb+0x14>
 800c1b6:	228a      	movs	r2, #138	@ 0x8a
 800c1b8:	2001      	movs	r0, #1
 800c1ba:	601a      	str	r2, [r3, #0]
 800c1bc:	4240      	negs	r0, r0
 800c1be:	4770      	bx	lr
 800c1c0:	2001      	movs	r0, #1
 800c1c2:	700a      	strb	r2, [r1, #0]
 800c1c4:	e7fb      	b.n	800c1be <__ascii_wctomb+0x12>

0800c1c6 <abort>:
 800c1c6:	2006      	movs	r0, #6
 800c1c8:	b510      	push	{r4, lr}
 800c1ca:	f000 fa7b 	bl	800c6c4 <raise>
 800c1ce:	2001      	movs	r0, #1
 800c1d0:	f7fa fab7 	bl	8006742 <_exit>

0800c1d4 <__sfputc_r>:
 800c1d4:	6893      	ldr	r3, [r2, #8]
 800c1d6:	b510      	push	{r4, lr}
 800c1d8:	3b01      	subs	r3, #1
 800c1da:	6093      	str	r3, [r2, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	da04      	bge.n	800c1ea <__sfputc_r+0x16>
 800c1e0:	6994      	ldr	r4, [r2, #24]
 800c1e2:	42a3      	cmp	r3, r4
 800c1e4:	db07      	blt.n	800c1f6 <__sfputc_r+0x22>
 800c1e6:	290a      	cmp	r1, #10
 800c1e8:	d005      	beq.n	800c1f6 <__sfputc_r+0x22>
 800c1ea:	6813      	ldr	r3, [r2, #0]
 800c1ec:	1c58      	adds	r0, r3, #1
 800c1ee:	6010      	str	r0, [r2, #0]
 800c1f0:	7019      	strb	r1, [r3, #0]
 800c1f2:	0008      	movs	r0, r1
 800c1f4:	bd10      	pop	{r4, pc}
 800c1f6:	f000 f931 	bl	800c45c <__swbuf_r>
 800c1fa:	0001      	movs	r1, r0
 800c1fc:	e7f9      	b.n	800c1f2 <__sfputc_r+0x1e>

0800c1fe <__sfputs_r>:
 800c1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c200:	0006      	movs	r6, r0
 800c202:	000f      	movs	r7, r1
 800c204:	0014      	movs	r4, r2
 800c206:	18d5      	adds	r5, r2, r3
 800c208:	42ac      	cmp	r4, r5
 800c20a:	d101      	bne.n	800c210 <__sfputs_r+0x12>
 800c20c:	2000      	movs	r0, #0
 800c20e:	e007      	b.n	800c220 <__sfputs_r+0x22>
 800c210:	7821      	ldrb	r1, [r4, #0]
 800c212:	003a      	movs	r2, r7
 800c214:	0030      	movs	r0, r6
 800c216:	f7ff ffdd 	bl	800c1d4 <__sfputc_r>
 800c21a:	3401      	adds	r4, #1
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d1f3      	bne.n	800c208 <__sfputs_r+0xa>
 800c220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c224 <_vfiprintf_r>:
 800c224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c226:	b0a1      	sub	sp, #132	@ 0x84
 800c228:	000f      	movs	r7, r1
 800c22a:	0015      	movs	r5, r2
 800c22c:	001e      	movs	r6, r3
 800c22e:	9003      	str	r0, [sp, #12]
 800c230:	2800      	cmp	r0, #0
 800c232:	d004      	beq.n	800c23e <_vfiprintf_r+0x1a>
 800c234:	6a03      	ldr	r3, [r0, #32]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d101      	bne.n	800c23e <_vfiprintf_r+0x1a>
 800c23a:	f7fe f8a9 	bl	800a390 <__sinit>
 800c23e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c240:	07db      	lsls	r3, r3, #31
 800c242:	d405      	bmi.n	800c250 <_vfiprintf_r+0x2c>
 800c244:	89bb      	ldrh	r3, [r7, #12]
 800c246:	059b      	lsls	r3, r3, #22
 800c248:	d402      	bmi.n	800c250 <_vfiprintf_r+0x2c>
 800c24a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c24c:	f7fe f907 	bl	800a45e <__retarget_lock_acquire_recursive>
 800c250:	89bb      	ldrh	r3, [r7, #12]
 800c252:	071b      	lsls	r3, r3, #28
 800c254:	d502      	bpl.n	800c25c <_vfiprintf_r+0x38>
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d113      	bne.n	800c284 <_vfiprintf_r+0x60>
 800c25c:	0039      	movs	r1, r7
 800c25e:	9803      	ldr	r0, [sp, #12]
 800c260:	f000 f93e 	bl	800c4e0 <__swsetup_r>
 800c264:	2800      	cmp	r0, #0
 800c266:	d00d      	beq.n	800c284 <_vfiprintf_r+0x60>
 800c268:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c26a:	07db      	lsls	r3, r3, #31
 800c26c:	d503      	bpl.n	800c276 <_vfiprintf_r+0x52>
 800c26e:	2001      	movs	r0, #1
 800c270:	4240      	negs	r0, r0
 800c272:	b021      	add	sp, #132	@ 0x84
 800c274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c276:	89bb      	ldrh	r3, [r7, #12]
 800c278:	059b      	lsls	r3, r3, #22
 800c27a:	d4f8      	bmi.n	800c26e <_vfiprintf_r+0x4a>
 800c27c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c27e:	f7fe f8ef 	bl	800a460 <__retarget_lock_release_recursive>
 800c282:	e7f4      	b.n	800c26e <_vfiprintf_r+0x4a>
 800c284:	2300      	movs	r3, #0
 800c286:	ac08      	add	r4, sp, #32
 800c288:	6163      	str	r3, [r4, #20]
 800c28a:	3320      	adds	r3, #32
 800c28c:	7663      	strb	r3, [r4, #25]
 800c28e:	3310      	adds	r3, #16
 800c290:	76a3      	strb	r3, [r4, #26]
 800c292:	9607      	str	r6, [sp, #28]
 800c294:	002e      	movs	r6, r5
 800c296:	7833      	ldrb	r3, [r6, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d001      	beq.n	800c2a0 <_vfiprintf_r+0x7c>
 800c29c:	2b25      	cmp	r3, #37	@ 0x25
 800c29e:	d148      	bne.n	800c332 <_vfiprintf_r+0x10e>
 800c2a0:	1b73      	subs	r3, r6, r5
 800c2a2:	9305      	str	r3, [sp, #20]
 800c2a4:	42ae      	cmp	r6, r5
 800c2a6:	d00b      	beq.n	800c2c0 <_vfiprintf_r+0x9c>
 800c2a8:	002a      	movs	r2, r5
 800c2aa:	0039      	movs	r1, r7
 800c2ac:	9803      	ldr	r0, [sp, #12]
 800c2ae:	f7ff ffa6 	bl	800c1fe <__sfputs_r>
 800c2b2:	3001      	adds	r0, #1
 800c2b4:	d100      	bne.n	800c2b8 <_vfiprintf_r+0x94>
 800c2b6:	e0ae      	b.n	800c416 <_vfiprintf_r+0x1f2>
 800c2b8:	6963      	ldr	r3, [r4, #20]
 800c2ba:	9a05      	ldr	r2, [sp, #20]
 800c2bc:	189b      	adds	r3, r3, r2
 800c2be:	6163      	str	r3, [r4, #20]
 800c2c0:	7833      	ldrb	r3, [r6, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d100      	bne.n	800c2c8 <_vfiprintf_r+0xa4>
 800c2c6:	e0a6      	b.n	800c416 <_vfiprintf_r+0x1f2>
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	4252      	negs	r2, r2
 800c2ce:	6062      	str	r2, [r4, #4]
 800c2d0:	a904      	add	r1, sp, #16
 800c2d2:	3254      	adds	r2, #84	@ 0x54
 800c2d4:	1852      	adds	r2, r2, r1
 800c2d6:	1c75      	adds	r5, r6, #1
 800c2d8:	6023      	str	r3, [r4, #0]
 800c2da:	60e3      	str	r3, [r4, #12]
 800c2dc:	60a3      	str	r3, [r4, #8]
 800c2de:	7013      	strb	r3, [r2, #0]
 800c2e0:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c2e2:	4b59      	ldr	r3, [pc, #356]	@ (800c448 <_vfiprintf_r+0x224>)
 800c2e4:	2205      	movs	r2, #5
 800c2e6:	0018      	movs	r0, r3
 800c2e8:	7829      	ldrb	r1, [r5, #0]
 800c2ea:	9305      	str	r3, [sp, #20]
 800c2ec:	f7fe f8be 	bl	800a46c <memchr>
 800c2f0:	1c6e      	adds	r6, r5, #1
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	d11f      	bne.n	800c336 <_vfiprintf_r+0x112>
 800c2f6:	6822      	ldr	r2, [r4, #0]
 800c2f8:	06d3      	lsls	r3, r2, #27
 800c2fa:	d504      	bpl.n	800c306 <_vfiprintf_r+0xe2>
 800c2fc:	2353      	movs	r3, #83	@ 0x53
 800c2fe:	a904      	add	r1, sp, #16
 800c300:	185b      	adds	r3, r3, r1
 800c302:	2120      	movs	r1, #32
 800c304:	7019      	strb	r1, [r3, #0]
 800c306:	0713      	lsls	r3, r2, #28
 800c308:	d504      	bpl.n	800c314 <_vfiprintf_r+0xf0>
 800c30a:	2353      	movs	r3, #83	@ 0x53
 800c30c:	a904      	add	r1, sp, #16
 800c30e:	185b      	adds	r3, r3, r1
 800c310:	212b      	movs	r1, #43	@ 0x2b
 800c312:	7019      	strb	r1, [r3, #0]
 800c314:	782b      	ldrb	r3, [r5, #0]
 800c316:	2b2a      	cmp	r3, #42	@ 0x2a
 800c318:	d016      	beq.n	800c348 <_vfiprintf_r+0x124>
 800c31a:	002e      	movs	r6, r5
 800c31c:	2100      	movs	r1, #0
 800c31e:	200a      	movs	r0, #10
 800c320:	68e3      	ldr	r3, [r4, #12]
 800c322:	7832      	ldrb	r2, [r6, #0]
 800c324:	1c75      	adds	r5, r6, #1
 800c326:	3a30      	subs	r2, #48	@ 0x30
 800c328:	2a09      	cmp	r2, #9
 800c32a:	d950      	bls.n	800c3ce <_vfiprintf_r+0x1aa>
 800c32c:	2900      	cmp	r1, #0
 800c32e:	d111      	bne.n	800c354 <_vfiprintf_r+0x130>
 800c330:	e017      	b.n	800c362 <_vfiprintf_r+0x13e>
 800c332:	3601      	adds	r6, #1
 800c334:	e7af      	b.n	800c296 <_vfiprintf_r+0x72>
 800c336:	9b05      	ldr	r3, [sp, #20]
 800c338:	6822      	ldr	r2, [r4, #0]
 800c33a:	1ac0      	subs	r0, r0, r3
 800c33c:	2301      	movs	r3, #1
 800c33e:	4083      	lsls	r3, r0
 800c340:	4313      	orrs	r3, r2
 800c342:	0035      	movs	r5, r6
 800c344:	6023      	str	r3, [r4, #0]
 800c346:	e7cc      	b.n	800c2e2 <_vfiprintf_r+0xbe>
 800c348:	9b07      	ldr	r3, [sp, #28]
 800c34a:	1d19      	adds	r1, r3, #4
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	9107      	str	r1, [sp, #28]
 800c350:	2b00      	cmp	r3, #0
 800c352:	db01      	blt.n	800c358 <_vfiprintf_r+0x134>
 800c354:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c356:	e004      	b.n	800c362 <_vfiprintf_r+0x13e>
 800c358:	425b      	negs	r3, r3
 800c35a:	60e3      	str	r3, [r4, #12]
 800c35c:	2302      	movs	r3, #2
 800c35e:	4313      	orrs	r3, r2
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	7833      	ldrb	r3, [r6, #0]
 800c364:	2b2e      	cmp	r3, #46	@ 0x2e
 800c366:	d10c      	bne.n	800c382 <_vfiprintf_r+0x15e>
 800c368:	7873      	ldrb	r3, [r6, #1]
 800c36a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c36c:	d134      	bne.n	800c3d8 <_vfiprintf_r+0x1b4>
 800c36e:	9b07      	ldr	r3, [sp, #28]
 800c370:	3602      	adds	r6, #2
 800c372:	1d1a      	adds	r2, r3, #4
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	9207      	str	r2, [sp, #28]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	da01      	bge.n	800c380 <_vfiprintf_r+0x15c>
 800c37c:	2301      	movs	r3, #1
 800c37e:	425b      	negs	r3, r3
 800c380:	9309      	str	r3, [sp, #36]	@ 0x24
 800c382:	4d32      	ldr	r5, [pc, #200]	@ (800c44c <_vfiprintf_r+0x228>)
 800c384:	2203      	movs	r2, #3
 800c386:	0028      	movs	r0, r5
 800c388:	7831      	ldrb	r1, [r6, #0]
 800c38a:	f7fe f86f 	bl	800a46c <memchr>
 800c38e:	2800      	cmp	r0, #0
 800c390:	d006      	beq.n	800c3a0 <_vfiprintf_r+0x17c>
 800c392:	2340      	movs	r3, #64	@ 0x40
 800c394:	1b40      	subs	r0, r0, r5
 800c396:	4083      	lsls	r3, r0
 800c398:	6822      	ldr	r2, [r4, #0]
 800c39a:	3601      	adds	r6, #1
 800c39c:	4313      	orrs	r3, r2
 800c39e:	6023      	str	r3, [r4, #0]
 800c3a0:	7831      	ldrb	r1, [r6, #0]
 800c3a2:	2206      	movs	r2, #6
 800c3a4:	482a      	ldr	r0, [pc, #168]	@ (800c450 <_vfiprintf_r+0x22c>)
 800c3a6:	1c75      	adds	r5, r6, #1
 800c3a8:	7621      	strb	r1, [r4, #24]
 800c3aa:	f7fe f85f 	bl	800a46c <memchr>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d040      	beq.n	800c434 <_vfiprintf_r+0x210>
 800c3b2:	4b28      	ldr	r3, [pc, #160]	@ (800c454 <_vfiprintf_r+0x230>)
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d122      	bne.n	800c3fe <_vfiprintf_r+0x1da>
 800c3b8:	2207      	movs	r2, #7
 800c3ba:	9b07      	ldr	r3, [sp, #28]
 800c3bc:	3307      	adds	r3, #7
 800c3be:	4393      	bics	r3, r2
 800c3c0:	3308      	adds	r3, #8
 800c3c2:	9307      	str	r3, [sp, #28]
 800c3c4:	6963      	ldr	r3, [r4, #20]
 800c3c6:	9a04      	ldr	r2, [sp, #16]
 800c3c8:	189b      	adds	r3, r3, r2
 800c3ca:	6163      	str	r3, [r4, #20]
 800c3cc:	e762      	b.n	800c294 <_vfiprintf_r+0x70>
 800c3ce:	4343      	muls	r3, r0
 800c3d0:	002e      	movs	r6, r5
 800c3d2:	2101      	movs	r1, #1
 800c3d4:	189b      	adds	r3, r3, r2
 800c3d6:	e7a4      	b.n	800c322 <_vfiprintf_r+0xfe>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	200a      	movs	r0, #10
 800c3dc:	0019      	movs	r1, r3
 800c3de:	3601      	adds	r6, #1
 800c3e0:	6063      	str	r3, [r4, #4]
 800c3e2:	7832      	ldrb	r2, [r6, #0]
 800c3e4:	1c75      	adds	r5, r6, #1
 800c3e6:	3a30      	subs	r2, #48	@ 0x30
 800c3e8:	2a09      	cmp	r2, #9
 800c3ea:	d903      	bls.n	800c3f4 <_vfiprintf_r+0x1d0>
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d0c8      	beq.n	800c382 <_vfiprintf_r+0x15e>
 800c3f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3f2:	e7c6      	b.n	800c382 <_vfiprintf_r+0x15e>
 800c3f4:	4341      	muls	r1, r0
 800c3f6:	002e      	movs	r6, r5
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	1889      	adds	r1, r1, r2
 800c3fc:	e7f1      	b.n	800c3e2 <_vfiprintf_r+0x1be>
 800c3fe:	aa07      	add	r2, sp, #28
 800c400:	9200      	str	r2, [sp, #0]
 800c402:	0021      	movs	r1, r4
 800c404:	003a      	movs	r2, r7
 800c406:	4b14      	ldr	r3, [pc, #80]	@ (800c458 <_vfiprintf_r+0x234>)
 800c408:	9803      	ldr	r0, [sp, #12]
 800c40a:	f7fd fb41 	bl	8009a90 <_printf_float>
 800c40e:	9004      	str	r0, [sp, #16]
 800c410:	9b04      	ldr	r3, [sp, #16]
 800c412:	3301      	adds	r3, #1
 800c414:	d1d6      	bne.n	800c3c4 <_vfiprintf_r+0x1a0>
 800c416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c418:	07db      	lsls	r3, r3, #31
 800c41a:	d405      	bmi.n	800c428 <_vfiprintf_r+0x204>
 800c41c:	89bb      	ldrh	r3, [r7, #12]
 800c41e:	059b      	lsls	r3, r3, #22
 800c420:	d402      	bmi.n	800c428 <_vfiprintf_r+0x204>
 800c422:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c424:	f7fe f81c 	bl	800a460 <__retarget_lock_release_recursive>
 800c428:	89bb      	ldrh	r3, [r7, #12]
 800c42a:	065b      	lsls	r3, r3, #25
 800c42c:	d500      	bpl.n	800c430 <_vfiprintf_r+0x20c>
 800c42e:	e71e      	b.n	800c26e <_vfiprintf_r+0x4a>
 800c430:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c432:	e71e      	b.n	800c272 <_vfiprintf_r+0x4e>
 800c434:	aa07      	add	r2, sp, #28
 800c436:	9200      	str	r2, [sp, #0]
 800c438:	0021      	movs	r1, r4
 800c43a:	003a      	movs	r2, r7
 800c43c:	4b06      	ldr	r3, [pc, #24]	@ (800c458 <_vfiprintf_r+0x234>)
 800c43e:	9803      	ldr	r0, [sp, #12]
 800c440:	f7fd fdd4 	bl	8009fec <_printf_i>
 800c444:	e7e3      	b.n	800c40e <_vfiprintf_r+0x1ea>
 800c446:	46c0      	nop			@ (mov r8, r8)
 800c448:	0800cbb5 	.word	0x0800cbb5
 800c44c:	0800cbbb 	.word	0x0800cbbb
 800c450:	0800cbbf 	.word	0x0800cbbf
 800c454:	08009a91 	.word	0x08009a91
 800c458:	0800c1ff 	.word	0x0800c1ff

0800c45c <__swbuf_r>:
 800c45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45e:	0006      	movs	r6, r0
 800c460:	000d      	movs	r5, r1
 800c462:	0014      	movs	r4, r2
 800c464:	2800      	cmp	r0, #0
 800c466:	d004      	beq.n	800c472 <__swbuf_r+0x16>
 800c468:	6a03      	ldr	r3, [r0, #32]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d101      	bne.n	800c472 <__swbuf_r+0x16>
 800c46e:	f7fd ff8f 	bl	800a390 <__sinit>
 800c472:	69a3      	ldr	r3, [r4, #24]
 800c474:	60a3      	str	r3, [r4, #8]
 800c476:	89a3      	ldrh	r3, [r4, #12]
 800c478:	071b      	lsls	r3, r3, #28
 800c47a:	d502      	bpl.n	800c482 <__swbuf_r+0x26>
 800c47c:	6923      	ldr	r3, [r4, #16]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d109      	bne.n	800c496 <__swbuf_r+0x3a>
 800c482:	0021      	movs	r1, r4
 800c484:	0030      	movs	r0, r6
 800c486:	f000 f82b 	bl	800c4e0 <__swsetup_r>
 800c48a:	2800      	cmp	r0, #0
 800c48c:	d003      	beq.n	800c496 <__swbuf_r+0x3a>
 800c48e:	2501      	movs	r5, #1
 800c490:	426d      	negs	r5, r5
 800c492:	0028      	movs	r0, r5
 800c494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c496:	6923      	ldr	r3, [r4, #16]
 800c498:	6820      	ldr	r0, [r4, #0]
 800c49a:	b2ef      	uxtb	r7, r5
 800c49c:	1ac0      	subs	r0, r0, r3
 800c49e:	6963      	ldr	r3, [r4, #20]
 800c4a0:	b2ed      	uxtb	r5, r5
 800c4a2:	4283      	cmp	r3, r0
 800c4a4:	dc05      	bgt.n	800c4b2 <__swbuf_r+0x56>
 800c4a6:	0021      	movs	r1, r4
 800c4a8:	0030      	movs	r0, r6
 800c4aa:	f7ff f8f9 	bl	800b6a0 <_fflush_r>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	d1ed      	bne.n	800c48e <__swbuf_r+0x32>
 800c4b2:	68a3      	ldr	r3, [r4, #8]
 800c4b4:	3001      	adds	r0, #1
 800c4b6:	3b01      	subs	r3, #1
 800c4b8:	60a3      	str	r3, [r4, #8]
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	1c5a      	adds	r2, r3, #1
 800c4be:	6022      	str	r2, [r4, #0]
 800c4c0:	701f      	strb	r7, [r3, #0]
 800c4c2:	6963      	ldr	r3, [r4, #20]
 800c4c4:	4283      	cmp	r3, r0
 800c4c6:	d004      	beq.n	800c4d2 <__swbuf_r+0x76>
 800c4c8:	89a3      	ldrh	r3, [r4, #12]
 800c4ca:	07db      	lsls	r3, r3, #31
 800c4cc:	d5e1      	bpl.n	800c492 <__swbuf_r+0x36>
 800c4ce:	2d0a      	cmp	r5, #10
 800c4d0:	d1df      	bne.n	800c492 <__swbuf_r+0x36>
 800c4d2:	0021      	movs	r1, r4
 800c4d4:	0030      	movs	r0, r6
 800c4d6:	f7ff f8e3 	bl	800b6a0 <_fflush_r>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d0d9      	beq.n	800c492 <__swbuf_r+0x36>
 800c4de:	e7d6      	b.n	800c48e <__swbuf_r+0x32>

0800c4e0 <__swsetup_r>:
 800c4e0:	4b2d      	ldr	r3, [pc, #180]	@ (800c598 <__swsetup_r+0xb8>)
 800c4e2:	b570      	push	{r4, r5, r6, lr}
 800c4e4:	0005      	movs	r5, r0
 800c4e6:	6818      	ldr	r0, [r3, #0]
 800c4e8:	000c      	movs	r4, r1
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	d004      	beq.n	800c4f8 <__swsetup_r+0x18>
 800c4ee:	6a03      	ldr	r3, [r0, #32]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d101      	bne.n	800c4f8 <__swsetup_r+0x18>
 800c4f4:	f7fd ff4c 	bl	800a390 <__sinit>
 800c4f8:	220c      	movs	r2, #12
 800c4fa:	5ea3      	ldrsh	r3, [r4, r2]
 800c4fc:	071a      	lsls	r2, r3, #28
 800c4fe:	d423      	bmi.n	800c548 <__swsetup_r+0x68>
 800c500:	06da      	lsls	r2, r3, #27
 800c502:	d407      	bmi.n	800c514 <__swsetup_r+0x34>
 800c504:	2209      	movs	r2, #9
 800c506:	602a      	str	r2, [r5, #0]
 800c508:	2240      	movs	r2, #64	@ 0x40
 800c50a:	2001      	movs	r0, #1
 800c50c:	4313      	orrs	r3, r2
 800c50e:	81a3      	strh	r3, [r4, #12]
 800c510:	4240      	negs	r0, r0
 800c512:	e03a      	b.n	800c58a <__swsetup_r+0xaa>
 800c514:	075b      	lsls	r3, r3, #29
 800c516:	d513      	bpl.n	800c540 <__swsetup_r+0x60>
 800c518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c51a:	2900      	cmp	r1, #0
 800c51c:	d008      	beq.n	800c530 <__swsetup_r+0x50>
 800c51e:	0023      	movs	r3, r4
 800c520:	3344      	adds	r3, #68	@ 0x44
 800c522:	4299      	cmp	r1, r3
 800c524:	d002      	beq.n	800c52c <__swsetup_r+0x4c>
 800c526:	0028      	movs	r0, r5
 800c528:	f7ff fdcc 	bl	800c0c4 <_free_r>
 800c52c:	2300      	movs	r3, #0
 800c52e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c530:	2224      	movs	r2, #36	@ 0x24
 800c532:	89a3      	ldrh	r3, [r4, #12]
 800c534:	4393      	bics	r3, r2
 800c536:	81a3      	strh	r3, [r4, #12]
 800c538:	2300      	movs	r3, #0
 800c53a:	6063      	str	r3, [r4, #4]
 800c53c:	6923      	ldr	r3, [r4, #16]
 800c53e:	6023      	str	r3, [r4, #0]
 800c540:	2308      	movs	r3, #8
 800c542:	89a2      	ldrh	r2, [r4, #12]
 800c544:	4313      	orrs	r3, r2
 800c546:	81a3      	strh	r3, [r4, #12]
 800c548:	6923      	ldr	r3, [r4, #16]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d10b      	bne.n	800c566 <__swsetup_r+0x86>
 800c54e:	21a0      	movs	r1, #160	@ 0xa0
 800c550:	2280      	movs	r2, #128	@ 0x80
 800c552:	89a3      	ldrh	r3, [r4, #12]
 800c554:	0089      	lsls	r1, r1, #2
 800c556:	0092      	lsls	r2, r2, #2
 800c558:	400b      	ands	r3, r1
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d003      	beq.n	800c566 <__swsetup_r+0x86>
 800c55e:	0021      	movs	r1, r4
 800c560:	0028      	movs	r0, r5
 800c562:	f000 f845 	bl	800c5f0 <__smakebuf_r>
 800c566:	220c      	movs	r2, #12
 800c568:	5ea3      	ldrsh	r3, [r4, r2]
 800c56a:	2101      	movs	r1, #1
 800c56c:	001a      	movs	r2, r3
 800c56e:	400a      	ands	r2, r1
 800c570:	420b      	tst	r3, r1
 800c572:	d00b      	beq.n	800c58c <__swsetup_r+0xac>
 800c574:	2200      	movs	r2, #0
 800c576:	60a2      	str	r2, [r4, #8]
 800c578:	6962      	ldr	r2, [r4, #20]
 800c57a:	4252      	negs	r2, r2
 800c57c:	61a2      	str	r2, [r4, #24]
 800c57e:	2000      	movs	r0, #0
 800c580:	6922      	ldr	r2, [r4, #16]
 800c582:	4282      	cmp	r2, r0
 800c584:	d101      	bne.n	800c58a <__swsetup_r+0xaa>
 800c586:	061a      	lsls	r2, r3, #24
 800c588:	d4be      	bmi.n	800c508 <__swsetup_r+0x28>
 800c58a:	bd70      	pop	{r4, r5, r6, pc}
 800c58c:	0799      	lsls	r1, r3, #30
 800c58e:	d400      	bmi.n	800c592 <__swsetup_r+0xb2>
 800c590:	6962      	ldr	r2, [r4, #20]
 800c592:	60a2      	str	r2, [r4, #8]
 800c594:	e7f3      	b.n	800c57e <__swsetup_r+0x9e>
 800c596:	46c0      	nop			@ (mov r8, r8)
 800c598:	20000018 	.word	0x20000018

0800c59c <__swhatbuf_r>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	000e      	movs	r6, r1
 800c5a0:	001d      	movs	r5, r3
 800c5a2:	230e      	movs	r3, #14
 800c5a4:	5ec9      	ldrsh	r1, [r1, r3]
 800c5a6:	0014      	movs	r4, r2
 800c5a8:	b096      	sub	sp, #88	@ 0x58
 800c5aa:	2900      	cmp	r1, #0
 800c5ac:	da0c      	bge.n	800c5c8 <__swhatbuf_r+0x2c>
 800c5ae:	89b2      	ldrh	r2, [r6, #12]
 800c5b0:	2380      	movs	r3, #128	@ 0x80
 800c5b2:	0011      	movs	r1, r2
 800c5b4:	4019      	ands	r1, r3
 800c5b6:	421a      	tst	r2, r3
 800c5b8:	d114      	bne.n	800c5e4 <__swhatbuf_r+0x48>
 800c5ba:	2380      	movs	r3, #128	@ 0x80
 800c5bc:	00db      	lsls	r3, r3, #3
 800c5be:	2000      	movs	r0, #0
 800c5c0:	6029      	str	r1, [r5, #0]
 800c5c2:	6023      	str	r3, [r4, #0]
 800c5c4:	b016      	add	sp, #88	@ 0x58
 800c5c6:	bd70      	pop	{r4, r5, r6, pc}
 800c5c8:	466a      	mov	r2, sp
 800c5ca:	f000 f8ad 	bl	800c728 <_fstat_r>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	dbed      	blt.n	800c5ae <__swhatbuf_r+0x12>
 800c5d2:	23f0      	movs	r3, #240	@ 0xf0
 800c5d4:	9901      	ldr	r1, [sp, #4]
 800c5d6:	021b      	lsls	r3, r3, #8
 800c5d8:	4019      	ands	r1, r3
 800c5da:	4b04      	ldr	r3, [pc, #16]	@ (800c5ec <__swhatbuf_r+0x50>)
 800c5dc:	18c9      	adds	r1, r1, r3
 800c5de:	424b      	negs	r3, r1
 800c5e0:	4159      	adcs	r1, r3
 800c5e2:	e7ea      	b.n	800c5ba <__swhatbuf_r+0x1e>
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	2340      	movs	r3, #64	@ 0x40
 800c5e8:	e7e9      	b.n	800c5be <__swhatbuf_r+0x22>
 800c5ea:	46c0      	nop			@ (mov r8, r8)
 800c5ec:	ffffe000 	.word	0xffffe000

0800c5f0 <__smakebuf_r>:
 800c5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5f2:	2602      	movs	r6, #2
 800c5f4:	898b      	ldrh	r3, [r1, #12]
 800c5f6:	0005      	movs	r5, r0
 800c5f8:	000c      	movs	r4, r1
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	4233      	tst	r3, r6
 800c5fe:	d007      	beq.n	800c610 <__smakebuf_r+0x20>
 800c600:	0023      	movs	r3, r4
 800c602:	3347      	adds	r3, #71	@ 0x47
 800c604:	6023      	str	r3, [r4, #0]
 800c606:	6123      	str	r3, [r4, #16]
 800c608:	2301      	movs	r3, #1
 800c60a:	6163      	str	r3, [r4, #20]
 800c60c:	b005      	add	sp, #20
 800c60e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c610:	ab03      	add	r3, sp, #12
 800c612:	aa02      	add	r2, sp, #8
 800c614:	f7ff ffc2 	bl	800c59c <__swhatbuf_r>
 800c618:	9f02      	ldr	r7, [sp, #8]
 800c61a:	9001      	str	r0, [sp, #4]
 800c61c:	0039      	movs	r1, r7
 800c61e:	0028      	movs	r0, r5
 800c620:	f7fe ff38 	bl	800b494 <_malloc_r>
 800c624:	2800      	cmp	r0, #0
 800c626:	d108      	bne.n	800c63a <__smakebuf_r+0x4a>
 800c628:	220c      	movs	r2, #12
 800c62a:	5ea3      	ldrsh	r3, [r4, r2]
 800c62c:	059a      	lsls	r2, r3, #22
 800c62e:	d4ed      	bmi.n	800c60c <__smakebuf_r+0x1c>
 800c630:	2203      	movs	r2, #3
 800c632:	4393      	bics	r3, r2
 800c634:	431e      	orrs	r6, r3
 800c636:	81a6      	strh	r6, [r4, #12]
 800c638:	e7e2      	b.n	800c600 <__smakebuf_r+0x10>
 800c63a:	2380      	movs	r3, #128	@ 0x80
 800c63c:	89a2      	ldrh	r2, [r4, #12]
 800c63e:	6020      	str	r0, [r4, #0]
 800c640:	4313      	orrs	r3, r2
 800c642:	81a3      	strh	r3, [r4, #12]
 800c644:	9b03      	ldr	r3, [sp, #12]
 800c646:	6120      	str	r0, [r4, #16]
 800c648:	6167      	str	r7, [r4, #20]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00c      	beq.n	800c668 <__smakebuf_r+0x78>
 800c64e:	0028      	movs	r0, r5
 800c650:	230e      	movs	r3, #14
 800c652:	5ee1      	ldrsh	r1, [r4, r3]
 800c654:	f000 f840 	bl	800c6d8 <_isatty_r>
 800c658:	2800      	cmp	r0, #0
 800c65a:	d005      	beq.n	800c668 <__smakebuf_r+0x78>
 800c65c:	2303      	movs	r3, #3
 800c65e:	89a2      	ldrh	r2, [r4, #12]
 800c660:	439a      	bics	r2, r3
 800c662:	3b02      	subs	r3, #2
 800c664:	4313      	orrs	r3, r2
 800c666:	81a3      	strh	r3, [r4, #12]
 800c668:	89a3      	ldrh	r3, [r4, #12]
 800c66a:	9a01      	ldr	r2, [sp, #4]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	81a3      	strh	r3, [r4, #12]
 800c670:	e7cc      	b.n	800c60c <__smakebuf_r+0x1c>

0800c672 <_raise_r>:
 800c672:	b570      	push	{r4, r5, r6, lr}
 800c674:	0004      	movs	r4, r0
 800c676:	000d      	movs	r5, r1
 800c678:	291f      	cmp	r1, #31
 800c67a:	d904      	bls.n	800c686 <_raise_r+0x14>
 800c67c:	2316      	movs	r3, #22
 800c67e:	6003      	str	r3, [r0, #0]
 800c680:	2001      	movs	r0, #1
 800c682:	4240      	negs	r0, r0
 800c684:	bd70      	pop	{r4, r5, r6, pc}
 800c686:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d004      	beq.n	800c696 <_raise_r+0x24>
 800c68c:	008a      	lsls	r2, r1, #2
 800c68e:	189b      	adds	r3, r3, r2
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	2a00      	cmp	r2, #0
 800c694:	d108      	bne.n	800c6a8 <_raise_r+0x36>
 800c696:	0020      	movs	r0, r4
 800c698:	f000 f842 	bl	800c720 <_getpid_r>
 800c69c:	002a      	movs	r2, r5
 800c69e:	0001      	movs	r1, r0
 800c6a0:	0020      	movs	r0, r4
 800c6a2:	f000 f82b 	bl	800c6fc <_kill_r>
 800c6a6:	e7ed      	b.n	800c684 <_raise_r+0x12>
 800c6a8:	2a01      	cmp	r2, #1
 800c6aa:	d009      	beq.n	800c6c0 <_raise_r+0x4e>
 800c6ac:	1c51      	adds	r1, r2, #1
 800c6ae:	d103      	bne.n	800c6b8 <_raise_r+0x46>
 800c6b0:	2316      	movs	r3, #22
 800c6b2:	6003      	str	r3, [r0, #0]
 800c6b4:	2001      	movs	r0, #1
 800c6b6:	e7e5      	b.n	800c684 <_raise_r+0x12>
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	0028      	movs	r0, r5
 800c6bc:	6019      	str	r1, [r3, #0]
 800c6be:	4790      	blx	r2
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	e7df      	b.n	800c684 <_raise_r+0x12>

0800c6c4 <raise>:
 800c6c4:	b510      	push	{r4, lr}
 800c6c6:	4b03      	ldr	r3, [pc, #12]	@ (800c6d4 <raise+0x10>)
 800c6c8:	0001      	movs	r1, r0
 800c6ca:	6818      	ldr	r0, [r3, #0]
 800c6cc:	f7ff ffd1 	bl	800c672 <_raise_r>
 800c6d0:	bd10      	pop	{r4, pc}
 800c6d2:	46c0      	nop			@ (mov r8, r8)
 800c6d4:	20000018 	.word	0x20000018

0800c6d8 <_isatty_r>:
 800c6d8:	2300      	movs	r3, #0
 800c6da:	b570      	push	{r4, r5, r6, lr}
 800c6dc:	4d06      	ldr	r5, [pc, #24]	@ (800c6f8 <_isatty_r+0x20>)
 800c6de:	0004      	movs	r4, r0
 800c6e0:	0008      	movs	r0, r1
 800c6e2:	602b      	str	r3, [r5, #0]
 800c6e4:	f7fa f88b 	bl	80067fe <_isatty>
 800c6e8:	1c43      	adds	r3, r0, #1
 800c6ea:	d103      	bne.n	800c6f4 <_isatty_r+0x1c>
 800c6ec:	682b      	ldr	r3, [r5, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d000      	beq.n	800c6f4 <_isatty_r+0x1c>
 800c6f2:	6023      	str	r3, [r4, #0]
 800c6f4:	bd70      	pop	{r4, r5, r6, pc}
 800c6f6:	46c0      	nop			@ (mov r8, r8)
 800c6f8:	200004e0 	.word	0x200004e0

0800c6fc <_kill_r>:
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	b570      	push	{r4, r5, r6, lr}
 800c700:	4d06      	ldr	r5, [pc, #24]	@ (800c71c <_kill_r+0x20>)
 800c702:	0004      	movs	r4, r0
 800c704:	0008      	movs	r0, r1
 800c706:	0011      	movs	r1, r2
 800c708:	602b      	str	r3, [r5, #0]
 800c70a:	f7fa f80a 	bl	8006722 <_kill>
 800c70e:	1c43      	adds	r3, r0, #1
 800c710:	d103      	bne.n	800c71a <_kill_r+0x1e>
 800c712:	682b      	ldr	r3, [r5, #0]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d000      	beq.n	800c71a <_kill_r+0x1e>
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	bd70      	pop	{r4, r5, r6, pc}
 800c71c:	200004e0 	.word	0x200004e0

0800c720 <_getpid_r>:
 800c720:	b510      	push	{r4, lr}
 800c722:	f7f9 fff8 	bl	8006716 <_getpid>
 800c726:	bd10      	pop	{r4, pc}

0800c728 <_fstat_r>:
 800c728:	2300      	movs	r3, #0
 800c72a:	b570      	push	{r4, r5, r6, lr}
 800c72c:	4d06      	ldr	r5, [pc, #24]	@ (800c748 <_fstat_r+0x20>)
 800c72e:	0004      	movs	r4, r0
 800c730:	0008      	movs	r0, r1
 800c732:	0011      	movs	r1, r2
 800c734:	602b      	str	r3, [r5, #0]
 800c736:	f7fa f854 	bl	80067e2 <_fstat>
 800c73a:	1c43      	adds	r3, r0, #1
 800c73c:	d103      	bne.n	800c746 <_fstat_r+0x1e>
 800c73e:	682b      	ldr	r3, [r5, #0]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d000      	beq.n	800c746 <_fstat_r+0x1e>
 800c744:	6023      	str	r3, [r4, #0]
 800c746:	bd70      	pop	{r4, r5, r6, pc}
 800c748:	200004e0 	.word	0x200004e0

0800c74c <_init>:
 800c74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74e:	46c0      	nop			@ (mov r8, r8)
 800c750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c752:	bc08      	pop	{r3}
 800c754:	469e      	mov	lr, r3
 800c756:	4770      	bx	lr

0800c758 <_fini>:
 800c758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75a:	46c0      	nop			@ (mov r8, r8)
 800c75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c75e:	bc08      	pop	{r3}
 800c760:	469e      	mov	lr, r3
 800c762:	4770      	bx	lr
