
hsn-253-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d864  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b5c  0800d920  0800d920  0000e920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e47c  0800e47c  000101d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e47c  0800e47c  0000f47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e484  0800e484  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e484  0800e484  0000f484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e488  0800e488  0000f488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800e48c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  200001d4  0800e660  000101d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  0800e660  00010548  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001228e  00000000  00000000  000101fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002749  00000000  00000000  0002248a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00024bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c02  00000000  00000000  00025b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ac6  00000000  00000000  0002670a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139ce  00000000  00000000  0002a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a02ed  00000000  00000000  0003db9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dde8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dcc  00000000  00000000  000dded0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e2c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001d4 	.word	0x200001d4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d908 	.word	0x0800d908

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001d8 	.word	0x200001d8
 8000100:	0800d908 	.word	0x0800d908

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			@ (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	@ 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	@ 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	@ 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	0010      	movs	r0, r2
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	0019      	movs	r1, r3
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f002 f937 	bl	80026c0 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f002 f87b 	bl	8002558 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f002 f929 	bl	80026c0 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f002 f91f 	bl	80026c0 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f002 f8a5 	bl	80025e0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f002 f89b 	bl	80025e0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			@ (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	0008      	movs	r0, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fcaf 	bl	8000e24 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc37 	bl	8000d44 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fca1 	bl	8000e24 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fc97 	bl	8000e24 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fc45 	bl	8000d94 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc3b 	bl	8000d94 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			@ (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	0008      	movs	r0, r1
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	@ (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f81e 	bl	800059c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_f2uiz>:
 800056c:	219e      	movs	r1, #158	@ 0x9e
 800056e:	b510      	push	{r4, lr}
 8000570:	05c9      	lsls	r1, r1, #23
 8000572:	1c04      	adds	r4, r0, #0
 8000574:	f7ff ffd0 	bl	8000518 <__aeabi_fcmpge>
 8000578:	2800      	cmp	r0, #0
 800057a:	d103      	bne.n	8000584 <__aeabi_f2uiz+0x18>
 800057c:	1c20      	adds	r0, r4, #0
 800057e:	f001 f857 	bl	8001630 <__aeabi_f2iz>
 8000582:	bd10      	pop	{r4, pc}
 8000584:	219e      	movs	r1, #158	@ 0x9e
 8000586:	1c20      	adds	r0, r4, #0
 8000588:	05c9      	lsls	r1, r1, #23
 800058a:	f000 fded 	bl	8001168 <__aeabi_fsub>
 800058e:	f001 f84f 	bl	8001630 <__aeabi_f2iz>
 8000592:	2380      	movs	r3, #128	@ 0x80
 8000594:	061b      	lsls	r3, r3, #24
 8000596:	469c      	mov	ip, r3
 8000598:	4460      	add	r0, ip
 800059a:	e7f2      	b.n	8000582 <__aeabi_f2uiz+0x16>

0800059c <__udivmoddi4>:
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	4657      	mov	r7, sl
 80005a0:	464e      	mov	r6, r9
 80005a2:	4645      	mov	r5, r8
 80005a4:	46de      	mov	lr, fp
 80005a6:	b5e0      	push	{r5, r6, r7, lr}
 80005a8:	0004      	movs	r4, r0
 80005aa:	000d      	movs	r5, r1
 80005ac:	4692      	mov	sl, r2
 80005ae:	4699      	mov	r9, r3
 80005b0:	b083      	sub	sp, #12
 80005b2:	428b      	cmp	r3, r1
 80005b4:	d830      	bhi.n	8000618 <__udivmoddi4+0x7c>
 80005b6:	d02d      	beq.n	8000614 <__udivmoddi4+0x78>
 80005b8:	4649      	mov	r1, r9
 80005ba:	4650      	mov	r0, sl
 80005bc:	f003 f8f4 	bl	80037a8 <__clzdi2>
 80005c0:	0029      	movs	r1, r5
 80005c2:	0006      	movs	r6, r0
 80005c4:	0020      	movs	r0, r4
 80005c6:	f003 f8ef 	bl	80037a8 <__clzdi2>
 80005ca:	1a33      	subs	r3, r6, r0
 80005cc:	4698      	mov	r8, r3
 80005ce:	3b20      	subs	r3, #32
 80005d0:	d434      	bmi.n	800063c <__udivmoddi4+0xa0>
 80005d2:	469b      	mov	fp, r3
 80005d4:	4653      	mov	r3, sl
 80005d6:	465a      	mov	r2, fp
 80005d8:	4093      	lsls	r3, r2
 80005da:	4642      	mov	r2, r8
 80005dc:	001f      	movs	r7, r3
 80005de:	4653      	mov	r3, sl
 80005e0:	4093      	lsls	r3, r2
 80005e2:	001e      	movs	r6, r3
 80005e4:	42af      	cmp	r7, r5
 80005e6:	d83b      	bhi.n	8000660 <__udivmoddi4+0xc4>
 80005e8:	42af      	cmp	r7, r5
 80005ea:	d100      	bne.n	80005ee <__udivmoddi4+0x52>
 80005ec:	e079      	b.n	80006e2 <__udivmoddi4+0x146>
 80005ee:	465b      	mov	r3, fp
 80005f0:	1ba4      	subs	r4, r4, r6
 80005f2:	41bd      	sbcs	r5, r7
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	da00      	bge.n	80005fa <__udivmoddi4+0x5e>
 80005f8:	e076      	b.n	80006e8 <__udivmoddi4+0x14c>
 80005fa:	2200      	movs	r2, #0
 80005fc:	2300      	movs	r3, #0
 80005fe:	9200      	str	r2, [sp, #0]
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2301      	movs	r3, #1
 8000604:	465a      	mov	r2, fp
 8000606:	4093      	lsls	r3, r2
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	2301      	movs	r3, #1
 800060c:	4642      	mov	r2, r8
 800060e:	4093      	lsls	r3, r2
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	e029      	b.n	8000668 <__udivmoddi4+0xcc>
 8000614:	4282      	cmp	r2, r0
 8000616:	d9cf      	bls.n	80005b8 <__udivmoddi4+0x1c>
 8000618:	2200      	movs	r2, #0
 800061a:	2300      	movs	r3, #0
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <__udivmoddi4+0x8e>
 8000626:	601c      	str	r4, [r3, #0]
 8000628:	605d      	str	r5, [r3, #4]
 800062a:	9800      	ldr	r0, [sp, #0]
 800062c:	9901      	ldr	r1, [sp, #4]
 800062e:	b003      	add	sp, #12
 8000630:	bcf0      	pop	{r4, r5, r6, r7}
 8000632:	46bb      	mov	fp, r7
 8000634:	46b2      	mov	sl, r6
 8000636:	46a9      	mov	r9, r5
 8000638:	46a0      	mov	r8, r4
 800063a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800063c:	4642      	mov	r2, r8
 800063e:	469b      	mov	fp, r3
 8000640:	2320      	movs	r3, #32
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	4652      	mov	r2, sl
 8000646:	40da      	lsrs	r2, r3
 8000648:	4641      	mov	r1, r8
 800064a:	0013      	movs	r3, r2
 800064c:	464a      	mov	r2, r9
 800064e:	408a      	lsls	r2, r1
 8000650:	0017      	movs	r7, r2
 8000652:	4642      	mov	r2, r8
 8000654:	431f      	orrs	r7, r3
 8000656:	4653      	mov	r3, sl
 8000658:	4093      	lsls	r3, r2
 800065a:	001e      	movs	r6, r3
 800065c:	42af      	cmp	r7, r5
 800065e:	d9c3      	bls.n	80005e8 <__udivmoddi4+0x4c>
 8000660:	2200      	movs	r2, #0
 8000662:	2300      	movs	r3, #0
 8000664:	9200      	str	r2, [sp, #0]
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	4643      	mov	r3, r8
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0d8      	beq.n	8000620 <__udivmoddi4+0x84>
 800066e:	07fb      	lsls	r3, r7, #31
 8000670:	0872      	lsrs	r2, r6, #1
 8000672:	431a      	orrs	r2, r3
 8000674:	4646      	mov	r6, r8
 8000676:	087b      	lsrs	r3, r7, #1
 8000678:	e00e      	b.n	8000698 <__udivmoddi4+0xfc>
 800067a:	42ab      	cmp	r3, r5
 800067c:	d101      	bne.n	8000682 <__udivmoddi4+0xe6>
 800067e:	42a2      	cmp	r2, r4
 8000680:	d80c      	bhi.n	800069c <__udivmoddi4+0x100>
 8000682:	1aa4      	subs	r4, r4, r2
 8000684:	419d      	sbcs	r5, r3
 8000686:	2001      	movs	r0, #1
 8000688:	1924      	adds	r4, r4, r4
 800068a:	416d      	adcs	r5, r5
 800068c:	2100      	movs	r1, #0
 800068e:	3e01      	subs	r6, #1
 8000690:	1824      	adds	r4, r4, r0
 8000692:	414d      	adcs	r5, r1
 8000694:	2e00      	cmp	r6, #0
 8000696:	d006      	beq.n	80006a6 <__udivmoddi4+0x10a>
 8000698:	42ab      	cmp	r3, r5
 800069a:	d9ee      	bls.n	800067a <__udivmoddi4+0xde>
 800069c:	3e01      	subs	r6, #1
 800069e:	1924      	adds	r4, r4, r4
 80006a0:	416d      	adcs	r5, r5
 80006a2:	2e00      	cmp	r6, #0
 80006a4:	d1f8      	bne.n	8000698 <__udivmoddi4+0xfc>
 80006a6:	9800      	ldr	r0, [sp, #0]
 80006a8:	9901      	ldr	r1, [sp, #4]
 80006aa:	465b      	mov	r3, fp
 80006ac:	1900      	adds	r0, r0, r4
 80006ae:	4169      	adcs	r1, r5
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db24      	blt.n	80006fe <__udivmoddi4+0x162>
 80006b4:	002b      	movs	r3, r5
 80006b6:	465a      	mov	r2, fp
 80006b8:	4644      	mov	r4, r8
 80006ba:	40d3      	lsrs	r3, r2
 80006bc:	002a      	movs	r2, r5
 80006be:	40e2      	lsrs	r2, r4
 80006c0:	001c      	movs	r4, r3
 80006c2:	465b      	mov	r3, fp
 80006c4:	0015      	movs	r5, r2
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	db2a      	blt.n	8000720 <__udivmoddi4+0x184>
 80006ca:	0026      	movs	r6, r4
 80006cc:	409e      	lsls	r6, r3
 80006ce:	0033      	movs	r3, r6
 80006d0:	0026      	movs	r6, r4
 80006d2:	4647      	mov	r7, r8
 80006d4:	40be      	lsls	r6, r7
 80006d6:	0032      	movs	r2, r6
 80006d8:	1a80      	subs	r0, r0, r2
 80006da:	4199      	sbcs	r1, r3
 80006dc:	9000      	str	r0, [sp, #0]
 80006de:	9101      	str	r1, [sp, #4]
 80006e0:	e79e      	b.n	8000620 <__udivmoddi4+0x84>
 80006e2:	42a3      	cmp	r3, r4
 80006e4:	d8bc      	bhi.n	8000660 <__udivmoddi4+0xc4>
 80006e6:	e782      	b.n	80005ee <__udivmoddi4+0x52>
 80006e8:	4642      	mov	r2, r8
 80006ea:	2320      	movs	r3, #32
 80006ec:	2100      	movs	r1, #0
 80006ee:	1a9b      	subs	r3, r3, r2
 80006f0:	2200      	movs	r2, #0
 80006f2:	9100      	str	r1, [sp, #0]
 80006f4:	9201      	str	r2, [sp, #4]
 80006f6:	2201      	movs	r2, #1
 80006f8:	40da      	lsrs	r2, r3
 80006fa:	9201      	str	r2, [sp, #4]
 80006fc:	e785      	b.n	800060a <__udivmoddi4+0x6e>
 80006fe:	4642      	mov	r2, r8
 8000700:	2320      	movs	r3, #32
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	002a      	movs	r2, r5
 8000706:	4646      	mov	r6, r8
 8000708:	409a      	lsls	r2, r3
 800070a:	0023      	movs	r3, r4
 800070c:	40f3      	lsrs	r3, r6
 800070e:	4644      	mov	r4, r8
 8000710:	4313      	orrs	r3, r2
 8000712:	002a      	movs	r2, r5
 8000714:	40e2      	lsrs	r2, r4
 8000716:	001c      	movs	r4, r3
 8000718:	465b      	mov	r3, fp
 800071a:	0015      	movs	r5, r2
 800071c:	2b00      	cmp	r3, #0
 800071e:	dad4      	bge.n	80006ca <__udivmoddi4+0x12e>
 8000720:	4642      	mov	r2, r8
 8000722:	002f      	movs	r7, r5
 8000724:	2320      	movs	r3, #32
 8000726:	0026      	movs	r6, r4
 8000728:	4097      	lsls	r7, r2
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	40de      	lsrs	r6, r3
 800072e:	003b      	movs	r3, r7
 8000730:	4333      	orrs	r3, r6
 8000732:	e7cd      	b.n	80006d0 <__udivmoddi4+0x134>

08000734 <__aeabi_fadd>:
 8000734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000736:	024b      	lsls	r3, r1, #9
 8000738:	0a5a      	lsrs	r2, r3, #9
 800073a:	4694      	mov	ip, r2
 800073c:	004a      	lsls	r2, r1, #1
 800073e:	0fc9      	lsrs	r1, r1, #31
 8000740:	46ce      	mov	lr, r9
 8000742:	4647      	mov	r7, r8
 8000744:	4689      	mov	r9, r1
 8000746:	0045      	lsls	r5, r0, #1
 8000748:	0246      	lsls	r6, r0, #9
 800074a:	0e2d      	lsrs	r5, r5, #24
 800074c:	0e12      	lsrs	r2, r2, #24
 800074e:	b580      	push	{r7, lr}
 8000750:	0999      	lsrs	r1, r3, #6
 8000752:	0a77      	lsrs	r7, r6, #9
 8000754:	0fc4      	lsrs	r4, r0, #31
 8000756:	09b6      	lsrs	r6, r6, #6
 8000758:	1aab      	subs	r3, r5, r2
 800075a:	454c      	cmp	r4, r9
 800075c:	d020      	beq.n	80007a0 <__aeabi_fadd+0x6c>
 800075e:	2b00      	cmp	r3, #0
 8000760:	dd0c      	ble.n	800077c <__aeabi_fadd+0x48>
 8000762:	2a00      	cmp	r2, #0
 8000764:	d134      	bne.n	80007d0 <__aeabi_fadd+0x9c>
 8000766:	2900      	cmp	r1, #0
 8000768:	d02a      	beq.n	80007c0 <__aeabi_fadd+0x8c>
 800076a:	1e5a      	subs	r2, r3, #1
 800076c:	2b01      	cmp	r3, #1
 800076e:	d100      	bne.n	8000772 <__aeabi_fadd+0x3e>
 8000770:	e08f      	b.n	8000892 <__aeabi_fadd+0x15e>
 8000772:	2bff      	cmp	r3, #255	@ 0xff
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x44>
 8000776:	e0cd      	b.n	8000914 <__aeabi_fadd+0x1e0>
 8000778:	0013      	movs	r3, r2
 800077a:	e02f      	b.n	80007dc <__aeabi_fadd+0xa8>
 800077c:	2b00      	cmp	r3, #0
 800077e:	d060      	beq.n	8000842 <__aeabi_fadd+0x10e>
 8000780:	1b53      	subs	r3, r2, r5
 8000782:	2d00      	cmp	r5, #0
 8000784:	d000      	beq.n	8000788 <__aeabi_fadd+0x54>
 8000786:	e0ee      	b.n	8000966 <__aeabi_fadd+0x232>
 8000788:	2e00      	cmp	r6, #0
 800078a:	d100      	bne.n	800078e <__aeabi_fadd+0x5a>
 800078c:	e13e      	b.n	8000a0c <__aeabi_fadd+0x2d8>
 800078e:	1e5c      	subs	r4, r3, #1
 8000790:	2b01      	cmp	r3, #1
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x62>
 8000794:	e16b      	b.n	8000a6e <__aeabi_fadd+0x33a>
 8000796:	2bff      	cmp	r3, #255	@ 0xff
 8000798:	d100      	bne.n	800079c <__aeabi_fadd+0x68>
 800079a:	e0b9      	b.n	8000910 <__aeabi_fadd+0x1dc>
 800079c:	0023      	movs	r3, r4
 800079e:	e0e7      	b.n	8000970 <__aeabi_fadd+0x23c>
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	dc00      	bgt.n	80007a6 <__aeabi_fadd+0x72>
 80007a4:	e0a4      	b.n	80008f0 <__aeabi_fadd+0x1bc>
 80007a6:	2a00      	cmp	r2, #0
 80007a8:	d069      	beq.n	800087e <__aeabi_fadd+0x14a>
 80007aa:	2dff      	cmp	r5, #255	@ 0xff
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fadd+0x7c>
 80007ae:	e0b1      	b.n	8000914 <__aeabi_fadd+0x1e0>
 80007b0:	2280      	movs	r2, #128	@ 0x80
 80007b2:	04d2      	lsls	r2, r2, #19
 80007b4:	4311      	orrs	r1, r2
 80007b6:	2b1b      	cmp	r3, #27
 80007b8:	dc00      	bgt.n	80007bc <__aeabi_fadd+0x88>
 80007ba:	e0e9      	b.n	8000990 <__aeabi_fadd+0x25c>
 80007bc:	002b      	movs	r3, r5
 80007be:	3605      	adds	r6, #5
 80007c0:	08f7      	lsrs	r7, r6, #3
 80007c2:	2bff      	cmp	r3, #255	@ 0xff
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fadd+0x94>
 80007c6:	e0a5      	b.n	8000914 <__aeabi_fadd+0x1e0>
 80007c8:	027a      	lsls	r2, r7, #9
 80007ca:	0a52      	lsrs	r2, r2, #9
 80007cc:	b2d8      	uxtb	r0, r3
 80007ce:	e030      	b.n	8000832 <__aeabi_fadd+0xfe>
 80007d0:	2dff      	cmp	r5, #255	@ 0xff
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fadd+0xa2>
 80007d4:	e09e      	b.n	8000914 <__aeabi_fadd+0x1e0>
 80007d6:	2280      	movs	r2, #128	@ 0x80
 80007d8:	04d2      	lsls	r2, r2, #19
 80007da:	4311      	orrs	r1, r2
 80007dc:	2001      	movs	r0, #1
 80007de:	2b1b      	cmp	r3, #27
 80007e0:	dc08      	bgt.n	80007f4 <__aeabi_fadd+0xc0>
 80007e2:	0008      	movs	r0, r1
 80007e4:	2220      	movs	r2, #32
 80007e6:	40d8      	lsrs	r0, r3
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	4099      	lsls	r1, r3
 80007ec:	000b      	movs	r3, r1
 80007ee:	1e5a      	subs	r2, r3, #1
 80007f0:	4193      	sbcs	r3, r2
 80007f2:	4318      	orrs	r0, r3
 80007f4:	1a36      	subs	r6, r6, r0
 80007f6:	0173      	lsls	r3, r6, #5
 80007f8:	d400      	bmi.n	80007fc <__aeabi_fadd+0xc8>
 80007fa:	e071      	b.n	80008e0 <__aeabi_fadd+0x1ac>
 80007fc:	01b6      	lsls	r6, r6, #6
 80007fe:	09b7      	lsrs	r7, r6, #6
 8000800:	0038      	movs	r0, r7
 8000802:	f002 ffb3 	bl	800376c <__clzsi2>
 8000806:	003b      	movs	r3, r7
 8000808:	3805      	subs	r0, #5
 800080a:	4083      	lsls	r3, r0
 800080c:	4285      	cmp	r5, r0
 800080e:	dd4d      	ble.n	80008ac <__aeabi_fadd+0x178>
 8000810:	4eb4      	ldr	r6, [pc, #720]	@ (8000ae4 <__aeabi_fadd+0x3b0>)
 8000812:	1a2d      	subs	r5, r5, r0
 8000814:	401e      	ands	r6, r3
 8000816:	075a      	lsls	r2, r3, #29
 8000818:	d068      	beq.n	80008ec <__aeabi_fadd+0x1b8>
 800081a:	220f      	movs	r2, #15
 800081c:	4013      	ands	r3, r2
 800081e:	2b04      	cmp	r3, #4
 8000820:	d064      	beq.n	80008ec <__aeabi_fadd+0x1b8>
 8000822:	3604      	adds	r6, #4
 8000824:	0173      	lsls	r3, r6, #5
 8000826:	d561      	bpl.n	80008ec <__aeabi_fadd+0x1b8>
 8000828:	1c68      	adds	r0, r5, #1
 800082a:	2dfe      	cmp	r5, #254	@ 0xfe
 800082c:	d154      	bne.n	80008d8 <__aeabi_fadd+0x1a4>
 800082e:	20ff      	movs	r0, #255	@ 0xff
 8000830:	2200      	movs	r2, #0
 8000832:	05c0      	lsls	r0, r0, #23
 8000834:	4310      	orrs	r0, r2
 8000836:	07e4      	lsls	r4, r4, #31
 8000838:	4320      	orrs	r0, r4
 800083a:	bcc0      	pop	{r6, r7}
 800083c:	46b9      	mov	r9, r7
 800083e:	46b0      	mov	r8, r6
 8000840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000842:	22fe      	movs	r2, #254	@ 0xfe
 8000844:	4690      	mov	r8, r2
 8000846:	1c68      	adds	r0, r5, #1
 8000848:	0002      	movs	r2, r0
 800084a:	4640      	mov	r0, r8
 800084c:	4210      	tst	r0, r2
 800084e:	d16b      	bne.n	8000928 <__aeabi_fadd+0x1f4>
 8000850:	2d00      	cmp	r5, #0
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0x122>
 8000854:	e0dd      	b.n	8000a12 <__aeabi_fadd+0x2de>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d100      	bne.n	800085c <__aeabi_fadd+0x128>
 800085a:	e102      	b.n	8000a62 <__aeabi_fadd+0x32e>
 800085c:	2900      	cmp	r1, #0
 800085e:	d0b3      	beq.n	80007c8 <__aeabi_fadd+0x94>
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	1a77      	subs	r7, r6, r1
 8000864:	04d2      	lsls	r2, r2, #19
 8000866:	4217      	tst	r7, r2
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x138>
 800086a:	e136      	b.n	8000ada <__aeabi_fadd+0x3a6>
 800086c:	464c      	mov	r4, r9
 800086e:	1b8e      	subs	r6, r1, r6
 8000870:	d061      	beq.n	8000936 <__aeabi_fadd+0x202>
 8000872:	2001      	movs	r0, #1
 8000874:	4216      	tst	r6, r2
 8000876:	d130      	bne.n	80008da <__aeabi_fadd+0x1a6>
 8000878:	2300      	movs	r3, #0
 800087a:	08f7      	lsrs	r7, r6, #3
 800087c:	e7a4      	b.n	80007c8 <__aeabi_fadd+0x94>
 800087e:	2900      	cmp	r1, #0
 8000880:	d09e      	beq.n	80007c0 <__aeabi_fadd+0x8c>
 8000882:	1e5a      	subs	r2, r3, #1
 8000884:	2b01      	cmp	r3, #1
 8000886:	d100      	bne.n	800088a <__aeabi_fadd+0x156>
 8000888:	e0ca      	b.n	8000a20 <__aeabi_fadd+0x2ec>
 800088a:	2bff      	cmp	r3, #255	@ 0xff
 800088c:	d042      	beq.n	8000914 <__aeabi_fadd+0x1e0>
 800088e:	0013      	movs	r3, r2
 8000890:	e791      	b.n	80007b6 <__aeabi_fadd+0x82>
 8000892:	1a71      	subs	r1, r6, r1
 8000894:	014b      	lsls	r3, r1, #5
 8000896:	d400      	bmi.n	800089a <__aeabi_fadd+0x166>
 8000898:	e0d1      	b.n	8000a3e <__aeabi_fadd+0x30a>
 800089a:	018f      	lsls	r7, r1, #6
 800089c:	09bf      	lsrs	r7, r7, #6
 800089e:	0038      	movs	r0, r7
 80008a0:	f002 ff64 	bl	800376c <__clzsi2>
 80008a4:	003b      	movs	r3, r7
 80008a6:	3805      	subs	r0, #5
 80008a8:	4083      	lsls	r3, r0
 80008aa:	2501      	movs	r5, #1
 80008ac:	2220      	movs	r2, #32
 80008ae:	1b40      	subs	r0, r0, r5
 80008b0:	3001      	adds	r0, #1
 80008b2:	1a12      	subs	r2, r2, r0
 80008b4:	001e      	movs	r6, r3
 80008b6:	4093      	lsls	r3, r2
 80008b8:	40c6      	lsrs	r6, r0
 80008ba:	1e5a      	subs	r2, r3, #1
 80008bc:	4193      	sbcs	r3, r2
 80008be:	431e      	orrs	r6, r3
 80008c0:	d039      	beq.n	8000936 <__aeabi_fadd+0x202>
 80008c2:	0773      	lsls	r3, r6, #29
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fadd+0x194>
 80008c6:	e11b      	b.n	8000b00 <__aeabi_fadd+0x3cc>
 80008c8:	230f      	movs	r3, #15
 80008ca:	2500      	movs	r5, #0
 80008cc:	4033      	ands	r3, r6
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	d1a7      	bne.n	8000822 <__aeabi_fadd+0xee>
 80008d2:	2001      	movs	r0, #1
 80008d4:	0172      	lsls	r2, r6, #5
 80008d6:	d57c      	bpl.n	80009d2 <__aeabi_fadd+0x29e>
 80008d8:	b2c0      	uxtb	r0, r0
 80008da:	01b2      	lsls	r2, r6, #6
 80008dc:	0a52      	lsrs	r2, r2, #9
 80008de:	e7a8      	b.n	8000832 <__aeabi_fadd+0xfe>
 80008e0:	0773      	lsls	r3, r6, #29
 80008e2:	d003      	beq.n	80008ec <__aeabi_fadd+0x1b8>
 80008e4:	230f      	movs	r3, #15
 80008e6:	4033      	ands	r3, r6
 80008e8:	2b04      	cmp	r3, #4
 80008ea:	d19a      	bne.n	8000822 <__aeabi_fadd+0xee>
 80008ec:	002b      	movs	r3, r5
 80008ee:	e767      	b.n	80007c0 <__aeabi_fadd+0x8c>
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d023      	beq.n	800093c <__aeabi_fadd+0x208>
 80008f4:	1b53      	subs	r3, r2, r5
 80008f6:	2d00      	cmp	r5, #0
 80008f8:	d17b      	bne.n	80009f2 <__aeabi_fadd+0x2be>
 80008fa:	2e00      	cmp	r6, #0
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x1cc>
 80008fe:	e086      	b.n	8000a0e <__aeabi_fadd+0x2da>
 8000900:	1e5d      	subs	r5, r3, #1
 8000902:	2b01      	cmp	r3, #1
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x1d4>
 8000906:	e08b      	b.n	8000a20 <__aeabi_fadd+0x2ec>
 8000908:	2bff      	cmp	r3, #255	@ 0xff
 800090a:	d002      	beq.n	8000912 <__aeabi_fadd+0x1de>
 800090c:	002b      	movs	r3, r5
 800090e:	e075      	b.n	80009fc <__aeabi_fadd+0x2c8>
 8000910:	464c      	mov	r4, r9
 8000912:	4667      	mov	r7, ip
 8000914:	2f00      	cmp	r7, #0
 8000916:	d100      	bne.n	800091a <__aeabi_fadd+0x1e6>
 8000918:	e789      	b.n	800082e <__aeabi_fadd+0xfa>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	433a      	orrs	r2, r7
 8000920:	0252      	lsls	r2, r2, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a52      	lsrs	r2, r2, #9
 8000926:	e784      	b.n	8000832 <__aeabi_fadd+0xfe>
 8000928:	1a77      	subs	r7, r6, r1
 800092a:	017b      	lsls	r3, r7, #5
 800092c:	d46b      	bmi.n	8000a06 <__aeabi_fadd+0x2d2>
 800092e:	2f00      	cmp	r7, #0
 8000930:	d000      	beq.n	8000934 <__aeabi_fadd+0x200>
 8000932:	e765      	b.n	8000800 <__aeabi_fadd+0xcc>
 8000934:	2400      	movs	r4, #0
 8000936:	2000      	movs	r0, #0
 8000938:	2200      	movs	r2, #0
 800093a:	e77a      	b.n	8000832 <__aeabi_fadd+0xfe>
 800093c:	22fe      	movs	r2, #254	@ 0xfe
 800093e:	1c6b      	adds	r3, r5, #1
 8000940:	421a      	tst	r2, r3
 8000942:	d149      	bne.n	80009d8 <__aeabi_fadd+0x2a4>
 8000944:	2d00      	cmp	r5, #0
 8000946:	d000      	beq.n	800094a <__aeabi_fadd+0x216>
 8000948:	e09f      	b.n	8000a8a <__aeabi_fadd+0x356>
 800094a:	2e00      	cmp	r6, #0
 800094c:	d100      	bne.n	8000950 <__aeabi_fadd+0x21c>
 800094e:	e0ba      	b.n	8000ac6 <__aeabi_fadd+0x392>
 8000950:	2900      	cmp	r1, #0
 8000952:	d100      	bne.n	8000956 <__aeabi_fadd+0x222>
 8000954:	e0cf      	b.n	8000af6 <__aeabi_fadd+0x3c2>
 8000956:	1872      	adds	r2, r6, r1
 8000958:	0153      	lsls	r3, r2, #5
 800095a:	d400      	bmi.n	800095e <__aeabi_fadd+0x22a>
 800095c:	e0cd      	b.n	8000afa <__aeabi_fadd+0x3c6>
 800095e:	0192      	lsls	r2, r2, #6
 8000960:	2001      	movs	r0, #1
 8000962:	0a52      	lsrs	r2, r2, #9
 8000964:	e765      	b.n	8000832 <__aeabi_fadd+0xfe>
 8000966:	2aff      	cmp	r2, #255	@ 0xff
 8000968:	d0d2      	beq.n	8000910 <__aeabi_fadd+0x1dc>
 800096a:	2080      	movs	r0, #128	@ 0x80
 800096c:	04c0      	lsls	r0, r0, #19
 800096e:	4306      	orrs	r6, r0
 8000970:	2001      	movs	r0, #1
 8000972:	2b1b      	cmp	r3, #27
 8000974:	dc08      	bgt.n	8000988 <__aeabi_fadd+0x254>
 8000976:	0030      	movs	r0, r6
 8000978:	2420      	movs	r4, #32
 800097a:	40d8      	lsrs	r0, r3
 800097c:	1ae3      	subs	r3, r4, r3
 800097e:	409e      	lsls	r6, r3
 8000980:	0033      	movs	r3, r6
 8000982:	1e5c      	subs	r4, r3, #1
 8000984:	41a3      	sbcs	r3, r4
 8000986:	4318      	orrs	r0, r3
 8000988:	464c      	mov	r4, r9
 800098a:	0015      	movs	r5, r2
 800098c:	1a0e      	subs	r6, r1, r0
 800098e:	e732      	b.n	80007f6 <__aeabi_fadd+0xc2>
 8000990:	0008      	movs	r0, r1
 8000992:	2220      	movs	r2, #32
 8000994:	40d8      	lsrs	r0, r3
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	4099      	lsls	r1, r3
 800099a:	000b      	movs	r3, r1
 800099c:	1e5a      	subs	r2, r3, #1
 800099e:	4193      	sbcs	r3, r2
 80009a0:	4303      	orrs	r3, r0
 80009a2:	18f6      	adds	r6, r6, r3
 80009a4:	0173      	lsls	r3, r6, #5
 80009a6:	d59b      	bpl.n	80008e0 <__aeabi_fadd+0x1ac>
 80009a8:	3501      	adds	r5, #1
 80009aa:	2dff      	cmp	r5, #255	@ 0xff
 80009ac:	d100      	bne.n	80009b0 <__aeabi_fadd+0x27c>
 80009ae:	e73e      	b.n	800082e <__aeabi_fadd+0xfa>
 80009b0:	2301      	movs	r3, #1
 80009b2:	494d      	ldr	r1, [pc, #308]	@ (8000ae8 <__aeabi_fadd+0x3b4>)
 80009b4:	0872      	lsrs	r2, r6, #1
 80009b6:	4033      	ands	r3, r6
 80009b8:	400a      	ands	r2, r1
 80009ba:	431a      	orrs	r2, r3
 80009bc:	0016      	movs	r6, r2
 80009be:	0753      	lsls	r3, r2, #29
 80009c0:	d004      	beq.n	80009cc <__aeabi_fadd+0x298>
 80009c2:	230f      	movs	r3, #15
 80009c4:	4013      	ands	r3, r2
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	d000      	beq.n	80009cc <__aeabi_fadd+0x298>
 80009ca:	e72a      	b.n	8000822 <__aeabi_fadd+0xee>
 80009cc:	0173      	lsls	r3, r6, #5
 80009ce:	d500      	bpl.n	80009d2 <__aeabi_fadd+0x29e>
 80009d0:	e72a      	b.n	8000828 <__aeabi_fadd+0xf4>
 80009d2:	002b      	movs	r3, r5
 80009d4:	08f7      	lsrs	r7, r6, #3
 80009d6:	e6f7      	b.n	80007c8 <__aeabi_fadd+0x94>
 80009d8:	2bff      	cmp	r3, #255	@ 0xff
 80009da:	d100      	bne.n	80009de <__aeabi_fadd+0x2aa>
 80009dc:	e727      	b.n	800082e <__aeabi_fadd+0xfa>
 80009de:	1871      	adds	r1, r6, r1
 80009e0:	0849      	lsrs	r1, r1, #1
 80009e2:	074a      	lsls	r2, r1, #29
 80009e4:	d02f      	beq.n	8000a46 <__aeabi_fadd+0x312>
 80009e6:	220f      	movs	r2, #15
 80009e8:	400a      	ands	r2, r1
 80009ea:	2a04      	cmp	r2, #4
 80009ec:	d02b      	beq.n	8000a46 <__aeabi_fadd+0x312>
 80009ee:	1d0e      	adds	r6, r1, #4
 80009f0:	e6e6      	b.n	80007c0 <__aeabi_fadd+0x8c>
 80009f2:	2aff      	cmp	r2, #255	@ 0xff
 80009f4:	d08d      	beq.n	8000912 <__aeabi_fadd+0x1de>
 80009f6:	2080      	movs	r0, #128	@ 0x80
 80009f8:	04c0      	lsls	r0, r0, #19
 80009fa:	4306      	orrs	r6, r0
 80009fc:	2b1b      	cmp	r3, #27
 80009fe:	dd24      	ble.n	8000a4a <__aeabi_fadd+0x316>
 8000a00:	0013      	movs	r3, r2
 8000a02:	1d4e      	adds	r6, r1, #5
 8000a04:	e6dc      	b.n	80007c0 <__aeabi_fadd+0x8c>
 8000a06:	464c      	mov	r4, r9
 8000a08:	1b8f      	subs	r7, r1, r6
 8000a0a:	e6f9      	b.n	8000800 <__aeabi_fadd+0xcc>
 8000a0c:	464c      	mov	r4, r9
 8000a0e:	000e      	movs	r6, r1
 8000a10:	e6d6      	b.n	80007c0 <__aeabi_fadd+0x8c>
 8000a12:	2e00      	cmp	r6, #0
 8000a14:	d149      	bne.n	8000aaa <__aeabi_fadd+0x376>
 8000a16:	2900      	cmp	r1, #0
 8000a18:	d068      	beq.n	8000aec <__aeabi_fadd+0x3b8>
 8000a1a:	4667      	mov	r7, ip
 8000a1c:	464c      	mov	r4, r9
 8000a1e:	e77c      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000a20:	1870      	adds	r0, r6, r1
 8000a22:	0143      	lsls	r3, r0, #5
 8000a24:	d574      	bpl.n	8000b10 <__aeabi_fadd+0x3dc>
 8000a26:	4930      	ldr	r1, [pc, #192]	@ (8000ae8 <__aeabi_fadd+0x3b4>)
 8000a28:	0840      	lsrs	r0, r0, #1
 8000a2a:	4001      	ands	r1, r0
 8000a2c:	0743      	lsls	r3, r0, #29
 8000a2e:	d009      	beq.n	8000a44 <__aeabi_fadd+0x310>
 8000a30:	230f      	movs	r3, #15
 8000a32:	4003      	ands	r3, r0
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	d005      	beq.n	8000a44 <__aeabi_fadd+0x310>
 8000a38:	2302      	movs	r3, #2
 8000a3a:	1d0e      	adds	r6, r1, #4
 8000a3c:	e6c0      	b.n	80007c0 <__aeabi_fadd+0x8c>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	08cf      	lsrs	r7, r1, #3
 8000a42:	e6c1      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000a44:	2302      	movs	r3, #2
 8000a46:	08cf      	lsrs	r7, r1, #3
 8000a48:	e6be      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000a4a:	2520      	movs	r5, #32
 8000a4c:	0030      	movs	r0, r6
 8000a4e:	40d8      	lsrs	r0, r3
 8000a50:	1aeb      	subs	r3, r5, r3
 8000a52:	409e      	lsls	r6, r3
 8000a54:	0033      	movs	r3, r6
 8000a56:	1e5d      	subs	r5, r3, #1
 8000a58:	41ab      	sbcs	r3, r5
 8000a5a:	4303      	orrs	r3, r0
 8000a5c:	0015      	movs	r5, r2
 8000a5e:	185e      	adds	r6, r3, r1
 8000a60:	e7a0      	b.n	80009a4 <__aeabi_fadd+0x270>
 8000a62:	2900      	cmp	r1, #0
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fadd+0x334>
 8000a66:	e765      	b.n	8000934 <__aeabi_fadd+0x200>
 8000a68:	464c      	mov	r4, r9
 8000a6a:	4667      	mov	r7, ip
 8000a6c:	e6ac      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000a6e:	1b8f      	subs	r7, r1, r6
 8000a70:	017b      	lsls	r3, r7, #5
 8000a72:	d52e      	bpl.n	8000ad2 <__aeabi_fadd+0x39e>
 8000a74:	01bf      	lsls	r7, r7, #6
 8000a76:	09bf      	lsrs	r7, r7, #6
 8000a78:	0038      	movs	r0, r7
 8000a7a:	f002 fe77 	bl	800376c <__clzsi2>
 8000a7e:	003b      	movs	r3, r7
 8000a80:	3805      	subs	r0, #5
 8000a82:	4083      	lsls	r3, r0
 8000a84:	464c      	mov	r4, r9
 8000a86:	3501      	adds	r5, #1
 8000a88:	e710      	b.n	80008ac <__aeabi_fadd+0x178>
 8000a8a:	2e00      	cmp	r6, #0
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fadd+0x35c>
 8000a8e:	e740      	b.n	8000912 <__aeabi_fadd+0x1de>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	d100      	bne.n	8000a96 <__aeabi_fadd+0x362>
 8000a94:	e741      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000a96:	2380      	movs	r3, #128	@ 0x80
 8000a98:	03db      	lsls	r3, r3, #15
 8000a9a:	429f      	cmp	r7, r3
 8000a9c:	d200      	bcs.n	8000aa0 <__aeabi_fadd+0x36c>
 8000a9e:	e73c      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000aa0:	459c      	cmp	ip, r3
 8000aa2:	d300      	bcc.n	8000aa6 <__aeabi_fadd+0x372>
 8000aa4:	e739      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000aa6:	4667      	mov	r7, ip
 8000aa8:	e737      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_fadd+0x37c>
 8000aae:	e734      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000ab0:	2380      	movs	r3, #128	@ 0x80
 8000ab2:	03db      	lsls	r3, r3, #15
 8000ab4:	429f      	cmp	r7, r3
 8000ab6:	d200      	bcs.n	8000aba <__aeabi_fadd+0x386>
 8000ab8:	e72f      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000aba:	459c      	cmp	ip, r3
 8000abc:	d300      	bcc.n	8000ac0 <__aeabi_fadd+0x38c>
 8000abe:	e72c      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000ac0:	464c      	mov	r4, r9
 8000ac2:	4667      	mov	r7, ip
 8000ac4:	e729      	b.n	800091a <__aeabi_fadd+0x1e6>
 8000ac6:	2900      	cmp	r1, #0
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fadd+0x398>
 8000aca:	e734      	b.n	8000936 <__aeabi_fadd+0x202>
 8000acc:	2300      	movs	r3, #0
 8000ace:	08cf      	lsrs	r7, r1, #3
 8000ad0:	e67a      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000ad2:	464c      	mov	r4, r9
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	08ff      	lsrs	r7, r7, #3
 8000ad8:	e676      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000ada:	2f00      	cmp	r7, #0
 8000adc:	d100      	bne.n	8000ae0 <__aeabi_fadd+0x3ac>
 8000ade:	e729      	b.n	8000934 <__aeabi_fadd+0x200>
 8000ae0:	08ff      	lsrs	r7, r7, #3
 8000ae2:	e671      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000ae4:	fbffffff 	.word	0xfbffffff
 8000ae8:	7dffffff 	.word	0x7dffffff
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	2400      	movs	r4, #0
 8000af0:	20ff      	movs	r0, #255	@ 0xff
 8000af2:	03d2      	lsls	r2, r2, #15
 8000af4:	e69d      	b.n	8000832 <__aeabi_fadd+0xfe>
 8000af6:	2300      	movs	r3, #0
 8000af8:	e666      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000afa:	2300      	movs	r3, #0
 8000afc:	08d7      	lsrs	r7, r2, #3
 8000afe:	e663      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000b00:	2001      	movs	r0, #1
 8000b02:	0172      	lsls	r2, r6, #5
 8000b04:	d500      	bpl.n	8000b08 <__aeabi_fadd+0x3d4>
 8000b06:	e6e7      	b.n	80008d8 <__aeabi_fadd+0x1a4>
 8000b08:	0031      	movs	r1, r6
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	08cf      	lsrs	r7, r1, #3
 8000b0e:	e65b      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000b10:	2301      	movs	r3, #1
 8000b12:	08c7      	lsrs	r7, r0, #3
 8000b14:	e658      	b.n	80007c8 <__aeabi_fadd+0x94>
 8000b16:	46c0      	nop			@ (mov r8, r8)

08000b18 <__aeabi_fdiv>:
 8000b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1a:	4646      	mov	r6, r8
 8000b1c:	464f      	mov	r7, r9
 8000b1e:	46d6      	mov	lr, sl
 8000b20:	0245      	lsls	r5, r0, #9
 8000b22:	b5c0      	push	{r6, r7, lr}
 8000b24:	0fc3      	lsrs	r3, r0, #31
 8000b26:	0047      	lsls	r7, r0, #1
 8000b28:	4698      	mov	r8, r3
 8000b2a:	1c0e      	adds	r6, r1, #0
 8000b2c:	0a6d      	lsrs	r5, r5, #9
 8000b2e:	0e3f      	lsrs	r7, r7, #24
 8000b30:	d05b      	beq.n	8000bea <__aeabi_fdiv+0xd2>
 8000b32:	2fff      	cmp	r7, #255	@ 0xff
 8000b34:	d021      	beq.n	8000b7a <__aeabi_fdiv+0x62>
 8000b36:	2380      	movs	r3, #128	@ 0x80
 8000b38:	00ed      	lsls	r5, r5, #3
 8000b3a:	04db      	lsls	r3, r3, #19
 8000b3c:	431d      	orrs	r5, r3
 8000b3e:	2300      	movs	r3, #0
 8000b40:	4699      	mov	r9, r3
 8000b42:	469a      	mov	sl, r3
 8000b44:	3f7f      	subs	r7, #127	@ 0x7f
 8000b46:	0274      	lsls	r4, r6, #9
 8000b48:	0073      	lsls	r3, r6, #1
 8000b4a:	0a64      	lsrs	r4, r4, #9
 8000b4c:	0e1b      	lsrs	r3, r3, #24
 8000b4e:	0ff6      	lsrs	r6, r6, #31
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d020      	beq.n	8000b96 <__aeabi_fdiv+0x7e>
 8000b54:	2bff      	cmp	r3, #255	@ 0xff
 8000b56:	d043      	beq.n	8000be0 <__aeabi_fdiv+0xc8>
 8000b58:	2280      	movs	r2, #128	@ 0x80
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	00e4      	lsls	r4, r4, #3
 8000b5e:	04d2      	lsls	r2, r2, #19
 8000b60:	4314      	orrs	r4, r2
 8000b62:	3b7f      	subs	r3, #127	@ 0x7f
 8000b64:	4642      	mov	r2, r8
 8000b66:	1aff      	subs	r7, r7, r3
 8000b68:	464b      	mov	r3, r9
 8000b6a:	4072      	eors	r2, r6
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d900      	bls.n	8000b72 <__aeabi_fdiv+0x5a>
 8000b70:	e09d      	b.n	8000cae <__aeabi_fdiv+0x196>
 8000b72:	4971      	ldr	r1, [pc, #452]	@ (8000d38 <__aeabi_fdiv+0x220>)
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	58cb      	ldr	r3, [r1, r3]
 8000b78:	469f      	mov	pc, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d15a      	bne.n	8000c34 <__aeabi_fdiv+0x11c>
 8000b7e:	2308      	movs	r3, #8
 8000b80:	4699      	mov	r9, r3
 8000b82:	3b06      	subs	r3, #6
 8000b84:	0274      	lsls	r4, r6, #9
 8000b86:	469a      	mov	sl, r3
 8000b88:	0073      	lsls	r3, r6, #1
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	0a64      	lsrs	r4, r4, #9
 8000b8e:	0e1b      	lsrs	r3, r3, #24
 8000b90:	0ff6      	lsrs	r6, r6, #31
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1de      	bne.n	8000b54 <__aeabi_fdiv+0x3c>
 8000b96:	2c00      	cmp	r4, #0
 8000b98:	d13b      	bne.n	8000c12 <__aeabi_fdiv+0xfa>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	4642      	mov	r2, r8
 8000b9e:	4649      	mov	r1, r9
 8000ba0:	4072      	eors	r2, r6
 8000ba2:	4319      	orrs	r1, r3
 8000ba4:	290e      	cmp	r1, #14
 8000ba6:	d818      	bhi.n	8000bda <__aeabi_fdiv+0xc2>
 8000ba8:	4864      	ldr	r0, [pc, #400]	@ (8000d3c <__aeabi_fdiv+0x224>)
 8000baa:	0089      	lsls	r1, r1, #2
 8000bac:	5841      	ldr	r1, [r0, r1]
 8000bae:	468f      	mov	pc, r1
 8000bb0:	4653      	mov	r3, sl
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fdiv+0xa0>
 8000bb6:	e0b8      	b.n	8000d2a <__aeabi_fdiv+0x212>
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d06e      	beq.n	8000c9a <__aeabi_fdiv+0x182>
 8000bbc:	4642      	mov	r2, r8
 8000bbe:	002c      	movs	r4, r5
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d140      	bne.n	8000c46 <__aeabi_fdiv+0x12e>
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	2400      	movs	r4, #0
 8000bc8:	05c0      	lsls	r0, r0, #23
 8000bca:	4320      	orrs	r0, r4
 8000bcc:	07d2      	lsls	r2, r2, #31
 8000bce:	4310      	orrs	r0, r2
 8000bd0:	bce0      	pop	{r5, r6, r7}
 8000bd2:	46ba      	mov	sl, r7
 8000bd4:	46b1      	mov	r9, r6
 8000bd6:	46a8      	mov	r8, r5
 8000bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bda:	20ff      	movs	r0, #255	@ 0xff
 8000bdc:	2400      	movs	r4, #0
 8000bde:	e7f3      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	d120      	bne.n	8000c26 <__aeabi_fdiv+0x10e>
 8000be4:	2302      	movs	r3, #2
 8000be6:	3fff      	subs	r7, #255	@ 0xff
 8000be8:	e7d8      	b.n	8000b9c <__aeabi_fdiv+0x84>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d105      	bne.n	8000bfa <__aeabi_fdiv+0xe2>
 8000bee:	2304      	movs	r3, #4
 8000bf0:	4699      	mov	r9, r3
 8000bf2:	3b03      	subs	r3, #3
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	e7a5      	b.n	8000b46 <__aeabi_fdiv+0x2e>
 8000bfa:	0028      	movs	r0, r5
 8000bfc:	f002 fdb6 	bl	800376c <__clzsi2>
 8000c00:	2776      	movs	r7, #118	@ 0x76
 8000c02:	1f43      	subs	r3, r0, #5
 8000c04:	409d      	lsls	r5, r3
 8000c06:	2300      	movs	r3, #0
 8000c08:	427f      	negs	r7, r7
 8000c0a:	4699      	mov	r9, r3
 8000c0c:	469a      	mov	sl, r3
 8000c0e:	1a3f      	subs	r7, r7, r0
 8000c10:	e799      	b.n	8000b46 <__aeabi_fdiv+0x2e>
 8000c12:	0020      	movs	r0, r4
 8000c14:	f002 fdaa 	bl	800376c <__clzsi2>
 8000c18:	1f43      	subs	r3, r0, #5
 8000c1a:	409c      	lsls	r4, r3
 8000c1c:	2376      	movs	r3, #118	@ 0x76
 8000c1e:	425b      	negs	r3, r3
 8000c20:	1a1b      	subs	r3, r3, r0
 8000c22:	2000      	movs	r0, #0
 8000c24:	e79e      	b.n	8000b64 <__aeabi_fdiv+0x4c>
 8000c26:	2303      	movs	r3, #3
 8000c28:	464a      	mov	r2, r9
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	4691      	mov	r9, r2
 8000c2e:	2003      	movs	r0, #3
 8000c30:	33fc      	adds	r3, #252	@ 0xfc
 8000c32:	e797      	b.n	8000b64 <__aeabi_fdiv+0x4c>
 8000c34:	230c      	movs	r3, #12
 8000c36:	4699      	mov	r9, r3
 8000c38:	3b09      	subs	r3, #9
 8000c3a:	27ff      	movs	r7, #255	@ 0xff
 8000c3c:	469a      	mov	sl, r3
 8000c3e:	e782      	b.n	8000b46 <__aeabi_fdiv+0x2e>
 8000c40:	2803      	cmp	r0, #3
 8000c42:	d02c      	beq.n	8000c9e <__aeabi_fdiv+0x186>
 8000c44:	0032      	movs	r2, r6
 8000c46:	0038      	movs	r0, r7
 8000c48:	307f      	adds	r0, #127	@ 0x7f
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	dd47      	ble.n	8000cde <__aeabi_fdiv+0x1c6>
 8000c4e:	0763      	lsls	r3, r4, #29
 8000c50:	d004      	beq.n	8000c5c <__aeabi_fdiv+0x144>
 8000c52:	230f      	movs	r3, #15
 8000c54:	4023      	ands	r3, r4
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d000      	beq.n	8000c5c <__aeabi_fdiv+0x144>
 8000c5a:	3404      	adds	r4, #4
 8000c5c:	0123      	lsls	r3, r4, #4
 8000c5e:	d503      	bpl.n	8000c68 <__aeabi_fdiv+0x150>
 8000c60:	0038      	movs	r0, r7
 8000c62:	4b37      	ldr	r3, [pc, #220]	@ (8000d40 <__aeabi_fdiv+0x228>)
 8000c64:	3080      	adds	r0, #128	@ 0x80
 8000c66:	401c      	ands	r4, r3
 8000c68:	28fe      	cmp	r0, #254	@ 0xfe
 8000c6a:	dcb6      	bgt.n	8000bda <__aeabi_fdiv+0xc2>
 8000c6c:	01a4      	lsls	r4, r4, #6
 8000c6e:	0a64      	lsrs	r4, r4, #9
 8000c70:	b2c0      	uxtb	r0, r0
 8000c72:	e7a9      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000c74:	2480      	movs	r4, #128	@ 0x80
 8000c76:	2200      	movs	r2, #0
 8000c78:	20ff      	movs	r0, #255	@ 0xff
 8000c7a:	03e4      	lsls	r4, r4, #15
 8000c7c:	e7a4      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000c7e:	2380      	movs	r3, #128	@ 0x80
 8000c80:	03db      	lsls	r3, r3, #15
 8000c82:	421d      	tst	r5, r3
 8000c84:	d001      	beq.n	8000c8a <__aeabi_fdiv+0x172>
 8000c86:	421c      	tst	r4, r3
 8000c88:	d00b      	beq.n	8000ca2 <__aeabi_fdiv+0x18a>
 8000c8a:	2480      	movs	r4, #128	@ 0x80
 8000c8c:	03e4      	lsls	r4, r4, #15
 8000c8e:	432c      	orrs	r4, r5
 8000c90:	0264      	lsls	r4, r4, #9
 8000c92:	4642      	mov	r2, r8
 8000c94:	20ff      	movs	r0, #255	@ 0xff
 8000c96:	0a64      	lsrs	r4, r4, #9
 8000c98:	e796      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000c9a:	4646      	mov	r6, r8
 8000c9c:	002c      	movs	r4, r5
 8000c9e:	2380      	movs	r3, #128	@ 0x80
 8000ca0:	03db      	lsls	r3, r3, #15
 8000ca2:	431c      	orrs	r4, r3
 8000ca4:	0264      	lsls	r4, r4, #9
 8000ca6:	0032      	movs	r2, r6
 8000ca8:	20ff      	movs	r0, #255	@ 0xff
 8000caa:	0a64      	lsrs	r4, r4, #9
 8000cac:	e78c      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000cae:	016d      	lsls	r5, r5, #5
 8000cb0:	0160      	lsls	r0, r4, #5
 8000cb2:	4285      	cmp	r5, r0
 8000cb4:	d22d      	bcs.n	8000d12 <__aeabi_fdiv+0x1fa>
 8000cb6:	231b      	movs	r3, #27
 8000cb8:	2400      	movs	r4, #0
 8000cba:	3f01      	subs	r7, #1
 8000cbc:	2601      	movs	r6, #1
 8000cbe:	0029      	movs	r1, r5
 8000cc0:	0064      	lsls	r4, r4, #1
 8000cc2:	006d      	lsls	r5, r5, #1
 8000cc4:	2900      	cmp	r1, #0
 8000cc6:	db01      	blt.n	8000ccc <__aeabi_fdiv+0x1b4>
 8000cc8:	4285      	cmp	r5, r0
 8000cca:	d301      	bcc.n	8000cd0 <__aeabi_fdiv+0x1b8>
 8000ccc:	1a2d      	subs	r5, r5, r0
 8000cce:	4334      	orrs	r4, r6
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1f3      	bne.n	8000cbe <__aeabi_fdiv+0x1a6>
 8000cd6:	1e6b      	subs	r3, r5, #1
 8000cd8:	419d      	sbcs	r5, r3
 8000cda:	432c      	orrs	r4, r5
 8000cdc:	e7b3      	b.n	8000c46 <__aeabi_fdiv+0x12e>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	1a1b      	subs	r3, r3, r0
 8000ce2:	2b1b      	cmp	r3, #27
 8000ce4:	dd00      	ble.n	8000ce8 <__aeabi_fdiv+0x1d0>
 8000ce6:	e76d      	b.n	8000bc4 <__aeabi_fdiv+0xac>
 8000ce8:	0021      	movs	r1, r4
 8000cea:	379e      	adds	r7, #158	@ 0x9e
 8000cec:	40d9      	lsrs	r1, r3
 8000cee:	40bc      	lsls	r4, r7
 8000cf0:	000b      	movs	r3, r1
 8000cf2:	1e61      	subs	r1, r4, #1
 8000cf4:	418c      	sbcs	r4, r1
 8000cf6:	4323      	orrs	r3, r4
 8000cf8:	0759      	lsls	r1, r3, #29
 8000cfa:	d004      	beq.n	8000d06 <__aeabi_fdiv+0x1ee>
 8000cfc:	210f      	movs	r1, #15
 8000cfe:	4019      	ands	r1, r3
 8000d00:	2904      	cmp	r1, #4
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fdiv+0x1ee>
 8000d04:	3304      	adds	r3, #4
 8000d06:	0159      	lsls	r1, r3, #5
 8000d08:	d413      	bmi.n	8000d32 <__aeabi_fdiv+0x21a>
 8000d0a:	019b      	lsls	r3, r3, #6
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	0a5c      	lsrs	r4, r3, #9
 8000d10:	e75a      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000d12:	231a      	movs	r3, #26
 8000d14:	2401      	movs	r4, #1
 8000d16:	1a2d      	subs	r5, r5, r0
 8000d18:	e7d0      	b.n	8000cbc <__aeabi_fdiv+0x1a4>
 8000d1a:	1e98      	subs	r0, r3, #2
 8000d1c:	4243      	negs	r3, r0
 8000d1e:	4158      	adcs	r0, r3
 8000d20:	4240      	negs	r0, r0
 8000d22:	0032      	movs	r2, r6
 8000d24:	2400      	movs	r4, #0
 8000d26:	b2c0      	uxtb	r0, r0
 8000d28:	e74e      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000d2a:	4642      	mov	r2, r8
 8000d2c:	20ff      	movs	r0, #255	@ 0xff
 8000d2e:	2400      	movs	r4, #0
 8000d30:	e74a      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000d32:	2001      	movs	r0, #1
 8000d34:	2400      	movs	r4, #0
 8000d36:	e747      	b.n	8000bc8 <__aeabi_fdiv+0xb0>
 8000d38:	0800df54 	.word	0x0800df54
 8000d3c:	0800df94 	.word	0x0800df94
 8000d40:	f7ffffff 	.word	0xf7ffffff

08000d44 <__eqsf2>:
 8000d44:	b570      	push	{r4, r5, r6, lr}
 8000d46:	0042      	lsls	r2, r0, #1
 8000d48:	024e      	lsls	r6, r1, #9
 8000d4a:	004c      	lsls	r4, r1, #1
 8000d4c:	0245      	lsls	r5, r0, #9
 8000d4e:	0a6d      	lsrs	r5, r5, #9
 8000d50:	0e12      	lsrs	r2, r2, #24
 8000d52:	0fc3      	lsrs	r3, r0, #31
 8000d54:	0a76      	lsrs	r6, r6, #9
 8000d56:	0e24      	lsrs	r4, r4, #24
 8000d58:	0fc9      	lsrs	r1, r1, #31
 8000d5a:	2aff      	cmp	r2, #255	@ 0xff
 8000d5c:	d010      	beq.n	8000d80 <__eqsf2+0x3c>
 8000d5e:	2cff      	cmp	r4, #255	@ 0xff
 8000d60:	d00c      	beq.n	8000d7c <__eqsf2+0x38>
 8000d62:	2001      	movs	r0, #1
 8000d64:	42a2      	cmp	r2, r4
 8000d66:	d10a      	bne.n	8000d7e <__eqsf2+0x3a>
 8000d68:	42b5      	cmp	r5, r6
 8000d6a:	d108      	bne.n	8000d7e <__eqsf2+0x3a>
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d00f      	beq.n	8000d90 <__eqsf2+0x4c>
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d104      	bne.n	8000d7e <__eqsf2+0x3a>
 8000d74:	0028      	movs	r0, r5
 8000d76:	1e43      	subs	r3, r0, #1
 8000d78:	4198      	sbcs	r0, r3
 8000d7a:	e000      	b.n	8000d7e <__eqsf2+0x3a>
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
 8000d80:	2001      	movs	r0, #1
 8000d82:	2cff      	cmp	r4, #255	@ 0xff
 8000d84:	d1fb      	bne.n	8000d7e <__eqsf2+0x3a>
 8000d86:	4335      	orrs	r5, r6
 8000d88:	d1f9      	bne.n	8000d7e <__eqsf2+0x3a>
 8000d8a:	404b      	eors	r3, r1
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	e7f6      	b.n	8000d7e <__eqsf2+0x3a>
 8000d90:	2000      	movs	r0, #0
 8000d92:	e7f4      	b.n	8000d7e <__eqsf2+0x3a>

08000d94 <__gesf2>:
 8000d94:	b530      	push	{r4, r5, lr}
 8000d96:	0042      	lsls	r2, r0, #1
 8000d98:	0244      	lsls	r4, r0, #9
 8000d9a:	024d      	lsls	r5, r1, #9
 8000d9c:	0fc3      	lsrs	r3, r0, #31
 8000d9e:	0048      	lsls	r0, r1, #1
 8000da0:	0a64      	lsrs	r4, r4, #9
 8000da2:	0e12      	lsrs	r2, r2, #24
 8000da4:	0a6d      	lsrs	r5, r5, #9
 8000da6:	0e00      	lsrs	r0, r0, #24
 8000da8:	0fc9      	lsrs	r1, r1, #31
 8000daa:	2aff      	cmp	r2, #255	@ 0xff
 8000dac:	d018      	beq.n	8000de0 <__gesf2+0x4c>
 8000dae:	28ff      	cmp	r0, #255	@ 0xff
 8000db0:	d00a      	beq.n	8000dc8 <__gesf2+0x34>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d11e      	bne.n	8000df4 <__gesf2+0x60>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	d10a      	bne.n	8000dd0 <__gesf2+0x3c>
 8000dba:	2d00      	cmp	r5, #0
 8000dbc:	d029      	beq.n	8000e12 <__gesf2+0x7e>
 8000dbe:	2c00      	cmp	r4, #0
 8000dc0:	d12d      	bne.n	8000e1e <__gesf2+0x8a>
 8000dc2:	0048      	lsls	r0, r1, #1
 8000dc4:	3801      	subs	r0, #1
 8000dc6:	bd30      	pop	{r4, r5, pc}
 8000dc8:	2d00      	cmp	r5, #0
 8000dca:	d125      	bne.n	8000e18 <__gesf2+0x84>
 8000dcc:	2a00      	cmp	r2, #0
 8000dce:	d101      	bne.n	8000dd4 <__gesf2+0x40>
 8000dd0:	2c00      	cmp	r4, #0
 8000dd2:	d0f6      	beq.n	8000dc2 <__gesf2+0x2e>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d019      	beq.n	8000e0c <__gesf2+0x78>
 8000dd8:	2001      	movs	r0, #1
 8000dda:	425b      	negs	r3, r3
 8000ddc:	4318      	orrs	r0, r3
 8000dde:	e7f2      	b.n	8000dc6 <__gesf2+0x32>
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	d119      	bne.n	8000e18 <__gesf2+0x84>
 8000de4:	28ff      	cmp	r0, #255	@ 0xff
 8000de6:	d1f7      	bne.n	8000dd8 <__gesf2+0x44>
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	d115      	bne.n	8000e18 <__gesf2+0x84>
 8000dec:	2000      	movs	r0, #0
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d1f2      	bne.n	8000dd8 <__gesf2+0x44>
 8000df2:	e7e8      	b.n	8000dc6 <__gesf2+0x32>
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d0ef      	beq.n	8000dd8 <__gesf2+0x44>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d1ed      	bne.n	8000dd8 <__gesf2+0x44>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	dceb      	bgt.n	8000dd8 <__gesf2+0x44>
 8000e00:	db04      	blt.n	8000e0c <__gesf2+0x78>
 8000e02:	42ac      	cmp	r4, r5
 8000e04:	d8e8      	bhi.n	8000dd8 <__gesf2+0x44>
 8000e06:	2000      	movs	r0, #0
 8000e08:	42ac      	cmp	r4, r5
 8000e0a:	d2dc      	bcs.n	8000dc6 <__gesf2+0x32>
 8000e0c:	0058      	lsls	r0, r3, #1
 8000e0e:	3801      	subs	r0, #1
 8000e10:	e7d9      	b.n	8000dc6 <__gesf2+0x32>
 8000e12:	2c00      	cmp	r4, #0
 8000e14:	d0d7      	beq.n	8000dc6 <__gesf2+0x32>
 8000e16:	e7df      	b.n	8000dd8 <__gesf2+0x44>
 8000e18:	2002      	movs	r0, #2
 8000e1a:	4240      	negs	r0, r0
 8000e1c:	e7d3      	b.n	8000dc6 <__gesf2+0x32>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d1da      	bne.n	8000dd8 <__gesf2+0x44>
 8000e22:	e7ee      	b.n	8000e02 <__gesf2+0x6e>

08000e24 <__lesf2>:
 8000e24:	b530      	push	{r4, r5, lr}
 8000e26:	0042      	lsls	r2, r0, #1
 8000e28:	0244      	lsls	r4, r0, #9
 8000e2a:	024d      	lsls	r5, r1, #9
 8000e2c:	0fc3      	lsrs	r3, r0, #31
 8000e2e:	0048      	lsls	r0, r1, #1
 8000e30:	0a64      	lsrs	r4, r4, #9
 8000e32:	0e12      	lsrs	r2, r2, #24
 8000e34:	0a6d      	lsrs	r5, r5, #9
 8000e36:	0e00      	lsrs	r0, r0, #24
 8000e38:	0fc9      	lsrs	r1, r1, #31
 8000e3a:	2aff      	cmp	r2, #255	@ 0xff
 8000e3c:	d017      	beq.n	8000e6e <__lesf2+0x4a>
 8000e3e:	28ff      	cmp	r0, #255	@ 0xff
 8000e40:	d00a      	beq.n	8000e58 <__lesf2+0x34>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	d11b      	bne.n	8000e7e <__lesf2+0x5a>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d10a      	bne.n	8000e60 <__lesf2+0x3c>
 8000e4a:	2d00      	cmp	r5, #0
 8000e4c:	d01d      	beq.n	8000e8a <__lesf2+0x66>
 8000e4e:	2c00      	cmp	r4, #0
 8000e50:	d12d      	bne.n	8000eae <__lesf2+0x8a>
 8000e52:	0048      	lsls	r0, r1, #1
 8000e54:	3801      	subs	r0, #1
 8000e56:	e011      	b.n	8000e7c <__lesf2+0x58>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d10e      	bne.n	8000e7a <__lesf2+0x56>
 8000e5c:	2a00      	cmp	r2, #0
 8000e5e:	d101      	bne.n	8000e64 <__lesf2+0x40>
 8000e60:	2c00      	cmp	r4, #0
 8000e62:	d0f6      	beq.n	8000e52 <__lesf2+0x2e>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d10c      	bne.n	8000e82 <__lesf2+0x5e>
 8000e68:	0058      	lsls	r0, r3, #1
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e006      	b.n	8000e7c <__lesf2+0x58>
 8000e6e:	2c00      	cmp	r4, #0
 8000e70:	d103      	bne.n	8000e7a <__lesf2+0x56>
 8000e72:	28ff      	cmp	r0, #255	@ 0xff
 8000e74:	d105      	bne.n	8000e82 <__lesf2+0x5e>
 8000e76:	2d00      	cmp	r5, #0
 8000e78:	d015      	beq.n	8000ea6 <__lesf2+0x82>
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	bd30      	pop	{r4, r5, pc}
 8000e7e:	2800      	cmp	r0, #0
 8000e80:	d106      	bne.n	8000e90 <__lesf2+0x6c>
 8000e82:	2001      	movs	r0, #1
 8000e84:	425b      	negs	r3, r3
 8000e86:	4318      	orrs	r0, r3
 8000e88:	e7f8      	b.n	8000e7c <__lesf2+0x58>
 8000e8a:	2c00      	cmp	r4, #0
 8000e8c:	d0f6      	beq.n	8000e7c <__lesf2+0x58>
 8000e8e:	e7f8      	b.n	8000e82 <__lesf2+0x5e>
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d1f6      	bne.n	8000e82 <__lesf2+0x5e>
 8000e94:	4282      	cmp	r2, r0
 8000e96:	dcf4      	bgt.n	8000e82 <__lesf2+0x5e>
 8000e98:	dbe6      	blt.n	8000e68 <__lesf2+0x44>
 8000e9a:	42ac      	cmp	r4, r5
 8000e9c:	d8f1      	bhi.n	8000e82 <__lesf2+0x5e>
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	42ac      	cmp	r4, r5
 8000ea2:	d2eb      	bcs.n	8000e7c <__lesf2+0x58>
 8000ea4:	e7e0      	b.n	8000e68 <__lesf2+0x44>
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d1ea      	bne.n	8000e82 <__lesf2+0x5e>
 8000eac:	e7e6      	b.n	8000e7c <__lesf2+0x58>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d1e7      	bne.n	8000e82 <__lesf2+0x5e>
 8000eb2:	e7f2      	b.n	8000e9a <__lesf2+0x76>

08000eb4 <__aeabi_fmul>:
 8000eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb6:	464f      	mov	r7, r9
 8000eb8:	4646      	mov	r6, r8
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	0044      	lsls	r4, r0, #1
 8000ebe:	b5c0      	push	{r6, r7, lr}
 8000ec0:	0246      	lsls	r6, r0, #9
 8000ec2:	1c0f      	adds	r7, r1, #0
 8000ec4:	0a76      	lsrs	r6, r6, #9
 8000ec6:	0e24      	lsrs	r4, r4, #24
 8000ec8:	0fc5      	lsrs	r5, r0, #31
 8000eca:	2c00      	cmp	r4, #0
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fmul+0x1c>
 8000ece:	e0da      	b.n	8001086 <__aeabi_fmul+0x1d2>
 8000ed0:	2cff      	cmp	r4, #255	@ 0xff
 8000ed2:	d074      	beq.n	8000fbe <__aeabi_fmul+0x10a>
 8000ed4:	2380      	movs	r3, #128	@ 0x80
 8000ed6:	00f6      	lsls	r6, r6, #3
 8000ed8:	04db      	lsls	r3, r3, #19
 8000eda:	431e      	orrs	r6, r3
 8000edc:	2300      	movs	r3, #0
 8000ede:	4699      	mov	r9, r3
 8000ee0:	469a      	mov	sl, r3
 8000ee2:	3c7f      	subs	r4, #127	@ 0x7f
 8000ee4:	027b      	lsls	r3, r7, #9
 8000ee6:	0a5b      	lsrs	r3, r3, #9
 8000ee8:	4698      	mov	r8, r3
 8000eea:	007b      	lsls	r3, r7, #1
 8000eec:	0e1b      	lsrs	r3, r3, #24
 8000eee:	0fff      	lsrs	r7, r7, #31
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d074      	beq.n	8000fde <__aeabi_fmul+0x12a>
 8000ef4:	2bff      	cmp	r3, #255	@ 0xff
 8000ef6:	d100      	bne.n	8000efa <__aeabi_fmul+0x46>
 8000ef8:	e08e      	b.n	8001018 <__aeabi_fmul+0x164>
 8000efa:	4642      	mov	r2, r8
 8000efc:	2180      	movs	r1, #128	@ 0x80
 8000efe:	00d2      	lsls	r2, r2, #3
 8000f00:	04c9      	lsls	r1, r1, #19
 8000f02:	4311      	orrs	r1, r2
 8000f04:	3b7f      	subs	r3, #127	@ 0x7f
 8000f06:	002a      	movs	r2, r5
 8000f08:	18e4      	adds	r4, r4, r3
 8000f0a:	464b      	mov	r3, r9
 8000f0c:	407a      	eors	r2, r7
 8000f0e:	4688      	mov	r8, r1
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	2b0a      	cmp	r3, #10
 8000f14:	dc75      	bgt.n	8001002 <__aeabi_fmul+0x14e>
 8000f16:	464b      	mov	r3, r9
 8000f18:	2000      	movs	r0, #0
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	dd0f      	ble.n	8000f3e <__aeabi_fmul+0x8a>
 8000f1e:	4649      	mov	r1, r9
 8000f20:	2301      	movs	r3, #1
 8000f22:	408b      	lsls	r3, r1
 8000f24:	21a6      	movs	r1, #166	@ 0xa6
 8000f26:	00c9      	lsls	r1, r1, #3
 8000f28:	420b      	tst	r3, r1
 8000f2a:	d169      	bne.n	8001000 <__aeabi_fmul+0x14c>
 8000f2c:	2190      	movs	r1, #144	@ 0x90
 8000f2e:	0089      	lsls	r1, r1, #2
 8000f30:	420b      	tst	r3, r1
 8000f32:	d000      	beq.n	8000f36 <__aeabi_fmul+0x82>
 8000f34:	e100      	b.n	8001138 <__aeabi_fmul+0x284>
 8000f36:	2188      	movs	r1, #136	@ 0x88
 8000f38:	4219      	tst	r1, r3
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_fmul+0x8a>
 8000f3c:	e0f5      	b.n	800112a <__aeabi_fmul+0x276>
 8000f3e:	4641      	mov	r1, r8
 8000f40:	0409      	lsls	r1, r1, #16
 8000f42:	0c09      	lsrs	r1, r1, #16
 8000f44:	4643      	mov	r3, r8
 8000f46:	0008      	movs	r0, r1
 8000f48:	0c35      	lsrs	r5, r6, #16
 8000f4a:	0436      	lsls	r6, r6, #16
 8000f4c:	0c1b      	lsrs	r3, r3, #16
 8000f4e:	0c36      	lsrs	r6, r6, #16
 8000f50:	4370      	muls	r0, r6
 8000f52:	4369      	muls	r1, r5
 8000f54:	435e      	muls	r6, r3
 8000f56:	435d      	muls	r5, r3
 8000f58:	1876      	adds	r6, r6, r1
 8000f5a:	0c03      	lsrs	r3, r0, #16
 8000f5c:	199b      	adds	r3, r3, r6
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d903      	bls.n	8000f6a <__aeabi_fmul+0xb6>
 8000f62:	2180      	movs	r1, #128	@ 0x80
 8000f64:	0249      	lsls	r1, r1, #9
 8000f66:	468c      	mov	ip, r1
 8000f68:	4465      	add	r5, ip
 8000f6a:	0400      	lsls	r0, r0, #16
 8000f6c:	0419      	lsls	r1, r3, #16
 8000f6e:	0c00      	lsrs	r0, r0, #16
 8000f70:	1809      	adds	r1, r1, r0
 8000f72:	018e      	lsls	r6, r1, #6
 8000f74:	1e70      	subs	r0, r6, #1
 8000f76:	4186      	sbcs	r6, r0
 8000f78:	0c1b      	lsrs	r3, r3, #16
 8000f7a:	0e89      	lsrs	r1, r1, #26
 8000f7c:	195b      	adds	r3, r3, r5
 8000f7e:	430e      	orrs	r6, r1
 8000f80:	019b      	lsls	r3, r3, #6
 8000f82:	431e      	orrs	r6, r3
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	d46c      	bmi.n	8001062 <__aeabi_fmul+0x1ae>
 8000f88:	0023      	movs	r3, r4
 8000f8a:	337f      	adds	r3, #127	@ 0x7f
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	dc00      	bgt.n	8000f92 <__aeabi_fmul+0xde>
 8000f90:	e0b1      	b.n	80010f6 <__aeabi_fmul+0x242>
 8000f92:	0015      	movs	r5, r2
 8000f94:	0771      	lsls	r1, r6, #29
 8000f96:	d00b      	beq.n	8000fb0 <__aeabi_fmul+0xfc>
 8000f98:	200f      	movs	r0, #15
 8000f9a:	0021      	movs	r1, r4
 8000f9c:	4030      	ands	r0, r6
 8000f9e:	2804      	cmp	r0, #4
 8000fa0:	d006      	beq.n	8000fb0 <__aeabi_fmul+0xfc>
 8000fa2:	3604      	adds	r6, #4
 8000fa4:	0132      	lsls	r2, r6, #4
 8000fa6:	d503      	bpl.n	8000fb0 <__aeabi_fmul+0xfc>
 8000fa8:	4b6e      	ldr	r3, [pc, #440]	@ (8001164 <__aeabi_fmul+0x2b0>)
 8000faa:	401e      	ands	r6, r3
 8000fac:	000b      	movs	r3, r1
 8000fae:	3380      	adds	r3, #128	@ 0x80
 8000fb0:	2bfe      	cmp	r3, #254	@ 0xfe
 8000fb2:	dd00      	ble.n	8000fb6 <__aeabi_fmul+0x102>
 8000fb4:	e0bd      	b.n	8001132 <__aeabi_fmul+0x27e>
 8000fb6:	01b2      	lsls	r2, r6, #6
 8000fb8:	0a52      	lsrs	r2, r2, #9
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	e048      	b.n	8001050 <__aeabi_fmul+0x19c>
 8000fbe:	2e00      	cmp	r6, #0
 8000fc0:	d000      	beq.n	8000fc4 <__aeabi_fmul+0x110>
 8000fc2:	e092      	b.n	80010ea <__aeabi_fmul+0x236>
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	4699      	mov	r9, r3
 8000fc8:	3b06      	subs	r3, #6
 8000fca:	469a      	mov	sl, r3
 8000fcc:	027b      	lsls	r3, r7, #9
 8000fce:	0a5b      	lsrs	r3, r3, #9
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	007b      	lsls	r3, r7, #1
 8000fd4:	24ff      	movs	r4, #255	@ 0xff
 8000fd6:	0e1b      	lsrs	r3, r3, #24
 8000fd8:	0fff      	lsrs	r7, r7, #31
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d18a      	bne.n	8000ef4 <__aeabi_fmul+0x40>
 8000fde:	4642      	mov	r2, r8
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	d164      	bne.n	80010ae <__aeabi_fmul+0x1fa>
 8000fe4:	4649      	mov	r1, r9
 8000fe6:	3201      	adds	r2, #1
 8000fe8:	4311      	orrs	r1, r2
 8000fea:	4689      	mov	r9, r1
 8000fec:	290a      	cmp	r1, #10
 8000fee:	dc08      	bgt.n	8001002 <__aeabi_fmul+0x14e>
 8000ff0:	407d      	eors	r5, r7
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	b2ea      	uxtb	r2, r5
 8000ff6:	2902      	cmp	r1, #2
 8000ff8:	dc91      	bgt.n	8000f1e <__aeabi_fmul+0x6a>
 8000ffa:	0015      	movs	r5, r2
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	e027      	b.n	8001050 <__aeabi_fmul+0x19c>
 8001000:	0015      	movs	r5, r2
 8001002:	4653      	mov	r3, sl
 8001004:	2b02      	cmp	r3, #2
 8001006:	d100      	bne.n	800100a <__aeabi_fmul+0x156>
 8001008:	e093      	b.n	8001132 <__aeabi_fmul+0x27e>
 800100a:	2b03      	cmp	r3, #3
 800100c:	d01a      	beq.n	8001044 <__aeabi_fmul+0x190>
 800100e:	2b01      	cmp	r3, #1
 8001010:	d12c      	bne.n	800106c <__aeabi_fmul+0x1b8>
 8001012:	2300      	movs	r3, #0
 8001014:	2200      	movs	r2, #0
 8001016:	e01b      	b.n	8001050 <__aeabi_fmul+0x19c>
 8001018:	4643      	mov	r3, r8
 800101a:	34ff      	adds	r4, #255	@ 0xff
 800101c:	2b00      	cmp	r3, #0
 800101e:	d055      	beq.n	80010cc <__aeabi_fmul+0x218>
 8001020:	2103      	movs	r1, #3
 8001022:	464b      	mov	r3, r9
 8001024:	430b      	orrs	r3, r1
 8001026:	0019      	movs	r1, r3
 8001028:	2b0a      	cmp	r3, #10
 800102a:	dc00      	bgt.n	800102e <__aeabi_fmul+0x17a>
 800102c:	e092      	b.n	8001154 <__aeabi_fmul+0x2a0>
 800102e:	2b0f      	cmp	r3, #15
 8001030:	d000      	beq.n	8001034 <__aeabi_fmul+0x180>
 8001032:	e08c      	b.n	800114e <__aeabi_fmul+0x29a>
 8001034:	2280      	movs	r2, #128	@ 0x80
 8001036:	03d2      	lsls	r2, r2, #15
 8001038:	4216      	tst	r6, r2
 800103a:	d003      	beq.n	8001044 <__aeabi_fmul+0x190>
 800103c:	4643      	mov	r3, r8
 800103e:	4213      	tst	r3, r2
 8001040:	d100      	bne.n	8001044 <__aeabi_fmul+0x190>
 8001042:	e07d      	b.n	8001140 <__aeabi_fmul+0x28c>
 8001044:	2280      	movs	r2, #128	@ 0x80
 8001046:	03d2      	lsls	r2, r2, #15
 8001048:	4332      	orrs	r2, r6
 800104a:	0252      	lsls	r2, r2, #9
 800104c:	0a52      	lsrs	r2, r2, #9
 800104e:	23ff      	movs	r3, #255	@ 0xff
 8001050:	05d8      	lsls	r0, r3, #23
 8001052:	07ed      	lsls	r5, r5, #31
 8001054:	4310      	orrs	r0, r2
 8001056:	4328      	orrs	r0, r5
 8001058:	bce0      	pop	{r5, r6, r7}
 800105a:	46ba      	mov	sl, r7
 800105c:	46b1      	mov	r9, r6
 800105e:	46a8      	mov	r8, r5
 8001060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001062:	2301      	movs	r3, #1
 8001064:	0015      	movs	r5, r2
 8001066:	0871      	lsrs	r1, r6, #1
 8001068:	401e      	ands	r6, r3
 800106a:	430e      	orrs	r6, r1
 800106c:	0023      	movs	r3, r4
 800106e:	3380      	adds	r3, #128	@ 0x80
 8001070:	1c61      	adds	r1, r4, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	dd41      	ble.n	80010fa <__aeabi_fmul+0x246>
 8001076:	0772      	lsls	r2, r6, #29
 8001078:	d094      	beq.n	8000fa4 <__aeabi_fmul+0xf0>
 800107a:	220f      	movs	r2, #15
 800107c:	4032      	ands	r2, r6
 800107e:	2a04      	cmp	r2, #4
 8001080:	d000      	beq.n	8001084 <__aeabi_fmul+0x1d0>
 8001082:	e78e      	b.n	8000fa2 <__aeabi_fmul+0xee>
 8001084:	e78e      	b.n	8000fa4 <__aeabi_fmul+0xf0>
 8001086:	2e00      	cmp	r6, #0
 8001088:	d105      	bne.n	8001096 <__aeabi_fmul+0x1e2>
 800108a:	2304      	movs	r3, #4
 800108c:	4699      	mov	r9, r3
 800108e:	3b03      	subs	r3, #3
 8001090:	2400      	movs	r4, #0
 8001092:	469a      	mov	sl, r3
 8001094:	e726      	b.n	8000ee4 <__aeabi_fmul+0x30>
 8001096:	0030      	movs	r0, r6
 8001098:	f002 fb68 	bl	800376c <__clzsi2>
 800109c:	2476      	movs	r4, #118	@ 0x76
 800109e:	1f43      	subs	r3, r0, #5
 80010a0:	409e      	lsls	r6, r3
 80010a2:	2300      	movs	r3, #0
 80010a4:	4264      	negs	r4, r4
 80010a6:	4699      	mov	r9, r3
 80010a8:	469a      	mov	sl, r3
 80010aa:	1a24      	subs	r4, r4, r0
 80010ac:	e71a      	b.n	8000ee4 <__aeabi_fmul+0x30>
 80010ae:	4640      	mov	r0, r8
 80010b0:	f002 fb5c 	bl	800376c <__clzsi2>
 80010b4:	464b      	mov	r3, r9
 80010b6:	1a24      	subs	r4, r4, r0
 80010b8:	3c76      	subs	r4, #118	@ 0x76
 80010ba:	2b0a      	cmp	r3, #10
 80010bc:	dca1      	bgt.n	8001002 <__aeabi_fmul+0x14e>
 80010be:	4643      	mov	r3, r8
 80010c0:	3805      	subs	r0, #5
 80010c2:	4083      	lsls	r3, r0
 80010c4:	407d      	eors	r5, r7
 80010c6:	4698      	mov	r8, r3
 80010c8:	b2ea      	uxtb	r2, r5
 80010ca:	e724      	b.n	8000f16 <__aeabi_fmul+0x62>
 80010cc:	464a      	mov	r2, r9
 80010ce:	3302      	adds	r3, #2
 80010d0:	4313      	orrs	r3, r2
 80010d2:	002a      	movs	r2, r5
 80010d4:	407a      	eors	r2, r7
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	2b0a      	cmp	r3, #10
 80010da:	dc92      	bgt.n	8001002 <__aeabi_fmul+0x14e>
 80010dc:	4649      	mov	r1, r9
 80010de:	0015      	movs	r5, r2
 80010e0:	2900      	cmp	r1, #0
 80010e2:	d026      	beq.n	8001132 <__aeabi_fmul+0x27e>
 80010e4:	4699      	mov	r9, r3
 80010e6:	2002      	movs	r0, #2
 80010e8:	e719      	b.n	8000f1e <__aeabi_fmul+0x6a>
 80010ea:	230c      	movs	r3, #12
 80010ec:	4699      	mov	r9, r3
 80010ee:	3b09      	subs	r3, #9
 80010f0:	24ff      	movs	r4, #255	@ 0xff
 80010f2:	469a      	mov	sl, r3
 80010f4:	e6f6      	b.n	8000ee4 <__aeabi_fmul+0x30>
 80010f6:	0015      	movs	r5, r2
 80010f8:	0021      	movs	r1, r4
 80010fa:	2201      	movs	r2, #1
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b1b      	cmp	r3, #27
 8001100:	dd00      	ble.n	8001104 <__aeabi_fmul+0x250>
 8001102:	e786      	b.n	8001012 <__aeabi_fmul+0x15e>
 8001104:	319e      	adds	r1, #158	@ 0x9e
 8001106:	0032      	movs	r2, r6
 8001108:	408e      	lsls	r6, r1
 800110a:	40da      	lsrs	r2, r3
 800110c:	1e73      	subs	r3, r6, #1
 800110e:	419e      	sbcs	r6, r3
 8001110:	4332      	orrs	r2, r6
 8001112:	0753      	lsls	r3, r2, #29
 8001114:	d004      	beq.n	8001120 <__aeabi_fmul+0x26c>
 8001116:	230f      	movs	r3, #15
 8001118:	4013      	ands	r3, r2
 800111a:	2b04      	cmp	r3, #4
 800111c:	d000      	beq.n	8001120 <__aeabi_fmul+0x26c>
 800111e:	3204      	adds	r2, #4
 8001120:	0153      	lsls	r3, r2, #5
 8001122:	d510      	bpl.n	8001146 <__aeabi_fmul+0x292>
 8001124:	2301      	movs	r3, #1
 8001126:	2200      	movs	r2, #0
 8001128:	e792      	b.n	8001050 <__aeabi_fmul+0x19c>
 800112a:	003d      	movs	r5, r7
 800112c:	4646      	mov	r6, r8
 800112e:	4682      	mov	sl, r0
 8001130:	e767      	b.n	8001002 <__aeabi_fmul+0x14e>
 8001132:	23ff      	movs	r3, #255	@ 0xff
 8001134:	2200      	movs	r2, #0
 8001136:	e78b      	b.n	8001050 <__aeabi_fmul+0x19c>
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	2500      	movs	r5, #0
 800113c:	03d2      	lsls	r2, r2, #15
 800113e:	e786      	b.n	800104e <__aeabi_fmul+0x19a>
 8001140:	003d      	movs	r5, r7
 8001142:	431a      	orrs	r2, r3
 8001144:	e783      	b.n	800104e <__aeabi_fmul+0x19a>
 8001146:	0192      	lsls	r2, r2, #6
 8001148:	2300      	movs	r3, #0
 800114a:	0a52      	lsrs	r2, r2, #9
 800114c:	e780      	b.n	8001050 <__aeabi_fmul+0x19c>
 800114e:	003d      	movs	r5, r7
 8001150:	4646      	mov	r6, r8
 8001152:	e777      	b.n	8001044 <__aeabi_fmul+0x190>
 8001154:	002a      	movs	r2, r5
 8001156:	2301      	movs	r3, #1
 8001158:	407a      	eors	r2, r7
 800115a:	408b      	lsls	r3, r1
 800115c:	2003      	movs	r0, #3
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	e6e9      	b.n	8000f36 <__aeabi_fmul+0x82>
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	f7ffffff 	.word	0xf7ffffff

08001168 <__aeabi_fsub>:
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116a:	4647      	mov	r7, r8
 800116c:	46ce      	mov	lr, r9
 800116e:	0243      	lsls	r3, r0, #9
 8001170:	b580      	push	{r7, lr}
 8001172:	0a5f      	lsrs	r7, r3, #9
 8001174:	099b      	lsrs	r3, r3, #6
 8001176:	0045      	lsls	r5, r0, #1
 8001178:	004a      	lsls	r2, r1, #1
 800117a:	469c      	mov	ip, r3
 800117c:	024b      	lsls	r3, r1, #9
 800117e:	0fc4      	lsrs	r4, r0, #31
 8001180:	0fce      	lsrs	r6, r1, #31
 8001182:	0e2d      	lsrs	r5, r5, #24
 8001184:	0a58      	lsrs	r0, r3, #9
 8001186:	0e12      	lsrs	r2, r2, #24
 8001188:	0999      	lsrs	r1, r3, #6
 800118a:	2aff      	cmp	r2, #255	@ 0xff
 800118c:	d06b      	beq.n	8001266 <__aeabi_fsub+0xfe>
 800118e:	2301      	movs	r3, #1
 8001190:	405e      	eors	r6, r3
 8001192:	1aab      	subs	r3, r5, r2
 8001194:	42b4      	cmp	r4, r6
 8001196:	d04b      	beq.n	8001230 <__aeabi_fsub+0xc8>
 8001198:	2b00      	cmp	r3, #0
 800119a:	dc00      	bgt.n	800119e <__aeabi_fsub+0x36>
 800119c:	e0ff      	b.n	800139e <__aeabi_fsub+0x236>
 800119e:	2a00      	cmp	r2, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x3c>
 80011a2:	e088      	b.n	80012b6 <__aeabi_fsub+0x14e>
 80011a4:	2dff      	cmp	r5, #255	@ 0xff
 80011a6:	d100      	bne.n	80011aa <__aeabi_fsub+0x42>
 80011a8:	e0ef      	b.n	800138a <__aeabi_fsub+0x222>
 80011aa:	2280      	movs	r2, #128	@ 0x80
 80011ac:	04d2      	lsls	r2, r2, #19
 80011ae:	4311      	orrs	r1, r2
 80011b0:	2001      	movs	r0, #1
 80011b2:	2b1b      	cmp	r3, #27
 80011b4:	dc08      	bgt.n	80011c8 <__aeabi_fsub+0x60>
 80011b6:	0008      	movs	r0, r1
 80011b8:	2220      	movs	r2, #32
 80011ba:	40d8      	lsrs	r0, r3
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	4099      	lsls	r1, r3
 80011c0:	000b      	movs	r3, r1
 80011c2:	1e5a      	subs	r2, r3, #1
 80011c4:	4193      	sbcs	r3, r2
 80011c6:	4318      	orrs	r0, r3
 80011c8:	4663      	mov	r3, ip
 80011ca:	1a1b      	subs	r3, r3, r0
 80011cc:	469c      	mov	ip, r3
 80011ce:	4663      	mov	r3, ip
 80011d0:	015b      	lsls	r3, r3, #5
 80011d2:	d400      	bmi.n	80011d6 <__aeabi_fsub+0x6e>
 80011d4:	e0cd      	b.n	8001372 <__aeabi_fsub+0x20a>
 80011d6:	4663      	mov	r3, ip
 80011d8:	019f      	lsls	r7, r3, #6
 80011da:	09bf      	lsrs	r7, r7, #6
 80011dc:	0038      	movs	r0, r7
 80011de:	f002 fac5 	bl	800376c <__clzsi2>
 80011e2:	003b      	movs	r3, r7
 80011e4:	3805      	subs	r0, #5
 80011e6:	4083      	lsls	r3, r0
 80011e8:	4285      	cmp	r5, r0
 80011ea:	dc00      	bgt.n	80011ee <__aeabi_fsub+0x86>
 80011ec:	e0a2      	b.n	8001334 <__aeabi_fsub+0x1cc>
 80011ee:	4ab7      	ldr	r2, [pc, #732]	@ (80014cc <__aeabi_fsub+0x364>)
 80011f0:	1a2d      	subs	r5, r5, r0
 80011f2:	401a      	ands	r2, r3
 80011f4:	4694      	mov	ip, r2
 80011f6:	075a      	lsls	r2, r3, #29
 80011f8:	d100      	bne.n	80011fc <__aeabi_fsub+0x94>
 80011fa:	e0c3      	b.n	8001384 <__aeabi_fsub+0x21c>
 80011fc:	220f      	movs	r2, #15
 80011fe:	4013      	ands	r3, r2
 8001200:	2b04      	cmp	r3, #4
 8001202:	d100      	bne.n	8001206 <__aeabi_fsub+0x9e>
 8001204:	e0be      	b.n	8001384 <__aeabi_fsub+0x21c>
 8001206:	2304      	movs	r3, #4
 8001208:	4698      	mov	r8, r3
 800120a:	44c4      	add	ip, r8
 800120c:	4663      	mov	r3, ip
 800120e:	015b      	lsls	r3, r3, #5
 8001210:	d400      	bmi.n	8001214 <__aeabi_fsub+0xac>
 8001212:	e0b7      	b.n	8001384 <__aeabi_fsub+0x21c>
 8001214:	1c68      	adds	r0, r5, #1
 8001216:	2dfe      	cmp	r5, #254	@ 0xfe
 8001218:	d000      	beq.n	800121c <__aeabi_fsub+0xb4>
 800121a:	e0a5      	b.n	8001368 <__aeabi_fsub+0x200>
 800121c:	20ff      	movs	r0, #255	@ 0xff
 800121e:	2200      	movs	r2, #0
 8001220:	05c0      	lsls	r0, r0, #23
 8001222:	4310      	orrs	r0, r2
 8001224:	07e4      	lsls	r4, r4, #31
 8001226:	4320      	orrs	r0, r4
 8001228:	bcc0      	pop	{r6, r7}
 800122a:	46b9      	mov	r9, r7
 800122c:	46b0      	mov	r8, r6
 800122e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001230:	2b00      	cmp	r3, #0
 8001232:	dc00      	bgt.n	8001236 <__aeabi_fsub+0xce>
 8001234:	e1eb      	b.n	800160e <__aeabi_fsub+0x4a6>
 8001236:	2a00      	cmp	r2, #0
 8001238:	d046      	beq.n	80012c8 <__aeabi_fsub+0x160>
 800123a:	2dff      	cmp	r5, #255	@ 0xff
 800123c:	d100      	bne.n	8001240 <__aeabi_fsub+0xd8>
 800123e:	e0a4      	b.n	800138a <__aeabi_fsub+0x222>
 8001240:	2280      	movs	r2, #128	@ 0x80
 8001242:	04d2      	lsls	r2, r2, #19
 8001244:	4311      	orrs	r1, r2
 8001246:	2b1b      	cmp	r3, #27
 8001248:	dc00      	bgt.n	800124c <__aeabi_fsub+0xe4>
 800124a:	e0fb      	b.n	8001444 <__aeabi_fsub+0x2dc>
 800124c:	2305      	movs	r3, #5
 800124e:	4698      	mov	r8, r3
 8001250:	002b      	movs	r3, r5
 8001252:	44c4      	add	ip, r8
 8001254:	4662      	mov	r2, ip
 8001256:	08d7      	lsrs	r7, r2, #3
 8001258:	2bff      	cmp	r3, #255	@ 0xff
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0xf6>
 800125c:	e095      	b.n	800138a <__aeabi_fsub+0x222>
 800125e:	027a      	lsls	r2, r7, #9
 8001260:	0a52      	lsrs	r2, r2, #9
 8001262:	b2d8      	uxtb	r0, r3
 8001264:	e7dc      	b.n	8001220 <__aeabi_fsub+0xb8>
 8001266:	002b      	movs	r3, r5
 8001268:	3bff      	subs	r3, #255	@ 0xff
 800126a:	4699      	mov	r9, r3
 800126c:	2900      	cmp	r1, #0
 800126e:	d118      	bne.n	80012a2 <__aeabi_fsub+0x13a>
 8001270:	2301      	movs	r3, #1
 8001272:	405e      	eors	r6, r3
 8001274:	42b4      	cmp	r4, r6
 8001276:	d100      	bne.n	800127a <__aeabi_fsub+0x112>
 8001278:	e0ca      	b.n	8001410 <__aeabi_fsub+0x2a8>
 800127a:	464b      	mov	r3, r9
 800127c:	2b00      	cmp	r3, #0
 800127e:	d02d      	beq.n	80012dc <__aeabi_fsub+0x174>
 8001280:	2d00      	cmp	r5, #0
 8001282:	d000      	beq.n	8001286 <__aeabi_fsub+0x11e>
 8001284:	e13c      	b.n	8001500 <__aeabi_fsub+0x398>
 8001286:	23ff      	movs	r3, #255	@ 0xff
 8001288:	4664      	mov	r4, ip
 800128a:	2c00      	cmp	r4, #0
 800128c:	d100      	bne.n	8001290 <__aeabi_fsub+0x128>
 800128e:	e15f      	b.n	8001550 <__aeabi_fsub+0x3e8>
 8001290:	1e5d      	subs	r5, r3, #1
 8001292:	2b01      	cmp	r3, #1
 8001294:	d100      	bne.n	8001298 <__aeabi_fsub+0x130>
 8001296:	e174      	b.n	8001582 <__aeabi_fsub+0x41a>
 8001298:	0034      	movs	r4, r6
 800129a:	2bff      	cmp	r3, #255	@ 0xff
 800129c:	d074      	beq.n	8001388 <__aeabi_fsub+0x220>
 800129e:	002b      	movs	r3, r5
 80012a0:	e103      	b.n	80014aa <__aeabi_fsub+0x342>
 80012a2:	42b4      	cmp	r4, r6
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x140>
 80012a6:	e09c      	b.n	80013e2 <__aeabi_fsub+0x27a>
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d017      	beq.n	80012dc <__aeabi_fsub+0x174>
 80012ac:	2d00      	cmp	r5, #0
 80012ae:	d0ea      	beq.n	8001286 <__aeabi_fsub+0x11e>
 80012b0:	0007      	movs	r7, r0
 80012b2:	0034      	movs	r4, r6
 80012b4:	e06c      	b.n	8001390 <__aeabi_fsub+0x228>
 80012b6:	2900      	cmp	r1, #0
 80012b8:	d0cc      	beq.n	8001254 <__aeabi_fsub+0xec>
 80012ba:	1e5a      	subs	r2, r3, #1
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d02b      	beq.n	8001318 <__aeabi_fsub+0x1b0>
 80012c0:	2bff      	cmp	r3, #255	@ 0xff
 80012c2:	d062      	beq.n	800138a <__aeabi_fsub+0x222>
 80012c4:	0013      	movs	r3, r2
 80012c6:	e773      	b.n	80011b0 <__aeabi_fsub+0x48>
 80012c8:	2900      	cmp	r1, #0
 80012ca:	d0c3      	beq.n	8001254 <__aeabi_fsub+0xec>
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d100      	bne.n	80012d4 <__aeabi_fsub+0x16c>
 80012d2:	e11e      	b.n	8001512 <__aeabi_fsub+0x3aa>
 80012d4:	2bff      	cmp	r3, #255	@ 0xff
 80012d6:	d058      	beq.n	800138a <__aeabi_fsub+0x222>
 80012d8:	0013      	movs	r3, r2
 80012da:	e7b4      	b.n	8001246 <__aeabi_fsub+0xde>
 80012dc:	22fe      	movs	r2, #254	@ 0xfe
 80012de:	1c6b      	adds	r3, r5, #1
 80012e0:	421a      	tst	r2, r3
 80012e2:	d10d      	bne.n	8001300 <__aeabi_fsub+0x198>
 80012e4:	2d00      	cmp	r5, #0
 80012e6:	d060      	beq.n	80013aa <__aeabi_fsub+0x242>
 80012e8:	4663      	mov	r3, ip
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_fsub+0x188>
 80012ee:	e120      	b.n	8001532 <__aeabi_fsub+0x3ca>
 80012f0:	2900      	cmp	r1, #0
 80012f2:	d000      	beq.n	80012f6 <__aeabi_fsub+0x18e>
 80012f4:	e128      	b.n	8001548 <__aeabi_fsub+0x3e0>
 80012f6:	2280      	movs	r2, #128	@ 0x80
 80012f8:	2400      	movs	r4, #0
 80012fa:	20ff      	movs	r0, #255	@ 0xff
 80012fc:	03d2      	lsls	r2, r2, #15
 80012fe:	e78f      	b.n	8001220 <__aeabi_fsub+0xb8>
 8001300:	4663      	mov	r3, ip
 8001302:	1a5f      	subs	r7, r3, r1
 8001304:	017b      	lsls	r3, r7, #5
 8001306:	d500      	bpl.n	800130a <__aeabi_fsub+0x1a2>
 8001308:	e0fe      	b.n	8001508 <__aeabi_fsub+0x3a0>
 800130a:	2f00      	cmp	r7, #0
 800130c:	d000      	beq.n	8001310 <__aeabi_fsub+0x1a8>
 800130e:	e765      	b.n	80011dc <__aeabi_fsub+0x74>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2200      	movs	r2, #0
 8001316:	e783      	b.n	8001220 <__aeabi_fsub+0xb8>
 8001318:	4663      	mov	r3, ip
 800131a:	1a59      	subs	r1, r3, r1
 800131c:	014b      	lsls	r3, r1, #5
 800131e:	d400      	bmi.n	8001322 <__aeabi_fsub+0x1ba>
 8001320:	e119      	b.n	8001556 <__aeabi_fsub+0x3ee>
 8001322:	018f      	lsls	r7, r1, #6
 8001324:	09bf      	lsrs	r7, r7, #6
 8001326:	0038      	movs	r0, r7
 8001328:	f002 fa20 	bl	800376c <__clzsi2>
 800132c:	003b      	movs	r3, r7
 800132e:	3805      	subs	r0, #5
 8001330:	4083      	lsls	r3, r0
 8001332:	2501      	movs	r5, #1
 8001334:	2220      	movs	r2, #32
 8001336:	1b40      	subs	r0, r0, r5
 8001338:	3001      	adds	r0, #1
 800133a:	1a12      	subs	r2, r2, r0
 800133c:	0019      	movs	r1, r3
 800133e:	4093      	lsls	r3, r2
 8001340:	40c1      	lsrs	r1, r0
 8001342:	1e5a      	subs	r2, r3, #1
 8001344:	4193      	sbcs	r3, r2
 8001346:	4319      	orrs	r1, r3
 8001348:	468c      	mov	ip, r1
 800134a:	1e0b      	subs	r3, r1, #0
 800134c:	d0e1      	beq.n	8001312 <__aeabi_fsub+0x1aa>
 800134e:	075b      	lsls	r3, r3, #29
 8001350:	d100      	bne.n	8001354 <__aeabi_fsub+0x1ec>
 8001352:	e152      	b.n	80015fa <__aeabi_fsub+0x492>
 8001354:	230f      	movs	r3, #15
 8001356:	2500      	movs	r5, #0
 8001358:	400b      	ands	r3, r1
 800135a:	2b04      	cmp	r3, #4
 800135c:	d000      	beq.n	8001360 <__aeabi_fsub+0x1f8>
 800135e:	e752      	b.n	8001206 <__aeabi_fsub+0x9e>
 8001360:	2001      	movs	r0, #1
 8001362:	014a      	lsls	r2, r1, #5
 8001364:	d400      	bmi.n	8001368 <__aeabi_fsub+0x200>
 8001366:	e092      	b.n	800148e <__aeabi_fsub+0x326>
 8001368:	b2c0      	uxtb	r0, r0
 800136a:	4663      	mov	r3, ip
 800136c:	019a      	lsls	r2, r3, #6
 800136e:	0a52      	lsrs	r2, r2, #9
 8001370:	e756      	b.n	8001220 <__aeabi_fsub+0xb8>
 8001372:	4663      	mov	r3, ip
 8001374:	075b      	lsls	r3, r3, #29
 8001376:	d005      	beq.n	8001384 <__aeabi_fsub+0x21c>
 8001378:	230f      	movs	r3, #15
 800137a:	4662      	mov	r2, ip
 800137c:	4013      	ands	r3, r2
 800137e:	2b04      	cmp	r3, #4
 8001380:	d000      	beq.n	8001384 <__aeabi_fsub+0x21c>
 8001382:	e740      	b.n	8001206 <__aeabi_fsub+0x9e>
 8001384:	002b      	movs	r3, r5
 8001386:	e765      	b.n	8001254 <__aeabi_fsub+0xec>
 8001388:	0007      	movs	r7, r0
 800138a:	2f00      	cmp	r7, #0
 800138c:	d100      	bne.n	8001390 <__aeabi_fsub+0x228>
 800138e:	e745      	b.n	800121c <__aeabi_fsub+0xb4>
 8001390:	2280      	movs	r2, #128	@ 0x80
 8001392:	03d2      	lsls	r2, r2, #15
 8001394:	433a      	orrs	r2, r7
 8001396:	0252      	lsls	r2, r2, #9
 8001398:	20ff      	movs	r0, #255	@ 0xff
 800139a:	0a52      	lsrs	r2, r2, #9
 800139c:	e740      	b.n	8001220 <__aeabi_fsub+0xb8>
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d179      	bne.n	8001496 <__aeabi_fsub+0x32e>
 80013a2:	22fe      	movs	r2, #254	@ 0xfe
 80013a4:	1c6b      	adds	r3, r5, #1
 80013a6:	421a      	tst	r2, r3
 80013a8:	d1aa      	bne.n	8001300 <__aeabi_fsub+0x198>
 80013aa:	4663      	mov	r3, ip
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d100      	bne.n	80013b2 <__aeabi_fsub+0x24a>
 80013b0:	e0f5      	b.n	800159e <__aeabi_fsub+0x436>
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d100      	bne.n	80013b8 <__aeabi_fsub+0x250>
 80013b6:	e0d1      	b.n	800155c <__aeabi_fsub+0x3f4>
 80013b8:	1a5f      	subs	r7, r3, r1
 80013ba:	2380      	movs	r3, #128	@ 0x80
 80013bc:	04db      	lsls	r3, r3, #19
 80013be:	421f      	tst	r7, r3
 80013c0:	d100      	bne.n	80013c4 <__aeabi_fsub+0x25c>
 80013c2:	e10e      	b.n	80015e2 <__aeabi_fsub+0x47a>
 80013c4:	4662      	mov	r2, ip
 80013c6:	2401      	movs	r4, #1
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4694      	mov	ip, r2
 80013cc:	2000      	movs	r0, #0
 80013ce:	4034      	ands	r4, r6
 80013d0:	2a00      	cmp	r2, #0
 80013d2:	d100      	bne.n	80013d6 <__aeabi_fsub+0x26e>
 80013d4:	e724      	b.n	8001220 <__aeabi_fsub+0xb8>
 80013d6:	2001      	movs	r0, #1
 80013d8:	421a      	tst	r2, r3
 80013da:	d1c6      	bne.n	800136a <__aeabi_fsub+0x202>
 80013dc:	2300      	movs	r3, #0
 80013de:	08d7      	lsrs	r7, r2, #3
 80013e0:	e73d      	b.n	800125e <__aeabi_fsub+0xf6>
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d017      	beq.n	8001416 <__aeabi_fsub+0x2ae>
 80013e6:	2d00      	cmp	r5, #0
 80013e8:	d000      	beq.n	80013ec <__aeabi_fsub+0x284>
 80013ea:	e0af      	b.n	800154c <__aeabi_fsub+0x3e4>
 80013ec:	23ff      	movs	r3, #255	@ 0xff
 80013ee:	4665      	mov	r5, ip
 80013f0:	2d00      	cmp	r5, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_fsub+0x28e>
 80013f4:	e0ad      	b.n	8001552 <__aeabi_fsub+0x3ea>
 80013f6:	1e5e      	subs	r6, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d100      	bne.n	80013fe <__aeabi_fsub+0x296>
 80013fc:	e089      	b.n	8001512 <__aeabi_fsub+0x3aa>
 80013fe:	2bff      	cmp	r3, #255	@ 0xff
 8001400:	d0c2      	beq.n	8001388 <__aeabi_fsub+0x220>
 8001402:	2e1b      	cmp	r6, #27
 8001404:	dc00      	bgt.n	8001408 <__aeabi_fsub+0x2a0>
 8001406:	e0ab      	b.n	8001560 <__aeabi_fsub+0x3f8>
 8001408:	1d4b      	adds	r3, r1, #5
 800140a:	469c      	mov	ip, r3
 800140c:	0013      	movs	r3, r2
 800140e:	e721      	b.n	8001254 <__aeabi_fsub+0xec>
 8001410:	464b      	mov	r3, r9
 8001412:	2b00      	cmp	r3, #0
 8001414:	d170      	bne.n	80014f8 <__aeabi_fsub+0x390>
 8001416:	22fe      	movs	r2, #254	@ 0xfe
 8001418:	1c6b      	adds	r3, r5, #1
 800141a:	421a      	tst	r2, r3
 800141c:	d15e      	bne.n	80014dc <__aeabi_fsub+0x374>
 800141e:	2d00      	cmp	r5, #0
 8001420:	d000      	beq.n	8001424 <__aeabi_fsub+0x2bc>
 8001422:	e0c3      	b.n	80015ac <__aeabi_fsub+0x444>
 8001424:	4663      	mov	r3, ip
 8001426:	2b00      	cmp	r3, #0
 8001428:	d100      	bne.n	800142c <__aeabi_fsub+0x2c4>
 800142a:	e0d0      	b.n	80015ce <__aeabi_fsub+0x466>
 800142c:	2900      	cmp	r1, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_fsub+0x2ca>
 8001430:	e094      	b.n	800155c <__aeabi_fsub+0x3f4>
 8001432:	000a      	movs	r2, r1
 8001434:	4462      	add	r2, ip
 8001436:	0153      	lsls	r3, r2, #5
 8001438:	d400      	bmi.n	800143c <__aeabi_fsub+0x2d4>
 800143a:	e0d8      	b.n	80015ee <__aeabi_fsub+0x486>
 800143c:	0192      	lsls	r2, r2, #6
 800143e:	2001      	movs	r0, #1
 8001440:	0a52      	lsrs	r2, r2, #9
 8001442:	e6ed      	b.n	8001220 <__aeabi_fsub+0xb8>
 8001444:	0008      	movs	r0, r1
 8001446:	2220      	movs	r2, #32
 8001448:	40d8      	lsrs	r0, r3
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	4099      	lsls	r1, r3
 800144e:	000b      	movs	r3, r1
 8001450:	1e5a      	subs	r2, r3, #1
 8001452:	4193      	sbcs	r3, r2
 8001454:	4303      	orrs	r3, r0
 8001456:	449c      	add	ip, r3
 8001458:	4663      	mov	r3, ip
 800145a:	015b      	lsls	r3, r3, #5
 800145c:	d589      	bpl.n	8001372 <__aeabi_fsub+0x20a>
 800145e:	3501      	adds	r5, #1
 8001460:	2dff      	cmp	r5, #255	@ 0xff
 8001462:	d100      	bne.n	8001466 <__aeabi_fsub+0x2fe>
 8001464:	e6da      	b.n	800121c <__aeabi_fsub+0xb4>
 8001466:	4662      	mov	r2, ip
 8001468:	2301      	movs	r3, #1
 800146a:	4919      	ldr	r1, [pc, #100]	@ (80014d0 <__aeabi_fsub+0x368>)
 800146c:	4013      	ands	r3, r2
 800146e:	0852      	lsrs	r2, r2, #1
 8001470:	400a      	ands	r2, r1
 8001472:	431a      	orrs	r2, r3
 8001474:	0013      	movs	r3, r2
 8001476:	4694      	mov	ip, r2
 8001478:	075b      	lsls	r3, r3, #29
 800147a:	d004      	beq.n	8001486 <__aeabi_fsub+0x31e>
 800147c:	230f      	movs	r3, #15
 800147e:	4013      	ands	r3, r2
 8001480:	2b04      	cmp	r3, #4
 8001482:	d000      	beq.n	8001486 <__aeabi_fsub+0x31e>
 8001484:	e6bf      	b.n	8001206 <__aeabi_fsub+0x9e>
 8001486:	4663      	mov	r3, ip
 8001488:	015b      	lsls	r3, r3, #5
 800148a:	d500      	bpl.n	800148e <__aeabi_fsub+0x326>
 800148c:	e6c2      	b.n	8001214 <__aeabi_fsub+0xac>
 800148e:	4663      	mov	r3, ip
 8001490:	08df      	lsrs	r7, r3, #3
 8001492:	002b      	movs	r3, r5
 8001494:	e6e3      	b.n	800125e <__aeabi_fsub+0xf6>
 8001496:	1b53      	subs	r3, r2, r5
 8001498:	2d00      	cmp	r5, #0
 800149a:	d100      	bne.n	800149e <__aeabi_fsub+0x336>
 800149c:	e6f4      	b.n	8001288 <__aeabi_fsub+0x120>
 800149e:	2080      	movs	r0, #128	@ 0x80
 80014a0:	4664      	mov	r4, ip
 80014a2:	04c0      	lsls	r0, r0, #19
 80014a4:	4304      	orrs	r4, r0
 80014a6:	46a4      	mov	ip, r4
 80014a8:	0034      	movs	r4, r6
 80014aa:	2001      	movs	r0, #1
 80014ac:	2b1b      	cmp	r3, #27
 80014ae:	dc09      	bgt.n	80014c4 <__aeabi_fsub+0x35c>
 80014b0:	2520      	movs	r5, #32
 80014b2:	4660      	mov	r0, ip
 80014b4:	40d8      	lsrs	r0, r3
 80014b6:	1aeb      	subs	r3, r5, r3
 80014b8:	4665      	mov	r5, ip
 80014ba:	409d      	lsls	r5, r3
 80014bc:	002b      	movs	r3, r5
 80014be:	1e5d      	subs	r5, r3, #1
 80014c0:	41ab      	sbcs	r3, r5
 80014c2:	4318      	orrs	r0, r3
 80014c4:	1a0b      	subs	r3, r1, r0
 80014c6:	469c      	mov	ip, r3
 80014c8:	0015      	movs	r5, r2
 80014ca:	e680      	b.n	80011ce <__aeabi_fsub+0x66>
 80014cc:	fbffffff 	.word	0xfbffffff
 80014d0:	7dffffff 	.word	0x7dffffff
 80014d4:	22fe      	movs	r2, #254	@ 0xfe
 80014d6:	1c6b      	adds	r3, r5, #1
 80014d8:	4213      	tst	r3, r2
 80014da:	d0a3      	beq.n	8001424 <__aeabi_fsub+0x2bc>
 80014dc:	2bff      	cmp	r3, #255	@ 0xff
 80014de:	d100      	bne.n	80014e2 <__aeabi_fsub+0x37a>
 80014e0:	e69c      	b.n	800121c <__aeabi_fsub+0xb4>
 80014e2:	4461      	add	r1, ip
 80014e4:	0849      	lsrs	r1, r1, #1
 80014e6:	074a      	lsls	r2, r1, #29
 80014e8:	d049      	beq.n	800157e <__aeabi_fsub+0x416>
 80014ea:	220f      	movs	r2, #15
 80014ec:	400a      	ands	r2, r1
 80014ee:	2a04      	cmp	r2, #4
 80014f0:	d045      	beq.n	800157e <__aeabi_fsub+0x416>
 80014f2:	1d0a      	adds	r2, r1, #4
 80014f4:	4694      	mov	ip, r2
 80014f6:	e6ad      	b.n	8001254 <__aeabi_fsub+0xec>
 80014f8:	2d00      	cmp	r5, #0
 80014fa:	d100      	bne.n	80014fe <__aeabi_fsub+0x396>
 80014fc:	e776      	b.n	80013ec <__aeabi_fsub+0x284>
 80014fe:	e68d      	b.n	800121c <__aeabi_fsub+0xb4>
 8001500:	0034      	movs	r4, r6
 8001502:	20ff      	movs	r0, #255	@ 0xff
 8001504:	2200      	movs	r2, #0
 8001506:	e68b      	b.n	8001220 <__aeabi_fsub+0xb8>
 8001508:	4663      	mov	r3, ip
 800150a:	2401      	movs	r4, #1
 800150c:	1acf      	subs	r7, r1, r3
 800150e:	4034      	ands	r4, r6
 8001510:	e664      	b.n	80011dc <__aeabi_fsub+0x74>
 8001512:	4461      	add	r1, ip
 8001514:	014b      	lsls	r3, r1, #5
 8001516:	d56d      	bpl.n	80015f4 <__aeabi_fsub+0x48c>
 8001518:	0848      	lsrs	r0, r1, #1
 800151a:	4944      	ldr	r1, [pc, #272]	@ (800162c <__aeabi_fsub+0x4c4>)
 800151c:	4001      	ands	r1, r0
 800151e:	0743      	lsls	r3, r0, #29
 8001520:	d02c      	beq.n	800157c <__aeabi_fsub+0x414>
 8001522:	230f      	movs	r3, #15
 8001524:	4003      	ands	r3, r0
 8001526:	2b04      	cmp	r3, #4
 8001528:	d028      	beq.n	800157c <__aeabi_fsub+0x414>
 800152a:	1d0b      	adds	r3, r1, #4
 800152c:	469c      	mov	ip, r3
 800152e:	2302      	movs	r3, #2
 8001530:	e690      	b.n	8001254 <__aeabi_fsub+0xec>
 8001532:	2900      	cmp	r1, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x3d0>
 8001536:	e72b      	b.n	8001390 <__aeabi_fsub+0x228>
 8001538:	2380      	movs	r3, #128	@ 0x80
 800153a:	03db      	lsls	r3, r3, #15
 800153c:	429f      	cmp	r7, r3
 800153e:	d200      	bcs.n	8001542 <__aeabi_fsub+0x3da>
 8001540:	e726      	b.n	8001390 <__aeabi_fsub+0x228>
 8001542:	4298      	cmp	r0, r3
 8001544:	d300      	bcc.n	8001548 <__aeabi_fsub+0x3e0>
 8001546:	e723      	b.n	8001390 <__aeabi_fsub+0x228>
 8001548:	2401      	movs	r4, #1
 800154a:	4034      	ands	r4, r6
 800154c:	0007      	movs	r7, r0
 800154e:	e71f      	b.n	8001390 <__aeabi_fsub+0x228>
 8001550:	0034      	movs	r4, r6
 8001552:	468c      	mov	ip, r1
 8001554:	e67e      	b.n	8001254 <__aeabi_fsub+0xec>
 8001556:	2301      	movs	r3, #1
 8001558:	08cf      	lsrs	r7, r1, #3
 800155a:	e680      	b.n	800125e <__aeabi_fsub+0xf6>
 800155c:	2300      	movs	r3, #0
 800155e:	e67e      	b.n	800125e <__aeabi_fsub+0xf6>
 8001560:	2020      	movs	r0, #32
 8001562:	4665      	mov	r5, ip
 8001564:	1b80      	subs	r0, r0, r6
 8001566:	4085      	lsls	r5, r0
 8001568:	4663      	mov	r3, ip
 800156a:	0028      	movs	r0, r5
 800156c:	40f3      	lsrs	r3, r6
 800156e:	1e45      	subs	r5, r0, #1
 8001570:	41a8      	sbcs	r0, r5
 8001572:	4303      	orrs	r3, r0
 8001574:	469c      	mov	ip, r3
 8001576:	0015      	movs	r5, r2
 8001578:	448c      	add	ip, r1
 800157a:	e76d      	b.n	8001458 <__aeabi_fsub+0x2f0>
 800157c:	2302      	movs	r3, #2
 800157e:	08cf      	lsrs	r7, r1, #3
 8001580:	e66d      	b.n	800125e <__aeabi_fsub+0xf6>
 8001582:	1b0f      	subs	r7, r1, r4
 8001584:	017b      	lsls	r3, r7, #5
 8001586:	d528      	bpl.n	80015da <__aeabi_fsub+0x472>
 8001588:	01bf      	lsls	r7, r7, #6
 800158a:	09bf      	lsrs	r7, r7, #6
 800158c:	0038      	movs	r0, r7
 800158e:	f002 f8ed 	bl	800376c <__clzsi2>
 8001592:	003b      	movs	r3, r7
 8001594:	3805      	subs	r0, #5
 8001596:	4083      	lsls	r3, r0
 8001598:	0034      	movs	r4, r6
 800159a:	2501      	movs	r5, #1
 800159c:	e6ca      	b.n	8001334 <__aeabi_fsub+0x1cc>
 800159e:	2900      	cmp	r1, #0
 80015a0:	d100      	bne.n	80015a4 <__aeabi_fsub+0x43c>
 80015a2:	e6b5      	b.n	8001310 <__aeabi_fsub+0x1a8>
 80015a4:	2401      	movs	r4, #1
 80015a6:	0007      	movs	r7, r0
 80015a8:	4034      	ands	r4, r6
 80015aa:	e658      	b.n	800125e <__aeabi_fsub+0xf6>
 80015ac:	4663      	mov	r3, ip
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d100      	bne.n	80015b4 <__aeabi_fsub+0x44c>
 80015b2:	e6e9      	b.n	8001388 <__aeabi_fsub+0x220>
 80015b4:	2900      	cmp	r1, #0
 80015b6:	d100      	bne.n	80015ba <__aeabi_fsub+0x452>
 80015b8:	e6ea      	b.n	8001390 <__aeabi_fsub+0x228>
 80015ba:	2380      	movs	r3, #128	@ 0x80
 80015bc:	03db      	lsls	r3, r3, #15
 80015be:	429f      	cmp	r7, r3
 80015c0:	d200      	bcs.n	80015c4 <__aeabi_fsub+0x45c>
 80015c2:	e6e5      	b.n	8001390 <__aeabi_fsub+0x228>
 80015c4:	4298      	cmp	r0, r3
 80015c6:	d300      	bcc.n	80015ca <__aeabi_fsub+0x462>
 80015c8:	e6e2      	b.n	8001390 <__aeabi_fsub+0x228>
 80015ca:	0007      	movs	r7, r0
 80015cc:	e6e0      	b.n	8001390 <__aeabi_fsub+0x228>
 80015ce:	2900      	cmp	r1, #0
 80015d0:	d100      	bne.n	80015d4 <__aeabi_fsub+0x46c>
 80015d2:	e69e      	b.n	8001312 <__aeabi_fsub+0x1aa>
 80015d4:	2300      	movs	r3, #0
 80015d6:	08cf      	lsrs	r7, r1, #3
 80015d8:	e641      	b.n	800125e <__aeabi_fsub+0xf6>
 80015da:	0034      	movs	r4, r6
 80015dc:	2301      	movs	r3, #1
 80015de:	08ff      	lsrs	r7, r7, #3
 80015e0:	e63d      	b.n	800125e <__aeabi_fsub+0xf6>
 80015e2:	2f00      	cmp	r7, #0
 80015e4:	d100      	bne.n	80015e8 <__aeabi_fsub+0x480>
 80015e6:	e693      	b.n	8001310 <__aeabi_fsub+0x1a8>
 80015e8:	2300      	movs	r3, #0
 80015ea:	08ff      	lsrs	r7, r7, #3
 80015ec:	e637      	b.n	800125e <__aeabi_fsub+0xf6>
 80015ee:	2300      	movs	r3, #0
 80015f0:	08d7      	lsrs	r7, r2, #3
 80015f2:	e634      	b.n	800125e <__aeabi_fsub+0xf6>
 80015f4:	2301      	movs	r3, #1
 80015f6:	08cf      	lsrs	r7, r1, #3
 80015f8:	e631      	b.n	800125e <__aeabi_fsub+0xf6>
 80015fa:	2280      	movs	r2, #128	@ 0x80
 80015fc:	000b      	movs	r3, r1
 80015fe:	04d2      	lsls	r2, r2, #19
 8001600:	2001      	movs	r0, #1
 8001602:	4013      	ands	r3, r2
 8001604:	4211      	tst	r1, r2
 8001606:	d000      	beq.n	800160a <__aeabi_fsub+0x4a2>
 8001608:	e6ae      	b.n	8001368 <__aeabi_fsub+0x200>
 800160a:	08cf      	lsrs	r7, r1, #3
 800160c:	e627      	b.n	800125e <__aeabi_fsub+0xf6>
 800160e:	2b00      	cmp	r3, #0
 8001610:	d100      	bne.n	8001614 <__aeabi_fsub+0x4ac>
 8001612:	e75f      	b.n	80014d4 <__aeabi_fsub+0x36c>
 8001614:	1b56      	subs	r6, r2, r5
 8001616:	2d00      	cmp	r5, #0
 8001618:	d101      	bne.n	800161e <__aeabi_fsub+0x4b6>
 800161a:	0033      	movs	r3, r6
 800161c:	e6e7      	b.n	80013ee <__aeabi_fsub+0x286>
 800161e:	2380      	movs	r3, #128	@ 0x80
 8001620:	4660      	mov	r0, ip
 8001622:	04db      	lsls	r3, r3, #19
 8001624:	4318      	orrs	r0, r3
 8001626:	4684      	mov	ip, r0
 8001628:	e6eb      	b.n	8001402 <__aeabi_fsub+0x29a>
 800162a:	46c0      	nop			@ (mov r8, r8)
 800162c:	7dffffff 	.word	0x7dffffff

08001630 <__aeabi_f2iz>:
 8001630:	0241      	lsls	r1, r0, #9
 8001632:	0042      	lsls	r2, r0, #1
 8001634:	0fc3      	lsrs	r3, r0, #31
 8001636:	0a49      	lsrs	r1, r1, #9
 8001638:	2000      	movs	r0, #0
 800163a:	0e12      	lsrs	r2, r2, #24
 800163c:	2a7e      	cmp	r2, #126	@ 0x7e
 800163e:	dd03      	ble.n	8001648 <__aeabi_f2iz+0x18>
 8001640:	2a9d      	cmp	r2, #157	@ 0x9d
 8001642:	dd02      	ble.n	800164a <__aeabi_f2iz+0x1a>
 8001644:	4a09      	ldr	r2, [pc, #36]	@ (800166c <__aeabi_f2iz+0x3c>)
 8001646:	1898      	adds	r0, r3, r2
 8001648:	4770      	bx	lr
 800164a:	2080      	movs	r0, #128	@ 0x80
 800164c:	0400      	lsls	r0, r0, #16
 800164e:	4301      	orrs	r1, r0
 8001650:	2a95      	cmp	r2, #149	@ 0x95
 8001652:	dc07      	bgt.n	8001664 <__aeabi_f2iz+0x34>
 8001654:	2096      	movs	r0, #150	@ 0x96
 8001656:	1a82      	subs	r2, r0, r2
 8001658:	40d1      	lsrs	r1, r2
 800165a:	4248      	negs	r0, r1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f3      	bne.n	8001648 <__aeabi_f2iz+0x18>
 8001660:	0008      	movs	r0, r1
 8001662:	e7f1      	b.n	8001648 <__aeabi_f2iz+0x18>
 8001664:	3a96      	subs	r2, #150	@ 0x96
 8001666:	4091      	lsls	r1, r2
 8001668:	e7f7      	b.n	800165a <__aeabi_f2iz+0x2a>
 800166a:	46c0      	nop			@ (mov r8, r8)
 800166c:	7fffffff 	.word	0x7fffffff

08001670 <__aeabi_i2f>:
 8001670:	b570      	push	{r4, r5, r6, lr}
 8001672:	2800      	cmp	r0, #0
 8001674:	d012      	beq.n	800169c <__aeabi_i2f+0x2c>
 8001676:	17c3      	asrs	r3, r0, #31
 8001678:	18c5      	adds	r5, r0, r3
 800167a:	405d      	eors	r5, r3
 800167c:	0fc4      	lsrs	r4, r0, #31
 800167e:	0028      	movs	r0, r5
 8001680:	f002 f874 	bl	800376c <__clzsi2>
 8001684:	239e      	movs	r3, #158	@ 0x9e
 8001686:	1a1b      	subs	r3, r3, r0
 8001688:	2b96      	cmp	r3, #150	@ 0x96
 800168a:	dc0f      	bgt.n	80016ac <__aeabi_i2f+0x3c>
 800168c:	2808      	cmp	r0, #8
 800168e:	d038      	beq.n	8001702 <__aeabi_i2f+0x92>
 8001690:	3808      	subs	r0, #8
 8001692:	4085      	lsls	r5, r0
 8001694:	026d      	lsls	r5, r5, #9
 8001696:	0a6d      	lsrs	r5, r5, #9
 8001698:	b2d8      	uxtb	r0, r3
 800169a:	e002      	b.n	80016a2 <__aeabi_i2f+0x32>
 800169c:	2400      	movs	r4, #0
 800169e:	2000      	movs	r0, #0
 80016a0:	2500      	movs	r5, #0
 80016a2:	05c0      	lsls	r0, r0, #23
 80016a4:	4328      	orrs	r0, r5
 80016a6:	07e4      	lsls	r4, r4, #31
 80016a8:	4320      	orrs	r0, r4
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
 80016ac:	2b99      	cmp	r3, #153	@ 0x99
 80016ae:	dc14      	bgt.n	80016da <__aeabi_i2f+0x6a>
 80016b0:	1f42      	subs	r2, r0, #5
 80016b2:	4095      	lsls	r5, r2
 80016b4:	002a      	movs	r2, r5
 80016b6:	4915      	ldr	r1, [pc, #84]	@ (800170c <__aeabi_i2f+0x9c>)
 80016b8:	4011      	ands	r1, r2
 80016ba:	0755      	lsls	r5, r2, #29
 80016bc:	d01c      	beq.n	80016f8 <__aeabi_i2f+0x88>
 80016be:	250f      	movs	r5, #15
 80016c0:	402a      	ands	r2, r5
 80016c2:	2a04      	cmp	r2, #4
 80016c4:	d018      	beq.n	80016f8 <__aeabi_i2f+0x88>
 80016c6:	3104      	adds	r1, #4
 80016c8:	08ca      	lsrs	r2, r1, #3
 80016ca:	0149      	lsls	r1, r1, #5
 80016cc:	d515      	bpl.n	80016fa <__aeabi_i2f+0x8a>
 80016ce:	239f      	movs	r3, #159	@ 0x9f
 80016d0:	0252      	lsls	r2, r2, #9
 80016d2:	1a18      	subs	r0, r3, r0
 80016d4:	0a55      	lsrs	r5, r2, #9
 80016d6:	b2c0      	uxtb	r0, r0
 80016d8:	e7e3      	b.n	80016a2 <__aeabi_i2f+0x32>
 80016da:	2205      	movs	r2, #5
 80016dc:	0029      	movs	r1, r5
 80016de:	1a12      	subs	r2, r2, r0
 80016e0:	40d1      	lsrs	r1, r2
 80016e2:	0002      	movs	r2, r0
 80016e4:	321b      	adds	r2, #27
 80016e6:	4095      	lsls	r5, r2
 80016e8:	002a      	movs	r2, r5
 80016ea:	1e55      	subs	r5, r2, #1
 80016ec:	41aa      	sbcs	r2, r5
 80016ee:	430a      	orrs	r2, r1
 80016f0:	4906      	ldr	r1, [pc, #24]	@ (800170c <__aeabi_i2f+0x9c>)
 80016f2:	4011      	ands	r1, r2
 80016f4:	0755      	lsls	r5, r2, #29
 80016f6:	d1e2      	bne.n	80016be <__aeabi_i2f+0x4e>
 80016f8:	08ca      	lsrs	r2, r1, #3
 80016fa:	0252      	lsls	r2, r2, #9
 80016fc:	0a55      	lsrs	r5, r2, #9
 80016fe:	b2d8      	uxtb	r0, r3
 8001700:	e7cf      	b.n	80016a2 <__aeabi_i2f+0x32>
 8001702:	026d      	lsls	r5, r5, #9
 8001704:	0a6d      	lsrs	r5, r5, #9
 8001706:	308e      	adds	r0, #142	@ 0x8e
 8001708:	e7cb      	b.n	80016a2 <__aeabi_i2f+0x32>
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	fbffffff 	.word	0xfbffffff

08001710 <__aeabi_ui2f>:
 8001710:	b510      	push	{r4, lr}
 8001712:	1e04      	subs	r4, r0, #0
 8001714:	d00d      	beq.n	8001732 <__aeabi_ui2f+0x22>
 8001716:	f002 f829 	bl	800376c <__clzsi2>
 800171a:	239e      	movs	r3, #158	@ 0x9e
 800171c:	1a1b      	subs	r3, r3, r0
 800171e:	2b96      	cmp	r3, #150	@ 0x96
 8001720:	dc0c      	bgt.n	800173c <__aeabi_ui2f+0x2c>
 8001722:	2808      	cmp	r0, #8
 8001724:	d034      	beq.n	8001790 <__aeabi_ui2f+0x80>
 8001726:	3808      	subs	r0, #8
 8001728:	4084      	lsls	r4, r0
 800172a:	0264      	lsls	r4, r4, #9
 800172c:	0a64      	lsrs	r4, r4, #9
 800172e:	b2d8      	uxtb	r0, r3
 8001730:	e001      	b.n	8001736 <__aeabi_ui2f+0x26>
 8001732:	2000      	movs	r0, #0
 8001734:	2400      	movs	r4, #0
 8001736:	05c0      	lsls	r0, r0, #23
 8001738:	4320      	orrs	r0, r4
 800173a:	bd10      	pop	{r4, pc}
 800173c:	2b99      	cmp	r3, #153	@ 0x99
 800173e:	dc13      	bgt.n	8001768 <__aeabi_ui2f+0x58>
 8001740:	1f42      	subs	r2, r0, #5
 8001742:	4094      	lsls	r4, r2
 8001744:	4a14      	ldr	r2, [pc, #80]	@ (8001798 <__aeabi_ui2f+0x88>)
 8001746:	4022      	ands	r2, r4
 8001748:	0761      	lsls	r1, r4, #29
 800174a:	d01c      	beq.n	8001786 <__aeabi_ui2f+0x76>
 800174c:	210f      	movs	r1, #15
 800174e:	4021      	ands	r1, r4
 8001750:	2904      	cmp	r1, #4
 8001752:	d018      	beq.n	8001786 <__aeabi_ui2f+0x76>
 8001754:	3204      	adds	r2, #4
 8001756:	08d4      	lsrs	r4, r2, #3
 8001758:	0152      	lsls	r2, r2, #5
 800175a:	d515      	bpl.n	8001788 <__aeabi_ui2f+0x78>
 800175c:	239f      	movs	r3, #159	@ 0x9f
 800175e:	0264      	lsls	r4, r4, #9
 8001760:	1a18      	subs	r0, r3, r0
 8001762:	0a64      	lsrs	r4, r4, #9
 8001764:	b2c0      	uxtb	r0, r0
 8001766:	e7e6      	b.n	8001736 <__aeabi_ui2f+0x26>
 8001768:	0002      	movs	r2, r0
 800176a:	0021      	movs	r1, r4
 800176c:	321b      	adds	r2, #27
 800176e:	4091      	lsls	r1, r2
 8001770:	000a      	movs	r2, r1
 8001772:	1e51      	subs	r1, r2, #1
 8001774:	418a      	sbcs	r2, r1
 8001776:	2105      	movs	r1, #5
 8001778:	1a09      	subs	r1, r1, r0
 800177a:	40cc      	lsrs	r4, r1
 800177c:	4314      	orrs	r4, r2
 800177e:	4a06      	ldr	r2, [pc, #24]	@ (8001798 <__aeabi_ui2f+0x88>)
 8001780:	4022      	ands	r2, r4
 8001782:	0761      	lsls	r1, r4, #29
 8001784:	d1e2      	bne.n	800174c <__aeabi_ui2f+0x3c>
 8001786:	08d4      	lsrs	r4, r2, #3
 8001788:	0264      	lsls	r4, r4, #9
 800178a:	0a64      	lsrs	r4, r4, #9
 800178c:	b2d8      	uxtb	r0, r3
 800178e:	e7d2      	b.n	8001736 <__aeabi_ui2f+0x26>
 8001790:	0264      	lsls	r4, r4, #9
 8001792:	0a64      	lsrs	r4, r4, #9
 8001794:	308e      	adds	r0, #142	@ 0x8e
 8001796:	e7ce      	b.n	8001736 <__aeabi_ui2f+0x26>
 8001798:	fbffffff 	.word	0xfbffffff

0800179c <__aeabi_dadd>:
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179e:	464f      	mov	r7, r9
 80017a0:	4646      	mov	r6, r8
 80017a2:	46d6      	mov	lr, sl
 80017a4:	b5c0      	push	{r6, r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	9000      	str	r0, [sp, #0]
 80017aa:	9101      	str	r1, [sp, #4]
 80017ac:	030e      	lsls	r6, r1, #12
 80017ae:	004c      	lsls	r4, r1, #1
 80017b0:	0fcd      	lsrs	r5, r1, #31
 80017b2:	0a71      	lsrs	r1, r6, #9
 80017b4:	9e00      	ldr	r6, [sp, #0]
 80017b6:	005f      	lsls	r7, r3, #1
 80017b8:	0f76      	lsrs	r6, r6, #29
 80017ba:	430e      	orrs	r6, r1
 80017bc:	9900      	ldr	r1, [sp, #0]
 80017be:	9200      	str	r2, [sp, #0]
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	00c9      	lsls	r1, r1, #3
 80017c4:	4689      	mov	r9, r1
 80017c6:	0319      	lsls	r1, r3, #12
 80017c8:	0d7b      	lsrs	r3, r7, #21
 80017ca:	4698      	mov	r8, r3
 80017cc:	9b01      	ldr	r3, [sp, #4]
 80017ce:	0a49      	lsrs	r1, r1, #9
 80017d0:	0fdb      	lsrs	r3, r3, #31
 80017d2:	469c      	mov	ip, r3
 80017d4:	9b00      	ldr	r3, [sp, #0]
 80017d6:	9a00      	ldr	r2, [sp, #0]
 80017d8:	0f5b      	lsrs	r3, r3, #29
 80017da:	430b      	orrs	r3, r1
 80017dc:	4641      	mov	r1, r8
 80017de:	0d64      	lsrs	r4, r4, #21
 80017e0:	00d2      	lsls	r2, r2, #3
 80017e2:	1a61      	subs	r1, r4, r1
 80017e4:	4565      	cmp	r5, ip
 80017e6:	d100      	bne.n	80017ea <__aeabi_dadd+0x4e>
 80017e8:	e0a6      	b.n	8001938 <__aeabi_dadd+0x19c>
 80017ea:	2900      	cmp	r1, #0
 80017ec:	dd72      	ble.n	80018d4 <__aeabi_dadd+0x138>
 80017ee:	4647      	mov	r7, r8
 80017f0:	2f00      	cmp	r7, #0
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dadd+0x5a>
 80017f4:	e0dd      	b.n	80019b2 <__aeabi_dadd+0x216>
 80017f6:	4fcc      	ldr	r7, [pc, #816]	@ (8001b28 <__aeabi_dadd+0x38c>)
 80017f8:	42bc      	cmp	r4, r7
 80017fa:	d100      	bne.n	80017fe <__aeabi_dadd+0x62>
 80017fc:	e19a      	b.n	8001b34 <__aeabi_dadd+0x398>
 80017fe:	2701      	movs	r7, #1
 8001800:	2938      	cmp	r1, #56	@ 0x38
 8001802:	dc17      	bgt.n	8001834 <__aeabi_dadd+0x98>
 8001804:	2780      	movs	r7, #128	@ 0x80
 8001806:	043f      	lsls	r7, r7, #16
 8001808:	433b      	orrs	r3, r7
 800180a:	291f      	cmp	r1, #31
 800180c:	dd00      	ble.n	8001810 <__aeabi_dadd+0x74>
 800180e:	e1dd      	b.n	8001bcc <__aeabi_dadd+0x430>
 8001810:	2720      	movs	r7, #32
 8001812:	1a78      	subs	r0, r7, r1
 8001814:	001f      	movs	r7, r3
 8001816:	4087      	lsls	r7, r0
 8001818:	46ba      	mov	sl, r7
 800181a:	0017      	movs	r7, r2
 800181c:	40cf      	lsrs	r7, r1
 800181e:	4684      	mov	ip, r0
 8001820:	0038      	movs	r0, r7
 8001822:	4657      	mov	r7, sl
 8001824:	4307      	orrs	r7, r0
 8001826:	4660      	mov	r0, ip
 8001828:	4082      	lsls	r2, r0
 800182a:	40cb      	lsrs	r3, r1
 800182c:	1e50      	subs	r0, r2, #1
 800182e:	4182      	sbcs	r2, r0
 8001830:	1af6      	subs	r6, r6, r3
 8001832:	4317      	orrs	r7, r2
 8001834:	464b      	mov	r3, r9
 8001836:	1bdf      	subs	r7, r3, r7
 8001838:	45b9      	cmp	r9, r7
 800183a:	4180      	sbcs	r0, r0
 800183c:	4240      	negs	r0, r0
 800183e:	1a36      	subs	r6, r6, r0
 8001840:	0233      	lsls	r3, r6, #8
 8001842:	d400      	bmi.n	8001846 <__aeabi_dadd+0xaa>
 8001844:	e0ff      	b.n	8001a46 <__aeabi_dadd+0x2aa>
 8001846:	0276      	lsls	r6, r6, #9
 8001848:	0a76      	lsrs	r6, r6, #9
 800184a:	2e00      	cmp	r6, #0
 800184c:	d100      	bne.n	8001850 <__aeabi_dadd+0xb4>
 800184e:	e13c      	b.n	8001aca <__aeabi_dadd+0x32e>
 8001850:	0030      	movs	r0, r6
 8001852:	f001 ff8b 	bl	800376c <__clzsi2>
 8001856:	0003      	movs	r3, r0
 8001858:	3b08      	subs	r3, #8
 800185a:	2120      	movs	r1, #32
 800185c:	0038      	movs	r0, r7
 800185e:	1aca      	subs	r2, r1, r3
 8001860:	40d0      	lsrs	r0, r2
 8001862:	409e      	lsls	r6, r3
 8001864:	0002      	movs	r2, r0
 8001866:	409f      	lsls	r7, r3
 8001868:	4332      	orrs	r2, r6
 800186a:	429c      	cmp	r4, r3
 800186c:	dd00      	ble.n	8001870 <__aeabi_dadd+0xd4>
 800186e:	e1a6      	b.n	8001bbe <__aeabi_dadd+0x422>
 8001870:	1b18      	subs	r0, r3, r4
 8001872:	3001      	adds	r0, #1
 8001874:	1a09      	subs	r1, r1, r0
 8001876:	003e      	movs	r6, r7
 8001878:	408f      	lsls	r7, r1
 800187a:	40c6      	lsrs	r6, r0
 800187c:	1e7b      	subs	r3, r7, #1
 800187e:	419f      	sbcs	r7, r3
 8001880:	0013      	movs	r3, r2
 8001882:	408b      	lsls	r3, r1
 8001884:	4337      	orrs	r7, r6
 8001886:	431f      	orrs	r7, r3
 8001888:	40c2      	lsrs	r2, r0
 800188a:	003b      	movs	r3, r7
 800188c:	0016      	movs	r6, r2
 800188e:	2400      	movs	r4, #0
 8001890:	4313      	orrs	r3, r2
 8001892:	d100      	bne.n	8001896 <__aeabi_dadd+0xfa>
 8001894:	e1df      	b.n	8001c56 <__aeabi_dadd+0x4ba>
 8001896:	077b      	lsls	r3, r7, #29
 8001898:	d100      	bne.n	800189c <__aeabi_dadd+0x100>
 800189a:	e332      	b.n	8001f02 <__aeabi_dadd+0x766>
 800189c:	230f      	movs	r3, #15
 800189e:	003a      	movs	r2, r7
 80018a0:	403b      	ands	r3, r7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d004      	beq.n	80018b0 <__aeabi_dadd+0x114>
 80018a6:	1d3a      	adds	r2, r7, #4
 80018a8:	42ba      	cmp	r2, r7
 80018aa:	41bf      	sbcs	r7, r7
 80018ac:	427f      	negs	r7, r7
 80018ae:	19f6      	adds	r6, r6, r7
 80018b0:	0233      	lsls	r3, r6, #8
 80018b2:	d400      	bmi.n	80018b6 <__aeabi_dadd+0x11a>
 80018b4:	e323      	b.n	8001efe <__aeabi_dadd+0x762>
 80018b6:	4b9c      	ldr	r3, [pc, #624]	@ (8001b28 <__aeabi_dadd+0x38c>)
 80018b8:	3401      	adds	r4, #1
 80018ba:	429c      	cmp	r4, r3
 80018bc:	d100      	bne.n	80018c0 <__aeabi_dadd+0x124>
 80018be:	e0b4      	b.n	8001a2a <__aeabi_dadd+0x28e>
 80018c0:	4b9a      	ldr	r3, [pc, #616]	@ (8001b2c <__aeabi_dadd+0x390>)
 80018c2:	0564      	lsls	r4, r4, #21
 80018c4:	401e      	ands	r6, r3
 80018c6:	0d64      	lsrs	r4, r4, #21
 80018c8:	0777      	lsls	r7, r6, #29
 80018ca:	08d2      	lsrs	r2, r2, #3
 80018cc:	0276      	lsls	r6, r6, #9
 80018ce:	4317      	orrs	r7, r2
 80018d0:	0b36      	lsrs	r6, r6, #12
 80018d2:	e0ac      	b.n	8001a2e <__aeabi_dadd+0x292>
 80018d4:	2900      	cmp	r1, #0
 80018d6:	d100      	bne.n	80018da <__aeabi_dadd+0x13e>
 80018d8:	e07e      	b.n	80019d8 <__aeabi_dadd+0x23c>
 80018da:	4641      	mov	r1, r8
 80018dc:	1b09      	subs	r1, r1, r4
 80018de:	2c00      	cmp	r4, #0
 80018e0:	d000      	beq.n	80018e4 <__aeabi_dadd+0x148>
 80018e2:	e160      	b.n	8001ba6 <__aeabi_dadd+0x40a>
 80018e4:	0034      	movs	r4, r6
 80018e6:	4648      	mov	r0, r9
 80018e8:	4304      	orrs	r4, r0
 80018ea:	d100      	bne.n	80018ee <__aeabi_dadd+0x152>
 80018ec:	e1c9      	b.n	8001c82 <__aeabi_dadd+0x4e6>
 80018ee:	1e4c      	subs	r4, r1, #1
 80018f0:	2901      	cmp	r1, #1
 80018f2:	d100      	bne.n	80018f6 <__aeabi_dadd+0x15a>
 80018f4:	e22e      	b.n	8001d54 <__aeabi_dadd+0x5b8>
 80018f6:	4d8c      	ldr	r5, [pc, #560]	@ (8001b28 <__aeabi_dadd+0x38c>)
 80018f8:	42a9      	cmp	r1, r5
 80018fa:	d100      	bne.n	80018fe <__aeabi_dadd+0x162>
 80018fc:	e224      	b.n	8001d48 <__aeabi_dadd+0x5ac>
 80018fe:	2701      	movs	r7, #1
 8001900:	2c38      	cmp	r4, #56	@ 0x38
 8001902:	dc11      	bgt.n	8001928 <__aeabi_dadd+0x18c>
 8001904:	0021      	movs	r1, r4
 8001906:	291f      	cmp	r1, #31
 8001908:	dd00      	ble.n	800190c <__aeabi_dadd+0x170>
 800190a:	e20b      	b.n	8001d24 <__aeabi_dadd+0x588>
 800190c:	2420      	movs	r4, #32
 800190e:	0037      	movs	r7, r6
 8001910:	4648      	mov	r0, r9
 8001912:	1a64      	subs	r4, r4, r1
 8001914:	40a7      	lsls	r7, r4
 8001916:	40c8      	lsrs	r0, r1
 8001918:	4307      	orrs	r7, r0
 800191a:	4648      	mov	r0, r9
 800191c:	40a0      	lsls	r0, r4
 800191e:	40ce      	lsrs	r6, r1
 8001920:	1e44      	subs	r4, r0, #1
 8001922:	41a0      	sbcs	r0, r4
 8001924:	1b9b      	subs	r3, r3, r6
 8001926:	4307      	orrs	r7, r0
 8001928:	1bd7      	subs	r7, r2, r7
 800192a:	42ba      	cmp	r2, r7
 800192c:	4192      	sbcs	r2, r2
 800192e:	4252      	negs	r2, r2
 8001930:	4665      	mov	r5, ip
 8001932:	4644      	mov	r4, r8
 8001934:	1a9e      	subs	r6, r3, r2
 8001936:	e783      	b.n	8001840 <__aeabi_dadd+0xa4>
 8001938:	2900      	cmp	r1, #0
 800193a:	dc00      	bgt.n	800193e <__aeabi_dadd+0x1a2>
 800193c:	e09c      	b.n	8001a78 <__aeabi_dadd+0x2dc>
 800193e:	4647      	mov	r7, r8
 8001940:	2f00      	cmp	r7, #0
 8001942:	d167      	bne.n	8001a14 <__aeabi_dadd+0x278>
 8001944:	001f      	movs	r7, r3
 8001946:	4317      	orrs	r7, r2
 8001948:	d100      	bne.n	800194c <__aeabi_dadd+0x1b0>
 800194a:	e0e4      	b.n	8001b16 <__aeabi_dadd+0x37a>
 800194c:	1e48      	subs	r0, r1, #1
 800194e:	2901      	cmp	r1, #1
 8001950:	d100      	bne.n	8001954 <__aeabi_dadd+0x1b8>
 8001952:	e19b      	b.n	8001c8c <__aeabi_dadd+0x4f0>
 8001954:	4f74      	ldr	r7, [pc, #464]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001956:	42b9      	cmp	r1, r7
 8001958:	d100      	bne.n	800195c <__aeabi_dadd+0x1c0>
 800195a:	e0eb      	b.n	8001b34 <__aeabi_dadd+0x398>
 800195c:	2701      	movs	r7, #1
 800195e:	0001      	movs	r1, r0
 8001960:	2838      	cmp	r0, #56	@ 0x38
 8001962:	dc11      	bgt.n	8001988 <__aeabi_dadd+0x1ec>
 8001964:	291f      	cmp	r1, #31
 8001966:	dd00      	ble.n	800196a <__aeabi_dadd+0x1ce>
 8001968:	e1c7      	b.n	8001cfa <__aeabi_dadd+0x55e>
 800196a:	2720      	movs	r7, #32
 800196c:	1a78      	subs	r0, r7, r1
 800196e:	001f      	movs	r7, r3
 8001970:	4684      	mov	ip, r0
 8001972:	4087      	lsls	r7, r0
 8001974:	0010      	movs	r0, r2
 8001976:	40c8      	lsrs	r0, r1
 8001978:	4307      	orrs	r7, r0
 800197a:	4660      	mov	r0, ip
 800197c:	4082      	lsls	r2, r0
 800197e:	40cb      	lsrs	r3, r1
 8001980:	1e50      	subs	r0, r2, #1
 8001982:	4182      	sbcs	r2, r0
 8001984:	18f6      	adds	r6, r6, r3
 8001986:	4317      	orrs	r7, r2
 8001988:	444f      	add	r7, r9
 800198a:	454f      	cmp	r7, r9
 800198c:	4180      	sbcs	r0, r0
 800198e:	4240      	negs	r0, r0
 8001990:	1836      	adds	r6, r6, r0
 8001992:	0233      	lsls	r3, r6, #8
 8001994:	d557      	bpl.n	8001a46 <__aeabi_dadd+0x2aa>
 8001996:	4b64      	ldr	r3, [pc, #400]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001998:	3401      	adds	r4, #1
 800199a:	429c      	cmp	r4, r3
 800199c:	d045      	beq.n	8001a2a <__aeabi_dadd+0x28e>
 800199e:	2101      	movs	r1, #1
 80019a0:	4b62      	ldr	r3, [pc, #392]	@ (8001b2c <__aeabi_dadd+0x390>)
 80019a2:	087a      	lsrs	r2, r7, #1
 80019a4:	401e      	ands	r6, r3
 80019a6:	4039      	ands	r1, r7
 80019a8:	430a      	orrs	r2, r1
 80019aa:	07f7      	lsls	r7, r6, #31
 80019ac:	4317      	orrs	r7, r2
 80019ae:	0876      	lsrs	r6, r6, #1
 80019b0:	e771      	b.n	8001896 <__aeabi_dadd+0xfa>
 80019b2:	001f      	movs	r7, r3
 80019b4:	4317      	orrs	r7, r2
 80019b6:	d100      	bne.n	80019ba <__aeabi_dadd+0x21e>
 80019b8:	e0ad      	b.n	8001b16 <__aeabi_dadd+0x37a>
 80019ba:	1e4f      	subs	r7, r1, #1
 80019bc:	46bc      	mov	ip, r7
 80019be:	2901      	cmp	r1, #1
 80019c0:	d100      	bne.n	80019c4 <__aeabi_dadd+0x228>
 80019c2:	e182      	b.n	8001cca <__aeabi_dadd+0x52e>
 80019c4:	4f58      	ldr	r7, [pc, #352]	@ (8001b28 <__aeabi_dadd+0x38c>)
 80019c6:	42b9      	cmp	r1, r7
 80019c8:	d100      	bne.n	80019cc <__aeabi_dadd+0x230>
 80019ca:	e190      	b.n	8001cee <__aeabi_dadd+0x552>
 80019cc:	4661      	mov	r1, ip
 80019ce:	2701      	movs	r7, #1
 80019d0:	2938      	cmp	r1, #56	@ 0x38
 80019d2:	dd00      	ble.n	80019d6 <__aeabi_dadd+0x23a>
 80019d4:	e72e      	b.n	8001834 <__aeabi_dadd+0x98>
 80019d6:	e718      	b.n	800180a <__aeabi_dadd+0x6e>
 80019d8:	4f55      	ldr	r7, [pc, #340]	@ (8001b30 <__aeabi_dadd+0x394>)
 80019da:	1c61      	adds	r1, r4, #1
 80019dc:	4239      	tst	r1, r7
 80019de:	d000      	beq.n	80019e2 <__aeabi_dadd+0x246>
 80019e0:	e0d0      	b.n	8001b84 <__aeabi_dadd+0x3e8>
 80019e2:	0031      	movs	r1, r6
 80019e4:	4648      	mov	r0, r9
 80019e6:	001f      	movs	r7, r3
 80019e8:	4301      	orrs	r1, r0
 80019ea:	4317      	orrs	r7, r2
 80019ec:	2c00      	cmp	r4, #0
 80019ee:	d000      	beq.n	80019f2 <__aeabi_dadd+0x256>
 80019f0:	e13d      	b.n	8001c6e <__aeabi_dadd+0x4d2>
 80019f2:	2900      	cmp	r1, #0
 80019f4:	d100      	bne.n	80019f8 <__aeabi_dadd+0x25c>
 80019f6:	e1bc      	b.n	8001d72 <__aeabi_dadd+0x5d6>
 80019f8:	2f00      	cmp	r7, #0
 80019fa:	d000      	beq.n	80019fe <__aeabi_dadd+0x262>
 80019fc:	e1bf      	b.n	8001d7e <__aeabi_dadd+0x5e2>
 80019fe:	464b      	mov	r3, r9
 8001a00:	2100      	movs	r1, #0
 8001a02:	08d8      	lsrs	r0, r3, #3
 8001a04:	0777      	lsls	r7, r6, #29
 8001a06:	4307      	orrs	r7, r0
 8001a08:	08f0      	lsrs	r0, r6, #3
 8001a0a:	0306      	lsls	r6, r0, #12
 8001a0c:	054c      	lsls	r4, r1, #21
 8001a0e:	0b36      	lsrs	r6, r6, #12
 8001a10:	0d64      	lsrs	r4, r4, #21
 8001a12:	e00c      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001a14:	4f44      	ldr	r7, [pc, #272]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001a16:	42bc      	cmp	r4, r7
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dadd+0x280>
 8001a1a:	e08b      	b.n	8001b34 <__aeabi_dadd+0x398>
 8001a1c:	2701      	movs	r7, #1
 8001a1e:	2938      	cmp	r1, #56	@ 0x38
 8001a20:	dcb2      	bgt.n	8001988 <__aeabi_dadd+0x1ec>
 8001a22:	2780      	movs	r7, #128	@ 0x80
 8001a24:	043f      	lsls	r7, r7, #16
 8001a26:	433b      	orrs	r3, r7
 8001a28:	e79c      	b.n	8001964 <__aeabi_dadd+0x1c8>
 8001a2a:	2600      	movs	r6, #0
 8001a2c:	2700      	movs	r7, #0
 8001a2e:	0524      	lsls	r4, r4, #20
 8001a30:	4334      	orrs	r4, r6
 8001a32:	07ed      	lsls	r5, r5, #31
 8001a34:	432c      	orrs	r4, r5
 8001a36:	0038      	movs	r0, r7
 8001a38:	0021      	movs	r1, r4
 8001a3a:	b002      	add	sp, #8
 8001a3c:	bce0      	pop	{r5, r6, r7}
 8001a3e:	46ba      	mov	sl, r7
 8001a40:	46b1      	mov	r9, r6
 8001a42:	46a8      	mov	r8, r5
 8001a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a46:	077b      	lsls	r3, r7, #29
 8001a48:	d004      	beq.n	8001a54 <__aeabi_dadd+0x2b8>
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	403b      	ands	r3, r7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d000      	beq.n	8001a54 <__aeabi_dadd+0x2b8>
 8001a52:	e728      	b.n	80018a6 <__aeabi_dadd+0x10a>
 8001a54:	08f8      	lsrs	r0, r7, #3
 8001a56:	4b34      	ldr	r3, [pc, #208]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001a58:	0777      	lsls	r7, r6, #29
 8001a5a:	4307      	orrs	r7, r0
 8001a5c:	08f0      	lsrs	r0, r6, #3
 8001a5e:	429c      	cmp	r4, r3
 8001a60:	d000      	beq.n	8001a64 <__aeabi_dadd+0x2c8>
 8001a62:	e24a      	b.n	8001efa <__aeabi_dadd+0x75e>
 8001a64:	003b      	movs	r3, r7
 8001a66:	4303      	orrs	r3, r0
 8001a68:	d059      	beq.n	8001b1e <__aeabi_dadd+0x382>
 8001a6a:	2680      	movs	r6, #128	@ 0x80
 8001a6c:	0336      	lsls	r6, r6, #12
 8001a6e:	4306      	orrs	r6, r0
 8001a70:	0336      	lsls	r6, r6, #12
 8001a72:	4c2d      	ldr	r4, [pc, #180]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001a74:	0b36      	lsrs	r6, r6, #12
 8001a76:	e7da      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001a78:	2900      	cmp	r1, #0
 8001a7a:	d061      	beq.n	8001b40 <__aeabi_dadd+0x3a4>
 8001a7c:	4641      	mov	r1, r8
 8001a7e:	1b09      	subs	r1, r1, r4
 8001a80:	2c00      	cmp	r4, #0
 8001a82:	d100      	bne.n	8001a86 <__aeabi_dadd+0x2ea>
 8001a84:	e0b9      	b.n	8001bfa <__aeabi_dadd+0x45e>
 8001a86:	4c28      	ldr	r4, [pc, #160]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001a88:	45a0      	cmp	r8, r4
 8001a8a:	d100      	bne.n	8001a8e <__aeabi_dadd+0x2f2>
 8001a8c:	e1a5      	b.n	8001dda <__aeabi_dadd+0x63e>
 8001a8e:	2701      	movs	r7, #1
 8001a90:	2938      	cmp	r1, #56	@ 0x38
 8001a92:	dc13      	bgt.n	8001abc <__aeabi_dadd+0x320>
 8001a94:	2480      	movs	r4, #128	@ 0x80
 8001a96:	0424      	lsls	r4, r4, #16
 8001a98:	4326      	orrs	r6, r4
 8001a9a:	291f      	cmp	r1, #31
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dadd+0x304>
 8001a9e:	e1c8      	b.n	8001e32 <__aeabi_dadd+0x696>
 8001aa0:	2420      	movs	r4, #32
 8001aa2:	0037      	movs	r7, r6
 8001aa4:	4648      	mov	r0, r9
 8001aa6:	1a64      	subs	r4, r4, r1
 8001aa8:	40a7      	lsls	r7, r4
 8001aaa:	40c8      	lsrs	r0, r1
 8001aac:	4307      	orrs	r7, r0
 8001aae:	4648      	mov	r0, r9
 8001ab0:	40a0      	lsls	r0, r4
 8001ab2:	40ce      	lsrs	r6, r1
 8001ab4:	1e44      	subs	r4, r0, #1
 8001ab6:	41a0      	sbcs	r0, r4
 8001ab8:	199b      	adds	r3, r3, r6
 8001aba:	4307      	orrs	r7, r0
 8001abc:	18bf      	adds	r7, r7, r2
 8001abe:	4297      	cmp	r7, r2
 8001ac0:	4192      	sbcs	r2, r2
 8001ac2:	4252      	negs	r2, r2
 8001ac4:	4644      	mov	r4, r8
 8001ac6:	18d6      	adds	r6, r2, r3
 8001ac8:	e763      	b.n	8001992 <__aeabi_dadd+0x1f6>
 8001aca:	0038      	movs	r0, r7
 8001acc:	f001 fe4e 	bl	800376c <__clzsi2>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	3318      	adds	r3, #24
 8001ad4:	2b1f      	cmp	r3, #31
 8001ad6:	dc00      	bgt.n	8001ada <__aeabi_dadd+0x33e>
 8001ad8:	e6bf      	b.n	800185a <__aeabi_dadd+0xbe>
 8001ada:	003a      	movs	r2, r7
 8001adc:	3808      	subs	r0, #8
 8001ade:	4082      	lsls	r2, r0
 8001ae0:	429c      	cmp	r4, r3
 8001ae2:	dd00      	ble.n	8001ae6 <__aeabi_dadd+0x34a>
 8001ae4:	e083      	b.n	8001bee <__aeabi_dadd+0x452>
 8001ae6:	1b1b      	subs	r3, r3, r4
 8001ae8:	1c58      	adds	r0, r3, #1
 8001aea:	281f      	cmp	r0, #31
 8001aec:	dc00      	bgt.n	8001af0 <__aeabi_dadd+0x354>
 8001aee:	e1b4      	b.n	8001e5a <__aeabi_dadd+0x6be>
 8001af0:	0017      	movs	r7, r2
 8001af2:	3b1f      	subs	r3, #31
 8001af4:	40df      	lsrs	r7, r3
 8001af6:	2820      	cmp	r0, #32
 8001af8:	d005      	beq.n	8001b06 <__aeabi_dadd+0x36a>
 8001afa:	2340      	movs	r3, #64	@ 0x40
 8001afc:	1a1b      	subs	r3, r3, r0
 8001afe:	409a      	lsls	r2, r3
 8001b00:	1e53      	subs	r3, r2, #1
 8001b02:	419a      	sbcs	r2, r3
 8001b04:	4317      	orrs	r7, r2
 8001b06:	2400      	movs	r4, #0
 8001b08:	2f00      	cmp	r7, #0
 8001b0a:	d00a      	beq.n	8001b22 <__aeabi_dadd+0x386>
 8001b0c:	077b      	lsls	r3, r7, #29
 8001b0e:	d000      	beq.n	8001b12 <__aeabi_dadd+0x376>
 8001b10:	e6c4      	b.n	800189c <__aeabi_dadd+0x100>
 8001b12:	0026      	movs	r6, r4
 8001b14:	e79e      	b.n	8001a54 <__aeabi_dadd+0x2b8>
 8001b16:	464b      	mov	r3, r9
 8001b18:	000c      	movs	r4, r1
 8001b1a:	08d8      	lsrs	r0, r3, #3
 8001b1c:	e79b      	b.n	8001a56 <__aeabi_dadd+0x2ba>
 8001b1e:	2700      	movs	r7, #0
 8001b20:	4c01      	ldr	r4, [pc, #4]	@ (8001b28 <__aeabi_dadd+0x38c>)
 8001b22:	2600      	movs	r6, #0
 8001b24:	e783      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	000007ff 	.word	0x000007ff
 8001b2c:	ff7fffff 	.word	0xff7fffff
 8001b30:	000007fe 	.word	0x000007fe
 8001b34:	464b      	mov	r3, r9
 8001b36:	0777      	lsls	r7, r6, #29
 8001b38:	08d8      	lsrs	r0, r3, #3
 8001b3a:	4307      	orrs	r7, r0
 8001b3c:	08f0      	lsrs	r0, r6, #3
 8001b3e:	e791      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001b40:	4fcd      	ldr	r7, [pc, #820]	@ (8001e78 <__aeabi_dadd+0x6dc>)
 8001b42:	1c61      	adds	r1, r4, #1
 8001b44:	4239      	tst	r1, r7
 8001b46:	d16b      	bne.n	8001c20 <__aeabi_dadd+0x484>
 8001b48:	0031      	movs	r1, r6
 8001b4a:	4648      	mov	r0, r9
 8001b4c:	4301      	orrs	r1, r0
 8001b4e:	2c00      	cmp	r4, #0
 8001b50:	d000      	beq.n	8001b54 <__aeabi_dadd+0x3b8>
 8001b52:	e14b      	b.n	8001dec <__aeabi_dadd+0x650>
 8001b54:	001f      	movs	r7, r3
 8001b56:	4317      	orrs	r7, r2
 8001b58:	2900      	cmp	r1, #0
 8001b5a:	d100      	bne.n	8001b5e <__aeabi_dadd+0x3c2>
 8001b5c:	e181      	b.n	8001e62 <__aeabi_dadd+0x6c6>
 8001b5e:	2f00      	cmp	r7, #0
 8001b60:	d100      	bne.n	8001b64 <__aeabi_dadd+0x3c8>
 8001b62:	e74c      	b.n	80019fe <__aeabi_dadd+0x262>
 8001b64:	444a      	add	r2, r9
 8001b66:	454a      	cmp	r2, r9
 8001b68:	4180      	sbcs	r0, r0
 8001b6a:	18f6      	adds	r6, r6, r3
 8001b6c:	4240      	negs	r0, r0
 8001b6e:	1836      	adds	r6, r6, r0
 8001b70:	0233      	lsls	r3, r6, #8
 8001b72:	d500      	bpl.n	8001b76 <__aeabi_dadd+0x3da>
 8001b74:	e1b0      	b.n	8001ed8 <__aeabi_dadd+0x73c>
 8001b76:	0017      	movs	r7, r2
 8001b78:	4691      	mov	r9, r2
 8001b7a:	4337      	orrs	r7, r6
 8001b7c:	d000      	beq.n	8001b80 <__aeabi_dadd+0x3e4>
 8001b7e:	e73e      	b.n	80019fe <__aeabi_dadd+0x262>
 8001b80:	2600      	movs	r6, #0
 8001b82:	e754      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001b84:	4649      	mov	r1, r9
 8001b86:	1a89      	subs	r1, r1, r2
 8001b88:	4688      	mov	r8, r1
 8001b8a:	45c1      	cmp	r9, r8
 8001b8c:	41bf      	sbcs	r7, r7
 8001b8e:	1af1      	subs	r1, r6, r3
 8001b90:	427f      	negs	r7, r7
 8001b92:	1bc9      	subs	r1, r1, r7
 8001b94:	020f      	lsls	r7, r1, #8
 8001b96:	d461      	bmi.n	8001c5c <__aeabi_dadd+0x4c0>
 8001b98:	4647      	mov	r7, r8
 8001b9a:	430f      	orrs	r7, r1
 8001b9c:	d100      	bne.n	8001ba0 <__aeabi_dadd+0x404>
 8001b9e:	e0bd      	b.n	8001d1c <__aeabi_dadd+0x580>
 8001ba0:	000e      	movs	r6, r1
 8001ba2:	4647      	mov	r7, r8
 8001ba4:	e651      	b.n	800184a <__aeabi_dadd+0xae>
 8001ba6:	4cb5      	ldr	r4, [pc, #724]	@ (8001e7c <__aeabi_dadd+0x6e0>)
 8001ba8:	45a0      	cmp	r8, r4
 8001baa:	d100      	bne.n	8001bae <__aeabi_dadd+0x412>
 8001bac:	e100      	b.n	8001db0 <__aeabi_dadd+0x614>
 8001bae:	2701      	movs	r7, #1
 8001bb0:	2938      	cmp	r1, #56	@ 0x38
 8001bb2:	dd00      	ble.n	8001bb6 <__aeabi_dadd+0x41a>
 8001bb4:	e6b8      	b.n	8001928 <__aeabi_dadd+0x18c>
 8001bb6:	2480      	movs	r4, #128	@ 0x80
 8001bb8:	0424      	lsls	r4, r4, #16
 8001bba:	4326      	orrs	r6, r4
 8001bbc:	e6a3      	b.n	8001906 <__aeabi_dadd+0x16a>
 8001bbe:	4eb0      	ldr	r6, [pc, #704]	@ (8001e80 <__aeabi_dadd+0x6e4>)
 8001bc0:	1ae4      	subs	r4, r4, r3
 8001bc2:	4016      	ands	r6, r2
 8001bc4:	077b      	lsls	r3, r7, #29
 8001bc6:	d000      	beq.n	8001bca <__aeabi_dadd+0x42e>
 8001bc8:	e73f      	b.n	8001a4a <__aeabi_dadd+0x2ae>
 8001bca:	e743      	b.n	8001a54 <__aeabi_dadd+0x2b8>
 8001bcc:	000f      	movs	r7, r1
 8001bce:	0018      	movs	r0, r3
 8001bd0:	3f20      	subs	r7, #32
 8001bd2:	40f8      	lsrs	r0, r7
 8001bd4:	4684      	mov	ip, r0
 8001bd6:	2920      	cmp	r1, #32
 8001bd8:	d003      	beq.n	8001be2 <__aeabi_dadd+0x446>
 8001bda:	2740      	movs	r7, #64	@ 0x40
 8001bdc:	1a79      	subs	r1, r7, r1
 8001bde:	408b      	lsls	r3, r1
 8001be0:	431a      	orrs	r2, r3
 8001be2:	1e53      	subs	r3, r2, #1
 8001be4:	419a      	sbcs	r2, r3
 8001be6:	4663      	mov	r3, ip
 8001be8:	0017      	movs	r7, r2
 8001bea:	431f      	orrs	r7, r3
 8001bec:	e622      	b.n	8001834 <__aeabi_dadd+0x98>
 8001bee:	48a4      	ldr	r0, [pc, #656]	@ (8001e80 <__aeabi_dadd+0x6e4>)
 8001bf0:	1ae1      	subs	r1, r4, r3
 8001bf2:	4010      	ands	r0, r2
 8001bf4:	0747      	lsls	r7, r0, #29
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	e707      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001bfa:	0034      	movs	r4, r6
 8001bfc:	4648      	mov	r0, r9
 8001bfe:	4304      	orrs	r4, r0
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dadd+0x468>
 8001c02:	e0fa      	b.n	8001dfa <__aeabi_dadd+0x65e>
 8001c04:	1e4c      	subs	r4, r1, #1
 8001c06:	2901      	cmp	r1, #1
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dadd+0x470>
 8001c0a:	e0d7      	b.n	8001dbc <__aeabi_dadd+0x620>
 8001c0c:	4f9b      	ldr	r7, [pc, #620]	@ (8001e7c <__aeabi_dadd+0x6e0>)
 8001c0e:	42b9      	cmp	r1, r7
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dadd+0x478>
 8001c12:	e0e2      	b.n	8001dda <__aeabi_dadd+0x63e>
 8001c14:	2701      	movs	r7, #1
 8001c16:	2c38      	cmp	r4, #56	@ 0x38
 8001c18:	dd00      	ble.n	8001c1c <__aeabi_dadd+0x480>
 8001c1a:	e74f      	b.n	8001abc <__aeabi_dadd+0x320>
 8001c1c:	0021      	movs	r1, r4
 8001c1e:	e73c      	b.n	8001a9a <__aeabi_dadd+0x2fe>
 8001c20:	4c96      	ldr	r4, [pc, #600]	@ (8001e7c <__aeabi_dadd+0x6e0>)
 8001c22:	42a1      	cmp	r1, r4
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dadd+0x48c>
 8001c26:	e0dd      	b.n	8001de4 <__aeabi_dadd+0x648>
 8001c28:	444a      	add	r2, r9
 8001c2a:	454a      	cmp	r2, r9
 8001c2c:	4180      	sbcs	r0, r0
 8001c2e:	18f3      	adds	r3, r6, r3
 8001c30:	4240      	negs	r0, r0
 8001c32:	1818      	adds	r0, r3, r0
 8001c34:	07c7      	lsls	r7, r0, #31
 8001c36:	0852      	lsrs	r2, r2, #1
 8001c38:	4317      	orrs	r7, r2
 8001c3a:	0846      	lsrs	r6, r0, #1
 8001c3c:	0752      	lsls	r2, r2, #29
 8001c3e:	d005      	beq.n	8001c4c <__aeabi_dadd+0x4b0>
 8001c40:	220f      	movs	r2, #15
 8001c42:	000c      	movs	r4, r1
 8001c44:	403a      	ands	r2, r7
 8001c46:	2a04      	cmp	r2, #4
 8001c48:	d000      	beq.n	8001c4c <__aeabi_dadd+0x4b0>
 8001c4a:	e62c      	b.n	80018a6 <__aeabi_dadd+0x10a>
 8001c4c:	0776      	lsls	r6, r6, #29
 8001c4e:	08ff      	lsrs	r7, r7, #3
 8001c50:	4337      	orrs	r7, r6
 8001c52:	0900      	lsrs	r0, r0, #4
 8001c54:	e6d9      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001c56:	2700      	movs	r7, #0
 8001c58:	2600      	movs	r6, #0
 8001c5a:	e6e8      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001c5c:	4649      	mov	r1, r9
 8001c5e:	1a57      	subs	r7, r2, r1
 8001c60:	42ba      	cmp	r2, r7
 8001c62:	4192      	sbcs	r2, r2
 8001c64:	1b9e      	subs	r6, r3, r6
 8001c66:	4252      	negs	r2, r2
 8001c68:	4665      	mov	r5, ip
 8001c6a:	1ab6      	subs	r6, r6, r2
 8001c6c:	e5ed      	b.n	800184a <__aeabi_dadd+0xae>
 8001c6e:	2900      	cmp	r1, #0
 8001c70:	d000      	beq.n	8001c74 <__aeabi_dadd+0x4d8>
 8001c72:	e0c6      	b.n	8001e02 <__aeabi_dadd+0x666>
 8001c74:	2f00      	cmp	r7, #0
 8001c76:	d167      	bne.n	8001d48 <__aeabi_dadd+0x5ac>
 8001c78:	2680      	movs	r6, #128	@ 0x80
 8001c7a:	2500      	movs	r5, #0
 8001c7c:	4c7f      	ldr	r4, [pc, #508]	@ (8001e7c <__aeabi_dadd+0x6e0>)
 8001c7e:	0336      	lsls	r6, r6, #12
 8001c80:	e6d5      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001c82:	4665      	mov	r5, ip
 8001c84:	000c      	movs	r4, r1
 8001c86:	001e      	movs	r6, r3
 8001c88:	08d0      	lsrs	r0, r2, #3
 8001c8a:	e6e4      	b.n	8001a56 <__aeabi_dadd+0x2ba>
 8001c8c:	444a      	add	r2, r9
 8001c8e:	454a      	cmp	r2, r9
 8001c90:	4180      	sbcs	r0, r0
 8001c92:	18f3      	adds	r3, r6, r3
 8001c94:	4240      	negs	r0, r0
 8001c96:	1818      	adds	r0, r3, r0
 8001c98:	0011      	movs	r1, r2
 8001c9a:	0203      	lsls	r3, r0, #8
 8001c9c:	d400      	bmi.n	8001ca0 <__aeabi_dadd+0x504>
 8001c9e:	e096      	b.n	8001dce <__aeabi_dadd+0x632>
 8001ca0:	4b77      	ldr	r3, [pc, #476]	@ (8001e80 <__aeabi_dadd+0x6e4>)
 8001ca2:	0849      	lsrs	r1, r1, #1
 8001ca4:	4018      	ands	r0, r3
 8001ca6:	07c3      	lsls	r3, r0, #31
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	0844      	lsrs	r4, r0, #1
 8001cac:	0749      	lsls	r1, r1, #29
 8001cae:	d100      	bne.n	8001cb2 <__aeabi_dadd+0x516>
 8001cb0:	e129      	b.n	8001f06 <__aeabi_dadd+0x76a>
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	2a04      	cmp	r2, #4
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dadd+0x520>
 8001cba:	e0ea      	b.n	8001e92 <__aeabi_dadd+0x6f6>
 8001cbc:	1d1f      	adds	r7, r3, #4
 8001cbe:	429f      	cmp	r7, r3
 8001cc0:	41b6      	sbcs	r6, r6
 8001cc2:	4276      	negs	r6, r6
 8001cc4:	1936      	adds	r6, r6, r4
 8001cc6:	2402      	movs	r4, #2
 8001cc8:	e6c4      	b.n	8001a54 <__aeabi_dadd+0x2b8>
 8001cca:	4649      	mov	r1, r9
 8001ccc:	1a8f      	subs	r7, r1, r2
 8001cce:	45b9      	cmp	r9, r7
 8001cd0:	4180      	sbcs	r0, r0
 8001cd2:	1af6      	subs	r6, r6, r3
 8001cd4:	4240      	negs	r0, r0
 8001cd6:	1a36      	subs	r6, r6, r0
 8001cd8:	0233      	lsls	r3, r6, #8
 8001cda:	d406      	bmi.n	8001cea <__aeabi_dadd+0x54e>
 8001cdc:	0773      	lsls	r3, r6, #29
 8001cde:	08ff      	lsrs	r7, r7, #3
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	431f      	orrs	r7, r3
 8001ce4:	08f0      	lsrs	r0, r6, #3
 8001ce6:	e690      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001ce8:	4665      	mov	r5, ip
 8001cea:	2401      	movs	r4, #1
 8001cec:	e5ab      	b.n	8001846 <__aeabi_dadd+0xaa>
 8001cee:	464b      	mov	r3, r9
 8001cf0:	0777      	lsls	r7, r6, #29
 8001cf2:	08d8      	lsrs	r0, r3, #3
 8001cf4:	4307      	orrs	r7, r0
 8001cf6:	08f0      	lsrs	r0, r6, #3
 8001cf8:	e6b4      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001cfa:	000f      	movs	r7, r1
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	3f20      	subs	r7, #32
 8001d00:	40f8      	lsrs	r0, r7
 8001d02:	4684      	mov	ip, r0
 8001d04:	2920      	cmp	r1, #32
 8001d06:	d003      	beq.n	8001d10 <__aeabi_dadd+0x574>
 8001d08:	2740      	movs	r7, #64	@ 0x40
 8001d0a:	1a79      	subs	r1, r7, r1
 8001d0c:	408b      	lsls	r3, r1
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	1e53      	subs	r3, r2, #1
 8001d12:	419a      	sbcs	r2, r3
 8001d14:	4663      	mov	r3, ip
 8001d16:	0017      	movs	r7, r2
 8001d18:	431f      	orrs	r7, r3
 8001d1a:	e635      	b.n	8001988 <__aeabi_dadd+0x1ec>
 8001d1c:	2500      	movs	r5, #0
 8001d1e:	2400      	movs	r4, #0
 8001d20:	2600      	movs	r6, #0
 8001d22:	e684      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001d24:	000c      	movs	r4, r1
 8001d26:	0035      	movs	r5, r6
 8001d28:	3c20      	subs	r4, #32
 8001d2a:	40e5      	lsrs	r5, r4
 8001d2c:	2920      	cmp	r1, #32
 8001d2e:	d005      	beq.n	8001d3c <__aeabi_dadd+0x5a0>
 8001d30:	2440      	movs	r4, #64	@ 0x40
 8001d32:	1a61      	subs	r1, r4, r1
 8001d34:	408e      	lsls	r6, r1
 8001d36:	4649      	mov	r1, r9
 8001d38:	4331      	orrs	r1, r6
 8001d3a:	4689      	mov	r9, r1
 8001d3c:	4648      	mov	r0, r9
 8001d3e:	1e41      	subs	r1, r0, #1
 8001d40:	4188      	sbcs	r0, r1
 8001d42:	0007      	movs	r7, r0
 8001d44:	432f      	orrs	r7, r5
 8001d46:	e5ef      	b.n	8001928 <__aeabi_dadd+0x18c>
 8001d48:	08d2      	lsrs	r2, r2, #3
 8001d4a:	075f      	lsls	r7, r3, #29
 8001d4c:	4665      	mov	r5, ip
 8001d4e:	4317      	orrs	r7, r2
 8001d50:	08d8      	lsrs	r0, r3, #3
 8001d52:	e687      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001d54:	1a17      	subs	r7, r2, r0
 8001d56:	42ba      	cmp	r2, r7
 8001d58:	4192      	sbcs	r2, r2
 8001d5a:	1b9e      	subs	r6, r3, r6
 8001d5c:	4252      	negs	r2, r2
 8001d5e:	1ab6      	subs	r6, r6, r2
 8001d60:	0233      	lsls	r3, r6, #8
 8001d62:	d4c1      	bmi.n	8001ce8 <__aeabi_dadd+0x54c>
 8001d64:	0773      	lsls	r3, r6, #29
 8001d66:	08ff      	lsrs	r7, r7, #3
 8001d68:	4665      	mov	r5, ip
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	431f      	orrs	r7, r3
 8001d6e:	08f0      	lsrs	r0, r6, #3
 8001d70:	e64b      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001d72:	2f00      	cmp	r7, #0
 8001d74:	d07b      	beq.n	8001e6e <__aeabi_dadd+0x6d2>
 8001d76:	4665      	mov	r5, ip
 8001d78:	001e      	movs	r6, r3
 8001d7a:	4691      	mov	r9, r2
 8001d7c:	e63f      	b.n	80019fe <__aeabi_dadd+0x262>
 8001d7e:	1a81      	subs	r1, r0, r2
 8001d80:	4688      	mov	r8, r1
 8001d82:	45c1      	cmp	r9, r8
 8001d84:	41a4      	sbcs	r4, r4
 8001d86:	1af1      	subs	r1, r6, r3
 8001d88:	4264      	negs	r4, r4
 8001d8a:	1b09      	subs	r1, r1, r4
 8001d8c:	2480      	movs	r4, #128	@ 0x80
 8001d8e:	0424      	lsls	r4, r4, #16
 8001d90:	4221      	tst	r1, r4
 8001d92:	d077      	beq.n	8001e84 <__aeabi_dadd+0x6e8>
 8001d94:	1a10      	subs	r0, r2, r0
 8001d96:	4282      	cmp	r2, r0
 8001d98:	4192      	sbcs	r2, r2
 8001d9a:	0007      	movs	r7, r0
 8001d9c:	1b9e      	subs	r6, r3, r6
 8001d9e:	4252      	negs	r2, r2
 8001da0:	1ab6      	subs	r6, r6, r2
 8001da2:	4337      	orrs	r7, r6
 8001da4:	d000      	beq.n	8001da8 <__aeabi_dadd+0x60c>
 8001da6:	e0a0      	b.n	8001eea <__aeabi_dadd+0x74e>
 8001da8:	4665      	mov	r5, ip
 8001daa:	2400      	movs	r4, #0
 8001dac:	2600      	movs	r6, #0
 8001dae:	e63e      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001db0:	075f      	lsls	r7, r3, #29
 8001db2:	08d2      	lsrs	r2, r2, #3
 8001db4:	4665      	mov	r5, ip
 8001db6:	4317      	orrs	r7, r2
 8001db8:	08d8      	lsrs	r0, r3, #3
 8001dba:	e653      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001dbc:	1881      	adds	r1, r0, r2
 8001dbe:	4291      	cmp	r1, r2
 8001dc0:	4192      	sbcs	r2, r2
 8001dc2:	18f0      	adds	r0, r6, r3
 8001dc4:	4252      	negs	r2, r2
 8001dc6:	1880      	adds	r0, r0, r2
 8001dc8:	0203      	lsls	r3, r0, #8
 8001dca:	d500      	bpl.n	8001dce <__aeabi_dadd+0x632>
 8001dcc:	e768      	b.n	8001ca0 <__aeabi_dadd+0x504>
 8001dce:	0747      	lsls	r7, r0, #29
 8001dd0:	08c9      	lsrs	r1, r1, #3
 8001dd2:	430f      	orrs	r7, r1
 8001dd4:	08c0      	lsrs	r0, r0, #3
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	e617      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001dda:	08d2      	lsrs	r2, r2, #3
 8001ddc:	075f      	lsls	r7, r3, #29
 8001dde:	4317      	orrs	r7, r2
 8001de0:	08d8      	lsrs	r0, r3, #3
 8001de2:	e63f      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001de4:	000c      	movs	r4, r1
 8001de6:	2600      	movs	r6, #0
 8001de8:	2700      	movs	r7, #0
 8001dea:	e620      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001dec:	2900      	cmp	r1, #0
 8001dee:	d156      	bne.n	8001e9e <__aeabi_dadd+0x702>
 8001df0:	075f      	lsls	r7, r3, #29
 8001df2:	08d2      	lsrs	r2, r2, #3
 8001df4:	4317      	orrs	r7, r2
 8001df6:	08d8      	lsrs	r0, r3, #3
 8001df8:	e634      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001dfa:	000c      	movs	r4, r1
 8001dfc:	001e      	movs	r6, r3
 8001dfe:	08d0      	lsrs	r0, r2, #3
 8001e00:	e629      	b.n	8001a56 <__aeabi_dadd+0x2ba>
 8001e02:	08c1      	lsrs	r1, r0, #3
 8001e04:	0770      	lsls	r0, r6, #29
 8001e06:	4301      	orrs	r1, r0
 8001e08:	08f0      	lsrs	r0, r6, #3
 8001e0a:	2f00      	cmp	r7, #0
 8001e0c:	d062      	beq.n	8001ed4 <__aeabi_dadd+0x738>
 8001e0e:	2480      	movs	r4, #128	@ 0x80
 8001e10:	0324      	lsls	r4, r4, #12
 8001e12:	4220      	tst	r0, r4
 8001e14:	d007      	beq.n	8001e26 <__aeabi_dadd+0x68a>
 8001e16:	08de      	lsrs	r6, r3, #3
 8001e18:	4226      	tst	r6, r4
 8001e1a:	d104      	bne.n	8001e26 <__aeabi_dadd+0x68a>
 8001e1c:	4665      	mov	r5, ip
 8001e1e:	0030      	movs	r0, r6
 8001e20:	08d1      	lsrs	r1, r2, #3
 8001e22:	075b      	lsls	r3, r3, #29
 8001e24:	4319      	orrs	r1, r3
 8001e26:	0f4f      	lsrs	r7, r1, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	08c9      	lsrs	r1, r1, #3
 8001e2c:	077f      	lsls	r7, r7, #29
 8001e2e:	430f      	orrs	r7, r1
 8001e30:	e618      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001e32:	000c      	movs	r4, r1
 8001e34:	0030      	movs	r0, r6
 8001e36:	3c20      	subs	r4, #32
 8001e38:	40e0      	lsrs	r0, r4
 8001e3a:	4684      	mov	ip, r0
 8001e3c:	2920      	cmp	r1, #32
 8001e3e:	d005      	beq.n	8001e4c <__aeabi_dadd+0x6b0>
 8001e40:	2440      	movs	r4, #64	@ 0x40
 8001e42:	1a61      	subs	r1, r4, r1
 8001e44:	408e      	lsls	r6, r1
 8001e46:	4649      	mov	r1, r9
 8001e48:	4331      	orrs	r1, r6
 8001e4a:	4689      	mov	r9, r1
 8001e4c:	4648      	mov	r0, r9
 8001e4e:	1e41      	subs	r1, r0, #1
 8001e50:	4188      	sbcs	r0, r1
 8001e52:	4661      	mov	r1, ip
 8001e54:	0007      	movs	r7, r0
 8001e56:	430f      	orrs	r7, r1
 8001e58:	e630      	b.n	8001abc <__aeabi_dadd+0x320>
 8001e5a:	2120      	movs	r1, #32
 8001e5c:	2700      	movs	r7, #0
 8001e5e:	1a09      	subs	r1, r1, r0
 8001e60:	e50e      	b.n	8001880 <__aeabi_dadd+0xe4>
 8001e62:	001e      	movs	r6, r3
 8001e64:	2f00      	cmp	r7, #0
 8001e66:	d000      	beq.n	8001e6a <__aeabi_dadd+0x6ce>
 8001e68:	e522      	b.n	80018b0 <__aeabi_dadd+0x114>
 8001e6a:	2400      	movs	r4, #0
 8001e6c:	e758      	b.n	8001d20 <__aeabi_dadd+0x584>
 8001e6e:	2500      	movs	r5, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	2600      	movs	r6, #0
 8001e74:	e5db      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	000007fe 	.word	0x000007fe
 8001e7c:	000007ff 	.word	0x000007ff
 8001e80:	ff7fffff 	.word	0xff7fffff
 8001e84:	4647      	mov	r7, r8
 8001e86:	430f      	orrs	r7, r1
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dadd+0x6f0>
 8001e8a:	e747      	b.n	8001d1c <__aeabi_dadd+0x580>
 8001e8c:	000e      	movs	r6, r1
 8001e8e:	46c1      	mov	r9, r8
 8001e90:	e5b5      	b.n	80019fe <__aeabi_dadd+0x262>
 8001e92:	08df      	lsrs	r7, r3, #3
 8001e94:	0764      	lsls	r4, r4, #29
 8001e96:	2102      	movs	r1, #2
 8001e98:	4327      	orrs	r7, r4
 8001e9a:	0900      	lsrs	r0, r0, #4
 8001e9c:	e5b5      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	08c0      	lsrs	r0, r0, #3
 8001ea2:	0777      	lsls	r7, r6, #29
 8001ea4:	4307      	orrs	r7, r0
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	08f0      	lsrs	r0, r6, #3
 8001eaa:	2900      	cmp	r1, #0
 8001eac:	d100      	bne.n	8001eb0 <__aeabi_dadd+0x714>
 8001eae:	e5d9      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001eb0:	2180      	movs	r1, #128	@ 0x80
 8001eb2:	0309      	lsls	r1, r1, #12
 8001eb4:	4208      	tst	r0, r1
 8001eb6:	d007      	beq.n	8001ec8 <__aeabi_dadd+0x72c>
 8001eb8:	08dc      	lsrs	r4, r3, #3
 8001eba:	420c      	tst	r4, r1
 8001ebc:	d104      	bne.n	8001ec8 <__aeabi_dadd+0x72c>
 8001ebe:	08d2      	lsrs	r2, r2, #3
 8001ec0:	075b      	lsls	r3, r3, #29
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	0017      	movs	r7, r2
 8001ec6:	0020      	movs	r0, r4
 8001ec8:	0f7b      	lsrs	r3, r7, #29
 8001eca:	00ff      	lsls	r7, r7, #3
 8001ecc:	08ff      	lsrs	r7, r7, #3
 8001ece:	075b      	lsls	r3, r3, #29
 8001ed0:	431f      	orrs	r7, r3
 8001ed2:	e5c7      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001ed4:	000f      	movs	r7, r1
 8001ed6:	e5c5      	b.n	8001a64 <__aeabi_dadd+0x2c8>
 8001ed8:	4b12      	ldr	r3, [pc, #72]	@ (8001f24 <__aeabi_dadd+0x788>)
 8001eda:	08d2      	lsrs	r2, r2, #3
 8001edc:	4033      	ands	r3, r6
 8001ede:	075f      	lsls	r7, r3, #29
 8001ee0:	025b      	lsls	r3, r3, #9
 8001ee2:	2401      	movs	r4, #1
 8001ee4:	4317      	orrs	r7, r2
 8001ee6:	0b1e      	lsrs	r6, r3, #12
 8001ee8:	e5a1      	b.n	8001a2e <__aeabi_dadd+0x292>
 8001eea:	4226      	tst	r6, r4
 8001eec:	d012      	beq.n	8001f14 <__aeabi_dadd+0x778>
 8001eee:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <__aeabi_dadd+0x788>)
 8001ef0:	4665      	mov	r5, ip
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	2401      	movs	r4, #1
 8001ef6:	401e      	ands	r6, r3
 8001ef8:	e4e6      	b.n	80018c8 <__aeabi_dadd+0x12c>
 8001efa:	0021      	movs	r1, r4
 8001efc:	e585      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001efe:	0017      	movs	r7, r2
 8001f00:	e5a8      	b.n	8001a54 <__aeabi_dadd+0x2b8>
 8001f02:	003a      	movs	r2, r7
 8001f04:	e4d4      	b.n	80018b0 <__aeabi_dadd+0x114>
 8001f06:	08db      	lsrs	r3, r3, #3
 8001f08:	0764      	lsls	r4, r4, #29
 8001f0a:	431c      	orrs	r4, r3
 8001f0c:	0027      	movs	r7, r4
 8001f0e:	2102      	movs	r1, #2
 8001f10:	0900      	lsrs	r0, r0, #4
 8001f12:	e57a      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001f14:	08c0      	lsrs	r0, r0, #3
 8001f16:	0777      	lsls	r7, r6, #29
 8001f18:	4307      	orrs	r7, r0
 8001f1a:	4665      	mov	r5, ip
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	08f0      	lsrs	r0, r6, #3
 8001f20:	e573      	b.n	8001a0a <__aeabi_dadd+0x26e>
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	ff7fffff 	.word	0xff7fffff

08001f28 <__aeabi_ddiv>:
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	46de      	mov	lr, fp
 8001f2c:	4645      	mov	r5, r8
 8001f2e:	4657      	mov	r7, sl
 8001f30:	464e      	mov	r6, r9
 8001f32:	b5e0      	push	{r5, r6, r7, lr}
 8001f34:	b087      	sub	sp, #28
 8001f36:	9200      	str	r2, [sp, #0]
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	030b      	lsls	r3, r1, #12
 8001f3c:	0b1b      	lsrs	r3, r3, #12
 8001f3e:	469b      	mov	fp, r3
 8001f40:	0fca      	lsrs	r2, r1, #31
 8001f42:	004b      	lsls	r3, r1, #1
 8001f44:	0004      	movs	r4, r0
 8001f46:	4680      	mov	r8, r0
 8001f48:	0d5b      	lsrs	r3, r3, #21
 8001f4a:	9202      	str	r2, [sp, #8]
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_ddiv+0x28>
 8001f4e:	e098      	b.n	8002082 <__aeabi_ddiv+0x15a>
 8001f50:	4a7c      	ldr	r2, [pc, #496]	@ (8002144 <__aeabi_ddiv+0x21c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d037      	beq.n	8001fc6 <__aeabi_ddiv+0x9e>
 8001f56:	4659      	mov	r1, fp
 8001f58:	0f42      	lsrs	r2, r0, #29
 8001f5a:	00c9      	lsls	r1, r1, #3
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	2180      	movs	r1, #128	@ 0x80
 8001f60:	0409      	lsls	r1, r1, #16
 8001f62:	4311      	orrs	r1, r2
 8001f64:	00c2      	lsls	r2, r0, #3
 8001f66:	4690      	mov	r8, r2
 8001f68:	4a77      	ldr	r2, [pc, #476]	@ (8002148 <__aeabi_ddiv+0x220>)
 8001f6a:	4689      	mov	r9, r1
 8001f6c:	4692      	mov	sl, r2
 8001f6e:	449a      	add	sl, r3
 8001f70:	2300      	movs	r3, #0
 8001f72:	2400      	movs	r4, #0
 8001f74:	9303      	str	r3, [sp, #12]
 8001f76:	9e00      	ldr	r6, [sp, #0]
 8001f78:	9f01      	ldr	r7, [sp, #4]
 8001f7a:	033b      	lsls	r3, r7, #12
 8001f7c:	0b1b      	lsrs	r3, r3, #12
 8001f7e:	469b      	mov	fp, r3
 8001f80:	007b      	lsls	r3, r7, #1
 8001f82:	0030      	movs	r0, r6
 8001f84:	0d5b      	lsrs	r3, r3, #21
 8001f86:	0ffd      	lsrs	r5, r7, #31
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d059      	beq.n	8002040 <__aeabi_ddiv+0x118>
 8001f8c:	4a6d      	ldr	r2, [pc, #436]	@ (8002144 <__aeabi_ddiv+0x21c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d048      	beq.n	8002024 <__aeabi_ddiv+0xfc>
 8001f92:	4659      	mov	r1, fp
 8001f94:	0f72      	lsrs	r2, r6, #29
 8001f96:	00c9      	lsls	r1, r1, #3
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	2180      	movs	r1, #128	@ 0x80
 8001f9c:	0409      	lsls	r1, r1, #16
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	468b      	mov	fp, r1
 8001fa2:	4969      	ldr	r1, [pc, #420]	@ (8002148 <__aeabi_ddiv+0x220>)
 8001fa4:	00f2      	lsls	r2, r6, #3
 8001fa6:	468c      	mov	ip, r1
 8001fa8:	4651      	mov	r1, sl
 8001faa:	4463      	add	r3, ip
 8001fac:	1acb      	subs	r3, r1, r3
 8001fae:	469a      	mov	sl, r3
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	9e02      	ldr	r6, [sp, #8]
 8001fb4:	406e      	eors	r6, r5
 8001fb6:	b2f6      	uxtb	r6, r6
 8001fb8:	2c0f      	cmp	r4, #15
 8001fba:	d900      	bls.n	8001fbe <__aeabi_ddiv+0x96>
 8001fbc:	e0ce      	b.n	800215c <__aeabi_ddiv+0x234>
 8001fbe:	4b63      	ldr	r3, [pc, #396]	@ (800214c <__aeabi_ddiv+0x224>)
 8001fc0:	00a4      	lsls	r4, r4, #2
 8001fc2:	591b      	ldr	r3, [r3, r4]
 8001fc4:	469f      	mov	pc, r3
 8001fc6:	465a      	mov	r2, fp
 8001fc8:	4302      	orrs	r2, r0
 8001fca:	4691      	mov	r9, r2
 8001fcc:	d000      	beq.n	8001fd0 <__aeabi_ddiv+0xa8>
 8001fce:	e090      	b.n	80020f2 <__aeabi_ddiv+0x1ca>
 8001fd0:	469a      	mov	sl, r3
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	4690      	mov	r8, r2
 8001fd6:	2408      	movs	r4, #8
 8001fd8:	9303      	str	r3, [sp, #12]
 8001fda:	e7cc      	b.n	8001f76 <__aeabi_ddiv+0x4e>
 8001fdc:	46cb      	mov	fp, r9
 8001fde:	4642      	mov	r2, r8
 8001fe0:	9d02      	ldr	r5, [sp, #8]
 8001fe2:	9903      	ldr	r1, [sp, #12]
 8001fe4:	2902      	cmp	r1, #2
 8001fe6:	d100      	bne.n	8001fea <__aeabi_ddiv+0xc2>
 8001fe8:	e1de      	b.n	80023a8 <__aeabi_ddiv+0x480>
 8001fea:	2903      	cmp	r1, #3
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_ddiv+0xc8>
 8001fee:	e08d      	b.n	800210c <__aeabi_ddiv+0x1e4>
 8001ff0:	2901      	cmp	r1, #1
 8001ff2:	d000      	beq.n	8001ff6 <__aeabi_ddiv+0xce>
 8001ff4:	e179      	b.n	80022ea <__aeabi_ddiv+0x3c2>
 8001ff6:	002e      	movs	r6, r5
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2400      	movs	r4, #0
 8001ffe:	4690      	mov	r8, r2
 8002000:	051b      	lsls	r3, r3, #20
 8002002:	4323      	orrs	r3, r4
 8002004:	07f6      	lsls	r6, r6, #31
 8002006:	4333      	orrs	r3, r6
 8002008:	4640      	mov	r0, r8
 800200a:	0019      	movs	r1, r3
 800200c:	b007      	add	sp, #28
 800200e:	bcf0      	pop	{r4, r5, r6, r7}
 8002010:	46bb      	mov	fp, r7
 8002012:	46b2      	mov	sl, r6
 8002014:	46a9      	mov	r9, r5
 8002016:	46a0      	mov	r8, r4
 8002018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800201a:	2200      	movs	r2, #0
 800201c:	2400      	movs	r4, #0
 800201e:	4690      	mov	r8, r2
 8002020:	4b48      	ldr	r3, [pc, #288]	@ (8002144 <__aeabi_ddiv+0x21c>)
 8002022:	e7ed      	b.n	8002000 <__aeabi_ddiv+0xd8>
 8002024:	465a      	mov	r2, fp
 8002026:	9b00      	ldr	r3, [sp, #0]
 8002028:	431a      	orrs	r2, r3
 800202a:	4b49      	ldr	r3, [pc, #292]	@ (8002150 <__aeabi_ddiv+0x228>)
 800202c:	469c      	mov	ip, r3
 800202e:	44e2      	add	sl, ip
 8002030:	2a00      	cmp	r2, #0
 8002032:	d159      	bne.n	80020e8 <__aeabi_ddiv+0x1c0>
 8002034:	2302      	movs	r3, #2
 8002036:	431c      	orrs	r4, r3
 8002038:	2300      	movs	r3, #0
 800203a:	2102      	movs	r1, #2
 800203c:	469b      	mov	fp, r3
 800203e:	e7b8      	b.n	8001fb2 <__aeabi_ddiv+0x8a>
 8002040:	465a      	mov	r2, fp
 8002042:	9b00      	ldr	r3, [sp, #0]
 8002044:	431a      	orrs	r2, r3
 8002046:	d049      	beq.n	80020dc <__aeabi_ddiv+0x1b4>
 8002048:	465b      	mov	r3, fp
 800204a:	2b00      	cmp	r3, #0
 800204c:	d100      	bne.n	8002050 <__aeabi_ddiv+0x128>
 800204e:	e19c      	b.n	800238a <__aeabi_ddiv+0x462>
 8002050:	4658      	mov	r0, fp
 8002052:	f001 fb8b 	bl	800376c <__clzsi2>
 8002056:	0002      	movs	r2, r0
 8002058:	0003      	movs	r3, r0
 800205a:	3a0b      	subs	r2, #11
 800205c:	271d      	movs	r7, #29
 800205e:	9e00      	ldr	r6, [sp, #0]
 8002060:	1aba      	subs	r2, r7, r2
 8002062:	0019      	movs	r1, r3
 8002064:	4658      	mov	r0, fp
 8002066:	40d6      	lsrs	r6, r2
 8002068:	3908      	subs	r1, #8
 800206a:	4088      	lsls	r0, r1
 800206c:	0032      	movs	r2, r6
 800206e:	4302      	orrs	r2, r0
 8002070:	4693      	mov	fp, r2
 8002072:	9a00      	ldr	r2, [sp, #0]
 8002074:	408a      	lsls	r2, r1
 8002076:	4937      	ldr	r1, [pc, #220]	@ (8002154 <__aeabi_ddiv+0x22c>)
 8002078:	4453      	add	r3, sl
 800207a:	468a      	mov	sl, r1
 800207c:	2100      	movs	r1, #0
 800207e:	449a      	add	sl, r3
 8002080:	e797      	b.n	8001fb2 <__aeabi_ddiv+0x8a>
 8002082:	465b      	mov	r3, fp
 8002084:	4303      	orrs	r3, r0
 8002086:	4699      	mov	r9, r3
 8002088:	d021      	beq.n	80020ce <__aeabi_ddiv+0x1a6>
 800208a:	465b      	mov	r3, fp
 800208c:	2b00      	cmp	r3, #0
 800208e:	d100      	bne.n	8002092 <__aeabi_ddiv+0x16a>
 8002090:	e169      	b.n	8002366 <__aeabi_ddiv+0x43e>
 8002092:	4658      	mov	r0, fp
 8002094:	f001 fb6a 	bl	800376c <__clzsi2>
 8002098:	230b      	movs	r3, #11
 800209a:	425b      	negs	r3, r3
 800209c:	469c      	mov	ip, r3
 800209e:	0002      	movs	r2, r0
 80020a0:	4484      	add	ip, r0
 80020a2:	4666      	mov	r6, ip
 80020a4:	231d      	movs	r3, #29
 80020a6:	1b9b      	subs	r3, r3, r6
 80020a8:	0026      	movs	r6, r4
 80020aa:	0011      	movs	r1, r2
 80020ac:	4658      	mov	r0, fp
 80020ae:	40de      	lsrs	r6, r3
 80020b0:	3908      	subs	r1, #8
 80020b2:	4088      	lsls	r0, r1
 80020b4:	0033      	movs	r3, r6
 80020b6:	4303      	orrs	r3, r0
 80020b8:	4699      	mov	r9, r3
 80020ba:	0023      	movs	r3, r4
 80020bc:	408b      	lsls	r3, r1
 80020be:	4698      	mov	r8, r3
 80020c0:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <__aeabi_ddiv+0x230>)
 80020c2:	2400      	movs	r4, #0
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	469a      	mov	sl, r3
 80020c8:	2300      	movs	r3, #0
 80020ca:	9303      	str	r3, [sp, #12]
 80020cc:	e753      	b.n	8001f76 <__aeabi_ddiv+0x4e>
 80020ce:	2300      	movs	r3, #0
 80020d0:	4698      	mov	r8, r3
 80020d2:	469a      	mov	sl, r3
 80020d4:	3301      	adds	r3, #1
 80020d6:	2404      	movs	r4, #4
 80020d8:	9303      	str	r3, [sp, #12]
 80020da:	e74c      	b.n	8001f76 <__aeabi_ddiv+0x4e>
 80020dc:	2301      	movs	r3, #1
 80020de:	431c      	orrs	r4, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	2101      	movs	r1, #1
 80020e4:	469b      	mov	fp, r3
 80020e6:	e764      	b.n	8001fb2 <__aeabi_ddiv+0x8a>
 80020e8:	2303      	movs	r3, #3
 80020ea:	0032      	movs	r2, r6
 80020ec:	2103      	movs	r1, #3
 80020ee:	431c      	orrs	r4, r3
 80020f0:	e75f      	b.n	8001fb2 <__aeabi_ddiv+0x8a>
 80020f2:	469a      	mov	sl, r3
 80020f4:	2303      	movs	r3, #3
 80020f6:	46d9      	mov	r9, fp
 80020f8:	240c      	movs	r4, #12
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e73b      	b.n	8001f76 <__aeabi_ddiv+0x4e>
 80020fe:	2300      	movs	r3, #0
 8002100:	2480      	movs	r4, #128	@ 0x80
 8002102:	4698      	mov	r8, r3
 8002104:	2600      	movs	r6, #0
 8002106:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <__aeabi_ddiv+0x21c>)
 8002108:	0324      	lsls	r4, r4, #12
 800210a:	e779      	b.n	8002000 <__aeabi_ddiv+0xd8>
 800210c:	2480      	movs	r4, #128	@ 0x80
 800210e:	465b      	mov	r3, fp
 8002110:	0324      	lsls	r4, r4, #12
 8002112:	431c      	orrs	r4, r3
 8002114:	0324      	lsls	r4, r4, #12
 8002116:	002e      	movs	r6, r5
 8002118:	4690      	mov	r8, r2
 800211a:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <__aeabi_ddiv+0x21c>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e76f      	b.n	8002000 <__aeabi_ddiv+0xd8>
 8002120:	2480      	movs	r4, #128	@ 0x80
 8002122:	464b      	mov	r3, r9
 8002124:	0324      	lsls	r4, r4, #12
 8002126:	4223      	tst	r3, r4
 8002128:	d002      	beq.n	8002130 <__aeabi_ddiv+0x208>
 800212a:	465b      	mov	r3, fp
 800212c:	4223      	tst	r3, r4
 800212e:	d0f0      	beq.n	8002112 <__aeabi_ddiv+0x1ea>
 8002130:	2480      	movs	r4, #128	@ 0x80
 8002132:	464b      	mov	r3, r9
 8002134:	0324      	lsls	r4, r4, #12
 8002136:	431c      	orrs	r4, r3
 8002138:	0324      	lsls	r4, r4, #12
 800213a:	9e02      	ldr	r6, [sp, #8]
 800213c:	4b01      	ldr	r3, [pc, #4]	@ (8002144 <__aeabi_ddiv+0x21c>)
 800213e:	0b24      	lsrs	r4, r4, #12
 8002140:	e75e      	b.n	8002000 <__aeabi_ddiv+0xd8>
 8002142:	46c0      	nop			@ (mov r8, r8)
 8002144:	000007ff 	.word	0x000007ff
 8002148:	fffffc01 	.word	0xfffffc01
 800214c:	0800dfd0 	.word	0x0800dfd0
 8002150:	fffff801 	.word	0xfffff801
 8002154:	000003f3 	.word	0x000003f3
 8002158:	fffffc0d 	.word	0xfffffc0d
 800215c:	45cb      	cmp	fp, r9
 800215e:	d200      	bcs.n	8002162 <__aeabi_ddiv+0x23a>
 8002160:	e0f8      	b.n	8002354 <__aeabi_ddiv+0x42c>
 8002162:	d100      	bne.n	8002166 <__aeabi_ddiv+0x23e>
 8002164:	e0f3      	b.n	800234e <__aeabi_ddiv+0x426>
 8002166:	2301      	movs	r3, #1
 8002168:	425b      	negs	r3, r3
 800216a:	469c      	mov	ip, r3
 800216c:	4644      	mov	r4, r8
 800216e:	4648      	mov	r0, r9
 8002170:	2500      	movs	r5, #0
 8002172:	44e2      	add	sl, ip
 8002174:	465b      	mov	r3, fp
 8002176:	0e17      	lsrs	r7, r2, #24
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	431f      	orrs	r7, r3
 800217c:	0c19      	lsrs	r1, r3, #16
 800217e:	043b      	lsls	r3, r7, #16
 8002180:	0212      	lsls	r2, r2, #8
 8002182:	9700      	str	r7, [sp, #0]
 8002184:	0c1f      	lsrs	r7, r3, #16
 8002186:	4691      	mov	r9, r2
 8002188:	9102      	str	r1, [sp, #8]
 800218a:	9703      	str	r7, [sp, #12]
 800218c:	f7fe f866 	bl	800025c <__aeabi_uidivmod>
 8002190:	0002      	movs	r2, r0
 8002192:	437a      	muls	r2, r7
 8002194:	040b      	lsls	r3, r1, #16
 8002196:	0c21      	lsrs	r1, r4, #16
 8002198:	4680      	mov	r8, r0
 800219a:	4319      	orrs	r1, r3
 800219c:	428a      	cmp	r2, r1
 800219e:	d909      	bls.n	80021b4 <__aeabi_ddiv+0x28c>
 80021a0:	9f00      	ldr	r7, [sp, #0]
 80021a2:	2301      	movs	r3, #1
 80021a4:	46bc      	mov	ip, r7
 80021a6:	425b      	negs	r3, r3
 80021a8:	4461      	add	r1, ip
 80021aa:	469c      	mov	ip, r3
 80021ac:	44e0      	add	r8, ip
 80021ae:	428f      	cmp	r7, r1
 80021b0:	d800      	bhi.n	80021b4 <__aeabi_ddiv+0x28c>
 80021b2:	e15c      	b.n	800246e <__aeabi_ddiv+0x546>
 80021b4:	1a88      	subs	r0, r1, r2
 80021b6:	9902      	ldr	r1, [sp, #8]
 80021b8:	f7fe f850 	bl	800025c <__aeabi_uidivmod>
 80021bc:	9a03      	ldr	r2, [sp, #12]
 80021be:	0424      	lsls	r4, r4, #16
 80021c0:	4342      	muls	r2, r0
 80021c2:	0409      	lsls	r1, r1, #16
 80021c4:	0c24      	lsrs	r4, r4, #16
 80021c6:	0003      	movs	r3, r0
 80021c8:	430c      	orrs	r4, r1
 80021ca:	42a2      	cmp	r2, r4
 80021cc:	d906      	bls.n	80021dc <__aeabi_ddiv+0x2b4>
 80021ce:	9900      	ldr	r1, [sp, #0]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	468c      	mov	ip, r1
 80021d4:	4464      	add	r4, ip
 80021d6:	42a1      	cmp	r1, r4
 80021d8:	d800      	bhi.n	80021dc <__aeabi_ddiv+0x2b4>
 80021da:	e142      	b.n	8002462 <__aeabi_ddiv+0x53a>
 80021dc:	1aa0      	subs	r0, r4, r2
 80021de:	4642      	mov	r2, r8
 80021e0:	0412      	lsls	r2, r2, #16
 80021e2:	431a      	orrs	r2, r3
 80021e4:	4693      	mov	fp, r2
 80021e6:	464b      	mov	r3, r9
 80021e8:	4659      	mov	r1, fp
 80021ea:	0c1b      	lsrs	r3, r3, #16
 80021ec:	001f      	movs	r7, r3
 80021ee:	9304      	str	r3, [sp, #16]
 80021f0:	040b      	lsls	r3, r1, #16
 80021f2:	4649      	mov	r1, r9
 80021f4:	0409      	lsls	r1, r1, #16
 80021f6:	0c09      	lsrs	r1, r1, #16
 80021f8:	000c      	movs	r4, r1
 80021fa:	0c1b      	lsrs	r3, r3, #16
 80021fc:	435c      	muls	r4, r3
 80021fe:	0c12      	lsrs	r2, r2, #16
 8002200:	437b      	muls	r3, r7
 8002202:	4688      	mov	r8, r1
 8002204:	4351      	muls	r1, r2
 8002206:	437a      	muls	r2, r7
 8002208:	0c27      	lsrs	r7, r4, #16
 800220a:	46bc      	mov	ip, r7
 800220c:	185b      	adds	r3, r3, r1
 800220e:	4463      	add	r3, ip
 8002210:	4299      	cmp	r1, r3
 8002212:	d903      	bls.n	800221c <__aeabi_ddiv+0x2f4>
 8002214:	2180      	movs	r1, #128	@ 0x80
 8002216:	0249      	lsls	r1, r1, #9
 8002218:	468c      	mov	ip, r1
 800221a:	4462      	add	r2, ip
 800221c:	0c19      	lsrs	r1, r3, #16
 800221e:	0424      	lsls	r4, r4, #16
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	0c24      	lsrs	r4, r4, #16
 8002224:	188a      	adds	r2, r1, r2
 8002226:	191c      	adds	r4, r3, r4
 8002228:	4290      	cmp	r0, r2
 800222a:	d302      	bcc.n	8002232 <__aeabi_ddiv+0x30a>
 800222c:	d116      	bne.n	800225c <__aeabi_ddiv+0x334>
 800222e:	42a5      	cmp	r5, r4
 8002230:	d214      	bcs.n	800225c <__aeabi_ddiv+0x334>
 8002232:	465b      	mov	r3, fp
 8002234:	9f00      	ldr	r7, [sp, #0]
 8002236:	3b01      	subs	r3, #1
 8002238:	444d      	add	r5, r9
 800223a:	9305      	str	r3, [sp, #20]
 800223c:	454d      	cmp	r5, r9
 800223e:	419b      	sbcs	r3, r3
 8002240:	46bc      	mov	ip, r7
 8002242:	425b      	negs	r3, r3
 8002244:	4463      	add	r3, ip
 8002246:	18c0      	adds	r0, r0, r3
 8002248:	4287      	cmp	r7, r0
 800224a:	d300      	bcc.n	800224e <__aeabi_ddiv+0x326>
 800224c:	e102      	b.n	8002454 <__aeabi_ddiv+0x52c>
 800224e:	4282      	cmp	r2, r0
 8002250:	d900      	bls.n	8002254 <__aeabi_ddiv+0x32c>
 8002252:	e129      	b.n	80024a8 <__aeabi_ddiv+0x580>
 8002254:	d100      	bne.n	8002258 <__aeabi_ddiv+0x330>
 8002256:	e124      	b.n	80024a2 <__aeabi_ddiv+0x57a>
 8002258:	9b05      	ldr	r3, [sp, #20]
 800225a:	469b      	mov	fp, r3
 800225c:	1b2c      	subs	r4, r5, r4
 800225e:	42a5      	cmp	r5, r4
 8002260:	41ad      	sbcs	r5, r5
 8002262:	9b00      	ldr	r3, [sp, #0]
 8002264:	1a80      	subs	r0, r0, r2
 8002266:	426d      	negs	r5, r5
 8002268:	1b40      	subs	r0, r0, r5
 800226a:	4283      	cmp	r3, r0
 800226c:	d100      	bne.n	8002270 <__aeabi_ddiv+0x348>
 800226e:	e10f      	b.n	8002490 <__aeabi_ddiv+0x568>
 8002270:	9902      	ldr	r1, [sp, #8]
 8002272:	f7fd fff3 	bl	800025c <__aeabi_uidivmod>
 8002276:	9a03      	ldr	r2, [sp, #12]
 8002278:	040b      	lsls	r3, r1, #16
 800227a:	4342      	muls	r2, r0
 800227c:	0c21      	lsrs	r1, r4, #16
 800227e:	0005      	movs	r5, r0
 8002280:	4319      	orrs	r1, r3
 8002282:	428a      	cmp	r2, r1
 8002284:	d900      	bls.n	8002288 <__aeabi_ddiv+0x360>
 8002286:	e0cb      	b.n	8002420 <__aeabi_ddiv+0x4f8>
 8002288:	1a88      	subs	r0, r1, r2
 800228a:	9902      	ldr	r1, [sp, #8]
 800228c:	f7fd ffe6 	bl	800025c <__aeabi_uidivmod>
 8002290:	9a03      	ldr	r2, [sp, #12]
 8002292:	0424      	lsls	r4, r4, #16
 8002294:	4342      	muls	r2, r0
 8002296:	0409      	lsls	r1, r1, #16
 8002298:	0c24      	lsrs	r4, r4, #16
 800229a:	0003      	movs	r3, r0
 800229c:	430c      	orrs	r4, r1
 800229e:	42a2      	cmp	r2, r4
 80022a0:	d900      	bls.n	80022a4 <__aeabi_ddiv+0x37c>
 80022a2:	e0ca      	b.n	800243a <__aeabi_ddiv+0x512>
 80022a4:	4641      	mov	r1, r8
 80022a6:	1aa4      	subs	r4, r4, r2
 80022a8:	042a      	lsls	r2, r5, #16
 80022aa:	431a      	orrs	r2, r3
 80022ac:	9f04      	ldr	r7, [sp, #16]
 80022ae:	0413      	lsls	r3, r2, #16
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	4359      	muls	r1, r3
 80022b4:	4640      	mov	r0, r8
 80022b6:	437b      	muls	r3, r7
 80022b8:	469c      	mov	ip, r3
 80022ba:	0c15      	lsrs	r5, r2, #16
 80022bc:	4368      	muls	r0, r5
 80022be:	0c0b      	lsrs	r3, r1, #16
 80022c0:	4484      	add	ip, r0
 80022c2:	4463      	add	r3, ip
 80022c4:	437d      	muls	r5, r7
 80022c6:	4298      	cmp	r0, r3
 80022c8:	d903      	bls.n	80022d2 <__aeabi_ddiv+0x3aa>
 80022ca:	2080      	movs	r0, #128	@ 0x80
 80022cc:	0240      	lsls	r0, r0, #9
 80022ce:	4684      	mov	ip, r0
 80022d0:	4465      	add	r5, ip
 80022d2:	0c18      	lsrs	r0, r3, #16
 80022d4:	0409      	lsls	r1, r1, #16
 80022d6:	041b      	lsls	r3, r3, #16
 80022d8:	0c09      	lsrs	r1, r1, #16
 80022da:	1940      	adds	r0, r0, r5
 80022dc:	185b      	adds	r3, r3, r1
 80022de:	4284      	cmp	r4, r0
 80022e0:	d327      	bcc.n	8002332 <__aeabi_ddiv+0x40a>
 80022e2:	d023      	beq.n	800232c <__aeabi_ddiv+0x404>
 80022e4:	2301      	movs	r3, #1
 80022e6:	0035      	movs	r5, r6
 80022e8:	431a      	orrs	r2, r3
 80022ea:	4b94      	ldr	r3, [pc, #592]	@ (800253c <__aeabi_ddiv+0x614>)
 80022ec:	4453      	add	r3, sl
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	dd60      	ble.n	80023b4 <__aeabi_ddiv+0x48c>
 80022f2:	0751      	lsls	r1, r2, #29
 80022f4:	d000      	beq.n	80022f8 <__aeabi_ddiv+0x3d0>
 80022f6:	e086      	b.n	8002406 <__aeabi_ddiv+0x4de>
 80022f8:	002e      	movs	r6, r5
 80022fa:	08d1      	lsrs	r1, r2, #3
 80022fc:	465a      	mov	r2, fp
 80022fe:	01d2      	lsls	r2, r2, #7
 8002300:	d506      	bpl.n	8002310 <__aeabi_ddiv+0x3e8>
 8002302:	465a      	mov	r2, fp
 8002304:	4b8e      	ldr	r3, [pc, #568]	@ (8002540 <__aeabi_ddiv+0x618>)
 8002306:	401a      	ands	r2, r3
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	4693      	mov	fp, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4453      	add	r3, sl
 8002310:	4a8c      	ldr	r2, [pc, #560]	@ (8002544 <__aeabi_ddiv+0x61c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	dd00      	ble.n	8002318 <__aeabi_ddiv+0x3f0>
 8002316:	e680      	b.n	800201a <__aeabi_ddiv+0xf2>
 8002318:	465a      	mov	r2, fp
 800231a:	0752      	lsls	r2, r2, #29
 800231c:	430a      	orrs	r2, r1
 800231e:	4690      	mov	r8, r2
 8002320:	465a      	mov	r2, fp
 8002322:	055b      	lsls	r3, r3, #21
 8002324:	0254      	lsls	r4, r2, #9
 8002326:	0b24      	lsrs	r4, r4, #12
 8002328:	0d5b      	lsrs	r3, r3, #21
 800232a:	e669      	b.n	8002000 <__aeabi_ddiv+0xd8>
 800232c:	0035      	movs	r5, r6
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0db      	beq.n	80022ea <__aeabi_ddiv+0x3c2>
 8002332:	9d00      	ldr	r5, [sp, #0]
 8002334:	1e51      	subs	r1, r2, #1
 8002336:	46ac      	mov	ip, r5
 8002338:	4464      	add	r4, ip
 800233a:	42ac      	cmp	r4, r5
 800233c:	d200      	bcs.n	8002340 <__aeabi_ddiv+0x418>
 800233e:	e09e      	b.n	800247e <__aeabi_ddiv+0x556>
 8002340:	4284      	cmp	r4, r0
 8002342:	d200      	bcs.n	8002346 <__aeabi_ddiv+0x41e>
 8002344:	e0e1      	b.n	800250a <__aeabi_ddiv+0x5e2>
 8002346:	d100      	bne.n	800234a <__aeabi_ddiv+0x422>
 8002348:	e0ee      	b.n	8002528 <__aeabi_ddiv+0x600>
 800234a:	000a      	movs	r2, r1
 800234c:	e7ca      	b.n	80022e4 <__aeabi_ddiv+0x3bc>
 800234e:	4542      	cmp	r2, r8
 8002350:	d900      	bls.n	8002354 <__aeabi_ddiv+0x42c>
 8002352:	e708      	b.n	8002166 <__aeabi_ddiv+0x23e>
 8002354:	464b      	mov	r3, r9
 8002356:	07dc      	lsls	r4, r3, #31
 8002358:	0858      	lsrs	r0, r3, #1
 800235a:	4643      	mov	r3, r8
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	431c      	orrs	r4, r3
 8002360:	4643      	mov	r3, r8
 8002362:	07dd      	lsls	r5, r3, #31
 8002364:	e706      	b.n	8002174 <__aeabi_ddiv+0x24c>
 8002366:	f001 fa01 	bl	800376c <__clzsi2>
 800236a:	2315      	movs	r3, #21
 800236c:	469c      	mov	ip, r3
 800236e:	4484      	add	ip, r0
 8002370:	0002      	movs	r2, r0
 8002372:	4663      	mov	r3, ip
 8002374:	3220      	adds	r2, #32
 8002376:	2b1c      	cmp	r3, #28
 8002378:	dc00      	bgt.n	800237c <__aeabi_ddiv+0x454>
 800237a:	e692      	b.n	80020a2 <__aeabi_ddiv+0x17a>
 800237c:	0023      	movs	r3, r4
 800237e:	3808      	subs	r0, #8
 8002380:	4083      	lsls	r3, r0
 8002382:	4699      	mov	r9, r3
 8002384:	2300      	movs	r3, #0
 8002386:	4698      	mov	r8, r3
 8002388:	e69a      	b.n	80020c0 <__aeabi_ddiv+0x198>
 800238a:	f001 f9ef 	bl	800376c <__clzsi2>
 800238e:	0002      	movs	r2, r0
 8002390:	0003      	movs	r3, r0
 8002392:	3215      	adds	r2, #21
 8002394:	3320      	adds	r3, #32
 8002396:	2a1c      	cmp	r2, #28
 8002398:	dc00      	bgt.n	800239c <__aeabi_ddiv+0x474>
 800239a:	e65f      	b.n	800205c <__aeabi_ddiv+0x134>
 800239c:	9900      	ldr	r1, [sp, #0]
 800239e:	3808      	subs	r0, #8
 80023a0:	4081      	lsls	r1, r0
 80023a2:	2200      	movs	r2, #0
 80023a4:	468b      	mov	fp, r1
 80023a6:	e666      	b.n	8002076 <__aeabi_ddiv+0x14e>
 80023a8:	2200      	movs	r2, #0
 80023aa:	002e      	movs	r6, r5
 80023ac:	2400      	movs	r4, #0
 80023ae:	4690      	mov	r8, r2
 80023b0:	4b65      	ldr	r3, [pc, #404]	@ (8002548 <__aeabi_ddiv+0x620>)
 80023b2:	e625      	b.n	8002000 <__aeabi_ddiv+0xd8>
 80023b4:	002e      	movs	r6, r5
 80023b6:	2101      	movs	r1, #1
 80023b8:	1ac9      	subs	r1, r1, r3
 80023ba:	2938      	cmp	r1, #56	@ 0x38
 80023bc:	dd00      	ble.n	80023c0 <__aeabi_ddiv+0x498>
 80023be:	e61b      	b.n	8001ff8 <__aeabi_ddiv+0xd0>
 80023c0:	291f      	cmp	r1, #31
 80023c2:	dc7e      	bgt.n	80024c2 <__aeabi_ddiv+0x59a>
 80023c4:	4861      	ldr	r0, [pc, #388]	@ (800254c <__aeabi_ddiv+0x624>)
 80023c6:	0014      	movs	r4, r2
 80023c8:	4450      	add	r0, sl
 80023ca:	465b      	mov	r3, fp
 80023cc:	4082      	lsls	r2, r0
 80023ce:	4083      	lsls	r3, r0
 80023d0:	40cc      	lsrs	r4, r1
 80023d2:	1e50      	subs	r0, r2, #1
 80023d4:	4182      	sbcs	r2, r0
 80023d6:	4323      	orrs	r3, r4
 80023d8:	431a      	orrs	r2, r3
 80023da:	465b      	mov	r3, fp
 80023dc:	40cb      	lsrs	r3, r1
 80023de:	0751      	lsls	r1, r2, #29
 80023e0:	d009      	beq.n	80023f6 <__aeabi_ddiv+0x4ce>
 80023e2:	210f      	movs	r1, #15
 80023e4:	4011      	ands	r1, r2
 80023e6:	2904      	cmp	r1, #4
 80023e8:	d005      	beq.n	80023f6 <__aeabi_ddiv+0x4ce>
 80023ea:	1d11      	adds	r1, r2, #4
 80023ec:	4291      	cmp	r1, r2
 80023ee:	4192      	sbcs	r2, r2
 80023f0:	4252      	negs	r2, r2
 80023f2:	189b      	adds	r3, r3, r2
 80023f4:	000a      	movs	r2, r1
 80023f6:	0219      	lsls	r1, r3, #8
 80023f8:	d400      	bmi.n	80023fc <__aeabi_ddiv+0x4d4>
 80023fa:	e09b      	b.n	8002534 <__aeabi_ddiv+0x60c>
 80023fc:	2200      	movs	r2, #0
 80023fe:	2301      	movs	r3, #1
 8002400:	2400      	movs	r4, #0
 8002402:	4690      	mov	r8, r2
 8002404:	e5fc      	b.n	8002000 <__aeabi_ddiv+0xd8>
 8002406:	210f      	movs	r1, #15
 8002408:	4011      	ands	r1, r2
 800240a:	2904      	cmp	r1, #4
 800240c:	d100      	bne.n	8002410 <__aeabi_ddiv+0x4e8>
 800240e:	e773      	b.n	80022f8 <__aeabi_ddiv+0x3d0>
 8002410:	1d11      	adds	r1, r2, #4
 8002412:	4291      	cmp	r1, r2
 8002414:	4192      	sbcs	r2, r2
 8002416:	4252      	negs	r2, r2
 8002418:	002e      	movs	r6, r5
 800241a:	08c9      	lsrs	r1, r1, #3
 800241c:	4493      	add	fp, r2
 800241e:	e76d      	b.n	80022fc <__aeabi_ddiv+0x3d4>
 8002420:	9b00      	ldr	r3, [sp, #0]
 8002422:	3d01      	subs	r5, #1
 8002424:	469c      	mov	ip, r3
 8002426:	4461      	add	r1, ip
 8002428:	428b      	cmp	r3, r1
 800242a:	d900      	bls.n	800242e <__aeabi_ddiv+0x506>
 800242c:	e72c      	b.n	8002288 <__aeabi_ddiv+0x360>
 800242e:	428a      	cmp	r2, r1
 8002430:	d800      	bhi.n	8002434 <__aeabi_ddiv+0x50c>
 8002432:	e729      	b.n	8002288 <__aeabi_ddiv+0x360>
 8002434:	1e85      	subs	r5, r0, #2
 8002436:	4461      	add	r1, ip
 8002438:	e726      	b.n	8002288 <__aeabi_ddiv+0x360>
 800243a:	9900      	ldr	r1, [sp, #0]
 800243c:	3b01      	subs	r3, #1
 800243e:	468c      	mov	ip, r1
 8002440:	4464      	add	r4, ip
 8002442:	42a1      	cmp	r1, r4
 8002444:	d900      	bls.n	8002448 <__aeabi_ddiv+0x520>
 8002446:	e72d      	b.n	80022a4 <__aeabi_ddiv+0x37c>
 8002448:	42a2      	cmp	r2, r4
 800244a:	d800      	bhi.n	800244e <__aeabi_ddiv+0x526>
 800244c:	e72a      	b.n	80022a4 <__aeabi_ddiv+0x37c>
 800244e:	1e83      	subs	r3, r0, #2
 8002450:	4464      	add	r4, ip
 8002452:	e727      	b.n	80022a4 <__aeabi_ddiv+0x37c>
 8002454:	4287      	cmp	r7, r0
 8002456:	d000      	beq.n	800245a <__aeabi_ddiv+0x532>
 8002458:	e6fe      	b.n	8002258 <__aeabi_ddiv+0x330>
 800245a:	45a9      	cmp	r9, r5
 800245c:	d900      	bls.n	8002460 <__aeabi_ddiv+0x538>
 800245e:	e6fb      	b.n	8002258 <__aeabi_ddiv+0x330>
 8002460:	e6f5      	b.n	800224e <__aeabi_ddiv+0x326>
 8002462:	42a2      	cmp	r2, r4
 8002464:	d800      	bhi.n	8002468 <__aeabi_ddiv+0x540>
 8002466:	e6b9      	b.n	80021dc <__aeabi_ddiv+0x2b4>
 8002468:	1e83      	subs	r3, r0, #2
 800246a:	4464      	add	r4, ip
 800246c:	e6b6      	b.n	80021dc <__aeabi_ddiv+0x2b4>
 800246e:	428a      	cmp	r2, r1
 8002470:	d800      	bhi.n	8002474 <__aeabi_ddiv+0x54c>
 8002472:	e69f      	b.n	80021b4 <__aeabi_ddiv+0x28c>
 8002474:	46bc      	mov	ip, r7
 8002476:	1e83      	subs	r3, r0, #2
 8002478:	4698      	mov	r8, r3
 800247a:	4461      	add	r1, ip
 800247c:	e69a      	b.n	80021b4 <__aeabi_ddiv+0x28c>
 800247e:	000a      	movs	r2, r1
 8002480:	4284      	cmp	r4, r0
 8002482:	d000      	beq.n	8002486 <__aeabi_ddiv+0x55e>
 8002484:	e72e      	b.n	80022e4 <__aeabi_ddiv+0x3bc>
 8002486:	454b      	cmp	r3, r9
 8002488:	d000      	beq.n	800248c <__aeabi_ddiv+0x564>
 800248a:	e72b      	b.n	80022e4 <__aeabi_ddiv+0x3bc>
 800248c:	0035      	movs	r5, r6
 800248e:	e72c      	b.n	80022ea <__aeabi_ddiv+0x3c2>
 8002490:	4b2a      	ldr	r3, [pc, #168]	@ (800253c <__aeabi_ddiv+0x614>)
 8002492:	4a2f      	ldr	r2, [pc, #188]	@ (8002550 <__aeabi_ddiv+0x628>)
 8002494:	4453      	add	r3, sl
 8002496:	4592      	cmp	sl, r2
 8002498:	db43      	blt.n	8002522 <__aeabi_ddiv+0x5fa>
 800249a:	2201      	movs	r2, #1
 800249c:	2100      	movs	r1, #0
 800249e:	4493      	add	fp, r2
 80024a0:	e72c      	b.n	80022fc <__aeabi_ddiv+0x3d4>
 80024a2:	42ac      	cmp	r4, r5
 80024a4:	d800      	bhi.n	80024a8 <__aeabi_ddiv+0x580>
 80024a6:	e6d7      	b.n	8002258 <__aeabi_ddiv+0x330>
 80024a8:	2302      	movs	r3, #2
 80024aa:	425b      	negs	r3, r3
 80024ac:	469c      	mov	ip, r3
 80024ae:	9900      	ldr	r1, [sp, #0]
 80024b0:	444d      	add	r5, r9
 80024b2:	454d      	cmp	r5, r9
 80024b4:	419b      	sbcs	r3, r3
 80024b6:	44e3      	add	fp, ip
 80024b8:	468c      	mov	ip, r1
 80024ba:	425b      	negs	r3, r3
 80024bc:	4463      	add	r3, ip
 80024be:	18c0      	adds	r0, r0, r3
 80024c0:	e6cc      	b.n	800225c <__aeabi_ddiv+0x334>
 80024c2:	201f      	movs	r0, #31
 80024c4:	4240      	negs	r0, r0
 80024c6:	1ac3      	subs	r3, r0, r3
 80024c8:	4658      	mov	r0, fp
 80024ca:	40d8      	lsrs	r0, r3
 80024cc:	2920      	cmp	r1, #32
 80024ce:	d004      	beq.n	80024da <__aeabi_ddiv+0x5b2>
 80024d0:	4659      	mov	r1, fp
 80024d2:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <__aeabi_ddiv+0x62c>)
 80024d4:	4453      	add	r3, sl
 80024d6:	4099      	lsls	r1, r3
 80024d8:	430a      	orrs	r2, r1
 80024da:	1e53      	subs	r3, r2, #1
 80024dc:	419a      	sbcs	r2, r3
 80024de:	2307      	movs	r3, #7
 80024e0:	0019      	movs	r1, r3
 80024e2:	4302      	orrs	r2, r0
 80024e4:	2400      	movs	r4, #0
 80024e6:	4011      	ands	r1, r2
 80024e8:	4213      	tst	r3, r2
 80024ea:	d009      	beq.n	8002500 <__aeabi_ddiv+0x5d8>
 80024ec:	3308      	adds	r3, #8
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d01d      	beq.n	8002530 <__aeabi_ddiv+0x608>
 80024f4:	1d13      	adds	r3, r2, #4
 80024f6:	4293      	cmp	r3, r2
 80024f8:	4189      	sbcs	r1, r1
 80024fa:	001a      	movs	r2, r3
 80024fc:	4249      	negs	r1, r1
 80024fe:	0749      	lsls	r1, r1, #29
 8002500:	08d2      	lsrs	r2, r2, #3
 8002502:	430a      	orrs	r2, r1
 8002504:	4690      	mov	r8, r2
 8002506:	2300      	movs	r3, #0
 8002508:	e57a      	b.n	8002000 <__aeabi_ddiv+0xd8>
 800250a:	4649      	mov	r1, r9
 800250c:	9f00      	ldr	r7, [sp, #0]
 800250e:	004d      	lsls	r5, r1, #1
 8002510:	454d      	cmp	r5, r9
 8002512:	4189      	sbcs	r1, r1
 8002514:	46bc      	mov	ip, r7
 8002516:	4249      	negs	r1, r1
 8002518:	4461      	add	r1, ip
 800251a:	46a9      	mov	r9, r5
 800251c:	3a02      	subs	r2, #2
 800251e:	1864      	adds	r4, r4, r1
 8002520:	e7ae      	b.n	8002480 <__aeabi_ddiv+0x558>
 8002522:	2201      	movs	r2, #1
 8002524:	4252      	negs	r2, r2
 8002526:	e746      	b.n	80023b6 <__aeabi_ddiv+0x48e>
 8002528:	4599      	cmp	r9, r3
 800252a:	d3ee      	bcc.n	800250a <__aeabi_ddiv+0x5e2>
 800252c:	000a      	movs	r2, r1
 800252e:	e7aa      	b.n	8002486 <__aeabi_ddiv+0x55e>
 8002530:	2100      	movs	r1, #0
 8002532:	e7e5      	b.n	8002500 <__aeabi_ddiv+0x5d8>
 8002534:	0759      	lsls	r1, r3, #29
 8002536:	025b      	lsls	r3, r3, #9
 8002538:	0b1c      	lsrs	r4, r3, #12
 800253a:	e7e1      	b.n	8002500 <__aeabi_ddiv+0x5d8>
 800253c:	000003ff 	.word	0x000003ff
 8002540:	feffffff 	.word	0xfeffffff
 8002544:	000007fe 	.word	0x000007fe
 8002548:	000007ff 	.word	0x000007ff
 800254c:	0000041e 	.word	0x0000041e
 8002550:	fffffc02 	.word	0xfffffc02
 8002554:	0000043e 	.word	0x0000043e

08002558 <__eqdf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	46de      	mov	lr, fp
 800255e:	464e      	mov	r6, r9
 8002560:	4645      	mov	r5, r8
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	0004      	movs	r4, r0
 8002568:	0fe8      	lsrs	r0, r5, #31
 800256a:	4683      	mov	fp, r0
 800256c:	0309      	lsls	r1, r1, #12
 800256e:	0fd8      	lsrs	r0, r3, #31
 8002570:	0b09      	lsrs	r1, r1, #12
 8002572:	4682      	mov	sl, r0
 8002574:	4819      	ldr	r0, [pc, #100]	@ (80025dc <__eqdf2+0x84>)
 8002576:	468c      	mov	ip, r1
 8002578:	031f      	lsls	r7, r3, #12
 800257a:	0069      	lsls	r1, r5, #1
 800257c:	005e      	lsls	r6, r3, #1
 800257e:	0d49      	lsrs	r1, r1, #21
 8002580:	0b3f      	lsrs	r7, r7, #12
 8002582:	0d76      	lsrs	r6, r6, #21
 8002584:	4281      	cmp	r1, r0
 8002586:	d018      	beq.n	80025ba <__eqdf2+0x62>
 8002588:	4286      	cmp	r6, r0
 800258a:	d00f      	beq.n	80025ac <__eqdf2+0x54>
 800258c:	2001      	movs	r0, #1
 800258e:	42b1      	cmp	r1, r6
 8002590:	d10d      	bne.n	80025ae <__eqdf2+0x56>
 8002592:	45bc      	cmp	ip, r7
 8002594:	d10b      	bne.n	80025ae <__eqdf2+0x56>
 8002596:	4294      	cmp	r4, r2
 8002598:	d109      	bne.n	80025ae <__eqdf2+0x56>
 800259a:	45d3      	cmp	fp, sl
 800259c:	d01c      	beq.n	80025d8 <__eqdf2+0x80>
 800259e:	2900      	cmp	r1, #0
 80025a0:	d105      	bne.n	80025ae <__eqdf2+0x56>
 80025a2:	4660      	mov	r0, ip
 80025a4:	4320      	orrs	r0, r4
 80025a6:	1e43      	subs	r3, r0, #1
 80025a8:	4198      	sbcs	r0, r3
 80025aa:	e000      	b.n	80025ae <__eqdf2+0x56>
 80025ac:	2001      	movs	r0, #1
 80025ae:	bcf0      	pop	{r4, r5, r6, r7}
 80025b0:	46bb      	mov	fp, r7
 80025b2:	46b2      	mov	sl, r6
 80025b4:	46a9      	mov	r9, r5
 80025b6:	46a0      	mov	r8, r4
 80025b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ba:	2001      	movs	r0, #1
 80025bc:	428e      	cmp	r6, r1
 80025be:	d1f6      	bne.n	80025ae <__eqdf2+0x56>
 80025c0:	4661      	mov	r1, ip
 80025c2:	4339      	orrs	r1, r7
 80025c4:	000f      	movs	r7, r1
 80025c6:	4317      	orrs	r7, r2
 80025c8:	4327      	orrs	r7, r4
 80025ca:	d1f0      	bne.n	80025ae <__eqdf2+0x56>
 80025cc:	465b      	mov	r3, fp
 80025ce:	4652      	mov	r2, sl
 80025d0:	1a98      	subs	r0, r3, r2
 80025d2:	1e43      	subs	r3, r0, #1
 80025d4:	4198      	sbcs	r0, r3
 80025d6:	e7ea      	b.n	80025ae <__eqdf2+0x56>
 80025d8:	2000      	movs	r0, #0
 80025da:	e7e8      	b.n	80025ae <__eqdf2+0x56>
 80025dc:	000007ff 	.word	0x000007ff

080025e0 <__gedf2>:
 80025e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e2:	4657      	mov	r7, sl
 80025e4:	464e      	mov	r6, r9
 80025e6:	4645      	mov	r5, r8
 80025e8:	46de      	mov	lr, fp
 80025ea:	b5e0      	push	{r5, r6, r7, lr}
 80025ec:	000d      	movs	r5, r1
 80025ee:	030e      	lsls	r6, r1, #12
 80025f0:	0049      	lsls	r1, r1, #1
 80025f2:	0d49      	lsrs	r1, r1, #21
 80025f4:	468a      	mov	sl, r1
 80025f6:	0fdf      	lsrs	r7, r3, #31
 80025f8:	0fe9      	lsrs	r1, r5, #31
 80025fa:	46bc      	mov	ip, r7
 80025fc:	b083      	sub	sp, #12
 80025fe:	4f2f      	ldr	r7, [pc, #188]	@ (80026bc <__gedf2+0xdc>)
 8002600:	0004      	movs	r4, r0
 8002602:	4680      	mov	r8, r0
 8002604:	9101      	str	r1, [sp, #4]
 8002606:	0058      	lsls	r0, r3, #1
 8002608:	0319      	lsls	r1, r3, #12
 800260a:	4691      	mov	r9, r2
 800260c:	0b36      	lsrs	r6, r6, #12
 800260e:	0b09      	lsrs	r1, r1, #12
 8002610:	0d40      	lsrs	r0, r0, #21
 8002612:	45ba      	cmp	sl, r7
 8002614:	d01d      	beq.n	8002652 <__gedf2+0x72>
 8002616:	42b8      	cmp	r0, r7
 8002618:	d00d      	beq.n	8002636 <__gedf2+0x56>
 800261a:	4657      	mov	r7, sl
 800261c:	2f00      	cmp	r7, #0
 800261e:	d12a      	bne.n	8002676 <__gedf2+0x96>
 8002620:	4334      	orrs	r4, r6
 8002622:	2800      	cmp	r0, #0
 8002624:	d124      	bne.n	8002670 <__gedf2+0x90>
 8002626:	430a      	orrs	r2, r1
 8002628:	d036      	beq.n	8002698 <__gedf2+0xb8>
 800262a:	2c00      	cmp	r4, #0
 800262c:	d141      	bne.n	80026b2 <__gedf2+0xd2>
 800262e:	4663      	mov	r3, ip
 8002630:	0058      	lsls	r0, r3, #1
 8002632:	3801      	subs	r0, #1
 8002634:	e015      	b.n	8002662 <__gedf2+0x82>
 8002636:	4311      	orrs	r1, r2
 8002638:	d138      	bne.n	80026ac <__gedf2+0xcc>
 800263a:	4653      	mov	r3, sl
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <__gedf2+0x64>
 8002640:	4326      	orrs	r6, r4
 8002642:	d0f4      	beq.n	800262e <__gedf2+0x4e>
 8002644:	9b01      	ldr	r3, [sp, #4]
 8002646:	4563      	cmp	r3, ip
 8002648:	d107      	bne.n	800265a <__gedf2+0x7a>
 800264a:	9b01      	ldr	r3, [sp, #4]
 800264c:	0058      	lsls	r0, r3, #1
 800264e:	3801      	subs	r0, #1
 8002650:	e007      	b.n	8002662 <__gedf2+0x82>
 8002652:	4326      	orrs	r6, r4
 8002654:	d12a      	bne.n	80026ac <__gedf2+0xcc>
 8002656:	4550      	cmp	r0, sl
 8002658:	d021      	beq.n	800269e <__gedf2+0xbe>
 800265a:	2001      	movs	r0, #1
 800265c:	9b01      	ldr	r3, [sp, #4]
 800265e:	425f      	negs	r7, r3
 8002660:	4338      	orrs	r0, r7
 8002662:	b003      	add	sp, #12
 8002664:	bcf0      	pop	{r4, r5, r6, r7}
 8002666:	46bb      	mov	fp, r7
 8002668:	46b2      	mov	sl, r6
 800266a:	46a9      	mov	r9, r5
 800266c:	46a0      	mov	r8, r4
 800266e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002670:	2c00      	cmp	r4, #0
 8002672:	d0dc      	beq.n	800262e <__gedf2+0x4e>
 8002674:	e7e6      	b.n	8002644 <__gedf2+0x64>
 8002676:	2800      	cmp	r0, #0
 8002678:	d0ef      	beq.n	800265a <__gedf2+0x7a>
 800267a:	9b01      	ldr	r3, [sp, #4]
 800267c:	4563      	cmp	r3, ip
 800267e:	d1ec      	bne.n	800265a <__gedf2+0x7a>
 8002680:	4582      	cmp	sl, r0
 8002682:	dcea      	bgt.n	800265a <__gedf2+0x7a>
 8002684:	dbe1      	blt.n	800264a <__gedf2+0x6a>
 8002686:	428e      	cmp	r6, r1
 8002688:	d8e7      	bhi.n	800265a <__gedf2+0x7a>
 800268a:	d1de      	bne.n	800264a <__gedf2+0x6a>
 800268c:	45c8      	cmp	r8, r9
 800268e:	d8e4      	bhi.n	800265a <__gedf2+0x7a>
 8002690:	2000      	movs	r0, #0
 8002692:	45c8      	cmp	r8, r9
 8002694:	d2e5      	bcs.n	8002662 <__gedf2+0x82>
 8002696:	e7d8      	b.n	800264a <__gedf2+0x6a>
 8002698:	2c00      	cmp	r4, #0
 800269a:	d0e2      	beq.n	8002662 <__gedf2+0x82>
 800269c:	e7dd      	b.n	800265a <__gedf2+0x7a>
 800269e:	4311      	orrs	r1, r2
 80026a0:	d104      	bne.n	80026ac <__gedf2+0xcc>
 80026a2:	9b01      	ldr	r3, [sp, #4]
 80026a4:	4563      	cmp	r3, ip
 80026a6:	d1d8      	bne.n	800265a <__gedf2+0x7a>
 80026a8:	2000      	movs	r0, #0
 80026aa:	e7da      	b.n	8002662 <__gedf2+0x82>
 80026ac:	2002      	movs	r0, #2
 80026ae:	4240      	negs	r0, r0
 80026b0:	e7d7      	b.n	8002662 <__gedf2+0x82>
 80026b2:	9b01      	ldr	r3, [sp, #4]
 80026b4:	4563      	cmp	r3, ip
 80026b6:	d0e6      	beq.n	8002686 <__gedf2+0xa6>
 80026b8:	e7cf      	b.n	800265a <__gedf2+0x7a>
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	000007ff 	.word	0x000007ff

080026c0 <__ledf2>:
 80026c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c2:	4657      	mov	r7, sl
 80026c4:	464e      	mov	r6, r9
 80026c6:	4645      	mov	r5, r8
 80026c8:	46de      	mov	lr, fp
 80026ca:	b5e0      	push	{r5, r6, r7, lr}
 80026cc:	000d      	movs	r5, r1
 80026ce:	030e      	lsls	r6, r1, #12
 80026d0:	0049      	lsls	r1, r1, #1
 80026d2:	0d49      	lsrs	r1, r1, #21
 80026d4:	468a      	mov	sl, r1
 80026d6:	0fdf      	lsrs	r7, r3, #31
 80026d8:	0fe9      	lsrs	r1, r5, #31
 80026da:	46bc      	mov	ip, r7
 80026dc:	b083      	sub	sp, #12
 80026de:	4f2e      	ldr	r7, [pc, #184]	@ (8002798 <__ledf2+0xd8>)
 80026e0:	0004      	movs	r4, r0
 80026e2:	4680      	mov	r8, r0
 80026e4:	9101      	str	r1, [sp, #4]
 80026e6:	0058      	lsls	r0, r3, #1
 80026e8:	0319      	lsls	r1, r3, #12
 80026ea:	4691      	mov	r9, r2
 80026ec:	0b36      	lsrs	r6, r6, #12
 80026ee:	0b09      	lsrs	r1, r1, #12
 80026f0:	0d40      	lsrs	r0, r0, #21
 80026f2:	45ba      	cmp	sl, r7
 80026f4:	d01e      	beq.n	8002734 <__ledf2+0x74>
 80026f6:	42b8      	cmp	r0, r7
 80026f8:	d00d      	beq.n	8002716 <__ledf2+0x56>
 80026fa:	4657      	mov	r7, sl
 80026fc:	2f00      	cmp	r7, #0
 80026fe:	d127      	bne.n	8002750 <__ledf2+0x90>
 8002700:	4334      	orrs	r4, r6
 8002702:	2800      	cmp	r0, #0
 8002704:	d133      	bne.n	800276e <__ledf2+0xae>
 8002706:	430a      	orrs	r2, r1
 8002708:	d034      	beq.n	8002774 <__ledf2+0xb4>
 800270a:	2c00      	cmp	r4, #0
 800270c:	d140      	bne.n	8002790 <__ledf2+0xd0>
 800270e:	4663      	mov	r3, ip
 8002710:	0058      	lsls	r0, r3, #1
 8002712:	3801      	subs	r0, #1
 8002714:	e015      	b.n	8002742 <__ledf2+0x82>
 8002716:	4311      	orrs	r1, r2
 8002718:	d112      	bne.n	8002740 <__ledf2+0x80>
 800271a:	4653      	mov	r3, sl
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <__ledf2+0x64>
 8002720:	4326      	orrs	r6, r4
 8002722:	d0f4      	beq.n	800270e <__ledf2+0x4e>
 8002724:	9b01      	ldr	r3, [sp, #4]
 8002726:	4563      	cmp	r3, ip
 8002728:	d01d      	beq.n	8002766 <__ledf2+0xa6>
 800272a:	2001      	movs	r0, #1
 800272c:	9b01      	ldr	r3, [sp, #4]
 800272e:	425f      	negs	r7, r3
 8002730:	4338      	orrs	r0, r7
 8002732:	e006      	b.n	8002742 <__ledf2+0x82>
 8002734:	4326      	orrs	r6, r4
 8002736:	d103      	bne.n	8002740 <__ledf2+0x80>
 8002738:	4550      	cmp	r0, sl
 800273a:	d1f6      	bne.n	800272a <__ledf2+0x6a>
 800273c:	4311      	orrs	r1, r2
 800273e:	d01c      	beq.n	800277a <__ledf2+0xba>
 8002740:	2002      	movs	r0, #2
 8002742:	b003      	add	sp, #12
 8002744:	bcf0      	pop	{r4, r5, r6, r7}
 8002746:	46bb      	mov	fp, r7
 8002748:	46b2      	mov	sl, r6
 800274a:	46a9      	mov	r9, r5
 800274c:	46a0      	mov	r8, r4
 800274e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002750:	2800      	cmp	r0, #0
 8002752:	d0ea      	beq.n	800272a <__ledf2+0x6a>
 8002754:	9b01      	ldr	r3, [sp, #4]
 8002756:	4563      	cmp	r3, ip
 8002758:	d1e7      	bne.n	800272a <__ledf2+0x6a>
 800275a:	4582      	cmp	sl, r0
 800275c:	dce5      	bgt.n	800272a <__ledf2+0x6a>
 800275e:	db02      	blt.n	8002766 <__ledf2+0xa6>
 8002760:	428e      	cmp	r6, r1
 8002762:	d8e2      	bhi.n	800272a <__ledf2+0x6a>
 8002764:	d00e      	beq.n	8002784 <__ledf2+0xc4>
 8002766:	9b01      	ldr	r3, [sp, #4]
 8002768:	0058      	lsls	r0, r3, #1
 800276a:	3801      	subs	r0, #1
 800276c:	e7e9      	b.n	8002742 <__ledf2+0x82>
 800276e:	2c00      	cmp	r4, #0
 8002770:	d0cd      	beq.n	800270e <__ledf2+0x4e>
 8002772:	e7d7      	b.n	8002724 <__ledf2+0x64>
 8002774:	2c00      	cmp	r4, #0
 8002776:	d0e4      	beq.n	8002742 <__ledf2+0x82>
 8002778:	e7d7      	b.n	800272a <__ledf2+0x6a>
 800277a:	9b01      	ldr	r3, [sp, #4]
 800277c:	2000      	movs	r0, #0
 800277e:	4563      	cmp	r3, ip
 8002780:	d0df      	beq.n	8002742 <__ledf2+0x82>
 8002782:	e7d2      	b.n	800272a <__ledf2+0x6a>
 8002784:	45c8      	cmp	r8, r9
 8002786:	d8d0      	bhi.n	800272a <__ledf2+0x6a>
 8002788:	2000      	movs	r0, #0
 800278a:	45c8      	cmp	r8, r9
 800278c:	d2d9      	bcs.n	8002742 <__ledf2+0x82>
 800278e:	e7ea      	b.n	8002766 <__ledf2+0xa6>
 8002790:	9b01      	ldr	r3, [sp, #4]
 8002792:	4563      	cmp	r3, ip
 8002794:	d0e4      	beq.n	8002760 <__ledf2+0xa0>
 8002796:	e7c8      	b.n	800272a <__ledf2+0x6a>
 8002798:	000007ff 	.word	0x000007ff

0800279c <__aeabi_dmul>:
 800279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279e:	4657      	mov	r7, sl
 80027a0:	464e      	mov	r6, r9
 80027a2:	46de      	mov	lr, fp
 80027a4:	4645      	mov	r5, r8
 80027a6:	b5e0      	push	{r5, r6, r7, lr}
 80027a8:	001f      	movs	r7, r3
 80027aa:	030b      	lsls	r3, r1, #12
 80027ac:	0b1b      	lsrs	r3, r3, #12
 80027ae:	0016      	movs	r6, r2
 80027b0:	469a      	mov	sl, r3
 80027b2:	0fca      	lsrs	r2, r1, #31
 80027b4:	004b      	lsls	r3, r1, #1
 80027b6:	0004      	movs	r4, r0
 80027b8:	4691      	mov	r9, r2
 80027ba:	b085      	sub	sp, #20
 80027bc:	0d5b      	lsrs	r3, r3, #21
 80027be:	d100      	bne.n	80027c2 <__aeabi_dmul+0x26>
 80027c0:	e1cf      	b.n	8002b62 <__aeabi_dmul+0x3c6>
 80027c2:	4acd      	ldr	r2, [pc, #820]	@ (8002af8 <__aeabi_dmul+0x35c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d055      	beq.n	8002874 <__aeabi_dmul+0xd8>
 80027c8:	4651      	mov	r1, sl
 80027ca:	0f42      	lsrs	r2, r0, #29
 80027cc:	00c9      	lsls	r1, r1, #3
 80027ce:	430a      	orrs	r2, r1
 80027d0:	2180      	movs	r1, #128	@ 0x80
 80027d2:	0409      	lsls	r1, r1, #16
 80027d4:	4311      	orrs	r1, r2
 80027d6:	00c2      	lsls	r2, r0, #3
 80027d8:	4690      	mov	r8, r2
 80027da:	4ac8      	ldr	r2, [pc, #800]	@ (8002afc <__aeabi_dmul+0x360>)
 80027dc:	468a      	mov	sl, r1
 80027de:	4693      	mov	fp, r2
 80027e0:	449b      	add	fp, r3
 80027e2:	2300      	movs	r3, #0
 80027e4:	2500      	movs	r5, #0
 80027e6:	9302      	str	r3, [sp, #8]
 80027e8:	033c      	lsls	r4, r7, #12
 80027ea:	007b      	lsls	r3, r7, #1
 80027ec:	0ffa      	lsrs	r2, r7, #31
 80027ee:	9601      	str	r6, [sp, #4]
 80027f0:	0b24      	lsrs	r4, r4, #12
 80027f2:	0d5b      	lsrs	r3, r3, #21
 80027f4:	9200      	str	r2, [sp, #0]
 80027f6:	d100      	bne.n	80027fa <__aeabi_dmul+0x5e>
 80027f8:	e188      	b.n	8002b0c <__aeabi_dmul+0x370>
 80027fa:	4abf      	ldr	r2, [pc, #764]	@ (8002af8 <__aeabi_dmul+0x35c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d100      	bne.n	8002802 <__aeabi_dmul+0x66>
 8002800:	e092      	b.n	8002928 <__aeabi_dmul+0x18c>
 8002802:	4abe      	ldr	r2, [pc, #760]	@ (8002afc <__aeabi_dmul+0x360>)
 8002804:	4694      	mov	ip, r2
 8002806:	4463      	add	r3, ip
 8002808:	449b      	add	fp, r3
 800280a:	2d0a      	cmp	r5, #10
 800280c:	dc42      	bgt.n	8002894 <__aeabi_dmul+0xf8>
 800280e:	00e4      	lsls	r4, r4, #3
 8002810:	0f73      	lsrs	r3, r6, #29
 8002812:	4323      	orrs	r3, r4
 8002814:	2480      	movs	r4, #128	@ 0x80
 8002816:	4649      	mov	r1, r9
 8002818:	0424      	lsls	r4, r4, #16
 800281a:	431c      	orrs	r4, r3
 800281c:	00f3      	lsls	r3, r6, #3
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	9b00      	ldr	r3, [sp, #0]
 8002822:	2000      	movs	r0, #0
 8002824:	4059      	eors	r1, r3
 8002826:	b2cb      	uxtb	r3, r1
 8002828:	9303      	str	r3, [sp, #12]
 800282a:	2d02      	cmp	r5, #2
 800282c:	dc00      	bgt.n	8002830 <__aeabi_dmul+0x94>
 800282e:	e094      	b.n	800295a <__aeabi_dmul+0x1be>
 8002830:	2301      	movs	r3, #1
 8002832:	40ab      	lsls	r3, r5
 8002834:	001d      	movs	r5, r3
 8002836:	23a6      	movs	r3, #166	@ 0xa6
 8002838:	002a      	movs	r2, r5
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	401a      	ands	r2, r3
 800283e:	421d      	tst	r5, r3
 8002840:	d000      	beq.n	8002844 <__aeabi_dmul+0xa8>
 8002842:	e229      	b.n	8002c98 <__aeabi_dmul+0x4fc>
 8002844:	2390      	movs	r3, #144	@ 0x90
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	421d      	tst	r5, r3
 800284a:	d100      	bne.n	800284e <__aeabi_dmul+0xb2>
 800284c:	e24d      	b.n	8002cea <__aeabi_dmul+0x54e>
 800284e:	2300      	movs	r3, #0
 8002850:	2480      	movs	r4, #128	@ 0x80
 8002852:	4699      	mov	r9, r3
 8002854:	0324      	lsls	r4, r4, #12
 8002856:	4ba8      	ldr	r3, [pc, #672]	@ (8002af8 <__aeabi_dmul+0x35c>)
 8002858:	0010      	movs	r0, r2
 800285a:	464a      	mov	r2, r9
 800285c:	051b      	lsls	r3, r3, #20
 800285e:	4323      	orrs	r3, r4
 8002860:	07d2      	lsls	r2, r2, #31
 8002862:	4313      	orrs	r3, r2
 8002864:	0019      	movs	r1, r3
 8002866:	b005      	add	sp, #20
 8002868:	bcf0      	pop	{r4, r5, r6, r7}
 800286a:	46bb      	mov	fp, r7
 800286c:	46b2      	mov	sl, r6
 800286e:	46a9      	mov	r9, r5
 8002870:	46a0      	mov	r8, r4
 8002872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002874:	4652      	mov	r2, sl
 8002876:	4302      	orrs	r2, r0
 8002878:	4690      	mov	r8, r2
 800287a:	d000      	beq.n	800287e <__aeabi_dmul+0xe2>
 800287c:	e1ac      	b.n	8002bd8 <__aeabi_dmul+0x43c>
 800287e:	469b      	mov	fp, r3
 8002880:	2302      	movs	r3, #2
 8002882:	4692      	mov	sl, r2
 8002884:	2508      	movs	r5, #8
 8002886:	9302      	str	r3, [sp, #8]
 8002888:	e7ae      	b.n	80027e8 <__aeabi_dmul+0x4c>
 800288a:	9b00      	ldr	r3, [sp, #0]
 800288c:	46a2      	mov	sl, r4
 800288e:	4699      	mov	r9, r3
 8002890:	9b01      	ldr	r3, [sp, #4]
 8002892:	4698      	mov	r8, r3
 8002894:	9b02      	ldr	r3, [sp, #8]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d100      	bne.n	800289c <__aeabi_dmul+0x100>
 800289a:	e1ca      	b.n	8002c32 <__aeabi_dmul+0x496>
 800289c:	2b03      	cmp	r3, #3
 800289e:	d100      	bne.n	80028a2 <__aeabi_dmul+0x106>
 80028a0:	e192      	b.n	8002bc8 <__aeabi_dmul+0x42c>
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d110      	bne.n	80028c8 <__aeabi_dmul+0x12c>
 80028a6:	2300      	movs	r3, #0
 80028a8:	2400      	movs	r4, #0
 80028aa:	2200      	movs	r2, #0
 80028ac:	e7d4      	b.n	8002858 <__aeabi_dmul+0xbc>
 80028ae:	2201      	movs	r2, #1
 80028b0:	087b      	lsrs	r3, r7, #1
 80028b2:	403a      	ands	r2, r7
 80028b4:	4313      	orrs	r3, r2
 80028b6:	4652      	mov	r2, sl
 80028b8:	07d2      	lsls	r2, r2, #31
 80028ba:	4313      	orrs	r3, r2
 80028bc:	4698      	mov	r8, r3
 80028be:	4653      	mov	r3, sl
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	469a      	mov	sl, r3
 80028c4:	9b03      	ldr	r3, [sp, #12]
 80028c6:	4699      	mov	r9, r3
 80028c8:	465b      	mov	r3, fp
 80028ca:	1c58      	adds	r0, r3, #1
 80028cc:	2380      	movs	r3, #128	@ 0x80
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	445b      	add	r3, fp
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	dc00      	bgt.n	80028d8 <__aeabi_dmul+0x13c>
 80028d6:	e1b1      	b.n	8002c3c <__aeabi_dmul+0x4a0>
 80028d8:	4642      	mov	r2, r8
 80028da:	0752      	lsls	r2, r2, #29
 80028dc:	d00b      	beq.n	80028f6 <__aeabi_dmul+0x15a>
 80028de:	220f      	movs	r2, #15
 80028e0:	4641      	mov	r1, r8
 80028e2:	400a      	ands	r2, r1
 80028e4:	2a04      	cmp	r2, #4
 80028e6:	d006      	beq.n	80028f6 <__aeabi_dmul+0x15a>
 80028e8:	4642      	mov	r2, r8
 80028ea:	1d11      	adds	r1, r2, #4
 80028ec:	4541      	cmp	r1, r8
 80028ee:	4192      	sbcs	r2, r2
 80028f0:	4688      	mov	r8, r1
 80028f2:	4252      	negs	r2, r2
 80028f4:	4492      	add	sl, r2
 80028f6:	4652      	mov	r2, sl
 80028f8:	01d2      	lsls	r2, r2, #7
 80028fa:	d506      	bpl.n	800290a <__aeabi_dmul+0x16e>
 80028fc:	4652      	mov	r2, sl
 80028fe:	4b80      	ldr	r3, [pc, #512]	@ (8002b00 <__aeabi_dmul+0x364>)
 8002900:	401a      	ands	r2, r3
 8002902:	2380      	movs	r3, #128	@ 0x80
 8002904:	4692      	mov	sl, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	18c3      	adds	r3, r0, r3
 800290a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b04 <__aeabi_dmul+0x368>)
 800290c:	4293      	cmp	r3, r2
 800290e:	dd00      	ble.n	8002912 <__aeabi_dmul+0x176>
 8002910:	e18f      	b.n	8002c32 <__aeabi_dmul+0x496>
 8002912:	4642      	mov	r2, r8
 8002914:	08d1      	lsrs	r1, r2, #3
 8002916:	4652      	mov	r2, sl
 8002918:	0752      	lsls	r2, r2, #29
 800291a:	430a      	orrs	r2, r1
 800291c:	4651      	mov	r1, sl
 800291e:	055b      	lsls	r3, r3, #21
 8002920:	024c      	lsls	r4, r1, #9
 8002922:	0b24      	lsrs	r4, r4, #12
 8002924:	0d5b      	lsrs	r3, r3, #21
 8002926:	e797      	b.n	8002858 <__aeabi_dmul+0xbc>
 8002928:	4b73      	ldr	r3, [pc, #460]	@ (8002af8 <__aeabi_dmul+0x35c>)
 800292a:	4326      	orrs	r6, r4
 800292c:	469c      	mov	ip, r3
 800292e:	44e3      	add	fp, ip
 8002930:	2e00      	cmp	r6, #0
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x19a>
 8002934:	e16f      	b.n	8002c16 <__aeabi_dmul+0x47a>
 8002936:	2303      	movs	r3, #3
 8002938:	4649      	mov	r1, r9
 800293a:	431d      	orrs	r5, r3
 800293c:	9b00      	ldr	r3, [sp, #0]
 800293e:	4059      	eors	r1, r3
 8002940:	b2cb      	uxtb	r3, r1
 8002942:	9303      	str	r3, [sp, #12]
 8002944:	2d0a      	cmp	r5, #10
 8002946:	dd00      	ble.n	800294a <__aeabi_dmul+0x1ae>
 8002948:	e133      	b.n	8002bb2 <__aeabi_dmul+0x416>
 800294a:	2301      	movs	r3, #1
 800294c:	40ab      	lsls	r3, r5
 800294e:	001d      	movs	r5, r3
 8002950:	2303      	movs	r3, #3
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	2288      	movs	r2, #136	@ 0x88
 8002956:	422a      	tst	r2, r5
 8002958:	d197      	bne.n	800288a <__aeabi_dmul+0xee>
 800295a:	4642      	mov	r2, r8
 800295c:	4643      	mov	r3, r8
 800295e:	0412      	lsls	r2, r2, #16
 8002960:	0c12      	lsrs	r2, r2, #16
 8002962:	0016      	movs	r6, r2
 8002964:	9801      	ldr	r0, [sp, #4]
 8002966:	0c1d      	lsrs	r5, r3, #16
 8002968:	0c03      	lsrs	r3, r0, #16
 800296a:	0400      	lsls	r0, r0, #16
 800296c:	0c00      	lsrs	r0, r0, #16
 800296e:	4346      	muls	r6, r0
 8002970:	46b4      	mov	ip, r6
 8002972:	001e      	movs	r6, r3
 8002974:	436e      	muls	r6, r5
 8002976:	9600      	str	r6, [sp, #0]
 8002978:	0016      	movs	r6, r2
 800297a:	0007      	movs	r7, r0
 800297c:	435e      	muls	r6, r3
 800297e:	4661      	mov	r1, ip
 8002980:	46b0      	mov	r8, r6
 8002982:	436f      	muls	r7, r5
 8002984:	0c0e      	lsrs	r6, r1, #16
 8002986:	44b8      	add	r8, r7
 8002988:	4446      	add	r6, r8
 800298a:	42b7      	cmp	r7, r6
 800298c:	d905      	bls.n	800299a <__aeabi_dmul+0x1fe>
 800298e:	2180      	movs	r1, #128	@ 0x80
 8002990:	0249      	lsls	r1, r1, #9
 8002992:	4688      	mov	r8, r1
 8002994:	9f00      	ldr	r7, [sp, #0]
 8002996:	4447      	add	r7, r8
 8002998:	9700      	str	r7, [sp, #0]
 800299a:	4661      	mov	r1, ip
 800299c:	0409      	lsls	r1, r1, #16
 800299e:	0c09      	lsrs	r1, r1, #16
 80029a0:	0c37      	lsrs	r7, r6, #16
 80029a2:	0436      	lsls	r6, r6, #16
 80029a4:	468c      	mov	ip, r1
 80029a6:	0031      	movs	r1, r6
 80029a8:	4461      	add	r1, ip
 80029aa:	9101      	str	r1, [sp, #4]
 80029ac:	0011      	movs	r1, r2
 80029ae:	0c26      	lsrs	r6, r4, #16
 80029b0:	0424      	lsls	r4, r4, #16
 80029b2:	0c24      	lsrs	r4, r4, #16
 80029b4:	4361      	muls	r1, r4
 80029b6:	468c      	mov	ip, r1
 80029b8:	0021      	movs	r1, r4
 80029ba:	4369      	muls	r1, r5
 80029bc:	4689      	mov	r9, r1
 80029be:	4661      	mov	r1, ip
 80029c0:	0c09      	lsrs	r1, r1, #16
 80029c2:	4688      	mov	r8, r1
 80029c4:	4372      	muls	r2, r6
 80029c6:	444a      	add	r2, r9
 80029c8:	4442      	add	r2, r8
 80029ca:	4375      	muls	r5, r6
 80029cc:	4591      	cmp	r9, r2
 80029ce:	d903      	bls.n	80029d8 <__aeabi_dmul+0x23c>
 80029d0:	2180      	movs	r1, #128	@ 0x80
 80029d2:	0249      	lsls	r1, r1, #9
 80029d4:	4688      	mov	r8, r1
 80029d6:	4445      	add	r5, r8
 80029d8:	0c11      	lsrs	r1, r2, #16
 80029da:	4688      	mov	r8, r1
 80029dc:	4661      	mov	r1, ip
 80029de:	0409      	lsls	r1, r1, #16
 80029e0:	0c09      	lsrs	r1, r1, #16
 80029e2:	468c      	mov	ip, r1
 80029e4:	0412      	lsls	r2, r2, #16
 80029e6:	4462      	add	r2, ip
 80029e8:	18b9      	adds	r1, r7, r2
 80029ea:	9102      	str	r1, [sp, #8]
 80029ec:	4651      	mov	r1, sl
 80029ee:	0c09      	lsrs	r1, r1, #16
 80029f0:	468c      	mov	ip, r1
 80029f2:	4651      	mov	r1, sl
 80029f4:	040f      	lsls	r7, r1, #16
 80029f6:	0c3f      	lsrs	r7, r7, #16
 80029f8:	0039      	movs	r1, r7
 80029fa:	4341      	muls	r1, r0
 80029fc:	4445      	add	r5, r8
 80029fe:	4688      	mov	r8, r1
 8002a00:	4661      	mov	r1, ip
 8002a02:	4341      	muls	r1, r0
 8002a04:	468a      	mov	sl, r1
 8002a06:	4641      	mov	r1, r8
 8002a08:	4660      	mov	r0, ip
 8002a0a:	0c09      	lsrs	r1, r1, #16
 8002a0c:	4689      	mov	r9, r1
 8002a0e:	4358      	muls	r0, r3
 8002a10:	437b      	muls	r3, r7
 8002a12:	4453      	add	r3, sl
 8002a14:	444b      	add	r3, r9
 8002a16:	459a      	cmp	sl, r3
 8002a18:	d903      	bls.n	8002a22 <__aeabi_dmul+0x286>
 8002a1a:	2180      	movs	r1, #128	@ 0x80
 8002a1c:	0249      	lsls	r1, r1, #9
 8002a1e:	4689      	mov	r9, r1
 8002a20:	4448      	add	r0, r9
 8002a22:	0c19      	lsrs	r1, r3, #16
 8002a24:	4689      	mov	r9, r1
 8002a26:	4641      	mov	r1, r8
 8002a28:	0409      	lsls	r1, r1, #16
 8002a2a:	0c09      	lsrs	r1, r1, #16
 8002a2c:	4688      	mov	r8, r1
 8002a2e:	0039      	movs	r1, r7
 8002a30:	4361      	muls	r1, r4
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	4443      	add	r3, r8
 8002a36:	4688      	mov	r8, r1
 8002a38:	4661      	mov	r1, ip
 8002a3a:	434c      	muls	r4, r1
 8002a3c:	4371      	muls	r1, r6
 8002a3e:	468c      	mov	ip, r1
 8002a40:	4641      	mov	r1, r8
 8002a42:	4377      	muls	r7, r6
 8002a44:	0c0e      	lsrs	r6, r1, #16
 8002a46:	193f      	adds	r7, r7, r4
 8002a48:	19f6      	adds	r6, r6, r7
 8002a4a:	4448      	add	r0, r9
 8002a4c:	42b4      	cmp	r4, r6
 8002a4e:	d903      	bls.n	8002a58 <__aeabi_dmul+0x2bc>
 8002a50:	2180      	movs	r1, #128	@ 0x80
 8002a52:	0249      	lsls	r1, r1, #9
 8002a54:	4689      	mov	r9, r1
 8002a56:	44cc      	add	ip, r9
 8002a58:	9902      	ldr	r1, [sp, #8]
 8002a5a:	9f00      	ldr	r7, [sp, #0]
 8002a5c:	4689      	mov	r9, r1
 8002a5e:	0431      	lsls	r1, r6, #16
 8002a60:	444f      	add	r7, r9
 8002a62:	4689      	mov	r9, r1
 8002a64:	4641      	mov	r1, r8
 8002a66:	4297      	cmp	r7, r2
 8002a68:	4192      	sbcs	r2, r2
 8002a6a:	040c      	lsls	r4, r1, #16
 8002a6c:	0c24      	lsrs	r4, r4, #16
 8002a6e:	444c      	add	r4, r9
 8002a70:	18ff      	adds	r7, r7, r3
 8002a72:	4252      	negs	r2, r2
 8002a74:	1964      	adds	r4, r4, r5
 8002a76:	18a1      	adds	r1, r4, r2
 8002a78:	429f      	cmp	r7, r3
 8002a7a:	419b      	sbcs	r3, r3
 8002a7c:	4688      	mov	r8, r1
 8002a7e:	4682      	mov	sl, r0
 8002a80:	425b      	negs	r3, r3
 8002a82:	4699      	mov	r9, r3
 8002a84:	4590      	cmp	r8, r2
 8002a86:	4192      	sbcs	r2, r2
 8002a88:	42ac      	cmp	r4, r5
 8002a8a:	41a4      	sbcs	r4, r4
 8002a8c:	44c2      	add	sl, r8
 8002a8e:	44d1      	add	r9, sl
 8002a90:	4252      	negs	r2, r2
 8002a92:	4264      	negs	r4, r4
 8002a94:	4314      	orrs	r4, r2
 8002a96:	4599      	cmp	r9, r3
 8002a98:	419b      	sbcs	r3, r3
 8002a9a:	4582      	cmp	sl, r0
 8002a9c:	4192      	sbcs	r2, r2
 8002a9e:	425b      	negs	r3, r3
 8002aa0:	4252      	negs	r2, r2
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	464a      	mov	r2, r9
 8002aa6:	0c36      	lsrs	r6, r6, #16
 8002aa8:	19a4      	adds	r4, r4, r6
 8002aaa:	18e3      	adds	r3, r4, r3
 8002aac:	4463      	add	r3, ip
 8002aae:	025b      	lsls	r3, r3, #9
 8002ab0:	0dd2      	lsrs	r2, r2, #23
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	9901      	ldr	r1, [sp, #4]
 8002ab6:	4692      	mov	sl, r2
 8002ab8:	027a      	lsls	r2, r7, #9
 8002aba:	430a      	orrs	r2, r1
 8002abc:	1e50      	subs	r0, r2, #1
 8002abe:	4182      	sbcs	r2, r0
 8002ac0:	0dff      	lsrs	r7, r7, #23
 8002ac2:	4317      	orrs	r7, r2
 8002ac4:	464a      	mov	r2, r9
 8002ac6:	0252      	lsls	r2, r2, #9
 8002ac8:	4317      	orrs	r7, r2
 8002aca:	46b8      	mov	r8, r7
 8002acc:	01db      	lsls	r3, r3, #7
 8002ace:	d500      	bpl.n	8002ad2 <__aeabi_dmul+0x336>
 8002ad0:	e6ed      	b.n	80028ae <__aeabi_dmul+0x112>
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <__aeabi_dmul+0x36c>)
 8002ad4:	9a03      	ldr	r2, [sp, #12]
 8002ad6:	445b      	add	r3, fp
 8002ad8:	4691      	mov	r9, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	dc00      	bgt.n	8002ae0 <__aeabi_dmul+0x344>
 8002ade:	e0ac      	b.n	8002c3a <__aeabi_dmul+0x49e>
 8002ae0:	003a      	movs	r2, r7
 8002ae2:	0752      	lsls	r2, r2, #29
 8002ae4:	d100      	bne.n	8002ae8 <__aeabi_dmul+0x34c>
 8002ae6:	e710      	b.n	800290a <__aeabi_dmul+0x16e>
 8002ae8:	220f      	movs	r2, #15
 8002aea:	4658      	mov	r0, fp
 8002aec:	403a      	ands	r2, r7
 8002aee:	2a04      	cmp	r2, #4
 8002af0:	d000      	beq.n	8002af4 <__aeabi_dmul+0x358>
 8002af2:	e6f9      	b.n	80028e8 <__aeabi_dmul+0x14c>
 8002af4:	e709      	b.n	800290a <__aeabi_dmul+0x16e>
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	000007ff 	.word	0x000007ff
 8002afc:	fffffc01 	.word	0xfffffc01
 8002b00:	feffffff 	.word	0xfeffffff
 8002b04:	000007fe 	.word	0x000007fe
 8002b08:	000003ff 	.word	0x000003ff
 8002b0c:	0022      	movs	r2, r4
 8002b0e:	4332      	orrs	r2, r6
 8002b10:	d06f      	beq.n	8002bf2 <__aeabi_dmul+0x456>
 8002b12:	2c00      	cmp	r4, #0
 8002b14:	d100      	bne.n	8002b18 <__aeabi_dmul+0x37c>
 8002b16:	e0c2      	b.n	8002c9e <__aeabi_dmul+0x502>
 8002b18:	0020      	movs	r0, r4
 8002b1a:	f000 fe27 	bl	800376c <__clzsi2>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	0003      	movs	r3, r0
 8002b22:	3a0b      	subs	r2, #11
 8002b24:	201d      	movs	r0, #29
 8002b26:	1a82      	subs	r2, r0, r2
 8002b28:	0030      	movs	r0, r6
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	40d0      	lsrs	r0, r2
 8002b2e:	3908      	subs	r1, #8
 8002b30:	408c      	lsls	r4, r1
 8002b32:	0002      	movs	r2, r0
 8002b34:	4322      	orrs	r2, r4
 8002b36:	0034      	movs	r4, r6
 8002b38:	408c      	lsls	r4, r1
 8002b3a:	4659      	mov	r1, fp
 8002b3c:	1acb      	subs	r3, r1, r3
 8002b3e:	4986      	ldr	r1, [pc, #536]	@ (8002d58 <__aeabi_dmul+0x5bc>)
 8002b40:	468b      	mov	fp, r1
 8002b42:	449b      	add	fp, r3
 8002b44:	2d0a      	cmp	r5, #10
 8002b46:	dd00      	ble.n	8002b4a <__aeabi_dmul+0x3ae>
 8002b48:	e6a4      	b.n	8002894 <__aeabi_dmul+0xf8>
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	9b00      	ldr	r3, [sp, #0]
 8002b4e:	9401      	str	r4, [sp, #4]
 8002b50:	4059      	eors	r1, r3
 8002b52:	b2cb      	uxtb	r3, r1
 8002b54:	0014      	movs	r4, r2
 8002b56:	2000      	movs	r0, #0
 8002b58:	9303      	str	r3, [sp, #12]
 8002b5a:	2d02      	cmp	r5, #2
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dmul+0x3c4>
 8002b5e:	e667      	b.n	8002830 <__aeabi_dmul+0x94>
 8002b60:	e6fb      	b.n	800295a <__aeabi_dmul+0x1be>
 8002b62:	4653      	mov	r3, sl
 8002b64:	4303      	orrs	r3, r0
 8002b66:	4698      	mov	r8, r3
 8002b68:	d03c      	beq.n	8002be4 <__aeabi_dmul+0x448>
 8002b6a:	4653      	mov	r3, sl
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d100      	bne.n	8002b72 <__aeabi_dmul+0x3d6>
 8002b70:	e0a3      	b.n	8002cba <__aeabi_dmul+0x51e>
 8002b72:	4650      	mov	r0, sl
 8002b74:	f000 fdfa 	bl	800376c <__clzsi2>
 8002b78:	230b      	movs	r3, #11
 8002b7a:	425b      	negs	r3, r3
 8002b7c:	469c      	mov	ip, r3
 8002b7e:	0002      	movs	r2, r0
 8002b80:	4484      	add	ip, r0
 8002b82:	0011      	movs	r1, r2
 8002b84:	4650      	mov	r0, sl
 8002b86:	3908      	subs	r1, #8
 8002b88:	4088      	lsls	r0, r1
 8002b8a:	231d      	movs	r3, #29
 8002b8c:	4680      	mov	r8, r0
 8002b8e:	4660      	mov	r0, ip
 8002b90:	1a1b      	subs	r3, r3, r0
 8002b92:	0020      	movs	r0, r4
 8002b94:	40d8      	lsrs	r0, r3
 8002b96:	0003      	movs	r3, r0
 8002b98:	4640      	mov	r0, r8
 8002b9a:	4303      	orrs	r3, r0
 8002b9c:	469a      	mov	sl, r3
 8002b9e:	0023      	movs	r3, r4
 8002ba0:	408b      	lsls	r3, r1
 8002ba2:	4698      	mov	r8, r3
 8002ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8002d58 <__aeabi_dmul+0x5bc>)
 8002ba6:	2500      	movs	r5, #0
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	469b      	mov	fp, r3
 8002bac:	2300      	movs	r3, #0
 8002bae:	9302      	str	r3, [sp, #8]
 8002bb0:	e61a      	b.n	80027e8 <__aeabi_dmul+0x4c>
 8002bb2:	2d0f      	cmp	r5, #15
 8002bb4:	d000      	beq.n	8002bb8 <__aeabi_dmul+0x41c>
 8002bb6:	e0c9      	b.n	8002d4c <__aeabi_dmul+0x5b0>
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	4652      	mov	r2, sl
 8002bbc:	031b      	lsls	r3, r3, #12
 8002bbe:	421a      	tst	r2, r3
 8002bc0:	d002      	beq.n	8002bc8 <__aeabi_dmul+0x42c>
 8002bc2:	421c      	tst	r4, r3
 8002bc4:	d100      	bne.n	8002bc8 <__aeabi_dmul+0x42c>
 8002bc6:	e092      	b.n	8002cee <__aeabi_dmul+0x552>
 8002bc8:	2480      	movs	r4, #128	@ 0x80
 8002bca:	4653      	mov	r3, sl
 8002bcc:	0324      	lsls	r4, r4, #12
 8002bce:	431c      	orrs	r4, r3
 8002bd0:	0324      	lsls	r4, r4, #12
 8002bd2:	4642      	mov	r2, r8
 8002bd4:	0b24      	lsrs	r4, r4, #12
 8002bd6:	e63e      	b.n	8002856 <__aeabi_dmul+0xba>
 8002bd8:	469b      	mov	fp, r3
 8002bda:	2303      	movs	r3, #3
 8002bdc:	4680      	mov	r8, r0
 8002bde:	250c      	movs	r5, #12
 8002be0:	9302      	str	r3, [sp, #8]
 8002be2:	e601      	b.n	80027e8 <__aeabi_dmul+0x4c>
 8002be4:	2300      	movs	r3, #0
 8002be6:	469a      	mov	sl, r3
 8002be8:	469b      	mov	fp, r3
 8002bea:	3301      	adds	r3, #1
 8002bec:	2504      	movs	r5, #4
 8002bee:	9302      	str	r3, [sp, #8]
 8002bf0:	e5fa      	b.n	80027e8 <__aeabi_dmul+0x4c>
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	430d      	orrs	r5, r1
 8002bf6:	2d0a      	cmp	r5, #10
 8002bf8:	dd00      	ble.n	8002bfc <__aeabi_dmul+0x460>
 8002bfa:	e64b      	b.n	8002894 <__aeabi_dmul+0xf8>
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	9800      	ldr	r0, [sp, #0]
 8002c00:	4041      	eors	r1, r0
 8002c02:	b2c9      	uxtb	r1, r1
 8002c04:	9103      	str	r1, [sp, #12]
 8002c06:	2d02      	cmp	r5, #2
 8002c08:	dc00      	bgt.n	8002c0c <__aeabi_dmul+0x470>
 8002c0a:	e096      	b.n	8002d3a <__aeabi_dmul+0x59e>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2400      	movs	r4, #0
 8002c10:	2001      	movs	r0, #1
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	e60c      	b.n	8002830 <__aeabi_dmul+0x94>
 8002c16:	4649      	mov	r1, r9
 8002c18:	2302      	movs	r3, #2
 8002c1a:	9a00      	ldr	r2, [sp, #0]
 8002c1c:	432b      	orrs	r3, r5
 8002c1e:	4051      	eors	r1, r2
 8002c20:	b2ca      	uxtb	r2, r1
 8002c22:	9203      	str	r2, [sp, #12]
 8002c24:	2b0a      	cmp	r3, #10
 8002c26:	dd00      	ble.n	8002c2a <__aeabi_dmul+0x48e>
 8002c28:	e634      	b.n	8002894 <__aeabi_dmul+0xf8>
 8002c2a:	2d00      	cmp	r5, #0
 8002c2c:	d157      	bne.n	8002cde <__aeabi_dmul+0x542>
 8002c2e:	9b03      	ldr	r3, [sp, #12]
 8002c30:	4699      	mov	r9, r3
 8002c32:	2400      	movs	r4, #0
 8002c34:	2200      	movs	r2, #0
 8002c36:	4b49      	ldr	r3, [pc, #292]	@ (8002d5c <__aeabi_dmul+0x5c0>)
 8002c38:	e60e      	b.n	8002858 <__aeabi_dmul+0xbc>
 8002c3a:	4658      	mov	r0, fp
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	1ac9      	subs	r1, r1, r3
 8002c40:	2938      	cmp	r1, #56	@ 0x38
 8002c42:	dd00      	ble.n	8002c46 <__aeabi_dmul+0x4aa>
 8002c44:	e62f      	b.n	80028a6 <__aeabi_dmul+0x10a>
 8002c46:	291f      	cmp	r1, #31
 8002c48:	dd56      	ble.n	8002cf8 <__aeabi_dmul+0x55c>
 8002c4a:	221f      	movs	r2, #31
 8002c4c:	4654      	mov	r4, sl
 8002c4e:	4252      	negs	r2, r2
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	40dc      	lsrs	r4, r3
 8002c54:	2920      	cmp	r1, #32
 8002c56:	d007      	beq.n	8002c68 <__aeabi_dmul+0x4cc>
 8002c58:	4b41      	ldr	r3, [pc, #260]	@ (8002d60 <__aeabi_dmul+0x5c4>)
 8002c5a:	4642      	mov	r2, r8
 8002c5c:	469c      	mov	ip, r3
 8002c5e:	4653      	mov	r3, sl
 8002c60:	4460      	add	r0, ip
 8002c62:	4083      	lsls	r3, r0
 8002c64:	431a      	orrs	r2, r3
 8002c66:	4690      	mov	r8, r2
 8002c68:	4642      	mov	r2, r8
 8002c6a:	2107      	movs	r1, #7
 8002c6c:	1e53      	subs	r3, r2, #1
 8002c6e:	419a      	sbcs	r2, r3
 8002c70:	000b      	movs	r3, r1
 8002c72:	4322      	orrs	r2, r4
 8002c74:	4013      	ands	r3, r2
 8002c76:	2400      	movs	r4, #0
 8002c78:	4211      	tst	r1, r2
 8002c7a:	d009      	beq.n	8002c90 <__aeabi_dmul+0x4f4>
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d05d      	beq.n	8002d40 <__aeabi_dmul+0x5a4>
 8002c84:	1d11      	adds	r1, r2, #4
 8002c86:	4291      	cmp	r1, r2
 8002c88:	419b      	sbcs	r3, r3
 8002c8a:	000a      	movs	r2, r1
 8002c8c:	425b      	negs	r3, r3
 8002c8e:	075b      	lsls	r3, r3, #29
 8002c90:	08d2      	lsrs	r2, r2, #3
 8002c92:	431a      	orrs	r2, r3
 8002c94:	2300      	movs	r3, #0
 8002c96:	e5df      	b.n	8002858 <__aeabi_dmul+0xbc>
 8002c98:	9b03      	ldr	r3, [sp, #12]
 8002c9a:	4699      	mov	r9, r3
 8002c9c:	e5fa      	b.n	8002894 <__aeabi_dmul+0xf8>
 8002c9e:	9801      	ldr	r0, [sp, #4]
 8002ca0:	f000 fd64 	bl	800376c <__clzsi2>
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3215      	adds	r2, #21
 8002caa:	3320      	adds	r3, #32
 8002cac:	2a1c      	cmp	r2, #28
 8002cae:	dc00      	bgt.n	8002cb2 <__aeabi_dmul+0x516>
 8002cb0:	e738      	b.n	8002b24 <__aeabi_dmul+0x388>
 8002cb2:	9a01      	ldr	r2, [sp, #4]
 8002cb4:	3808      	subs	r0, #8
 8002cb6:	4082      	lsls	r2, r0
 8002cb8:	e73f      	b.n	8002b3a <__aeabi_dmul+0x39e>
 8002cba:	f000 fd57 	bl	800376c <__clzsi2>
 8002cbe:	2315      	movs	r3, #21
 8002cc0:	469c      	mov	ip, r3
 8002cc2:	4484      	add	ip, r0
 8002cc4:	0002      	movs	r2, r0
 8002cc6:	4663      	mov	r3, ip
 8002cc8:	3220      	adds	r2, #32
 8002cca:	2b1c      	cmp	r3, #28
 8002ccc:	dc00      	bgt.n	8002cd0 <__aeabi_dmul+0x534>
 8002cce:	e758      	b.n	8002b82 <__aeabi_dmul+0x3e6>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	4698      	mov	r8, r3
 8002cd4:	0023      	movs	r3, r4
 8002cd6:	3808      	subs	r0, #8
 8002cd8:	4083      	lsls	r3, r0
 8002cda:	469a      	mov	sl, r3
 8002cdc:	e762      	b.n	8002ba4 <__aeabi_dmul+0x408>
 8002cde:	001d      	movs	r5, r3
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2400      	movs	r4, #0
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	e5a2      	b.n	8002830 <__aeabi_dmul+0x94>
 8002cea:	9002      	str	r0, [sp, #8]
 8002cec:	e632      	b.n	8002954 <__aeabi_dmul+0x1b8>
 8002cee:	431c      	orrs	r4, r3
 8002cf0:	9b00      	ldr	r3, [sp, #0]
 8002cf2:	9a01      	ldr	r2, [sp, #4]
 8002cf4:	4699      	mov	r9, r3
 8002cf6:	e5ae      	b.n	8002856 <__aeabi_dmul+0xba>
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <__aeabi_dmul+0x5c8>)
 8002cfa:	4652      	mov	r2, sl
 8002cfc:	18c3      	adds	r3, r0, r3
 8002cfe:	4640      	mov	r0, r8
 8002d00:	409a      	lsls	r2, r3
 8002d02:	40c8      	lsrs	r0, r1
 8002d04:	4302      	orrs	r2, r0
 8002d06:	4640      	mov	r0, r8
 8002d08:	4098      	lsls	r0, r3
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	1e58      	subs	r0, r3, #1
 8002d0e:	4183      	sbcs	r3, r0
 8002d10:	4654      	mov	r4, sl
 8002d12:	431a      	orrs	r2, r3
 8002d14:	40cc      	lsrs	r4, r1
 8002d16:	0753      	lsls	r3, r2, #29
 8002d18:	d009      	beq.n	8002d2e <__aeabi_dmul+0x592>
 8002d1a:	230f      	movs	r3, #15
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d005      	beq.n	8002d2e <__aeabi_dmul+0x592>
 8002d22:	1d13      	adds	r3, r2, #4
 8002d24:	4293      	cmp	r3, r2
 8002d26:	4192      	sbcs	r2, r2
 8002d28:	4252      	negs	r2, r2
 8002d2a:	18a4      	adds	r4, r4, r2
 8002d2c:	001a      	movs	r2, r3
 8002d2e:	0223      	lsls	r3, r4, #8
 8002d30:	d508      	bpl.n	8002d44 <__aeabi_dmul+0x5a8>
 8002d32:	2301      	movs	r3, #1
 8002d34:	2400      	movs	r4, #0
 8002d36:	2200      	movs	r2, #0
 8002d38:	e58e      	b.n	8002858 <__aeabi_dmul+0xbc>
 8002d3a:	4689      	mov	r9, r1
 8002d3c:	2400      	movs	r4, #0
 8002d3e:	e58b      	b.n	8002858 <__aeabi_dmul+0xbc>
 8002d40:	2300      	movs	r3, #0
 8002d42:	e7a5      	b.n	8002c90 <__aeabi_dmul+0x4f4>
 8002d44:	0763      	lsls	r3, r4, #29
 8002d46:	0264      	lsls	r4, r4, #9
 8002d48:	0b24      	lsrs	r4, r4, #12
 8002d4a:	e7a1      	b.n	8002c90 <__aeabi_dmul+0x4f4>
 8002d4c:	9b00      	ldr	r3, [sp, #0]
 8002d4e:	46a2      	mov	sl, r4
 8002d50:	4699      	mov	r9, r3
 8002d52:	9b01      	ldr	r3, [sp, #4]
 8002d54:	4698      	mov	r8, r3
 8002d56:	e737      	b.n	8002bc8 <__aeabi_dmul+0x42c>
 8002d58:	fffffc0d 	.word	0xfffffc0d
 8002d5c:	000007ff 	.word	0x000007ff
 8002d60:	0000043e 	.word	0x0000043e
 8002d64:	0000041e 	.word	0x0000041e

08002d68 <__aeabi_dsub>:
 8002d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d6a:	4657      	mov	r7, sl
 8002d6c:	464e      	mov	r6, r9
 8002d6e:	4645      	mov	r5, r8
 8002d70:	46de      	mov	lr, fp
 8002d72:	b5e0      	push	{r5, r6, r7, lr}
 8002d74:	b083      	sub	sp, #12
 8002d76:	9000      	str	r0, [sp, #0]
 8002d78:	9101      	str	r1, [sp, #4]
 8002d7a:	030c      	lsls	r4, r1, #12
 8002d7c:	004d      	lsls	r5, r1, #1
 8002d7e:	0fce      	lsrs	r6, r1, #31
 8002d80:	0a61      	lsrs	r1, r4, #9
 8002d82:	9c00      	ldr	r4, [sp, #0]
 8002d84:	005f      	lsls	r7, r3, #1
 8002d86:	0f64      	lsrs	r4, r4, #29
 8002d88:	430c      	orrs	r4, r1
 8002d8a:	9900      	ldr	r1, [sp, #0]
 8002d8c:	9200      	str	r2, [sp, #0]
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	00c8      	lsls	r0, r1, #3
 8002d92:	0319      	lsls	r1, r3, #12
 8002d94:	0d7b      	lsrs	r3, r7, #21
 8002d96:	4699      	mov	r9, r3
 8002d98:	9b01      	ldr	r3, [sp, #4]
 8002d9a:	4fcc      	ldr	r7, [pc, #816]	@ (80030cc <__aeabi_dsub+0x364>)
 8002d9c:	0fdb      	lsrs	r3, r3, #31
 8002d9e:	469c      	mov	ip, r3
 8002da0:	0a4b      	lsrs	r3, r1, #9
 8002da2:	9900      	ldr	r1, [sp, #0]
 8002da4:	4680      	mov	r8, r0
 8002da6:	0f49      	lsrs	r1, r1, #29
 8002da8:	4319      	orrs	r1, r3
 8002daa:	9b00      	ldr	r3, [sp, #0]
 8002dac:	468b      	mov	fp, r1
 8002dae:	00da      	lsls	r2, r3, #3
 8002db0:	4692      	mov	sl, r2
 8002db2:	0d6d      	lsrs	r5, r5, #21
 8002db4:	45b9      	cmp	r9, r7
 8002db6:	d100      	bne.n	8002dba <__aeabi_dsub+0x52>
 8002db8:	e0bf      	b.n	8002f3a <__aeabi_dsub+0x1d2>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4661      	mov	r1, ip
 8002dbe:	4059      	eors	r1, r3
 8002dc0:	464b      	mov	r3, r9
 8002dc2:	468c      	mov	ip, r1
 8002dc4:	1aeb      	subs	r3, r5, r3
 8002dc6:	428e      	cmp	r6, r1
 8002dc8:	d075      	beq.n	8002eb6 <__aeabi_dsub+0x14e>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	dc00      	bgt.n	8002dd0 <__aeabi_dsub+0x68>
 8002dce:	e2a3      	b.n	8003318 <__aeabi_dsub+0x5b0>
 8002dd0:	4649      	mov	r1, r9
 8002dd2:	2900      	cmp	r1, #0
 8002dd4:	d100      	bne.n	8002dd8 <__aeabi_dsub+0x70>
 8002dd6:	e0ce      	b.n	8002f76 <__aeabi_dsub+0x20e>
 8002dd8:	42bd      	cmp	r5, r7
 8002dda:	d100      	bne.n	8002dde <__aeabi_dsub+0x76>
 8002ddc:	e200      	b.n	80031e0 <__aeabi_dsub+0x478>
 8002dde:	2701      	movs	r7, #1
 8002de0:	2b38      	cmp	r3, #56	@ 0x38
 8002de2:	dc19      	bgt.n	8002e18 <__aeabi_dsub+0xb0>
 8002de4:	2780      	movs	r7, #128	@ 0x80
 8002de6:	4659      	mov	r1, fp
 8002de8:	043f      	lsls	r7, r7, #16
 8002dea:	4339      	orrs	r1, r7
 8002dec:	468b      	mov	fp, r1
 8002dee:	2b1f      	cmp	r3, #31
 8002df0:	dd00      	ble.n	8002df4 <__aeabi_dsub+0x8c>
 8002df2:	e1fa      	b.n	80031ea <__aeabi_dsub+0x482>
 8002df4:	2720      	movs	r7, #32
 8002df6:	1af9      	subs	r1, r7, r3
 8002df8:	468c      	mov	ip, r1
 8002dfa:	4659      	mov	r1, fp
 8002dfc:	4667      	mov	r7, ip
 8002dfe:	40b9      	lsls	r1, r7
 8002e00:	000f      	movs	r7, r1
 8002e02:	0011      	movs	r1, r2
 8002e04:	40d9      	lsrs	r1, r3
 8002e06:	430f      	orrs	r7, r1
 8002e08:	4661      	mov	r1, ip
 8002e0a:	408a      	lsls	r2, r1
 8002e0c:	1e51      	subs	r1, r2, #1
 8002e0e:	418a      	sbcs	r2, r1
 8002e10:	4659      	mov	r1, fp
 8002e12:	40d9      	lsrs	r1, r3
 8002e14:	4317      	orrs	r7, r2
 8002e16:	1a64      	subs	r4, r4, r1
 8002e18:	1bc7      	subs	r7, r0, r7
 8002e1a:	42b8      	cmp	r0, r7
 8002e1c:	4180      	sbcs	r0, r0
 8002e1e:	4240      	negs	r0, r0
 8002e20:	1a24      	subs	r4, r4, r0
 8002e22:	0223      	lsls	r3, r4, #8
 8002e24:	d400      	bmi.n	8002e28 <__aeabi_dsub+0xc0>
 8002e26:	e140      	b.n	80030aa <__aeabi_dsub+0x342>
 8002e28:	0264      	lsls	r4, r4, #9
 8002e2a:	0a64      	lsrs	r4, r4, #9
 8002e2c:	2c00      	cmp	r4, #0
 8002e2e:	d100      	bne.n	8002e32 <__aeabi_dsub+0xca>
 8002e30:	e154      	b.n	80030dc <__aeabi_dsub+0x374>
 8002e32:	0020      	movs	r0, r4
 8002e34:	f000 fc9a 	bl	800376c <__clzsi2>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	3b08      	subs	r3, #8
 8002e3c:	2120      	movs	r1, #32
 8002e3e:	0038      	movs	r0, r7
 8002e40:	1aca      	subs	r2, r1, r3
 8002e42:	40d0      	lsrs	r0, r2
 8002e44:	409c      	lsls	r4, r3
 8002e46:	0002      	movs	r2, r0
 8002e48:	409f      	lsls	r7, r3
 8002e4a:	4322      	orrs	r2, r4
 8002e4c:	429d      	cmp	r5, r3
 8002e4e:	dd00      	ble.n	8002e52 <__aeabi_dsub+0xea>
 8002e50:	e1a6      	b.n	80031a0 <__aeabi_dsub+0x438>
 8002e52:	1b58      	subs	r0, r3, r5
 8002e54:	3001      	adds	r0, #1
 8002e56:	1a09      	subs	r1, r1, r0
 8002e58:	003c      	movs	r4, r7
 8002e5a:	408f      	lsls	r7, r1
 8002e5c:	40c4      	lsrs	r4, r0
 8002e5e:	1e7b      	subs	r3, r7, #1
 8002e60:	419f      	sbcs	r7, r3
 8002e62:	0013      	movs	r3, r2
 8002e64:	408b      	lsls	r3, r1
 8002e66:	4327      	orrs	r7, r4
 8002e68:	431f      	orrs	r7, r3
 8002e6a:	40c2      	lsrs	r2, r0
 8002e6c:	003b      	movs	r3, r7
 8002e6e:	0014      	movs	r4, r2
 8002e70:	2500      	movs	r5, #0
 8002e72:	4313      	orrs	r3, r2
 8002e74:	d100      	bne.n	8002e78 <__aeabi_dsub+0x110>
 8002e76:	e1f7      	b.n	8003268 <__aeabi_dsub+0x500>
 8002e78:	077b      	lsls	r3, r7, #29
 8002e7a:	d100      	bne.n	8002e7e <__aeabi_dsub+0x116>
 8002e7c:	e377      	b.n	800356e <__aeabi_dsub+0x806>
 8002e7e:	230f      	movs	r3, #15
 8002e80:	0038      	movs	r0, r7
 8002e82:	403b      	ands	r3, r7
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d004      	beq.n	8002e92 <__aeabi_dsub+0x12a>
 8002e88:	1d38      	adds	r0, r7, #4
 8002e8a:	42b8      	cmp	r0, r7
 8002e8c:	41bf      	sbcs	r7, r7
 8002e8e:	427f      	negs	r7, r7
 8002e90:	19e4      	adds	r4, r4, r7
 8002e92:	0223      	lsls	r3, r4, #8
 8002e94:	d400      	bmi.n	8002e98 <__aeabi_dsub+0x130>
 8002e96:	e368      	b.n	800356a <__aeabi_dsub+0x802>
 8002e98:	4b8c      	ldr	r3, [pc, #560]	@ (80030cc <__aeabi_dsub+0x364>)
 8002e9a:	3501      	adds	r5, #1
 8002e9c:	429d      	cmp	r5, r3
 8002e9e:	d100      	bne.n	8002ea2 <__aeabi_dsub+0x13a>
 8002ea0:	e0f4      	b.n	800308c <__aeabi_dsub+0x324>
 8002ea2:	4b8b      	ldr	r3, [pc, #556]	@ (80030d0 <__aeabi_dsub+0x368>)
 8002ea4:	056d      	lsls	r5, r5, #21
 8002ea6:	401c      	ands	r4, r3
 8002ea8:	0d6d      	lsrs	r5, r5, #21
 8002eaa:	0767      	lsls	r7, r4, #29
 8002eac:	08c0      	lsrs	r0, r0, #3
 8002eae:	0264      	lsls	r4, r4, #9
 8002eb0:	4307      	orrs	r7, r0
 8002eb2:	0b24      	lsrs	r4, r4, #12
 8002eb4:	e0ec      	b.n	8003090 <__aeabi_dsub+0x328>
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	dc00      	bgt.n	8002ebc <__aeabi_dsub+0x154>
 8002eba:	e329      	b.n	8003510 <__aeabi_dsub+0x7a8>
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	2900      	cmp	r1, #0
 8002ec0:	d000      	beq.n	8002ec4 <__aeabi_dsub+0x15c>
 8002ec2:	e0d6      	b.n	8003072 <__aeabi_dsub+0x30a>
 8002ec4:	4659      	mov	r1, fp
 8002ec6:	4311      	orrs	r1, r2
 8002ec8:	d100      	bne.n	8002ecc <__aeabi_dsub+0x164>
 8002eca:	e12e      	b.n	800312a <__aeabi_dsub+0x3c2>
 8002ecc:	1e59      	subs	r1, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d100      	bne.n	8002ed4 <__aeabi_dsub+0x16c>
 8002ed2:	e1e6      	b.n	80032a2 <__aeabi_dsub+0x53a>
 8002ed4:	42bb      	cmp	r3, r7
 8002ed6:	d100      	bne.n	8002eda <__aeabi_dsub+0x172>
 8002ed8:	e182      	b.n	80031e0 <__aeabi_dsub+0x478>
 8002eda:	2701      	movs	r7, #1
 8002edc:	000b      	movs	r3, r1
 8002ede:	2938      	cmp	r1, #56	@ 0x38
 8002ee0:	dc14      	bgt.n	8002f0c <__aeabi_dsub+0x1a4>
 8002ee2:	2b1f      	cmp	r3, #31
 8002ee4:	dd00      	ble.n	8002ee8 <__aeabi_dsub+0x180>
 8002ee6:	e23c      	b.n	8003362 <__aeabi_dsub+0x5fa>
 8002ee8:	2720      	movs	r7, #32
 8002eea:	1af9      	subs	r1, r7, r3
 8002eec:	468c      	mov	ip, r1
 8002eee:	4659      	mov	r1, fp
 8002ef0:	4667      	mov	r7, ip
 8002ef2:	40b9      	lsls	r1, r7
 8002ef4:	000f      	movs	r7, r1
 8002ef6:	0011      	movs	r1, r2
 8002ef8:	40d9      	lsrs	r1, r3
 8002efa:	430f      	orrs	r7, r1
 8002efc:	4661      	mov	r1, ip
 8002efe:	408a      	lsls	r2, r1
 8002f00:	1e51      	subs	r1, r2, #1
 8002f02:	418a      	sbcs	r2, r1
 8002f04:	4659      	mov	r1, fp
 8002f06:	40d9      	lsrs	r1, r3
 8002f08:	4317      	orrs	r7, r2
 8002f0a:	1864      	adds	r4, r4, r1
 8002f0c:	183f      	adds	r7, r7, r0
 8002f0e:	4287      	cmp	r7, r0
 8002f10:	4180      	sbcs	r0, r0
 8002f12:	4240      	negs	r0, r0
 8002f14:	1824      	adds	r4, r4, r0
 8002f16:	0223      	lsls	r3, r4, #8
 8002f18:	d400      	bmi.n	8002f1c <__aeabi_dsub+0x1b4>
 8002f1a:	e0c6      	b.n	80030aa <__aeabi_dsub+0x342>
 8002f1c:	4b6b      	ldr	r3, [pc, #428]	@ (80030cc <__aeabi_dsub+0x364>)
 8002f1e:	3501      	adds	r5, #1
 8002f20:	429d      	cmp	r5, r3
 8002f22:	d100      	bne.n	8002f26 <__aeabi_dsub+0x1be>
 8002f24:	e0b2      	b.n	800308c <__aeabi_dsub+0x324>
 8002f26:	2101      	movs	r1, #1
 8002f28:	4b69      	ldr	r3, [pc, #420]	@ (80030d0 <__aeabi_dsub+0x368>)
 8002f2a:	087a      	lsrs	r2, r7, #1
 8002f2c:	401c      	ands	r4, r3
 8002f2e:	4039      	ands	r1, r7
 8002f30:	430a      	orrs	r2, r1
 8002f32:	07e7      	lsls	r7, r4, #31
 8002f34:	4317      	orrs	r7, r2
 8002f36:	0864      	lsrs	r4, r4, #1
 8002f38:	e79e      	b.n	8002e78 <__aeabi_dsub+0x110>
 8002f3a:	4b66      	ldr	r3, [pc, #408]	@ (80030d4 <__aeabi_dsub+0x36c>)
 8002f3c:	4311      	orrs	r1, r2
 8002f3e:	468a      	mov	sl, r1
 8002f40:	18eb      	adds	r3, r5, r3
 8002f42:	2900      	cmp	r1, #0
 8002f44:	d028      	beq.n	8002f98 <__aeabi_dsub+0x230>
 8002f46:	4566      	cmp	r6, ip
 8002f48:	d02c      	beq.n	8002fa4 <__aeabi_dsub+0x23c>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d05b      	beq.n	8003006 <__aeabi_dsub+0x29e>
 8002f4e:	2d00      	cmp	r5, #0
 8002f50:	d100      	bne.n	8002f54 <__aeabi_dsub+0x1ec>
 8002f52:	e12c      	b.n	80031ae <__aeabi_dsub+0x446>
 8002f54:	465b      	mov	r3, fp
 8002f56:	4666      	mov	r6, ip
 8002f58:	075f      	lsls	r7, r3, #29
 8002f5a:	08d2      	lsrs	r2, r2, #3
 8002f5c:	4317      	orrs	r7, r2
 8002f5e:	08dd      	lsrs	r5, r3, #3
 8002f60:	003b      	movs	r3, r7
 8002f62:	432b      	orrs	r3, r5
 8002f64:	d100      	bne.n	8002f68 <__aeabi_dsub+0x200>
 8002f66:	e0e2      	b.n	800312e <__aeabi_dsub+0x3c6>
 8002f68:	2480      	movs	r4, #128	@ 0x80
 8002f6a:	0324      	lsls	r4, r4, #12
 8002f6c:	432c      	orrs	r4, r5
 8002f6e:	0324      	lsls	r4, r4, #12
 8002f70:	4d56      	ldr	r5, [pc, #344]	@ (80030cc <__aeabi_dsub+0x364>)
 8002f72:	0b24      	lsrs	r4, r4, #12
 8002f74:	e08c      	b.n	8003090 <__aeabi_dsub+0x328>
 8002f76:	4659      	mov	r1, fp
 8002f78:	4311      	orrs	r1, r2
 8002f7a:	d100      	bne.n	8002f7e <__aeabi_dsub+0x216>
 8002f7c:	e0d5      	b.n	800312a <__aeabi_dsub+0x3c2>
 8002f7e:	1e59      	subs	r1, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d100      	bne.n	8002f86 <__aeabi_dsub+0x21e>
 8002f84:	e1b9      	b.n	80032fa <__aeabi_dsub+0x592>
 8002f86:	42bb      	cmp	r3, r7
 8002f88:	d100      	bne.n	8002f8c <__aeabi_dsub+0x224>
 8002f8a:	e1b1      	b.n	80032f0 <__aeabi_dsub+0x588>
 8002f8c:	2701      	movs	r7, #1
 8002f8e:	000b      	movs	r3, r1
 8002f90:	2938      	cmp	r1, #56	@ 0x38
 8002f92:	dd00      	ble.n	8002f96 <__aeabi_dsub+0x22e>
 8002f94:	e740      	b.n	8002e18 <__aeabi_dsub+0xb0>
 8002f96:	e72a      	b.n	8002dee <__aeabi_dsub+0x86>
 8002f98:	4661      	mov	r1, ip
 8002f9a:	2701      	movs	r7, #1
 8002f9c:	4079      	eors	r1, r7
 8002f9e:	468c      	mov	ip, r1
 8002fa0:	4566      	cmp	r6, ip
 8002fa2:	d1d2      	bne.n	8002f4a <__aeabi_dsub+0x1e2>
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x242>
 8002fa8:	e0c5      	b.n	8003136 <__aeabi_dsub+0x3ce>
 8002faa:	2d00      	cmp	r5, #0
 8002fac:	d000      	beq.n	8002fb0 <__aeabi_dsub+0x248>
 8002fae:	e155      	b.n	800325c <__aeabi_dsub+0x4f4>
 8002fb0:	464b      	mov	r3, r9
 8002fb2:	0025      	movs	r5, r4
 8002fb4:	4305      	orrs	r5, r0
 8002fb6:	d100      	bne.n	8002fba <__aeabi_dsub+0x252>
 8002fb8:	e212      	b.n	80033e0 <__aeabi_dsub+0x678>
 8002fba:	1e59      	subs	r1, r3, #1
 8002fbc:	468c      	mov	ip, r1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d100      	bne.n	8002fc4 <__aeabi_dsub+0x25c>
 8002fc2:	e249      	b.n	8003458 <__aeabi_dsub+0x6f0>
 8002fc4:	4d41      	ldr	r5, [pc, #260]	@ (80030cc <__aeabi_dsub+0x364>)
 8002fc6:	42ab      	cmp	r3, r5
 8002fc8:	d100      	bne.n	8002fcc <__aeabi_dsub+0x264>
 8002fca:	e28f      	b.n	80034ec <__aeabi_dsub+0x784>
 8002fcc:	2701      	movs	r7, #1
 8002fce:	2938      	cmp	r1, #56	@ 0x38
 8002fd0:	dc11      	bgt.n	8002ff6 <__aeabi_dsub+0x28e>
 8002fd2:	4663      	mov	r3, ip
 8002fd4:	2b1f      	cmp	r3, #31
 8002fd6:	dd00      	ble.n	8002fda <__aeabi_dsub+0x272>
 8002fd8:	e25b      	b.n	8003492 <__aeabi_dsub+0x72a>
 8002fda:	4661      	mov	r1, ip
 8002fdc:	2320      	movs	r3, #32
 8002fde:	0027      	movs	r7, r4
 8002fe0:	1a5b      	subs	r3, r3, r1
 8002fe2:	0005      	movs	r5, r0
 8002fe4:	4098      	lsls	r0, r3
 8002fe6:	409f      	lsls	r7, r3
 8002fe8:	40cd      	lsrs	r5, r1
 8002fea:	1e43      	subs	r3, r0, #1
 8002fec:	4198      	sbcs	r0, r3
 8002fee:	40cc      	lsrs	r4, r1
 8002ff0:	432f      	orrs	r7, r5
 8002ff2:	4307      	orrs	r7, r0
 8002ff4:	44a3      	add	fp, r4
 8002ff6:	18bf      	adds	r7, r7, r2
 8002ff8:	4297      	cmp	r7, r2
 8002ffa:	4192      	sbcs	r2, r2
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	445a      	add	r2, fp
 8003000:	0014      	movs	r4, r2
 8003002:	464d      	mov	r5, r9
 8003004:	e787      	b.n	8002f16 <__aeabi_dsub+0x1ae>
 8003006:	4f34      	ldr	r7, [pc, #208]	@ (80030d8 <__aeabi_dsub+0x370>)
 8003008:	1c6b      	adds	r3, r5, #1
 800300a:	423b      	tst	r3, r7
 800300c:	d000      	beq.n	8003010 <__aeabi_dsub+0x2a8>
 800300e:	e0b6      	b.n	800317e <__aeabi_dsub+0x416>
 8003010:	4659      	mov	r1, fp
 8003012:	0023      	movs	r3, r4
 8003014:	4311      	orrs	r1, r2
 8003016:	000f      	movs	r7, r1
 8003018:	4303      	orrs	r3, r0
 800301a:	2d00      	cmp	r5, #0
 800301c:	d000      	beq.n	8003020 <__aeabi_dsub+0x2b8>
 800301e:	e126      	b.n	800326e <__aeabi_dsub+0x506>
 8003020:	2b00      	cmp	r3, #0
 8003022:	d100      	bne.n	8003026 <__aeabi_dsub+0x2be>
 8003024:	e1c0      	b.n	80033a8 <__aeabi_dsub+0x640>
 8003026:	2900      	cmp	r1, #0
 8003028:	d100      	bne.n	800302c <__aeabi_dsub+0x2c4>
 800302a:	e0a1      	b.n	8003170 <__aeabi_dsub+0x408>
 800302c:	1a83      	subs	r3, r0, r2
 800302e:	4698      	mov	r8, r3
 8003030:	465b      	mov	r3, fp
 8003032:	4540      	cmp	r0, r8
 8003034:	41ad      	sbcs	r5, r5
 8003036:	1ae3      	subs	r3, r4, r3
 8003038:	426d      	negs	r5, r5
 800303a:	1b5b      	subs	r3, r3, r5
 800303c:	2580      	movs	r5, #128	@ 0x80
 800303e:	042d      	lsls	r5, r5, #16
 8003040:	422b      	tst	r3, r5
 8003042:	d100      	bne.n	8003046 <__aeabi_dsub+0x2de>
 8003044:	e14b      	b.n	80032de <__aeabi_dsub+0x576>
 8003046:	465b      	mov	r3, fp
 8003048:	1a10      	subs	r0, r2, r0
 800304a:	4282      	cmp	r2, r0
 800304c:	4192      	sbcs	r2, r2
 800304e:	1b1c      	subs	r4, r3, r4
 8003050:	0007      	movs	r7, r0
 8003052:	2601      	movs	r6, #1
 8003054:	4663      	mov	r3, ip
 8003056:	4252      	negs	r2, r2
 8003058:	1aa4      	subs	r4, r4, r2
 800305a:	4327      	orrs	r7, r4
 800305c:	401e      	ands	r6, r3
 800305e:	2f00      	cmp	r7, #0
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x2fc>
 8003062:	e142      	b.n	80032ea <__aeabi_dsub+0x582>
 8003064:	422c      	tst	r4, r5
 8003066:	d100      	bne.n	800306a <__aeabi_dsub+0x302>
 8003068:	e26d      	b.n	8003546 <__aeabi_dsub+0x7de>
 800306a:	4b19      	ldr	r3, [pc, #100]	@ (80030d0 <__aeabi_dsub+0x368>)
 800306c:	2501      	movs	r5, #1
 800306e:	401c      	ands	r4, r3
 8003070:	e71b      	b.n	8002eaa <__aeabi_dsub+0x142>
 8003072:	42bd      	cmp	r5, r7
 8003074:	d100      	bne.n	8003078 <__aeabi_dsub+0x310>
 8003076:	e13b      	b.n	80032f0 <__aeabi_dsub+0x588>
 8003078:	2701      	movs	r7, #1
 800307a:	2b38      	cmp	r3, #56	@ 0x38
 800307c:	dd00      	ble.n	8003080 <__aeabi_dsub+0x318>
 800307e:	e745      	b.n	8002f0c <__aeabi_dsub+0x1a4>
 8003080:	2780      	movs	r7, #128	@ 0x80
 8003082:	4659      	mov	r1, fp
 8003084:	043f      	lsls	r7, r7, #16
 8003086:	4339      	orrs	r1, r7
 8003088:	468b      	mov	fp, r1
 800308a:	e72a      	b.n	8002ee2 <__aeabi_dsub+0x17a>
 800308c:	2400      	movs	r4, #0
 800308e:	2700      	movs	r7, #0
 8003090:	052d      	lsls	r5, r5, #20
 8003092:	4325      	orrs	r5, r4
 8003094:	07f6      	lsls	r6, r6, #31
 8003096:	4335      	orrs	r5, r6
 8003098:	0038      	movs	r0, r7
 800309a:	0029      	movs	r1, r5
 800309c:	b003      	add	sp, #12
 800309e:	bcf0      	pop	{r4, r5, r6, r7}
 80030a0:	46bb      	mov	fp, r7
 80030a2:	46b2      	mov	sl, r6
 80030a4:	46a9      	mov	r9, r5
 80030a6:	46a0      	mov	r8, r4
 80030a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030aa:	077b      	lsls	r3, r7, #29
 80030ac:	d004      	beq.n	80030b8 <__aeabi_dsub+0x350>
 80030ae:	230f      	movs	r3, #15
 80030b0:	403b      	ands	r3, r7
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d000      	beq.n	80030b8 <__aeabi_dsub+0x350>
 80030b6:	e6e7      	b.n	8002e88 <__aeabi_dsub+0x120>
 80030b8:	002b      	movs	r3, r5
 80030ba:	08f8      	lsrs	r0, r7, #3
 80030bc:	4a03      	ldr	r2, [pc, #12]	@ (80030cc <__aeabi_dsub+0x364>)
 80030be:	0767      	lsls	r7, r4, #29
 80030c0:	4307      	orrs	r7, r0
 80030c2:	08e5      	lsrs	r5, r4, #3
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d100      	bne.n	80030ca <__aeabi_dsub+0x362>
 80030c8:	e74a      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80030ca:	e0a5      	b.n	8003218 <__aeabi_dsub+0x4b0>
 80030cc:	000007ff 	.word	0x000007ff
 80030d0:	ff7fffff 	.word	0xff7fffff
 80030d4:	fffff801 	.word	0xfffff801
 80030d8:	000007fe 	.word	0x000007fe
 80030dc:	0038      	movs	r0, r7
 80030de:	f000 fb45 	bl	800376c <__clzsi2>
 80030e2:	0003      	movs	r3, r0
 80030e4:	3318      	adds	r3, #24
 80030e6:	2b1f      	cmp	r3, #31
 80030e8:	dc00      	bgt.n	80030ec <__aeabi_dsub+0x384>
 80030ea:	e6a7      	b.n	8002e3c <__aeabi_dsub+0xd4>
 80030ec:	003a      	movs	r2, r7
 80030ee:	3808      	subs	r0, #8
 80030f0:	4082      	lsls	r2, r0
 80030f2:	429d      	cmp	r5, r3
 80030f4:	dd00      	ble.n	80030f8 <__aeabi_dsub+0x390>
 80030f6:	e08a      	b.n	800320e <__aeabi_dsub+0x4a6>
 80030f8:	1b5b      	subs	r3, r3, r5
 80030fa:	1c58      	adds	r0, r3, #1
 80030fc:	281f      	cmp	r0, #31
 80030fe:	dc00      	bgt.n	8003102 <__aeabi_dsub+0x39a>
 8003100:	e1d8      	b.n	80034b4 <__aeabi_dsub+0x74c>
 8003102:	0017      	movs	r7, r2
 8003104:	3b1f      	subs	r3, #31
 8003106:	40df      	lsrs	r7, r3
 8003108:	2820      	cmp	r0, #32
 800310a:	d005      	beq.n	8003118 <__aeabi_dsub+0x3b0>
 800310c:	2340      	movs	r3, #64	@ 0x40
 800310e:	1a1b      	subs	r3, r3, r0
 8003110:	409a      	lsls	r2, r3
 8003112:	1e53      	subs	r3, r2, #1
 8003114:	419a      	sbcs	r2, r3
 8003116:	4317      	orrs	r7, r2
 8003118:	2500      	movs	r5, #0
 800311a:	2f00      	cmp	r7, #0
 800311c:	d100      	bne.n	8003120 <__aeabi_dsub+0x3b8>
 800311e:	e0e5      	b.n	80032ec <__aeabi_dsub+0x584>
 8003120:	077b      	lsls	r3, r7, #29
 8003122:	d000      	beq.n	8003126 <__aeabi_dsub+0x3be>
 8003124:	e6ab      	b.n	8002e7e <__aeabi_dsub+0x116>
 8003126:	002c      	movs	r4, r5
 8003128:	e7c6      	b.n	80030b8 <__aeabi_dsub+0x350>
 800312a:	08c0      	lsrs	r0, r0, #3
 800312c:	e7c6      	b.n	80030bc <__aeabi_dsub+0x354>
 800312e:	2700      	movs	r7, #0
 8003130:	2400      	movs	r4, #0
 8003132:	4dd1      	ldr	r5, [pc, #836]	@ (8003478 <__aeabi_dsub+0x710>)
 8003134:	e7ac      	b.n	8003090 <__aeabi_dsub+0x328>
 8003136:	4fd1      	ldr	r7, [pc, #836]	@ (800347c <__aeabi_dsub+0x714>)
 8003138:	1c6b      	adds	r3, r5, #1
 800313a:	423b      	tst	r3, r7
 800313c:	d171      	bne.n	8003222 <__aeabi_dsub+0x4ba>
 800313e:	0023      	movs	r3, r4
 8003140:	4303      	orrs	r3, r0
 8003142:	2d00      	cmp	r5, #0
 8003144:	d000      	beq.n	8003148 <__aeabi_dsub+0x3e0>
 8003146:	e14e      	b.n	80033e6 <__aeabi_dsub+0x67e>
 8003148:	4657      	mov	r7, sl
 800314a:	2b00      	cmp	r3, #0
 800314c:	d100      	bne.n	8003150 <__aeabi_dsub+0x3e8>
 800314e:	e1b5      	b.n	80034bc <__aeabi_dsub+0x754>
 8003150:	2f00      	cmp	r7, #0
 8003152:	d00d      	beq.n	8003170 <__aeabi_dsub+0x408>
 8003154:	1883      	adds	r3, r0, r2
 8003156:	4283      	cmp	r3, r0
 8003158:	4180      	sbcs	r0, r0
 800315a:	445c      	add	r4, fp
 800315c:	4240      	negs	r0, r0
 800315e:	1824      	adds	r4, r4, r0
 8003160:	0222      	lsls	r2, r4, #8
 8003162:	d500      	bpl.n	8003166 <__aeabi_dsub+0x3fe>
 8003164:	e1c8      	b.n	80034f8 <__aeabi_dsub+0x790>
 8003166:	001f      	movs	r7, r3
 8003168:	4698      	mov	r8, r3
 800316a:	4327      	orrs	r7, r4
 800316c:	d100      	bne.n	8003170 <__aeabi_dsub+0x408>
 800316e:	e0bc      	b.n	80032ea <__aeabi_dsub+0x582>
 8003170:	4643      	mov	r3, r8
 8003172:	0767      	lsls	r7, r4, #29
 8003174:	08db      	lsrs	r3, r3, #3
 8003176:	431f      	orrs	r7, r3
 8003178:	08e5      	lsrs	r5, r4, #3
 800317a:	2300      	movs	r3, #0
 800317c:	e04c      	b.n	8003218 <__aeabi_dsub+0x4b0>
 800317e:	1a83      	subs	r3, r0, r2
 8003180:	4698      	mov	r8, r3
 8003182:	465b      	mov	r3, fp
 8003184:	4540      	cmp	r0, r8
 8003186:	41bf      	sbcs	r7, r7
 8003188:	1ae3      	subs	r3, r4, r3
 800318a:	427f      	negs	r7, r7
 800318c:	1bdb      	subs	r3, r3, r7
 800318e:	021f      	lsls	r7, r3, #8
 8003190:	d47c      	bmi.n	800328c <__aeabi_dsub+0x524>
 8003192:	4647      	mov	r7, r8
 8003194:	431f      	orrs	r7, r3
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x432>
 8003198:	e0a6      	b.n	80032e8 <__aeabi_dsub+0x580>
 800319a:	001c      	movs	r4, r3
 800319c:	4647      	mov	r7, r8
 800319e:	e645      	b.n	8002e2c <__aeabi_dsub+0xc4>
 80031a0:	4cb7      	ldr	r4, [pc, #732]	@ (8003480 <__aeabi_dsub+0x718>)
 80031a2:	1aed      	subs	r5, r5, r3
 80031a4:	4014      	ands	r4, r2
 80031a6:	077b      	lsls	r3, r7, #29
 80031a8:	d000      	beq.n	80031ac <__aeabi_dsub+0x444>
 80031aa:	e780      	b.n	80030ae <__aeabi_dsub+0x346>
 80031ac:	e784      	b.n	80030b8 <__aeabi_dsub+0x350>
 80031ae:	464b      	mov	r3, r9
 80031b0:	0025      	movs	r5, r4
 80031b2:	4305      	orrs	r5, r0
 80031b4:	d066      	beq.n	8003284 <__aeabi_dsub+0x51c>
 80031b6:	1e5f      	subs	r7, r3, #1
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d100      	bne.n	80031be <__aeabi_dsub+0x456>
 80031bc:	e0fc      	b.n	80033b8 <__aeabi_dsub+0x650>
 80031be:	4dae      	ldr	r5, [pc, #696]	@ (8003478 <__aeabi_dsub+0x710>)
 80031c0:	42ab      	cmp	r3, r5
 80031c2:	d100      	bne.n	80031c6 <__aeabi_dsub+0x45e>
 80031c4:	e15e      	b.n	8003484 <__aeabi_dsub+0x71c>
 80031c6:	4666      	mov	r6, ip
 80031c8:	2f38      	cmp	r7, #56	@ 0x38
 80031ca:	dc00      	bgt.n	80031ce <__aeabi_dsub+0x466>
 80031cc:	e0b4      	b.n	8003338 <__aeabi_dsub+0x5d0>
 80031ce:	2001      	movs	r0, #1
 80031d0:	1a17      	subs	r7, r2, r0
 80031d2:	42ba      	cmp	r2, r7
 80031d4:	4192      	sbcs	r2, r2
 80031d6:	465b      	mov	r3, fp
 80031d8:	4252      	negs	r2, r2
 80031da:	464d      	mov	r5, r9
 80031dc:	1a9c      	subs	r4, r3, r2
 80031de:	e620      	b.n	8002e22 <__aeabi_dsub+0xba>
 80031e0:	0767      	lsls	r7, r4, #29
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	4307      	orrs	r7, r0
 80031e6:	08e5      	lsrs	r5, r4, #3
 80031e8:	e6ba      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80031ea:	001f      	movs	r7, r3
 80031ec:	4659      	mov	r1, fp
 80031ee:	3f20      	subs	r7, #32
 80031f0:	40f9      	lsrs	r1, r7
 80031f2:	000f      	movs	r7, r1
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d005      	beq.n	8003204 <__aeabi_dsub+0x49c>
 80031f8:	2140      	movs	r1, #64	@ 0x40
 80031fa:	1acb      	subs	r3, r1, r3
 80031fc:	4659      	mov	r1, fp
 80031fe:	4099      	lsls	r1, r3
 8003200:	430a      	orrs	r2, r1
 8003202:	4692      	mov	sl, r2
 8003204:	4653      	mov	r3, sl
 8003206:	1e5a      	subs	r2, r3, #1
 8003208:	4193      	sbcs	r3, r2
 800320a:	431f      	orrs	r7, r3
 800320c:	e604      	b.n	8002e18 <__aeabi_dsub+0xb0>
 800320e:	1aeb      	subs	r3, r5, r3
 8003210:	4d9b      	ldr	r5, [pc, #620]	@ (8003480 <__aeabi_dsub+0x718>)
 8003212:	4015      	ands	r5, r2
 8003214:	076f      	lsls	r7, r5, #29
 8003216:	08ed      	lsrs	r5, r5, #3
 8003218:	032c      	lsls	r4, r5, #12
 800321a:	055d      	lsls	r5, r3, #21
 800321c:	0b24      	lsrs	r4, r4, #12
 800321e:	0d6d      	lsrs	r5, r5, #21
 8003220:	e736      	b.n	8003090 <__aeabi_dsub+0x328>
 8003222:	4d95      	ldr	r5, [pc, #596]	@ (8003478 <__aeabi_dsub+0x710>)
 8003224:	42ab      	cmp	r3, r5
 8003226:	d100      	bne.n	800322a <__aeabi_dsub+0x4c2>
 8003228:	e0d6      	b.n	80033d8 <__aeabi_dsub+0x670>
 800322a:	1882      	adds	r2, r0, r2
 800322c:	0021      	movs	r1, r4
 800322e:	4282      	cmp	r2, r0
 8003230:	4180      	sbcs	r0, r0
 8003232:	4459      	add	r1, fp
 8003234:	4240      	negs	r0, r0
 8003236:	1808      	adds	r0, r1, r0
 8003238:	07c7      	lsls	r7, r0, #31
 800323a:	0852      	lsrs	r2, r2, #1
 800323c:	4317      	orrs	r7, r2
 800323e:	0844      	lsrs	r4, r0, #1
 8003240:	0752      	lsls	r2, r2, #29
 8003242:	d400      	bmi.n	8003246 <__aeabi_dsub+0x4de>
 8003244:	e185      	b.n	8003552 <__aeabi_dsub+0x7ea>
 8003246:	220f      	movs	r2, #15
 8003248:	001d      	movs	r5, r3
 800324a:	403a      	ands	r2, r7
 800324c:	2a04      	cmp	r2, #4
 800324e:	d000      	beq.n	8003252 <__aeabi_dsub+0x4ea>
 8003250:	e61a      	b.n	8002e88 <__aeabi_dsub+0x120>
 8003252:	08ff      	lsrs	r7, r7, #3
 8003254:	0764      	lsls	r4, r4, #29
 8003256:	4327      	orrs	r7, r4
 8003258:	0905      	lsrs	r5, r0, #4
 800325a:	e7dd      	b.n	8003218 <__aeabi_dsub+0x4b0>
 800325c:	465b      	mov	r3, fp
 800325e:	08d2      	lsrs	r2, r2, #3
 8003260:	075f      	lsls	r7, r3, #29
 8003262:	4317      	orrs	r7, r2
 8003264:	08dd      	lsrs	r5, r3, #3
 8003266:	e67b      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 8003268:	2700      	movs	r7, #0
 800326a:	2400      	movs	r4, #0
 800326c:	e710      	b.n	8003090 <__aeabi_dsub+0x328>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d000      	beq.n	8003274 <__aeabi_dsub+0x50c>
 8003272:	e0d6      	b.n	8003422 <__aeabi_dsub+0x6ba>
 8003274:	2900      	cmp	r1, #0
 8003276:	d000      	beq.n	800327a <__aeabi_dsub+0x512>
 8003278:	e12f      	b.n	80034da <__aeabi_dsub+0x772>
 800327a:	2480      	movs	r4, #128	@ 0x80
 800327c:	2600      	movs	r6, #0
 800327e:	4d7e      	ldr	r5, [pc, #504]	@ (8003478 <__aeabi_dsub+0x710>)
 8003280:	0324      	lsls	r4, r4, #12
 8003282:	e705      	b.n	8003090 <__aeabi_dsub+0x328>
 8003284:	4666      	mov	r6, ip
 8003286:	465c      	mov	r4, fp
 8003288:	08d0      	lsrs	r0, r2, #3
 800328a:	e717      	b.n	80030bc <__aeabi_dsub+0x354>
 800328c:	465b      	mov	r3, fp
 800328e:	1a17      	subs	r7, r2, r0
 8003290:	42ba      	cmp	r2, r7
 8003292:	4192      	sbcs	r2, r2
 8003294:	1b1c      	subs	r4, r3, r4
 8003296:	2601      	movs	r6, #1
 8003298:	4663      	mov	r3, ip
 800329a:	4252      	negs	r2, r2
 800329c:	1aa4      	subs	r4, r4, r2
 800329e:	401e      	ands	r6, r3
 80032a0:	e5c4      	b.n	8002e2c <__aeabi_dsub+0xc4>
 80032a2:	1883      	adds	r3, r0, r2
 80032a4:	4283      	cmp	r3, r0
 80032a6:	4180      	sbcs	r0, r0
 80032a8:	445c      	add	r4, fp
 80032aa:	4240      	negs	r0, r0
 80032ac:	1825      	adds	r5, r4, r0
 80032ae:	022a      	lsls	r2, r5, #8
 80032b0:	d400      	bmi.n	80032b4 <__aeabi_dsub+0x54c>
 80032b2:	e0da      	b.n	800346a <__aeabi_dsub+0x702>
 80032b4:	4a72      	ldr	r2, [pc, #456]	@ (8003480 <__aeabi_dsub+0x718>)
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	4015      	ands	r5, r2
 80032ba:	07ea      	lsls	r2, r5, #31
 80032bc:	431a      	orrs	r2, r3
 80032be:	0869      	lsrs	r1, r5, #1
 80032c0:	075b      	lsls	r3, r3, #29
 80032c2:	d400      	bmi.n	80032c6 <__aeabi_dsub+0x55e>
 80032c4:	e14a      	b.n	800355c <__aeabi_dsub+0x7f4>
 80032c6:	230f      	movs	r3, #15
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d100      	bne.n	80032d0 <__aeabi_dsub+0x568>
 80032ce:	e0fc      	b.n	80034ca <__aeabi_dsub+0x762>
 80032d0:	1d17      	adds	r7, r2, #4
 80032d2:	4297      	cmp	r7, r2
 80032d4:	41a4      	sbcs	r4, r4
 80032d6:	4264      	negs	r4, r4
 80032d8:	2502      	movs	r5, #2
 80032da:	1864      	adds	r4, r4, r1
 80032dc:	e6ec      	b.n	80030b8 <__aeabi_dsub+0x350>
 80032de:	4647      	mov	r7, r8
 80032e0:	001c      	movs	r4, r3
 80032e2:	431f      	orrs	r7, r3
 80032e4:	d000      	beq.n	80032e8 <__aeabi_dsub+0x580>
 80032e6:	e743      	b.n	8003170 <__aeabi_dsub+0x408>
 80032e8:	2600      	movs	r6, #0
 80032ea:	2500      	movs	r5, #0
 80032ec:	2400      	movs	r4, #0
 80032ee:	e6cf      	b.n	8003090 <__aeabi_dsub+0x328>
 80032f0:	08c0      	lsrs	r0, r0, #3
 80032f2:	0767      	lsls	r7, r4, #29
 80032f4:	4307      	orrs	r7, r0
 80032f6:	08e5      	lsrs	r5, r4, #3
 80032f8:	e632      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80032fa:	1a87      	subs	r7, r0, r2
 80032fc:	465b      	mov	r3, fp
 80032fe:	42b8      	cmp	r0, r7
 8003300:	4180      	sbcs	r0, r0
 8003302:	1ae4      	subs	r4, r4, r3
 8003304:	4240      	negs	r0, r0
 8003306:	1a24      	subs	r4, r4, r0
 8003308:	0223      	lsls	r3, r4, #8
 800330a:	d428      	bmi.n	800335e <__aeabi_dsub+0x5f6>
 800330c:	0763      	lsls	r3, r4, #29
 800330e:	08ff      	lsrs	r7, r7, #3
 8003310:	431f      	orrs	r7, r3
 8003312:	08e5      	lsrs	r5, r4, #3
 8003314:	2301      	movs	r3, #1
 8003316:	e77f      	b.n	8003218 <__aeabi_dsub+0x4b0>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d100      	bne.n	800331e <__aeabi_dsub+0x5b6>
 800331c:	e673      	b.n	8003006 <__aeabi_dsub+0x29e>
 800331e:	464b      	mov	r3, r9
 8003320:	1b5f      	subs	r7, r3, r5
 8003322:	003b      	movs	r3, r7
 8003324:	2d00      	cmp	r5, #0
 8003326:	d100      	bne.n	800332a <__aeabi_dsub+0x5c2>
 8003328:	e742      	b.n	80031b0 <__aeabi_dsub+0x448>
 800332a:	2f38      	cmp	r7, #56	@ 0x38
 800332c:	dd00      	ble.n	8003330 <__aeabi_dsub+0x5c8>
 800332e:	e0ec      	b.n	800350a <__aeabi_dsub+0x7a2>
 8003330:	2380      	movs	r3, #128	@ 0x80
 8003332:	000e      	movs	r6, r1
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	431c      	orrs	r4, r3
 8003338:	2f1f      	cmp	r7, #31
 800333a:	dc25      	bgt.n	8003388 <__aeabi_dsub+0x620>
 800333c:	2520      	movs	r5, #32
 800333e:	0023      	movs	r3, r4
 8003340:	1bed      	subs	r5, r5, r7
 8003342:	0001      	movs	r1, r0
 8003344:	40a8      	lsls	r0, r5
 8003346:	40ab      	lsls	r3, r5
 8003348:	40f9      	lsrs	r1, r7
 800334a:	1e45      	subs	r5, r0, #1
 800334c:	41a8      	sbcs	r0, r5
 800334e:	430b      	orrs	r3, r1
 8003350:	40fc      	lsrs	r4, r7
 8003352:	4318      	orrs	r0, r3
 8003354:	465b      	mov	r3, fp
 8003356:	1b1b      	subs	r3, r3, r4
 8003358:	469b      	mov	fp, r3
 800335a:	e739      	b.n	80031d0 <__aeabi_dsub+0x468>
 800335c:	4666      	mov	r6, ip
 800335e:	2501      	movs	r5, #1
 8003360:	e562      	b.n	8002e28 <__aeabi_dsub+0xc0>
 8003362:	001f      	movs	r7, r3
 8003364:	4659      	mov	r1, fp
 8003366:	3f20      	subs	r7, #32
 8003368:	40f9      	lsrs	r1, r7
 800336a:	468c      	mov	ip, r1
 800336c:	2b20      	cmp	r3, #32
 800336e:	d005      	beq.n	800337c <__aeabi_dsub+0x614>
 8003370:	2740      	movs	r7, #64	@ 0x40
 8003372:	4659      	mov	r1, fp
 8003374:	1afb      	subs	r3, r7, r3
 8003376:	4099      	lsls	r1, r3
 8003378:	430a      	orrs	r2, r1
 800337a:	4692      	mov	sl, r2
 800337c:	4657      	mov	r7, sl
 800337e:	1e7b      	subs	r3, r7, #1
 8003380:	419f      	sbcs	r7, r3
 8003382:	4663      	mov	r3, ip
 8003384:	431f      	orrs	r7, r3
 8003386:	e5c1      	b.n	8002f0c <__aeabi_dsub+0x1a4>
 8003388:	003b      	movs	r3, r7
 800338a:	0025      	movs	r5, r4
 800338c:	3b20      	subs	r3, #32
 800338e:	40dd      	lsrs	r5, r3
 8003390:	2f20      	cmp	r7, #32
 8003392:	d004      	beq.n	800339e <__aeabi_dsub+0x636>
 8003394:	2340      	movs	r3, #64	@ 0x40
 8003396:	1bdb      	subs	r3, r3, r7
 8003398:	409c      	lsls	r4, r3
 800339a:	4320      	orrs	r0, r4
 800339c:	4680      	mov	r8, r0
 800339e:	4640      	mov	r0, r8
 80033a0:	1e43      	subs	r3, r0, #1
 80033a2:	4198      	sbcs	r0, r3
 80033a4:	4328      	orrs	r0, r5
 80033a6:	e713      	b.n	80031d0 <__aeabi_dsub+0x468>
 80033a8:	2900      	cmp	r1, #0
 80033aa:	d09d      	beq.n	80032e8 <__aeabi_dsub+0x580>
 80033ac:	2601      	movs	r6, #1
 80033ae:	4663      	mov	r3, ip
 80033b0:	465c      	mov	r4, fp
 80033b2:	4690      	mov	r8, r2
 80033b4:	401e      	ands	r6, r3
 80033b6:	e6db      	b.n	8003170 <__aeabi_dsub+0x408>
 80033b8:	1a17      	subs	r7, r2, r0
 80033ba:	465b      	mov	r3, fp
 80033bc:	42ba      	cmp	r2, r7
 80033be:	4192      	sbcs	r2, r2
 80033c0:	1b1c      	subs	r4, r3, r4
 80033c2:	4252      	negs	r2, r2
 80033c4:	1aa4      	subs	r4, r4, r2
 80033c6:	0223      	lsls	r3, r4, #8
 80033c8:	d4c8      	bmi.n	800335c <__aeabi_dsub+0x5f4>
 80033ca:	0763      	lsls	r3, r4, #29
 80033cc:	08ff      	lsrs	r7, r7, #3
 80033ce:	431f      	orrs	r7, r3
 80033d0:	4666      	mov	r6, ip
 80033d2:	2301      	movs	r3, #1
 80033d4:	08e5      	lsrs	r5, r4, #3
 80033d6:	e71f      	b.n	8003218 <__aeabi_dsub+0x4b0>
 80033d8:	001d      	movs	r5, r3
 80033da:	2400      	movs	r4, #0
 80033dc:	2700      	movs	r7, #0
 80033de:	e657      	b.n	8003090 <__aeabi_dsub+0x328>
 80033e0:	465c      	mov	r4, fp
 80033e2:	08d0      	lsrs	r0, r2, #3
 80033e4:	e66a      	b.n	80030bc <__aeabi_dsub+0x354>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d100      	bne.n	80033ec <__aeabi_dsub+0x684>
 80033ea:	e737      	b.n	800325c <__aeabi_dsub+0x4f4>
 80033ec:	4653      	mov	r3, sl
 80033ee:	08c0      	lsrs	r0, r0, #3
 80033f0:	0767      	lsls	r7, r4, #29
 80033f2:	4307      	orrs	r7, r0
 80033f4:	08e5      	lsrs	r5, r4, #3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d100      	bne.n	80033fc <__aeabi_dsub+0x694>
 80033fa:	e5b1      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80033fc:	2380      	movs	r3, #128	@ 0x80
 80033fe:	031b      	lsls	r3, r3, #12
 8003400:	421d      	tst	r5, r3
 8003402:	d008      	beq.n	8003416 <__aeabi_dsub+0x6ae>
 8003404:	4659      	mov	r1, fp
 8003406:	08c8      	lsrs	r0, r1, #3
 8003408:	4218      	tst	r0, r3
 800340a:	d104      	bne.n	8003416 <__aeabi_dsub+0x6ae>
 800340c:	08d2      	lsrs	r2, r2, #3
 800340e:	0749      	lsls	r1, r1, #29
 8003410:	430a      	orrs	r2, r1
 8003412:	0017      	movs	r7, r2
 8003414:	0005      	movs	r5, r0
 8003416:	0f7b      	lsrs	r3, r7, #29
 8003418:	00ff      	lsls	r7, r7, #3
 800341a:	08ff      	lsrs	r7, r7, #3
 800341c:	075b      	lsls	r3, r3, #29
 800341e:	431f      	orrs	r7, r3
 8003420:	e59e      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 8003422:	08c0      	lsrs	r0, r0, #3
 8003424:	0763      	lsls	r3, r4, #29
 8003426:	4318      	orrs	r0, r3
 8003428:	08e5      	lsrs	r5, r4, #3
 800342a:	2900      	cmp	r1, #0
 800342c:	d053      	beq.n	80034d6 <__aeabi_dsub+0x76e>
 800342e:	2380      	movs	r3, #128	@ 0x80
 8003430:	031b      	lsls	r3, r3, #12
 8003432:	421d      	tst	r5, r3
 8003434:	d00a      	beq.n	800344c <__aeabi_dsub+0x6e4>
 8003436:	4659      	mov	r1, fp
 8003438:	08cc      	lsrs	r4, r1, #3
 800343a:	421c      	tst	r4, r3
 800343c:	d106      	bne.n	800344c <__aeabi_dsub+0x6e4>
 800343e:	2601      	movs	r6, #1
 8003440:	4663      	mov	r3, ip
 8003442:	0025      	movs	r5, r4
 8003444:	08d0      	lsrs	r0, r2, #3
 8003446:	0749      	lsls	r1, r1, #29
 8003448:	4308      	orrs	r0, r1
 800344a:	401e      	ands	r6, r3
 800344c:	0f47      	lsrs	r7, r0, #29
 800344e:	00c0      	lsls	r0, r0, #3
 8003450:	08c0      	lsrs	r0, r0, #3
 8003452:	077f      	lsls	r7, r7, #29
 8003454:	4307      	orrs	r7, r0
 8003456:	e583      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 8003458:	1883      	adds	r3, r0, r2
 800345a:	4293      	cmp	r3, r2
 800345c:	4192      	sbcs	r2, r2
 800345e:	445c      	add	r4, fp
 8003460:	4252      	negs	r2, r2
 8003462:	18a5      	adds	r5, r4, r2
 8003464:	022a      	lsls	r2, r5, #8
 8003466:	d500      	bpl.n	800346a <__aeabi_dsub+0x702>
 8003468:	e724      	b.n	80032b4 <__aeabi_dsub+0x54c>
 800346a:	076f      	lsls	r7, r5, #29
 800346c:	08db      	lsrs	r3, r3, #3
 800346e:	431f      	orrs	r7, r3
 8003470:	08ed      	lsrs	r5, r5, #3
 8003472:	2301      	movs	r3, #1
 8003474:	e6d0      	b.n	8003218 <__aeabi_dsub+0x4b0>
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	000007ff 	.word	0x000007ff
 800347c:	000007fe 	.word	0x000007fe
 8003480:	ff7fffff 	.word	0xff7fffff
 8003484:	465b      	mov	r3, fp
 8003486:	08d2      	lsrs	r2, r2, #3
 8003488:	075f      	lsls	r7, r3, #29
 800348a:	4666      	mov	r6, ip
 800348c:	4317      	orrs	r7, r2
 800348e:	08dd      	lsrs	r5, r3, #3
 8003490:	e566      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 8003492:	0025      	movs	r5, r4
 8003494:	3b20      	subs	r3, #32
 8003496:	40dd      	lsrs	r5, r3
 8003498:	4663      	mov	r3, ip
 800349a:	2b20      	cmp	r3, #32
 800349c:	d005      	beq.n	80034aa <__aeabi_dsub+0x742>
 800349e:	2340      	movs	r3, #64	@ 0x40
 80034a0:	4661      	mov	r1, ip
 80034a2:	1a5b      	subs	r3, r3, r1
 80034a4:	409c      	lsls	r4, r3
 80034a6:	4320      	orrs	r0, r4
 80034a8:	4680      	mov	r8, r0
 80034aa:	4647      	mov	r7, r8
 80034ac:	1e7b      	subs	r3, r7, #1
 80034ae:	419f      	sbcs	r7, r3
 80034b0:	432f      	orrs	r7, r5
 80034b2:	e5a0      	b.n	8002ff6 <__aeabi_dsub+0x28e>
 80034b4:	2120      	movs	r1, #32
 80034b6:	2700      	movs	r7, #0
 80034b8:	1a09      	subs	r1, r1, r0
 80034ba:	e4d2      	b.n	8002e62 <__aeabi_dsub+0xfa>
 80034bc:	2f00      	cmp	r7, #0
 80034be:	d100      	bne.n	80034c2 <__aeabi_dsub+0x75a>
 80034c0:	e713      	b.n	80032ea <__aeabi_dsub+0x582>
 80034c2:	465c      	mov	r4, fp
 80034c4:	0017      	movs	r7, r2
 80034c6:	2500      	movs	r5, #0
 80034c8:	e5f6      	b.n	80030b8 <__aeabi_dsub+0x350>
 80034ca:	08d7      	lsrs	r7, r2, #3
 80034cc:	0749      	lsls	r1, r1, #29
 80034ce:	2302      	movs	r3, #2
 80034d0:	430f      	orrs	r7, r1
 80034d2:	092d      	lsrs	r5, r5, #4
 80034d4:	e6a0      	b.n	8003218 <__aeabi_dsub+0x4b0>
 80034d6:	0007      	movs	r7, r0
 80034d8:	e542      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80034da:	465b      	mov	r3, fp
 80034dc:	2601      	movs	r6, #1
 80034de:	075f      	lsls	r7, r3, #29
 80034e0:	08dd      	lsrs	r5, r3, #3
 80034e2:	4663      	mov	r3, ip
 80034e4:	08d2      	lsrs	r2, r2, #3
 80034e6:	4317      	orrs	r7, r2
 80034e8:	401e      	ands	r6, r3
 80034ea:	e539      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80034ec:	465b      	mov	r3, fp
 80034ee:	08d2      	lsrs	r2, r2, #3
 80034f0:	075f      	lsls	r7, r3, #29
 80034f2:	4317      	orrs	r7, r2
 80034f4:	08dd      	lsrs	r5, r3, #3
 80034f6:	e533      	b.n	8002f60 <__aeabi_dsub+0x1f8>
 80034f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003574 <__aeabi_dsub+0x80c>)
 80034fa:	08db      	lsrs	r3, r3, #3
 80034fc:	4022      	ands	r2, r4
 80034fe:	0757      	lsls	r7, r2, #29
 8003500:	0252      	lsls	r2, r2, #9
 8003502:	2501      	movs	r5, #1
 8003504:	431f      	orrs	r7, r3
 8003506:	0b14      	lsrs	r4, r2, #12
 8003508:	e5c2      	b.n	8003090 <__aeabi_dsub+0x328>
 800350a:	000e      	movs	r6, r1
 800350c:	2001      	movs	r0, #1
 800350e:	e65f      	b.n	80031d0 <__aeabi_dsub+0x468>
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00d      	beq.n	8003530 <__aeabi_dsub+0x7c8>
 8003514:	464b      	mov	r3, r9
 8003516:	1b5b      	subs	r3, r3, r5
 8003518:	469c      	mov	ip, r3
 800351a:	2d00      	cmp	r5, #0
 800351c:	d100      	bne.n	8003520 <__aeabi_dsub+0x7b8>
 800351e:	e548      	b.n	8002fb2 <__aeabi_dsub+0x24a>
 8003520:	2701      	movs	r7, #1
 8003522:	2b38      	cmp	r3, #56	@ 0x38
 8003524:	dd00      	ble.n	8003528 <__aeabi_dsub+0x7c0>
 8003526:	e566      	b.n	8002ff6 <__aeabi_dsub+0x28e>
 8003528:	2380      	movs	r3, #128	@ 0x80
 800352a:	041b      	lsls	r3, r3, #16
 800352c:	431c      	orrs	r4, r3
 800352e:	e550      	b.n	8002fd2 <__aeabi_dsub+0x26a>
 8003530:	1c6b      	adds	r3, r5, #1
 8003532:	4d11      	ldr	r5, [pc, #68]	@ (8003578 <__aeabi_dsub+0x810>)
 8003534:	422b      	tst	r3, r5
 8003536:	d000      	beq.n	800353a <__aeabi_dsub+0x7d2>
 8003538:	e673      	b.n	8003222 <__aeabi_dsub+0x4ba>
 800353a:	4659      	mov	r1, fp
 800353c:	0023      	movs	r3, r4
 800353e:	4311      	orrs	r1, r2
 8003540:	468a      	mov	sl, r1
 8003542:	4303      	orrs	r3, r0
 8003544:	e600      	b.n	8003148 <__aeabi_dsub+0x3e0>
 8003546:	0767      	lsls	r7, r4, #29
 8003548:	08c0      	lsrs	r0, r0, #3
 800354a:	2300      	movs	r3, #0
 800354c:	4307      	orrs	r7, r0
 800354e:	08e5      	lsrs	r5, r4, #3
 8003550:	e662      	b.n	8003218 <__aeabi_dsub+0x4b0>
 8003552:	0764      	lsls	r4, r4, #29
 8003554:	08ff      	lsrs	r7, r7, #3
 8003556:	4327      	orrs	r7, r4
 8003558:	0905      	lsrs	r5, r0, #4
 800355a:	e65d      	b.n	8003218 <__aeabi_dsub+0x4b0>
 800355c:	08d2      	lsrs	r2, r2, #3
 800355e:	0749      	lsls	r1, r1, #29
 8003560:	4311      	orrs	r1, r2
 8003562:	000f      	movs	r7, r1
 8003564:	2302      	movs	r3, #2
 8003566:	092d      	lsrs	r5, r5, #4
 8003568:	e656      	b.n	8003218 <__aeabi_dsub+0x4b0>
 800356a:	0007      	movs	r7, r0
 800356c:	e5a4      	b.n	80030b8 <__aeabi_dsub+0x350>
 800356e:	0038      	movs	r0, r7
 8003570:	e48f      	b.n	8002e92 <__aeabi_dsub+0x12a>
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	ff7fffff 	.word	0xff7fffff
 8003578:	000007fe 	.word	0x000007fe

0800357c <__aeabi_dcmpun>:
 800357c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800357e:	46c6      	mov	lr, r8
 8003580:	031e      	lsls	r6, r3, #12
 8003582:	0b36      	lsrs	r6, r6, #12
 8003584:	46b0      	mov	r8, r6
 8003586:	4e0d      	ldr	r6, [pc, #52]	@ (80035bc <__aeabi_dcmpun+0x40>)
 8003588:	030c      	lsls	r4, r1, #12
 800358a:	004d      	lsls	r5, r1, #1
 800358c:	005f      	lsls	r7, r3, #1
 800358e:	b500      	push	{lr}
 8003590:	0b24      	lsrs	r4, r4, #12
 8003592:	0d6d      	lsrs	r5, r5, #21
 8003594:	0d7f      	lsrs	r7, r7, #21
 8003596:	42b5      	cmp	r5, r6
 8003598:	d00b      	beq.n	80035b2 <__aeabi_dcmpun+0x36>
 800359a:	4908      	ldr	r1, [pc, #32]	@ (80035bc <__aeabi_dcmpun+0x40>)
 800359c:	2000      	movs	r0, #0
 800359e:	428f      	cmp	r7, r1
 80035a0:	d104      	bne.n	80035ac <__aeabi_dcmpun+0x30>
 80035a2:	4646      	mov	r6, r8
 80035a4:	4316      	orrs	r6, r2
 80035a6:	0030      	movs	r0, r6
 80035a8:	1e43      	subs	r3, r0, #1
 80035aa:	4198      	sbcs	r0, r3
 80035ac:	bc80      	pop	{r7}
 80035ae:	46b8      	mov	r8, r7
 80035b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b2:	4304      	orrs	r4, r0
 80035b4:	2001      	movs	r0, #1
 80035b6:	2c00      	cmp	r4, #0
 80035b8:	d1f8      	bne.n	80035ac <__aeabi_dcmpun+0x30>
 80035ba:	e7ee      	b.n	800359a <__aeabi_dcmpun+0x1e>
 80035bc:	000007ff 	.word	0x000007ff

080035c0 <__aeabi_d2iz>:
 80035c0:	000b      	movs	r3, r1
 80035c2:	0002      	movs	r2, r0
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	4d16      	ldr	r5, [pc, #88]	@ (8003620 <__aeabi_d2iz+0x60>)
 80035c8:	030c      	lsls	r4, r1, #12
 80035ca:	b082      	sub	sp, #8
 80035cc:	0049      	lsls	r1, r1, #1
 80035ce:	2000      	movs	r0, #0
 80035d0:	9200      	str	r2, [sp, #0]
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	0b24      	lsrs	r4, r4, #12
 80035d6:	0d49      	lsrs	r1, r1, #21
 80035d8:	0fde      	lsrs	r6, r3, #31
 80035da:	42a9      	cmp	r1, r5
 80035dc:	dd04      	ble.n	80035e8 <__aeabi_d2iz+0x28>
 80035de:	4811      	ldr	r0, [pc, #68]	@ (8003624 <__aeabi_d2iz+0x64>)
 80035e0:	4281      	cmp	r1, r0
 80035e2:	dd03      	ble.n	80035ec <__aeabi_d2iz+0x2c>
 80035e4:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <__aeabi_d2iz+0x68>)
 80035e6:	18f0      	adds	r0, r6, r3
 80035e8:	b002      	add	sp, #8
 80035ea:	bd70      	pop	{r4, r5, r6, pc}
 80035ec:	2080      	movs	r0, #128	@ 0x80
 80035ee:	0340      	lsls	r0, r0, #13
 80035f0:	4320      	orrs	r0, r4
 80035f2:	4c0e      	ldr	r4, [pc, #56]	@ (800362c <__aeabi_d2iz+0x6c>)
 80035f4:	1a64      	subs	r4, r4, r1
 80035f6:	2c1f      	cmp	r4, #31
 80035f8:	dd08      	ble.n	800360c <__aeabi_d2iz+0x4c>
 80035fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003630 <__aeabi_d2iz+0x70>)
 80035fc:	1a5b      	subs	r3, r3, r1
 80035fe:	40d8      	lsrs	r0, r3
 8003600:	0003      	movs	r3, r0
 8003602:	4258      	negs	r0, r3
 8003604:	2e00      	cmp	r6, #0
 8003606:	d1ef      	bne.n	80035e8 <__aeabi_d2iz+0x28>
 8003608:	0018      	movs	r0, r3
 800360a:	e7ed      	b.n	80035e8 <__aeabi_d2iz+0x28>
 800360c:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <__aeabi_d2iz+0x74>)
 800360e:	9a00      	ldr	r2, [sp, #0]
 8003610:	469c      	mov	ip, r3
 8003612:	0003      	movs	r3, r0
 8003614:	4461      	add	r1, ip
 8003616:	408b      	lsls	r3, r1
 8003618:	40e2      	lsrs	r2, r4
 800361a:	4313      	orrs	r3, r2
 800361c:	e7f1      	b.n	8003602 <__aeabi_d2iz+0x42>
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	000003fe 	.word	0x000003fe
 8003624:	0000041d 	.word	0x0000041d
 8003628:	7fffffff 	.word	0x7fffffff
 800362c:	00000433 	.word	0x00000433
 8003630:	00000413 	.word	0x00000413
 8003634:	fffffbed 	.word	0xfffffbed

08003638 <__aeabi_i2d>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	2800      	cmp	r0, #0
 800363c:	d016      	beq.n	800366c <__aeabi_i2d+0x34>
 800363e:	17c3      	asrs	r3, r0, #31
 8003640:	18c5      	adds	r5, r0, r3
 8003642:	405d      	eors	r5, r3
 8003644:	0fc4      	lsrs	r4, r0, #31
 8003646:	0028      	movs	r0, r5
 8003648:	f000 f890 	bl	800376c <__clzsi2>
 800364c:	4b10      	ldr	r3, [pc, #64]	@ (8003690 <__aeabi_i2d+0x58>)
 800364e:	1a1b      	subs	r3, r3, r0
 8003650:	055b      	lsls	r3, r3, #21
 8003652:	0d5b      	lsrs	r3, r3, #21
 8003654:	280a      	cmp	r0, #10
 8003656:	dc14      	bgt.n	8003682 <__aeabi_i2d+0x4a>
 8003658:	0002      	movs	r2, r0
 800365a:	002e      	movs	r6, r5
 800365c:	3215      	adds	r2, #21
 800365e:	4096      	lsls	r6, r2
 8003660:	220b      	movs	r2, #11
 8003662:	1a12      	subs	r2, r2, r0
 8003664:	40d5      	lsrs	r5, r2
 8003666:	032d      	lsls	r5, r5, #12
 8003668:	0b2d      	lsrs	r5, r5, #12
 800366a:	e003      	b.n	8003674 <__aeabi_i2d+0x3c>
 800366c:	2400      	movs	r4, #0
 800366e:	2300      	movs	r3, #0
 8003670:	2500      	movs	r5, #0
 8003672:	2600      	movs	r6, #0
 8003674:	051b      	lsls	r3, r3, #20
 8003676:	432b      	orrs	r3, r5
 8003678:	07e4      	lsls	r4, r4, #31
 800367a:	4323      	orrs	r3, r4
 800367c:	0030      	movs	r0, r6
 800367e:	0019      	movs	r1, r3
 8003680:	bd70      	pop	{r4, r5, r6, pc}
 8003682:	380b      	subs	r0, #11
 8003684:	4085      	lsls	r5, r0
 8003686:	032d      	lsls	r5, r5, #12
 8003688:	2600      	movs	r6, #0
 800368a:	0b2d      	lsrs	r5, r5, #12
 800368c:	e7f2      	b.n	8003674 <__aeabi_i2d+0x3c>
 800368e:	46c0      	nop			@ (mov r8, r8)
 8003690:	0000041e 	.word	0x0000041e

08003694 <__aeabi_ui2d>:
 8003694:	b510      	push	{r4, lr}
 8003696:	1e04      	subs	r4, r0, #0
 8003698:	d010      	beq.n	80036bc <__aeabi_ui2d+0x28>
 800369a:	f000 f867 	bl	800376c <__clzsi2>
 800369e:	4b0e      	ldr	r3, [pc, #56]	@ (80036d8 <__aeabi_ui2d+0x44>)
 80036a0:	1a1b      	subs	r3, r3, r0
 80036a2:	055b      	lsls	r3, r3, #21
 80036a4:	0d5b      	lsrs	r3, r3, #21
 80036a6:	280a      	cmp	r0, #10
 80036a8:	dc0f      	bgt.n	80036ca <__aeabi_ui2d+0x36>
 80036aa:	220b      	movs	r2, #11
 80036ac:	0021      	movs	r1, r4
 80036ae:	1a12      	subs	r2, r2, r0
 80036b0:	40d1      	lsrs	r1, r2
 80036b2:	3015      	adds	r0, #21
 80036b4:	030a      	lsls	r2, r1, #12
 80036b6:	4084      	lsls	r4, r0
 80036b8:	0b12      	lsrs	r2, r2, #12
 80036ba:	e001      	b.n	80036c0 <__aeabi_ui2d+0x2c>
 80036bc:	2300      	movs	r3, #0
 80036be:	2200      	movs	r2, #0
 80036c0:	051b      	lsls	r3, r3, #20
 80036c2:	4313      	orrs	r3, r2
 80036c4:	0020      	movs	r0, r4
 80036c6:	0019      	movs	r1, r3
 80036c8:	bd10      	pop	{r4, pc}
 80036ca:	0022      	movs	r2, r4
 80036cc:	380b      	subs	r0, #11
 80036ce:	4082      	lsls	r2, r0
 80036d0:	0312      	lsls	r2, r2, #12
 80036d2:	2400      	movs	r4, #0
 80036d4:	0b12      	lsrs	r2, r2, #12
 80036d6:	e7f3      	b.n	80036c0 <__aeabi_ui2d+0x2c>
 80036d8:	0000041e 	.word	0x0000041e

080036dc <__aeabi_f2d>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	0242      	lsls	r2, r0, #9
 80036e0:	0043      	lsls	r3, r0, #1
 80036e2:	0fc4      	lsrs	r4, r0, #31
 80036e4:	20fe      	movs	r0, #254	@ 0xfe
 80036e6:	0e1b      	lsrs	r3, r3, #24
 80036e8:	1c59      	adds	r1, r3, #1
 80036ea:	0a55      	lsrs	r5, r2, #9
 80036ec:	4208      	tst	r0, r1
 80036ee:	d00c      	beq.n	800370a <__aeabi_f2d+0x2e>
 80036f0:	21e0      	movs	r1, #224	@ 0xe0
 80036f2:	0089      	lsls	r1, r1, #2
 80036f4:	468c      	mov	ip, r1
 80036f6:	076d      	lsls	r5, r5, #29
 80036f8:	0b12      	lsrs	r2, r2, #12
 80036fa:	4463      	add	r3, ip
 80036fc:	051b      	lsls	r3, r3, #20
 80036fe:	4313      	orrs	r3, r2
 8003700:	07e4      	lsls	r4, r4, #31
 8003702:	4323      	orrs	r3, r4
 8003704:	0028      	movs	r0, r5
 8003706:	0019      	movs	r1, r3
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	2b00      	cmp	r3, #0
 800370c:	d114      	bne.n	8003738 <__aeabi_f2d+0x5c>
 800370e:	2d00      	cmp	r5, #0
 8003710:	d01b      	beq.n	800374a <__aeabi_f2d+0x6e>
 8003712:	0028      	movs	r0, r5
 8003714:	f000 f82a 	bl	800376c <__clzsi2>
 8003718:	280a      	cmp	r0, #10
 800371a:	dc1c      	bgt.n	8003756 <__aeabi_f2d+0x7a>
 800371c:	230b      	movs	r3, #11
 800371e:	002a      	movs	r2, r5
 8003720:	1a1b      	subs	r3, r3, r0
 8003722:	40da      	lsrs	r2, r3
 8003724:	0003      	movs	r3, r0
 8003726:	3315      	adds	r3, #21
 8003728:	409d      	lsls	r5, r3
 800372a:	4b0e      	ldr	r3, [pc, #56]	@ (8003764 <__aeabi_f2d+0x88>)
 800372c:	0312      	lsls	r2, r2, #12
 800372e:	1a1b      	subs	r3, r3, r0
 8003730:	055b      	lsls	r3, r3, #21
 8003732:	0b12      	lsrs	r2, r2, #12
 8003734:	0d5b      	lsrs	r3, r3, #21
 8003736:	e7e1      	b.n	80036fc <__aeabi_f2d+0x20>
 8003738:	2d00      	cmp	r5, #0
 800373a:	d009      	beq.n	8003750 <__aeabi_f2d+0x74>
 800373c:	0b13      	lsrs	r3, r2, #12
 800373e:	2280      	movs	r2, #128	@ 0x80
 8003740:	0312      	lsls	r2, r2, #12
 8003742:	431a      	orrs	r2, r3
 8003744:	076d      	lsls	r5, r5, #29
 8003746:	4b08      	ldr	r3, [pc, #32]	@ (8003768 <__aeabi_f2d+0x8c>)
 8003748:	e7d8      	b.n	80036fc <__aeabi_f2d+0x20>
 800374a:	2300      	movs	r3, #0
 800374c:	2200      	movs	r2, #0
 800374e:	e7d5      	b.n	80036fc <__aeabi_f2d+0x20>
 8003750:	2200      	movs	r2, #0
 8003752:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <__aeabi_f2d+0x8c>)
 8003754:	e7d2      	b.n	80036fc <__aeabi_f2d+0x20>
 8003756:	0003      	movs	r3, r0
 8003758:	002a      	movs	r2, r5
 800375a:	3b0b      	subs	r3, #11
 800375c:	409a      	lsls	r2, r3
 800375e:	2500      	movs	r5, #0
 8003760:	e7e3      	b.n	800372a <__aeabi_f2d+0x4e>
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	00000389 	.word	0x00000389
 8003768:	000007ff 	.word	0x000007ff

0800376c <__clzsi2>:
 800376c:	211c      	movs	r1, #28
 800376e:	2301      	movs	r3, #1
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	4298      	cmp	r0, r3
 8003774:	d301      	bcc.n	800377a <__clzsi2+0xe>
 8003776:	0c00      	lsrs	r0, r0, #16
 8003778:	3910      	subs	r1, #16
 800377a:	0a1b      	lsrs	r3, r3, #8
 800377c:	4298      	cmp	r0, r3
 800377e:	d301      	bcc.n	8003784 <__clzsi2+0x18>
 8003780:	0a00      	lsrs	r0, r0, #8
 8003782:	3908      	subs	r1, #8
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	4298      	cmp	r0, r3
 8003788:	d301      	bcc.n	800378e <__clzsi2+0x22>
 800378a:	0900      	lsrs	r0, r0, #4
 800378c:	3904      	subs	r1, #4
 800378e:	a202      	add	r2, pc, #8	@ (adr r2, 8003798 <__clzsi2+0x2c>)
 8003790:	5c10      	ldrb	r0, [r2, r0]
 8003792:	1840      	adds	r0, r0, r1
 8003794:	4770      	bx	lr
 8003796:	46c0      	nop			@ (mov r8, r8)
 8003798:	02020304 	.word	0x02020304
 800379c:	01010101 	.word	0x01010101
	...

080037a8 <__clzdi2>:
 80037a8:	b510      	push	{r4, lr}
 80037aa:	2900      	cmp	r1, #0
 80037ac:	d103      	bne.n	80037b6 <__clzdi2+0xe>
 80037ae:	f7ff ffdd 	bl	800376c <__clzsi2>
 80037b2:	3020      	adds	r0, #32
 80037b4:	e002      	b.n	80037bc <__clzdi2+0x14>
 80037b6:	0008      	movs	r0, r1
 80037b8:	f7ff ffd8 	bl	800376c <__clzsi2>
 80037bc:	bd10      	pop	{r4, pc}
 80037be:	46c0      	nop			@ (mov r8, r8)

080037c0 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 80037c0:	b5b0      	push	{r4, r5, r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme68x_soft_reset(dev);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f000 f93a 	bl	8003a44 <bme68x_soft_reset>

    rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	250f      	movs	r5, #15
 80037d4:	197c      	adds	r4, r7, r5
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	20d0      	movs	r0, #208	@ 0xd0
 80037dc:	f000 f8d8 	bl	8003990 <bme68x_get_regs>
 80037e0:	0003      	movs	r3, r0
 80037e2:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 80037e4:	197b      	adds	r3, r7, r5
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	b25b      	sxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d11b      	bne.n	8003826 <bme68x_init+0x66>
    {
        if (dev->chip_id == BME68X_CHIP_ID)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b61      	cmp	r3, #97	@ 0x61
 80037f4:	d113      	bne.n	800381e <bme68x_init+0x5e>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 80037f6:	197c      	adds	r4, r7, r5
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f002 fae8 	bl	8005dd0 <read_variant_id>
 8003800:	0003      	movs	r3, r0
 8003802:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8003804:	197b      	adds	r3, r7, r5
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	b25b      	sxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10b      	bne.n	8003826 <bme68x_init+0x66>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 800380e:	197c      	adds	r4, r7, r5
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	0018      	movs	r0, r3
 8003814:	f002 f9a5 	bl	8005b62 <get_calib_data>
 8003818:	0003      	movs	r3, r0
 800381a:	7023      	strb	r3, [r4, #0]
 800381c:	e003      	b.n	8003826 <bme68x_init+0x66>
            }
        }
        else
        {
            rslt = BME68X_E_DEV_NOT_FOUND;
 800381e:	230f      	movs	r3, #15
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	22fd      	movs	r2, #253	@ 0xfd
 8003824:	701a      	strb	r2, [r3, #0]
        }
    }

    return rslt;
 8003826:	230f      	movs	r3, #15
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	b25b      	sxtb	r3, r3
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b004      	add	sp, #16
 8003834:	bdb0      	pop	{r4, r5, r7, pc}

08003836 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8003836:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003838:	b08b      	sub	sp, #44	@ 0x2c
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8003844:	2310      	movs	r3, #16
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	0018      	movs	r0, r3
 800384a:	2314      	movs	r3, #20
 800384c:	001a      	movs	r2, r3
 800384e:	2100      	movs	r1, #0
 8003850:	f007 f9dc 	bl	800ac0c <memset>
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003854:	2527      	movs	r5, #39	@ 0x27
 8003856:	197c      	adds	r4, r7, r5
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	0018      	movs	r0, r3
 800385c:	f001 feff 	bl	800565e <null_ptr_check>
 8003860:	0003      	movs	r3, r0
 8003862:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8003864:	197b      	adds	r3, r7, r5
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	b25b      	sxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d000      	beq.n	8003870 <bme68x_set_regs+0x3a>
 800386e:	e083      	b.n	8003978 <bme68x_set_regs+0x142>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d100      	bne.n	8003878 <bme68x_set_regs+0x42>
 8003876:	e07f      	b.n	8003978 <bme68x_set_regs+0x142>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d100      	bne.n	8003880 <bme68x_set_regs+0x4a>
 800387e:	e07b      	b.n	8003978 <bme68x_set_regs+0x142>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d100      	bne.n	8003888 <bme68x_set_regs+0x52>
 8003886:	e070      	b.n	800396a <bme68x_set_regs+0x134>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b0a      	cmp	r3, #10
 800388c:	d900      	bls.n	8003890 <bme68x_set_regs+0x5a>
 800388e:	e06c      	b.n	800396a <bme68x_set_regs+0x134>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8003890:	2324      	movs	r3, #36	@ 0x24
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	2200      	movs	r2, #0
 8003896:	801a      	strh	r2, [r3, #0]
 8003898:	e03f      	b.n	800391a <bme68x_set_regs+0xe4>
            {
                if (dev->intf == BME68X_SPI_INTF)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	7b1b      	ldrb	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d11d      	bne.n	80038de <bme68x_set_regs+0xa8>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 80038a2:	2524      	movs	r5, #36	@ 0x24
 80038a4:	197b      	adds	r3, r7, r5
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	18d3      	adds	r3, r2, r3
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2227      	movs	r2, #39	@ 0x27
 80038b0:	18bc      	adds	r4, r7, r2
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	0011      	movs	r1, r2
 80038b6:	0018      	movs	r0, r3
 80038b8:	f001 fde3 	bl	8005482 <set_mem_page>
 80038bc:	0003      	movs	r3, r0
 80038be:	7023      	strb	r3, [r4, #0]
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80038c0:	197b      	adds	r3, r7, r5
 80038c2:	881b      	ldrh	r3, [r3, #0]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	18d3      	adds	r3, r2, r3
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	197b      	adds	r3, r7, r5
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	217f      	movs	r1, #127	@ 0x7f
 80038d2:	400a      	ands	r2, r1
 80038d4:	b2d1      	uxtb	r1, r2
 80038d6:	2210      	movs	r2, #16
 80038d8:	18ba      	adds	r2, r7, r2
 80038da:	54d1      	strb	r1, [r2, r3]
 80038dc:	e00b      	b.n	80038f6 <bme68x_set_regs+0xc0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 80038de:	2124      	movs	r1, #36	@ 0x24
 80038e0:	187b      	adds	r3, r7, r1
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	18d2      	adds	r2, r2, r3
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	7811      	ldrb	r1, [r2, #0]
 80038f0:	2210      	movs	r2, #16
 80038f2:	18ba      	adds	r2, r7, r2
 80038f4:	54d1      	strb	r1, [r2, r3]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 80038f6:	2024      	movs	r0, #36	@ 0x24
 80038f8:	183b      	adds	r3, r7, r0
 80038fa:	881b      	ldrh	r3, [r3, #0]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	18d2      	adds	r2, r2, r3
 8003900:	183b      	adds	r3, r7, r0
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	3301      	adds	r3, #1
 8003908:	7811      	ldrb	r1, [r2, #0]
 800390a:	2210      	movs	r2, #16
 800390c:	18ba      	adds	r2, r7, r2
 800390e:	54d1      	strb	r1, [r2, r3]
            for (index = 0; index < len; index++)
 8003910:	183b      	adds	r3, r7, r0
 8003912:	881a      	ldrh	r2, [r3, #0]
 8003914:	183b      	adds	r3, r7, r0
 8003916:	3201      	adds	r2, #1
 8003918:	801a      	strh	r2, [r3, #0]
 800391a:	2324      	movs	r3, #36	@ 0x24
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	429a      	cmp	r2, r3
 8003924:	d8b9      	bhi.n	800389a <bme68x_set_regs+0x64>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8003926:	2627      	movs	r6, #39	@ 0x27
 8003928:	19bb      	adds	r3, r7, r6
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	b25b      	sxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d120      	bne.n	8003974 <bme68x_set_regs+0x13e>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8003936:	2110      	movs	r1, #16
 8003938:	187b      	adds	r3, r7, r1
 800393a:	7818      	ldrb	r0, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	1e5a      	subs	r2, r3, #1
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685d      	ldr	r5, [r3, #4]
 8003946:	187b      	adds	r3, r7, r1
 8003948:	1c59      	adds	r1, r3, #1
 800394a:	002b      	movs	r3, r5
 800394c:	47a0      	blx	r4
 800394e:	0003      	movs	r3, r0
 8003950:	0019      	movs	r1, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	224c      	movs	r2, #76	@ 0x4c
 8003956:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	224c      	movs	r2, #76	@ 0x4c
 800395c:	569b      	ldrsb	r3, [r3, r2]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d008      	beq.n	8003974 <bme68x_set_regs+0x13e>
                {
                    rslt = BME68X_E_COM_FAIL;
 8003962:	19bb      	adds	r3, r7, r6
 8003964:	22fe      	movs	r2, #254	@ 0xfe
 8003966:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8003968:	e004      	b.n	8003974 <bme68x_set_regs+0x13e>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 800396a:	2327      	movs	r3, #39	@ 0x27
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	22fc      	movs	r2, #252	@ 0xfc
 8003970:	701a      	strb	r2, [r3, #0]
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8003972:	e005      	b.n	8003980 <bme68x_set_regs+0x14a>
            if (rslt == BME68X_OK)
 8003974:	46c0      	nop			@ (mov r8, r8)
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8003976:	e003      	b.n	8003980 <bme68x_set_regs+0x14a>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003978:	2327      	movs	r3, #39	@ 0x27
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	22ff      	movs	r2, #255	@ 0xff
 800397e:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003980:	2327      	movs	r3, #39	@ 0x27
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	b25b      	sxtb	r3, r3
}
 8003988:	0018      	movs	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	b00b      	add	sp, #44	@ 0x2c
 800398e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003990 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8003990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	250f      	movs	r5, #15
 800399e:	197b      	adds	r3, r7, r5
 80039a0:	1c02      	adds	r2, r0, #0
 80039a2:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80039a4:	2617      	movs	r6, #23
 80039a6:	19bc      	adds	r4, r7, r6
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	0018      	movs	r0, r3
 80039ac:	f001 fe57 	bl	800565e <null_ptr_check>
 80039b0:	0003      	movs	r3, r0
 80039b2:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && reg_data)
 80039b4:	19bb      	adds	r3, r7, r6
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	b25b      	sxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d136      	bne.n	8003a2c <bme68x_get_regs+0x9c>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d033      	beq.n	8003a2c <bme68x_get_regs+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	7b1b      	ldrb	r3, [r3, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d115      	bne.n	80039f8 <bme68x_get_regs+0x68>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 80039cc:	19bc      	adds	r4, r7, r6
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	197b      	adds	r3, r7, r5
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	0011      	movs	r1, r2
 80039d6:	0018      	movs	r0, r3
 80039d8:	f001 fd53 	bl	8005482 <set_mem_page>
 80039dc:	0003      	movs	r3, r0
 80039de:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 80039e0:	19bb      	adds	r3, r7, r6
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <bme68x_get_regs+0x68>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 80039ea:	197b      	adds	r3, r7, r5
 80039ec:	197a      	adds	r2, r7, r5
 80039ee:	7812      	ldrb	r2, [r2, #0]
 80039f0:	2180      	movs	r1, #128	@ 0x80
 80039f2:	4249      	negs	r1, r1
 80039f4:	430a      	orrs	r2, r1
 80039f6:	701a      	strb	r2, [r3, #0]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685d      	ldr	r5, [r3, #4]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	230f      	movs	r3, #15
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	7818      	ldrb	r0, [r3, #0]
 8003a0a:	002b      	movs	r3, r5
 8003a0c:	47a0      	blx	r4
 8003a0e:	0003      	movs	r3, r0
 8003a10:	0019      	movs	r1, r3
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	224c      	movs	r2, #76	@ 0x4c
 8003a16:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	224c      	movs	r2, #76	@ 0x4c
 8003a1c:	569b      	ldrsb	r3, [r3, r2]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d008      	beq.n	8003a34 <bme68x_get_regs+0xa4>
        {
            rslt = BME68X_E_COM_FAIL;
 8003a22:	2317      	movs	r3, #23
 8003a24:	18fb      	adds	r3, r7, r3
 8003a26:	22fe      	movs	r2, #254	@ 0xfe
 8003a28:	701a      	strb	r2, [r3, #0]
        if (dev->intf_rslt != 0)
 8003a2a:	e003      	b.n	8003a34 <bme68x_get_regs+0xa4>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003a2c:	2317      	movs	r3, #23
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	22ff      	movs	r2, #255	@ 0xff
 8003a32:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003a34:	2317      	movs	r3, #23
 8003a36:	18fb      	adds	r3, r7, r3
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	b25b      	sxtb	r3, r3
}
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b007      	add	sp, #28
 8003a42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a44 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8003a44:	b5b0      	push	{r4, r5, r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8003a4c:	230e      	movs	r3, #14
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	22e0      	movs	r2, #224	@ 0xe0
 8003a52:	701a      	strb	r2, [r3, #0]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8003a54:	230d      	movs	r3, #13
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	22b6      	movs	r2, #182	@ 0xb6
 8003a5a:	701a      	strb	r2, [r3, #0]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8003a5c:	250f      	movs	r5, #15
 8003a5e:	197c      	adds	r4, r7, r5
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	0018      	movs	r0, r3
 8003a64:	f001 fdfb 	bl	800565e <null_ptr_check>
 8003a68:	0003      	movs	r3, r0
 8003a6a:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8003a6c:	002a      	movs	r2, r5
 8003a6e:	18bb      	adds	r3, r7, r2
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	b25b      	sxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d133      	bne.n	8003ae0 <bme68x_soft_reset+0x9c>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	7b1b      	ldrb	r3, [r3, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d106      	bne.n	8003a8e <bme68x_soft_reset+0x4a>
        {
            rslt = get_mem_page(dev);
 8003a80:	18bc      	adds	r4, r7, r2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f001 fd79 	bl	800557c <get_mem_page>
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	7023      	strb	r3, [r4, #0]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8003a8e:	250f      	movs	r5, #15
 8003a90:	197b      	adds	r3, r7, r5
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b25b      	sxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d122      	bne.n	8003ae0 <bme68x_soft_reset+0x9c>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8003a9a:	197c      	adds	r4, r7, r5
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	220d      	movs	r2, #13
 8003aa0:	18b9      	adds	r1, r7, r2
 8003aa2:	220e      	movs	r2, #14
 8003aa4:	18b8      	adds	r0, r7, r2
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f7ff fec5 	bl	8003836 <bme68x_set_regs>
 8003aac:	0003      	movs	r3, r0
 8003aae:	7023      	strb	r3, [r4, #0]

            if (rslt == BME68X_OK)
 8003ab0:	002c      	movs	r4, r5
 8003ab2:	193b      	adds	r3, r7, r4
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b25b      	sxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d111      	bne.n	8003ae0 <bme68x_soft_reset+0x9c>
            {
                /* Wait for 5ms */
                dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	480a      	ldr	r0, [pc, #40]	@ (8003af0 <bme68x_soft_reset+0xac>)
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	4790      	blx	r2

                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	7b1b      	ldrb	r3, [r3, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <bme68x_soft_reset+0x9c>
                {
                    rslt = get_mem_page(dev);
 8003ad2:	193c      	adds	r4, r7, r4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	f001 fd50 	bl	800557c <get_mem_page>
 8003adc:	0003      	movs	r3, r0
 8003ade:	7023      	strb	r3, [r4, #0]
                }
            }
        }
    }

    return rslt;
 8003ae0:	230f      	movs	r3, #15
 8003ae2:	18fb      	adds	r3, r7, r3
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	b25b      	sxtb	r3, r3
}
 8003ae8:	0018      	movs	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b004      	add	sp, #16
 8003aee:	bdb0      	pop	{r4, r5, r7, pc}
 8003af0:	00002710 	.word	0x00002710

08003af4 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8003af4:	b5b0      	push	{r4, r5, r7, lr}
 8003af6:	b088      	sub	sp, #32
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8003afe:	231e      	movs	r3, #30
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	231d      	movs	r3, #29
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8003b0e:	2314      	movs	r3, #20
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	4a9f      	ldr	r2, [pc, #636]	@ (8003d90 <bme68x_set_conf+0x29c>)
 8003b14:	6811      	ldr	r1, [r2, #0]
 8003b16:	6019      	str	r1, [r3, #0]
 8003b18:	7912      	ldrb	r2, [r2, #4]
 8003b1a:	711a      	strb	r2, [r3, #4]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	0018      	movs	r0, r3
 8003b22:	2305      	movs	r3, #5
 8003b24:	001a      	movs	r2, r3
 8003b26:	2100      	movs	r1, #0
 8003b28:	f007 f870 	bl	800ac0c <memset>

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8003b2c:	251f      	movs	r5, #31
 8003b2e:	197c      	adds	r4, r7, r5
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	231c      	movs	r3, #28
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	0011      	movs	r1, r2
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f000 f9ab 	bl	8003e94 <bme68x_get_op_mode>
 8003b3e:	0003      	movs	r3, r0
 8003b40:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8003b42:	197b      	adds	r3, r7, r5
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	b25b      	sxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d107      	bne.n	8003b5c <bme68x_set_conf+0x68>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8003b4c:	197c      	adds	r4, r7, r5
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	0019      	movs	r1, r3
 8003b52:	2000      	movs	r0, #0
 8003b54:	f000 f91e 	bl	8003d94 <bme68x_set_op_mode>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	7023      	strb	r3, [r4, #0]
    }

    if (conf == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d104      	bne.n	8003b6c <bme68x_set_conf+0x78>
    {
        rslt = BME68X_E_NULL_PTR;
 8003b62:	231f      	movs	r3, #31
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	22ff      	movs	r2, #255	@ 0xff
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	e0e2      	b.n	8003d32 <bme68x_set_conf+0x23e>
    }
    else if (rslt == BME68X_OK)
 8003b6c:	251f      	movs	r5, #31
 8003b6e:	197b      	adds	r3, r7, r5
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b25b      	sxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d000      	beq.n	8003b7a <bme68x_set_conf+0x86>
 8003b78:	e0db      	b.n	8003d32 <bme68x_set_conf+0x23e>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8003b7a:	2314      	movs	r3, #20
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	7818      	ldrb	r0, [r3, #0]
 8003b80:	197c      	adds	r4, r7, r5
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	220c      	movs	r2, #12
 8003b86:	18b9      	adds	r1, r7, r2
 8003b88:	2205      	movs	r2, #5
 8003b8a:	f7ff ff01 	bl	8003990 <bme68x_get_regs>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	7023      	strb	r3, [r4, #0]
        dev->info_msg = BME68X_OK;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	224d      	movs	r2, #77	@ 0x4d
 8003b96:	2100      	movs	r1, #0
 8003b98:	5499      	strb	r1, [r3, r2]
        if (rslt == BME68X_OK)
 8003b9a:	197b      	adds	r3, r7, r5
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	b25b      	sxtb	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <bme68x_set_conf+0xc4>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3303      	adds	r3, #3
 8003ba8:	197c      	adds	r4, r7, r5
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	2107      	movs	r1, #7
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f001 fd1c 	bl	80055ec <boundary_check>
 8003bb4:	0003      	movs	r3, r0
 8003bb6:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003bb8:	221f      	movs	r2, #31
 8003bba:	18bb      	adds	r3, r7, r2
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	b25b      	sxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	18bc      	adds	r4, r7, r2
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	2105      	movs	r1, #5
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f001 fd0c 	bl	80055ec <boundary_check>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003bd8:	221f      	movs	r2, #31
 8003bda:	18bb      	adds	r3, r7, r2
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	b25b      	sxtb	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <bme68x_set_conf+0x104>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3302      	adds	r3, #2
 8003be8:	18bc      	adds	r4, r7, r2
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	2105      	movs	r1, #5
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f001 fcfc 	bl	80055ec <boundary_check>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003bf8:	221f      	movs	r2, #31
 8003bfa:	18bb      	adds	r3, r7, r2
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	b25b      	sxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d108      	bne.n	8003c16 <bme68x_set_conf+0x122>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	18bc      	adds	r4, r7, r2
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	2105      	movs	r1, #5
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	f001 fced 	bl	80055ec <boundary_check>
 8003c12:	0003      	movs	r3, r0
 8003c14:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003c16:	221f      	movs	r2, #31
 8003c18:	18bb      	adds	r3, r7, r2
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	b25b      	sxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <bme68x_set_conf+0x142>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3304      	adds	r3, #4
 8003c26:	18bc      	adds	r4, r7, r2
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	2108      	movs	r1, #8
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f001 fcdd 	bl	80055ec <boundary_check>
 8003c32:	0003      	movs	r3, r0
 8003c34:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003c36:	231f      	movs	r3, #31
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	b25b      	sxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d177      	bne.n	8003d32 <bme68x_set_conf+0x23e>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8003c42:	200c      	movs	r0, #12
 8003c44:	183b      	adds	r3, r7, r0
 8003c46:	791b      	ldrb	r3, [r3, #4]
 8003c48:	b25b      	sxtb	r3, r3
 8003c4a:	221c      	movs	r2, #28
 8003c4c:	4393      	bics	r3, r2
 8003c4e:	b25a      	sxtb	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	78db      	ldrb	r3, [r3, #3]
 8003c54:	b25b      	sxtb	r3, r3
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	b25b      	sxtb	r3, r3
 8003c5a:	211c      	movs	r1, #28
 8003c5c:	400b      	ands	r3, r1
 8003c5e:	b25b      	sxtb	r3, r3
 8003c60:	4313      	orrs	r3, r2
 8003c62:	b25b      	sxtb	r3, r3
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	183b      	adds	r3, r7, r0
 8003c68:	711a      	strb	r2, [r3, #4]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8003c6a:	183b      	adds	r3, r7, r0
 8003c6c:	78db      	ldrb	r3, [r3, #3]
 8003c6e:	b25b      	sxtb	r3, r3
 8003c70:	221f      	movs	r2, #31
 8003c72:	4013      	ands	r3, r2
 8003c74:	b25a      	sxtb	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	785b      	ldrb	r3, [r3, #1]
 8003c7a:	b25b      	sxtb	r3, r3
 8003c7c:	015b      	lsls	r3, r3, #5
 8003c7e:	b25b      	sxtb	r3, r3
 8003c80:	4313      	orrs	r3, r2
 8003c82:	b25b      	sxtb	r3, r3
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	183b      	adds	r3, r7, r0
 8003c88:	70da      	strb	r2, [r3, #3]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8003c8a:	183b      	adds	r3, r7, r0
 8003c8c:	78db      	ldrb	r3, [r3, #3]
 8003c8e:	b25b      	sxtb	r3, r3
 8003c90:	221c      	movs	r2, #28
 8003c92:	4393      	bics	r3, r2
 8003c94:	b25a      	sxtb	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	789b      	ldrb	r3, [r3, #2]
 8003c9a:	b25b      	sxtb	r3, r3
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	b25b      	sxtb	r3, r3
 8003ca0:	211c      	movs	r1, #28
 8003ca2:	400b      	ands	r3, r1
 8003ca4:	b25b      	sxtb	r3, r3
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	b25b      	sxtb	r3, r3
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	183b      	adds	r3, r7, r0
 8003cae:	70da      	strb	r2, [r3, #3]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8003cb0:	183b      	adds	r3, r7, r0
 8003cb2:	785b      	ldrb	r3, [r3, #1]
 8003cb4:	b25b      	sxtb	r3, r3
 8003cb6:	2207      	movs	r2, #7
 8003cb8:	4393      	bics	r3, r2
 8003cba:	b25a      	sxtb	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	b25b      	sxtb	r3, r3
 8003cc2:	2107      	movs	r1, #7
 8003cc4:	400b      	ands	r3, r1
 8003cc6:	b25b      	sxtb	r3, r3
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	b25b      	sxtb	r3, r3
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	183b      	adds	r3, r7, r0
 8003cd0:	705a      	strb	r2, [r3, #1]
            if (conf->odr != BME68X_ODR_NONE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	791b      	ldrb	r3, [r3, #4]
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d008      	beq.n	8003cec <bme68x_set_conf+0x1f8>
            {
                odr20 = conf->odr;
 8003cda:	231e      	movs	r3, #30
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	7912      	ldrb	r2, [r2, #4]
 8003ce2:	701a      	strb	r2, [r3, #0]
                odr3 = 0;
 8003ce4:	231d      	movs	r3, #29
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8003cec:	210c      	movs	r1, #12
 8003cee:	187b      	adds	r3, r7, r1
 8003cf0:	791b      	ldrb	r3, [r3, #4]
 8003cf2:	b25b      	sxtb	r3, r3
 8003cf4:	221f      	movs	r2, #31
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	b25a      	sxtb	r2, r3
 8003cfa:	231e      	movs	r3, #30
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b25b      	sxtb	r3, r3
 8003d02:	015b      	lsls	r3, r3, #5
 8003d04:	b25b      	sxtb	r3, r3
 8003d06:	4313      	orrs	r3, r2
 8003d08:	b25b      	sxtb	r3, r3
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	711a      	strb	r2, [r3, #4]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8003d10:	187b      	adds	r3, r7, r1
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	b25b      	sxtb	r3, r3
 8003d16:	227f      	movs	r2, #127	@ 0x7f
 8003d18:	4013      	ands	r3, r2
 8003d1a:	b25a      	sxtb	r2, r3
 8003d1c:	231d      	movs	r3, #29
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	b25b      	sxtb	r3, r3
 8003d24:	01db      	lsls	r3, r3, #7
 8003d26:	b25b      	sxtb	r3, r3
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	b25b      	sxtb	r3, r3
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	187b      	adds	r3, r7, r1
 8003d30:	701a      	strb	r2, [r3, #0]
        }
    }

    if (rslt == BME68X_OK)
 8003d32:	221f      	movs	r2, #31
 8003d34:	18bb      	adds	r3, r7, r2
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b25b      	sxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <bme68x_set_conf+0x260>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8003d3e:	18bc      	adds	r4, r7, r2
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	220c      	movs	r2, #12
 8003d44:	18b9      	adds	r1, r7, r2
 8003d46:	2214      	movs	r2, #20
 8003d48:	18b8      	adds	r0, r7, r2
 8003d4a:	2205      	movs	r2, #5
 8003d4c:	f7ff fd73 	bl	8003836 <bme68x_set_regs>
 8003d50:	0003      	movs	r3, r0
 8003d52:	7023      	strb	r3, [r4, #0]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8003d54:	221c      	movs	r2, #28
 8003d56:	18bb      	adds	r3, r7, r2
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00f      	beq.n	8003d7e <bme68x_set_conf+0x28a>
 8003d5e:	211f      	movs	r1, #31
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	b25b      	sxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <bme68x_set_conf+0x28a>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8003d6a:	18bb      	adds	r3, r7, r2
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	187c      	adds	r4, r7, r1
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	0011      	movs	r1, r2
 8003d74:	0018      	movs	r0, r3
 8003d76:	f000 f80d 	bl	8003d94 <bme68x_set_op_mode>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003d7e:	231f      	movs	r3, #31
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	b25b      	sxtb	r3, r3
}
 8003d86:	0018      	movs	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b008      	add	sp, #32
 8003d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	0800d920 	.word	0x0800d920

08003d94 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8003d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	6039      	str	r1, [r7, #0]
 8003d9e:	1dfb      	adds	r3, r7, #7
 8003da0:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8003da2:	230e      	movs	r3, #14
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	2200      	movs	r2, #0
 8003da8:	701a      	strb	r2, [r3, #0]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8003daa:	230c      	movs	r3, #12
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	2274      	movs	r2, #116	@ 0x74
 8003db0:	701a      	strb	r2, [r3, #0]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8003db2:	260f      	movs	r6, #15
 8003db4:	19bc      	adds	r4, r7, r6
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	250d      	movs	r5, #13
 8003dba:	1979      	adds	r1, r7, r5
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	2074      	movs	r0, #116	@ 0x74
 8003dc0:	f7ff fde6 	bl	8003990 <bme68x_get_regs>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 8003dc8:	0034      	movs	r4, r6
 8003dca:	193b      	adds	r3, r7, r4
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	b25b      	sxtb	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d123      	bne.n	8003e1c <bme68x_set_op_mode+0x88>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8003dd4:	0028      	movs	r0, r5
 8003dd6:	183b      	adds	r3, r7, r0
 8003dd8:	781a      	ldrb	r2, [r3, #0]
 8003dda:	250e      	movs	r5, #14
 8003ddc:	197b      	adds	r3, r7, r5
 8003dde:	2103      	movs	r1, #3
 8003de0:	400a      	ands	r2, r1
 8003de2:	701a      	strb	r2, [r3, #0]
            if (pow_mode != BME68X_SLEEP_MODE)
 8003de4:	197b      	adds	r3, r7, r5
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d017      	beq.n	8003e1c <bme68x_set_op_mode+0x88>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8003dec:	183b      	adds	r3, r7, r0
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2203      	movs	r2, #3
 8003df2:	4393      	bics	r3, r2
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	183b      	adds	r3, r7, r0
 8003df8:	701a      	strb	r2, [r3, #0]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003dfa:	193c      	adds	r4, r7, r4
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	1839      	adds	r1, r7, r0
 8003e00:	220c      	movs	r2, #12
 8003e02:	18b8      	adds	r0, r7, r2
 8003e04:	2201      	movs	r2, #1
 8003e06:	f7ff fd16 	bl	8003836 <bme68x_set_regs>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	7023      	strb	r3, [r4, #0]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	481e      	ldr	r0, [pc, #120]	@ (8003e90 <bme68x_set_op_mode+0xfc>)
 8003e18:	0019      	movs	r1, r3
 8003e1a:	4790      	blx	r2
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8003e1c:	230e      	movs	r3, #14
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <bme68x_set_op_mode+0x9e>
 8003e26:	230f      	movs	r3, #15
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b25b      	sxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0bf      	beq.n	8003db2 <bme68x_set_op_mode+0x1e>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8003e32:	1dfb      	adds	r3, r7, #7
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d021      	beq.n	8003e7e <bme68x_set_op_mode+0xea>
 8003e3a:	240f      	movs	r4, #15
 8003e3c:	193b      	adds	r3, r7, r4
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b25b      	sxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d11b      	bne.n	8003e7e <bme68x_set_op_mode+0xea>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8003e46:	200d      	movs	r0, #13
 8003e48:	183b      	adds	r3, r7, r0
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b25b      	sxtb	r3, r3
 8003e4e:	2203      	movs	r2, #3
 8003e50:	4393      	bics	r3, r2
 8003e52:	b25a      	sxtb	r2, r3
 8003e54:	1dfb      	adds	r3, r7, #7
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	b25b      	sxtb	r3, r3
 8003e5a:	2103      	movs	r1, #3
 8003e5c:	400b      	ands	r3, r1
 8003e5e:	b25b      	sxtb	r3, r3
 8003e60:	4313      	orrs	r3, r2
 8003e62:	b25b      	sxtb	r3, r3
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	183b      	adds	r3, r7, r0
 8003e68:	701a      	strb	r2, [r3, #0]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8003e6a:	193c      	adds	r4, r7, r4
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	1839      	adds	r1, r7, r0
 8003e70:	220c      	movs	r2, #12
 8003e72:	18b8      	adds	r0, r7, r2
 8003e74:	2201      	movs	r2, #1
 8003e76:	f7ff fcde 	bl	8003836 <bme68x_set_regs>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 8003e7e:	230f      	movs	r3, #15
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	b25b      	sxtb	r3, r3
}
 8003e86:	0018      	movs	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	b005      	add	sp, #20
 8003e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e8e:	46c0      	nop			@ (mov r8, r8)
 8003e90:	00002710 	.word	0x00002710

08003e94 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8003e94:	b5b0      	push	{r4, r5, r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d012      	beq.n	8003eca <bme68x_get_op_mode+0x36>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8003ea4:	230f      	movs	r3, #15
 8003ea6:	18fc      	adds	r4, r7, r3
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	250e      	movs	r5, #14
 8003eac:	1979      	adds	r1, r7, r5
 8003eae:	2201      	movs	r2, #1
 8003eb0:	2074      	movs	r0, #116	@ 0x74
 8003eb2:	f7ff fd6d 	bl	8003990 <bme68x_get_regs>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	7023      	strb	r3, [r4, #0]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8003eba:	197b      	adds	r3, r7, r5
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e003      	b.n	8003ed2 <bme68x_get_op_mode+0x3e>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8003eca:	230f      	movs	r3, #15
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	22ff      	movs	r2, #255	@ 0xff
 8003ed0:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003ed2:	230f      	movs	r3, #15
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	b25b      	sxtb	r3, r3
}
 8003eda:	0018      	movs	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b004      	add	sp, #16
 8003ee0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003ee4 <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8003ee4:	b5b0      	push	{r4, r5, r7, lr}
 8003ee6:	b08a      	sub	sp, #40	@ 0x28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	230f      	movs	r3, #15
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	1c02      	adds	r2, r0, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8003efa:	2314      	movs	r3, #20
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	4a37      	ldr	r2, [pc, #220]	@ (8003fdc <bme68x_get_meas_dur+0xf8>)
 8003f00:	6811      	ldr	r1, [r2, #0]
 8003f02:	6019      	str	r1, [r3, #0]
 8003f04:	8892      	ldrh	r2, [r2, #4]
 8003f06:	809a      	strh	r2, [r3, #4]

    if (conf != NULL)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d061      	beq.n	8003fd2 <bme68x_get_meas_dur+0xee>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	3301      	adds	r3, #1
 8003f12:	2527      	movs	r5, #39	@ 0x27
 8003f14:	197c      	adds	r4, r7, r5
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	2105      	movs	r1, #5
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f001 fb66 	bl	80055ec <boundary_check>
 8003f20:	0003      	movs	r3, r0
 8003f22:	7023      	strb	r3, [r4, #0]

        if (rslt == BME68X_OK)
 8003f24:	002a      	movs	r2, r5
 8003f26:	18bb      	adds	r3, r7, r2
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	b25b      	sxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <bme68x_get_meas_dur+0x60>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	3302      	adds	r3, #2
 8003f34:	18bc      	adds	r4, r7, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	2105      	movs	r1, #5
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f001 fb56 	bl	80055ec <boundary_check>
 8003f40:	0003      	movs	r3, r0
 8003f42:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003f44:	2227      	movs	r2, #39	@ 0x27
 8003f46:	18bb      	adds	r3, r7, r2
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	b25b      	sxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d108      	bne.n	8003f62 <bme68x_get_meas_dur+0x7e>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	18bc      	adds	r4, r7, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	2105      	movs	r1, #5
 8003f58:	0018      	movs	r0, r3
 8003f5a:	f001 fb47 	bl	80055ec <boundary_check>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 8003f62:	2327      	movs	r3, #39	@ 0x27
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	b25b      	sxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d131      	bne.n	8003fd2 <bme68x_get_meas_dur+0xee>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	785b      	ldrb	r3, [r3, #1]
 8003f72:	001a      	movs	r2, r3
 8003f74:	2114      	movs	r1, #20
 8003f76:	187b      	adds	r3, r7, r1
 8003f78:	5c9b      	ldrb	r3, [r3, r2]
 8003f7a:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	789b      	ldrb	r3, [r3, #2]
 8003f80:	001a      	movs	r2, r3
 8003f82:	187b      	adds	r3, r7, r1
 8003f84:	5c9b      	ldrb	r3, [r3, r2]
 8003f86:	001a      	movs	r2, r3
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	189b      	adds	r3, r3, r2
 8003f8c:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	001a      	movs	r2, r3
 8003f94:	187b      	adds	r3, r7, r1
 8003f96:	5c9b      	ldrb	r3, [r3, r2]
 8003f98:	001a      	movs	r2, r3
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	189b      	adds	r3, r3, r2
 8003f9e:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	4a0f      	ldr	r2, [pc, #60]	@ (8003fe0 <bme68x_get_meas_dur+0xfc>)
 8003fa4:	4353      	muls	r3, r2
 8003fa6:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	4a0e      	ldr	r2, [pc, #56]	@ (8003fe4 <bme68x_get_meas_dur+0x100>)
 8003fac:	4694      	mov	ip, r2
 8003fae:	4463      	add	r3, ip
 8003fb0:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe8 <bme68x_get_meas_dur+0x104>)
 8003fb6:	4694      	mov	ip, r2
 8003fb8:	4463      	add	r3, ip
 8003fba:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8003fbc:	230f      	movs	r3, #15
 8003fbe:	18fb      	adds	r3, r7, r3
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d005      	beq.n	8003fd2 <bme68x_get_meas_dur+0xee>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	22fa      	movs	r2, #250	@ 0xfa
 8003fca:	0092      	lsls	r2, r2, #2
 8003fcc:	4694      	mov	ip, r2
 8003fce:	4463      	add	r3, ip
 8003fd0:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b00a      	add	sp, #40	@ 0x28
 8003fda:	bdb0      	pop	{r4, r5, r7, pc}
 8003fdc:	0800d928 	.word	0x0800d928
 8003fe0:	000007ab 	.word	0x000007ab
 8003fe4:	00000774 	.word	0x00000774
 8003fe8:	00000951 	.word	0x00000951

08003fec <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8003fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fee:	b09b      	sub	sp, #108	@ 0x6c
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	260f      	movs	r6, #15
 8003ffa:	19bb      	adds	r3, r7, r6
 8003ffc:	1c02      	adds	r2, r0, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8004000:	2366      	movs	r3, #102	@ 0x66
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	2200      	movs	r2, #0
 8004006:	701a      	strb	r2, [r3, #0]
 8004008:	2365      	movs	r3, #101	@ 0x65
 800400a:	18fb      	adds	r3, r7, r3
 800400c:	2200      	movs	r2, #0
 800400e:	701a      	strb	r2, [r3, #0]
 8004010:	2364      	movs	r3, #100	@ 0x64
 8004012:	18fb      	adds	r3, r7, r3
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *field_ptr[3] = { 0 };
 8004018:	2458      	movs	r4, #88	@ 0x58
 800401a:	193b      	adds	r3, r7, r4
 800401c:	0018      	movs	r0, r3
 800401e:	230c      	movs	r3, #12
 8004020:	001a      	movs	r2, r3
 8004022:	2100      	movs	r1, #0
 8004024:	f006 fdf2 	bl	800ac0c <memset>
    struct bme68x_data field_data[3] = { { 0 } };
 8004028:	2510      	movs	r5, #16
 800402a:	197b      	adds	r3, r7, r5
 800402c:	0018      	movs	r0, r3
 800402e:	2348      	movs	r3, #72	@ 0x48
 8004030:	001a      	movs	r2, r3
 8004032:	2100      	movs	r1, #0
 8004034:	f006 fdea 	bl	800ac0c <memset>

    field_ptr[0] = &field_data[0];
 8004038:	193b      	adds	r3, r7, r4
 800403a:	0029      	movs	r1, r5
 800403c:	187a      	adds	r2, r7, r1
 800403e:	601a      	str	r2, [r3, #0]
    field_ptr[1] = &field_data[1];
 8004040:	193b      	adds	r3, r7, r4
 8004042:	187a      	adds	r2, r7, r1
 8004044:	3218      	adds	r2, #24
 8004046:	605a      	str	r2, [r3, #4]
    field_ptr[2] = &field_data[2];
 8004048:	193b      	adds	r3, r7, r4
 800404a:	187a      	adds	r2, r7, r1
 800404c:	3230      	adds	r2, #48	@ 0x30
 800404e:	609a      	str	r2, [r3, #8]

    rslt = null_ptr_check(dev);
 8004050:	2567      	movs	r5, #103	@ 0x67
 8004052:	197c      	adds	r4, r7, r5
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	0018      	movs	r0, r3
 8004058:	f001 fb01 	bl	800565e <null_ptr_check>
 800405c:	0003      	movs	r3, r0
 800405e:	7023      	strb	r3, [r4, #0]
    if ((rslt == BME68X_OK) && (data != NULL))
 8004060:	002a      	movs	r2, r5
 8004062:	18bb      	adds	r3, r7, r2
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	b25b      	sxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d000      	beq.n	800406e <bme68x_get_data+0x82>
 800406c:	e0e3      	b.n	8004236 <bme68x_get_data+0x24a>
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d100      	bne.n	8004076 <bme68x_get_data+0x8a>
 8004074:	e0df      	b.n	8004236 <bme68x_get_data+0x24a>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8004076:	19bb      	adds	r3, r7, r6
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d122      	bne.n	80040c4 <bme68x_get_data+0xd8>
        {
            rslt = read_field_data(0, data, dev);
 800407e:	0015      	movs	r5, r2
 8004080:	18bc      	adds	r4, r7, r2
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	0019      	movs	r1, r3
 8004088:	2000      	movs	r0, #0
 800408a:	f000 fe67 	bl	8004d5c <read_field_data>
 800408e:	0003      	movs	r3, r0
 8004090:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8004092:	197b      	adds	r3, r7, r5
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	b25b      	sxtb	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d000      	beq.n	800409e <bme68x_get_data+0xb2>
 800409c:	e0bd      	b.n	800421a <bme68x_get_data+0x22e>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	b25b      	sxtb	r3, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	da04      	bge.n	80040b2 <bme68x_get_data+0xc6>
                {
                    new_fields = 1;
 80040a8:	2364      	movs	r3, #100	@ 0x64
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	2201      	movs	r2, #1
 80040ae:	701a      	strb	r2, [r3, #0]
 80040b0:	e0b3      	b.n	800421a <bme68x_get_data+0x22e>
                }
                else
                {
                    new_fields = 0;
 80040b2:	2364      	movs	r3, #100	@ 0x64
 80040b4:	18fb      	adds	r3, r7, r3
 80040b6:	2200      	movs	r2, #0
 80040b8:	701a      	strb	r2, [r3, #0]
                    rslt = BME68X_W_NO_NEW_DATA;
 80040ba:	2367      	movs	r3, #103	@ 0x67
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	2202      	movs	r2, #2
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e0aa      	b.n	800421a <bme68x_get_data+0x22e>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 80040c4:	220f      	movs	r2, #15
 80040c6:	18bb      	adds	r3, r7, r2
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d004      	beq.n	80040d8 <bme68x_get_data+0xec>
 80040ce:	18bb      	adds	r3, r7, r2
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d000      	beq.n	80040d8 <bme68x_get_data+0xec>
 80040d6:	e09c      	b.n	8004212 <bme68x_get_data+0x226>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 80040d8:	2367      	movs	r3, #103	@ 0x67
 80040da:	18fc      	adds	r4, r7, r3
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	2358      	movs	r3, #88	@ 0x58
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	0011      	movs	r1, r2
 80040e4:	0018      	movs	r0, r3
 80040e6:	f000 ffb9 	bl	800505c <read_all_field_data>
 80040ea:	0003      	movs	r3, r0
 80040ec:	7023      	strb	r3, [r4, #0]

            new_fields = 0;
 80040ee:	2364      	movs	r3, #100	@ 0x64
 80040f0:	18fb      	adds	r3, r7, r3
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80040f6:	2366      	movs	r3, #102	@ 0x66
 80040f8:	18fb      	adds	r3, r7, r3
 80040fa:	2200      	movs	r2, #0
 80040fc:	701a      	strb	r2, [r3, #0]
 80040fe:	e016      	b.n	800412e <bme68x_get_data+0x142>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8004100:	2366      	movs	r3, #102	@ 0x66
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	2358      	movs	r3, #88	@ 0x58
 8004108:	18fb      	adds	r3, r7, r3
 800410a:	0092      	lsls	r2, r2, #2
 800410c:	58d3      	ldr	r3, [r2, r3]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	b25b      	sxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	da05      	bge.n	8004122 <bme68x_get_data+0x136>
                {
                    new_fields++;
 8004116:	2164      	movs	r1, #100	@ 0x64
 8004118:	187b      	adds	r3, r7, r1
 800411a:	781a      	ldrb	r2, [r3, #0]
 800411c:	187b      	adds	r3, r7, r1
 800411e:	3201      	adds	r2, #1
 8004120:	701a      	strb	r2, [r3, #0]
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8004122:	2166      	movs	r1, #102	@ 0x66
 8004124:	187b      	adds	r3, r7, r1
 8004126:	781a      	ldrb	r2, [r3, #0]
 8004128:	187b      	adds	r3, r7, r1
 800412a:	3201      	adds	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	2366      	movs	r3, #102	@ 0x66
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d805      	bhi.n	8004144 <bme68x_get_data+0x158>
 8004138:	2367      	movs	r3, #103	@ 0x67
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	b25b      	sxtb	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0dd      	beq.n	8004100 <bme68x_get_data+0x114>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8004144:	2366      	movs	r3, #102	@ 0x66
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	e022      	b.n	8004194 <bme68x_get_data+0x1a8>
            {
                for (j = i + 1; j < 3; j++)
 800414e:	2365      	movs	r3, #101	@ 0x65
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	2266      	movs	r2, #102	@ 0x66
 8004154:	18ba      	adds	r2, r7, r2
 8004156:	7812      	ldrb	r2, [r2, #0]
 8004158:	3201      	adds	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	e00f      	b.n	800417e <bme68x_get_data+0x192>
                {
                    sort_sensor_data(i, j, field_ptr);
 800415e:	2358      	movs	r3, #88	@ 0x58
 8004160:	18fa      	adds	r2, r7, r3
 8004162:	2465      	movs	r4, #101	@ 0x65
 8004164:	193b      	adds	r3, r7, r4
 8004166:	7819      	ldrb	r1, [r3, #0]
 8004168:	2366      	movs	r3, #102	@ 0x66
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	0018      	movs	r0, r3
 8004170:	f001 fc62 	bl	8005a38 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8004174:	193b      	adds	r3, r7, r4
 8004176:	781a      	ldrb	r2, [r3, #0]
 8004178:	193b      	adds	r3, r7, r4
 800417a:	3201      	adds	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	2365      	movs	r3, #101	@ 0x65
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d9ea      	bls.n	800415e <bme68x_get_data+0x172>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 8004188:	2166      	movs	r1, #102	@ 0x66
 800418a:	187b      	adds	r3, r7, r1
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	187b      	adds	r3, r7, r1
 8004190:	3201      	adds	r2, #1
 8004192:	701a      	strb	r2, [r3, #0]
 8004194:	2366      	movs	r3, #102	@ 0x66
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d805      	bhi.n	80041aa <bme68x_get_data+0x1be>
 800419e:	2367      	movs	r3, #103	@ 0x67
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	b25b      	sxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0d1      	beq.n	800414e <bme68x_get_data+0x162>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80041aa:	2366      	movs	r3, #102	@ 0x66
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	2200      	movs	r2, #0
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	e019      	b.n	80041e8 <bme68x_get_data+0x1fc>
            {
                data[i] = *field_ptr[i];
 80041b4:	2566      	movs	r5, #102	@ 0x66
 80041b6:	197b      	adds	r3, r7, r5
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	2358      	movs	r3, #88	@ 0x58
 80041bc:	18fb      	adds	r3, r7, r3
 80041be:	0092      	lsls	r2, r2, #2
 80041c0:	58d1      	ldr	r1, [r2, r3]
 80041c2:	197b      	adds	r3, r7, r5
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	0013      	movs	r3, r2
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	189b      	adds	r3, r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	001a      	movs	r2, r3
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	189b      	adds	r3, r3, r2
 80041d4:	000a      	movs	r2, r1
 80041d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80041d8:	c313      	stmia	r3!, {r0, r1, r4}
 80041da:	ca13      	ldmia	r2!, {r0, r1, r4}
 80041dc:	c313      	stmia	r3!, {r0, r1, r4}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80041de:	197b      	adds	r3, r7, r5
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	197b      	adds	r3, r7, r5
 80041e4:	3201      	adds	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	2366      	movs	r3, #102	@ 0x66
 80041ea:	18fb      	adds	r3, r7, r3
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d805      	bhi.n	80041fe <bme68x_get_data+0x212>
 80041f2:	2367      	movs	r3, #103	@ 0x67
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	b25b      	sxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0da      	beq.n	80041b4 <bme68x_get_data+0x1c8>
            }

            if (new_fields == 0)
 80041fe:	2364      	movs	r3, #100	@ 0x64
 8004200:	18fb      	adds	r3, r7, r3
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d108      	bne.n	800421a <bme68x_get_data+0x22e>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 8004208:	2367      	movs	r3, #103	@ 0x67
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	2202      	movs	r2, #2
 800420e:	701a      	strb	r2, [r3, #0]
            if (new_fields == 0)
 8004210:	e003      	b.n	800421a <bme68x_get_data+0x22e>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8004212:	2367      	movs	r3, #103	@ 0x67
 8004214:	18fb      	adds	r3, r7, r3
 8004216:	2201      	movs	r2, #1
 8004218:	701a      	strb	r2, [r3, #0]
        }

        if (n_data == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d104      	bne.n	800422a <bme68x_get_data+0x23e>
        {
            rslt = BME68X_E_NULL_PTR;
 8004220:	2367      	movs	r3, #103	@ 0x67
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	22ff      	movs	r2, #255	@ 0xff
 8004226:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8004228:	e009      	b.n	800423e <bme68x_get_data+0x252>
        }
        else
        {
            *n_data = new_fields;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2264      	movs	r2, #100	@ 0x64
 800422e:	18ba      	adds	r2, r7, r2
 8004230:	7812      	ldrb	r2, [r2, #0]
 8004232:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8004234:	e003      	b.n	800423e <bme68x_get_data+0x252>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8004236:	2367      	movs	r3, #103	@ 0x67
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	22ff      	movs	r2, #255	@ 0xff
 800423c:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800423e:	2367      	movs	r3, #103	@ 0x67
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	b25b      	sxtb	r3, r3
}
 8004246:	0018      	movs	r0, r3
 8004248:	46bd      	mov	sp, r7
 800424a:	b01b      	add	sp, #108	@ 0x6c
 800424c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004250 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8004250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004252:	b089      	sub	sp, #36	@ 0x24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	260f      	movs	r6, #15
 800425c:	19bb      	adds	r3, r7, r6
 800425e:	1c02      	adds	r2, r0, #0
 8004260:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t nb_conv = 0;
 8004262:	231c      	movs	r3, #28
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
    uint8_t hctrl, run_gas = 0;
 800426a:	221d      	movs	r2, #29
 800426c:	18bb      	adds	r3, r7, r2
 800426e:	2200      	movs	r2, #0
 8004270:	701a      	strb	r2, [r3, #0]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 8004272:	2214      	movs	r2, #20
 8004274:	18bb      	adds	r3, r7, r2
 8004276:	4a53      	ldr	r2, [pc, #332]	@ (80043c4 <bme68x_set_heatr_conf+0x174>)
 8004278:	801a      	strh	r2, [r3, #0]

    if (conf != NULL)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d100      	bne.n	8004282 <bme68x_set_heatr_conf+0x32>
 8004280:	e094      	b.n	80043ac <bme68x_set_heatr_conf+0x15c>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8004282:	251f      	movs	r5, #31
 8004284:	197c      	adds	r4, r7, r5
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	0019      	movs	r1, r3
 800428a:	2000      	movs	r0, #0
 800428c:	f7ff fd82 	bl	8003d94 <bme68x_set_op_mode>
 8004290:	0003      	movs	r3, r0
 8004292:	7023      	strb	r3, [r4, #0]
        if (rslt == BME68X_OK)
 8004294:	197b      	adds	r3, r7, r5
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	b25b      	sxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10b      	bne.n	80042b6 <bme68x_set_heatr_conf+0x66>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 800429e:	197c      	adds	r4, r7, r5
 80042a0:	687d      	ldr	r5, [r7, #4]
 80042a2:	231c      	movs	r3, #28
 80042a4:	18fa      	adds	r2, r7, r3
 80042a6:	19bb      	adds	r3, r7, r6
 80042a8:	7819      	ldrb	r1, [r3, #0]
 80042aa:	68b8      	ldr	r0, [r7, #8]
 80042ac:	002b      	movs	r3, r5
 80042ae:	f001 f9f9 	bl	80056a4 <set_conf>
 80042b2:	0003      	movs	r3, r0
 80042b4:	7023      	strb	r3, [r4, #0]
        }

        if (rslt == BME68X_OK)
 80042b6:	251f      	movs	r5, #31
 80042b8:	197b      	adds	r3, r7, r5
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	b25b      	sxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d000      	beq.n	80042c4 <bme68x_set_heatr_conf+0x74>
 80042c2:	e077      	b.n	80043b4 <bme68x_set_heatr_conf+0x164>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 80042c4:	197c      	adds	r4, r7, r5
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2218      	movs	r2, #24
 80042ca:	18b9      	adds	r1, r7, r2
 80042cc:	2202      	movs	r2, #2
 80042ce:	2070      	movs	r0, #112	@ 0x70
 80042d0:	f7ff fb5e 	bl	8003990 <bme68x_get_regs>
 80042d4:	0003      	movs	r3, r0
 80042d6:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 80042d8:	197b      	adds	r3, r7, r5
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b25b      	sxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d168      	bne.n	80043b4 <bme68x_set_heatr_conf+0x164>
            {
                if (conf->enable == BME68X_ENABLE)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d111      	bne.n	800430e <bme68x_set_heatr_conf+0xbe>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 80042ea:	231e      	movs	r3, #30
 80042ec:	18fb      	adds	r3, r7, r3
 80042ee:	2200      	movs	r2, #0
 80042f0:	701a      	strb	r2, [r3, #0]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d104      	bne.n	8004304 <bme68x_set_heatr_conf+0xb4>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 80042fa:	231d      	movs	r3, #29
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	2202      	movs	r2, #2
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	e00c      	b.n	800431e <bme68x_set_heatr_conf+0xce>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8004304:	231d      	movs	r3, #29
 8004306:	18fb      	adds	r3, r7, r3
 8004308:	2201      	movs	r2, #1
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	e007      	b.n	800431e <bme68x_set_heatr_conf+0xce>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 800430e:	231e      	movs	r3, #30
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8004316:	231d      	movs	r3, #29
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	2200      	movs	r2, #0
 800431c:	701a      	strb	r2, [r3, #0]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 800431e:	2018      	movs	r0, #24
 8004320:	183b      	adds	r3, r7, r0
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	b25b      	sxtb	r3, r3
 8004326:	2208      	movs	r2, #8
 8004328:	4393      	bics	r3, r2
 800432a:	b25a      	sxtb	r2, r3
 800432c:	231e      	movs	r3, #30
 800432e:	18fb      	adds	r3, r7, r3
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	b25b      	sxtb	r3, r3
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	b25b      	sxtb	r3, r3
 8004338:	2108      	movs	r1, #8
 800433a:	400b      	ands	r3, r1
 800433c:	b25b      	sxtb	r3, r3
 800433e:	4313      	orrs	r3, r2
 8004340:	b25b      	sxtb	r3, r3
 8004342:	b2da      	uxtb	r2, r3
 8004344:	183b      	adds	r3, r7, r0
 8004346:	701a      	strb	r2, [r3, #0]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8004348:	183b      	adds	r3, r7, r0
 800434a:	785b      	ldrb	r3, [r3, #1]
 800434c:	b25b      	sxtb	r3, r3
 800434e:	220f      	movs	r2, #15
 8004350:	4393      	bics	r3, r2
 8004352:	b25a      	sxtb	r2, r3
 8004354:	231c      	movs	r3, #28
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	b25b      	sxtb	r3, r3
 800435c:	210f      	movs	r1, #15
 800435e:	400b      	ands	r3, r1
 8004360:	b25b      	sxtb	r3, r3
 8004362:	4313      	orrs	r3, r2
 8004364:	b25b      	sxtb	r3, r3
 8004366:	b2da      	uxtb	r2, r3
 8004368:	183b      	adds	r3, r7, r0
 800436a:	705a      	strb	r2, [r3, #1]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 800436c:	183b      	adds	r3, r7, r0
 800436e:	785b      	ldrb	r3, [r3, #1]
 8004370:	b25b      	sxtb	r3, r3
 8004372:	2230      	movs	r2, #48	@ 0x30
 8004374:	4393      	bics	r3, r2
 8004376:	b25a      	sxtb	r2, r3
 8004378:	231d      	movs	r3, #29
 800437a:	18fb      	adds	r3, r7, r3
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	b25b      	sxtb	r3, r3
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	b25b      	sxtb	r3, r3
 8004384:	2130      	movs	r1, #48	@ 0x30
 8004386:	400b      	ands	r3, r1
 8004388:	b25b      	sxtb	r3, r3
 800438a:	4313      	orrs	r3, r2
 800438c:	b25b      	sxtb	r3, r3
 800438e:	b2da      	uxtb	r2, r3
 8004390:	183b      	adds	r3, r7, r0
 8004392:	705a      	strb	r2, [r3, #1]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8004394:	231f      	movs	r3, #31
 8004396:	18fc      	adds	r4, r7, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	1839      	adds	r1, r7, r0
 800439c:	2214      	movs	r2, #20
 800439e:	18b8      	adds	r0, r7, r2
 80043a0:	2202      	movs	r2, #2
 80043a2:	f7ff fa48 	bl	8003836 <bme68x_set_regs>
 80043a6:	0003      	movs	r3, r0
 80043a8:	7023      	strb	r3, [r4, #0]
 80043aa:	e003      	b.n	80043b4 <bme68x_set_heatr_conf+0x164>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80043ac:	231f      	movs	r3, #31
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	22ff      	movs	r2, #255	@ 0xff
 80043b2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80043b4:	231f      	movs	r3, #31
 80043b6:	18fb      	adds	r3, r7, r3
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	b25b      	sxtb	r3, r3
}
 80043bc:	0018      	movs	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	b009      	add	sp, #36	@ 0x24
 80043c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c4:	00007170 	.word	0x00007170

080043c8 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80043c8:	b5b0      	push	{r4, r5, r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd f99c 	bl	8001710 <__aeabi_ui2f>
 80043d8:	1c03      	adds	r3, r0, #0
 80043da:	218d      	movs	r1, #141	@ 0x8d
 80043dc:	05c9      	lsls	r1, r1, #23
 80043de:	1c18      	adds	r0, r3, #0
 80043e0:	f7fc fb9a 	bl	8000b18 <__aeabi_fdiv>
 80043e4:	1c03      	adds	r3, r0, #0
 80043e6:	1c1c      	adds	r4, r3, #0
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	8bdb      	ldrh	r3, [r3, #30]
 80043ec:	0018      	movs	r0, r3
 80043ee:	f7fd f98f 	bl	8001710 <__aeabi_ui2f>
 80043f2:	1c03      	adds	r3, r0, #0
 80043f4:	2189      	movs	r1, #137	@ 0x89
 80043f6:	05c9      	lsls	r1, r1, #23
 80043f8:	1c18      	adds	r0, r3, #0
 80043fa:	f7fc fb8d 	bl	8000b18 <__aeabi_fdiv>
 80043fe:	1c03      	adds	r3, r0, #0
 8004400:	1c19      	adds	r1, r3, #0
 8004402:	1c20      	adds	r0, r4, #0
 8004404:	f7fc feb0 	bl	8001168 <__aeabi_fsub>
 8004408:	1c03      	adds	r3, r0, #0
 800440a:	1c1c      	adds	r4, r3, #0
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2220      	movs	r2, #32
 8004410:	5e9b      	ldrsh	r3, [r3, r2]
 8004412:	0018      	movs	r0, r3
 8004414:	f7fd f92c 	bl	8001670 <__aeabi_i2f>
 8004418:	1c03      	adds	r3, r0, #0
 800441a:	1c19      	adds	r1, r3, #0
 800441c:	1c20      	adds	r0, r4, #0
 800441e:	f7fc fd49 	bl	8000eb4 <__aeabi_fmul>
 8004422:	1c03      	adds	r3, r0, #0
 8004424:	617b      	str	r3, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fd f972 	bl	8001710 <__aeabi_ui2f>
 800442c:	1c03      	adds	r3, r0, #0
 800442e:	2190      	movs	r1, #144	@ 0x90
 8004430:	05c9      	lsls	r1, r1, #23
 8004432:	1c18      	adds	r0, r3, #0
 8004434:	f7fc fb70 	bl	8000b18 <__aeabi_fdiv>
 8004438:	1c03      	adds	r3, r0, #0
 800443a:	1c1c      	adds	r4, r3, #0
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	8bdb      	ldrh	r3, [r3, #30]
 8004440:	0018      	movs	r0, r3
 8004442:	f7fd f965 	bl	8001710 <__aeabi_ui2f>
 8004446:	1c03      	adds	r3, r0, #0
 8004448:	218c      	movs	r1, #140	@ 0x8c
 800444a:	05c9      	lsls	r1, r1, #23
 800444c:	1c18      	adds	r0, r3, #0
 800444e:	f7fc fb63 	bl	8000b18 <__aeabi_fdiv>
 8004452:	1c03      	adds	r3, r0, #0
 8004454:	1c19      	adds	r1, r3, #0
 8004456:	1c20      	adds	r0, r4, #0
 8004458:	f7fc fe86 	bl	8001168 <__aeabi_fsub>
 800445c:	1c03      	adds	r3, r0, #0
 800445e:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7fd f955 	bl	8001710 <__aeabi_ui2f>
 8004466:	1c03      	adds	r3, r0, #0
 8004468:	2190      	movs	r1, #144	@ 0x90
 800446a:	05c9      	lsls	r1, r1, #23
 800446c:	1c18      	adds	r0, r3, #0
 800446e:	f7fc fb53 	bl	8000b18 <__aeabi_fdiv>
 8004472:	1c03      	adds	r3, r0, #0
 8004474:	1c1d      	adds	r5, r3, #0
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	8bdb      	ldrh	r3, [r3, #30]
 800447a:	0018      	movs	r0, r3
 800447c:	f7fd f948 	bl	8001710 <__aeabi_ui2f>
 8004480:	1c03      	adds	r3, r0, #0
 8004482:	218c      	movs	r1, #140	@ 0x8c
 8004484:	05c9      	lsls	r1, r1, #23
 8004486:	1c18      	adds	r0, r3, #0
 8004488:	f7fc fb46 	bl	8000b18 <__aeabi_fdiv>
 800448c:	1c03      	adds	r3, r0, #0
 800448e:	1c19      	adds	r1, r3, #0
 8004490:	1c28      	adds	r0, r5, #0
 8004492:	f7fc fe69 	bl	8001168 <__aeabi_fsub>
 8004496:	1c03      	adds	r3, r0, #0
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8004498:	1c19      	adds	r1, r3, #0
 800449a:	1c20      	adds	r0, r4, #0
 800449c:	f7fc fd0a 	bl	8000eb4 <__aeabi_fmul>
 80044a0:	1c03      	adds	r3, r0, #0
 80044a2:	1c1c      	adds	r4, r3, #0
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2222      	movs	r2, #34	@ 0x22
 80044a8:	569b      	ldrsb	r3, [r3, r2]
 80044aa:	0018      	movs	r0, r3
 80044ac:	f7fd f8e0 	bl	8001670 <__aeabi_i2f>
 80044b0:	1c03      	adds	r3, r0, #0
 80044b2:	2183      	movs	r1, #131	@ 0x83
 80044b4:	05c9      	lsls	r1, r1, #23
 80044b6:	1c18      	adds	r0, r3, #0
 80044b8:	f7fc fcfc 	bl	8000eb4 <__aeabi_fmul>
 80044bc:	1c03      	adds	r3, r0, #0
    var2 =
 80044be:	1c19      	adds	r1, r3, #0
 80044c0:	1c20      	adds	r0, r4, #0
 80044c2:	f7fc fcf7 	bl	8000eb4 <__aeabi_fmul>
 80044c6:	1c03      	adds	r3, r0, #0
 80044c8:	613b      	str	r3, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 80044ca:	6939      	ldr	r1, [r7, #16]
 80044cc:	6978      	ldr	r0, [r7, #20]
 80044ce:	f7fc f931 	bl	8000734 <__aeabi_fadd>
 80044d2:	1c03      	adds	r3, r0, #0
 80044d4:	1c1a      	adds	r2, r3, #0
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044de:	4905      	ldr	r1, [pc, #20]	@ (80044f4 <calc_temperature+0x12c>)
 80044e0:	1c18      	adds	r0, r3, #0
 80044e2:	f7fc fb19 	bl	8000b18 <__aeabi_fdiv>
 80044e6:	1c03      	adds	r3, r0, #0
 80044e8:	60fb      	str	r3, [r7, #12]

    return calc_temp;
 80044ea:	68fb      	ldr	r3, [r7, #12]
}
 80044ec:	1c18      	adds	r0, r3, #0
 80044ee:	46bd      	mov	sp, r7
 80044f0:	b006      	add	sp, #24
 80044f2:	bdb0      	pop	{r4, r5, r7, pc}
 80044f4:	45a00000 	.word	0x45a00000

080044f8 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 80044f8:	b590      	push	{r4, r7, lr}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004506:	2180      	movs	r1, #128	@ 0x80
 8004508:	05c9      	lsls	r1, r1, #23
 800450a:	1c18      	adds	r0, r3, #0
 800450c:	f7fc fb04 	bl	8000b18 <__aeabi_fdiv>
 8004510:	1c03      	adds	r3, r0, #0
 8004512:	49a7      	ldr	r1, [pc, #668]	@ (80047b0 <calc_pressure+0x2b8>)
 8004514:	1c18      	adds	r0, r3, #0
 8004516:	f7fc fe27 	bl	8001168 <__aeabi_fsub>
 800451a:	1c03      	adds	r3, r0, #0
 800451c:	613b      	str	r3, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 800451e:	6939      	ldr	r1, [r7, #16]
 8004520:	6938      	ldr	r0, [r7, #16]
 8004522:	f7fc fcc7 	bl	8000eb4 <__aeabi_fmul>
 8004526:	1c03      	adds	r3, r0, #0
 8004528:	1c1c      	adds	r4, r3, #0
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	222e      	movs	r2, #46	@ 0x2e
 800452e:	569b      	ldrsb	r3, [r3, r2]
 8004530:	0018      	movs	r0, r3
 8004532:	f7fd f89d 	bl	8001670 <__aeabi_i2f>
 8004536:	1c03      	adds	r3, r0, #0
 8004538:	2190      	movs	r1, #144	@ 0x90
 800453a:	05c9      	lsls	r1, r1, #23
 800453c:	1c18      	adds	r0, r3, #0
 800453e:	f7fc faeb 	bl	8000b18 <__aeabi_fdiv>
 8004542:	1c03      	adds	r3, r0, #0
 8004544:	1c19      	adds	r1, r3, #0
 8004546:	1c20      	adds	r0, r4, #0
 8004548:	f7fc fcb4 	bl	8000eb4 <__aeabi_fmul>
 800454c:	1c03      	adds	r3, r0, #0
 800454e:	60fb      	str	r3, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	222c      	movs	r2, #44	@ 0x2c
 8004554:	5e9b      	ldrsh	r3, [r3, r2]
 8004556:	0018      	movs	r0, r3
 8004558:	f7fd f88a 	bl	8001670 <__aeabi_i2f>
 800455c:	1c03      	adds	r3, r0, #0
 800455e:	6939      	ldr	r1, [r7, #16]
 8004560:	1c18      	adds	r0, r3, #0
 8004562:	f7fc fca7 	bl	8000eb4 <__aeabi_fmul>
 8004566:	1c03      	adds	r3, r0, #0
 8004568:	1c19      	adds	r1, r3, #0
 800456a:	1c18      	adds	r0, r3, #0
 800456c:	f7fc f8e2 	bl	8000734 <__aeabi_fadd>
 8004570:	1c03      	adds	r3, r0, #0
 8004572:	1c19      	adds	r1, r3, #0
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7fc f8dd 	bl	8000734 <__aeabi_fadd>
 800457a:	1c03      	adds	r3, r0, #0
 800457c:	60fb      	str	r3, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 800457e:	2181      	movs	r1, #129	@ 0x81
 8004580:	05c9      	lsls	r1, r1, #23
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f7fc fac8 	bl	8000b18 <__aeabi_fdiv>
 8004588:	1c03      	adds	r3, r0, #0
 800458a:	1c1c      	adds	r4, r3, #0
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	222a      	movs	r2, #42	@ 0x2a
 8004590:	5e9b      	ldrsh	r3, [r3, r2]
 8004592:	0018      	movs	r0, r3
 8004594:	f7fd f86c 	bl	8001670 <__aeabi_i2f>
 8004598:	1c03      	adds	r3, r0, #0
 800459a:	218f      	movs	r1, #143	@ 0x8f
 800459c:	05c9      	lsls	r1, r1, #23
 800459e:	1c18      	adds	r0, r3, #0
 80045a0:	f7fc fc88 	bl	8000eb4 <__aeabi_fmul>
 80045a4:	1c03      	adds	r3, r0, #0
 80045a6:	1c19      	adds	r1, r3, #0
 80045a8:	1c20      	adds	r0, r4, #0
 80045aa:	f7fc f8c3 	bl	8000734 <__aeabi_fadd>
 80045ae:	1c03      	adds	r3, r0, #0
 80045b0:	60fb      	str	r3, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2228      	movs	r2, #40	@ 0x28
 80045b6:	569b      	ldrsb	r3, [r3, r2]
 80045b8:	0018      	movs	r0, r3
 80045ba:	f7fd f859 	bl	8001670 <__aeabi_i2f>
 80045be:	1c03      	adds	r3, r0, #0
 80045c0:	6939      	ldr	r1, [r7, #16]
 80045c2:	1c18      	adds	r0, r3, #0
 80045c4:	f7fc fc76 	bl	8000eb4 <__aeabi_fmul>
 80045c8:	1c03      	adds	r3, r0, #0
 80045ca:	6939      	ldr	r1, [r7, #16]
 80045cc:	1c18      	adds	r0, r3, #0
 80045ce:	f7fc fc71 	bl	8000eb4 <__aeabi_fmul>
 80045d2:	1c03      	adds	r3, r0, #0
 80045d4:	218d      	movs	r1, #141	@ 0x8d
 80045d6:	05c9      	lsls	r1, r1, #23
 80045d8:	1c18      	adds	r0, r3, #0
 80045da:	f7fc fa9d 	bl	8000b18 <__aeabi_fdiv>
 80045de:	1c03      	adds	r3, r0, #0
 80045e0:	1c1c      	adds	r4, r3, #0
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2226      	movs	r2, #38	@ 0x26
 80045e6:	5e9b      	ldrsh	r3, [r3, r2]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7fd f841 	bl	8001670 <__aeabi_i2f>
 80045ee:	1c03      	adds	r3, r0, #0
 80045f0:	6939      	ldr	r1, [r7, #16]
 80045f2:	1c18      	adds	r0, r3, #0
 80045f4:	f7fc fc5e 	bl	8000eb4 <__aeabi_fmul>
 80045f8:	1c03      	adds	r3, r0, #0
 80045fa:	1c19      	adds	r1, r3, #0
 80045fc:	1c20      	adds	r0, r4, #0
 80045fe:	f7fc f899 	bl	8000734 <__aeabi_fadd>
 8004602:	1c03      	adds	r3, r0, #0
 8004604:	2192      	movs	r1, #146	@ 0x92
 8004606:	05c9      	lsls	r1, r1, #23
 8004608:	1c18      	adds	r0, r3, #0
 800460a:	f7fc fa85 	bl	8000b18 <__aeabi_fdiv>
 800460e:	1c03      	adds	r3, r0, #0
 8004610:	613b      	str	r3, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8004612:	218e      	movs	r1, #142	@ 0x8e
 8004614:	05c9      	lsls	r1, r1, #23
 8004616:	6938      	ldr	r0, [r7, #16]
 8004618:	f7fc fa7e 	bl	8000b18 <__aeabi_fdiv>
 800461c:	1c03      	adds	r3, r0, #0
 800461e:	21fe      	movs	r1, #254	@ 0xfe
 8004620:	0589      	lsls	r1, r1, #22
 8004622:	1c18      	adds	r0, r3, #0
 8004624:	f7fc f886 	bl	8000734 <__aeabi_fadd>
 8004628:	1c03      	adds	r3, r0, #0
 800462a:	1c1c      	adds	r4, r3, #0
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004630:	0018      	movs	r0, r3
 8004632:	f7fd f86d 	bl	8001710 <__aeabi_ui2f>
 8004636:	1c03      	adds	r3, r0, #0
 8004638:	1c19      	adds	r1, r3, #0
 800463a:	1c20      	adds	r0, r4, #0
 800463c:	f7fc fc3a 	bl	8000eb4 <__aeabi_fmul>
 8004640:	1c03      	adds	r3, r0, #0
 8004642:	613b      	str	r3, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fd f863 	bl	8001710 <__aeabi_ui2f>
 800464a:	1c03      	adds	r3, r0, #0
 800464c:	1c19      	adds	r1, r3, #0
 800464e:	2093      	movs	r0, #147	@ 0x93
 8004650:	05c0      	lsls	r0, r0, #23
 8004652:	f7fc fd89 	bl	8001168 <__aeabi_fsub>
 8004656:	1c03      	adds	r3, r0, #0
 8004658:	617b      	str	r3, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 800465a:	6938      	ldr	r0, [r7, #16]
 800465c:	f7fc ffe8 	bl	8001630 <__aeabi_f2iz>
 8004660:	1e03      	subs	r3, r0, #0
 8004662:	d100      	bne.n	8004666 <calc_pressure+0x16e>
 8004664:	e09c      	b.n	80047a0 <calc_pressure+0x2a8>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8004666:	218b      	movs	r1, #139	@ 0x8b
 8004668:	05c9      	lsls	r1, r1, #23
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7fc fa54 	bl	8000b18 <__aeabi_fdiv>
 8004670:	1c03      	adds	r3, r0, #0
 8004672:	1c19      	adds	r1, r3, #0
 8004674:	6978      	ldr	r0, [r7, #20]
 8004676:	f7fc fd77 	bl	8001168 <__aeabi_fsub>
 800467a:	1c03      	adds	r3, r0, #0
 800467c:	494d      	ldr	r1, [pc, #308]	@ (80047b4 <calc_pressure+0x2bc>)
 800467e:	1c18      	adds	r0, r3, #0
 8004680:	f7fc fc18 	bl	8000eb4 <__aeabi_fmul>
 8004684:	1c03      	adds	r3, r0, #0
 8004686:	6939      	ldr	r1, [r7, #16]
 8004688:	1c18      	adds	r0, r3, #0
 800468a:	f7fc fa45 	bl	8000b18 <__aeabi_fdiv>
 800468e:	1c03      	adds	r3, r0, #0
 8004690:	617b      	str	r3, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2232      	movs	r2, #50	@ 0x32
 8004696:	5e9b      	ldrsh	r3, [r3, r2]
 8004698:	0018      	movs	r0, r3
 800469a:	f7fc ffe9 	bl	8001670 <__aeabi_i2f>
 800469e:	1c03      	adds	r3, r0, #0
 80046a0:	6979      	ldr	r1, [r7, #20]
 80046a2:	1c18      	adds	r0, r3, #0
 80046a4:	f7fc fc06 	bl	8000eb4 <__aeabi_fmul>
 80046a8:	1c03      	adds	r3, r0, #0
 80046aa:	6979      	ldr	r1, [r7, #20]
 80046ac:	1c18      	adds	r0, r3, #0
 80046ae:	f7fc fc01 	bl	8000eb4 <__aeabi_fmul>
 80046b2:	1c03      	adds	r3, r0, #0
 80046b4:	219e      	movs	r1, #158	@ 0x9e
 80046b6:	05c9      	lsls	r1, r1, #23
 80046b8:	1c18      	adds	r0, r3, #0
 80046ba:	f7fc fa2d 	bl	8000b18 <__aeabi_fdiv>
 80046be:	1c03      	adds	r3, r0, #0
 80046c0:	613b      	str	r3, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2230      	movs	r2, #48	@ 0x30
 80046c6:	5e9b      	ldrsh	r3, [r3, r2]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7fc ffd1 	bl	8001670 <__aeabi_i2f>
 80046ce:	1c03      	adds	r3, r0, #0
 80046d0:	218e      	movs	r1, #142	@ 0x8e
 80046d2:	05c9      	lsls	r1, r1, #23
 80046d4:	1c18      	adds	r0, r3, #0
 80046d6:	f7fc fa1f 	bl	8000b18 <__aeabi_fdiv>
 80046da:	1c03      	adds	r3, r0, #0
 80046dc:	1c19      	adds	r1, r3, #0
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f7fc fbe8 	bl	8000eb4 <__aeabi_fmul>
 80046e4:	1c03      	adds	r3, r0, #0
 80046e6:	60fb      	str	r3, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 80046e8:	2187      	movs	r1, #135	@ 0x87
 80046ea:	05c9      	lsls	r1, r1, #23
 80046ec:	6978      	ldr	r0, [r7, #20]
 80046ee:	f7fc fa13 	bl	8000b18 <__aeabi_fdiv>
 80046f2:	1c03      	adds	r3, r0, #0
 80046f4:	1c1c      	adds	r4, r3, #0
 80046f6:	2187      	movs	r1, #135	@ 0x87
 80046f8:	05c9      	lsls	r1, r1, #23
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	f7fc fa0c 	bl	8000b18 <__aeabi_fdiv>
 8004700:	1c03      	adds	r3, r0, #0
 8004702:	1c19      	adds	r1, r3, #0
 8004704:	1c20      	adds	r0, r4, #0
 8004706:	f7fc fbd5 	bl	8000eb4 <__aeabi_fmul>
 800470a:	1c03      	adds	r3, r0, #0
 800470c:	1c1c      	adds	r4, r3, #0
 800470e:	2187      	movs	r1, #135	@ 0x87
 8004710:	05c9      	lsls	r1, r1, #23
 8004712:	6978      	ldr	r0, [r7, #20]
 8004714:	f7fc fa00 	bl	8000b18 <__aeabi_fdiv>
 8004718:	1c03      	adds	r3, r0, #0
 800471a:	1c19      	adds	r1, r3, #0
 800471c:	1c20      	adds	r0, r4, #0
 800471e:	f7fc fbc9 	bl	8000eb4 <__aeabi_fmul>
 8004722:	1c03      	adds	r3, r0, #0
 8004724:	1c1c      	adds	r4, r3, #0
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2234      	movs	r2, #52	@ 0x34
 800472a:	5c9b      	ldrb	r3, [r3, r2]
 800472c:	0018      	movs	r0, r3
 800472e:	f7fc ff9f 	bl	8001670 <__aeabi_i2f>
 8004732:	1c03      	adds	r3, r0, #0
 8004734:	2190      	movs	r1, #144	@ 0x90
 8004736:	05c9      	lsls	r1, r1, #23
 8004738:	1c18      	adds	r0, r3, #0
 800473a:	f7fc f9ed 	bl	8000b18 <__aeabi_fdiv>
 800473e:	1c03      	adds	r3, r0, #0
 8004740:	1c19      	adds	r1, r3, #0
 8004742:	1c20      	adds	r0, r4, #0
 8004744:	f7fc fbb6 	bl	8000eb4 <__aeabi_fmul>
 8004748:	1c03      	adds	r3, r0, #0
 800474a:	60bb      	str	r3, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 800474c:	68f9      	ldr	r1, [r7, #12]
 800474e:	6938      	ldr	r0, [r7, #16]
 8004750:	f7fb fff0 	bl	8000734 <__aeabi_fadd>
 8004754:	1c03      	adds	r3, r0, #0
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	1c18      	adds	r0, r3, #0
 800475a:	f7fb ffeb 	bl	8000734 <__aeabi_fadd>
 800475e:	1c03      	adds	r3, r0, #0
 8004760:	1c1c      	adds	r4, r3, #0
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	222f      	movs	r2, #47	@ 0x2f
 8004766:	569b      	ldrsb	r3, [r3, r2]
 8004768:	0018      	movs	r0, r3
 800476a:	f7fc ff81 	bl	8001670 <__aeabi_i2f>
 800476e:	1c03      	adds	r3, r0, #0
 8004770:	2186      	movs	r1, #134	@ 0x86
 8004772:	05c9      	lsls	r1, r1, #23
 8004774:	1c18      	adds	r0, r3, #0
 8004776:	f7fc fb9d 	bl	8000eb4 <__aeabi_fmul>
 800477a:	1c03      	adds	r3, r0, #0
 800477c:	1c19      	adds	r1, r3, #0
 800477e:	1c20      	adds	r0, r4, #0
 8004780:	f7fb ffd8 	bl	8000734 <__aeabi_fadd>
 8004784:	1c03      	adds	r3, r0, #0
 8004786:	2183      	movs	r1, #131	@ 0x83
 8004788:	05c9      	lsls	r1, r1, #23
 800478a:	1c18      	adds	r0, r3, #0
 800478c:	f7fc f9c4 	bl	8000b18 <__aeabi_fdiv>
 8004790:	1c03      	adds	r3, r0, #0
 8004792:	1c19      	adds	r1, r3, #0
 8004794:	6978      	ldr	r0, [r7, #20]
 8004796:	f7fb ffcd 	bl	8000734 <__aeabi_fadd>
 800479a:	1c03      	adds	r3, r0, #0
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e001      	b.n	80047a4 <calc_pressure+0x2ac>
    }
    else
    {
        calc_pres = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 80047a4:	697b      	ldr	r3, [r7, #20]
}
 80047a6:	1c18      	adds	r0, r3, #0
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b007      	add	sp, #28
 80047ac:	bd90      	pop	{r4, r7, pc}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	477a0000 	.word	0x477a0000
 80047b4:	45c35000 	.word	0x45c35000

080047b8 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 80047b8:	b5b0      	push	{r4, r5, r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af00      	add	r7, sp, #0
 80047be:	0002      	movs	r2, r0
 80047c0:	6039      	str	r1, [r7, #0]
 80047c2:	1dbb      	adds	r3, r7, #6
 80047c4:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ca:	4967      	ldr	r1, [pc, #412]	@ (8004968 <calc_humidity+0x1b0>)
 80047cc:	1c18      	adds	r0, r3, #0
 80047ce:	f7fc f9a3 	bl	8000b18 <__aeabi_fdiv>
 80047d2:	1c03      	adds	r3, r0, #0
 80047d4:	61bb      	str	r3, [r7, #24]
    var1 = (float)((float)hum_adc) -
 80047d6:	1dbb      	adds	r3, r7, #6
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	0018      	movs	r0, r3
 80047dc:	f7fc ff98 	bl	8001710 <__aeabi_ui2f>
 80047e0:	1c04      	adds	r4, r0, #0
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	8a1b      	ldrh	r3, [r3, #16]
 80047e6:	0018      	movs	r0, r3
 80047e8:	f7fc ff92 	bl	8001710 <__aeabi_ui2f>
 80047ec:	1c03      	adds	r3, r0, #0
 80047ee:	2183      	movs	r1, #131	@ 0x83
 80047f0:	05c9      	lsls	r1, r1, #23
 80047f2:	1c18      	adds	r0, r3, #0
 80047f4:	f7fc fb5e 	bl	8000eb4 <__aeabi_fmul>
 80047f8:	1c03      	adds	r3, r0, #0
 80047fa:	1c1d      	adds	r5, r3, #0
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	7d1b      	ldrb	r3, [r3, #20]
 8004800:	b25b      	sxtb	r3, r3
 8004802:	0018      	movs	r0, r3
 8004804:	f7fc ff34 	bl	8001670 <__aeabi_i2f>
 8004808:	1c03      	adds	r3, r0, #0
 800480a:	2180      	movs	r1, #128	@ 0x80
 800480c:	05c9      	lsls	r1, r1, #23
 800480e:	1c18      	adds	r0, r3, #0
 8004810:	f7fc f982 	bl	8000b18 <__aeabi_fdiv>
 8004814:	1c03      	adds	r3, r0, #0
 8004816:	69b9      	ldr	r1, [r7, #24]
 8004818:	1c18      	adds	r0, r3, #0
 800481a:	f7fc fb4b 	bl	8000eb4 <__aeabi_fmul>
 800481e:	1c03      	adds	r3, r0, #0
 8004820:	1c19      	adds	r1, r3, #0
 8004822:	1c28      	adds	r0, r5, #0
 8004824:	f7fb ff86 	bl	8000734 <__aeabi_fadd>
 8004828:	1c03      	adds	r3, r0, #0
    var1 = (float)((float)hum_adc) -
 800482a:	1c19      	adds	r1, r3, #0
 800482c:	1c20      	adds	r0, r4, #0
 800482e:	f7fc fc9b 	bl	8001168 <__aeabi_fsub>
 8004832:	1c03      	adds	r3, r0, #0
 8004834:	617b      	str	r3, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	8a5b      	ldrh	r3, [r3, #18]
 800483a:	0018      	movs	r0, r3
 800483c:	f7fc ff68 	bl	8001710 <__aeabi_ui2f>
 8004840:	1c03      	adds	r3, r0, #0
 8004842:	2191      	movs	r1, #145	@ 0x91
 8004844:	05c9      	lsls	r1, r1, #23
 8004846:	1c18      	adds	r0, r3, #0
 8004848:	f7fc f966 	bl	8000b18 <__aeabi_fdiv>
 800484c:	1c03      	adds	r3, r0, #0
 800484e:	1c1c      	adds	r4, r3, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	7d5b      	ldrb	r3, [r3, #21]
 8004854:	b25b      	sxtb	r3, r3
 8004856:	0018      	movs	r0, r3
 8004858:	f7fc ff0a 	bl	8001670 <__aeabi_i2f>
 800485c:	1c03      	adds	r3, r0, #0
 800485e:	218d      	movs	r1, #141	@ 0x8d
 8004860:	05c9      	lsls	r1, r1, #23
 8004862:	1c18      	adds	r0, r3, #0
 8004864:	f7fc f958 	bl	8000b18 <__aeabi_fdiv>
 8004868:	1c03      	adds	r3, r0, #0
 800486a:	69b9      	ldr	r1, [r7, #24]
 800486c:	1c18      	adds	r0, r3, #0
 800486e:	f7fc fb21 	bl	8000eb4 <__aeabi_fmul>
 8004872:	1c03      	adds	r3, r0, #0
 8004874:	21fe      	movs	r1, #254	@ 0xfe
 8004876:	0589      	lsls	r1, r1, #22
 8004878:	1c18      	adds	r0, r3, #0
 800487a:	f7fb ff5b 	bl	8000734 <__aeabi_fadd>
 800487e:	1c03      	adds	r3, r0, #0
 8004880:	1c1d      	adds	r5, r3, #0
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	7d9b      	ldrb	r3, [r3, #22]
 8004886:	b25b      	sxtb	r3, r3
 8004888:	0018      	movs	r0, r3
 800488a:	f7fc fef1 	bl	8001670 <__aeabi_i2f>
 800488e:	1c03      	adds	r3, r0, #0
 8004890:	2193      	movs	r1, #147	@ 0x93
 8004892:	05c9      	lsls	r1, r1, #23
 8004894:	1c18      	adds	r0, r3, #0
 8004896:	f7fc f93f 	bl	8000b18 <__aeabi_fdiv>
 800489a:	1c03      	adds	r3, r0, #0
 800489c:	69b9      	ldr	r1, [r7, #24]
 800489e:	1c18      	adds	r0, r3, #0
 80048a0:	f7fc fb08 	bl	8000eb4 <__aeabi_fmul>
 80048a4:	1c03      	adds	r3, r0, #0
 80048a6:	69b9      	ldr	r1, [r7, #24]
 80048a8:	1c18      	adds	r0, r3, #0
 80048aa:	f7fc fb03 	bl	8000eb4 <__aeabi_fmul>
 80048ae:	1c03      	adds	r3, r0, #0
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 80048b0:	1c19      	adds	r1, r3, #0
 80048b2:	1c28      	adds	r0, r5, #0
 80048b4:	f7fb ff3e 	bl	8000734 <__aeabi_fadd>
 80048b8:	1c03      	adds	r3, r0, #0
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 80048ba:	1c19      	adds	r1, r3, #0
 80048bc:	1c20      	adds	r0, r4, #0
 80048be:	f7fc faf9 	bl	8000eb4 <__aeabi_fmul>
 80048c2:	1c03      	adds	r3, r0, #0
    var2 = var1 *
 80048c4:	1c19      	adds	r1, r3, #0
 80048c6:	6978      	ldr	r0, [r7, #20]
 80048c8:	f7fc faf4 	bl	8000eb4 <__aeabi_fmul>
 80048cc:	1c03      	adds	r3, r0, #0
 80048ce:	613b      	str	r3, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	7ddb      	ldrb	r3, [r3, #23]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f7fc ff1b 	bl	8001710 <__aeabi_ui2f>
 80048da:	1c03      	adds	r3, r0, #0
 80048dc:	218d      	movs	r1, #141	@ 0x8d
 80048de:	05c9      	lsls	r1, r1, #23
 80048e0:	1c18      	adds	r0, r3, #0
 80048e2:	f7fc f919 	bl	8000b18 <__aeabi_fdiv>
 80048e6:	1c03      	adds	r3, r0, #0
 80048e8:	60fb      	str	r3, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	7e1b      	ldrb	r3, [r3, #24]
 80048ee:	b25b      	sxtb	r3, r3
 80048f0:	0018      	movs	r0, r3
 80048f2:	f7fc febd 	bl	8001670 <__aeabi_i2f>
 80048f6:	1c03      	adds	r3, r0, #0
 80048f8:	2194      	movs	r1, #148	@ 0x94
 80048fa:	05c9      	lsls	r1, r1, #23
 80048fc:	1c18      	adds	r0, r3, #0
 80048fe:	f7fc f90b 	bl	8000b18 <__aeabi_fdiv>
 8004902:	1c03      	adds	r3, r0, #0
 8004904:	60bb      	str	r3, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8004906:	69b9      	ldr	r1, [r7, #24]
 8004908:	68b8      	ldr	r0, [r7, #8]
 800490a:	f7fc fad3 	bl	8000eb4 <__aeabi_fmul>
 800490e:	1c03      	adds	r3, r0, #0
 8004910:	68f9      	ldr	r1, [r7, #12]
 8004912:	1c18      	adds	r0, r3, #0
 8004914:	f7fb ff0e 	bl	8000734 <__aeabi_fadd>
 8004918:	1c03      	adds	r3, r0, #0
 800491a:	6939      	ldr	r1, [r7, #16]
 800491c:	1c18      	adds	r0, r3, #0
 800491e:	f7fc fac9 	bl	8000eb4 <__aeabi_fmul>
 8004922:	1c03      	adds	r3, r0, #0
 8004924:	6939      	ldr	r1, [r7, #16]
 8004926:	1c18      	adds	r0, r3, #0
 8004928:	f7fc fac4 	bl	8000eb4 <__aeabi_fmul>
 800492c:	1c03      	adds	r3, r0, #0
 800492e:	1c19      	adds	r1, r3, #0
 8004930:	6938      	ldr	r0, [r7, #16]
 8004932:	f7fb feff 	bl	8000734 <__aeabi_fadd>
 8004936:	1c03      	adds	r3, r0, #0
 8004938:	61fb      	str	r3, [r7, #28]
    if (calc_hum > 100.0f)
 800493a:	490c      	ldr	r1, [pc, #48]	@ (800496c <calc_humidity+0x1b4>)
 800493c:	69f8      	ldr	r0, [r7, #28]
 800493e:	f7fb fde1 	bl	8000504 <__aeabi_fcmpgt>
 8004942:	1e03      	subs	r3, r0, #0
 8004944:	d002      	beq.n	800494c <calc_humidity+0x194>
    {
        calc_hum = 100.0f;
 8004946:	4b09      	ldr	r3, [pc, #36]	@ (800496c <calc_humidity+0x1b4>)
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	e007      	b.n	800495c <calc_humidity+0x1a4>
    }
    else if (calc_hum < 0.0f)
 800494c:	2100      	movs	r1, #0
 800494e:	69f8      	ldr	r0, [r7, #28]
 8004950:	f7fb fdc4 	bl	80004dc <__aeabi_fcmplt>
 8004954:	1e03      	subs	r3, r0, #0
 8004956:	d001      	beq.n	800495c <calc_humidity+0x1a4>
    {
        calc_hum = 0.0f;
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 800495c:	69fb      	ldr	r3, [r7, #28]
}
 800495e:	1c18      	adds	r0, r3, #0
 8004960:	46bd      	mov	sp, r7
 8004962:	b008      	add	sp, #32
 8004964:	bdb0      	pop	{r4, r5, r7, pc}
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	45a00000 	.word	0x45a00000
 800496c:	42c80000 	.word	0x42c80000

08004970 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	b0a9      	sub	sp, #164	@ 0xa4
 8004974:	af00      	add	r7, sp, #0
 8004976:	603a      	str	r2, [r7, #0]
 8004978:	1dbb      	adds	r3, r7, #6
 800497a:	1c02      	adds	r2, r0, #0
 800497c:	801a      	strh	r2, [r3, #0]
 800497e:	1d7b      	adds	r3, r7, #5
 8004980:	1c0a      	adds	r2, r1, #0
 8004982:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8004984:	1dbb      	adds	r3, r7, #6
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	0018      	movs	r0, r3
 800498a:	f7fc fec1 	bl	8001710 <__aeabi_ui2f>
 800498e:	1c03      	adds	r3, r0, #0
 8004990:	259c      	movs	r5, #156	@ 0x9c
 8004992:	197a      	adds	r2, r7, r5
 8004994:	6013      	str	r3, [r2, #0]
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8004996:	1d7b      	adds	r3, r7, #5
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	2201      	movs	r2, #1
 800499c:	409a      	lsls	r2, r3
 800499e:	0013      	movs	r3, r2
 80049a0:	0018      	movs	r0, r3
 80049a2:	f7fc feb5 	bl	8001710 <__aeabi_ui2f>
 80049a6:	1c03      	adds	r3, r0, #0
 80049a8:	2498      	movs	r4, #152	@ 0x98
 80049aa:	193a      	adds	r2, r7, r4
 80049ac:	6013      	str	r3, [r2, #0]
    const float lookup_k1_range[16] = {
 80049ae:	2648      	movs	r6, #72	@ 0x48
 80049b0:	19ba      	adds	r2, r7, r6
 80049b2:	4b43      	ldr	r3, [pc, #268]	@ (8004ac0 <calc_gas_resistance_low+0x150>)
 80049b4:	0010      	movs	r0, r2
 80049b6:	0019      	movs	r1, r3
 80049b8:	2340      	movs	r3, #64	@ 0x40
 80049ba:	001a      	movs	r2, r3
 80049bc:	f006 fa2d 	bl	800ae1a <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 80049c0:	2308      	movs	r3, #8
 80049c2:	18fa      	adds	r2, r7, r3
 80049c4:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac4 <calc_gas_resistance_low+0x154>)
 80049c6:	0010      	movs	r0, r2
 80049c8:	0019      	movs	r1, r3
 80049ca:	2340      	movs	r3, #64	@ 0x40
 80049cc:	001a      	movs	r2, r3
 80049ce:	f006 fa24 	bl	800ae1a <memcpy>
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	223e      	movs	r2, #62	@ 0x3e
 80049d6:	569b      	ldrsb	r3, [r3, r2]
 80049d8:	0018      	movs	r0, r3
 80049da:	f7fc fe49 	bl	8001670 <__aeabi_i2f>
 80049de:	1c03      	adds	r3, r0, #0
 80049e0:	4939      	ldr	r1, [pc, #228]	@ (8004ac8 <calc_gas_resistance_low+0x158>)
 80049e2:	1c18      	adds	r0, r3, #0
 80049e4:	f7fc fa66 	bl	8000eb4 <__aeabi_fmul>
 80049e8:	1c03      	adds	r3, r0, #0
 80049ea:	4938      	ldr	r1, [pc, #224]	@ (8004acc <calc_gas_resistance_low+0x15c>)
 80049ec:	1c18      	adds	r0, r3, #0
 80049ee:	f7fb fea1 	bl	8000734 <__aeabi_fadd>
 80049f2:	1c03      	adds	r3, r0, #0
 80049f4:	2294      	movs	r2, #148	@ 0x94
 80049f6:	18b9      	adds	r1, r7, r2
 80049f8:	600b      	str	r3, [r1, #0]
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 80049fa:	1d7b      	adds	r3, r7, #5
 80049fc:	781a      	ldrb	r2, [r3, #0]
 80049fe:	19bb      	adds	r3, r7, r6
 8004a00:	0092      	lsls	r2, r2, #2
 8004a02:	58d3      	ldr	r3, [r2, r3]
 8004a04:	4932      	ldr	r1, [pc, #200]	@ (8004ad0 <calc_gas_resistance_low+0x160>)
 8004a06:	1c18      	adds	r0, r3, #0
 8004a08:	f7fc f886 	bl	8000b18 <__aeabi_fdiv>
 8004a0c:	1c03      	adds	r3, r0, #0
 8004a0e:	21fe      	movs	r1, #254	@ 0xfe
 8004a10:	0589      	lsls	r1, r1, #22
 8004a12:	1c18      	adds	r0, r3, #0
 8004a14:	f7fb fe8e 	bl	8000734 <__aeabi_fadd>
 8004a18:	1c03      	adds	r3, r0, #0
 8004a1a:	1c19      	adds	r1, r3, #0
 8004a1c:	2294      	movs	r2, #148	@ 0x94
 8004a1e:	18ba      	adds	r2, r7, r2
 8004a20:	6810      	ldr	r0, [r2, #0]
 8004a22:	f7fc fa47 	bl	8000eb4 <__aeabi_fmul>
 8004a26:	1c03      	adds	r3, r0, #0
 8004a28:	2690      	movs	r6, #144	@ 0x90
 8004a2a:	19ba      	adds	r2, r7, r6
 8004a2c:	6013      	str	r3, [r2, #0]
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8004a2e:	1d7b      	adds	r3, r7, #5
 8004a30:	781a      	ldrb	r2, [r3, #0]
 8004a32:	2308      	movs	r3, #8
 8004a34:	18fb      	adds	r3, r7, r3
 8004a36:	0092      	lsls	r2, r2, #2
 8004a38:	58d3      	ldr	r3, [r2, r3]
 8004a3a:	4925      	ldr	r1, [pc, #148]	@ (8004ad0 <calc_gas_resistance_low+0x160>)
 8004a3c:	1c18      	adds	r0, r3, #0
 8004a3e:	f7fc f86b 	bl	8000b18 <__aeabi_fdiv>
 8004a42:	1c03      	adds	r3, r0, #0
 8004a44:	21fe      	movs	r1, #254	@ 0xfe
 8004a46:	0589      	lsls	r1, r1, #22
 8004a48:	1c18      	adds	r0, r3, #0
 8004a4a:	f7fb fe73 	bl	8000734 <__aeabi_fadd>
 8004a4e:	1c03      	adds	r3, r0, #0
 8004a50:	228c      	movs	r2, #140	@ 0x8c
 8004a52:	18b9      	adds	r1, r7, r2
 8004a54:	600b      	str	r3, [r1, #0]
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8004a56:	491f      	ldr	r1, [pc, #124]	@ (8004ad4 <calc_gas_resistance_low+0x164>)
 8004a58:	18bb      	adds	r3, r7, r2
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	f7fc fa2a 	bl	8000eb4 <__aeabi_fmul>
 8004a60:	1c03      	adds	r3, r0, #0
 8004a62:	193a      	adds	r2, r7, r4
 8004a64:	6811      	ldr	r1, [r2, #0]
 8004a66:	1c18      	adds	r0, r3, #0
 8004a68:	f7fc fa24 	bl	8000eb4 <__aeabi_fmul>
 8004a6c:	1c03      	adds	r3, r0, #0
 8004a6e:	1c1c      	adds	r4, r3, #0
 8004a70:	2188      	movs	r1, #136	@ 0x88
 8004a72:	05c9      	lsls	r1, r1, #23
 8004a74:	197b      	adds	r3, r7, r5
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	f7fc fb76 	bl	8001168 <__aeabi_fsub>
 8004a7c:	1c03      	adds	r3, r0, #0
 8004a7e:	19ba      	adds	r2, r7, r6
 8004a80:	6811      	ldr	r1, [r2, #0]
 8004a82:	1c18      	adds	r0, r3, #0
 8004a84:	f7fc f848 	bl	8000b18 <__aeabi_fdiv>
 8004a88:	1c03      	adds	r3, r0, #0
 8004a8a:	21fe      	movs	r1, #254	@ 0xfe
 8004a8c:	0589      	lsls	r1, r1, #22
 8004a8e:	1c18      	adds	r0, r3, #0
 8004a90:	f7fb fe50 	bl	8000734 <__aeabi_fadd>
 8004a94:	1c03      	adds	r3, r0, #0
 8004a96:	1c19      	adds	r1, r3, #0
 8004a98:	1c20      	adds	r0, r4, #0
 8004a9a:	f7fc fa0b 	bl	8000eb4 <__aeabi_fmul>
 8004a9e:	1c03      	adds	r3, r0, #0
 8004aa0:	1c19      	adds	r1, r3, #0
 8004aa2:	20fe      	movs	r0, #254	@ 0xfe
 8004aa4:	0580      	lsls	r0, r0, #22
 8004aa6:	f7fc f837 	bl	8000b18 <__aeabi_fdiv>
 8004aaa:	1c03      	adds	r3, r0, #0
 8004aac:	2288      	movs	r2, #136	@ 0x88
 8004aae:	18b9      	adds	r1, r7, r2
 8004ab0:	600b      	str	r3, [r1, #0]

    return calc_gas_res;
 8004ab2:	18bb      	adds	r3, r7, r2
 8004ab4:	681b      	ldr	r3, [r3, #0]
}
 8004ab6:	1c18      	adds	r0, r3, #0
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b029      	add	sp, #164	@ 0xa4
 8004abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004abe:	46c0      	nop			@ (mov r8, r8)
 8004ac0:	0800d930 	.word	0x0800d930
 8004ac4:	0800d970 	.word	0x0800d970
 8004ac8:	40a00000 	.word	0x40a00000
 8004acc:	44a78000 	.word	0x44a78000
 8004ad0:	42c80000 	.word	0x42c80000
 8004ad4:	340637bd 	.word	0x340637bd

08004ad8 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	0002      	movs	r2, r0
 8004ae0:	1dbb      	adds	r3, r7, #6
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	1d7b      	adds	r3, r7, #5
 8004ae6:	1c0a      	adds	r2, r1, #0
 8004ae8:	701a      	strb	r2, [r3, #0]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8004aea:	1d7b      	adds	r3, r7, #5
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2280      	movs	r2, #128	@ 0x80
 8004af0:	02d2      	lsls	r2, r2, #11
 8004af2:	40da      	lsrs	r2, r3
 8004af4:	0013      	movs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8004af8:	1dbb      	adds	r3, r7, #6
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	4a13      	ldr	r2, [pc, #76]	@ (8004b4c <calc_gas_resistance_high+0x74>)
 8004afe:	4694      	mov	ip, r2
 8004b00:	4463      	add	r3, ip
 8004b02:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	0013      	movs	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2280      	movs	r2, #128	@ 0x80
 8004b12:	0152      	lsls	r2, r2, #5
 8004b14:	4694      	mov	ip, r2
 8004b16:	4463      	add	r3, ip
 8004b18:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8004b1a:	6978      	ldr	r0, [r7, #20]
 8004b1c:	f7fc fdf8 	bl	8001710 <__aeabi_ui2f>
 8004b20:	1c03      	adds	r3, r0, #0
 8004b22:	490b      	ldr	r1, [pc, #44]	@ (8004b50 <calc_gas_resistance_high+0x78>)
 8004b24:	1c18      	adds	r0, r3, #0
 8004b26:	f7fc f9c5 	bl	8000eb4 <__aeabi_fmul>
 8004b2a:	1c03      	adds	r3, r0, #0
 8004b2c:	1c1c      	adds	r4, r3, #0
 8004b2e:	6938      	ldr	r0, [r7, #16]
 8004b30:	f7fc fd9e 	bl	8001670 <__aeabi_i2f>
 8004b34:	1c03      	adds	r3, r0, #0
 8004b36:	1c19      	adds	r1, r3, #0
 8004b38:	1c20      	adds	r0, r4, #0
 8004b3a:	f7fb ffed 	bl	8000b18 <__aeabi_fdiv>
 8004b3e:	1c03      	adds	r3, r0, #0
 8004b40:	60fb      	str	r3, [r7, #12]

    return calc_gas_res;
 8004b42:	68fb      	ldr	r3, [r7, #12]
}
 8004b44:	1c18      	adds	r0, r3, #0
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b007      	add	sp, #28
 8004b4a:	bd90      	pop	{r4, r7, pc}
 8004b4c:	fffffe00 	.word	0xfffffe00
 8004b50:	49742400 	.word	0x49742400

08004b54 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8004b54:	b5b0      	push	{r4, r5, r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	6039      	str	r1, [r7, #0]
 8004b5e:	1dbb      	adds	r3, r7, #6
 8004b60:	801a      	strh	r2, [r3, #0]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8004b62:	1dbb      	adds	r3, r7, #6
 8004b64:	881a      	ldrh	r2, [r3, #0]
 8004b66:	23c8      	movs	r3, #200	@ 0xc8
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d903      	bls.n	8004b76 <calc_res_heat+0x22>
    {
        temp = 400;
 8004b6e:	1dbb      	adds	r3, r7, #6
 8004b70:	22c8      	movs	r2, #200	@ 0xc8
 8004b72:	0052      	lsls	r2, r2, #1
 8004b74:	801a      	strh	r2, [r3, #0]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	7e5b      	ldrb	r3, [r3, #25]
 8004b7a:	b25b      	sxtb	r3, r3
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f7fc fd77 	bl	8001670 <__aeabi_i2f>
 8004b82:	1c03      	adds	r3, r0, #0
 8004b84:	2183      	movs	r1, #131	@ 0x83
 8004b86:	05c9      	lsls	r1, r1, #23
 8004b88:	1c18      	adds	r0, r3, #0
 8004b8a:	f7fb ffc5 	bl	8000b18 <__aeabi_fdiv>
 8004b8e:	1c03      	adds	r3, r0, #0
 8004b90:	4950      	ldr	r1, [pc, #320]	@ (8004cd4 <calc_res_heat+0x180>)
 8004b92:	1c18      	adds	r0, r3, #0
 8004b94:	f7fb fdce 	bl	8000734 <__aeabi_fadd>
 8004b98:	1c03      	adds	r3, r0, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	221a      	movs	r2, #26
 8004ba0:	5e9b      	ldrsh	r3, [r3, r2]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f7fc fd64 	bl	8001670 <__aeabi_i2f>
 8004ba8:	1c03      	adds	r3, r0, #0
 8004baa:	218e      	movs	r1, #142	@ 0x8e
 8004bac:	05c9      	lsls	r1, r1, #23
 8004bae:	1c18      	adds	r0, r3, #0
 8004bb0:	f7fb ffb2 	bl	8000b18 <__aeabi_fdiv>
 8004bb4:	1c03      	adds	r3, r0, #0
 8004bb6:	4948      	ldr	r1, [pc, #288]	@ (8004cd8 <calc_res_heat+0x184>)
 8004bb8:	1c18      	adds	r0, r3, #0
 8004bba:	f7fc f97b 	bl	8000eb4 <__aeabi_fmul>
 8004bbe:	1c03      	adds	r3, r0, #0
 8004bc0:	4946      	ldr	r1, [pc, #280]	@ (8004cdc <calc_res_heat+0x188>)
 8004bc2:	1c18      	adds	r0, r3, #0
 8004bc4:	f7fb fdb6 	bl	8000734 <__aeabi_fadd>
 8004bc8:	1c03      	adds	r3, r0, #0
 8004bca:	61bb      	str	r3, [r7, #24]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	7f1b      	ldrb	r3, [r3, #28]
 8004bd0:	b25b      	sxtb	r3, r3
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f7fc fd4c 	bl	8001670 <__aeabi_i2f>
 8004bd8:	1c03      	adds	r3, r0, #0
 8004bda:	2189      	movs	r1, #137	@ 0x89
 8004bdc:	05c9      	lsls	r1, r1, #23
 8004bde:	1c18      	adds	r0, r3, #0
 8004be0:	f7fb ff9a 	bl	8000b18 <__aeabi_fdiv>
 8004be4:	1c03      	adds	r3, r0, #0
 8004be6:	617b      	str	r3, [r7, #20]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8004be8:	1dbb      	adds	r3, r7, #6
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	0018      	movs	r0, r3
 8004bee:	f7fc fd8f 	bl	8001710 <__aeabi_ui2f>
 8004bf2:	1c03      	adds	r3, r0, #0
 8004bf4:	69b9      	ldr	r1, [r7, #24]
 8004bf6:	1c18      	adds	r0, r3, #0
 8004bf8:	f7fc f95c 	bl	8000eb4 <__aeabi_fmul>
 8004bfc:	1c03      	adds	r3, r0, #0
 8004bfe:	21fe      	movs	r1, #254	@ 0xfe
 8004c00:	0589      	lsls	r1, r1, #22
 8004c02:	1c18      	adds	r0, r3, #0
 8004c04:	f7fb fd96 	bl	8000734 <__aeabi_fadd>
 8004c08:	1c03      	adds	r3, r0, #0
 8004c0a:	1c19      	adds	r1, r3, #0
 8004c0c:	69f8      	ldr	r0, [r7, #28]
 8004c0e:	f7fc f951 	bl	8000eb4 <__aeabi_fmul>
 8004c12:	1c03      	adds	r3, r0, #0
 8004c14:	613b      	str	r3, [r7, #16]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	7b9b      	ldrb	r3, [r3, #14]
 8004c1a:	b25b      	sxtb	r3, r3
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f7fc fd27 	bl	8001670 <__aeabi_i2f>
 8004c22:	1c03      	adds	r3, r0, #0
 8004c24:	6979      	ldr	r1, [r7, #20]
 8004c26:	1c18      	adds	r0, r3, #0
 8004c28:	f7fc f944 	bl	8000eb4 <__aeabi_fmul>
 8004c2c:	1c03      	adds	r3, r0, #0
 8004c2e:	1c19      	adds	r1, r3, #0
 8004c30:	6938      	ldr	r0, [r7, #16]
 8004c32:	f7fb fd7f 	bl	8000734 <__aeabi_fadd>
 8004c36:	1c03      	adds	r3, r0, #0
 8004c38:	60fb      	str	r3, [r7, #12]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	223c      	movs	r2, #60	@ 0x3c
 8004c3e:	5c9b      	ldrb	r3, [r3, r2]
 8004c40:	0018      	movs	r0, r3
 8004c42:	f7fc fd65 	bl	8001710 <__aeabi_ui2f>
 8004c46:	1c03      	adds	r3, r0, #0
 8004c48:	2181      	movs	r1, #129	@ 0x81
 8004c4a:	05c9      	lsls	r1, r1, #23
 8004c4c:	1c18      	adds	r0, r3, #0
 8004c4e:	f7fb fd71 	bl	8000734 <__aeabi_fadd>
 8004c52:	1c03      	adds	r3, r0, #0
 8004c54:	1c19      	adds	r1, r3, #0
 8004c56:	2081      	movs	r0, #129	@ 0x81
 8004c58:	05c0      	lsls	r0, r0, #23
 8004c5a:	f7fb ff5d 	bl	8000b18 <__aeabi_fdiv>
 8004c5e:	1c03      	adds	r3, r0, #0
 8004c60:	68f9      	ldr	r1, [r7, #12]
 8004c62:	1c18      	adds	r0, r3, #0
 8004c64:	f7fc f926 	bl	8000eb4 <__aeabi_fmul>
 8004c68:	1c03      	adds	r3, r0, #0
 8004c6a:	1c1c      	adds	r4, r3, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	223d      	movs	r2, #61	@ 0x3d
 8004c70:	569b      	ldrsb	r3, [r3, r2]
 8004c72:	0018      	movs	r0, r3
 8004c74:	f7fc fcfc 	bl	8001670 <__aeabi_i2f>
 8004c78:	1c03      	adds	r3, r0, #0
 8004c7a:	4919      	ldr	r1, [pc, #100]	@ (8004ce0 <calc_res_heat+0x18c>)
 8004c7c:	1c18      	adds	r0, r3, #0
 8004c7e:	f7fc f919 	bl	8000eb4 <__aeabi_fmul>
 8004c82:	1c03      	adds	r3, r0, #0
 8004c84:	21fe      	movs	r1, #254	@ 0xfe
 8004c86:	0589      	lsls	r1, r1, #22
 8004c88:	1c18      	adds	r0, r3, #0
 8004c8a:	f7fb fd53 	bl	8000734 <__aeabi_fadd>
 8004c8e:	1c03      	adds	r3, r0, #0
 8004c90:	1c19      	adds	r1, r3, #0
 8004c92:	20fe      	movs	r0, #254	@ 0xfe
 8004c94:	0580      	lsls	r0, r0, #22
 8004c96:	f7fb ff3f 	bl	8000b18 <__aeabi_fdiv>
 8004c9a:	1c03      	adds	r3, r0, #0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8004c9c:	1c19      	adds	r1, r3, #0
 8004c9e:	1c20      	adds	r0, r4, #0
 8004ca0:	f7fc f908 	bl	8000eb4 <__aeabi_fmul>
 8004ca4:	1c03      	adds	r3, r0, #0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8004ca6:	490f      	ldr	r1, [pc, #60]	@ (8004ce4 <calc_res_heat+0x190>)
 8004ca8:	1c18      	adds	r0, r3, #0
 8004caa:	f7fc fa5d 	bl	8001168 <__aeabi_fsub>
 8004cae:	1c03      	adds	r3, r0, #0
        (uint8_t)(3.4f *
 8004cb0:	490d      	ldr	r1, [pc, #52]	@ (8004ce8 <calc_res_heat+0x194>)
 8004cb2:	1c18      	adds	r0, r3, #0
 8004cb4:	f7fc f8fe 	bl	8000eb4 <__aeabi_fmul>
 8004cb8:	1c03      	adds	r3, r0, #0
    res_heat =
 8004cba:	250b      	movs	r5, #11
 8004cbc:	197c      	adds	r4, r7, r5
 8004cbe:	1c18      	adds	r0, r3, #0
 8004cc0:	f7fb fc54 	bl	800056c <__aeabi_f2uiz>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	7023      	strb	r3, [r4, #0]
                   25));

    return res_heat;
 8004cc8:	197b      	adds	r3, r7, r5
 8004cca:	781b      	ldrb	r3, [r3, #0]
}
 8004ccc:	0018      	movs	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b008      	add	sp, #32
 8004cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8004cd4:	42440000 	.word	0x42440000
 8004cd8:	3a03126f 	.word	0x3a03126f
 8004cdc:	3b1a0275 	.word	0x3b1a0275
 8004ce0:	3b03126f 	.word	0x3b03126f
 8004ce4:	41c80000 	.word	0x41c80000
 8004ce8:	4059999a 	.word	0x4059999a

08004cec <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	0002      	movs	r2, r0
 8004cf4:	1dbb      	adds	r3, r7, #6
 8004cf6:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 8004cf8:	230f      	movs	r3, #15
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
    uint8_t durval;

    if (dur >= 0xfc0)
 8004d00:	1dbb      	adds	r3, r7, #6
 8004d02:	881a      	ldrh	r2, [r3, #0]
 8004d04:	23fc      	movs	r3, #252	@ 0xfc
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d30f      	bcc.n	8004d2c <calc_gas_wait+0x40>
    {
        durval = 0xff; /* Max duration*/
 8004d0c:	230e      	movs	r3, #14
 8004d0e:	18fb      	adds	r3, r7, r3
 8004d10:	22ff      	movs	r2, #255	@ 0xff
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	e01a      	b.n	8004d4c <calc_gas_wait+0x60>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8004d16:	1dbb      	adds	r3, r7, #6
 8004d18:	1dba      	adds	r2, r7, #6
 8004d1a:	8812      	ldrh	r2, [r2, #0]
 8004d1c:	0892      	lsrs	r2, r2, #2
 8004d1e:	801a      	strh	r2, [r3, #0]
            factor += 1;
 8004d20:	220f      	movs	r2, #15
 8004d22:	18bb      	adds	r3, r7, r2
 8004d24:	18ba      	adds	r2, r7, r2
 8004d26:	7812      	ldrb	r2, [r2, #0]
 8004d28:	3201      	adds	r2, #1
 8004d2a:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8004d2c:	1dbb      	adds	r3, r7, #6
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	2b3f      	cmp	r3, #63	@ 0x3f
 8004d32:	d8f0      	bhi.n	8004d16 <calc_gas_wait+0x2a>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8004d34:	1dbb      	adds	r3, r7, #6
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b2d9      	uxtb	r1, r3
 8004d3a:	230f      	movs	r3, #15
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	019b      	lsls	r3, r3, #6
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	230e      	movs	r3, #14
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	188a      	adds	r2, r1, r2
 8004d4a:	701a      	strb	r2, [r3, #0]
    }

    return durval;
 8004d4c:	230e      	movs	r3, #14
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	781b      	ldrb	r3, [r3, #0]
}
 8004d52:	0018      	movs	r0, r3
 8004d54:	46bd      	mov	sp, r7
 8004d56:	b004      	add	sp, #16
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8004d5c:	b5b0      	push	{r4, r5, r7, lr}
 8004d5e:	b08e      	sub	sp, #56	@ 0x38
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	230f      	movs	r3, #15
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	1c02      	adds	r2, r0, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 8004d6e:	2337      	movs	r3, #55	@ 0x37
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8004d76:	2310      	movs	r3, #16
 8004d78:	18fb      	adds	r3, r7, r3
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	2311      	movs	r3, #17
 8004d7e:	001a      	movs	r2, r3
 8004d80:	2100      	movs	r1, #0
 8004d82:	f005 ff43 	bl	800ac0c <memset>
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8004d86:	2336      	movs	r3, #54	@ 0x36
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	2205      	movs	r2, #5
 8004d8c:	701a      	strb	r2, [r3, #0]

    while ((tries) && (rslt == BME68X_OK))
 8004d8e:	e14e      	b.n	800502e <read_field_data+0x2d2>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8004d90:	230f      	movs	r3, #15
 8004d92:	18fb      	adds	r3, r7, r3
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	1c1a      	adds	r2, r3, #0
 8004d98:	0112      	lsls	r2, r2, #4
 8004d9a:	18d3      	adds	r3, r2, r3
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	331d      	adds	r3, #29
 8004da0:	b2d8      	uxtb	r0, r3
 8004da2:	2537      	movs	r5, #55	@ 0x37
 8004da4:	197c      	adds	r4, r7, r5
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2210      	movs	r2, #16
 8004daa:	18b9      	adds	r1, r7, r2
 8004dac:	2211      	movs	r2, #17
 8004dae:	f7fe fdef 	bl	8003990 <bme68x_get_regs>
 8004db2:	0003      	movs	r3, r0
 8004db4:	7023      	strb	r3, [r4, #0]
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <read_field_data+0x68>
        {
            rslt = BME68X_E_NULL_PTR;
 8004dbc:	197b      	adds	r3, r7, r5
 8004dbe:	22ff      	movs	r2, #255	@ 0xff
 8004dc0:	701a      	strb	r2, [r3, #0]
            break;
 8004dc2:	e140      	b.n	8005046 <read_field_data+0x2ea>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8004dc4:	2010      	movs	r0, #16
 8004dc6:	183b      	adds	r3, r7, r0
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	227f      	movs	r2, #127	@ 0x7f
 8004dcc:	4393      	bics	r3, r2
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8004dd4:	183b      	adds	r3, r7, r0
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	220f      	movs	r2, #15
 8004dda:	4013      	ands	r3, r2
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 8004de2:	183b      	adds	r3, r7, r0
 8004de4:	785a      	ldrb	r2, [r3, #1]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8004dea:	183b      	adds	r3, r7, r0
 8004dec:	789b      	ldrb	r3, [r3, #2]
 8004dee:	031a      	lsls	r2, r3, #12
 8004df0:	183b      	adds	r3, r7, r0
 8004df2:	78db      	ldrb	r3, [r3, #3]
 8004df4:	011b      	lsls	r3, r3, #4
 8004df6:	4313      	orrs	r3, r2
 8004df8:	183a      	adds	r2, r7, r0
 8004dfa:	7912      	ldrb	r2, [r2, #4]
 8004dfc:	0912      	lsrs	r2, r2, #4
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	4313      	orrs	r3, r2
 8004e02:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8004e04:	183b      	adds	r3, r7, r0
 8004e06:	795b      	ldrb	r3, [r3, #5]
 8004e08:	031a      	lsls	r2, r3, #12
 8004e0a:	183b      	adds	r3, r7, r0
 8004e0c:	799b      	ldrb	r3, [r3, #6]
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	4313      	orrs	r3, r2
 8004e12:	183a      	adds	r2, r7, r0
 8004e14:	79d2      	ldrb	r2, [r2, #7]
 8004e16:	0912      	lsrs	r2, r2, #4
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8004e1e:	183b      	adds	r3, r7, r0
 8004e20:	7a1b      	ldrb	r3, [r3, #8]
 8004e22:	021b      	lsls	r3, r3, #8
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	183b      	adds	r3, r7, r0
 8004e28:	7a5b      	ldrb	r3, [r3, #9]
 8004e2a:	0019      	movs	r1, r3
 8004e2c:	232a      	movs	r3, #42	@ 0x2a
 8004e2e:	18fb      	adds	r3, r7, r3
 8004e30:	430a      	orrs	r2, r1
 8004e32:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8004e34:	183b      	adds	r3, r7, r0
 8004e36:	7b5b      	ldrb	r3, [r3, #13]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	183b      	adds	r3, r7, r0
 8004e3e:	7b9b      	ldrb	r3, [r3, #14]
 8004e40:	099b      	lsrs	r3, r3, #6
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	0019      	movs	r1, r3
 8004e46:	2328      	movs	r3, #40	@ 0x28
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8004e4e:	183b      	adds	r3, r7, r0
 8004e50:	7bdb      	ldrb	r3, [r3, #15]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	183b      	adds	r3, r7, r0
 8004e58:	7c1b      	ldrb	r3, [r3, #16]
 8004e5a:	099b      	lsrs	r3, r3, #6
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	0019      	movs	r1, r3
 8004e60:	2326      	movs	r3, #38	@ 0x26
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	430a      	orrs	r2, r1
 8004e66:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8004e68:	183b      	adds	r3, r7, r0
 8004e6a:	7b9a      	ldrb	r2, [r3, #14]
 8004e6c:	2325      	movs	r3, #37	@ 0x25
 8004e6e:	18fb      	adds	r3, r7, r3
 8004e70:	210f      	movs	r1, #15
 8004e72:	400a      	ands	r2, r1
 8004e74:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8004e76:	183b      	adds	r3, r7, r0
 8004e78:	7c1a      	ldrb	r2, [r3, #16]
 8004e7a:	2324      	movs	r3, #36	@ 0x24
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	210f      	movs	r1, #15
 8004e80:	400a      	ands	r2, r1
 8004e82:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d11c      	bne.n	8004ec6 <read_field_data+0x16a>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	b25a      	sxtb	r2, r3
 8004e92:	183b      	adds	r3, r7, r0
 8004e94:	7c1b      	ldrb	r3, [r3, #16]
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	2120      	movs	r1, #32
 8004e9a:	400b      	ands	r3, r1
 8004e9c:	b25b      	sxtb	r3, r3
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	b25b      	sxtb	r3, r3
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b25a      	sxtb	r2, r3
 8004eae:	183b      	adds	r3, r7, r0
 8004eb0:	7c1b      	ldrb	r3, [r3, #16]
 8004eb2:	b25b      	sxtb	r3, r3
 8004eb4:	2110      	movs	r1, #16
 8004eb6:	400b      	ands	r3, r1
 8004eb8:	b25b      	sxtb	r3, r3
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	b25b      	sxtb	r3, r3
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	701a      	strb	r2, [r3, #0]
 8004ec4:	e01c      	b.n	8004f00 <read_field_data+0x1a4>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	b25a      	sxtb	r2, r3
 8004ecc:	2010      	movs	r0, #16
 8004ece:	183b      	adds	r3, r7, r0
 8004ed0:	7b9b      	ldrb	r3, [r3, #14]
 8004ed2:	b25b      	sxtb	r3, r3
 8004ed4:	2120      	movs	r1, #32
 8004ed6:	400b      	ands	r3, r1
 8004ed8:	b25b      	sxtb	r3, r3
 8004eda:	4313      	orrs	r3, r2
 8004edc:	b25b      	sxtb	r3, r3
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	b25a      	sxtb	r2, r3
 8004eea:	183b      	adds	r3, r7, r0
 8004eec:	7b9b      	ldrb	r3, [r3, #14]
 8004eee:	b25b      	sxtb	r3, r3
 8004ef0:	2110      	movs	r1, #16
 8004ef2:	400b      	ands	r3, r1
 8004ef4:	b25b      	sxtb	r3, r3
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	b25b      	sxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	db00      	blt.n	8004f0c <read_field_data+0x1b0>
 8004f0a:	e07d      	b.n	8005008 <read_field_data+0x2ac>
 8004f0c:	2237      	movs	r2, #55	@ 0x37
 8004f0e:	18bb      	adds	r3, r7, r2
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	b25b      	sxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d000      	beq.n	8004f1a <read_field_data+0x1be>
 8004f18:	e076      	b.n	8005008 <read_field_data+0x2ac>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	335a      	adds	r3, #90	@ 0x5a
 8004f20:	b2d8      	uxtb	r0, r3
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	1cd9      	adds	r1, r3, #3
 8004f26:	0015      	movs	r5, r2
 8004f28:	18bc      	adds	r4, r7, r2
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f7fe fd2f 	bl	8003990 <bme68x_get_regs>
 8004f32:	0003      	movs	r3, r0
 8004f34:	7023      	strb	r3, [r4, #0]
            if (rslt == BME68X_OK)
 8004f36:	002a      	movs	r2, r5
 8004f38:	18bb      	adds	r3, r7, r2
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	b25b      	sxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10c      	bne.n	8004f5c <read_field_data+0x200>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	785b      	ldrb	r3, [r3, #1]
 8004f46:	3350      	adds	r3, #80	@ 0x50
 8004f48:	b2d8      	uxtb	r0, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	1d19      	adds	r1, r3, #4
 8004f4e:	18bc      	adds	r4, r7, r2
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f7fe fd1c 	bl	8003990 <bme68x_get_regs>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 8004f5c:	2237      	movs	r2, #55	@ 0x37
 8004f5e:	18bb      	adds	r3, r7, r2
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	b25b      	sxtb	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10c      	bne.n	8004f82 <read_field_data+0x226>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	3364      	adds	r3, #100	@ 0x64
 8004f6e:	b2d8      	uxtb	r0, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	1d59      	adds	r1, r3, #5
 8004f74:	18bc      	adds	r4, r7, r2
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f7fe fd09 	bl	8003990 <bme68x_get_regs>
 8004f7e:	0003      	movs	r3, r0
 8004f80:	7023      	strb	r3, [r4, #0]
            }

            if (rslt == BME68X_OK)
 8004f82:	2337      	movs	r3, #55	@ 0x37
 8004f84:	18fb      	adds	r3, r7, r3
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	b25b      	sxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d13c      	bne.n	8005008 <read_field_data+0x2ac>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f92:	0011      	movs	r1, r2
 8004f94:	0018      	movs	r0, r3
 8004f96:	f7ff fa17 	bl	80043c8 <calc_temperature>
 8004f9a:	1c02      	adds	r2, r0, #0
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	609a      	str	r2, [r3, #8]
                data->pressure = calc_pressure(adc_pres, dev);
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa4:	0011      	movs	r1, r2
 8004fa6:	0018      	movs	r0, r3
 8004fa8:	f7ff faa6 	bl	80044f8 <calc_pressure>
 8004fac:	1c02      	adds	r2, r0, #0
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	60da      	str	r2, [r3, #12]
                data->humidity = calc_humidity(adc_hum, dev);
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	232a      	movs	r3, #42	@ 0x2a
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	0011      	movs	r1, r2
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f7ff fbfb 	bl	80047b8 <calc_humidity>
 8004fc2:	1c02      	adds	r2, r0, #0
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	611a      	str	r2, [r3, #16]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d10d      	bne.n	8004fec <read_field_data+0x290>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8004fd0:	2324      	movs	r3, #36	@ 0x24
 8004fd2:	18fb      	adds	r3, r7, r3
 8004fd4:	781a      	ldrb	r2, [r3, #0]
 8004fd6:	2326      	movs	r3, #38	@ 0x26
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	0011      	movs	r1, r2
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f7ff fd7a 	bl	8004ad8 <calc_gas_resistance_high>
 8004fe4:	1c02      	adds	r2, r0, #0
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	615a      	str	r2, [r3, #20]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8004fea:	e02c      	b.n	8005046 <read_field_data+0x2ea>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	2325      	movs	r3, #37	@ 0x25
 8004ff0:	18fb      	adds	r3, r7, r3
 8004ff2:	7819      	ldrb	r1, [r3, #0]
 8004ff4:	2328      	movs	r3, #40	@ 0x28
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f7ff fcb8 	bl	8004970 <calc_gas_resistance_low>
 8005000:	1c02      	adds	r2, r0, #0
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	615a      	str	r2, [r3, #20]
                break;
 8005006:	e01e      	b.n	8005046 <read_field_data+0x2ea>
            }
        }

        if (rslt == BME68X_OK)
 8005008:	2337      	movs	r3, #55	@ 0x37
 800500a:	18fb      	adds	r3, r7, r3
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	b25b      	sxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <read_field_data+0x2c6>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	480e      	ldr	r0, [pc, #56]	@ (8005058 <read_field_data+0x2fc>)
 800501e:	0019      	movs	r1, r3
 8005020:	4790      	blx	r2
        }

        tries--;
 8005022:	2136      	movs	r1, #54	@ 0x36
 8005024:	187b      	adds	r3, r7, r1
 8005026:	781a      	ldrb	r2, [r3, #0]
 8005028:	187b      	adds	r3, r7, r1
 800502a:	3a01      	subs	r2, #1
 800502c:	701a      	strb	r2, [r3, #0]
    while ((tries) && (rslt == BME68X_OK))
 800502e:	2336      	movs	r3, #54	@ 0x36
 8005030:	18fb      	adds	r3, r7, r3
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d006      	beq.n	8005046 <read_field_data+0x2ea>
 8005038:	2337      	movs	r3, #55	@ 0x37
 800503a:	18fb      	adds	r3, r7, r3
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	b25b      	sxtb	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d100      	bne.n	8005046 <read_field_data+0x2ea>
 8005044:	e6a4      	b.n	8004d90 <read_field_data+0x34>
    }

    return rslt;
 8005046:	2337      	movs	r3, #55	@ 0x37
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	b25b      	sxtb	r3, r3
}
 800504e:	0018      	movs	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	b00e      	add	sp, #56	@ 0x38
 8005054:	bdb0      	pop	{r4, r5, r7, pc}
 8005056:	46c0      	nop			@ (mov r8, r8)
 8005058:	00002710 	.word	0x00002710

0800505c <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 800505c:	b5b0      	push	{r4, r5, r7, lr}
 800505e:	b09c      	sub	sp, #112	@ 0x70
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8005066:	246f      	movs	r4, #111	@ 0x6f
 8005068:	193b      	adds	r3, r7, r4
 800506a:	2200      	movs	r2, #0
 800506c:	701a      	strb	r2, [r3, #0]
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 800506e:	2328      	movs	r3, #40	@ 0x28
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	0018      	movs	r0, r3
 8005074:	2333      	movs	r3, #51	@ 0x33
 8005076:	001a      	movs	r2, r3
 8005078:	2100      	movs	r1, #0
 800507a:	f005 fdc7 	bl	800ac0c <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 800507e:	2308      	movs	r3, #8
 8005080:	18fb      	adds	r3, r7, r3
 8005082:	0018      	movs	r0, r3
 8005084:	231e      	movs	r3, #30
 8005086:	001a      	movs	r2, r3
 8005088:	2100      	movs	r1, #0
 800508a:	f005 fdbf 	bl	800ac0c <memset>
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10c      	bne.n	80050b0 <read_all_field_data+0x54>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3304      	adds	r3, #4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d107      	bne.n	80050b0 <read_all_field_data+0x54>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3308      	adds	r3, #8
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d102      	bne.n	80050b0 <read_all_field_data+0x54>
    {
        rslt = BME68X_E_NULL_PTR;
 80050aa:	193b      	adds	r3, r7, r4
 80050ac:	22ff      	movs	r2, #255	@ 0xff
 80050ae:	701a      	strb	r2, [r3, #0]
    }

    if (rslt == BME68X_OK)
 80050b0:	226f      	movs	r2, #111	@ 0x6f
 80050b2:	18bb      	adds	r3, r7, r2
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	b25b      	sxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <read_all_field_data+0x74>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 80050bc:	18bc      	adds	r4, r7, r2
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2228      	movs	r2, #40	@ 0x28
 80050c2:	18b9      	adds	r1, r7, r2
 80050c4:	2233      	movs	r2, #51	@ 0x33
 80050c6:	201d      	movs	r0, #29
 80050c8:	f7fe fc62 	bl	8003990 <bme68x_get_regs>
 80050cc:	0003      	movs	r3, r0
 80050ce:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 80050d0:	226f      	movs	r2, #111	@ 0x6f
 80050d2:	18bb      	adds	r3, r7, r2
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	b25b      	sxtb	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d109      	bne.n	80050f0 <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 80050dc:	18bc      	adds	r4, r7, r2
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2208      	movs	r2, #8
 80050e2:	18b9      	adds	r1, r7, r2
 80050e4:	221e      	movs	r2, #30
 80050e6:	2050      	movs	r0, #80	@ 0x50
 80050e8:	f7fe fc52 	bl	8003990 <bme68x_get_regs>
 80050ec:	0003      	movs	r3, r0
 80050ee:	7023      	strb	r3, [r4, #0]
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80050f0:	236e      	movs	r3, #110	@ 0x6e
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e1af      	b.n	800545a <read_all_field_data+0x3fe>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 80050fa:	206d      	movs	r0, #109	@ 0x6d
 80050fc:	183a      	adds	r2, r7, r0
 80050fe:	256e      	movs	r5, #110	@ 0x6e
 8005100:	197b      	adds	r3, r7, r5
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	1c19      	adds	r1, r3, #0
 8005106:	0109      	lsls	r1, r1, #4
 8005108:	18cb      	adds	r3, r1, r3
 800510a:	7013      	strb	r3, [r2, #0]
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 800510c:	183b      	adds	r3, r7, r0
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2428      	movs	r4, #40	@ 0x28
 8005112:	193a      	adds	r2, r7, r4
 8005114:	5cd2      	ldrb	r2, [r2, r3]
 8005116:	197b      	adds	r3, r7, r5
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	18cb      	adds	r3, r1, r3
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	217f      	movs	r1, #127	@ 0x7f
 8005124:	438a      	bics	r2, r1
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 800512a:	183b      	adds	r3, r7, r0
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	193a      	adds	r2, r7, r4
 8005130:	5cd2      	ldrb	r2, [r2, r3]
 8005132:	197b      	adds	r3, r7, r5
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	18cb      	adds	r3, r1, r3
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	210f      	movs	r1, #15
 8005140:	400a      	ands	r2, r1
 8005142:	b2d2      	uxtb	r2, r2
 8005144:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8005146:	183b      	adds	r3, r7, r0
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	197b      	adds	r3, r7, r5
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	6879      	ldr	r1, [r7, #4]
 8005154:	18cb      	adds	r3, r1, r3
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	1939      	adds	r1, r7, r4
 800515a:	5c8a      	ldrb	r2, [r1, r2]
 800515c:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 800515e:	183b      	adds	r3, r7, r0
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	3302      	adds	r3, #2
 8005164:	193a      	adds	r2, r7, r4
 8005166:	5cd3      	ldrb	r3, [r2, r3]
 8005168:	031a      	lsls	r2, r3, #12
 800516a:	183b      	adds	r3, r7, r0
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	3303      	adds	r3, #3
 8005170:	1939      	adds	r1, r7, r4
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8005178:	183a      	adds	r2, r7, r0
 800517a:	7812      	ldrb	r2, [r2, #0]
 800517c:	3204      	adds	r2, #4
 800517e:	1939      	adds	r1, r7, r4
 8005180:	5c8a      	ldrb	r2, [r1, r2]
 8005182:	0912      	lsrs	r2, r2, #4
 8005184:	b2d2      	uxtb	r2, r2
        adc_pres =
 8005186:	4313      	orrs	r3, r2
 8005188:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 800518a:	183b      	adds	r3, r7, r0
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	3305      	adds	r3, #5
 8005190:	193a      	adds	r2, r7, r4
 8005192:	5cd3      	ldrb	r3, [r2, r3]
 8005194:	031a      	lsls	r2, r3, #12
 8005196:	183b      	adds	r3, r7, r0
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	3306      	adds	r3, #6
 800519c:	1939      	adds	r1, r7, r4
 800519e:	5ccb      	ldrb	r3, [r1, r3]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 80051a4:	183a      	adds	r2, r7, r0
 80051a6:	7812      	ldrb	r2, [r2, #0]
 80051a8:	3207      	adds	r2, #7
 80051aa:	1939      	adds	r1, r7, r4
 80051ac:	5c8a      	ldrb	r2, [r1, r2]
 80051ae:	0912      	lsrs	r2, r2, #4
 80051b0:	b2d2      	uxtb	r2, r2
        adc_temp =
 80051b2:	4313      	orrs	r3, r2
 80051b4:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 80051b6:	183b      	adds	r3, r7, r0
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	3308      	adds	r3, #8
 80051bc:	193a      	adds	r2, r7, r4
 80051be:	5cd3      	ldrb	r3, [r2, r3]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	183b      	adds	r3, r7, r0
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	3309      	adds	r3, #9
 80051ca:	1939      	adds	r1, r7, r4
 80051cc:	5ccb      	ldrb	r3, [r1, r3]
 80051ce:	0019      	movs	r1, r3
 80051d0:	2362      	movs	r3, #98	@ 0x62
 80051d2:	18fb      	adds	r3, r7, r3
 80051d4:	430a      	orrs	r2, r1
 80051d6:	801a      	strh	r2, [r3, #0]
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 80051d8:	183b      	adds	r3, r7, r0
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	330d      	adds	r3, #13
 80051de:	193a      	adds	r2, r7, r4
 80051e0:	5cd3      	ldrb	r3, [r2, r3]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	183b      	adds	r3, r7, r0
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	330e      	adds	r3, #14
 80051ec:	1939      	adds	r1, r7, r4
 80051ee:	5ccb      	ldrb	r3, [r1, r3]
 80051f0:	099b      	lsrs	r3, r3, #6
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	0019      	movs	r1, r3
 80051f6:	2360      	movs	r3, #96	@ 0x60
 80051f8:	18fb      	adds	r3, r7, r3
 80051fa:	430a      	orrs	r2, r1
 80051fc:	801a      	strh	r2, [r3, #0]
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 80051fe:	183b      	adds	r3, r7, r0
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	330f      	adds	r3, #15
 8005204:	193a      	adds	r2, r7, r4
 8005206:	5cd3      	ldrb	r3, [r2, r3]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	b29a      	uxth	r2, r3
 800520c:	183b      	adds	r3, r7, r0
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	3310      	adds	r3, #16
 8005212:	1939      	adds	r1, r7, r4
 8005214:	5ccb      	ldrb	r3, [r1, r3]
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	b2db      	uxtb	r3, r3
 800521a:	0019      	movs	r1, r3
 800521c:	235e      	movs	r3, #94	@ 0x5e
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	430a      	orrs	r2, r1
 8005222:	801a      	strh	r2, [r3, #0]
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 8005224:	183b      	adds	r3, r7, r0
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	330e      	adds	r3, #14
 800522a:	193a      	adds	r2, r7, r4
 800522c:	5cd2      	ldrb	r2, [r2, r3]
 800522e:	235d      	movs	r3, #93	@ 0x5d
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	210f      	movs	r1, #15
 8005234:	400a      	ands	r2, r1
 8005236:	701a      	strb	r2, [r3, #0]
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8005238:	183b      	adds	r3, r7, r0
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	3310      	adds	r3, #16
 800523e:	193a      	adds	r2, r7, r4
 8005240:	5cd2      	ldrb	r2, [r2, r3]
 8005242:	235c      	movs	r3, #92	@ 0x5c
 8005244:	18fb      	adds	r3, r7, r3
 8005246:	210f      	movs	r1, #15
 8005248:	400a      	ands	r2, r1
 800524a:	701a      	strb	r2, [r3, #0]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d136      	bne.n	80052c2 <read_all_field_data+0x266>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8005254:	197b      	adds	r3, r7, r5
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	18d3      	adds	r3, r2, r3
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	b25a      	sxtb	r2, r3
 8005264:	183b      	adds	r3, r7, r0
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	3310      	adds	r3, #16
 800526a:	1939      	adds	r1, r7, r4
 800526c:	5ccb      	ldrb	r3, [r1, r3]
 800526e:	b25b      	sxtb	r3, r3
 8005270:	2120      	movs	r1, #32
 8005272:	400b      	ands	r3, r1
 8005274:	b25b      	sxtb	r3, r3
 8005276:	4313      	orrs	r3, r2
 8005278:	b259      	sxtb	r1, r3
 800527a:	197b      	adds	r3, r7, r5
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	18d3      	adds	r3, r2, r3
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	b2ca      	uxtb	r2, r1
 8005288:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 800528a:	197b      	adds	r3, r7, r5
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	18d3      	adds	r3, r2, r3
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	b25a      	sxtb	r2, r3
 800529a:	183b      	adds	r3, r7, r0
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	3310      	adds	r3, #16
 80052a0:	1939      	adds	r1, r7, r4
 80052a2:	5ccb      	ldrb	r3, [r1, r3]
 80052a4:	b25b      	sxtb	r3, r3
 80052a6:	2110      	movs	r1, #16
 80052a8:	400b      	ands	r3, r1
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	4313      	orrs	r3, r2
 80052ae:	b259      	sxtb	r1, r3
 80052b0:	197b      	adds	r3, r7, r5
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	18d3      	adds	r3, r2, r3
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	b2ca      	uxtb	r2, r1
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	e038      	b.n	8005334 <read_all_field_data+0x2d8>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 80052c2:	206e      	movs	r0, #110	@ 0x6e
 80052c4:	183b      	adds	r3, r7, r0
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	18d3      	adds	r3, r2, r3
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	b25a      	sxtb	r2, r3
 80052d4:	246d      	movs	r4, #109	@ 0x6d
 80052d6:	193b      	adds	r3, r7, r4
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	330e      	adds	r3, #14
 80052dc:	2528      	movs	r5, #40	@ 0x28
 80052de:	1979      	adds	r1, r7, r5
 80052e0:	5ccb      	ldrb	r3, [r1, r3]
 80052e2:	b25b      	sxtb	r3, r3
 80052e4:	2120      	movs	r1, #32
 80052e6:	400b      	ands	r3, r1
 80052e8:	b25b      	sxtb	r3, r3
 80052ea:	4313      	orrs	r3, r2
 80052ec:	b259      	sxtb	r1, r3
 80052ee:	183b      	adds	r3, r7, r0
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	18d3      	adds	r3, r2, r3
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	b2ca      	uxtb	r2, r1
 80052fc:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 80052fe:	183b      	adds	r3, r7, r0
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	18d3      	adds	r3, r2, r3
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	b25a      	sxtb	r2, r3
 800530e:	193b      	adds	r3, r7, r4
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	330e      	adds	r3, #14
 8005314:	1979      	adds	r1, r7, r5
 8005316:	5ccb      	ldrb	r3, [r1, r3]
 8005318:	b25b      	sxtb	r3, r3
 800531a:	2110      	movs	r1, #16
 800531c:	400b      	ands	r3, r1
 800531e:	b25b      	sxtb	r3, r3
 8005320:	4313      	orrs	r3, r2
 8005322:	b259      	sxtb	r1, r3
 8005324:	183b      	adds	r3, r7, r0
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	18d3      	adds	r3, r2, r3
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	b2ca      	uxtb	r2, r1
 8005332:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 8005334:	256e      	movs	r5, #110	@ 0x6e
 8005336:	197b      	adds	r3, r7, r5
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	18d3      	adds	r3, r2, r3
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	0019      	movs	r1, r3
 8005346:	197b      	adds	r3, r7, r5
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	18d3      	adds	r3, r2, r3
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2008      	movs	r0, #8
 8005354:	183a      	adds	r2, r7, r0
 8005356:	5c52      	ldrb	r2, [r2, r1]
 8005358:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 800535a:	197b      	adds	r3, r7, r5
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	18d3      	adds	r3, r2, r3
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	330a      	adds	r3, #10
 800536a:	001a      	movs	r2, r3
 800536c:	197b      	adds	r3, r7, r5
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	18cb      	adds	r3, r1, r3
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1839      	adds	r1, r7, r0
 800537a:	5c8a      	ldrb	r2, [r1, r2]
 800537c:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 800537e:	197b      	adds	r3, r7, r5
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	18d3      	adds	r3, r2, r3
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	785b      	ldrb	r3, [r3, #1]
 800538c:	3314      	adds	r3, #20
 800538e:	001a      	movs	r2, r3
 8005390:	197b      	adds	r3, r7, r5
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	18cb      	adds	r3, r1, r3
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	1839      	adds	r1, r7, r0
 800539e:	5c8a      	ldrb	r2, [r1, r2]
 80053a0:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 80053a2:	197b      	adds	r3, r7, r5
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	18d3      	adds	r3, r2, r3
 80053ac:	681c      	ldr	r4, [r3, #0]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053b2:	0011      	movs	r1, r2
 80053b4:	0018      	movs	r0, r3
 80053b6:	f7ff f807 	bl	80043c8 <calc_temperature>
 80053ba:	1c03      	adds	r3, r0, #0
 80053bc:	60a3      	str	r3, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 80053be:	197b      	adds	r3, r7, r5
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	18d3      	adds	r3, r2, r3
 80053c8:	681c      	ldr	r4, [r3, #0]
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053ce:	0011      	movs	r1, r2
 80053d0:	0018      	movs	r0, r3
 80053d2:	f7ff f891 	bl	80044f8 <calc_pressure>
 80053d6:	1c03      	adds	r3, r0, #0
 80053d8:	60e3      	str	r3, [r4, #12]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 80053da:	197b      	adds	r3, r7, r5
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	18d3      	adds	r3, r2, r3
 80053e4:	681c      	ldr	r4, [r3, #0]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	2362      	movs	r3, #98	@ 0x62
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	0011      	movs	r1, r2
 80053f0:	0018      	movs	r0, r3
 80053f2:	f7ff f9e1 	bl	80047b8 <calc_humidity>
 80053f6:	1c03      	adds	r3, r0, #0
 80053f8:	6123      	str	r3, [r4, #16]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d112      	bne.n	8005428 <read_all_field_data+0x3cc>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8005402:	197b      	adds	r3, r7, r5
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	18d3      	adds	r3, r2, r3
 800540c:	681c      	ldr	r4, [r3, #0]
 800540e:	235c      	movs	r3, #92	@ 0x5c
 8005410:	18fb      	adds	r3, r7, r3
 8005412:	781a      	ldrb	r2, [r3, #0]
 8005414:	235e      	movs	r3, #94	@ 0x5e
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	0011      	movs	r1, r2
 800541c:	0018      	movs	r0, r3
 800541e:	f7ff fb5b 	bl	8004ad8 <calc_gas_resistance_high>
 8005422:	1c03      	adds	r3, r0, #0
 8005424:	6163      	str	r3, [r4, #20]
 8005426:	e012      	b.n	800544e <read_all_field_data+0x3f2>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8005428:	236e      	movs	r3, #110	@ 0x6e
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	18d3      	adds	r3, r2, r3
 8005434:	681c      	ldr	r4, [r3, #0]
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	235d      	movs	r3, #93	@ 0x5d
 800543a:	18fb      	adds	r3, r7, r3
 800543c:	7819      	ldrb	r1, [r3, #0]
 800543e:	2360      	movs	r3, #96	@ 0x60
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	0018      	movs	r0, r3
 8005446:	f7ff fa93 	bl	8004970 <calc_gas_resistance_low>
 800544a:	1c03      	adds	r3, r0, #0
 800544c:	6163      	str	r3, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800544e:	216e      	movs	r1, #110	@ 0x6e
 8005450:	187b      	adds	r3, r7, r1
 8005452:	781a      	ldrb	r2, [r3, #0]
 8005454:	187b      	adds	r3, r7, r1
 8005456:	3201      	adds	r2, #1
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	236e      	movs	r3, #110	@ 0x6e
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d806      	bhi.n	8005472 <read_all_field_data+0x416>
 8005464:	236f      	movs	r3, #111	@ 0x6f
 8005466:	18fb      	adds	r3, r7, r3
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	b25b      	sxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d100      	bne.n	8005472 <read_all_field_data+0x416>
 8005470:	e643      	b.n	80050fa <read_all_field_data+0x9e>
        }
    }

    return rslt;
 8005472:	236f      	movs	r3, #111	@ 0x6f
 8005474:	18fb      	adds	r3, r7, r3
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	b25b      	sxtb	r3, r3
}
 800547a:	0018      	movs	r0, r3
 800547c:	46bd      	mov	sp, r7
 800547e:	b01c      	add	sp, #112	@ 0x70
 8005480:	bdb0      	pop	{r4, r5, r7, pc}

08005482 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8005482:	b5b0      	push	{r4, r5, r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	0002      	movs	r2, r0
 800548a:	6039      	str	r1, [r7, #0]
 800548c:	1dfb      	adds	r3, r7, #7
 800548e:	701a      	strb	r2, [r3, #0]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 8005490:	250f      	movs	r5, #15
 8005492:	197c      	adds	r4, r7, r5
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	0018      	movs	r0, r3
 8005498:	f000 f8e1 	bl	800565e <null_ptr_check>
 800549c:	0003      	movs	r3, r0
 800549e:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 80054a0:	197b      	adds	r3, r7, r5
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	b25b      	sxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d160      	bne.n	800556c <set_mem_page+0xea>
    {
        if (reg_addr > 0x7f)
 80054aa:	1dfb      	adds	r3, r7, #7
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	b25b      	sxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	da04      	bge.n	80054be <set_mem_page+0x3c>
        {
            mem_page = BME68X_MEM_PAGE1;
 80054b4:	230e      	movs	r3, #14
 80054b6:	18fb      	adds	r3, r7, r3
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]
 80054bc:	e003      	b.n	80054c6 <set_mem_page+0x44>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 80054be:	230e      	movs	r3, #14
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	2210      	movs	r2, #16
 80054c4:	701a      	strb	r2, [r3, #0]
        }

        if (mem_page != dev->mem_page)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	7b5b      	ldrb	r3, [r3, #13]
 80054ca:	210e      	movs	r1, #14
 80054cc:	187a      	adds	r2, r7, r1
 80054ce:	7812      	ldrb	r2, [r2, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d04b      	beq.n	800556c <set_mem_page+0xea>
        {
            dev->mem_page = mem_page;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	187a      	adds	r2, r7, r1
 80054d8:	7812      	ldrb	r2, [r2, #0]
 80054da:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	220d      	movs	r2, #13
 80054e6:	18b9      	adds	r1, r7, r2
 80054e8:	2201      	movs	r2, #1
 80054ea:	20f3      	movs	r0, #243	@ 0xf3
 80054ec:	47a0      	blx	r4
 80054ee:	0003      	movs	r3, r0
 80054f0:	0019      	movs	r1, r3
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	224c      	movs	r2, #76	@ 0x4c
 80054f6:	5499      	strb	r1, [r3, r2]
            if (dev->intf_rslt != 0)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	224c      	movs	r2, #76	@ 0x4c
 80054fc:	569b      	ldrsb	r3, [r3, r2]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <set_mem_page+0x88>
            {
                rslt = BME68X_E_COM_FAIL;
 8005502:	230f      	movs	r3, #15
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	22fe      	movs	r2, #254	@ 0xfe
 8005508:	701a      	strb	r2, [r3, #0]
            }

            if (rslt == BME68X_OK)
 800550a:	250f      	movs	r5, #15
 800550c:	197b      	adds	r3, r7, r5
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	b25b      	sxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d12a      	bne.n	800556c <set_mem_page+0xea>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8005516:	210d      	movs	r1, #13
 8005518:	187b      	adds	r3, r7, r1
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	2210      	movs	r2, #16
 800551e:	4393      	bics	r3, r2
 8005520:	b2da      	uxtb	r2, r3
 8005522:	187b      	adds	r3, r7, r1
 8005524:	701a      	strb	r2, [r3, #0]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	7b5b      	ldrb	r3, [r3, #13]
 800552a:	b25b      	sxtb	r3, r3
 800552c:	2210      	movs	r2, #16
 800552e:	4013      	ands	r3, r2
 8005530:	b25a      	sxtb	r2, r3
 8005532:	187b      	adds	r3, r7, r1
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	b25b      	sxtb	r3, r3
 8005538:	4313      	orrs	r3, r2
 800553a:	b25b      	sxtb	r3, r3
 800553c:	b2da      	uxtb	r2, r3
 800553e:	187b      	adds	r3, r7, r1
 8005540:	701a      	strb	r2, [r3, #0]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	1879      	adds	r1, r7, r1
 800554c:	2201      	movs	r2, #1
 800554e:	2073      	movs	r0, #115	@ 0x73
 8005550:	47a0      	blx	r4
 8005552:	0003      	movs	r3, r0
 8005554:	0019      	movs	r1, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	224c      	movs	r2, #76	@ 0x4c
 800555a:	5499      	strb	r1, [r3, r2]
                if (dev->intf_rslt != 0)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	224c      	movs	r2, #76	@ 0x4c
 8005560:	569b      	ldrsb	r3, [r3, r2]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <set_mem_page+0xea>
                {
                    rslt = BME68X_E_COM_FAIL;
 8005566:	197b      	adds	r3, r7, r5
 8005568:	22fe      	movs	r2, #254	@ 0xfe
 800556a:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }

    return rslt;
 800556c:	230f      	movs	r3, #15
 800556e:	18fb      	adds	r3, r7, r3
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	b25b      	sxtb	r3, r3
}
 8005574:	0018      	movs	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	b004      	add	sp, #16
 800557a:	bdb0      	pop	{r4, r5, r7, pc}

0800557c <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 800557c:	b5b0      	push	{r4, r5, r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8005584:	250f      	movs	r5, #15
 8005586:	197c      	adds	r4, r7, r5
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	0018      	movs	r0, r3
 800558c:	f000 f867 	bl	800565e <null_ptr_check>
 8005590:	0003      	movs	r3, r0
 8005592:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8005594:	197b      	adds	r3, r7, r5
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	b25b      	sxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d11e      	bne.n	80055dc <get_mem_page+0x60>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	220e      	movs	r2, #14
 80055a8:	18b9      	adds	r1, r7, r2
 80055aa:	2201      	movs	r2, #1
 80055ac:	20f3      	movs	r0, #243	@ 0xf3
 80055ae:	47a0      	blx	r4
 80055b0:	0003      	movs	r3, r0
 80055b2:	0019      	movs	r1, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	224c      	movs	r2, #76	@ 0x4c
 80055b8:	5499      	strb	r1, [r3, r2]
        if (dev->intf_rslt != 0)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	224c      	movs	r2, #76	@ 0x4c
 80055be:	569b      	ldrsb	r3, [r3, r2]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <get_mem_page+0x50>
        {
            rslt = BME68X_E_COM_FAIL;
 80055c4:	197b      	adds	r3, r7, r5
 80055c6:	22fe      	movs	r2, #254	@ 0xfe
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	e007      	b.n	80055dc <get_mem_page+0x60>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 80055cc:	230e      	movs	r3, #14
 80055ce:	18fb      	adds	r3, r7, r3
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2210      	movs	r2, #16
 80055d4:	4013      	ands	r3, r2
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 80055dc:	230f      	movs	r3, #15
 80055de:	18fb      	adds	r3, r7, r3
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	b25b      	sxtb	r3, r3
}
 80055e4:	0018      	movs	r0, r3
 80055e6:	46bd      	mov	sp, r7
 80055e8:	b004      	add	sp, #16
 80055ea:	bdb0      	pop	{r4, r5, r7, pc}

080055ec <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 80055ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	250b      	movs	r5, #11
 80055f8:	197b      	adds	r3, r7, r5
 80055fa:	1c0a      	adds	r2, r1, #0
 80055fc:	701a      	strb	r2, [r3, #0]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 80055fe:	2617      	movs	r6, #23
 8005600:	19bc      	adds	r4, r7, r6
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	0018      	movs	r0, r3
 8005606:	f000 f82a 	bl	800565e <null_ptr_check>
 800560a:	0003      	movs	r3, r0
 800560c:	7023      	strb	r3, [r4, #0]
    if ((value != NULL) && (rslt == BME68X_OK))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d018      	beq.n	8005646 <boundary_check+0x5a>
 8005614:	19bb      	adds	r3, r7, r6
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	b25b      	sxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d113      	bne.n	8005646 <boundary_check+0x5a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	197a      	adds	r2, r7, r5
 8005624:	7812      	ldrb	r2, [r2, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d211      	bcs.n	800564e <boundary_check+0x62>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	197a      	adds	r2, r7, r5
 800562e:	7812      	ldrb	r2, [r2, #0]
 8005630:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	224d      	movs	r2, #77	@ 0x4d
 8005636:	5c9b      	ldrb	r3, [r3, r2]
 8005638:	2201      	movs	r2, #1
 800563a:	4313      	orrs	r3, r2
 800563c:	b2d9      	uxtb	r1, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	224d      	movs	r2, #77	@ 0x4d
 8005642:	5499      	strb	r1, [r3, r2]
        if (*value > max)
 8005644:	e003      	b.n	800564e <boundary_check+0x62>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8005646:	2317      	movs	r3, #23
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	22ff      	movs	r2, #255	@ 0xff
 800564c:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 800564e:	2317      	movs	r3, #23
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	b25b      	sxtb	r3, r3
}
 8005656:	0018      	movs	r0, r3
 8005658:	46bd      	mov	sp, r7
 800565a:	b007      	add	sp, #28
 800565c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800565e <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 8005666:	230f      	movs	r3, #15
 8005668:	18fb      	adds	r3, r7, r3
 800566a:	2200      	movs	r2, #0
 800566c:	701a      	strb	r2, [r3, #0]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <null_ptr_check+0x2e>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <null_ptr_check+0x2e>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <null_ptr_check+0x2e>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005688:	2b00      	cmp	r3, #0
 800568a:	d103      	bne.n	8005694 <null_ptr_check+0x36>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 800568c:	230f      	movs	r3, #15
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	22ff      	movs	r2, #255	@ 0xff
 8005692:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8005694:	230f      	movs	r3, #15
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	b25b      	sxtb	r3, r3
}
 800569c:	0018      	movs	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	b004      	add	sp, #16
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 80056a4:	b5b0      	push	{r4, r5, r7, lr}
 80056a6:	b092      	sub	sp, #72	@ 0x48
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	607a      	str	r2, [r7, #4]
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	240b      	movs	r4, #11
 80056b2:	193b      	adds	r3, r7, r4
 80056b4:	1c0a      	adds	r2, r1, #0
 80056b6:	701a      	strb	r2, [r3, #0]
    int8_t rslt = BME68X_OK;
 80056b8:	2347      	movs	r3, #71	@ 0x47
 80056ba:	18fb      	adds	r3, r7, r3
 80056bc:	2200      	movs	r2, #0
 80056be:	701a      	strb	r2, [r3, #0]
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 80056c0:	2345      	movs	r3, #69	@ 0x45
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 80056c8:	2343      	movs	r3, #67	@ 0x43
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	226e      	movs	r2, #110	@ 0x6e
 80056ce:	701a      	strb	r2, [r3, #0]
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80056d0:	2338      	movs	r3, #56	@ 0x38
 80056d2:	18fb      	adds	r3, r7, r3
 80056d4:	0018      	movs	r0, r3
 80056d6:	230a      	movs	r3, #10
 80056d8:	001a      	movs	r2, r3
 80056da:	2100      	movs	r1, #0
 80056dc:	f005 fa96 	bl	800ac0c <memset>
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80056e0:	232c      	movs	r3, #44	@ 0x2c
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	0018      	movs	r0, r3
 80056e6:	230a      	movs	r3, #10
 80056e8:	001a      	movs	r2, r3
 80056ea:	2100      	movs	r1, #0
 80056ec:	f005 fa8e 	bl	800ac0c <memset>
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80056f0:	2320      	movs	r3, #32
 80056f2:	18fb      	adds	r3, r7, r3
 80056f4:	0018      	movs	r0, r3
 80056f6:	230a      	movs	r3, #10
 80056f8:	001a      	movs	r2, r3
 80056fa:	2100      	movs	r1, #0
 80056fc:	f005 fa86 	bl	800ac0c <memset>
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8005700:	2314      	movs	r3, #20
 8005702:	18fb      	adds	r3, r7, r3
 8005704:	0018      	movs	r0, r3
 8005706:	230a      	movs	r3, #10
 8005708:	001a      	movs	r2, r3
 800570a:	2100      	movs	r1, #0
 800570c:	f005 fa7e 	bl	800ac0c <memset>

    switch (op_mode)
 8005710:	193b      	adds	r3, r7, r4
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d02d      	beq.n	8005774 <set_conf+0xd0>
 8005718:	dd00      	ble.n	800571c <set_conf+0x78>
 800571a:	e10c      	b.n	8005936 <set_conf+0x292>
 800571c:	2b01      	cmp	r3, #1
 800571e:	d003      	beq.n	8005728 <set_conf+0x84>
 8005720:	2b02      	cmp	r3, #2
 8005722:	d100      	bne.n	8005726 <set_conf+0x82>
 8005724:	e088      	b.n	8005838 <set_conf+0x194>
 8005726:	e106      	b.n	8005936 <set_conf+0x292>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8005728:	2338      	movs	r3, #56	@ 0x38
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	225a      	movs	r2, #90	@ 0x5a
 800572e:	701a      	strb	r2, [r3, #0]
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	885b      	ldrh	r3, [r3, #2]
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	0011      	movs	r1, r2
 8005738:	0018      	movs	r0, r3
 800573a:	f7ff fa0b 	bl	8004b54 <calc_res_heat>
 800573e:	0003      	movs	r3, r0
 8005740:	001a      	movs	r2, r3
 8005742:	232c      	movs	r3, #44	@ 0x2c
 8005744:	18fb      	adds	r3, r7, r3
 8005746:	701a      	strb	r2, [r3, #0]
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8005748:	2320      	movs	r3, #32
 800574a:	18fb      	adds	r3, r7, r3
 800574c:	2264      	movs	r2, #100	@ 0x64
 800574e:	701a      	strb	r2, [r3, #0]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	889b      	ldrh	r3, [r3, #4]
 8005754:	0018      	movs	r0, r3
 8005756:	f7ff fac9 	bl	8004cec <calc_gas_wait>
 800575a:	0003      	movs	r3, r0
 800575c:	001a      	movs	r2, r3
 800575e:	2314      	movs	r3, #20
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	701a      	strb	r2, [r3, #0]
            (*nb_conv) = 0;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 800576a:	2345      	movs	r3, #69	@ 0x45
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	2201      	movs	r2, #1
 8005770:	701a      	strb	r2, [r3, #0]
            break;
 8005772:	e0e6      	b.n	8005942 <set_conf+0x29e>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <set_conf+0xe0>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d104      	bne.n	800578e <set_conf+0xea>
            {
                rslt = BME68X_E_NULL_PTR;
 8005784:	2347      	movs	r3, #71	@ 0x47
 8005786:	18fb      	adds	r3, r7, r3
 8005788:	22ff      	movs	r2, #255	@ 0xff
 800578a:	701a      	strb	r2, [r3, #0]
                break;
 800578c:	e0d9      	b.n	8005942 <set_conf+0x29e>
            }

            for (i = 0; i < conf->profile_len; i++)
 800578e:	2346      	movs	r3, #70	@ 0x46
 8005790:	18fb      	adds	r3, r7, r3
 8005792:	2200      	movs	r2, #0
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e03e      	b.n	8005816 <set_conf+0x172>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8005798:	2046      	movs	r0, #70	@ 0x46
 800579a:	183b      	adds	r3, r7, r0
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	183a      	adds	r2, r7, r0
 80057a0:	7812      	ldrb	r2, [r2, #0]
 80057a2:	325a      	adds	r2, #90	@ 0x5a
 80057a4:	b2d1      	uxtb	r1, r2
 80057a6:	2238      	movs	r2, #56	@ 0x38
 80057a8:	18ba      	adds	r2, r7, r2
 80057aa:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	183b      	adds	r3, r7, r0
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	18d3      	adds	r3, r2, r3
 80057b8:	881a      	ldrh	r2, [r3, #0]
 80057ba:	0005      	movs	r5, r0
 80057bc:	183b      	adds	r3, r7, r0
 80057be:	781c      	ldrb	r4, [r3, #0]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	0019      	movs	r1, r3
 80057c4:	0010      	movs	r0, r2
 80057c6:	f7ff f9c5 	bl	8004b54 <calc_res_heat>
 80057ca:	0003      	movs	r3, r0
 80057cc:	001a      	movs	r2, r3
 80057ce:	232c      	movs	r3, #44	@ 0x2c
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80057d4:	0028      	movs	r0, r5
 80057d6:	183b      	adds	r3, r7, r0
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	183a      	adds	r2, r7, r0
 80057dc:	7812      	ldrb	r2, [r2, #0]
 80057de:	3264      	adds	r2, #100	@ 0x64
 80057e0:	b2d1      	uxtb	r1, r2
 80057e2:	2220      	movs	r2, #32
 80057e4:	18ba      	adds	r2, r7, r2
 80057e6:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	183b      	adds	r3, r7, r0
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	18d3      	adds	r3, r2, r3
 80057f4:	881a      	ldrh	r2, [r3, #0]
 80057f6:	0005      	movs	r5, r0
 80057f8:	183b      	adds	r3, r7, r0
 80057fa:	781c      	ldrb	r4, [r3, #0]
 80057fc:	0010      	movs	r0, r2
 80057fe:	f7ff fa75 	bl	8004cec <calc_gas_wait>
 8005802:	0003      	movs	r3, r0
 8005804:	001a      	movs	r2, r3
 8005806:	2314      	movs	r3, #20
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	551a      	strb	r2, [r3, r4]
            for (i = 0; i < conf->profile_len; i++)
 800580c:	197b      	adds	r3, r7, r5
 800580e:	781a      	ldrb	r2, [r3, #0]
 8005810:	197b      	adds	r3, r7, r5
 8005812:	3201      	adds	r2, #1
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	7c1b      	ldrb	r3, [r3, #16]
 800581a:	2246      	movs	r2, #70	@ 0x46
 800581c:	18ba      	adds	r2, r7, r2
 800581e:	7812      	ldrb	r2, [r2, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d3b9      	bcc.n	8005798 <set_conf+0xf4>
            }

            (*nb_conv) = conf->profile_len;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	7c1a      	ldrb	r2, [r3, #16]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 800582c:	2345      	movs	r3, #69	@ 0x45
 800582e:	18fb      	adds	r3, r7, r3
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	7c12      	ldrb	r2, [r2, #16]
 8005834:	701a      	strb	r2, [r3, #0]
            break;
 8005836:	e084      	b.n	8005942 <set_conf+0x29e>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d003      	beq.n	8005848 <set_conf+0x1a4>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d104      	bne.n	8005852 <set_conf+0x1ae>
            {
                rslt = BME68X_E_NULL_PTR;
 8005848:	2347      	movs	r3, #71	@ 0x47
 800584a:	18fb      	adds	r3, r7, r3
 800584c:	22ff      	movs	r2, #255	@ 0xff
 800584e:	701a      	strb	r2, [r3, #0]
                break;
 8005850:	e077      	b.n	8005942 <set_conf+0x29e>
            }

            if (conf->shared_heatr_dur == 0)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8a5b      	ldrh	r3, [r3, #18]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <set_conf+0x1be>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 800585a:	2347      	movs	r3, #71	@ 0x47
 800585c:	18fb      	adds	r3, r7, r3
 800585e:	2203      	movs	r2, #3
 8005860:	701a      	strb	r2, [r3, #0]
            }

            for (i = 0; i < conf->profile_len; i++)
 8005862:	2346      	movs	r3, #70	@ 0x46
 8005864:	18fb      	adds	r3, r7, r3
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	e039      	b.n	80058e0 <set_conf+0x23c>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 800586c:	2046      	movs	r0, #70	@ 0x46
 800586e:	183b      	adds	r3, r7, r0
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	183a      	adds	r2, r7, r0
 8005874:	7812      	ldrb	r2, [r2, #0]
 8005876:	325a      	adds	r2, #90	@ 0x5a
 8005878:	b2d1      	uxtb	r1, r2
 800587a:	2238      	movs	r2, #56	@ 0x38
 800587c:	18ba      	adds	r2, r7, r2
 800587e:	54d1      	strb	r1, [r2, r3]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	183b      	adds	r3, r7, r0
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	18d3      	adds	r3, r2, r3
 800588c:	881a      	ldrh	r2, [r3, #0]
 800588e:	0005      	movs	r5, r0
 8005890:	183b      	adds	r3, r7, r0
 8005892:	781c      	ldrb	r4, [r3, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	0019      	movs	r1, r3
 8005898:	0010      	movs	r0, r2
 800589a:	f7ff f95b 	bl	8004b54 <calc_res_heat>
 800589e:	0003      	movs	r3, r0
 80058a0:	001a      	movs	r2, r3
 80058a2:	232c      	movs	r3, #44	@ 0x2c
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	551a      	strb	r2, [r3, r4]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80058a8:	0028      	movs	r0, r5
 80058aa:	183b      	adds	r3, r7, r0
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	183a      	adds	r2, r7, r0
 80058b0:	7812      	ldrb	r2, [r2, #0]
 80058b2:	3264      	adds	r2, #100	@ 0x64
 80058b4:	b2d1      	uxtb	r1, r2
 80058b6:	2220      	movs	r2, #32
 80058b8:	18ba      	adds	r2, r7, r2
 80058ba:	54d1      	strb	r1, [r2, r3]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	183b      	adds	r3, r7, r0
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	18d3      	adds	r3, r2, r3
 80058c8:	881a      	ldrh	r2, [r3, #0]
 80058ca:	183b      	adds	r3, r7, r0
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	b2d1      	uxtb	r1, r2
 80058d0:	2214      	movs	r2, #20
 80058d2:	18ba      	adds	r2, r7, r2
 80058d4:	54d1      	strb	r1, [r2, r3]
            for (i = 0; i < conf->profile_len; i++)
 80058d6:	183b      	adds	r3, r7, r0
 80058d8:	781a      	ldrb	r2, [r3, #0]
 80058da:	183b      	adds	r3, r7, r0
 80058dc:	3201      	adds	r2, #1
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	7c1b      	ldrb	r3, [r3, #16]
 80058e4:	2246      	movs	r2, #70	@ 0x46
 80058e6:	18ba      	adds	r2, r7, r2
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d3be      	bcc.n	800586c <set_conf+0x1c8>
            }

            (*nb_conv) = conf->profile_len;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	7c1a      	ldrb	r2, [r3, #16]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 80058f6:	2345      	movs	r3, #69	@ 0x45
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	7c12      	ldrb	r2, [r2, #16]
 80058fe:	701a      	strb	r2, [r3, #0]
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8a5b      	ldrh	r3, [r3, #18]
 8005904:	0018      	movs	r0, r3
 8005906:	f000 f84b 	bl	80059a0 <calc_heatr_dur_shared>
 800590a:	0003      	movs	r3, r0
 800590c:	001a      	movs	r2, r3
 800590e:	2144      	movs	r1, #68	@ 0x44
 8005910:	187b      	adds	r3, r7, r1
 8005912:	701a      	strb	r2, [r3, #0]
            if (rslt == BME68X_OK)
 8005914:	2247      	movs	r2, #71	@ 0x47
 8005916:	18bb      	adds	r3, r7, r2
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	b25b      	sxtb	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10f      	bne.n	8005940 <set_conf+0x29c>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8005920:	18bc      	adds	r4, r7, r2
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	1879      	adds	r1, r7, r1
 8005926:	2243      	movs	r2, #67	@ 0x43
 8005928:	18b8      	adds	r0, r7, r2
 800592a:	2201      	movs	r2, #1
 800592c:	f7fd ff83 	bl	8003836 <bme68x_set_regs>
 8005930:	0003      	movs	r3, r0
 8005932:	7023      	strb	r3, [r4, #0]
            }

            break;
 8005934:	e004      	b.n	8005940 <set_conf+0x29c>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8005936:	2347      	movs	r3, #71	@ 0x47
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	2201      	movs	r2, #1
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	e000      	b.n	8005942 <set_conf+0x29e>
            break;
 8005940:	46c0      	nop			@ (mov r8, r8)
    }

    if (rslt == BME68X_OK)
 8005942:	2147      	movs	r1, #71	@ 0x47
 8005944:	187b      	adds	r3, r7, r1
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	b25b      	sxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10c      	bne.n	8005968 <set_conf+0x2c4>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 800594e:	2345      	movs	r3, #69	@ 0x45
 8005950:	18fb      	adds	r3, r7, r3
 8005952:	781a      	ldrb	r2, [r3, #0]
 8005954:	187c      	adds	r4, r7, r1
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	212c      	movs	r1, #44	@ 0x2c
 800595a:	1879      	adds	r1, r7, r1
 800595c:	2038      	movs	r0, #56	@ 0x38
 800595e:	1838      	adds	r0, r7, r0
 8005960:	f7fd ff69 	bl	8003836 <bme68x_set_regs>
 8005964:	0003      	movs	r3, r0
 8005966:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8005968:	2147      	movs	r1, #71	@ 0x47
 800596a:	187b      	adds	r3, r7, r1
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	b25b      	sxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10c      	bne.n	800598e <set_conf+0x2ea>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8005974:	2345      	movs	r3, #69	@ 0x45
 8005976:	18fb      	adds	r3, r7, r3
 8005978:	781a      	ldrb	r2, [r3, #0]
 800597a:	187c      	adds	r4, r7, r1
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2114      	movs	r1, #20
 8005980:	1879      	adds	r1, r7, r1
 8005982:	2020      	movs	r0, #32
 8005984:	1838      	adds	r0, r7, r0
 8005986:	f7fd ff56 	bl	8003836 <bme68x_set_regs>
 800598a:	0003      	movs	r3, r0
 800598c:	7023      	strb	r3, [r4, #0]
    }

    return rslt;
 800598e:	2347      	movs	r3, #71	@ 0x47
 8005990:	18fb      	adds	r3, r7, r3
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	b25b      	sxtb	r3, r3
}
 8005996:	0018      	movs	r0, r3
 8005998:	46bd      	mov	sp, r7
 800599a:	b012      	add	sp, #72	@ 0x48
 800599c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080059a0 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	0002      	movs	r2, r0
 80059a8:	1dbb      	adds	r3, r7, #6
 80059aa:	801a      	strh	r2, [r3, #0]
    uint8_t factor = 0;
 80059ac:	230f      	movs	r3, #15
 80059ae:	18fb      	adds	r3, r7, r3
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]
    uint8_t heatdurval;

    if (dur >= 0x783)
 80059b4:	1dbb      	adds	r3, r7, #6
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005a34 <calc_heatr_dur_shared+0x94>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d904      	bls.n	80059c8 <calc_heatr_dur_shared+0x28>
    {
        heatdurval = 0xff; /* Max duration */
 80059be:	230e      	movs	r3, #14
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	22ff      	movs	r2, #255	@ 0xff
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e02e      	b.n	8005a26 <calc_heatr_dur_shared+0x86>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 80059c8:	1dbb      	adds	r3, r7, #6
 80059ca:	881a      	ldrh	r2, [r3, #0]
 80059cc:	0013      	movs	r3, r2
 80059ce:	015b      	lsls	r3, r3, #5
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	189b      	adds	r3, r3, r2
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	001a      	movs	r2, r3
 80059da:	23de      	movs	r3, #222	@ 0xde
 80059dc:	33ff      	adds	r3, #255	@ 0xff
 80059de:	0019      	movs	r1, r3
 80059e0:	0010      	movs	r0, r2
 80059e2:	f7fa fbb5 	bl	8000150 <__udivsi3>
 80059e6:	0003      	movs	r3, r0
 80059e8:	001a      	movs	r2, r3
 80059ea:	1dbb      	adds	r3, r7, #6
 80059ec:	801a      	strh	r2, [r3, #0]
        while (dur > 0x3F)
 80059ee:	e00a      	b.n	8005a06 <calc_heatr_dur_shared+0x66>
        {
            dur = dur >> 2;
 80059f0:	1dbb      	adds	r3, r7, #6
 80059f2:	1dba      	adds	r2, r7, #6
 80059f4:	8812      	ldrh	r2, [r2, #0]
 80059f6:	0892      	lsrs	r2, r2, #2
 80059f8:	801a      	strh	r2, [r3, #0]
            factor += 1;
 80059fa:	220f      	movs	r2, #15
 80059fc:	18bb      	adds	r3, r7, r2
 80059fe:	18ba      	adds	r2, r7, r2
 8005a00:	7812      	ldrb	r2, [r2, #0]
 8005a02:	3201      	adds	r2, #1
 8005a04:	701a      	strb	r2, [r3, #0]
        while (dur > 0x3F)
 8005a06:	1dbb      	adds	r3, r7, #6
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8005a0c:	d8f0      	bhi.n	80059f0 <calc_heatr_dur_shared+0x50>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8005a0e:	1dbb      	adds	r3, r7, #6
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	b2d9      	uxtb	r1, r3
 8005a14:	230f      	movs	r3, #15
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	019b      	lsls	r3, r3, #6
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	230e      	movs	r3, #14
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	188a      	adds	r2, r1, r2
 8005a24:	701a      	strb	r2, [r3, #0]
    }

    return heatdurval;
 8005a26:	230e      	movs	r3, #14
 8005a28:	18fb      	adds	r3, r7, r3
 8005a2a:	781b      	ldrb	r3, [r3, #0]
}
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	b004      	add	sp, #16
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	00000782 	.word	0x00000782

08005a38 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	603a      	str	r2, [r7, #0]
 8005a40:	1dfb      	adds	r3, r7, #7
 8005a42:	1c02      	adds	r2, r0, #0
 8005a44:	701a      	strb	r2, [r3, #0]
 8005a46:	1dbb      	adds	r3, r7, #6
 8005a48:	1c0a      	adds	r2, r1, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8005a4c:	1dfb      	adds	r3, r7, #7
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	18d3      	adds	r3, r2, r3
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	789a      	ldrb	r2, [r3, #2]
 8005a5a:	210e      	movs	r1, #14
 8005a5c:	187b      	adds	r3, r7, r1
 8005a5e:	801a      	strh	r2, [r3, #0]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8005a60:	1dbb      	adds	r3, r7, #6
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	18d3      	adds	r3, r2, r3
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	789a      	ldrb	r2, [r3, #2]
 8005a6e:	200c      	movs	r0, #12
 8005a70:	183b      	adds	r3, r7, r0
 8005a72:	801a      	strh	r2, [r3, #0]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8005a74:	1dfb      	adds	r3, r7, #7
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	683a      	ldr	r2, [r7, #0]
 8005a7c:	18d3      	adds	r3, r2, r3
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	b25b      	sxtb	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	da2c      	bge.n	8005ae2 <sort_sensor_data+0xaa>
 8005a88:	1dbb      	adds	r3, r7, #6
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	18d3      	adds	r3, r2, r3
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	b25b      	sxtb	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	da22      	bge.n	8005ae2 <sort_sensor_data+0xaa>
    {
        int16_t diff = meas_index2 - meas_index1;
 8005a9c:	183b      	adds	r3, r7, r0
 8005a9e:	881a      	ldrh	r2, [r3, #0]
 8005aa0:	187b      	adds	r3, r7, r1
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	210a      	movs	r1, #10
 8005aaa:	187b      	adds	r3, r7, r1
 8005aac:	801a      	strh	r2, [r3, #0]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8005aae:	000a      	movs	r2, r1
 8005ab0:	18bb      	adds	r3, r7, r2
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	5e5b      	ldrsh	r3, [r3, r1]
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	db04      	blt.n	8005ac4 <sort_sensor_data+0x8c>
 8005aba:	18bb      	adds	r3, r7, r2
 8005abc:	2200      	movs	r2, #0
 8005abe:	5e9b      	ldrsh	r3, [r3, r2]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	db05      	blt.n	8005ad0 <sort_sensor_data+0x98>
 8005ac4:	230a      	movs	r3, #10
 8005ac6:	18fb      	adds	r3, r7, r3
 8005ac8:	2200      	movs	r2, #0
 8005aca:	5e9b      	ldrsh	r3, [r3, r2]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	dd1b      	ble.n	8005b08 <sort_sensor_data+0xd0>
        {
            swap_fields(low_index, high_index, field);
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	1dbb      	adds	r3, r7, #6
 8005ad4:	7819      	ldrb	r1, [r3, #0]
 8005ad6:	1dfb      	adds	r3, r7, #7
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	0018      	movs	r0, r3
 8005adc:	f000 f819 	bl	8005b12 <swap_fields>
    {
 8005ae0:	e012      	b.n	8005b08 <sort_sensor_data+0xd0>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8005ae2:	1dbb      	adds	r3, r7, #6
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	18d3      	adds	r3, r2, r3
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	b25b      	sxtb	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	da09      	bge.n	8005b0a <sort_sensor_data+0xd2>
    {
        swap_fields(low_index, high_index, field);
 8005af6:	683a      	ldr	r2, [r7, #0]
 8005af8:	1dbb      	adds	r3, r7, #6
 8005afa:	7819      	ldrb	r1, [r3, #0]
 8005afc:	1dfb      	adds	r3, r7, #7
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	0018      	movs	r0, r3
 8005b02:	f000 f806 	bl	8005b12 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8005b06:	e000      	b.n	8005b0a <sort_sensor_data+0xd2>
    {
 8005b08:	46c0      	nop			@ (mov r8, r8)
}
 8005b0a:	46c0      	nop			@ (mov r8, r8)
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	b004      	add	sp, #16
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	603a      	str	r2, [r7, #0]
 8005b1a:	1dfb      	adds	r3, r7, #7
 8005b1c:	1c02      	adds	r2, r0, #0
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	1dbb      	adds	r3, r7, #6
 8005b22:	1c0a      	adds	r2, r1, #0
 8005b24:	701a      	strb	r2, [r3, #0]
    struct bme68x_data *temp;

    temp = field[index1];
 8005b26:	1dfb      	adds	r3, r7, #7
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	18d3      	adds	r3, r2, r3
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8005b34:	1dbb      	adds	r3, r7, #6
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	18d2      	adds	r2, r2, r3
 8005b3e:	1dfb      	adds	r3, r7, #7
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	18cb      	adds	r3, r1, r3
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8005b4c:	1dbb      	adds	r3, r7, #6
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	18d3      	adds	r3, r2, r3
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	601a      	str	r2, [r3, #0]
}
 8005b5a:	46c0      	nop			@ (mov r8, r8)
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	b004      	add	sp, #16
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8005b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b64:	b08f      	sub	sp, #60	@ 0x3c
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8005b6a:	2537      	movs	r5, #55	@ 0x37
 8005b6c:	197c      	adds	r4, r7, r5
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	260c      	movs	r6, #12
 8005b72:	19b9      	adds	r1, r7, r6
 8005b74:	2217      	movs	r2, #23
 8005b76:	208a      	movs	r0, #138	@ 0x8a
 8005b78:	f7fd ff0a 	bl	8003990 <bme68x_get_regs>
 8005b7c:	0003      	movs	r3, r0
 8005b7e:	7023      	strb	r3, [r4, #0]
    if (rslt == BME68X_OK)
 8005b80:	197b      	adds	r3, r7, r5
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	b25b      	sxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <get_calib_data+0x40>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8005b8a:	197c      	adds	r4, r7, r5
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	19bb      	adds	r3, r7, r6
 8005b90:	3317      	adds	r3, #23
 8005b92:	0019      	movs	r1, r3
 8005b94:	0013      	movs	r3, r2
 8005b96:	220e      	movs	r2, #14
 8005b98:	20e1      	movs	r0, #225	@ 0xe1
 8005b9a:	f7fd fef9 	bl	8003990 <bme68x_get_regs>
 8005b9e:	0003      	movs	r3, r0
 8005ba0:	7023      	strb	r3, [r4, #0]
    }

    if (rslt == BME68X_OK)
 8005ba2:	2237      	movs	r2, #55	@ 0x37
 8005ba4:	18bb      	adds	r3, r7, r2
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	b25b      	sxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10c      	bne.n	8005bc8 <get_calib_data+0x66>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8005bae:	18bc      	adds	r4, r7, r2
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	230c      	movs	r3, #12
 8005bb4:	18fb      	adds	r3, r7, r3
 8005bb6:	3325      	adds	r3, #37	@ 0x25
 8005bb8:	0019      	movs	r1, r3
 8005bba:	0013      	movs	r3, r2
 8005bbc:	2205      	movs	r2, #5
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	f7fd fee6 	bl	8003990 <bme68x_get_regs>
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	7023      	strb	r3, [r4, #0]
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8005bc8:	2337      	movs	r3, #55	@ 0x37
 8005bca:	18fb      	adds	r3, r7, r3
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	b25b      	sxtb	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d000      	beq.n	8005bd6 <get_calib_data+0x74>
 8005bd4:	e0f4      	b.n	8005dc0 <get_calib_data+0x25e>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8005bd6:	210c      	movs	r1, #12
 8005bd8:	187b      	adds	r3, r7, r1
 8005bda:	2220      	movs	r2, #32
 8005bdc:	5c9b      	ldrb	r3, [r3, r2]
 8005bde:	b21b      	sxth	r3, r3
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	b21a      	sxth	r2, r3
 8005be4:	187b      	adds	r3, r7, r1
 8005be6:	7fdb      	ldrb	r3, [r3, #31]
 8005be8:	b21b      	sxth	r3, r3
 8005bea:	4313      	orrs	r3, r2
 8005bec:	b21b      	sxth	r3, r3
 8005bee:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8005bf4:	187b      	adds	r3, r7, r1
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	b21b      	sxth	r3, r3
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	b21a      	sxth	r2, r3
 8005bfe:	187b      	adds	r3, r7, r1
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	b21b      	sxth	r3, r3
 8005c04:	4313      	orrs	r3, r2
 8005c06:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8005c0c:	0008      	movs	r0, r1
 8005c0e:	187b      	adds	r3, r7, r1
 8005c10:	789b      	ldrb	r3, [r3, #2]
 8005c12:	b259      	sxtb	r1, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2222      	movs	r2, #34	@ 0x22
 8005c18:	5499      	strb	r1, [r3, r2]

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8005c1a:	0001      	movs	r1, r0
 8005c1c:	187b      	adds	r3, r7, r1
 8005c1e:	795b      	ldrb	r3, [r3, #5]
 8005c20:	b21b      	sxth	r3, r3
 8005c22:	021b      	lsls	r3, r3, #8
 8005c24:	b21a      	sxth	r2, r3
 8005c26:	187b      	adds	r3, r7, r1
 8005c28:	791b      	ldrb	r3, [r3, #4]
 8005c2a:	b21b      	sxth	r3, r3
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	b21b      	sxth	r3, r3
 8005c30:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8005c36:	187b      	adds	r3, r7, r1
 8005c38:	79db      	ldrb	r3, [r3, #7]
 8005c3a:	b21b      	sxth	r3, r3
 8005c3c:	021b      	lsls	r3, r3, #8
 8005c3e:	b21a      	sxth	r2, r3
 8005c40:	187b      	adds	r3, r7, r1
 8005c42:	799b      	ldrb	r3, [r3, #6]
 8005c44:	b21b      	sxth	r3, r3
 8005c46:	4313      	orrs	r3, r2
 8005c48:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8005c4e:	0008      	movs	r0, r1
 8005c50:	187b      	adds	r3, r7, r1
 8005c52:	7a1b      	ldrb	r3, [r3, #8]
 8005c54:	b259      	sxtb	r1, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2228      	movs	r2, #40	@ 0x28
 8005c5a:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8005c5c:	0001      	movs	r1, r0
 8005c5e:	187b      	adds	r3, r7, r1
 8005c60:	7adb      	ldrb	r3, [r3, #11]
 8005c62:	b21b      	sxth	r3, r3
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	b21a      	sxth	r2, r3
 8005c68:	187b      	adds	r3, r7, r1
 8005c6a:	7a9b      	ldrb	r3, [r3, #10]
 8005c6c:	b21b      	sxth	r3, r3
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8005c76:	187b      	adds	r3, r7, r1
 8005c78:	7b5b      	ldrb	r3, [r3, #13]
 8005c7a:	b21b      	sxth	r3, r3
 8005c7c:	021b      	lsls	r3, r3, #8
 8005c7e:	b21a      	sxth	r2, r3
 8005c80:	187b      	adds	r3, r7, r1
 8005c82:	7b1b      	ldrb	r3, [r3, #12]
 8005c84:	b21b      	sxth	r3, r3
 8005c86:	4313      	orrs	r3, r2
 8005c88:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 8005c8e:	0008      	movs	r0, r1
 8005c90:	183b      	adds	r3, r7, r0
 8005c92:	7bdb      	ldrb	r3, [r3, #15]
 8005c94:	b259      	sxtb	r1, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	222e      	movs	r2, #46	@ 0x2e
 8005c9a:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8005c9c:	183b      	adds	r3, r7, r0
 8005c9e:	7b9b      	ldrb	r3, [r3, #14]
 8005ca0:	b259      	sxtb	r1, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	222f      	movs	r2, #47	@ 0x2f
 8005ca6:	5499      	strb	r1, [r3, r2]
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 8005ca8:	183b      	adds	r3, r7, r0
 8005caa:	7cdb      	ldrb	r3, [r3, #19]
 8005cac:	b21b      	sxth	r3, r3
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	b21a      	sxth	r2, r3
 8005cb2:	183b      	adds	r3, r7, r0
 8005cb4:	7c9b      	ldrb	r3, [r3, #18]
 8005cb6:	b21b      	sxth	r3, r3
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8005cc0:	183b      	adds	r3, r7, r0
 8005cc2:	7d5b      	ldrb	r3, [r3, #21]
 8005cc4:	b21b      	sxth	r3, r3
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	b21a      	sxth	r2, r3
 8005cca:	183b      	adds	r3, r7, r0
 8005ccc:	7d1b      	ldrb	r3, [r3, #20]
 8005cce:	b21b      	sxth	r3, r3
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8005cd8:	183b      	adds	r3, r7, r0
 8005cda:	7d99      	ldrb	r1, [r3, #22]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2234      	movs	r2, #52	@ 0x34
 8005ce0:	5499      	strb	r1, [r3, r2]

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8005ce2:	183b      	adds	r3, r7, r0
 8005ce4:	7e5b      	ldrb	r3, [r3, #25]
 8005ce6:	b21b      	sxth	r3, r3
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8005cec:	183b      	adds	r3, r7, r0
 8005cee:	7e1b      	ldrb	r3, [r3, #24]
 8005cf0:	b21b      	sxth	r3, r3
 8005cf2:	210f      	movs	r1, #15
 8005cf4:	400b      	ands	r3, r1
 8005cf6:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	b21b      	sxth	r3, r3
 8005cfc:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8005d02:	183b      	adds	r3, r7, r0
 8005d04:	7ddb      	ldrb	r3, [r3, #23]
 8005d06:	b21b      	sxth	r3, r3
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	b21a      	sxth	r2, r3
 8005d0c:	183b      	adds	r3, r7, r0
 8005d0e:	7e1b      	ldrb	r3, [r3, #24]
 8005d10:	091b      	lsrs	r3, r3, #4
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	b21b      	sxth	r3, r3
 8005d16:	4313      	orrs	r3, r2
 8005d18:	b21b      	sxth	r3, r3
 8005d1a:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 8005d20:	183b      	adds	r3, r7, r0
 8005d22:	7e9b      	ldrb	r3, [r3, #26]
 8005d24:	b25a      	sxtb	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8005d2a:	183b      	adds	r3, r7, r0
 8005d2c:	7edb      	ldrb	r3, [r3, #27]
 8005d2e:	b25a      	sxtb	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8005d34:	183b      	adds	r3, r7, r0
 8005d36:	7f1b      	ldrb	r3, [r3, #28]
 8005d38:	b25a      	sxtb	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 8005d3e:	183b      	adds	r3, r7, r0
 8005d40:	7f5a      	ldrb	r2, [r3, #29]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8005d46:	183b      	adds	r3, r7, r0
 8005d48:	7f9b      	ldrb	r3, [r3, #30]
 8005d4a:	b25a      	sxtb	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 8005d50:	183b      	adds	r3, r7, r0
 8005d52:	2223      	movs	r2, #35	@ 0x23
 8005d54:	5c9b      	ldrb	r3, [r3, r2]
 8005d56:	b25a      	sxtb	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8005d5c:	183b      	adds	r3, r7, r0
 8005d5e:	2222      	movs	r2, #34	@ 0x22
 8005d60:	5c9b      	ldrb	r3, [r3, r2]
 8005d62:	b21b      	sxth	r3, r3
 8005d64:	021b      	lsls	r3, r3, #8
 8005d66:	b21a      	sxth	r2, r3
 8005d68:	183b      	adds	r3, r7, r0
 8005d6a:	2121      	movs	r1, #33	@ 0x21
 8005d6c:	5c5b      	ldrb	r3, [r3, r1]
 8005d6e:	b21b      	sxth	r3, r3
 8005d70:	4313      	orrs	r3, r2
 8005d72:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 8005d78:	183b      	adds	r3, r7, r0
 8005d7a:	2224      	movs	r2, #36	@ 0x24
 8005d7c:	5c9b      	ldrb	r3, [r3, r2]
 8005d7e:	b25a      	sxtb	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 8005d84:	183b      	adds	r3, r7, r0
 8005d86:	2227      	movs	r2, #39	@ 0x27
 8005d88:	5c9b      	ldrb	r3, [r3, r2]
 8005d8a:	001a      	movs	r2, r3
 8005d8c:	2330      	movs	r3, #48	@ 0x30
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d500      	bpl.n	8005d94 <get_calib_data+0x232>
 8005d92:	330f      	adds	r3, #15
 8005d94:	111b      	asrs	r3, r3, #4
 8005d96:	b2d9      	uxtb	r1, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	223c      	movs	r2, #60	@ 0x3c
 8005d9c:	5499      	strb	r1, [r3, r2]
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 8005d9e:	200c      	movs	r0, #12
 8005da0:	183b      	adds	r3, r7, r0
 8005da2:	2225      	movs	r2, #37	@ 0x25
 8005da4:	5c9b      	ldrb	r3, [r3, r2]
 8005da6:	b259      	sxtb	r1, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	223d      	movs	r2, #61	@ 0x3d
 8005dac:	5499      	strb	r1, [r3, r2]
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8005dae:	183b      	adds	r3, r7, r0
 8005db0:	2229      	movs	r2, #41	@ 0x29
 8005db2:	5c9b      	ldrb	r3, [r3, r2]
 8005db4:	b25b      	sxtb	r3, r3
 8005db6:	111b      	asrs	r3, r3, #4
 8005db8:	b259      	sxtb	r1, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	223e      	movs	r2, #62	@ 0x3e
 8005dbe:	5499      	strb	r1, [r3, r2]
    }

    return rslt;
 8005dc0:	2337      	movs	r3, #55	@ 0x37
 8005dc2:	18fb      	adds	r3, r7, r3
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	b25b      	sxtb	r3, r3
}
 8005dc8:	0018      	movs	r0, r3
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	b00f      	add	sp, #60	@ 0x3c
 8005dce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dd0 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8005dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8005dd8:	250e      	movs	r5, #14
 8005dda:	197b      	adds	r3, r7, r5
 8005ddc:	2200      	movs	r2, #0
 8005dde:	701a      	strb	r2, [r3, #0]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8005de0:	260f      	movs	r6, #15
 8005de2:	19bc      	adds	r4, r7, r6
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	1979      	adds	r1, r7, r5
 8005de8:	2201      	movs	r2, #1
 8005dea:	20f0      	movs	r0, #240	@ 0xf0
 8005dec:	f7fd fdd0 	bl	8003990 <bme68x_get_regs>
 8005df0:	0003      	movs	r3, r0
 8005df2:	7023      	strb	r3, [r4, #0]

    if (rslt == BME68X_OK)
 8005df4:	19bb      	adds	r3, r7, r6
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	b25b      	sxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d104      	bne.n	8005e08 <read_variant_id+0x38>
    {
        dev->variant_id = reg_data;
 8005dfe:	197b      	adds	r3, r7, r5
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	001a      	movs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8005e08:	230f      	movs	r3, #15
 8005e0a:	18fb      	adds	r3, r7, r3
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	b25b      	sxtb	r3, r3
}
 8005e10:	0018      	movs	r0, r3
 8005e12:	46bd      	mov	sp, r7
 8005e14:	b005      	add	sp, #20
 8005e16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e18 <log_debug>:
#include <stdio.h>

// Externally declare the UART handler
extern UART_HandleTypeDef huart2;

static inline void log_debug(const char *msg) {
 8005e18:	b590      	push	{r4, r7, lr}
 8005e1a:	b0b5      	sub	sp, #212	@ 0xd4
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
    char buffer[200];
    snprintf(buffer, sizeof(buffer), "[DEBUG] %s\r\n", msg);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a0b      	ldr	r2, [pc, #44]	@ (8005e50 <log_debug+0x38>)
 8005e24:	2408      	movs	r4, #8
 8005e26:	1938      	adds	r0, r7, r4
 8005e28:	21c8      	movs	r1, #200	@ 0xc8
 8005e2a:	f004 fd7d 	bl	800a928 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8005e2e:	193b      	adds	r3, r7, r4
 8005e30:	0018      	movs	r0, r3
 8005e32:	f7fa f971 	bl	8000118 <strlen>
 8005e36:	0003      	movs	r3, r0
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	425b      	negs	r3, r3
 8005e3e:	1939      	adds	r1, r7, r4
 8005e40:	4804      	ldr	r0, [pc, #16]	@ (8005e54 <log_debug+0x3c>)
 8005e42:	f003 f97b 	bl	800913c <HAL_UART_Transmit>
}
 8005e46:	46c0      	nop			@ (mov r8, r8)
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	b035      	add	sp, #212	@ 0xd4
 8005e4c:	bd90      	pop	{r4, r7, pc}
 8005e4e:	46c0      	nop			@ (mov r8, r8)
 8005e50:	0800d9b0 	.word	0x0800d9b0
 8005e54:	200002a8 	.word	0x200002a8

08005e58 <user_delay_us>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void user_delay_us(uint32_t period, void *intf_ptr)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
    uint32_t start = HAL_GetTick();
 8005e62:	f001 f895 	bl	8006f90 <HAL_GetTick>
 8005e66:	0003      	movs	r3, r0
 8005e68:	60fb      	str	r3, [r7, #12]
    while ((HAL_GetTick() - start) * 1000 < period);
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	f001 f890 	bl	8006f90 <HAL_GetTick>
 8005e70:	0002      	movs	r2, r0
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	1ad2      	subs	r2, r2, r3
 8005e76:	0013      	movs	r3, r2
 8005e78:	015b      	lsls	r3, r3, #5
 8005e7a:	1a9b      	subs	r3, r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	189b      	adds	r3, r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	001a      	movs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d8f0      	bhi.n	8005e6c <user_delay_us+0x14>
}
 8005e8a:	46c0      	nop			@ (mov r8, r8)
 8005e8c:	46c0      	nop			@ (mov r8, r8)
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	b004      	add	sp, #16
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <user_i2c_read>:

static int8_t user_i2c_read(uint8_t reg_addr, uint8_t *data, uint32_t len, void *intf_ptr)
{
 8005e94:	b5b0      	push	{r4, r5, r7, lr}
 8005e96:	b08e      	sub	sp, #56	@ 0x38
 8005e98:	af04      	add	r7, sp, #16
 8005e9a:	60b9      	str	r1, [r7, #8]
 8005e9c:	607a      	str	r2, [r7, #4]
 8005e9e:	603b      	str	r3, [r7, #0]
 8005ea0:	210f      	movs	r1, #15
 8005ea2:	187b      	adds	r3, r7, r1
 8005ea4:	1c02      	adds	r2, r0, #0
 8005ea6:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_I2C_Mem_Read(hi2c, BME68X_I2C_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY) != HAL_OK) {
 8005eac:	187b      	adds	r3, r7, r1
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	b299      	uxth	r1, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005eb8:	2201      	movs	r2, #1
 8005eba:	4252      	negs	r2, r2
 8005ebc:	9202      	str	r2, [sp, #8]
 8005ebe:	9301      	str	r3, [sp, #4]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	000a      	movs	r2, r1
 8005ec8:	21ee      	movs	r1, #238	@ 0xee
 8005eca:	f001 fc99 	bl	8007800 <HAL_I2C_Mem_Read>
 8005ece:	1e03      	subs	r3, r0, #0
 8005ed0:	d017      	beq.n	8005f02 <user_i2c_read+0x6e>
        char err[] = "I2C read failed\r\n";
 8005ed2:	2510      	movs	r5, #16
 8005ed4:	197b      	adds	r3, r7, r5
 8005ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8005f0c <user_i2c_read+0x78>)
 8005ed8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005eda:	c313      	stmia	r3!, {r0, r1, r4}
 8005edc:	6811      	ldr	r1, [r2, #0]
 8005ede:	6019      	str	r1, [r3, #0]
 8005ee0:	8892      	ldrh	r2, [r2, #4]
 8005ee2:	809a      	strh	r2, [r3, #4]
        HAL_UART_Transmit(&huart2, (uint8_t*)err, strlen(err), HAL_MAX_DELAY);
 8005ee4:	197b      	adds	r3, r7, r5
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f7fa f916 	bl	8000118 <strlen>
 8005eec:	0003      	movs	r3, r0
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	425b      	negs	r3, r3
 8005ef4:	1979      	adds	r1, r7, r5
 8005ef6:	4806      	ldr	r0, [pc, #24]	@ (8005f10 <user_i2c_read+0x7c>)
 8005ef8:	f003 f920 	bl	800913c <HAL_UART_Transmit>
        return -1;
 8005efc:	2301      	movs	r3, #1
 8005efe:	425b      	negs	r3, r3
 8005f00:	e000      	b.n	8005f04 <user_i2c_read+0x70>
    }
    return 0;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b00a      	add	sp, #40	@ 0x28
 8005f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8005f0c:	0800d9c0 	.word	0x0800d9c0
 8005f10:	200002a8 	.word	0x200002a8

08005f14 <user_i2c_write>:

static int8_t user_i2c_write(uint8_t reg_addr, const uint8_t *data, uint32_t len, void *intf_ptr)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	@ 0x28
 8005f18:	af04      	add	r7, sp, #16
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	607a      	str	r2, [r7, #4]
 8005f1e:	603b      	str	r3, [r7, #0]
 8005f20:	210f      	movs	r1, #15
 8005f22:	187b      	adds	r3, r7, r1
 8005f24:	1c02      	adds	r2, r0, #0
 8005f26:	701a      	strb	r2, [r3, #0]
    I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)intf_ptr;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	617b      	str	r3, [r7, #20]
    if (HAL_I2C_Mem_Write(hi2c, BME68X_I2C_ADDR << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, len, HAL_MAX_DELAY) != HAL_OK)
 8005f2c:	187b      	adds	r3, r7, r1
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	b299      	uxth	r1, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	6978      	ldr	r0, [r7, #20]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	4252      	negs	r2, r2
 8005f3c:	9202      	str	r2, [sp, #8]
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	2301      	movs	r3, #1
 8005f46:	000a      	movs	r2, r1
 8005f48:	21ee      	movs	r1, #238	@ 0xee
 8005f4a:	f001 fb2b 	bl	80075a4 <HAL_I2C_Mem_Write>
 8005f4e:	1e03      	subs	r3, r0, #0
 8005f50:	d002      	beq.n	8005f58 <user_i2c_write+0x44>
        return -1;
 8005f52:	2301      	movs	r3, #1
 8005f54:	425b      	negs	r3, r3
 8005f56:	e000      	b.n	8005f5a <user_i2c_write+0x46>
    return 0;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b006      	add	sp, #24
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f64:	b590      	push	{r4, r7, lr}
 8005f66:	b0cd      	sub	sp, #308	@ 0x134
 8005f68:	af02      	add	r7, sp, #8
int main(void)
 8005f6a:	2398      	movs	r3, #152	@ 0x98
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	2208      	movs	r2, #8
 8005f70:	189b      	adds	r3, r3, r2
 8005f72:	19db      	adds	r3, r3, r7
 8005f74:	1c7a      	adds	r2, r7, #1
 8005f76:	32ff      	adds	r2, #255	@ 0xff
 8005f78:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 1 */
  log_debug("System Initialization Started");
 8005f7a:	4bdc      	ldr	r3, [pc, #880]	@ (80062ec <main+0x388>)
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f7ff ff4b 	bl	8005e18 <log_debug>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f82:	f000 ff89 	bl	8006e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f86:	f000 fbcf 	bl	8006728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f8a:	f000 fce1 	bl	8006950 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8005f8e:	f000 fc91 	bl	80068b4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8005f92:	f000 fc11 	bl	80067b8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8005f96:	f000 fc4f 	bl	8006838 <MX_SPI1_Init>
//  sx126x_set_tx_params(&Radio, 14, SX126X_RAMP_40_US);   // 14 dBm output, 40µs ramp (typical)



  // --- SX1262 LoRa HAT Completed ---
  log_debug("Initializing BME68x...");
 8005f9a:	4bd5      	ldr	r3, [pc, #852]	@ (80062f0 <main+0x38c>)
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f7ff ff3b 	bl	8005e18 <log_debug>

  // Set up BME68x sensor interface
  gas_sensor.intf = BME68X_I2C_INTF;
 8005fa2:	4bd4      	ldr	r3, [pc, #848]	@ (80062f4 <main+0x390>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	731a      	strb	r2, [r3, #12]
  gas_sensor.read = user_i2c_read;
 8005fa8:	4bd2      	ldr	r3, [pc, #840]	@ (80062f4 <main+0x390>)
 8005faa:	4ad3      	ldr	r2, [pc, #844]	@ (80062f8 <main+0x394>)
 8005fac:	641a      	str	r2, [r3, #64]	@ 0x40
  gas_sensor.write = user_i2c_write;
 8005fae:	4bd1      	ldr	r3, [pc, #836]	@ (80062f4 <main+0x390>)
 8005fb0:	4ad2      	ldr	r2, [pc, #840]	@ (80062fc <main+0x398>)
 8005fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  gas_sensor.delay_us = user_delay_us;
 8005fb4:	4bcf      	ldr	r3, [pc, #828]	@ (80062f4 <main+0x390>)
 8005fb6:	4ad2      	ldr	r2, [pc, #840]	@ (8006300 <main+0x39c>)
 8005fb8:	649a      	str	r2, [r3, #72]	@ 0x48
  gas_sensor.intf_ptr = &hi2c1;
 8005fba:	4bce      	ldr	r3, [pc, #824]	@ (80062f4 <main+0x390>)
 8005fbc:	4ad1      	ldr	r2, [pc, #836]	@ (8006304 <main+0x3a0>)
 8005fbe:	605a      	str	r2, [r3, #4]

  rslt = bme68x_init(&gas_sensor);
 8005fc0:	4bcc      	ldr	r3, [pc, #816]	@ (80062f4 <main+0x390>)
 8005fc2:	0018      	movs	r0, r3
 8005fc4:	f7fd fbfc 	bl	80037c0 <bme68x_init>
 8005fc8:	0003      	movs	r3, r0
 8005fca:	001a      	movs	r2, r3
 8005fcc:	4bce      	ldr	r3, [pc, #824]	@ (8006308 <main+0x3a4>)
 8005fce:	701a      	strb	r2, [r3, #0]
  if (rslt != BME68X_OK) {
 8005fd0:	4bcd      	ldr	r3, [pc, #820]	@ (8006308 <main+0x3a4>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	b25b      	sxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <main+0x82>
      log_debug("Sensor initialization failed. Halting.");
 8005fda:	4bcc      	ldr	r3, [pc, #816]	@ (800630c <main+0x3a8>)
 8005fdc:	0018      	movs	r0, r3
 8005fde:	f7ff ff1b 	bl	8005e18 <log_debug>
      while (1);
 8005fe2:	46c0      	nop			@ (mov r8, r8)
 8005fe4:	e7fd      	b.n	8005fe2 <main+0x7e>
  }

  uint8_t chip_id = 0;
 8005fe6:	24ff      	movs	r4, #255	@ 0xff
 8005fe8:	193b      	adds	r3, r7, r4
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
  rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &chip_id, 1, &gas_sensor);
 8005fee:	4bc1      	ldr	r3, [pc, #772]	@ (80062f4 <main+0x390>)
 8005ff0:	1939      	adds	r1, r7, r4
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	20d0      	movs	r0, #208	@ 0xd0
 8005ff6:	f7fd fccb 	bl	8003990 <bme68x_get_regs>
 8005ffa:	0003      	movs	r3, r0
 8005ffc:	001a      	movs	r2, r3
 8005ffe:	4bc2      	ldr	r3, [pc, #776]	@ (8006308 <main+0x3a4>)
 8006000:	701a      	strb	r2, [r3, #0]
  if (rslt == BME68X_OK) {
 8006002:	4bc1      	ldr	r3, [pc, #772]	@ (8006308 <main+0x3a4>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	b25b      	sxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d110      	bne.n	800602e <main+0xca>
      char id_msg[64];
      snprintf(id_msg, sizeof(id_msg), "BME68x Chip ID: 0x%02X (Expected: 0x%02X)", chip_id, BME68X_CHIP_ID);
 800600c:	193b      	adds	r3, r7, r4
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	0019      	movs	r1, r3
 8006012:	4abf      	ldr	r2, [pc, #764]	@ (8006310 <main+0x3ac>)
 8006014:	24a0      	movs	r4, #160	@ 0xa0
 8006016:	1938      	adds	r0, r7, r4
 8006018:	2361      	movs	r3, #97	@ 0x61
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	000b      	movs	r3, r1
 800601e:	2140      	movs	r1, #64	@ 0x40
 8006020:	f004 fc82 	bl	800a928 <sniprintf>
      log_debug(id_msg);
 8006024:	193b      	adds	r3, r7, r4
 8006026:	0018      	movs	r0, r3
 8006028:	f7ff fef6 	bl	8005e18 <log_debug>
 800602c:	e003      	b.n	8006036 <main+0xd2>
  } else {
      log_debug("Failed to read Chip ID");
 800602e:	4bb9      	ldr	r3, [pc, #740]	@ (8006314 <main+0x3b0>)
 8006030:	0018      	movs	r0, r3
 8006032:	f7ff fef1 	bl	8005e18 <log_debug>
  }

  log_debug("Configuring BME68x sensor...");
 8006036:	4bb8      	ldr	r3, [pc, #736]	@ (8006318 <main+0x3b4>)
 8006038:	0018      	movs	r0, r3
 800603a:	f7ff feed 	bl	8005e18 <log_debug>

  // Oversampling and filter config
  conf.os_hum = BME68X_OS_2X;
 800603e:	4bb7      	ldr	r3, [pc, #732]	@ (800631c <main+0x3b8>)
 8006040:	2202      	movs	r2, #2
 8006042:	701a      	strb	r2, [r3, #0]
  conf.os_temp = BME68X_OS_8X;
 8006044:	4bb5      	ldr	r3, [pc, #724]	@ (800631c <main+0x3b8>)
 8006046:	2204      	movs	r2, #4
 8006048:	705a      	strb	r2, [r3, #1]
  conf.os_pres = BME68X_OS_4X;
 800604a:	4bb4      	ldr	r3, [pc, #720]	@ (800631c <main+0x3b8>)
 800604c:	2203      	movs	r2, #3
 800604e:	709a      	strb	r2, [r3, #2]
  conf.filter = BME68X_FILTER_SIZE_3;
 8006050:	4bb2      	ldr	r3, [pc, #712]	@ (800631c <main+0x3b8>)
 8006052:	2202      	movs	r2, #2
 8006054:	70da      	strb	r2, [r3, #3]

  if (bme68x_set_conf(&conf, &gas_sensor) != BME68X_OK)
 8006056:	4aa7      	ldr	r2, [pc, #668]	@ (80062f4 <main+0x390>)
 8006058:	4bb0      	ldr	r3, [pc, #704]	@ (800631c <main+0x3b8>)
 800605a:	0011      	movs	r1, r2
 800605c:	0018      	movs	r0, r3
 800605e:	f7fd fd49 	bl	8003af4 <bme68x_set_conf>
 8006062:	1e03      	subs	r3, r0, #0
 8006064:	d003      	beq.n	800606e <main+0x10a>
      log_debug("Failed to apply sensor config");
 8006066:	4bae      	ldr	r3, [pc, #696]	@ (8006320 <main+0x3bc>)
 8006068:	0018      	movs	r0, r3
 800606a:	f7ff fed5 	bl	8005e18 <log_debug>

  // Heater configuration
  heatr_conf.enable = BME68X_ENABLE;
 800606e:	4bad      	ldr	r3, [pc, #692]	@ (8006324 <main+0x3c0>)
 8006070:	2201      	movs	r2, #1
 8006072:	701a      	strb	r2, [r3, #0]
  heatr_conf.heatr_temp = 300;
 8006074:	4bab      	ldr	r3, [pc, #684]	@ (8006324 <main+0x3c0>)
 8006076:	2296      	movs	r2, #150	@ 0x96
 8006078:	0052      	lsls	r2, r2, #1
 800607a:	805a      	strh	r2, [r3, #2]
  heatr_conf.heatr_dur = 100;
 800607c:	4ba9      	ldr	r3, [pc, #676]	@ (8006324 <main+0x3c0>)
 800607e:	2264      	movs	r2, #100	@ 0x64
 8006080:	809a      	strh	r2, [r3, #4]

  if (bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &gas_sensor) != BME68X_OK)
 8006082:	4a9c      	ldr	r2, [pc, #624]	@ (80062f4 <main+0x390>)
 8006084:	4ba7      	ldr	r3, [pc, #668]	@ (8006324 <main+0x3c0>)
 8006086:	0019      	movs	r1, r3
 8006088:	2001      	movs	r0, #1
 800608a:	f7fe f8e1 	bl	8004250 <bme68x_set_heatr_conf>
 800608e:	1e03      	subs	r3, r0, #0
 8006090:	d003      	beq.n	800609a <main+0x136>
      log_debug("Failed to apply heater config");
 8006092:	4ba5      	ldr	r3, [pc, #660]	@ (8006328 <main+0x3c4>)
 8006094:	0018      	movs	r0, r3
 8006096:	f7ff febf 	bl	8005e18 <log_debug>

  log_debug("BME68x configuration complete.");
 800609a:	4ba4      	ldr	r3, [pc, #656]	@ (800632c <main+0x3c8>)
 800609c:	0018      	movs	r0, r3
 800609e:	f7ff febb 	bl	8005e18 <log_debug>

  const char *intro_msg =
 80060a2:	4ba3      	ldr	r3, [pc, #652]	@ (8006330 <main+0x3cc>)
 80060a4:	2488      	movs	r4, #136	@ 0x88
 80060a6:	0064      	lsls	r4, r4, #1
 80060a8:	193a      	adds	r2, r7, r4
 80060aa:	6013      	str	r3, [r2, #0]
    "  mul a b [c ...]  - Multiply numbers\r\n"
    "  div a b [c ...]  - Divide numbers (left to right)\r\n"
    "  e.g., add 2 3 4 \r\n"
    "\r\nType 'help' to show this message again.\r\n"
    "===============================\r\n";
   HAL_UART_Transmit(&huart2, (uint8_t *)intro_msg, strlen(intro_msg), HAL_MAX_DELAY);
 80060ac:	193b      	adds	r3, r7, r4
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	0018      	movs	r0, r3
 80060b2:	f7fa f831 	bl	8000118 <strlen>
 80060b6:	0003      	movs	r3, r0
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	2301      	movs	r3, #1
 80060bc:	425b      	negs	r3, r3
 80060be:	1939      	adds	r1, r7, r4
 80060c0:	6809      	ldr	r1, [r1, #0]
 80060c2:	489c      	ldr	r0, [pc, #624]	@ (8006334 <main+0x3d0>)
 80060c4:	f003 f83a 	bl	800913c <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      char rx_buffer[32] = {0};
 80060c8:	4b9b      	ldr	r3, [pc, #620]	@ (8006338 <main+0x3d4>)
 80060ca:	2294      	movs	r2, #148	@ 0x94
 80060cc:	0052      	lsls	r2, r2, #1
 80060ce:	189b      	adds	r3, r3, r2
 80060d0:	19db      	adds	r3, r3, r7
 80060d2:	0018      	movs	r0, r3
 80060d4:	2320      	movs	r3, #32
 80060d6:	001a      	movs	r2, r3
 80060d8:	2100      	movs	r1, #0
 80060da:	f004 fd97 	bl	800ac0c <memset>
      uint8_t idx = 0;
 80060de:	2328      	movs	r3, #40	@ 0x28
 80060e0:	33ff      	adds	r3, #255	@ 0xff
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	2200      	movs	r2, #0
 80060e6:	701a      	strb	r2, [r3, #0]
      char ch;

      while (1) {
          HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80060e8:	2301      	movs	r3, #1
 80060ea:	425b      	negs	r3, r3
 80060ec:	24fe      	movs	r4, #254	@ 0xfe
 80060ee:	1939      	adds	r1, r7, r4
 80060f0:	4890      	ldr	r0, [pc, #576]	@ (8006334 <main+0x3d0>)
 80060f2:	2201      	movs	r2, #1
 80060f4:	f003 f8c6 	bl	8009284 <HAL_UART_Receive>
          HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY); // echo
 80060f8:	2301      	movs	r3, #1
 80060fa:	425b      	negs	r3, r3
 80060fc:	1939      	adds	r1, r7, r4
 80060fe:	488d      	ldr	r0, [pc, #564]	@ (8006334 <main+0x3d0>)
 8006100:	2201      	movs	r2, #1
 8006102:	f003 f81b 	bl	800913c <HAL_UART_Transmit>

          if (ch == '\r' || ch == '\n') {
 8006106:	0022      	movs	r2, r4
 8006108:	193b      	adds	r3, r7, r4
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	2b0d      	cmp	r3, #13
 800610e:	d003      	beq.n	8006118 <main+0x1b4>
 8006110:	18bb      	adds	r3, r7, r2
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b0a      	cmp	r3, #10
 8006116:	d110      	bne.n	800613a <main+0x1d6>
              rx_buffer[idx] = '\0';
 8006118:	2328      	movs	r3, #40	@ 0x28
 800611a:	33ff      	adds	r3, #255	@ 0xff
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	4a85      	ldr	r2, [pc, #532]	@ (8006338 <main+0x3d4>)
 8006122:	2194      	movs	r1, #148	@ 0x94
 8006124:	0049      	lsls	r1, r1, #1
 8006126:	1852      	adds	r2, r2, r1
 8006128:	19d2      	adds	r2, r2, r7
 800612a:	2100      	movs	r1, #0
 800612c:	54d1      	strb	r1, [r2, r3]
              break;
 800612e:	46c0      	nop			@ (mov r8, r8)
              rx_buffer[idx++] = ch;
          }
      }

      // Skip if empty input
      if (strlen(rx_buffer) == 0) {
 8006130:	003b      	movs	r3, r7
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d116      	bne.n	8006166 <main+0x202>
          continue;
 8006138:	e2c3      	b.n	80066c2 <main+0x75e>
          } else if (idx < sizeof(rx_buffer) - 1) {
 800613a:	2228      	movs	r2, #40	@ 0x28
 800613c:	32ff      	adds	r2, #255	@ 0xff
 800613e:	18bb      	adds	r3, r7, r2
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b1e      	cmp	r3, #30
 8006144:	d8d0      	bhi.n	80060e8 <main+0x184>
              rx_buffer[idx++] = ch;
 8006146:	18bb      	adds	r3, r7, r2
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	18ba      	adds	r2, r7, r2
 800614c:	1c59      	adds	r1, r3, #1
 800614e:	7011      	strb	r1, [r2, #0]
 8006150:	001a      	movs	r2, r3
 8006152:	23fe      	movs	r3, #254	@ 0xfe
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	7819      	ldrb	r1, [r3, #0]
 8006158:	4b77      	ldr	r3, [pc, #476]	@ (8006338 <main+0x3d4>)
 800615a:	2094      	movs	r0, #148	@ 0x94
 800615c:	0040      	lsls	r0, r0, #1
 800615e:	181b      	adds	r3, r3, r0
 8006160:	19db      	adds	r3, r3, r7
 8006162:	5499      	strb	r1, [r3, r2]
          HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8006164:	e7c0      	b.n	80060e8 <main+0x184>
      }

      int duration = 0;
 8006166:	2300      	movs	r3, #0
 8006168:	22f8      	movs	r2, #248	@ 0xf8
 800616a:	18ba      	adds	r2, r7, r2
 800616c:	6013      	str	r3, [r2, #0]
      char mode[16] = {0};
 800616e:	23e8      	movs	r3, #232	@ 0xe8
 8006170:	18fb      	adds	r3, r7, r3
 8006172:	0018      	movs	r0, r3
 8006174:	2310      	movs	r3, #16
 8006176:	001a      	movs	r2, r3
 8006178:	2100      	movs	r1, #0
 800617a:	f004 fd47 	bl	800ac0c <memset>

      if (strcmp(rx_buffer, "help") == 0) {
 800617e:	4a6f      	ldr	r2, [pc, #444]	@ (800633c <main+0x3d8>)
 8006180:	003b      	movs	r3, r7
 8006182:	0011      	movs	r1, r2
 8006184:	0018      	movs	r0, r3
 8006186:	f7f9 ffbd 	bl	8000104 <strcmp>
 800618a:	1e03      	subs	r3, r0, #0
 800618c:	d110      	bne.n	80061b0 <main+0x24c>
          HAL_UART_Transmit(&huart2, (uint8_t *)intro_msg, strlen(intro_msg), HAL_MAX_DELAY);
 800618e:	2488      	movs	r4, #136	@ 0x88
 8006190:	0064      	lsls	r4, r4, #1
 8006192:	193b      	adds	r3, r7, r4
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	0018      	movs	r0, r3
 8006198:	f7f9 ffbe 	bl	8000118 <strlen>
 800619c:	0003      	movs	r3, r0
 800619e:	b29a      	uxth	r2, r3
 80061a0:	2301      	movs	r3, #1
 80061a2:	425b      	negs	r3, r3
 80061a4:	1939      	adds	r1, r7, r4
 80061a6:	6809      	ldr	r1, [r1, #0]
 80061a8:	4862      	ldr	r0, [pc, #392]	@ (8006334 <main+0x3d0>)
 80061aa:	f002 ffc7 	bl	800913c <HAL_UART_Transmit>
          continue;
 80061ae:	e288      	b.n	80066c2 <main+0x75e>
      }

      if (strcmp(rx_buffer, "help") == 0) {
 80061b0:	4a62      	ldr	r2, [pc, #392]	@ (800633c <main+0x3d8>)
 80061b2:	003b      	movs	r3, r7
 80061b4:	0011      	movs	r1, r2
 80061b6:	0018      	movs	r0, r3
 80061b8:	f7f9 ffa4 	bl	8000104 <strcmp>
 80061bc:	1e03      	subs	r3, r0, #0
 80061be:	d110      	bne.n	80061e2 <main+0x27e>
        HAL_UART_Transmit(&huart2, (uint8_t *)intro_msg, strlen(intro_msg), HAL_MAX_DELAY);
 80061c0:	2488      	movs	r4, #136	@ 0x88
 80061c2:	0064      	lsls	r4, r4, #1
 80061c4:	193b      	adds	r3, r7, r4
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	0018      	movs	r0, r3
 80061ca:	f7f9 ffa5 	bl	8000118 <strlen>
 80061ce:	0003      	movs	r3, r0
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	2301      	movs	r3, #1
 80061d4:	425b      	negs	r3, r3
 80061d6:	1939      	adds	r1, r7, r4
 80061d8:	6809      	ldr	r1, [r1, #0]
 80061da:	4856      	ldr	r0, [pc, #344]	@ (8006334 <main+0x3d0>)
 80061dc:	f002 ffae 	bl	800913c <HAL_UART_Transmit>
        continue;
 80061e0:	e26f      	b.n	80066c2 <main+0x75e>
    }
    
    char copy[64];
    strncpy(copy, rx_buffer, sizeof(copy));
 80061e2:	0039      	movs	r1, r7
 80061e4:	2420      	movs	r4, #32
 80061e6:	193b      	adds	r3, r7, r4
 80061e8:	2240      	movs	r2, #64	@ 0x40
 80061ea:	0018      	movs	r0, r3
 80061ec:	f004 fd16 	bl	800ac1c <strncpy>
    char *token = strtok(copy, " ");
 80061f0:	4a53      	ldr	r2, [pc, #332]	@ (8006340 <main+0x3dc>)
 80061f2:	193b      	adds	r3, r7, r4
 80061f4:	0011      	movs	r1, r2
 80061f6:	0018      	movs	r0, r3
 80061f8:	f004 fd24 	bl	800ac44 <strtok>
 80061fc:	0003      	movs	r3, r0
 80061fe:	2286      	movs	r2, #134	@ 0x86
 8006200:	0052      	lsls	r2, r2, #1
 8006202:	18b9      	adds	r1, r7, r2
 8006204:	600b      	str	r3, [r1, #0]
    if (!token) continue;
 8006206:	18bb      	adds	r3, r7, r2
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d100      	bne.n	8006210 <main+0x2ac>
 800620e:	e257      	b.n	80066c0 <main+0x75c>
    
    char op[4];
    strncpy(op, token, sizeof(op));
 8006210:	18bb      	adds	r3, r7, r2
 8006212:	6819      	ldr	r1, [r3, #0]
 8006214:	24e4      	movs	r4, #228	@ 0xe4
 8006216:	193b      	adds	r3, r7, r4
 8006218:	2204      	movs	r2, #4
 800621a:	0018      	movs	r0, r3
 800621c:	f004 fcfe 	bl	800ac1c <strncpy>
    
    if (strcmp(op, "add") == 0 || strcmp(op, "sub") == 0 || strcmp(op, "mul") == 0 || strcmp(op, "div") == 0) {
 8006220:	4a48      	ldr	r2, [pc, #288]	@ (8006344 <main+0x3e0>)
 8006222:	193b      	adds	r3, r7, r4
 8006224:	0011      	movs	r1, r2
 8006226:	0018      	movs	r0, r3
 8006228:	f7f9 ff6c 	bl	8000104 <strcmp>
 800622c:	1e03      	subs	r3, r0, #0
 800622e:	d018      	beq.n	8006262 <main+0x2fe>
 8006230:	4a45      	ldr	r2, [pc, #276]	@ (8006348 <main+0x3e4>)
 8006232:	193b      	adds	r3, r7, r4
 8006234:	0011      	movs	r1, r2
 8006236:	0018      	movs	r0, r3
 8006238:	f7f9 ff64 	bl	8000104 <strcmp>
 800623c:	1e03      	subs	r3, r0, #0
 800623e:	d010      	beq.n	8006262 <main+0x2fe>
 8006240:	4a42      	ldr	r2, [pc, #264]	@ (800634c <main+0x3e8>)
 8006242:	193b      	adds	r3, r7, r4
 8006244:	0011      	movs	r1, r2
 8006246:	0018      	movs	r0, r3
 8006248:	f7f9 ff5c 	bl	8000104 <strcmp>
 800624c:	1e03      	subs	r3, r0, #0
 800624e:	d008      	beq.n	8006262 <main+0x2fe>
 8006250:	4a3f      	ldr	r2, [pc, #252]	@ (8006350 <main+0x3ec>)
 8006252:	193b      	adds	r3, r7, r4
 8006254:	0011      	movs	r1, r2
 8006256:	0018      	movs	r0, r3
 8006258:	f7f9 ff54 	bl	8000104 <strcmp>
 800625c:	1e03      	subs	r3, r0, #0
 800625e:	d000      	beq.n	8006262 <main+0x2fe>
 8006260:	e0ec      	b.n	800643c <main+0x4d8>
        int result = 0, value;
 8006262:	2300      	movs	r3, #0
 8006264:	2290      	movs	r2, #144	@ 0x90
 8006266:	0052      	lsls	r2, r2, #1
 8006268:	18ba      	adds	r2, r7, r2
 800626a:	6013      	str	r3, [r2, #0]
        bool first = true;
 800626c:	2320      	movs	r3, #32
 800626e:	33ff      	adds	r3, #255	@ 0xff
 8006270:	18fb      	adds	r3, r7, r3
 8006272:	2201      	movs	r2, #1
 8006274:	701a      	strb	r2, [r3, #0]
        while ((token = strtok(NULL, " ")) != NULL) {
 8006276:	e0bb      	b.n	80063f0 <main+0x48c>
            if (sscanf(token, "%d", &value) != 1) {
 8006278:	23e0      	movs	r3, #224	@ 0xe0
 800627a:	18fa      	adds	r2, r7, r3
 800627c:	4935      	ldr	r1, [pc, #212]	@ (8006354 <main+0x3f0>)
 800627e:	2386      	movs	r3, #134	@ 0x86
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	18fb      	adds	r3, r7, r3
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	0018      	movs	r0, r3
 8006288:	f004 fb84 	bl	800a994 <siscanf>
 800628c:	0003      	movs	r3, r0
 800628e:	2b01      	cmp	r3, #1
 8006290:	d007      	beq.n	80062a2 <main+0x33e>
                HAL_UART_Transmit(&huart2, (uint8_t *)"Invalid number\r\n", 17, HAL_MAX_DELAY);
 8006292:	2301      	movs	r3, #1
 8006294:	425b      	negs	r3, r3
 8006296:	4930      	ldr	r1, [pc, #192]	@ (8006358 <main+0x3f4>)
 8006298:	4826      	ldr	r0, [pc, #152]	@ (8006334 <main+0x3d0>)
 800629a:	2211      	movs	r2, #17
 800629c:	f002 ff4e 	bl	800913c <HAL_UART_Transmit>
                break;
 80062a0:	e0b5      	b.n	800640e <main+0x4aa>
            }
    
            if (first) {
 80062a2:	2220      	movs	r2, #32
 80062a4:	32ff      	adds	r2, #255	@ 0xff
 80062a6:	18bb      	adds	r3, r7, r2
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <main+0x360>
                result = value;
 80062ae:	23e0      	movs	r3, #224	@ 0xe0
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2190      	movs	r1, #144	@ 0x90
 80062b6:	0049      	lsls	r1, r1, #1
 80062b8:	1879      	adds	r1, r7, r1
 80062ba:	600b      	str	r3, [r1, #0]
                first = false;
 80062bc:	18bb      	adds	r3, r7, r2
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
                continue;
 80062c2:	e095      	b.n	80063f0 <main+0x48c>
            }
    
            if (strcmp(op, "add") == 0) result += value;
 80062c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006344 <main+0x3e0>)
 80062c6:	23e4      	movs	r3, #228	@ 0xe4
 80062c8:	18fb      	adds	r3, r7, r3
 80062ca:	0011      	movs	r1, r2
 80062cc:	0018      	movs	r0, r3
 80062ce:	f7f9 ff19 	bl	8000104 <strcmp>
 80062d2:	1e03      	subs	r3, r0, #0
 80062d4:	d142      	bne.n	800635c <main+0x3f8>
 80062d6:	23e0      	movs	r3, #224	@ 0xe0
 80062d8:	18fb      	adds	r3, r7, r3
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2190      	movs	r1, #144	@ 0x90
 80062de:	0049      	lsls	r1, r1, #1
 80062e0:	187a      	adds	r2, r7, r1
 80062e2:	6812      	ldr	r2, [r2, #0]
 80062e4:	18d3      	adds	r3, r2, r3
 80062e6:	187a      	adds	r2, r7, r1
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	e081      	b.n	80063f0 <main+0x48c>
 80062ec:	0800da0c 	.word	0x0800da0c
 80062f0:	0800da2c 	.word	0x0800da2c
 80062f4:	2000033c 	.word	0x2000033c
 80062f8:	08005e95 	.word	0x08005e95
 80062fc:	08005f15 	.word	0x08005f15
 8006300:	08005e59 	.word	0x08005e59
 8006304:	200001f0 	.word	0x200001f0
 8006308:	200003f1 	.word	0x200003f1
 800630c:	0800da44 	.word	0x0800da44
 8006310:	0800da6c 	.word	0x0800da6c
 8006314:	0800da98 	.word	0x0800da98
 8006318:	0800dab0 	.word	0x0800dab0
 800631c:	2000038c 	.word	0x2000038c
 8006320:	0800dad0 	.word	0x0800dad0
 8006324:	20000394 	.word	0x20000394
 8006328:	0800daf0 	.word	0x0800daf0
 800632c:	0800db10 	.word	0x0800db10
 8006330:	0800db30 	.word	0x0800db30
 8006334:	200002a8 	.word	0x200002a8
 8006338:	fffffed8 	.word	0xfffffed8
 800633c:	0800de00 	.word	0x0800de00
 8006340:	0800de08 	.word	0x0800de08
 8006344:	0800de0c 	.word	0x0800de0c
 8006348:	0800de10 	.word	0x0800de10
 800634c:	0800de14 	.word	0x0800de14
 8006350:	0800de18 	.word	0x0800de18
 8006354:	0800de1c 	.word	0x0800de1c
 8006358:	0800de20 	.word	0x0800de20
            else if (strcmp(op, "sub") == 0) result -= value;
 800635c:	4ad9      	ldr	r2, [pc, #868]	@ (80066c4 <main+0x760>)
 800635e:	23e4      	movs	r3, #228	@ 0xe4
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	0011      	movs	r1, r2
 8006364:	0018      	movs	r0, r3
 8006366:	f7f9 fecd 	bl	8000104 <strcmp>
 800636a:	1e03      	subs	r3, r0, #0
 800636c:	d10a      	bne.n	8006384 <main+0x420>
 800636e:	23e0      	movs	r3, #224	@ 0xe0
 8006370:	18fb      	adds	r3, r7, r3
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2190      	movs	r1, #144	@ 0x90
 8006376:	0049      	lsls	r1, r1, #1
 8006378:	187a      	adds	r2, r7, r1
 800637a:	6812      	ldr	r2, [r2, #0]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	187a      	adds	r2, r7, r1
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	e035      	b.n	80063f0 <main+0x48c>
            else if (strcmp(op, "mul") == 0) result *= value;
 8006384:	4ad0      	ldr	r2, [pc, #832]	@ (80066c8 <main+0x764>)
 8006386:	23e4      	movs	r3, #228	@ 0xe4
 8006388:	18fb      	adds	r3, r7, r3
 800638a:	0011      	movs	r1, r2
 800638c:	0018      	movs	r0, r3
 800638e:	f7f9 feb9 	bl	8000104 <strcmp>
 8006392:	1e03      	subs	r3, r0, #0
 8006394:	d10a      	bne.n	80063ac <main+0x448>
 8006396:	23e0      	movs	r3, #224	@ 0xe0
 8006398:	18fb      	adds	r3, r7, r3
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	2190      	movs	r1, #144	@ 0x90
 800639e:	0049      	lsls	r1, r1, #1
 80063a0:	187b      	adds	r3, r7, r1
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4353      	muls	r3, r2
 80063a6:	187a      	adds	r2, r7, r1
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	e021      	b.n	80063f0 <main+0x48c>
            else if (strcmp(op, "div") == 0) {
 80063ac:	4ac7      	ldr	r2, [pc, #796]	@ (80066cc <main+0x768>)
 80063ae:	23e4      	movs	r3, #228	@ 0xe4
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	0011      	movs	r1, r2
 80063b4:	0018      	movs	r0, r3
 80063b6:	f7f9 fea5 	bl	8000104 <strcmp>
 80063ba:	1e03      	subs	r3, r0, #0
 80063bc:	d118      	bne.n	80063f0 <main+0x48c>
                if (value == 0) {
 80063be:	23e0      	movs	r3, #224	@ 0xe0
 80063c0:	18fb      	adds	r3, r7, r3
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d106      	bne.n	80063d6 <main+0x472>
                    HAL_UART_Transmit(&huart2, (uint8_t *)"Divide by 0\r\n", 14, HAL_MAX_DELAY);
 80063c8:	2301      	movs	r3, #1
 80063ca:	425b      	negs	r3, r3
 80063cc:	49c0      	ldr	r1, [pc, #768]	@ (80066d0 <main+0x76c>)
 80063ce:	48c1      	ldr	r0, [pc, #772]	@ (80066d4 <main+0x770>)
 80063d0:	220e      	movs	r2, #14
 80063d2:	f002 feb3 	bl	800913c <HAL_UART_Transmit>
                }
                result /= value;
 80063d6:	23e0      	movs	r3, #224	@ 0xe0
 80063d8:	18fb      	adds	r3, r7, r3
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	0019      	movs	r1, r3
 80063de:	2490      	movs	r4, #144	@ 0x90
 80063e0:	0064      	lsls	r4, r4, #1
 80063e2:	193b      	adds	r3, r7, r4
 80063e4:	6818      	ldr	r0, [r3, #0]
 80063e6:	f7f9 ff3d 	bl	8000264 <__divsi3>
 80063ea:	0003      	movs	r3, r0
 80063ec:	193a      	adds	r2, r7, r4
 80063ee:	6013      	str	r3, [r2, #0]
        while ((token = strtok(NULL, " ")) != NULL) {
 80063f0:	4bb9      	ldr	r3, [pc, #740]	@ (80066d8 <main+0x774>)
 80063f2:	0019      	movs	r1, r3
 80063f4:	2000      	movs	r0, #0
 80063f6:	f004 fc25 	bl	800ac44 <strtok>
 80063fa:	0003      	movs	r3, r0
 80063fc:	2286      	movs	r2, #134	@ 0x86
 80063fe:	0052      	lsls	r2, r2, #1
 8006400:	18b9      	adds	r1, r7, r2
 8006402:	600b      	str	r3, [r1, #0]
 8006404:	18bb      	adds	r3, r7, r2
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d000      	beq.n	800640e <main+0x4aa>
 800640c:	e734      	b.n	8006278 <main+0x314>
            }
        }
    
        char result_msg[64];
        snprintf(result_msg, sizeof(result_msg), "Result: %d\r\n", result);
 800640e:	2390      	movs	r3, #144	@ 0x90
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	18fb      	adds	r3, r7, r3
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4ab1      	ldr	r2, [pc, #708]	@ (80066dc <main+0x778>)
 8006418:	24a0      	movs	r4, #160	@ 0xa0
 800641a:	1938      	adds	r0, r7, r4
 800641c:	2140      	movs	r1, #64	@ 0x40
 800641e:	f004 fa83 	bl	800a928 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)result_msg, strlen(result_msg), HAL_MAX_DELAY);
 8006422:	193b      	adds	r3, r7, r4
 8006424:	0018      	movs	r0, r3
 8006426:	f7f9 fe77 	bl	8000118 <strlen>
 800642a:	0003      	movs	r3, r0
 800642c:	b29a      	uxth	r2, r3
 800642e:	2301      	movs	r3, #1
 8006430:	425b      	negs	r3, r3
 8006432:	1939      	adds	r1, r7, r4
 8006434:	48a7      	ldr	r0, [pc, #668]	@ (80066d4 <main+0x770>)
 8006436:	f002 fe81 	bl	800913c <HAL_UART_Transmit>
        continue;
 800643a:	e142      	b.n	80066c2 <main+0x75e>
    }

      if (sscanf(rx_buffer, "%d %15s", &duration, mode) != 2) {
 800643c:	23e8      	movs	r3, #232	@ 0xe8
 800643e:	18fb      	adds	r3, r7, r3
 8006440:	22f8      	movs	r2, #248	@ 0xf8
 8006442:	18ba      	adds	r2, r7, r2
 8006444:	49a6      	ldr	r1, [pc, #664]	@ (80066e0 <main+0x77c>)
 8006446:	0038      	movs	r0, r7
 8006448:	f004 faa4 	bl	800a994 <siscanf>
 800644c:	0003      	movs	r3, r0
 800644e:	2b02      	cmp	r3, #2
 8006450:	d014      	beq.n	800647c <main+0x518>
          const char *msg = "Invalid format. Use: <duration> <mode>\r\n";
 8006452:	4ba4      	ldr	r3, [pc, #656]	@ (80066e4 <main+0x780>)
 8006454:	1d7a      	adds	r2, r7, #5
 8006456:	32ff      	adds	r2, #255	@ 0xff
 8006458:	6013      	str	r3, [r2, #0]
          HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800645a:	1d7b      	adds	r3, r7, #5
 800645c:	33ff      	adds	r3, #255	@ 0xff
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	0018      	movs	r0, r3
 8006462:	f7f9 fe59 	bl	8000118 <strlen>
 8006466:	0003      	movs	r3, r0
 8006468:	b29a      	uxth	r2, r3
 800646a:	2301      	movs	r3, #1
 800646c:	425b      	negs	r3, r3
 800646e:	1d79      	adds	r1, r7, #5
 8006470:	31ff      	adds	r1, #255	@ 0xff
 8006472:	6809      	ldr	r1, [r1, #0]
 8006474:	4897      	ldr	r0, [pc, #604]	@ (80066d4 <main+0x770>)
 8006476:	f002 fe61 	bl	800913c <HAL_UART_Transmit>
          continue;
 800647a:	e122      	b.n	80066c2 <main+0x75e>
      }

      char echo[64];
      snprintf(echo, sizeof(echo), "\r\n> Duration: %d sec | Mode: %s\r\n", duration, mode);
 800647c:	23f8      	movs	r3, #248	@ 0xf8
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	6819      	ldr	r1, [r3, #0]
 8006482:	4a99      	ldr	r2, [pc, #612]	@ (80066e8 <main+0x784>)
 8006484:	2460      	movs	r4, #96	@ 0x60
 8006486:	1938      	adds	r0, r7, r4
 8006488:	23e8      	movs	r3, #232	@ 0xe8
 800648a:	18fb      	adds	r3, r7, r3
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	000b      	movs	r3, r1
 8006490:	2140      	movs	r1, #64	@ 0x40
 8006492:	f004 fa49 	bl	800a928 <sniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *)echo, strlen(echo), HAL_MAX_DELAY);
 8006496:	193b      	adds	r3, r7, r4
 8006498:	0018      	movs	r0, r3
 800649a:	f7f9 fe3d 	bl	8000118 <strlen>
 800649e:	0003      	movs	r3, r0
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	2301      	movs	r3, #1
 80064a4:	425b      	negs	r3, r3
 80064a6:	1939      	adds	r1, r7, r4
 80064a8:	488a      	ldr	r0, [pc, #552]	@ (80066d4 <main+0x770>)
 80064aa:	f002 fe47 	bl	800913c <HAL_UART_Transmit>

      for (int t = 0; t < duration; t++) {
 80064ae:	2300      	movs	r3, #0
 80064b0:	228c      	movs	r2, #140	@ 0x8c
 80064b2:	0052      	lsls	r2, r2, #1
 80064b4:	18ba      	adds	r2, r7, r2
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	e0f7      	b.n	80066aa <main+0x746>
          rslt = bme68x_set_op_mode(BME68X_FORCED_MODE, &gas_sensor);
 80064ba:	4b8c      	ldr	r3, [pc, #560]	@ (80066ec <main+0x788>)
 80064bc:	0019      	movs	r1, r3
 80064be:	2001      	movs	r0, #1
 80064c0:	f7fd fc68 	bl	8003d94 <bme68x_set_op_mode>
 80064c4:	0003      	movs	r3, r0
 80064c6:	001a      	movs	r2, r3
 80064c8:	4b89      	ldr	r3, [pc, #548]	@ (80066f0 <main+0x78c>)
 80064ca:	701a      	strb	r2, [r3, #0]
          if (rslt != BME68X_OK) {
 80064cc:	4b88      	ldr	r3, [pc, #544]	@ (80066f0 <main+0x78c>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	b25b      	sxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <main+0x582>
              HAL_UART_Transmit(&huart2, (uint8_t *)"Set op mode failed\r\n", 21, HAL_MAX_DELAY);
 80064d6:	2301      	movs	r3, #1
 80064d8:	425b      	negs	r3, r3
 80064da:	4986      	ldr	r1, [pc, #536]	@ (80066f4 <main+0x790>)
 80064dc:	487d      	ldr	r0, [pc, #500]	@ (80066d4 <main+0x770>)
 80064de:	2215      	movs	r2, #21
 80064e0:	f002 fe2c 	bl	800913c <HAL_UART_Transmit>
              break;
 80064e4:	e0ed      	b.n	80066c2 <main+0x75e>
          }

          uint32_t meas_dur = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &gas_sensor);
 80064e6:	4a81      	ldr	r2, [pc, #516]	@ (80066ec <main+0x788>)
 80064e8:	4b83      	ldr	r3, [pc, #524]	@ (80066f8 <main+0x794>)
 80064ea:	0019      	movs	r1, r3
 80064ec:	2001      	movs	r0, #1
 80064ee:	f7fd fcf9 	bl	8003ee4 <bme68x_get_meas_dur>
 80064f2:	0003      	movs	r3, r0
 80064f4:	2184      	movs	r1, #132	@ 0x84
 80064f6:	0049      	lsls	r1, r1, #1
 80064f8:	187a      	adds	r2, r7, r1
 80064fa:	6013      	str	r3, [r2, #0]
          gas_sensor.delay_us(meas_dur + 10000, gas_sensor.intf_ptr);
 80064fc:	4b7b      	ldr	r3, [pc, #492]	@ (80066ec <main+0x788>)
 80064fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006500:	187b      	adds	r3, r7, r1
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	497d      	ldr	r1, [pc, #500]	@ (80066fc <main+0x798>)
 8006506:	1858      	adds	r0, r3, r1
 8006508:	4b78      	ldr	r3, [pc, #480]	@ (80066ec <main+0x788>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	0019      	movs	r1, r3
 800650e:	4790      	blx	r2

          rslt = bme68x_get_data(BME68X_FORCED_MODE, data, &n_fields, &gas_sensor);
 8006510:	4b76      	ldr	r3, [pc, #472]	@ (80066ec <main+0x788>)
 8006512:	4a7b      	ldr	r2, [pc, #492]	@ (8006700 <main+0x79c>)
 8006514:	497b      	ldr	r1, [pc, #492]	@ (8006704 <main+0x7a0>)
 8006516:	2001      	movs	r0, #1
 8006518:	f7fd fd68 	bl	8003fec <bme68x_get_data>
 800651c:	0003      	movs	r3, r0
 800651e:	001a      	movs	r2, r3
 8006520:	4b73      	ldr	r3, [pc, #460]	@ (80066f0 <main+0x78c>)
 8006522:	701a      	strb	r2, [r3, #0]

          if (rslt == BME68X_OK && n_fields > 0) {
 8006524:	4b72      	ldr	r3, [pc, #456]	@ (80066f0 <main+0x78c>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	b25b      	sxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d000      	beq.n	8006530 <main+0x5cc>
 800652e:	e0a9      	b.n	8006684 <main+0x720>
 8006530:	4b73      	ldr	r3, [pc, #460]	@ (8006700 <main+0x79c>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d100      	bne.n	800653a <main+0x5d6>
 8006538:	e0a4      	b.n	8006684 <main+0x720>
              for (uint8_t i = 0; i < n_fields; i++) {
 800653a:	2318      	movs	r3, #24
 800653c:	33ff      	adds	r3, #255	@ 0xff
 800653e:	18fb      	adds	r3, r7, r3
 8006540:	2200      	movs	r2, #0
 8006542:	701a      	strb	r2, [r3, #0]
 8006544:	e094      	b.n	8006670 <main+0x70c>
                  char msg[64];
                  if (strcmp(mode, "temp") == 0) {
 8006546:	4a70      	ldr	r2, [pc, #448]	@ (8006708 <main+0x7a4>)
 8006548:	23e8      	movs	r3, #232	@ 0xe8
 800654a:	18fb      	adds	r3, r7, r3
 800654c:	0011      	movs	r1, r2
 800654e:	0018      	movs	r0, r3
 8006550:	f7f9 fdd8 	bl	8000104 <strcmp>
 8006554:	1e03      	subs	r3, r0, #0
 8006556:	d11a      	bne.n	800658e <main+0x62a>
                      snprintf(msg, sizeof(msg), "Temperature: %.2f °C\r\n", data[i].temperature);
 8006558:	2318      	movs	r3, #24
 800655a:	33ff      	adds	r3, #255	@ 0xff
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	781a      	ldrb	r2, [r3, #0]
 8006560:	4968      	ldr	r1, [pc, #416]	@ (8006704 <main+0x7a0>)
 8006562:	0013      	movs	r3, r2
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	189b      	adds	r3, r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	18cb      	adds	r3, r1, r3
 800656c:	3308      	adds	r3, #8
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	1c18      	adds	r0, r3, #0
 8006572:	f7fd f8b3 	bl	80036dc <__aeabi_f2d>
 8006576:	0002      	movs	r2, r0
 8006578:	000b      	movs	r3, r1
 800657a:	4964      	ldr	r1, [pc, #400]	@ (800670c <main+0x7a8>)
 800657c:	20a0      	movs	r0, #160	@ 0xa0
 800657e:	1838      	adds	r0, r7, r0
 8006580:	9200      	str	r2, [sp, #0]
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	000a      	movs	r2, r1
 8006586:	2140      	movs	r1, #64	@ 0x40
 8006588:	f004 f9ce 	bl	800a928 <sniprintf>
 800658c:	e05c      	b.n	8006648 <main+0x6e4>
                  } else if (strcmp(mode, "humi") == 0) {
 800658e:	4a60      	ldr	r2, [pc, #384]	@ (8006710 <main+0x7ac>)
 8006590:	23e8      	movs	r3, #232	@ 0xe8
 8006592:	18fb      	adds	r3, r7, r3
 8006594:	0011      	movs	r1, r2
 8006596:	0018      	movs	r0, r3
 8006598:	f7f9 fdb4 	bl	8000104 <strcmp>
 800659c:	1e03      	subs	r3, r0, #0
 800659e:	d11a      	bne.n	80065d6 <main+0x672>
                      snprintf(msg, sizeof(msg), "Humidity: %.2f %%\r\n", data[i].humidity);
 80065a0:	2318      	movs	r3, #24
 80065a2:	33ff      	adds	r3, #255	@ 0xff
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	781a      	ldrb	r2, [r3, #0]
 80065a8:	4956      	ldr	r1, [pc, #344]	@ (8006704 <main+0x7a0>)
 80065aa:	0013      	movs	r3, r2
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	189b      	adds	r3, r3, r2
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	18cb      	adds	r3, r1, r3
 80065b4:	3310      	adds	r3, #16
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	1c18      	adds	r0, r3, #0
 80065ba:	f7fd f88f 	bl	80036dc <__aeabi_f2d>
 80065be:	0002      	movs	r2, r0
 80065c0:	000b      	movs	r3, r1
 80065c2:	4954      	ldr	r1, [pc, #336]	@ (8006714 <main+0x7b0>)
 80065c4:	20a0      	movs	r0, #160	@ 0xa0
 80065c6:	1838      	adds	r0, r7, r0
 80065c8:	9200      	str	r2, [sp, #0]
 80065ca:	9301      	str	r3, [sp, #4]
 80065cc:	000a      	movs	r2, r1
 80065ce:	2140      	movs	r1, #64	@ 0x40
 80065d0:	f004 f9aa 	bl	800a928 <sniprintf>
 80065d4:	e038      	b.n	8006648 <main+0x6e4>
                  } else if (strcmp(mode, "press") == 0) {
 80065d6:	4a50      	ldr	r2, [pc, #320]	@ (8006718 <main+0x7b4>)
 80065d8:	23e8      	movs	r3, #232	@ 0xe8
 80065da:	18fb      	adds	r3, r7, r3
 80065dc:	0011      	movs	r1, r2
 80065de:	0018      	movs	r0, r3
 80065e0:	f7f9 fd90 	bl	8000104 <strcmp>
 80065e4:	1e03      	subs	r3, r0, #0
 80065e6:	d11a      	bne.n	800661e <main+0x6ba>
                      snprintf(msg, sizeof(msg), "Pressure: %.2f hPa\r\n", data[i].pressure);
 80065e8:	2318      	movs	r3, #24
 80065ea:	33ff      	adds	r3, #255	@ 0xff
 80065ec:	18fb      	adds	r3, r7, r3
 80065ee:	781a      	ldrb	r2, [r3, #0]
 80065f0:	4944      	ldr	r1, [pc, #272]	@ (8006704 <main+0x7a0>)
 80065f2:	0013      	movs	r3, r2
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	189b      	adds	r3, r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	18cb      	adds	r3, r1, r3
 80065fc:	330c      	adds	r3, #12
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	1c18      	adds	r0, r3, #0
 8006602:	f7fd f86b 	bl	80036dc <__aeabi_f2d>
 8006606:	0002      	movs	r2, r0
 8006608:	000b      	movs	r3, r1
 800660a:	4944      	ldr	r1, [pc, #272]	@ (800671c <main+0x7b8>)
 800660c:	20a0      	movs	r0, #160	@ 0xa0
 800660e:	1838      	adds	r0, r7, r0
 8006610:	9200      	str	r2, [sp, #0]
 8006612:	9301      	str	r3, [sp, #4]
 8006614:	000a      	movs	r2, r1
 8006616:	2140      	movs	r1, #64	@ 0x40
 8006618:	f004 f986 	bl	800a928 <sniprintf>
 800661c:	e014      	b.n	8006648 <main+0x6e4>
                  } else {
                      snprintf(msg, sizeof(msg), "Unknown mode: %s\r\n", mode);
 800661e:	23e8      	movs	r3, #232	@ 0xe8
 8006620:	18fb      	adds	r3, r7, r3
 8006622:	4a3f      	ldr	r2, [pc, #252]	@ (8006720 <main+0x7bc>)
 8006624:	24a0      	movs	r4, #160	@ 0xa0
 8006626:	1938      	adds	r0, r7, r4
 8006628:	2140      	movs	r1, #64	@ 0x40
 800662a:	f004 f97d 	bl	800a928 <sniprintf>
                      HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800662e:	193b      	adds	r3, r7, r4
 8006630:	0018      	movs	r0, r3
 8006632:	f7f9 fd71 	bl	8000118 <strlen>
 8006636:	0003      	movs	r3, r0
 8006638:	b29a      	uxth	r2, r3
 800663a:	2301      	movs	r3, #1
 800663c:	425b      	negs	r3, r3
 800663e:	1939      	adds	r1, r7, r4
 8006640:	4824      	ldr	r0, [pc, #144]	@ (80066d4 <main+0x770>)
 8006642:	f002 fd7b 	bl	800913c <HAL_UART_Transmit>
              for (uint8_t i = 0; i < n_fields; i++) {
 8006646:	e024      	b.n	8006692 <main+0x72e>
                      break;
                  }
                  // Transmit over UART (debug/log)
                  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8006648:	24a0      	movs	r4, #160	@ 0xa0
 800664a:	193b      	adds	r3, r7, r4
 800664c:	0018      	movs	r0, r3
 800664e:	f7f9 fd63 	bl	8000118 <strlen>
 8006652:	0003      	movs	r3, r0
 8006654:	b29a      	uxth	r2, r3
 8006656:	2301      	movs	r3, #1
 8006658:	425b      	negs	r3, r3
 800665a:	1939      	adds	r1, r7, r4
 800665c:	481d      	ldr	r0, [pc, #116]	@ (80066d4 <main+0x770>)
 800665e:	f002 fd6d 	bl	800913c <HAL_UART_Transmit>
              for (uint8_t i = 0; i < n_fields; i++) {
 8006662:	2118      	movs	r1, #24
 8006664:	31ff      	adds	r1, #255	@ 0xff
 8006666:	187b      	adds	r3, r7, r1
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	187b      	adds	r3, r7, r1
 800666c:	3201      	adds	r2, #1
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	4b23      	ldr	r3, [pc, #140]	@ (8006700 <main+0x79c>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2218      	movs	r2, #24
 8006676:	32ff      	adds	r2, #255	@ 0xff
 8006678:	18ba      	adds	r2, r7, r2
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d200      	bcs.n	8006682 <main+0x71e>
 8006680:	e761      	b.n	8006546 <main+0x5e2>
 8006682:	e006      	b.n	8006692 <main+0x72e>
                      sx126x_set_tx(&Radio, 5000);  // Timeout of 5 seconds
                  }
//                  SX1262_Transmit((uint8_t *)msg, strlen(msg));
              }
          } else {
              HAL_UART_Transmit(&huart2, (uint8_t *)"Sensor read error\r\n", 20, HAL_MAX_DELAY);
 8006684:	2301      	movs	r3, #1
 8006686:	425b      	negs	r3, r3
 8006688:	4926      	ldr	r1, [pc, #152]	@ (8006724 <main+0x7c0>)
 800668a:	4812      	ldr	r0, [pc, #72]	@ (80066d4 <main+0x770>)
 800668c:	2214      	movs	r2, #20
 800668e:	f002 fd55 	bl	800913c <HAL_UART_Transmit>
          }

          HAL_Delay(1000); // wait 1 second
 8006692:	23fa      	movs	r3, #250	@ 0xfa
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	0018      	movs	r0, r3
 8006698:	f000 fc84 	bl	8006fa4 <HAL_Delay>
      for (int t = 0; t < duration; t++) {
 800669c:	228c      	movs	r2, #140	@ 0x8c
 800669e:	0052      	lsls	r2, r2, #1
 80066a0:	18bb      	adds	r3, r7, r2
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3301      	adds	r3, #1
 80066a6:	18ba      	adds	r2, r7, r2
 80066a8:	6013      	str	r3, [r2, #0]
 80066aa:	23f8      	movs	r3, #248	@ 0xf8
 80066ac:	18fb      	adds	r3, r7, r3
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	228c      	movs	r2, #140	@ 0x8c
 80066b2:	0052      	lsls	r2, r2, #1
 80066b4:	18ba      	adds	r2, r7, r2
 80066b6:	6812      	ldr	r2, [r2, #0]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	da00      	bge.n	80066be <main+0x75a>
 80066bc:	e6fd      	b.n	80064ba <main+0x556>
 80066be:	e503      	b.n	80060c8 <main+0x164>
    if (!token) continue;
 80066c0:	46c0      	nop			@ (mov r8, r8)
  {
 80066c2:	e501      	b.n	80060c8 <main+0x164>
 80066c4:	0800de10 	.word	0x0800de10
 80066c8:	0800de14 	.word	0x0800de14
 80066cc:	0800de18 	.word	0x0800de18
 80066d0:	0800de34 	.word	0x0800de34
 80066d4:	200002a8 	.word	0x200002a8
 80066d8:	0800de08 	.word	0x0800de08
 80066dc:	0800de44 	.word	0x0800de44
 80066e0:	0800de54 	.word	0x0800de54
 80066e4:	0800de5c 	.word	0x0800de5c
 80066e8:	0800de88 	.word	0x0800de88
 80066ec:	2000033c 	.word	0x2000033c
 80066f0:	200003f1 	.word	0x200003f1
 80066f4:	0800deac 	.word	0x0800deac
 80066f8:	2000038c 	.word	0x2000038c
 80066fc:	00002710 	.word	0x00002710
 8006700:	200003f0 	.word	0x200003f0
 8006704:	200003a8 	.word	0x200003a8
 8006708:	0800dec4 	.word	0x0800dec4
 800670c:	0800decc 	.word	0x0800decc
 8006710:	0800dee4 	.word	0x0800dee4
 8006714:	0800deec 	.word	0x0800deec
 8006718:	0800df00 	.word	0x0800df00
 800671c:	0800df08 	.word	0x0800df08
 8006720:	0800df20 	.word	0x0800df20
 8006724:	0800df34 	.word	0x0800df34

08006728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006728:	b590      	push	{r4, r7, lr}
 800672a:	b093      	sub	sp, #76	@ 0x4c
 800672c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800672e:	2410      	movs	r4, #16
 8006730:	193b      	adds	r3, r7, r4
 8006732:	0018      	movs	r0, r3
 8006734:	2338      	movs	r3, #56	@ 0x38
 8006736:	001a      	movs	r2, r3
 8006738:	2100      	movs	r1, #0
 800673a:	f004 fa67 	bl	800ac0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800673e:	003b      	movs	r3, r7
 8006740:	0018      	movs	r0, r3
 8006742:	2310      	movs	r3, #16
 8006744:	001a      	movs	r2, r3
 8006746:	2100      	movs	r1, #0
 8006748:	f004 fa60 	bl	800ac0c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800674c:	2380      	movs	r3, #128	@ 0x80
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	0018      	movs	r0, r3
 8006752:	f001 fd1d 	bl	8008190 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006756:	193b      	adds	r3, r7, r4
 8006758:	2202      	movs	r2, #2
 800675a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800675c:	193b      	adds	r3, r7, r4
 800675e:	2280      	movs	r2, #128	@ 0x80
 8006760:	0052      	lsls	r2, r2, #1
 8006762:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006764:	193b      	adds	r3, r7, r4
 8006766:	2200      	movs	r2, #0
 8006768:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800676a:	193b      	adds	r3, r7, r4
 800676c:	2240      	movs	r2, #64	@ 0x40
 800676e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006770:	193b      	adds	r3, r7, r4
 8006772:	2200      	movs	r2, #0
 8006774:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006776:	193b      	adds	r3, r7, r4
 8006778:	0018      	movs	r0, r3
 800677a:	f001 fd55 	bl	8008228 <HAL_RCC_OscConfig>
 800677e:	1e03      	subs	r3, r0, #0
 8006780:	d001      	beq.n	8006786 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8006782:	f000 f94b 	bl	8006a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006786:	003b      	movs	r3, r7
 8006788:	2207      	movs	r2, #7
 800678a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800678c:	003b      	movs	r3, r7
 800678e:	2200      	movs	r2, #0
 8006790:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006792:	003b      	movs	r3, r7
 8006794:	2200      	movs	r2, #0
 8006796:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006798:	003b      	movs	r3, r7
 800679a:	2200      	movs	r2, #0
 800679c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800679e:	003b      	movs	r3, r7
 80067a0:	2100      	movs	r1, #0
 80067a2:	0018      	movs	r0, r3
 80067a4:	f002 f85a 	bl	800885c <HAL_RCC_ClockConfig>
 80067a8:	1e03      	subs	r3, r0, #0
 80067aa:	d001      	beq.n	80067b0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80067ac:	f000 f936 	bl	8006a1c <Error_Handler>
  }
}
 80067b0:	46c0      	nop			@ (mov r8, r8)
 80067b2:	46bd      	mov	sp, r7
 80067b4:	b013      	add	sp, #76	@ 0x4c
 80067b6:	bd90      	pop	{r4, r7, pc}

080067b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80067bc:	4b1b      	ldr	r3, [pc, #108]	@ (800682c <MX_I2C1_Init+0x74>)
 80067be:	4a1c      	ldr	r2, [pc, #112]	@ (8006830 <MX_I2C1_Init+0x78>)
 80067c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80067c2:	4b1a      	ldr	r3, [pc, #104]	@ (800682c <MX_I2C1_Init+0x74>)
 80067c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006834 <MX_I2C1_Init+0x7c>)
 80067c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80067c8:	4b18      	ldr	r3, [pc, #96]	@ (800682c <MX_I2C1_Init+0x74>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80067ce:	4b17      	ldr	r3, [pc, #92]	@ (800682c <MX_I2C1_Init+0x74>)
 80067d0:	2201      	movs	r2, #1
 80067d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80067d4:	4b15      	ldr	r3, [pc, #84]	@ (800682c <MX_I2C1_Init+0x74>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80067da:	4b14      	ldr	r3, [pc, #80]	@ (800682c <MX_I2C1_Init+0x74>)
 80067dc:	2200      	movs	r2, #0
 80067de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80067e0:	4b12      	ldr	r3, [pc, #72]	@ (800682c <MX_I2C1_Init+0x74>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80067e6:	4b11      	ldr	r3, [pc, #68]	@ (800682c <MX_I2C1_Init+0x74>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80067ec:	4b0f      	ldr	r3, [pc, #60]	@ (800682c <MX_I2C1_Init+0x74>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80067f2:	4b0e      	ldr	r3, [pc, #56]	@ (800682c <MX_I2C1_Init+0x74>)
 80067f4:	0018      	movs	r0, r3
 80067f6:	f000 fe2f 	bl	8007458 <HAL_I2C_Init>
 80067fa:	1e03      	subs	r3, r0, #0
 80067fc:	d001      	beq.n	8006802 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80067fe:	f000 f90d 	bl	8006a1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006802:	4b0a      	ldr	r3, [pc, #40]	@ (800682c <MX_I2C1_Init+0x74>)
 8006804:	2100      	movs	r1, #0
 8006806:	0018      	movs	r0, r3
 8006808:	f001 fc2a 	bl	8008060 <HAL_I2CEx_ConfigAnalogFilter>
 800680c:	1e03      	subs	r3, r0, #0
 800680e:	d001      	beq.n	8006814 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006810:	f000 f904 	bl	8006a1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006814:	4b05      	ldr	r3, [pc, #20]	@ (800682c <MX_I2C1_Init+0x74>)
 8006816:	2100      	movs	r1, #0
 8006818:	0018      	movs	r0, r3
 800681a:	f001 fc6d 	bl	80080f8 <HAL_I2CEx_ConfigDigitalFilter>
 800681e:	1e03      	subs	r3, r0, #0
 8006820:	d001      	beq.n	8006826 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006822:	f000 f8fb 	bl	8006a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006826:	46c0      	nop			@ (mov r8, r8)
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	200001f0 	.word	0x200001f0
 8006830:	40005400 	.word	0x40005400
 8006834:	00503d58 	.word	0x00503d58

08006838 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800683c:	4b1b      	ldr	r3, [pc, #108]	@ (80068ac <MX_SPI1_Init+0x74>)
 800683e:	4a1c      	ldr	r2, [pc, #112]	@ (80068b0 <MX_SPI1_Init+0x78>)
 8006840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006842:	4b1a      	ldr	r3, [pc, #104]	@ (80068ac <MX_SPI1_Init+0x74>)
 8006844:	2282      	movs	r2, #130	@ 0x82
 8006846:	0052      	lsls	r2, r2, #1
 8006848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800684a:	4b18      	ldr	r3, [pc, #96]	@ (80068ac <MX_SPI1_Init+0x74>)
 800684c:	2200      	movs	r2, #0
 800684e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006850:	4b16      	ldr	r3, [pc, #88]	@ (80068ac <MX_SPI1_Init+0x74>)
 8006852:	22e0      	movs	r2, #224	@ 0xe0
 8006854:	00d2      	lsls	r2, r2, #3
 8006856:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006858:	4b14      	ldr	r3, [pc, #80]	@ (80068ac <MX_SPI1_Init+0x74>)
 800685a:	2200      	movs	r2, #0
 800685c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800685e:	4b13      	ldr	r3, [pc, #76]	@ (80068ac <MX_SPI1_Init+0x74>)
 8006860:	2200      	movs	r2, #0
 8006862:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006864:	4b11      	ldr	r3, [pc, #68]	@ (80068ac <MX_SPI1_Init+0x74>)
 8006866:	2280      	movs	r2, #128	@ 0x80
 8006868:	0092      	lsls	r2, r2, #2
 800686a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800686c:	4b0f      	ldr	r3, [pc, #60]	@ (80068ac <MX_SPI1_Init+0x74>)
 800686e:	2200      	movs	r2, #0
 8006870:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006872:	4b0e      	ldr	r3, [pc, #56]	@ (80068ac <MX_SPI1_Init+0x74>)
 8006874:	2200      	movs	r2, #0
 8006876:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006878:	4b0c      	ldr	r3, [pc, #48]	@ (80068ac <MX_SPI1_Init+0x74>)
 800687a:	2200      	movs	r2, #0
 800687c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800687e:	4b0b      	ldr	r3, [pc, #44]	@ (80068ac <MX_SPI1_Init+0x74>)
 8006880:	2200      	movs	r2, #0
 8006882:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006884:	4b09      	ldr	r3, [pc, #36]	@ (80068ac <MX_SPI1_Init+0x74>)
 8006886:	2207      	movs	r2, #7
 8006888:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800688a:	4b08      	ldr	r3, [pc, #32]	@ (80068ac <MX_SPI1_Init+0x74>)
 800688c:	2200      	movs	r2, #0
 800688e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006890:	4b06      	ldr	r3, [pc, #24]	@ (80068ac <MX_SPI1_Init+0x74>)
 8006892:	2208      	movs	r2, #8
 8006894:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006896:	4b05      	ldr	r3, [pc, #20]	@ (80068ac <MX_SPI1_Init+0x74>)
 8006898:	0018      	movs	r0, r3
 800689a:	f002 fb41 	bl	8008f20 <HAL_SPI_Init>
 800689e:	1e03      	subs	r3, r0, #0
 80068a0:	d001      	beq.n	80068a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80068a2:	f000 f8bb 	bl	8006a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80068a6:	46c0      	nop			@ (mov r8, r8)
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	20000244 	.word	0x20000244
 80068b0:	40013000 	.word	0x40013000

080068b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80068b8:	4b23      	ldr	r3, [pc, #140]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 80068ba:	4a24      	ldr	r2, [pc, #144]	@ (800694c <MX_USART2_UART_Init+0x98>)
 80068bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80068be:	4b22      	ldr	r3, [pc, #136]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 80068c0:	22e1      	movs	r2, #225	@ 0xe1
 80068c2:	0252      	lsls	r2, r2, #9
 80068c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80068c6:	4b20      	ldr	r3, [pc, #128]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80068cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80068d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80068d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 80068da:	220c      	movs	r2, #12
 80068dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80068de:	4b1a      	ldr	r3, [pc, #104]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80068e4:	4b18      	ldr	r3, [pc, #96]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80068ea:	4b17      	ldr	r3, [pc, #92]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80068f0:	4b15      	ldr	r3, [pc, #84]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80068f6:	4b14      	ldr	r3, [pc, #80]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80068fc:	4b12      	ldr	r3, [pc, #72]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 80068fe:	0018      	movs	r0, r3
 8006900:	f002 fbc6 	bl	8009090 <HAL_UART_Init>
 8006904:	1e03      	subs	r3, r0, #0
 8006906:	d001      	beq.n	800690c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006908:	f000 f888 	bl	8006a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800690c:	4b0e      	ldr	r3, [pc, #56]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 800690e:	2100      	movs	r1, #0
 8006910:	0018      	movs	r0, r3
 8006912:	f003 fac9 	bl	8009ea8 <HAL_UARTEx_SetTxFifoThreshold>
 8006916:	1e03      	subs	r3, r0, #0
 8006918:	d001      	beq.n	800691e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800691a:	f000 f87f 	bl	8006a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800691e:	4b0a      	ldr	r3, [pc, #40]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 8006920:	2100      	movs	r1, #0
 8006922:	0018      	movs	r0, r3
 8006924:	f003 fb00 	bl	8009f28 <HAL_UARTEx_SetRxFifoThreshold>
 8006928:	1e03      	subs	r3, r0, #0
 800692a:	d001      	beq.n	8006930 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800692c:	f000 f876 	bl	8006a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006930:	4b05      	ldr	r3, [pc, #20]	@ (8006948 <MX_USART2_UART_Init+0x94>)
 8006932:	0018      	movs	r0, r3
 8006934:	f003 fa7e 	bl	8009e34 <HAL_UARTEx_DisableFifoMode>
 8006938:	1e03      	subs	r3, r0, #0
 800693a:	d001      	beq.n	8006940 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800693c:	f000 f86e 	bl	8006a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006940:	46c0      	nop			@ (mov r8, r8)
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	46c0      	nop			@ (mov r8, r8)
 8006948:	200002a8 	.word	0x200002a8
 800694c:	40004400 	.word	0x40004400

08006950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006950:	b590      	push	{r4, r7, lr}
 8006952:	b089      	sub	sp, #36	@ 0x24
 8006954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006956:	240c      	movs	r4, #12
 8006958:	193b      	adds	r3, r7, r4
 800695a:	0018      	movs	r0, r3
 800695c:	2314      	movs	r3, #20
 800695e:	001a      	movs	r2, r3
 8006960:	2100      	movs	r1, #0
 8006962:	f004 f953 	bl	800ac0c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006966:	4b2a      	ldr	r3, [pc, #168]	@ (8006a10 <MX_GPIO_Init+0xc0>)
 8006968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800696a:	4b29      	ldr	r3, [pc, #164]	@ (8006a10 <MX_GPIO_Init+0xc0>)
 800696c:	2101      	movs	r1, #1
 800696e:	430a      	orrs	r2, r1
 8006970:	635a      	str	r2, [r3, #52]	@ 0x34
 8006972:	4b27      	ldr	r3, [pc, #156]	@ (8006a10 <MX_GPIO_Init+0xc0>)
 8006974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006976:	2201      	movs	r2, #1
 8006978:	4013      	ands	r3, r2
 800697a:	60bb      	str	r3, [r7, #8]
 800697c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800697e:	4b24      	ldr	r3, [pc, #144]	@ (8006a10 <MX_GPIO_Init+0xc0>)
 8006980:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006982:	4b23      	ldr	r3, [pc, #140]	@ (8006a10 <MX_GPIO_Init+0xc0>)
 8006984:	2102      	movs	r1, #2
 8006986:	430a      	orrs	r2, r1
 8006988:	635a      	str	r2, [r3, #52]	@ 0x34
 800698a:	4b21      	ldr	r3, [pc, #132]	@ (8006a10 <MX_GPIO_Init+0xc0>)
 800698c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800698e:	2202      	movs	r2, #2
 8006990:	4013      	ands	r3, r2
 8006992:	607b      	str	r3, [r7, #4]
 8006994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_LORA_Pin|RESET_LORA_Pin, GPIO_PIN_RESET);
 8006996:	491f      	ldr	r1, [pc, #124]	@ (8006a14 <MX_GPIO_Init+0xc4>)
 8006998:	4b1f      	ldr	r3, [pc, #124]	@ (8006a18 <MX_GPIO_Init+0xc8>)
 800699a:	2200      	movs	r2, #0
 800699c:	0018      	movs	r0, r3
 800699e:	f000 fd3d 	bl	800741c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DI01_LORA_Pin */
  GPIO_InitStruct.Pin = DI01_LORA_Pin;
 80069a2:	193b      	adds	r3, r7, r4
 80069a4:	2210      	movs	r2, #16
 80069a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80069a8:	193b      	adds	r3, r7, r4
 80069aa:	2288      	movs	r2, #136	@ 0x88
 80069ac:	0352      	lsls	r2, r2, #13
 80069ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b0:	193b      	adds	r3, r7, r4
 80069b2:	2200      	movs	r2, #0
 80069b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DI01_LORA_GPIO_Port, &GPIO_InitStruct);
 80069b6:	193a      	adds	r2, r7, r4
 80069b8:	23a0      	movs	r3, #160	@ 0xa0
 80069ba:	05db      	lsls	r3, r3, #23
 80069bc:	0011      	movs	r1, r2
 80069be:	0018      	movs	r0, r3
 80069c0:	f000 fbc8 	bl	8007154 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_LORA_Pin RESET_LORA_Pin */
  GPIO_InitStruct.Pin = NSS_LORA_Pin|RESET_LORA_Pin;
 80069c4:	193b      	adds	r3, r7, r4
 80069c6:	4a13      	ldr	r2, [pc, #76]	@ (8006a14 <MX_GPIO_Init+0xc4>)
 80069c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069ca:	193b      	adds	r3, r7, r4
 80069cc:	2201      	movs	r2, #1
 80069ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d0:	193b      	adds	r3, r7, r4
 80069d2:	2200      	movs	r2, #0
 80069d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069d6:	193b      	adds	r3, r7, r4
 80069d8:	2200      	movs	r2, #0
 80069da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069dc:	193b      	adds	r3, r7, r4
 80069de:	4a0e      	ldr	r2, [pc, #56]	@ (8006a18 <MX_GPIO_Init+0xc8>)
 80069e0:	0019      	movs	r1, r3
 80069e2:	0010      	movs	r0, r2
 80069e4:	f000 fbb6 	bl	8007154 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_LORA_Pin */
  GPIO_InitStruct.Pin = BUSY_LORA_Pin;
 80069e8:	0021      	movs	r1, r4
 80069ea:	187b      	adds	r3, r7, r1
 80069ec:	2202      	movs	r2, #2
 80069ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069f0:	187b      	adds	r3, r7, r1
 80069f2:	2200      	movs	r2, #0
 80069f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f6:	187b      	adds	r3, r7, r1
 80069f8:	2200      	movs	r2, #0
 80069fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_LORA_GPIO_Port, &GPIO_InitStruct);
 80069fc:	187b      	adds	r3, r7, r1
 80069fe:	4a06      	ldr	r2, [pc, #24]	@ (8006a18 <MX_GPIO_Init+0xc8>)
 8006a00:	0019      	movs	r1, r3
 8006a02:	0010      	movs	r0, r2
 8006a04:	f000 fba6 	bl	8007154 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8006a08:	46c0      	nop			@ (mov r8, r8)
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	b009      	add	sp, #36	@ 0x24
 8006a0e:	bd90      	pop	{r4, r7, pc}
 8006a10:	40021000 	.word	0x40021000
 8006a14:	00000401 	.word	0x00000401
 8006a18:	50000400 	.word	0x50000400

08006a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a20:	b672      	cpsid	i
}
 8006a22:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006a24:	46c0      	nop			@ (mov r8, r8)
 8006a26:	e7fd      	b.n	8006a24 <Error_Handler+0x8>

08006a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006a6c <HAL_MspInit+0x44>)
 8006a30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a32:	4b0e      	ldr	r3, [pc, #56]	@ (8006a6c <HAL_MspInit+0x44>)
 8006a34:	2101      	movs	r1, #1
 8006a36:	430a      	orrs	r2, r1
 8006a38:	641a      	str	r2, [r3, #64]	@ 0x40
 8006a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <HAL_MspInit+0x44>)
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3e:	2201      	movs	r2, #1
 8006a40:	4013      	ands	r3, r2
 8006a42:	607b      	str	r3, [r7, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a46:	4b09      	ldr	r3, [pc, #36]	@ (8006a6c <HAL_MspInit+0x44>)
 8006a48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a4a:	4b08      	ldr	r3, [pc, #32]	@ (8006a6c <HAL_MspInit+0x44>)
 8006a4c:	2180      	movs	r1, #128	@ 0x80
 8006a4e:	0549      	lsls	r1, r1, #21
 8006a50:	430a      	orrs	r2, r1
 8006a52:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006a54:	4b05      	ldr	r3, [pc, #20]	@ (8006a6c <HAL_MspInit+0x44>)
 8006a56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a58:	2380      	movs	r3, #128	@ 0x80
 8006a5a:	055b      	lsls	r3, r3, #21
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	603b      	str	r3, [r7, #0]
 8006a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a62:	46c0      	nop			@ (mov r8, r8)
 8006a64:	46bd      	mov	sp, r7
 8006a66:	b002      	add	sp, #8
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	46c0      	nop			@ (mov r8, r8)
 8006a6c:	40021000 	.word	0x40021000

08006a70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006a70:	b590      	push	{r4, r7, lr}
 8006a72:	b097      	sub	sp, #92	@ 0x5c
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a78:	2344      	movs	r3, #68	@ 0x44
 8006a7a:	18fb      	adds	r3, r7, r3
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	2314      	movs	r3, #20
 8006a80:	001a      	movs	r2, r3
 8006a82:	2100      	movs	r1, #0
 8006a84:	f004 f8c2 	bl	800ac0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006a88:	2410      	movs	r4, #16
 8006a8a:	193b      	adds	r3, r7, r4
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	2334      	movs	r3, #52	@ 0x34
 8006a90:	001a      	movs	r2, r3
 8006a92:	2100      	movs	r1, #0
 8006a94:	f004 f8ba 	bl	800ac0c <memset>
  if(hi2c->Instance==I2C1)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a22      	ldr	r2, [pc, #136]	@ (8006b28 <HAL_I2C_MspInit+0xb8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d13e      	bne.n	8006b20 <HAL_I2C_MspInit+0xb0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006aa2:	193b      	adds	r3, r7, r4
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006aa8:	193b      	adds	r3, r7, r4
 8006aaa:	2200      	movs	r2, #0
 8006aac:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006aae:	193b      	adds	r3, r7, r4
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f002 f87d 	bl	8008bb0 <HAL_RCCEx_PeriphCLKConfig>
 8006ab6:	1e03      	subs	r3, r0, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006aba:	f7ff ffaf 	bl	8006a1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006abe:	4b1b      	ldr	r3, [pc, #108]	@ (8006b2c <HAL_I2C_MspInit+0xbc>)
 8006ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ac2:	4b1a      	ldr	r3, [pc, #104]	@ (8006b2c <HAL_I2C_MspInit+0xbc>)
 8006ac4:	2102      	movs	r1, #2
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	635a      	str	r2, [r3, #52]	@ 0x34
 8006aca:	4b18      	ldr	r3, [pc, #96]	@ (8006b2c <HAL_I2C_MspInit+0xbc>)
 8006acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ace:	2202      	movs	r2, #2
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006ad6:	2144      	movs	r1, #68	@ 0x44
 8006ad8:	187b      	adds	r3, r7, r1
 8006ada:	22c0      	movs	r2, #192	@ 0xc0
 8006adc:	0092      	lsls	r2, r2, #2
 8006ade:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ae0:	187b      	adds	r3, r7, r1
 8006ae2:	2212      	movs	r2, #18
 8006ae4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae6:	187b      	adds	r3, r7, r1
 8006ae8:	2200      	movs	r2, #0
 8006aea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aec:	187b      	adds	r3, r7, r1
 8006aee:	2200      	movs	r2, #0
 8006af0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8006af2:	187b      	adds	r3, r7, r1
 8006af4:	2206      	movs	r2, #6
 8006af6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006af8:	187b      	adds	r3, r7, r1
 8006afa:	4a0d      	ldr	r2, [pc, #52]	@ (8006b30 <HAL_I2C_MspInit+0xc0>)
 8006afc:	0019      	movs	r1, r3
 8006afe:	0010      	movs	r0, r2
 8006b00:	f000 fb28 	bl	8007154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006b04:	4b09      	ldr	r3, [pc, #36]	@ (8006b2c <HAL_I2C_MspInit+0xbc>)
 8006b06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b08:	4b08      	ldr	r3, [pc, #32]	@ (8006b2c <HAL_I2C_MspInit+0xbc>)
 8006b0a:	2180      	movs	r1, #128	@ 0x80
 8006b0c:	0389      	lsls	r1, r1, #14
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006b12:	4b06      	ldr	r3, [pc, #24]	@ (8006b2c <HAL_I2C_MspInit+0xbc>)
 8006b14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b16:	2380      	movs	r3, #128	@ 0x80
 8006b18:	039b      	lsls	r3, r3, #14
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006b20:	46c0      	nop			@ (mov r8, r8)
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b017      	add	sp, #92	@ 0x5c
 8006b26:	bd90      	pop	{r4, r7, pc}
 8006b28:	40005400 	.word	0x40005400
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	50000400 	.word	0x50000400

08006b34 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006b34:	b590      	push	{r4, r7, lr}
 8006b36:	b08b      	sub	sp, #44	@ 0x2c
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b3c:	2414      	movs	r4, #20
 8006b3e:	193b      	adds	r3, r7, r4
 8006b40:	0018      	movs	r0, r3
 8006b42:	2314      	movs	r3, #20
 8006b44:	001a      	movs	r2, r3
 8006b46:	2100      	movs	r1, #0
 8006b48:	f004 f860 	bl	800ac0c <memset>
  if(hspi->Instance==SPI1)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc0 <HAL_SPI_MspInit+0x8c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d130      	bne.n	8006bb8 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006b56:	4b1b      	ldr	r3, [pc, #108]	@ (8006bc4 <HAL_SPI_MspInit+0x90>)
 8006b58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8006bc4 <HAL_SPI_MspInit+0x90>)
 8006b5c:	2180      	movs	r1, #128	@ 0x80
 8006b5e:	0149      	lsls	r1, r1, #5
 8006b60:	430a      	orrs	r2, r1
 8006b62:	641a      	str	r2, [r3, #64]	@ 0x40
 8006b64:	4b17      	ldr	r3, [pc, #92]	@ (8006bc4 <HAL_SPI_MspInit+0x90>)
 8006b66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b68:	2380      	movs	r3, #128	@ 0x80
 8006b6a:	015b      	lsls	r3, r3, #5
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
 8006b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b72:	4b14      	ldr	r3, [pc, #80]	@ (8006bc4 <HAL_SPI_MspInit+0x90>)
 8006b74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b76:	4b13      	ldr	r3, [pc, #76]	@ (8006bc4 <HAL_SPI_MspInit+0x90>)
 8006b78:	2101      	movs	r1, #1
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b7e:	4b11      	ldr	r3, [pc, #68]	@ (8006bc4 <HAL_SPI_MspInit+0x90>)
 8006b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b82:	2201      	movs	r2, #1
 8006b84:	4013      	ands	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006b8a:	0021      	movs	r1, r4
 8006b8c:	187b      	adds	r3, r7, r1
 8006b8e:	22e0      	movs	r2, #224	@ 0xe0
 8006b90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b92:	187b      	adds	r3, r7, r1
 8006b94:	2202      	movs	r2, #2
 8006b96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b98:	187b      	adds	r3, r7, r1
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b9e:	187b      	adds	r3, r7, r1
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006ba4:	187b      	adds	r3, r7, r1
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006baa:	187a      	adds	r2, r7, r1
 8006bac:	23a0      	movs	r3, #160	@ 0xa0
 8006bae:	05db      	lsls	r3, r3, #23
 8006bb0:	0011      	movs	r1, r2
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f000 face 	bl	8007154 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8006bb8:	46c0      	nop			@ (mov r8, r8)
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b00b      	add	sp, #44	@ 0x2c
 8006bbe:	bd90      	pop	{r4, r7, pc}
 8006bc0:	40013000 	.word	0x40013000
 8006bc4:	40021000 	.word	0x40021000

08006bc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006bc8:	b590      	push	{r4, r7, lr}
 8006bca:	b097      	sub	sp, #92	@ 0x5c
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bd0:	2344      	movs	r3, #68	@ 0x44
 8006bd2:	18fb      	adds	r3, r7, r3
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	2314      	movs	r3, #20
 8006bd8:	001a      	movs	r2, r3
 8006bda:	2100      	movs	r1, #0
 8006bdc:	f004 f816 	bl	800ac0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006be0:	2410      	movs	r4, #16
 8006be2:	193b      	adds	r3, r7, r4
 8006be4:	0018      	movs	r0, r3
 8006be6:	2334      	movs	r3, #52	@ 0x34
 8006be8:	001a      	movs	r2, r3
 8006bea:	2100      	movs	r1, #0
 8006bec:	f004 f80e 	bl	800ac0c <memset>
  if(huart->Instance==USART2)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a22      	ldr	r2, [pc, #136]	@ (8006c80 <HAL_UART_MspInit+0xb8>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d13e      	bne.n	8006c78 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006bfa:	193b      	adds	r3, r7, r4
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006c00:	193b      	adds	r3, r7, r4
 8006c02:	2200      	movs	r2, #0
 8006c04:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c06:	193b      	adds	r3, r7, r4
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f001 ffd1 	bl	8008bb0 <HAL_RCCEx_PeriphCLKConfig>
 8006c0e:	1e03      	subs	r3, r0, #0
 8006c10:	d001      	beq.n	8006c16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006c12:	f7ff ff03 	bl	8006a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006c16:	4b1b      	ldr	r3, [pc, #108]	@ (8006c84 <HAL_UART_MspInit+0xbc>)
 8006c18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8006c84 <HAL_UART_MspInit+0xbc>)
 8006c1c:	2180      	movs	r1, #128	@ 0x80
 8006c1e:	0289      	lsls	r1, r1, #10
 8006c20:	430a      	orrs	r2, r1
 8006c22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006c24:	4b17      	ldr	r3, [pc, #92]	@ (8006c84 <HAL_UART_MspInit+0xbc>)
 8006c26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c28:	2380      	movs	r3, #128	@ 0x80
 8006c2a:	029b      	lsls	r3, r3, #10
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c32:	4b14      	ldr	r3, [pc, #80]	@ (8006c84 <HAL_UART_MspInit+0xbc>)
 8006c34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c36:	4b13      	ldr	r3, [pc, #76]	@ (8006c84 <HAL_UART_MspInit+0xbc>)
 8006c38:	2101      	movs	r1, #1
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c3e:	4b11      	ldr	r3, [pc, #68]	@ (8006c84 <HAL_UART_MspInit+0xbc>)
 8006c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c42:	2201      	movs	r2, #1
 8006c44:	4013      	ands	r3, r2
 8006c46:	60bb      	str	r3, [r7, #8]
 8006c48:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006c4a:	2144      	movs	r1, #68	@ 0x44
 8006c4c:	187b      	adds	r3, r7, r1
 8006c4e:	220c      	movs	r2, #12
 8006c50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c52:	187b      	adds	r3, r7, r1
 8006c54:	2202      	movs	r2, #2
 8006c56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c58:	187b      	adds	r3, r7, r1
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c5e:	187b      	adds	r3, r7, r1
 8006c60:	2200      	movs	r2, #0
 8006c62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8006c64:	187b      	adds	r3, r7, r1
 8006c66:	2201      	movs	r2, #1
 8006c68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c6a:	187a      	adds	r2, r7, r1
 8006c6c:	23a0      	movs	r3, #160	@ 0xa0
 8006c6e:	05db      	lsls	r3, r3, #23
 8006c70:	0011      	movs	r1, r2
 8006c72:	0018      	movs	r0, r3
 8006c74:	f000 fa6e 	bl	8007154 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8006c78:	46c0      	nop			@ (mov r8, r8)
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	b017      	add	sp, #92	@ 0x5c
 8006c7e:	bd90      	pop	{r4, r7, pc}
 8006c80:	40004400 	.word	0x40004400
 8006c84:	40021000 	.word	0x40021000

08006c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006c8c:	46c0      	nop			@ (mov r8, r8)
 8006c8e:	e7fd      	b.n	8006c8c <NMI_Handler+0x4>

08006c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c94:	46c0      	nop			@ (mov r8, r8)
 8006c96:	e7fd      	b.n	8006c94 <HardFault_Handler+0x4>

08006c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006c9c:	46c0      	nop			@ (mov r8, r8)
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006ca6:	46c0      	nop			@ (mov r8, r8)
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006cb0:	f000 f95c 	bl	8006f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006cb4:	46c0      	nop			@ (mov r8, r8)
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	af00      	add	r7, sp, #0
  return 1;
 8006cbe:	2301      	movs	r3, #1
}
 8006cc0:	0018      	movs	r0, r3
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <_kill>:

int _kill(int pid, int sig)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006cd0:	f004 f854 	bl	800ad7c <__errno>
 8006cd4:	0003      	movs	r3, r0
 8006cd6:	2216      	movs	r2, #22
 8006cd8:	601a      	str	r2, [r3, #0]
  return -1;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	425b      	negs	r3, r3
}
 8006cde:	0018      	movs	r0, r3
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	b002      	add	sp, #8
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <_exit>:

void _exit (int status)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b082      	sub	sp, #8
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006cee:	2301      	movs	r3, #1
 8006cf0:	425a      	negs	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	0011      	movs	r1, r2
 8006cf6:	0018      	movs	r0, r3
 8006cf8:	f7ff ffe5 	bl	8006cc6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006cfc:	46c0      	nop			@ (mov r8, r8)
 8006cfe:	e7fd      	b.n	8006cfc <_exit+0x16>

08006d00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	e00a      	b.n	8006d28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006d12:	e000      	b.n	8006d16 <_read+0x16>
 8006d14:	bf00      	nop
 8006d16:	0001      	movs	r1, r0
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	60ba      	str	r2, [r7, #8]
 8006d1e:	b2ca      	uxtb	r2, r1
 8006d20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	3301      	adds	r3, #1
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	dbf0      	blt.n	8006d12 <_read+0x12>
  }

  return len;
 8006d30:	687b      	ldr	r3, [r7, #4]
}
 8006d32:	0018      	movs	r0, r3
 8006d34:	46bd      	mov	sp, r7
 8006d36:	b006      	add	sp, #24
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b086      	sub	sp, #24
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	e009      	b.n	8006d60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	60ba      	str	r2, [r7, #8]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	0018      	movs	r0, r3
 8006d56:	e000      	b.n	8006d5a <_write+0x20>
 8006d58:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	697a      	ldr	r2, [r7, #20]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	dbf1      	blt.n	8006d4c <_write+0x12>
  }
  return len;
 8006d68:	687b      	ldr	r3, [r7, #4]
}
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	b006      	add	sp, #24
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <_close>:

int _close(int file)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	425b      	negs	r3, r3
}
 8006d7e:	0018      	movs	r0, r3
 8006d80:	46bd      	mov	sp, r7
 8006d82:	b002      	add	sp, #8
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
 8006d8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2280      	movs	r2, #128	@ 0x80
 8006d94:	0192      	lsls	r2, r2, #6
 8006d96:	605a      	str	r2, [r3, #4]
  return 0;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	b002      	add	sp, #8
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <_isatty>:

int _isatty(int file)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b082      	sub	sp, #8
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006daa:	2301      	movs	r3, #1
}
 8006dac:	0018      	movs	r0, r3
 8006dae:	46bd      	mov	sp, r7
 8006db0:	b002      	add	sp, #8
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b004      	add	sp, #16
 8006dc8:	bd80      	pop	{r7, pc}
	...

08006dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006dd4:	4a14      	ldr	r2, [pc, #80]	@ (8006e28 <_sbrk+0x5c>)
 8006dd6:	4b15      	ldr	r3, [pc, #84]	@ (8006e2c <_sbrk+0x60>)
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006de0:	4b13      	ldr	r3, [pc, #76]	@ (8006e30 <_sbrk+0x64>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d102      	bne.n	8006dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006de8:	4b11      	ldr	r3, [pc, #68]	@ (8006e30 <_sbrk+0x64>)
 8006dea:	4a12      	ldr	r2, [pc, #72]	@ (8006e34 <_sbrk+0x68>)
 8006dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006dee:	4b10      	ldr	r3, [pc, #64]	@ (8006e30 <_sbrk+0x64>)
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	18d3      	adds	r3, r2, r3
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d207      	bcs.n	8006e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006dfc:	f003 ffbe 	bl	800ad7c <__errno>
 8006e00:	0003      	movs	r3, r0
 8006e02:	220c      	movs	r2, #12
 8006e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006e06:	2301      	movs	r3, #1
 8006e08:	425b      	negs	r3, r3
 8006e0a:	e009      	b.n	8006e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006e0c:	4b08      	ldr	r3, [pc, #32]	@ (8006e30 <_sbrk+0x64>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006e12:	4b07      	ldr	r3, [pc, #28]	@ (8006e30 <_sbrk+0x64>)
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	18d2      	adds	r2, r2, r3
 8006e1a:	4b05      	ldr	r3, [pc, #20]	@ (8006e30 <_sbrk+0x64>)
 8006e1c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
}
 8006e20:	0018      	movs	r0, r3
 8006e22:	46bd      	mov	sp, r7
 8006e24:	b006      	add	sp, #24
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	20009000 	.word	0x20009000
 8006e2c:	00000400 	.word	0x00000400
 8006e30:	200003f4 	.word	0x200003f4
 8006e34:	20000548 	.word	0x20000548

08006e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006e3c:	46c0      	nop			@ (mov r8, r8)
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006e44:	480d      	ldr	r0, [pc, #52]	@ (8006e7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006e46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006e48:	f7ff fff6 	bl	8006e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006e4c:	480c      	ldr	r0, [pc, #48]	@ (8006e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8006e4e:	490d      	ldr	r1, [pc, #52]	@ (8006e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006e50:	4a0d      	ldr	r2, [pc, #52]	@ (8006e88 <LoopForever+0xe>)
  movs r3, #0
 8006e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e54:	e002      	b.n	8006e5c <LoopCopyDataInit>

08006e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e5a:	3304      	adds	r3, #4

08006e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e60:	d3f9      	bcc.n	8006e56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e62:	4a0a      	ldr	r2, [pc, #40]	@ (8006e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006e64:	4c0a      	ldr	r4, [pc, #40]	@ (8006e90 <LoopForever+0x16>)
  movs r3, #0
 8006e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e68:	e001      	b.n	8006e6e <LoopFillZerobss>

08006e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e6c:	3204      	adds	r2, #4

08006e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e70:	d3fb      	bcc.n	8006e6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006e72:	f003 ff89 	bl	800ad88 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006e76:	f7ff f875 	bl	8005f64 <main>

08006e7a <LoopForever>:

LoopForever:
  b LoopForever
 8006e7a:	e7fe      	b.n	8006e7a <LoopForever>
  ldr   r0, =_estack
 8006e7c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8006e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e84:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8006e88:	0800e48c 	.word	0x0800e48c
  ldr r2, =_sbss
 8006e8c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8006e90:	20000548 	.word	0x20000548

08006e94 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006e94:	e7fe      	b.n	8006e94 <ADC1_COMP_IRQHandler>
	...

08006e98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006e9e:	1dfb      	adds	r3, r7, #7
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed4 <HAL_Init+0x3c>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed4 <HAL_Init+0x3c>)
 8006eaa:	2180      	movs	r1, #128	@ 0x80
 8006eac:	0049      	lsls	r1, r1, #1
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	f000 f810 	bl	8006ed8 <HAL_InitTick>
 8006eb8:	1e03      	subs	r3, r0, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006ebc:	1dfb      	adds	r3, r7, #7
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	e001      	b.n	8006ec8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006ec4:	f7ff fdb0 	bl	8006a28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006ec8:	1dfb      	adds	r3, r7, #7
 8006eca:	781b      	ldrb	r3, [r3, #0]
}
 8006ecc:	0018      	movs	r0, r3
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	b002      	add	sp, #8
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	40022000 	.word	0x40022000

08006ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ed8:	b590      	push	{r4, r7, lr}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006ee0:	230f      	movs	r3, #15
 8006ee2:	18fb      	adds	r3, r7, r3
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f60 <HAL_InitTick+0x88>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d02b      	beq.n	8006f48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8006ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8006f64 <HAL_InitTick+0x8c>)
 8006ef2:	681c      	ldr	r4, [r3, #0]
 8006ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f60 <HAL_InitTick+0x88>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	0019      	movs	r1, r3
 8006efa:	23fa      	movs	r3, #250	@ 0xfa
 8006efc:	0098      	lsls	r0, r3, #2
 8006efe:	f7f9 f927 	bl	8000150 <__udivsi3>
 8006f02:	0003      	movs	r3, r0
 8006f04:	0019      	movs	r1, r3
 8006f06:	0020      	movs	r0, r4
 8006f08:	f7f9 f922 	bl	8000150 <__udivsi3>
 8006f0c:	0003      	movs	r3, r0
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f000 f913 	bl	800713a <HAL_SYSTICK_Config>
 8006f14:	1e03      	subs	r3, r0, #0
 8006f16:	d112      	bne.n	8006f3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d80a      	bhi.n	8006f34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	2301      	movs	r3, #1
 8006f22:	425b      	negs	r3, r3
 8006f24:	2200      	movs	r2, #0
 8006f26:	0018      	movs	r0, r3
 8006f28:	f000 f8f2 	bl	8007110 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8006f68 <HAL_InitTick+0x90>)
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	e00d      	b.n	8006f50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006f34:	230f      	movs	r3, #15
 8006f36:	18fb      	adds	r3, r7, r3
 8006f38:	2201      	movs	r2, #1
 8006f3a:	701a      	strb	r2, [r3, #0]
 8006f3c:	e008      	b.n	8006f50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006f3e:	230f      	movs	r3, #15
 8006f40:	18fb      	adds	r3, r7, r3
 8006f42:	2201      	movs	r2, #1
 8006f44:	701a      	strb	r2, [r3, #0]
 8006f46:	e003      	b.n	8006f50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006f48:	230f      	movs	r3, #15
 8006f4a:	18fb      	adds	r3, r7, r3
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006f50:	230f      	movs	r3, #15
 8006f52:	18fb      	adds	r3, r7, r3
 8006f54:	781b      	ldrb	r3, [r3, #0]
}
 8006f56:	0018      	movs	r0, r3
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	b005      	add	sp, #20
 8006f5c:	bd90      	pop	{r4, r7, pc}
 8006f5e:	46c0      	nop			@ (mov r8, r8)
 8006f60:	20000008 	.word	0x20000008
 8006f64:	20000000 	.word	0x20000000
 8006f68:	20000004 	.word	0x20000004

08006f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006f70:	4b05      	ldr	r3, [pc, #20]	@ (8006f88 <HAL_IncTick+0x1c>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	001a      	movs	r2, r3
 8006f76:	4b05      	ldr	r3, [pc, #20]	@ (8006f8c <HAL_IncTick+0x20>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	18d2      	adds	r2, r2, r3
 8006f7c:	4b03      	ldr	r3, [pc, #12]	@ (8006f8c <HAL_IncTick+0x20>)
 8006f7e:	601a      	str	r2, [r3, #0]
}
 8006f80:	46c0      	nop			@ (mov r8, r8)
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	46c0      	nop			@ (mov r8, r8)
 8006f88:	20000008 	.word	0x20000008
 8006f8c:	200003f8 	.word	0x200003f8

08006f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  return uwTick;
 8006f94:	4b02      	ldr	r3, [pc, #8]	@ (8006fa0 <HAL_GetTick+0x10>)
 8006f96:	681b      	ldr	r3, [r3, #0]
}
 8006f98:	0018      	movs	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	46c0      	nop			@ (mov r8, r8)
 8006fa0:	200003f8 	.word	0x200003f8

08006fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fac:	f7ff fff0 	bl	8006f90 <HAL_GetTick>
 8006fb0:	0003      	movs	r3, r0
 8006fb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	d005      	beq.n	8006fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe8 <HAL_Delay+0x44>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	001a      	movs	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	189b      	adds	r3, r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006fca:	46c0      	nop			@ (mov r8, r8)
 8006fcc:	f7ff ffe0 	bl	8006f90 <HAL_GetTick>
 8006fd0:	0002      	movs	r2, r0
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d8f7      	bhi.n	8006fcc <HAL_Delay+0x28>
  {
  }
}
 8006fdc:	46c0      	nop			@ (mov r8, r8)
 8006fde:	46c0      	nop			@ (mov r8, r8)
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	b004      	add	sp, #16
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	46c0      	nop			@ (mov r8, r8)
 8006fe8:	20000008 	.word	0x20000008

08006fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fec:	b590      	push	{r4, r7, lr}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	0002      	movs	r2, r0
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	1dfb      	adds	r3, r7, #7
 8006ff8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006ffa:	1dfb      	adds	r3, r7, #7
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b7f      	cmp	r3, #127	@ 0x7f
 8007000:	d828      	bhi.n	8007054 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007002:	4a2f      	ldr	r2, [pc, #188]	@ (80070c0 <__NVIC_SetPriority+0xd4>)
 8007004:	1dfb      	adds	r3, r7, #7
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	b25b      	sxtb	r3, r3
 800700a:	089b      	lsrs	r3, r3, #2
 800700c:	33c0      	adds	r3, #192	@ 0xc0
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	589b      	ldr	r3, [r3, r2]
 8007012:	1dfa      	adds	r2, r7, #7
 8007014:	7812      	ldrb	r2, [r2, #0]
 8007016:	0011      	movs	r1, r2
 8007018:	2203      	movs	r2, #3
 800701a:	400a      	ands	r2, r1
 800701c:	00d2      	lsls	r2, r2, #3
 800701e:	21ff      	movs	r1, #255	@ 0xff
 8007020:	4091      	lsls	r1, r2
 8007022:	000a      	movs	r2, r1
 8007024:	43d2      	mvns	r2, r2
 8007026:	401a      	ands	r2, r3
 8007028:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	019b      	lsls	r3, r3, #6
 800702e:	22ff      	movs	r2, #255	@ 0xff
 8007030:	401a      	ands	r2, r3
 8007032:	1dfb      	adds	r3, r7, #7
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	0018      	movs	r0, r3
 8007038:	2303      	movs	r3, #3
 800703a:	4003      	ands	r3, r0
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007040:	481f      	ldr	r0, [pc, #124]	@ (80070c0 <__NVIC_SetPriority+0xd4>)
 8007042:	1dfb      	adds	r3, r7, #7
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	b25b      	sxtb	r3, r3
 8007048:	089b      	lsrs	r3, r3, #2
 800704a:	430a      	orrs	r2, r1
 800704c:	33c0      	adds	r3, #192	@ 0xc0
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007052:	e031      	b.n	80070b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007054:	4a1b      	ldr	r2, [pc, #108]	@ (80070c4 <__NVIC_SetPriority+0xd8>)
 8007056:	1dfb      	adds	r3, r7, #7
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	0019      	movs	r1, r3
 800705c:	230f      	movs	r3, #15
 800705e:	400b      	ands	r3, r1
 8007060:	3b08      	subs	r3, #8
 8007062:	089b      	lsrs	r3, r3, #2
 8007064:	3306      	adds	r3, #6
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	18d3      	adds	r3, r2, r3
 800706a:	3304      	adds	r3, #4
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	1dfa      	adds	r2, r7, #7
 8007070:	7812      	ldrb	r2, [r2, #0]
 8007072:	0011      	movs	r1, r2
 8007074:	2203      	movs	r2, #3
 8007076:	400a      	ands	r2, r1
 8007078:	00d2      	lsls	r2, r2, #3
 800707a:	21ff      	movs	r1, #255	@ 0xff
 800707c:	4091      	lsls	r1, r2
 800707e:	000a      	movs	r2, r1
 8007080:	43d2      	mvns	r2, r2
 8007082:	401a      	ands	r2, r3
 8007084:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	019b      	lsls	r3, r3, #6
 800708a:	22ff      	movs	r2, #255	@ 0xff
 800708c:	401a      	ands	r2, r3
 800708e:	1dfb      	adds	r3, r7, #7
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	0018      	movs	r0, r3
 8007094:	2303      	movs	r3, #3
 8007096:	4003      	ands	r3, r0
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800709c:	4809      	ldr	r0, [pc, #36]	@ (80070c4 <__NVIC_SetPriority+0xd8>)
 800709e:	1dfb      	adds	r3, r7, #7
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	001c      	movs	r4, r3
 80070a4:	230f      	movs	r3, #15
 80070a6:	4023      	ands	r3, r4
 80070a8:	3b08      	subs	r3, #8
 80070aa:	089b      	lsrs	r3, r3, #2
 80070ac:	430a      	orrs	r2, r1
 80070ae:	3306      	adds	r3, #6
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	18c3      	adds	r3, r0, r3
 80070b4:	3304      	adds	r3, #4
 80070b6:	601a      	str	r2, [r3, #0]
}
 80070b8:	46c0      	nop			@ (mov r8, r8)
 80070ba:	46bd      	mov	sp, r7
 80070bc:	b003      	add	sp, #12
 80070be:	bd90      	pop	{r4, r7, pc}
 80070c0:	e000e100 	.word	0xe000e100
 80070c4:	e000ed00 	.word	0xe000ed00

080070c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	1e5a      	subs	r2, r3, #1
 80070d4:	2380      	movs	r3, #128	@ 0x80
 80070d6:	045b      	lsls	r3, r3, #17
 80070d8:	429a      	cmp	r2, r3
 80070da:	d301      	bcc.n	80070e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80070dc:	2301      	movs	r3, #1
 80070de:	e010      	b.n	8007102 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80070e0:	4b0a      	ldr	r3, [pc, #40]	@ (800710c <SysTick_Config+0x44>)
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	3a01      	subs	r2, #1
 80070e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80070e8:	2301      	movs	r3, #1
 80070ea:	425b      	negs	r3, r3
 80070ec:	2103      	movs	r1, #3
 80070ee:	0018      	movs	r0, r3
 80070f0:	f7ff ff7c 	bl	8006fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80070f4:	4b05      	ldr	r3, [pc, #20]	@ (800710c <SysTick_Config+0x44>)
 80070f6:	2200      	movs	r2, #0
 80070f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80070fa:	4b04      	ldr	r3, [pc, #16]	@ (800710c <SysTick_Config+0x44>)
 80070fc:	2207      	movs	r2, #7
 80070fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007100:	2300      	movs	r3, #0
}
 8007102:	0018      	movs	r0, r3
 8007104:	46bd      	mov	sp, r7
 8007106:	b002      	add	sp, #8
 8007108:	bd80      	pop	{r7, pc}
 800710a:	46c0      	nop			@ (mov r8, r8)
 800710c:	e000e010 	.word	0xe000e010

08007110 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
 800711a:	210f      	movs	r1, #15
 800711c:	187b      	adds	r3, r7, r1
 800711e:	1c02      	adds	r2, r0, #0
 8007120:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	187b      	adds	r3, r7, r1
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	b25b      	sxtb	r3, r3
 800712a:	0011      	movs	r1, r2
 800712c:	0018      	movs	r0, r3
 800712e:	f7ff ff5d 	bl	8006fec <__NVIC_SetPriority>
}
 8007132:	46c0      	nop			@ (mov r8, r8)
 8007134:	46bd      	mov	sp, r7
 8007136:	b004      	add	sp, #16
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b082      	sub	sp, #8
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	0018      	movs	r0, r3
 8007146:	f7ff ffbf 	bl	80070c8 <SysTick_Config>
 800714a:	0003      	movs	r3, r0
}
 800714c:	0018      	movs	r0, r3
 800714e:	46bd      	mov	sp, r7
 8007150:	b002      	add	sp, #8
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007162:	e147      	b.n	80073f4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2101      	movs	r1, #1
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4091      	lsls	r1, r2
 800716e:	000a      	movs	r2, r1
 8007170:	4013      	ands	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d100      	bne.n	800717c <HAL_GPIO_Init+0x28>
 800717a:	e138      	b.n	80073ee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2203      	movs	r2, #3
 8007182:	4013      	ands	r3, r2
 8007184:	2b01      	cmp	r3, #1
 8007186:	d005      	beq.n	8007194 <HAL_GPIO_Init+0x40>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2203      	movs	r2, #3
 800718e:	4013      	ands	r3, r2
 8007190:	2b02      	cmp	r3, #2
 8007192:	d130      	bne.n	80071f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	2203      	movs	r2, #3
 80071a0:	409a      	lsls	r2, r3
 80071a2:	0013      	movs	r3, r2
 80071a4:	43da      	mvns	r2, r3
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	4013      	ands	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	68da      	ldr	r2, [r3, #12]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	409a      	lsls	r2, r3
 80071b6:	0013      	movs	r3, r2
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	693a      	ldr	r2, [r7, #16]
 80071c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80071ca:	2201      	movs	r2, #1
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	409a      	lsls	r2, r3
 80071d0:	0013      	movs	r3, r2
 80071d2:	43da      	mvns	r2, r3
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	4013      	ands	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	091b      	lsrs	r3, r3, #4
 80071e0:	2201      	movs	r2, #1
 80071e2:	401a      	ands	r2, r3
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	409a      	lsls	r2, r3
 80071e8:	0013      	movs	r3, r2
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	2203      	movs	r2, #3
 80071fc:	4013      	ands	r3, r2
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d017      	beq.n	8007232 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	2203      	movs	r2, #3
 800720e:	409a      	lsls	r2, r3
 8007210:	0013      	movs	r3, r2
 8007212:	43da      	mvns	r2, r3
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	4013      	ands	r3, r2
 8007218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	409a      	lsls	r2, r3
 8007224:	0013      	movs	r3, r2
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2203      	movs	r2, #3
 8007238:	4013      	ands	r3, r2
 800723a:	2b02      	cmp	r3, #2
 800723c:	d123      	bne.n	8007286 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	08da      	lsrs	r2, r3, #3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3208      	adds	r2, #8
 8007246:	0092      	lsls	r2, r2, #2
 8007248:	58d3      	ldr	r3, [r2, r3]
 800724a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2207      	movs	r2, #7
 8007250:	4013      	ands	r3, r2
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	220f      	movs	r2, #15
 8007256:	409a      	lsls	r2, r3
 8007258:	0013      	movs	r3, r2
 800725a:	43da      	mvns	r2, r3
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	4013      	ands	r3, r2
 8007260:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2107      	movs	r1, #7
 800726a:	400b      	ands	r3, r1
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	409a      	lsls	r2, r3
 8007270:	0013      	movs	r3, r2
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	08da      	lsrs	r2, r3, #3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	3208      	adds	r2, #8
 8007280:	0092      	lsls	r2, r2, #2
 8007282:	6939      	ldr	r1, [r7, #16]
 8007284:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	2203      	movs	r2, #3
 8007292:	409a      	lsls	r2, r3
 8007294:	0013      	movs	r3, r2
 8007296:	43da      	mvns	r2, r3
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	4013      	ands	r3, r2
 800729c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2203      	movs	r2, #3
 80072a4:	401a      	ands	r2, r3
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	005b      	lsls	r3, r3, #1
 80072aa:	409a      	lsls	r2, r3
 80072ac:	0013      	movs	r3, r2
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	23c0      	movs	r3, #192	@ 0xc0
 80072c0:	029b      	lsls	r3, r3, #10
 80072c2:	4013      	ands	r3, r2
 80072c4:	d100      	bne.n	80072c8 <HAL_GPIO_Init+0x174>
 80072c6:	e092      	b.n	80073ee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80072c8:	4a50      	ldr	r2, [pc, #320]	@ (800740c <HAL_GPIO_Init+0x2b8>)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	089b      	lsrs	r3, r3, #2
 80072ce:	3318      	adds	r3, #24
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	589b      	ldr	r3, [r3, r2]
 80072d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2203      	movs	r2, #3
 80072da:	4013      	ands	r3, r2
 80072dc:	00db      	lsls	r3, r3, #3
 80072de:	220f      	movs	r2, #15
 80072e0:	409a      	lsls	r2, r3
 80072e2:	0013      	movs	r3, r2
 80072e4:	43da      	mvns	r2, r3
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	4013      	ands	r3, r2
 80072ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	23a0      	movs	r3, #160	@ 0xa0
 80072f0:	05db      	lsls	r3, r3, #23
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d013      	beq.n	800731e <HAL_GPIO_Init+0x1ca>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a45      	ldr	r2, [pc, #276]	@ (8007410 <HAL_GPIO_Init+0x2bc>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d00d      	beq.n	800731a <HAL_GPIO_Init+0x1c6>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a44      	ldr	r2, [pc, #272]	@ (8007414 <HAL_GPIO_Init+0x2c0>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d007      	beq.n	8007316 <HAL_GPIO_Init+0x1c2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a43      	ldr	r2, [pc, #268]	@ (8007418 <HAL_GPIO_Init+0x2c4>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d101      	bne.n	8007312 <HAL_GPIO_Init+0x1be>
 800730e:	2303      	movs	r3, #3
 8007310:	e006      	b.n	8007320 <HAL_GPIO_Init+0x1cc>
 8007312:	2305      	movs	r3, #5
 8007314:	e004      	b.n	8007320 <HAL_GPIO_Init+0x1cc>
 8007316:	2302      	movs	r3, #2
 8007318:	e002      	b.n	8007320 <HAL_GPIO_Init+0x1cc>
 800731a:	2301      	movs	r3, #1
 800731c:	e000      	b.n	8007320 <HAL_GPIO_Init+0x1cc>
 800731e:	2300      	movs	r3, #0
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	2103      	movs	r1, #3
 8007324:	400a      	ands	r2, r1
 8007326:	00d2      	lsls	r2, r2, #3
 8007328:	4093      	lsls	r3, r2
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	4313      	orrs	r3, r2
 800732e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007330:	4936      	ldr	r1, [pc, #216]	@ (800740c <HAL_GPIO_Init+0x2b8>)
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	089b      	lsrs	r3, r3, #2
 8007336:	3318      	adds	r3, #24
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800733e:	4b33      	ldr	r3, [pc, #204]	@ (800740c <HAL_GPIO_Init+0x2b8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	43da      	mvns	r2, r3
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	4013      	ands	r3, r2
 800734c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	2380      	movs	r3, #128	@ 0x80
 8007354:	035b      	lsls	r3, r3, #13
 8007356:	4013      	ands	r3, r2
 8007358:	d003      	beq.n	8007362 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007362:	4b2a      	ldr	r3, [pc, #168]	@ (800740c <HAL_GPIO_Init+0x2b8>)
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007368:	4b28      	ldr	r3, [pc, #160]	@ (800740c <HAL_GPIO_Init+0x2b8>)
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	43da      	mvns	r2, r3
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	4013      	ands	r3, r2
 8007376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	2380      	movs	r3, #128	@ 0x80
 800737e:	039b      	lsls	r3, r3, #14
 8007380:	4013      	ands	r3, r2
 8007382:	d003      	beq.n	800738c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	4313      	orrs	r3, r2
 800738a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800738c:	4b1f      	ldr	r3, [pc, #124]	@ (800740c <HAL_GPIO_Init+0x2b8>)
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007392:	4a1e      	ldr	r2, [pc, #120]	@ (800740c <HAL_GPIO_Init+0x2b8>)
 8007394:	2384      	movs	r3, #132	@ 0x84
 8007396:	58d3      	ldr	r3, [r2, r3]
 8007398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	43da      	mvns	r2, r3
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	4013      	ands	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685a      	ldr	r2, [r3, #4]
 80073a8:	2380      	movs	r3, #128	@ 0x80
 80073aa:	029b      	lsls	r3, r3, #10
 80073ac:	4013      	ands	r3, r2
 80073ae:	d003      	beq.n	80073b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80073b8:	4914      	ldr	r1, [pc, #80]	@ (800740c <HAL_GPIO_Init+0x2b8>)
 80073ba:	2284      	movs	r2, #132	@ 0x84
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80073c0:	4a12      	ldr	r2, [pc, #72]	@ (800740c <HAL_GPIO_Init+0x2b8>)
 80073c2:	2380      	movs	r3, #128	@ 0x80
 80073c4:	58d3      	ldr	r3, [r2, r3]
 80073c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	43da      	mvns	r2, r3
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	4013      	ands	r3, r2
 80073d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	2380      	movs	r3, #128	@ 0x80
 80073d8:	025b      	lsls	r3, r3, #9
 80073da:	4013      	ands	r3, r2
 80073dc:	d003      	beq.n	80073e6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80073e6:	4909      	ldr	r1, [pc, #36]	@ (800740c <HAL_GPIO_Init+0x2b8>)
 80073e8:	2280      	movs	r2, #128	@ 0x80
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	3301      	adds	r3, #1
 80073f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	40da      	lsrs	r2, r3
 80073fc:	1e13      	subs	r3, r2, #0
 80073fe:	d000      	beq.n	8007402 <HAL_GPIO_Init+0x2ae>
 8007400:	e6b0      	b.n	8007164 <HAL_GPIO_Init+0x10>
  }
}
 8007402:	46c0      	nop			@ (mov r8, r8)
 8007404:	46c0      	nop			@ (mov r8, r8)
 8007406:	46bd      	mov	sp, r7
 8007408:	b006      	add	sp, #24
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40021800 	.word	0x40021800
 8007410:	50000400 	.word	0x50000400
 8007414:	50000800 	.word	0x50000800
 8007418:	50000c00 	.word	0x50000c00

0800741c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	0008      	movs	r0, r1
 8007426:	0011      	movs	r1, r2
 8007428:	1cbb      	adds	r3, r7, #2
 800742a:	1c02      	adds	r2, r0, #0
 800742c:	801a      	strh	r2, [r3, #0]
 800742e:	1c7b      	adds	r3, r7, #1
 8007430:	1c0a      	adds	r2, r1, #0
 8007432:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007434:	1c7b      	adds	r3, r7, #1
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d004      	beq.n	8007446 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800743c:	1cbb      	adds	r3, r7, #2
 800743e:	881a      	ldrh	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007444:	e003      	b.n	800744e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007446:	1cbb      	adds	r3, r7, #2
 8007448:	881a      	ldrh	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800744e:	46c0      	nop			@ (mov r8, r8)
 8007450:	46bd      	mov	sp, r7
 8007452:	b002      	add	sp, #8
 8007454:	bd80      	pop	{r7, pc}
	...

08007458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e08f      	b.n	800758a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2241      	movs	r2, #65	@ 0x41
 800746e:	5c9b      	ldrb	r3, [r3, r2]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d107      	bne.n	8007486 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2240      	movs	r2, #64	@ 0x40
 800747a:	2100      	movs	r1, #0
 800747c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	0018      	movs	r0, r3
 8007482:	f7ff faf5 	bl	8006a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2241      	movs	r2, #65	@ 0x41
 800748a:	2124      	movs	r1, #36	@ 0x24
 800748c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2101      	movs	r1, #1
 800749a:	438a      	bics	r2, r1
 800749c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	493b      	ldr	r1, [pc, #236]	@ (8007594 <HAL_I2C_Init+0x13c>)
 80074a8:	400a      	ands	r2, r1
 80074aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689a      	ldr	r2, [r3, #8]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4938      	ldr	r1, [pc, #224]	@ (8007598 <HAL_I2C_Init+0x140>)
 80074b8:	400a      	ands	r2, r1
 80074ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d108      	bne.n	80074d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2180      	movs	r1, #128	@ 0x80
 80074ce:	0209      	lsls	r1, r1, #8
 80074d0:	430a      	orrs	r2, r1
 80074d2:	609a      	str	r2, [r3, #8]
 80074d4:	e007      	b.n	80074e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	689a      	ldr	r2, [r3, #8]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2184      	movs	r1, #132	@ 0x84
 80074e0:	0209      	lsls	r1, r1, #8
 80074e2:	430a      	orrs	r2, r1
 80074e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d109      	bne.n	8007502 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2180      	movs	r1, #128	@ 0x80
 80074fa:	0109      	lsls	r1, r1, #4
 80074fc:	430a      	orrs	r2, r1
 80074fe:	605a      	str	r2, [r3, #4]
 8007500:	e007      	b.n	8007512 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4923      	ldr	r1, [pc, #140]	@ (800759c <HAL_I2C_Init+0x144>)
 800750e:	400a      	ands	r2, r1
 8007510:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4920      	ldr	r1, [pc, #128]	@ (80075a0 <HAL_I2C_Init+0x148>)
 800751e:	430a      	orrs	r2, r1
 8007520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	491a      	ldr	r1, [pc, #104]	@ (8007598 <HAL_I2C_Init+0x140>)
 800752e:	400a      	ands	r2, r1
 8007530:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	431a      	orrs	r2, r3
 800753c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69d9      	ldr	r1, [r3, #28]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6a1a      	ldr	r2, [r3, #32]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	430a      	orrs	r2, r1
 800755a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2101      	movs	r1, #1
 8007568:	430a      	orrs	r2, r1
 800756a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2241      	movs	r2, #65	@ 0x41
 8007576:	2120      	movs	r1, #32
 8007578:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2242      	movs	r2, #66	@ 0x42
 8007584:	2100      	movs	r1, #0
 8007586:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	0018      	movs	r0, r3
 800758c:	46bd      	mov	sp, r7
 800758e:	b002      	add	sp, #8
 8007590:	bd80      	pop	{r7, pc}
 8007592:	46c0      	nop			@ (mov r8, r8)
 8007594:	f0ffffff 	.word	0xf0ffffff
 8007598:	ffff7fff 	.word	0xffff7fff
 800759c:	fffff7ff 	.word	0xfffff7ff
 80075a0:	02008000 	.word	0x02008000

080075a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075a4:	b590      	push	{r4, r7, lr}
 80075a6:	b089      	sub	sp, #36	@ 0x24
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	000c      	movs	r4, r1
 80075ae:	0010      	movs	r0, r2
 80075b0:	0019      	movs	r1, r3
 80075b2:	230a      	movs	r3, #10
 80075b4:	18fb      	adds	r3, r7, r3
 80075b6:	1c22      	adds	r2, r4, #0
 80075b8:	801a      	strh	r2, [r3, #0]
 80075ba:	2308      	movs	r3, #8
 80075bc:	18fb      	adds	r3, r7, r3
 80075be:	1c02      	adds	r2, r0, #0
 80075c0:	801a      	strh	r2, [r3, #0]
 80075c2:	1dbb      	adds	r3, r7, #6
 80075c4:	1c0a      	adds	r2, r1, #0
 80075c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2241      	movs	r2, #65	@ 0x41
 80075cc:	5c9b      	ldrb	r3, [r3, r2]
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b20      	cmp	r3, #32
 80075d2:	d000      	beq.n	80075d6 <HAL_I2C_Mem_Write+0x32>
 80075d4:	e10c      	b.n	80077f0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80075d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d004      	beq.n	80075e6 <HAL_I2C_Mem_Write+0x42>
 80075dc:	232c      	movs	r3, #44	@ 0x2c
 80075de:	18fb      	adds	r3, r7, r3
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d105      	bne.n	80075f2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2280      	movs	r2, #128	@ 0x80
 80075ea:	0092      	lsls	r2, r2, #2
 80075ec:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e0ff      	b.n	80077f2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2240      	movs	r2, #64	@ 0x40
 80075f6:	5c9b      	ldrb	r3, [r3, r2]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_I2C_Mem_Write+0x5c>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e0f8      	b.n	80077f2 <HAL_I2C_Mem_Write+0x24e>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2240      	movs	r2, #64	@ 0x40
 8007604:	2101      	movs	r1, #1
 8007606:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007608:	f7ff fcc2 	bl	8006f90 <HAL_GetTick>
 800760c:	0003      	movs	r3, r0
 800760e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007610:	2380      	movs	r3, #128	@ 0x80
 8007612:	0219      	lsls	r1, r3, #8
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	2319      	movs	r3, #25
 800761c:	2201      	movs	r2, #1
 800761e:	f000 fb0b 	bl	8007c38 <I2C_WaitOnFlagUntilTimeout>
 8007622:	1e03      	subs	r3, r0, #0
 8007624:	d001      	beq.n	800762a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e0e3      	b.n	80077f2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2241      	movs	r2, #65	@ 0x41
 800762e:	2121      	movs	r1, #33	@ 0x21
 8007630:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2242      	movs	r2, #66	@ 0x42
 8007636:	2140      	movs	r1, #64	@ 0x40
 8007638:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007644:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	222c      	movs	r2, #44	@ 0x2c
 800764a:	18ba      	adds	r2, r7, r2
 800764c:	8812      	ldrh	r2, [r2, #0]
 800764e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007656:	1dbb      	adds	r3, r7, #6
 8007658:	881c      	ldrh	r4, [r3, #0]
 800765a:	2308      	movs	r3, #8
 800765c:	18fb      	adds	r3, r7, r3
 800765e:	881a      	ldrh	r2, [r3, #0]
 8007660:	230a      	movs	r3, #10
 8007662:	18fb      	adds	r3, r7, r3
 8007664:	8819      	ldrh	r1, [r3, #0]
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	0023      	movs	r3, r4
 8007672:	f000 f9f9 	bl	8007a68 <I2C_RequestMemoryWrite>
 8007676:	1e03      	subs	r3, r0, #0
 8007678:	d005      	beq.n	8007686 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2240      	movs	r2, #64	@ 0x40
 800767e:	2100      	movs	r1, #0
 8007680:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e0b5      	b.n	80077f2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800768a:	b29b      	uxth	r3, r3
 800768c:	2bff      	cmp	r3, #255	@ 0xff
 800768e:	d911      	bls.n	80076b4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	22ff      	movs	r2, #255	@ 0xff
 8007694:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800769a:	b2da      	uxtb	r2, r3
 800769c:	2380      	movs	r3, #128	@ 0x80
 800769e:	045c      	lsls	r4, r3, #17
 80076a0:	230a      	movs	r3, #10
 80076a2:	18fb      	adds	r3, r7, r3
 80076a4:	8819      	ldrh	r1, [r3, #0]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	2300      	movs	r3, #0
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	0023      	movs	r3, r4
 80076ae:	f000 fc9d 	bl	8007fec <I2C_TransferConfig>
 80076b2:	e012      	b.n	80076da <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	2380      	movs	r3, #128	@ 0x80
 80076c6:	049c      	lsls	r4, r3, #18
 80076c8:	230a      	movs	r3, #10
 80076ca:	18fb      	adds	r3, r7, r3
 80076cc:	8819      	ldrh	r1, [r3, #0]
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	2300      	movs	r3, #0
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	0023      	movs	r3, r4
 80076d6:	f000 fc89 	bl	8007fec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	0018      	movs	r0, r3
 80076e2:	f000 fb01 	bl	8007ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 80076e6:	1e03      	subs	r3, r0, #0
 80076e8:	d001      	beq.n	80076ee <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e081      	b.n	80077f2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076f2:	781a      	ldrb	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007716:	3b01      	subs	r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d03a      	beq.n	800779e <HAL_I2C_Mem_Write+0x1fa>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800772c:	2b00      	cmp	r3, #0
 800772e:	d136      	bne.n	800779e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007730:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	0013      	movs	r3, r2
 800773a:	2200      	movs	r2, #0
 800773c:	2180      	movs	r1, #128	@ 0x80
 800773e:	f000 fa7b 	bl	8007c38 <I2C_WaitOnFlagUntilTimeout>
 8007742:	1e03      	subs	r3, r0, #0
 8007744:	d001      	beq.n	800774a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e053      	b.n	80077f2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800774e:	b29b      	uxth	r3, r3
 8007750:	2bff      	cmp	r3, #255	@ 0xff
 8007752:	d911      	bls.n	8007778 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	22ff      	movs	r2, #255	@ 0xff
 8007758:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800775e:	b2da      	uxtb	r2, r3
 8007760:	2380      	movs	r3, #128	@ 0x80
 8007762:	045c      	lsls	r4, r3, #17
 8007764:	230a      	movs	r3, #10
 8007766:	18fb      	adds	r3, r7, r3
 8007768:	8819      	ldrh	r1, [r3, #0]
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	2300      	movs	r3, #0
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	0023      	movs	r3, r4
 8007772:	f000 fc3b 	bl	8007fec <I2C_TransferConfig>
 8007776:	e012      	b.n	800779e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007786:	b2da      	uxtb	r2, r3
 8007788:	2380      	movs	r3, #128	@ 0x80
 800778a:	049c      	lsls	r4, r3, #18
 800778c:	230a      	movs	r3, #10
 800778e:	18fb      	adds	r3, r7, r3
 8007790:	8819      	ldrh	r1, [r3, #0]
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	2300      	movs	r3, #0
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	0023      	movs	r3, r4
 800779a:	f000 fc27 	bl	8007fec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d198      	bne.n	80076da <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	0018      	movs	r0, r3
 80077b0:	f000 fae0 	bl	8007d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 80077b4:	1e03      	subs	r3, r0, #0
 80077b6:	d001      	beq.n	80077bc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e01a      	b.n	80077f2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2220      	movs	r2, #32
 80077c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	490b      	ldr	r1, [pc, #44]	@ (80077fc <HAL_I2C_Mem_Write+0x258>)
 80077d0:	400a      	ands	r2, r1
 80077d2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2241      	movs	r2, #65	@ 0x41
 80077d8:	2120      	movs	r1, #32
 80077da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2242      	movs	r2, #66	@ 0x42
 80077e0:	2100      	movs	r1, #0
 80077e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2240      	movs	r2, #64	@ 0x40
 80077e8:	2100      	movs	r1, #0
 80077ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	e000      	b.n	80077f2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80077f0:	2302      	movs	r3, #2
  }
}
 80077f2:	0018      	movs	r0, r3
 80077f4:	46bd      	mov	sp, r7
 80077f6:	b007      	add	sp, #28
 80077f8:	bd90      	pop	{r4, r7, pc}
 80077fa:	46c0      	nop			@ (mov r8, r8)
 80077fc:	fe00e800 	.word	0xfe00e800

08007800 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007800:	b590      	push	{r4, r7, lr}
 8007802:	b089      	sub	sp, #36	@ 0x24
 8007804:	af02      	add	r7, sp, #8
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	000c      	movs	r4, r1
 800780a:	0010      	movs	r0, r2
 800780c:	0019      	movs	r1, r3
 800780e:	230a      	movs	r3, #10
 8007810:	18fb      	adds	r3, r7, r3
 8007812:	1c22      	adds	r2, r4, #0
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	2308      	movs	r3, #8
 8007818:	18fb      	adds	r3, r7, r3
 800781a:	1c02      	adds	r2, r0, #0
 800781c:	801a      	strh	r2, [r3, #0]
 800781e:	1dbb      	adds	r3, r7, #6
 8007820:	1c0a      	adds	r2, r1, #0
 8007822:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2241      	movs	r2, #65	@ 0x41
 8007828:	5c9b      	ldrb	r3, [r3, r2]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b20      	cmp	r3, #32
 800782e:	d000      	beq.n	8007832 <HAL_I2C_Mem_Read+0x32>
 8007830:	e110      	b.n	8007a54 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8007832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007834:	2b00      	cmp	r3, #0
 8007836:	d004      	beq.n	8007842 <HAL_I2C_Mem_Read+0x42>
 8007838:	232c      	movs	r3, #44	@ 0x2c
 800783a:	18fb      	adds	r3, r7, r3
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d105      	bne.n	800784e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2280      	movs	r2, #128	@ 0x80
 8007846:	0092      	lsls	r2, r2, #2
 8007848:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e103      	b.n	8007a56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2240      	movs	r2, #64	@ 0x40
 8007852:	5c9b      	ldrb	r3, [r3, r2]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d101      	bne.n	800785c <HAL_I2C_Mem_Read+0x5c>
 8007858:	2302      	movs	r3, #2
 800785a:	e0fc      	b.n	8007a56 <HAL_I2C_Mem_Read+0x256>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2240      	movs	r2, #64	@ 0x40
 8007860:	2101      	movs	r1, #1
 8007862:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007864:	f7ff fb94 	bl	8006f90 <HAL_GetTick>
 8007868:	0003      	movs	r3, r0
 800786a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800786c:	2380      	movs	r3, #128	@ 0x80
 800786e:	0219      	lsls	r1, r3, #8
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	2319      	movs	r3, #25
 8007878:	2201      	movs	r2, #1
 800787a:	f000 f9dd 	bl	8007c38 <I2C_WaitOnFlagUntilTimeout>
 800787e:	1e03      	subs	r3, r0, #0
 8007880:	d001      	beq.n	8007886 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e0e7      	b.n	8007a56 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2241      	movs	r2, #65	@ 0x41
 800788a:	2122      	movs	r1, #34	@ 0x22
 800788c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2242      	movs	r2, #66	@ 0x42
 8007892:	2140      	movs	r1, #64	@ 0x40
 8007894:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	222c      	movs	r2, #44	@ 0x2c
 80078a6:	18ba      	adds	r2, r7, r2
 80078a8:	8812      	ldrh	r2, [r2, #0]
 80078aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80078b2:	1dbb      	adds	r3, r7, #6
 80078b4:	881c      	ldrh	r4, [r3, #0]
 80078b6:	2308      	movs	r3, #8
 80078b8:	18fb      	adds	r3, r7, r3
 80078ba:	881a      	ldrh	r2, [r3, #0]
 80078bc:	230a      	movs	r3, #10
 80078be:	18fb      	adds	r3, r7, r3
 80078c0:	8819      	ldrh	r1, [r3, #0]
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	0023      	movs	r3, r4
 80078ce:	f000 f92f 	bl	8007b30 <I2C_RequestMemoryRead>
 80078d2:	1e03      	subs	r3, r0, #0
 80078d4:	d005      	beq.n	80078e2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2240      	movs	r2, #64	@ 0x40
 80078da:	2100      	movs	r1, #0
 80078dc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e0b9      	b.n	8007a56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2bff      	cmp	r3, #255	@ 0xff
 80078ea:	d911      	bls.n	8007910 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	22ff      	movs	r2, #255	@ 0xff
 80078f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	2380      	movs	r3, #128	@ 0x80
 80078fa:	045c      	lsls	r4, r3, #17
 80078fc:	230a      	movs	r3, #10
 80078fe:	18fb      	adds	r3, r7, r3
 8007900:	8819      	ldrh	r1, [r3, #0]
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	4b56      	ldr	r3, [pc, #344]	@ (8007a60 <HAL_I2C_Mem_Read+0x260>)
 8007906:	9300      	str	r3, [sp, #0]
 8007908:	0023      	movs	r3, r4
 800790a:	f000 fb6f 	bl	8007fec <I2C_TransferConfig>
 800790e:	e012      	b.n	8007936 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800791e:	b2da      	uxtb	r2, r3
 8007920:	2380      	movs	r3, #128	@ 0x80
 8007922:	049c      	lsls	r4, r3, #18
 8007924:	230a      	movs	r3, #10
 8007926:	18fb      	adds	r3, r7, r3
 8007928:	8819      	ldrh	r1, [r3, #0]
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	4b4c      	ldr	r3, [pc, #304]	@ (8007a60 <HAL_I2C_Mem_Read+0x260>)
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	0023      	movs	r3, r4
 8007932:	f000 fb5b 	bl	8007fec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	0013      	movs	r3, r2
 8007940:	2200      	movs	r2, #0
 8007942:	2104      	movs	r1, #4
 8007944:	f000 f978 	bl	8007c38 <I2C_WaitOnFlagUntilTimeout>
 8007948:	1e03      	subs	r3, r0, #0
 800794a:	d001      	beq.n	8007950 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e082      	b.n	8007a56 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795a:	b2d2      	uxtb	r2, r2
 800795c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800796c:	3b01      	subs	r3, #1
 800796e:	b29a      	uxth	r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007978:	b29b      	uxth	r3, r3
 800797a:	3b01      	subs	r3, #1
 800797c:	b29a      	uxth	r2, r3
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007986:	b29b      	uxth	r3, r3
 8007988:	2b00      	cmp	r3, #0
 800798a:	d03a      	beq.n	8007a02 <HAL_I2C_Mem_Read+0x202>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007990:	2b00      	cmp	r3, #0
 8007992:	d136      	bne.n	8007a02 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	0013      	movs	r3, r2
 800799e:	2200      	movs	r2, #0
 80079a0:	2180      	movs	r1, #128	@ 0x80
 80079a2:	f000 f949 	bl	8007c38 <I2C_WaitOnFlagUntilTimeout>
 80079a6:	1e03      	subs	r3, r0, #0
 80079a8:	d001      	beq.n	80079ae <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e053      	b.n	8007a56 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2bff      	cmp	r3, #255	@ 0xff
 80079b6:	d911      	bls.n	80079dc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	22ff      	movs	r2, #255	@ 0xff
 80079bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	2380      	movs	r3, #128	@ 0x80
 80079c6:	045c      	lsls	r4, r3, #17
 80079c8:	230a      	movs	r3, #10
 80079ca:	18fb      	adds	r3, r7, r3
 80079cc:	8819      	ldrh	r1, [r3, #0]
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	2300      	movs	r3, #0
 80079d2:	9300      	str	r3, [sp, #0]
 80079d4:	0023      	movs	r3, r4
 80079d6:	f000 fb09 	bl	8007fec <I2C_TransferConfig>
 80079da:	e012      	b.n	8007a02 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	2380      	movs	r3, #128	@ 0x80
 80079ee:	049c      	lsls	r4, r3, #18
 80079f0:	230a      	movs	r3, #10
 80079f2:	18fb      	adds	r3, r7, r3
 80079f4:	8819      	ldrh	r1, [r3, #0]
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	2300      	movs	r3, #0
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	0023      	movs	r3, r4
 80079fe:	f000 faf5 	bl	8007fec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a06:	b29b      	uxth	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d194      	bne.n	8007936 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	0018      	movs	r0, r3
 8007a14:	f000 f9ae 	bl	8007d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007a18:	1e03      	subs	r3, r0, #0
 8007a1a:	d001      	beq.n	8007a20 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e01a      	b.n	8007a56 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2220      	movs	r2, #32
 8007a26:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	490c      	ldr	r1, [pc, #48]	@ (8007a64 <HAL_I2C_Mem_Read+0x264>)
 8007a34:	400a      	ands	r2, r1
 8007a36:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2241      	movs	r2, #65	@ 0x41
 8007a3c:	2120      	movs	r1, #32
 8007a3e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2242      	movs	r2, #66	@ 0x42
 8007a44:	2100      	movs	r1, #0
 8007a46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2240      	movs	r2, #64	@ 0x40
 8007a4c:	2100      	movs	r1, #0
 8007a4e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	e000      	b.n	8007a56 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8007a54:	2302      	movs	r3, #2
  }
}
 8007a56:	0018      	movs	r0, r3
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	b007      	add	sp, #28
 8007a5c:	bd90      	pop	{r4, r7, pc}
 8007a5e:	46c0      	nop			@ (mov r8, r8)
 8007a60:	80002400 	.word	0x80002400
 8007a64:	fe00e800 	.word	0xfe00e800

08007a68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007a68:	b5b0      	push	{r4, r5, r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	000c      	movs	r4, r1
 8007a72:	0010      	movs	r0, r2
 8007a74:	0019      	movs	r1, r3
 8007a76:	250a      	movs	r5, #10
 8007a78:	197b      	adds	r3, r7, r5
 8007a7a:	1c22      	adds	r2, r4, #0
 8007a7c:	801a      	strh	r2, [r3, #0]
 8007a7e:	2308      	movs	r3, #8
 8007a80:	18fb      	adds	r3, r7, r3
 8007a82:	1c02      	adds	r2, r0, #0
 8007a84:	801a      	strh	r2, [r3, #0]
 8007a86:	1dbb      	adds	r3, r7, #6
 8007a88:	1c0a      	adds	r2, r1, #0
 8007a8a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007a8c:	1dbb      	adds	r3, r7, #6
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	2380      	movs	r3, #128	@ 0x80
 8007a94:	045c      	lsls	r4, r3, #17
 8007a96:	197b      	adds	r3, r7, r5
 8007a98:	8819      	ldrh	r1, [r3, #0]
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	4b23      	ldr	r3, [pc, #140]	@ (8007b2c <I2C_RequestMemoryWrite+0xc4>)
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	0023      	movs	r3, r4
 8007aa2:	f000 faa3 	bl	8007fec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa8:	6a39      	ldr	r1, [r7, #32]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	0018      	movs	r0, r3
 8007aae:	f000 f91b 	bl	8007ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ab2:	1e03      	subs	r3, r0, #0
 8007ab4:	d001      	beq.n	8007aba <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e033      	b.n	8007b22 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007aba:	1dbb      	adds	r3, r7, #6
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d107      	bne.n	8007ad2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ac2:	2308      	movs	r3, #8
 8007ac4:	18fb      	adds	r3, r7, r3
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	629a      	str	r2, [r3, #40]	@ 0x28
 8007ad0:	e019      	b.n	8007b06 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ad2:	2308      	movs	r3, #8
 8007ad4:	18fb      	adds	r3, r7, r3
 8007ad6:	881b      	ldrh	r3, [r3, #0]
 8007ad8:	0a1b      	lsrs	r3, r3, #8
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ae6:	6a39      	ldr	r1, [r7, #32]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	0018      	movs	r0, r3
 8007aec:	f000 f8fc 	bl	8007ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007af0:	1e03      	subs	r3, r0, #0
 8007af2:	d001      	beq.n	8007af8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e014      	b.n	8007b22 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007af8:	2308      	movs	r3, #8
 8007afa:	18fb      	adds	r3, r7, r3
 8007afc:	881b      	ldrh	r3, [r3, #0]
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007b06:	6a3a      	ldr	r2, [r7, #32]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	0013      	movs	r3, r2
 8007b10:	2200      	movs	r2, #0
 8007b12:	2180      	movs	r1, #128	@ 0x80
 8007b14:	f000 f890 	bl	8007c38 <I2C_WaitOnFlagUntilTimeout>
 8007b18:	1e03      	subs	r3, r0, #0
 8007b1a:	d001      	beq.n	8007b20 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e000      	b.n	8007b22 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	0018      	movs	r0, r3
 8007b24:	46bd      	mov	sp, r7
 8007b26:	b004      	add	sp, #16
 8007b28:	bdb0      	pop	{r4, r5, r7, pc}
 8007b2a:	46c0      	nop			@ (mov r8, r8)
 8007b2c:	80002000 	.word	0x80002000

08007b30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007b30:	b5b0      	push	{r4, r5, r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af02      	add	r7, sp, #8
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	000c      	movs	r4, r1
 8007b3a:	0010      	movs	r0, r2
 8007b3c:	0019      	movs	r1, r3
 8007b3e:	250a      	movs	r5, #10
 8007b40:	197b      	adds	r3, r7, r5
 8007b42:	1c22      	adds	r2, r4, #0
 8007b44:	801a      	strh	r2, [r3, #0]
 8007b46:	2308      	movs	r3, #8
 8007b48:	18fb      	adds	r3, r7, r3
 8007b4a:	1c02      	adds	r2, r0, #0
 8007b4c:	801a      	strh	r2, [r3, #0]
 8007b4e:	1dbb      	adds	r3, r7, #6
 8007b50:	1c0a      	adds	r2, r1, #0
 8007b52:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007b54:	1dbb      	adds	r3, r7, #6
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b2da      	uxtb	r2, r3
 8007b5a:	197b      	adds	r3, r7, r5
 8007b5c:	8819      	ldrh	r1, [r3, #0]
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	4b23      	ldr	r3, [pc, #140]	@ (8007bf0 <I2C_RequestMemoryRead+0xc0>)
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	2300      	movs	r3, #0
 8007b66:	f000 fa41 	bl	8007fec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b6c:	6a39      	ldr	r1, [r7, #32]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	0018      	movs	r0, r3
 8007b72:	f000 f8b9 	bl	8007ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b76:	1e03      	subs	r3, r0, #0
 8007b78:	d001      	beq.n	8007b7e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e033      	b.n	8007be6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b7e:	1dbb      	adds	r3, r7, #6
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d107      	bne.n	8007b96 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b86:	2308      	movs	r3, #8
 8007b88:	18fb      	adds	r3, r7, r3
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b94:	e019      	b.n	8007bca <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b96:	2308      	movs	r3, #8
 8007b98:	18fb      	adds	r3, r7, r3
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	0a1b      	lsrs	r3, r3, #8
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007baa:	6a39      	ldr	r1, [r7, #32]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f000 f89a 	bl	8007ce8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bb4:	1e03      	subs	r3, r0, #0
 8007bb6:	d001      	beq.n	8007bbc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e014      	b.n	8007be6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	18fb      	adds	r3, r7, r3
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007bca:	6a3a      	ldr	r2, [r7, #32]
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	9300      	str	r3, [sp, #0]
 8007bd2:	0013      	movs	r3, r2
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	2140      	movs	r1, #64	@ 0x40
 8007bd8:	f000 f82e 	bl	8007c38 <I2C_WaitOnFlagUntilTimeout>
 8007bdc:	1e03      	subs	r3, r0, #0
 8007bde:	d001      	beq.n	8007be4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e000      	b.n	8007be6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	0018      	movs	r0, r3
 8007be8:	46bd      	mov	sp, r7
 8007bea:	b004      	add	sp, #16
 8007bec:	bdb0      	pop	{r4, r5, r7, pc}
 8007bee:	46c0      	nop			@ (mov r8, r8)
 8007bf0:	80002000 	.word	0x80002000

08007bf4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	2202      	movs	r2, #2
 8007c04:	4013      	ands	r3, r2
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d103      	bne.n	8007c12 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d007      	beq.n	8007c30 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	699a      	ldr	r2, [r3, #24]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	619a      	str	r2, [r3, #24]
  }
}
 8007c30:	46c0      	nop			@ (mov r8, r8)
 8007c32:	46bd      	mov	sp, r7
 8007c34:	b002      	add	sp, #8
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	603b      	str	r3, [r7, #0]
 8007c44:	1dfb      	adds	r3, r7, #7
 8007c46:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c48:	e03a      	b.n	8007cc0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c4a:	69ba      	ldr	r2, [r7, #24]
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	0018      	movs	r0, r3
 8007c52:	f000 f8d3 	bl	8007dfc <I2C_IsErrorOccurred>
 8007c56:	1e03      	subs	r3, r0, #0
 8007c58:	d001      	beq.n	8007c5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e040      	b.n	8007ce0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	3301      	adds	r3, #1
 8007c62:	d02d      	beq.n	8007cc0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c64:	f7ff f994 	bl	8006f90 <HAL_GetTick>
 8007c68:	0002      	movs	r2, r0
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	683a      	ldr	r2, [r7, #0]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d302      	bcc.n	8007c7a <I2C_WaitOnFlagUntilTimeout+0x42>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d122      	bne.n	8007cc0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	4013      	ands	r3, r2
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	425a      	negs	r2, r3
 8007c8a:	4153      	adcs	r3, r2
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	001a      	movs	r2, r3
 8007c90:	1dfb      	adds	r3, r7, #7
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d113      	bne.n	8007cc0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c9c:	2220      	movs	r2, #32
 8007c9e:	431a      	orrs	r2, r3
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2241      	movs	r2, #65	@ 0x41
 8007ca8:	2120      	movs	r1, #32
 8007caa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2242      	movs	r2, #66	@ 0x42
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2240      	movs	r2, #64	@ 0x40
 8007cb8:	2100      	movs	r1, #0
 8007cba:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e00f      	b.n	8007ce0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	425a      	negs	r2, r3
 8007cd0:	4153      	adcs	r3, r2
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	001a      	movs	r2, r3
 8007cd6:	1dfb      	adds	r3, r7, #7
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d0b5      	beq.n	8007c4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	0018      	movs	r0, r3
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	b004      	add	sp, #16
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007cf4:	e032      	b.n	8007d5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	68b9      	ldr	r1, [r7, #8]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f000 f87d 	bl	8007dfc <I2C_IsErrorOccurred>
 8007d02:	1e03      	subs	r3, r0, #0
 8007d04:	d001      	beq.n	8007d0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e030      	b.n	8007d6c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	d025      	beq.n	8007d5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d10:	f7ff f93e 	bl	8006f90 <HAL_GetTick>
 8007d14:	0002      	movs	r2, r0
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d302      	bcc.n	8007d26 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d11a      	bne.n	8007d5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	4013      	ands	r3, r2
 8007d30:	2b02      	cmp	r3, #2
 8007d32:	d013      	beq.n	8007d5c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d38:	2220      	movs	r2, #32
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2241      	movs	r2, #65	@ 0x41
 8007d44:	2120      	movs	r1, #32
 8007d46:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2242      	movs	r2, #66	@ 0x42
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2240      	movs	r2, #64	@ 0x40
 8007d54:	2100      	movs	r1, #0
 8007d56:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e007      	b.n	8007d6c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	2202      	movs	r2, #2
 8007d64:	4013      	ands	r3, r2
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d1c5      	bne.n	8007cf6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	0018      	movs	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	b004      	add	sp, #16
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d80:	e02f      	b.n	8007de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f000 f837 	bl	8007dfc <I2C_IsErrorOccurred>
 8007d8e:	1e03      	subs	r3, r0, #0
 8007d90:	d001      	beq.n	8007d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e02d      	b.n	8007df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d96:	f7ff f8fb 	bl	8006f90 <HAL_GetTick>
 8007d9a:	0002      	movs	r2, r0
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d302      	bcc.n	8007dac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d11a      	bne.n	8007de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	2220      	movs	r2, #32
 8007db4:	4013      	ands	r3, r2
 8007db6:	2b20      	cmp	r3, #32
 8007db8:	d013      	beq.n	8007de2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dbe:	2220      	movs	r2, #32
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2241      	movs	r2, #65	@ 0x41
 8007dca:	2120      	movs	r1, #32
 8007dcc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2242      	movs	r2, #66	@ 0x42
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2240      	movs	r2, #64	@ 0x40
 8007dda:	2100      	movs	r1, #0
 8007ddc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	e007      	b.n	8007df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	699b      	ldr	r3, [r3, #24]
 8007de8:	2220      	movs	r2, #32
 8007dea:	4013      	ands	r3, r2
 8007dec:	2b20      	cmp	r3, #32
 8007dee:	d1c8      	bne.n	8007d82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	0018      	movs	r0, r3
 8007df4:	46bd      	mov	sp, r7
 8007df6:	b004      	add	sp, #16
 8007df8:	bd80      	pop	{r7, pc}
	...

08007dfc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08a      	sub	sp, #40	@ 0x28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e08:	2327      	movs	r3, #39	@ 0x27
 8007e0a:	18fb      	adds	r3, r7, r3
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	2210      	movs	r2, #16
 8007e24:	4013      	ands	r3, r2
 8007e26:	d100      	bne.n	8007e2a <I2C_IsErrorOccurred+0x2e>
 8007e28:	e079      	b.n	8007f1e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2210      	movs	r2, #16
 8007e30:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e32:	e057      	b.n	8007ee4 <I2C_IsErrorOccurred+0xe8>
 8007e34:	2227      	movs	r2, #39	@ 0x27
 8007e36:	18bb      	adds	r3, r7, r2
 8007e38:	18ba      	adds	r2, r7, r2
 8007e3a:	7812      	ldrb	r2, [r2, #0]
 8007e3c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	3301      	adds	r3, #1
 8007e42:	d04f      	beq.n	8007ee4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007e44:	f7ff f8a4 	bl	8006f90 <HAL_GetTick>
 8007e48:	0002      	movs	r2, r0
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d302      	bcc.n	8007e5a <I2C_IsErrorOccurred+0x5e>
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d144      	bne.n	8007ee4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	2380      	movs	r3, #128	@ 0x80
 8007e62:	01db      	lsls	r3, r3, #7
 8007e64:	4013      	ands	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007e68:	2013      	movs	r0, #19
 8007e6a:	183b      	adds	r3, r7, r0
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	2142      	movs	r1, #66	@ 0x42
 8007e70:	5c52      	ldrb	r2, [r2, r1]
 8007e72:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	2380      	movs	r3, #128	@ 0x80
 8007e7c:	021b      	lsls	r3, r3, #8
 8007e7e:	401a      	ands	r2, r3
 8007e80:	2380      	movs	r3, #128	@ 0x80
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d126      	bne.n	8007ed6 <I2C_IsErrorOccurred+0xda>
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	2380      	movs	r3, #128	@ 0x80
 8007e8c:	01db      	lsls	r3, r3, #7
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d021      	beq.n	8007ed6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8007e92:	183b      	adds	r3, r7, r0
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	d01d      	beq.n	8007ed6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2180      	movs	r1, #128	@ 0x80
 8007ea6:	01c9      	lsls	r1, r1, #7
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007eac:	f7ff f870 	bl	8006f90 <HAL_GetTick>
 8007eb0:	0003      	movs	r3, r0
 8007eb2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007eb4:	e00f      	b.n	8007ed6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007eb6:	f7ff f86b 	bl	8006f90 <HAL_GetTick>
 8007eba:	0002      	movs	r2, r0
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	2b19      	cmp	r3, #25
 8007ec2:	d908      	bls.n	8007ed6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007ecc:	2327      	movs	r3, #39	@ 0x27
 8007ece:	18fb      	adds	r3, r7, r3
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	701a      	strb	r2, [r3, #0]

              break;
 8007ed4:	e006      	b.n	8007ee4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	2220      	movs	r2, #32
 8007ede:	4013      	ands	r3, r2
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	d1e8      	bne.n	8007eb6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	2220      	movs	r2, #32
 8007eec:	4013      	ands	r3, r2
 8007eee:	2b20      	cmp	r3, #32
 8007ef0:	d004      	beq.n	8007efc <I2C_IsErrorOccurred+0x100>
 8007ef2:	2327      	movs	r3, #39	@ 0x27
 8007ef4:	18fb      	adds	r3, r7, r3
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d09b      	beq.n	8007e34 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007efc:	2327      	movs	r3, #39	@ 0x27
 8007efe:	18fb      	adds	r3, r7, r3
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d103      	bne.n	8007f0e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	2204      	movs	r2, #4
 8007f12:	4313      	orrs	r3, r2
 8007f14:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007f16:	2327      	movs	r3, #39	@ 0x27
 8007f18:	18fb      	adds	r3, r7, r3
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	2380      	movs	r3, #128	@ 0x80
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	d00c      	beq.n	8007f4a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	2201      	movs	r2, #1
 8007f34:	4313      	orrs	r3, r2
 8007f36:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2280      	movs	r2, #128	@ 0x80
 8007f3e:	0052      	lsls	r2, r2, #1
 8007f40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f42:	2327      	movs	r3, #39	@ 0x27
 8007f44:	18fb      	adds	r3, r7, r3
 8007f46:	2201      	movs	r2, #1
 8007f48:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	2380      	movs	r3, #128	@ 0x80
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	4013      	ands	r3, r2
 8007f52:	d00c      	beq.n	8007f6e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007f54:	6a3b      	ldr	r3, [r7, #32]
 8007f56:	2208      	movs	r2, #8
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2280      	movs	r2, #128	@ 0x80
 8007f62:	00d2      	lsls	r2, r2, #3
 8007f64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f66:	2327      	movs	r3, #39	@ 0x27
 8007f68:	18fb      	adds	r3, r7, r3
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	2380      	movs	r3, #128	@ 0x80
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4013      	ands	r3, r2
 8007f76:	d00c      	beq.n	8007f92 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2280      	movs	r2, #128	@ 0x80
 8007f86:	0092      	lsls	r2, r2, #2
 8007f88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f8a:	2327      	movs	r3, #39	@ 0x27
 8007f8c:	18fb      	adds	r3, r7, r3
 8007f8e:	2201      	movs	r2, #1
 8007f90:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007f92:	2327      	movs	r3, #39	@ 0x27
 8007f94:	18fb      	adds	r3, r7, r3
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d01d      	beq.n	8007fd8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	0018      	movs	r0, r3
 8007fa0:	f7ff fe28 	bl	8007bf4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685a      	ldr	r2, [r3, #4]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	490e      	ldr	r1, [pc, #56]	@ (8007fe8 <I2C_IsErrorOccurred+0x1ec>)
 8007fb0:	400a      	ands	r2, r1
 8007fb2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fb8:	6a3b      	ldr	r3, [r7, #32]
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2241      	movs	r2, #65	@ 0x41
 8007fc4:	2120      	movs	r1, #32
 8007fc6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2242      	movs	r2, #66	@ 0x42
 8007fcc:	2100      	movs	r1, #0
 8007fce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2240      	movs	r2, #64	@ 0x40
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007fd8:	2327      	movs	r3, #39	@ 0x27
 8007fda:	18fb      	adds	r3, r7, r3
 8007fdc:	781b      	ldrb	r3, [r3, #0]
}
 8007fde:	0018      	movs	r0, r3
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	b00a      	add	sp, #40	@ 0x28
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	46c0      	nop			@ (mov r8, r8)
 8007fe8:	fe00e800 	.word	0xfe00e800

08007fec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007fec:	b590      	push	{r4, r7, lr}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	0008      	movs	r0, r1
 8007ff6:	0011      	movs	r1, r2
 8007ff8:	607b      	str	r3, [r7, #4]
 8007ffa:	240a      	movs	r4, #10
 8007ffc:	193b      	adds	r3, r7, r4
 8007ffe:	1c02      	adds	r2, r0, #0
 8008000:	801a      	strh	r2, [r3, #0]
 8008002:	2009      	movs	r0, #9
 8008004:	183b      	adds	r3, r7, r0
 8008006:	1c0a      	adds	r2, r1, #0
 8008008:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800800a:	193b      	adds	r3, r7, r4
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	059b      	lsls	r3, r3, #22
 8008010:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008012:	183b      	adds	r3, r7, r0
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	0419      	lsls	r1, r3, #16
 8008018:	23ff      	movs	r3, #255	@ 0xff
 800801a:	041b      	lsls	r3, r3, #16
 800801c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800801e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008026:	4313      	orrs	r3, r2
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	085b      	lsrs	r3, r3, #1
 800802c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008036:	0d51      	lsrs	r1, r2, #21
 8008038:	2280      	movs	r2, #128	@ 0x80
 800803a:	00d2      	lsls	r2, r2, #3
 800803c:	400a      	ands	r2, r1
 800803e:	4907      	ldr	r1, [pc, #28]	@ (800805c <I2C_TransferConfig+0x70>)
 8008040:	430a      	orrs	r2, r1
 8008042:	43d2      	mvns	r2, r2
 8008044:	401a      	ands	r2, r3
 8008046:	0011      	movs	r1, r2
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	430a      	orrs	r2, r1
 8008050:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008052:	46c0      	nop			@ (mov r8, r8)
 8008054:	46bd      	mov	sp, r7
 8008056:	b007      	add	sp, #28
 8008058:	bd90      	pop	{r4, r7, pc}
 800805a:	46c0      	nop			@ (mov r8, r8)
 800805c:	03ff63ff 	.word	0x03ff63ff

08008060 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2241      	movs	r2, #65	@ 0x41
 800806e:	5c9b      	ldrb	r3, [r3, r2]
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b20      	cmp	r3, #32
 8008074:	d138      	bne.n	80080e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2240      	movs	r2, #64	@ 0x40
 800807a:	5c9b      	ldrb	r3, [r3, r2]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d101      	bne.n	8008084 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008080:	2302      	movs	r3, #2
 8008082:	e032      	b.n	80080ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2240      	movs	r2, #64	@ 0x40
 8008088:	2101      	movs	r1, #1
 800808a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2241      	movs	r2, #65	@ 0x41
 8008090:	2124      	movs	r1, #36	@ 0x24
 8008092:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2101      	movs	r1, #1
 80080a0:	438a      	bics	r2, r1
 80080a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4911      	ldr	r1, [pc, #68]	@ (80080f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80080b0:	400a      	ands	r2, r1
 80080b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6819      	ldr	r1, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	430a      	orrs	r2, r1
 80080c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2101      	movs	r1, #1
 80080d0:	430a      	orrs	r2, r1
 80080d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2241      	movs	r2, #65	@ 0x41
 80080d8:	2120      	movs	r1, #32
 80080da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2240      	movs	r2, #64	@ 0x40
 80080e0:	2100      	movs	r1, #0
 80080e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	e000      	b.n	80080ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080e8:	2302      	movs	r3, #2
  }
}
 80080ea:	0018      	movs	r0, r3
 80080ec:	46bd      	mov	sp, r7
 80080ee:	b002      	add	sp, #8
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	46c0      	nop			@ (mov r8, r8)
 80080f4:	ffffefff 	.word	0xffffefff

080080f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2241      	movs	r2, #65	@ 0x41
 8008106:	5c9b      	ldrb	r3, [r3, r2]
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b20      	cmp	r3, #32
 800810c:	d139      	bne.n	8008182 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2240      	movs	r2, #64	@ 0x40
 8008112:	5c9b      	ldrb	r3, [r3, r2]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008118:	2302      	movs	r3, #2
 800811a:	e033      	b.n	8008184 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2240      	movs	r2, #64	@ 0x40
 8008120:	2101      	movs	r1, #1
 8008122:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2241      	movs	r2, #65	@ 0x41
 8008128:	2124      	movs	r1, #36	@ 0x24
 800812a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2101      	movs	r1, #1
 8008138:	438a      	bics	r2, r1
 800813a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	4a11      	ldr	r2, [pc, #68]	@ (800818c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008148:	4013      	ands	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2101      	movs	r1, #1
 800816a:	430a      	orrs	r2, r1
 800816c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2241      	movs	r2, #65	@ 0x41
 8008172:	2120      	movs	r1, #32
 8008174:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2240      	movs	r2, #64	@ 0x40
 800817a:	2100      	movs	r1, #0
 800817c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	e000      	b.n	8008184 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008182:	2302      	movs	r3, #2
  }
}
 8008184:	0018      	movs	r0, r3
 8008186:	46bd      	mov	sp, r7
 8008188:	b004      	add	sp, #16
 800818a:	bd80      	pop	{r7, pc}
 800818c:	fffff0ff 	.word	0xfffff0ff

08008190 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008198:	4b19      	ldr	r3, [pc, #100]	@ (8008200 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a19      	ldr	r2, [pc, #100]	@ (8008204 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800819e:	4013      	ands	r3, r2
 80081a0:	0019      	movs	r1, r3
 80081a2:	4b17      	ldr	r3, [pc, #92]	@ (8008200 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	2380      	movs	r3, #128	@ 0x80
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d11f      	bne.n	80081f4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80081b4:	4b14      	ldr	r3, [pc, #80]	@ (8008208 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	0013      	movs	r3, r2
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	189b      	adds	r3, r3, r2
 80081be:	005b      	lsls	r3, r3, #1
 80081c0:	4912      	ldr	r1, [pc, #72]	@ (800820c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80081c2:	0018      	movs	r0, r3
 80081c4:	f7f7 ffc4 	bl	8000150 <__udivsi3>
 80081c8:	0003      	movs	r3, r0
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80081ce:	e008      	b.n	80081e2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3b01      	subs	r3, #1
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	e001      	b.n	80081e2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e009      	b.n	80081f6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80081e2:	4b07      	ldr	r3, [pc, #28]	@ (8008200 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80081e4:	695a      	ldr	r2, [r3, #20]
 80081e6:	2380      	movs	r3, #128	@ 0x80
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	401a      	ands	r2, r3
 80081ec:	2380      	movs	r3, #128	@ 0x80
 80081ee:	00db      	lsls	r3, r3, #3
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d0ed      	beq.n	80081d0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	0018      	movs	r0, r3
 80081f8:	46bd      	mov	sp, r7
 80081fa:	b004      	add	sp, #16
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	46c0      	nop			@ (mov r8, r8)
 8008200:	40007000 	.word	0x40007000
 8008204:	fffff9ff 	.word	0xfffff9ff
 8008208:	20000000 	.word	0x20000000
 800820c:	000f4240 	.word	0x000f4240

08008210 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008214:	4b03      	ldr	r3, [pc, #12]	@ (8008224 <LL_RCC_GetAPB1Prescaler+0x14>)
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	23e0      	movs	r3, #224	@ 0xe0
 800821a:	01db      	lsls	r3, r3, #7
 800821c:	4013      	ands	r3, r2
}
 800821e:	0018      	movs	r0, r3
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	40021000 	.word	0x40021000

08008228 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e2fe      	b.n	8008838 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2201      	movs	r2, #1
 8008240:	4013      	ands	r3, r2
 8008242:	d100      	bne.n	8008246 <HAL_RCC_OscConfig+0x1e>
 8008244:	e07c      	b.n	8008340 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008246:	4bc3      	ldr	r3, [pc, #780]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	2238      	movs	r2, #56	@ 0x38
 800824c:	4013      	ands	r3, r2
 800824e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008250:	4bc0      	ldr	r3, [pc, #768]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	2203      	movs	r2, #3
 8008256:	4013      	ands	r3, r2
 8008258:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800825a:	69bb      	ldr	r3, [r7, #24]
 800825c:	2b10      	cmp	r3, #16
 800825e:	d102      	bne.n	8008266 <HAL_RCC_OscConfig+0x3e>
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2b03      	cmp	r3, #3
 8008264:	d002      	beq.n	800826c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	2b08      	cmp	r3, #8
 800826a:	d10b      	bne.n	8008284 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800826c:	4bb9      	ldr	r3, [pc, #740]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	2380      	movs	r3, #128	@ 0x80
 8008272:	029b      	lsls	r3, r3, #10
 8008274:	4013      	ands	r3, r2
 8008276:	d062      	beq.n	800833e <HAL_RCC_OscConfig+0x116>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d15e      	bne.n	800833e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e2d9      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	2380      	movs	r3, #128	@ 0x80
 800828a:	025b      	lsls	r3, r3, #9
 800828c:	429a      	cmp	r2, r3
 800828e:	d107      	bne.n	80082a0 <HAL_RCC_OscConfig+0x78>
 8008290:	4bb0      	ldr	r3, [pc, #704]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	4baf      	ldr	r3, [pc, #700]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008296:	2180      	movs	r1, #128	@ 0x80
 8008298:	0249      	lsls	r1, r1, #9
 800829a:	430a      	orrs	r2, r1
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	e020      	b.n	80082e2 <HAL_RCC_OscConfig+0xba>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	23a0      	movs	r3, #160	@ 0xa0
 80082a6:	02db      	lsls	r3, r3, #11
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d10e      	bne.n	80082ca <HAL_RCC_OscConfig+0xa2>
 80082ac:	4ba9      	ldr	r3, [pc, #676]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	4ba8      	ldr	r3, [pc, #672]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80082b2:	2180      	movs	r1, #128	@ 0x80
 80082b4:	02c9      	lsls	r1, r1, #11
 80082b6:	430a      	orrs	r2, r1
 80082b8:	601a      	str	r2, [r3, #0]
 80082ba:	4ba6      	ldr	r3, [pc, #664]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	4ba5      	ldr	r3, [pc, #660]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80082c0:	2180      	movs	r1, #128	@ 0x80
 80082c2:	0249      	lsls	r1, r1, #9
 80082c4:	430a      	orrs	r2, r1
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	e00b      	b.n	80082e2 <HAL_RCC_OscConfig+0xba>
 80082ca:	4ba2      	ldr	r3, [pc, #648]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	4ba1      	ldr	r3, [pc, #644]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80082d0:	49a1      	ldr	r1, [pc, #644]	@ (8008558 <HAL_RCC_OscConfig+0x330>)
 80082d2:	400a      	ands	r2, r1
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	4b9f      	ldr	r3, [pc, #636]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	4b9e      	ldr	r3, [pc, #632]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80082dc:	499f      	ldr	r1, [pc, #636]	@ (800855c <HAL_RCC_OscConfig+0x334>)
 80082de:	400a      	ands	r2, r1
 80082e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d014      	beq.n	8008314 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ea:	f7fe fe51 	bl	8006f90 <HAL_GetTick>
 80082ee:	0003      	movs	r3, r0
 80082f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80082f2:	e008      	b.n	8008306 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082f4:	f7fe fe4c 	bl	8006f90 <HAL_GetTick>
 80082f8:	0002      	movs	r2, r0
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	2b64      	cmp	r3, #100	@ 0x64
 8008300:	d901      	bls.n	8008306 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e298      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008306:	4b93      	ldr	r3, [pc, #588]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	2380      	movs	r3, #128	@ 0x80
 800830c:	029b      	lsls	r3, r3, #10
 800830e:	4013      	ands	r3, r2
 8008310:	d0f0      	beq.n	80082f4 <HAL_RCC_OscConfig+0xcc>
 8008312:	e015      	b.n	8008340 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008314:	f7fe fe3c 	bl	8006f90 <HAL_GetTick>
 8008318:	0003      	movs	r3, r0
 800831a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800831c:	e008      	b.n	8008330 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800831e:	f7fe fe37 	bl	8006f90 <HAL_GetTick>
 8008322:	0002      	movs	r2, r0
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	2b64      	cmp	r3, #100	@ 0x64
 800832a:	d901      	bls.n	8008330 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e283      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008330:	4b88      	ldr	r3, [pc, #544]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	2380      	movs	r3, #128	@ 0x80
 8008336:	029b      	lsls	r3, r3, #10
 8008338:	4013      	ands	r3, r2
 800833a:	d1f0      	bne.n	800831e <HAL_RCC_OscConfig+0xf6>
 800833c:	e000      	b.n	8008340 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800833e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2202      	movs	r2, #2
 8008346:	4013      	ands	r3, r2
 8008348:	d100      	bne.n	800834c <HAL_RCC_OscConfig+0x124>
 800834a:	e099      	b.n	8008480 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800834c:	4b81      	ldr	r3, [pc, #516]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	2238      	movs	r2, #56	@ 0x38
 8008352:	4013      	ands	r3, r2
 8008354:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008356:	4b7f      	ldr	r3, [pc, #508]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	2203      	movs	r2, #3
 800835c:	4013      	ands	r3, r2
 800835e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	2b10      	cmp	r3, #16
 8008364:	d102      	bne.n	800836c <HAL_RCC_OscConfig+0x144>
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2b02      	cmp	r3, #2
 800836a:	d002      	beq.n	8008372 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d135      	bne.n	80083de <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008372:	4b78      	ldr	r3, [pc, #480]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	2380      	movs	r3, #128	@ 0x80
 8008378:	00db      	lsls	r3, r3, #3
 800837a:	4013      	ands	r3, r2
 800837c:	d005      	beq.n	800838a <HAL_RCC_OscConfig+0x162>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e256      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800838a:	4b72      	ldr	r3, [pc, #456]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	4a74      	ldr	r2, [pc, #464]	@ (8008560 <HAL_RCC_OscConfig+0x338>)
 8008390:	4013      	ands	r3, r2
 8008392:	0019      	movs	r1, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	695b      	ldr	r3, [r3, #20]
 8008398:	021a      	lsls	r2, r3, #8
 800839a:	4b6e      	ldr	r3, [pc, #440]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 800839c:	430a      	orrs	r2, r1
 800839e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80083a0:	69bb      	ldr	r3, [r7, #24]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d112      	bne.n	80083cc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80083a6:	4b6b      	ldr	r3, [pc, #428]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a6e      	ldr	r2, [pc, #440]	@ (8008564 <HAL_RCC_OscConfig+0x33c>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	0019      	movs	r1, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691a      	ldr	r2, [r3, #16]
 80083b4:	4b67      	ldr	r3, [pc, #412]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80083b6:	430a      	orrs	r2, r1
 80083b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80083ba:	4b66      	ldr	r3, [pc, #408]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	0adb      	lsrs	r3, r3, #11
 80083c0:	2207      	movs	r2, #7
 80083c2:	4013      	ands	r3, r2
 80083c4:	4a68      	ldr	r2, [pc, #416]	@ (8008568 <HAL_RCC_OscConfig+0x340>)
 80083c6:	40da      	lsrs	r2, r3
 80083c8:	4b68      	ldr	r3, [pc, #416]	@ (800856c <HAL_RCC_OscConfig+0x344>)
 80083ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80083cc:	4b68      	ldr	r3, [pc, #416]	@ (8008570 <HAL_RCC_OscConfig+0x348>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	0018      	movs	r0, r3
 80083d2:	f7fe fd81 	bl	8006ed8 <HAL_InitTick>
 80083d6:	1e03      	subs	r3, r0, #0
 80083d8:	d051      	beq.n	800847e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e22c      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d030      	beq.n	8008448 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80083e6:	4b5b      	ldr	r3, [pc, #364]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a5e      	ldr	r2, [pc, #376]	@ (8008564 <HAL_RCC_OscConfig+0x33c>)
 80083ec:	4013      	ands	r3, r2
 80083ee:	0019      	movs	r1, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	4b57      	ldr	r3, [pc, #348]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80083f6:	430a      	orrs	r2, r1
 80083f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80083fa:	4b56      	ldr	r3, [pc, #344]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	4b55      	ldr	r3, [pc, #340]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008400:	2180      	movs	r1, #128	@ 0x80
 8008402:	0049      	lsls	r1, r1, #1
 8008404:	430a      	orrs	r2, r1
 8008406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008408:	f7fe fdc2 	bl	8006f90 <HAL_GetTick>
 800840c:	0003      	movs	r3, r0
 800840e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008410:	e008      	b.n	8008424 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008412:	f7fe fdbd 	bl	8006f90 <HAL_GetTick>
 8008416:	0002      	movs	r2, r0
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	2b02      	cmp	r3, #2
 800841e:	d901      	bls.n	8008424 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e209      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008424:	4b4b      	ldr	r3, [pc, #300]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	2380      	movs	r3, #128	@ 0x80
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	4013      	ands	r3, r2
 800842e:	d0f0      	beq.n	8008412 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008430:	4b48      	ldr	r3, [pc, #288]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	4a4a      	ldr	r2, [pc, #296]	@ (8008560 <HAL_RCC_OscConfig+0x338>)
 8008436:	4013      	ands	r3, r2
 8008438:	0019      	movs	r1, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	021a      	lsls	r2, r3, #8
 8008440:	4b44      	ldr	r3, [pc, #272]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008442:	430a      	orrs	r2, r1
 8008444:	605a      	str	r2, [r3, #4]
 8008446:	e01b      	b.n	8008480 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008448:	4b42      	ldr	r3, [pc, #264]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	4b41      	ldr	r3, [pc, #260]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 800844e:	4949      	ldr	r1, [pc, #292]	@ (8008574 <HAL_RCC_OscConfig+0x34c>)
 8008450:	400a      	ands	r2, r1
 8008452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008454:	f7fe fd9c 	bl	8006f90 <HAL_GetTick>
 8008458:	0003      	movs	r3, r0
 800845a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800845c:	e008      	b.n	8008470 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800845e:	f7fe fd97 	bl	8006f90 <HAL_GetTick>
 8008462:	0002      	movs	r2, r0
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	1ad3      	subs	r3, r2, r3
 8008468:	2b02      	cmp	r3, #2
 800846a:	d901      	bls.n	8008470 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e1e3      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008470:	4b38      	ldr	r3, [pc, #224]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	2380      	movs	r3, #128	@ 0x80
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	4013      	ands	r3, r2
 800847a:	d1f0      	bne.n	800845e <HAL_RCC_OscConfig+0x236>
 800847c:	e000      	b.n	8008480 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800847e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2208      	movs	r2, #8
 8008486:	4013      	ands	r3, r2
 8008488:	d047      	beq.n	800851a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800848a:	4b32      	ldr	r3, [pc, #200]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	2238      	movs	r2, #56	@ 0x38
 8008490:	4013      	ands	r3, r2
 8008492:	2b18      	cmp	r3, #24
 8008494:	d10a      	bne.n	80084ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008496:	4b2f      	ldr	r3, [pc, #188]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800849a:	2202      	movs	r2, #2
 800849c:	4013      	ands	r3, r2
 800849e:	d03c      	beq.n	800851a <HAL_RCC_OscConfig+0x2f2>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d138      	bne.n	800851a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e1c5      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d019      	beq.n	80084e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80084b4:	4b27      	ldr	r3, [pc, #156]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80084b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80084b8:	4b26      	ldr	r3, [pc, #152]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80084ba:	2101      	movs	r1, #1
 80084bc:	430a      	orrs	r2, r1
 80084be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c0:	f7fe fd66 	bl	8006f90 <HAL_GetTick>
 80084c4:	0003      	movs	r3, r0
 80084c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084c8:	e008      	b.n	80084dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084ca:	f7fe fd61 	bl	8006f90 <HAL_GetTick>
 80084ce:	0002      	movs	r2, r0
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d901      	bls.n	80084dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80084d8:	2303      	movs	r3, #3
 80084da:	e1ad      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80084de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084e0:	2202      	movs	r2, #2
 80084e2:	4013      	ands	r3, r2
 80084e4:	d0f1      	beq.n	80084ca <HAL_RCC_OscConfig+0x2a2>
 80084e6:	e018      	b.n	800851a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80084e8:	4b1a      	ldr	r3, [pc, #104]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80084ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80084ec:	4b19      	ldr	r3, [pc, #100]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 80084ee:	2101      	movs	r1, #1
 80084f0:	438a      	bics	r2, r1
 80084f2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f4:	f7fe fd4c 	bl	8006f90 <HAL_GetTick>
 80084f8:	0003      	movs	r3, r0
 80084fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80084fc:	e008      	b.n	8008510 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084fe:	f7fe fd47 	bl	8006f90 <HAL_GetTick>
 8008502:	0002      	movs	r2, r0
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	2b02      	cmp	r3, #2
 800850a:	d901      	bls.n	8008510 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e193      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008510:	4b10      	ldr	r3, [pc, #64]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008514:	2202      	movs	r2, #2
 8008516:	4013      	ands	r3, r2
 8008518:	d1f1      	bne.n	80084fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2204      	movs	r2, #4
 8008520:	4013      	ands	r3, r2
 8008522:	d100      	bne.n	8008526 <HAL_RCC_OscConfig+0x2fe>
 8008524:	e0c6      	b.n	80086b4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008526:	231f      	movs	r3, #31
 8008528:	18fb      	adds	r3, r7, r3
 800852a:	2200      	movs	r2, #0
 800852c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800852e:	4b09      	ldr	r3, [pc, #36]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	2238      	movs	r2, #56	@ 0x38
 8008534:	4013      	ands	r3, r2
 8008536:	2b20      	cmp	r3, #32
 8008538:	d11e      	bne.n	8008578 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800853a:	4b06      	ldr	r3, [pc, #24]	@ (8008554 <HAL_RCC_OscConfig+0x32c>)
 800853c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800853e:	2202      	movs	r2, #2
 8008540:	4013      	ands	r3, r2
 8008542:	d100      	bne.n	8008546 <HAL_RCC_OscConfig+0x31e>
 8008544:	e0b6      	b.n	80086b4 <HAL_RCC_OscConfig+0x48c>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d000      	beq.n	8008550 <HAL_RCC_OscConfig+0x328>
 800854e:	e0b1      	b.n	80086b4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e171      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
 8008554:	40021000 	.word	0x40021000
 8008558:	fffeffff 	.word	0xfffeffff
 800855c:	fffbffff 	.word	0xfffbffff
 8008560:	ffff80ff 	.word	0xffff80ff
 8008564:	ffffc7ff 	.word	0xffffc7ff
 8008568:	00f42400 	.word	0x00f42400
 800856c:	20000000 	.word	0x20000000
 8008570:	20000004 	.word	0x20000004
 8008574:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008578:	4bb1      	ldr	r3, [pc, #708]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 800857a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800857c:	2380      	movs	r3, #128	@ 0x80
 800857e:	055b      	lsls	r3, r3, #21
 8008580:	4013      	ands	r3, r2
 8008582:	d101      	bne.n	8008588 <HAL_RCC_OscConfig+0x360>
 8008584:	2301      	movs	r3, #1
 8008586:	e000      	b.n	800858a <HAL_RCC_OscConfig+0x362>
 8008588:	2300      	movs	r3, #0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d011      	beq.n	80085b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800858e:	4bac      	ldr	r3, [pc, #688]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008590:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008592:	4bab      	ldr	r3, [pc, #684]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008594:	2180      	movs	r1, #128	@ 0x80
 8008596:	0549      	lsls	r1, r1, #21
 8008598:	430a      	orrs	r2, r1
 800859a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800859c:	4ba8      	ldr	r3, [pc, #672]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 800859e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085a0:	2380      	movs	r3, #128	@ 0x80
 80085a2:	055b      	lsls	r3, r3, #21
 80085a4:	4013      	ands	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80085aa:	231f      	movs	r3, #31
 80085ac:	18fb      	adds	r3, r7, r3
 80085ae:	2201      	movs	r2, #1
 80085b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085b2:	4ba4      	ldr	r3, [pc, #656]	@ (8008844 <HAL_RCC_OscConfig+0x61c>)
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	2380      	movs	r3, #128	@ 0x80
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	4013      	ands	r3, r2
 80085bc:	d11a      	bne.n	80085f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085be:	4ba1      	ldr	r3, [pc, #644]	@ (8008844 <HAL_RCC_OscConfig+0x61c>)
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4ba0      	ldr	r3, [pc, #640]	@ (8008844 <HAL_RCC_OscConfig+0x61c>)
 80085c4:	2180      	movs	r1, #128	@ 0x80
 80085c6:	0049      	lsls	r1, r1, #1
 80085c8:	430a      	orrs	r2, r1
 80085ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80085cc:	f7fe fce0 	bl	8006f90 <HAL_GetTick>
 80085d0:	0003      	movs	r3, r0
 80085d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085d4:	e008      	b.n	80085e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085d6:	f7fe fcdb 	bl	8006f90 <HAL_GetTick>
 80085da:	0002      	movs	r2, r0
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d901      	bls.n	80085e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e127      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085e8:	4b96      	ldr	r3, [pc, #600]	@ (8008844 <HAL_RCC_OscConfig+0x61c>)
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	2380      	movs	r3, #128	@ 0x80
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	4013      	ands	r3, r2
 80085f2:	d0f0      	beq.n	80085d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d106      	bne.n	800860a <HAL_RCC_OscConfig+0x3e2>
 80085fc:	4b90      	ldr	r3, [pc, #576]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 80085fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008600:	4b8f      	ldr	r3, [pc, #572]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008602:	2101      	movs	r1, #1
 8008604:	430a      	orrs	r2, r1
 8008606:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008608:	e01c      	b.n	8008644 <HAL_RCC_OscConfig+0x41c>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	2b05      	cmp	r3, #5
 8008610:	d10c      	bne.n	800862c <HAL_RCC_OscConfig+0x404>
 8008612:	4b8b      	ldr	r3, [pc, #556]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008614:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008616:	4b8a      	ldr	r3, [pc, #552]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008618:	2104      	movs	r1, #4
 800861a:	430a      	orrs	r2, r1
 800861c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800861e:	4b88      	ldr	r3, [pc, #544]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008620:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008622:	4b87      	ldr	r3, [pc, #540]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008624:	2101      	movs	r1, #1
 8008626:	430a      	orrs	r2, r1
 8008628:	65da      	str	r2, [r3, #92]	@ 0x5c
 800862a:	e00b      	b.n	8008644 <HAL_RCC_OscConfig+0x41c>
 800862c:	4b84      	ldr	r3, [pc, #528]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 800862e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008630:	4b83      	ldr	r3, [pc, #524]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008632:	2101      	movs	r1, #1
 8008634:	438a      	bics	r2, r1
 8008636:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008638:	4b81      	ldr	r3, [pc, #516]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 800863a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800863c:	4b80      	ldr	r3, [pc, #512]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 800863e:	2104      	movs	r1, #4
 8008640:	438a      	bics	r2, r1
 8008642:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d014      	beq.n	8008676 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800864c:	f7fe fca0 	bl	8006f90 <HAL_GetTick>
 8008650:	0003      	movs	r3, r0
 8008652:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008654:	e009      	b.n	800866a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008656:	f7fe fc9b 	bl	8006f90 <HAL_GetTick>
 800865a:	0002      	movs	r2, r0
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	4a79      	ldr	r2, [pc, #484]	@ (8008848 <HAL_RCC_OscConfig+0x620>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d901      	bls.n	800866a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e0e6      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800866a:	4b75      	ldr	r3, [pc, #468]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 800866c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800866e:	2202      	movs	r2, #2
 8008670:	4013      	ands	r3, r2
 8008672:	d0f0      	beq.n	8008656 <HAL_RCC_OscConfig+0x42e>
 8008674:	e013      	b.n	800869e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008676:	f7fe fc8b 	bl	8006f90 <HAL_GetTick>
 800867a:	0003      	movs	r3, r0
 800867c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800867e:	e009      	b.n	8008694 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008680:	f7fe fc86 	bl	8006f90 <HAL_GetTick>
 8008684:	0002      	movs	r2, r0
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	4a6f      	ldr	r2, [pc, #444]	@ (8008848 <HAL_RCC_OscConfig+0x620>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d901      	bls.n	8008694 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e0d1      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008694:	4b6a      	ldr	r3, [pc, #424]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008698:	2202      	movs	r2, #2
 800869a:	4013      	ands	r3, r2
 800869c:	d1f0      	bne.n	8008680 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800869e:	231f      	movs	r3, #31
 80086a0:	18fb      	adds	r3, r7, r3
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d105      	bne.n	80086b4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80086a8:	4b65      	ldr	r3, [pc, #404]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 80086aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086ac:	4b64      	ldr	r3, [pc, #400]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 80086ae:	4967      	ldr	r1, [pc, #412]	@ (800884c <HAL_RCC_OscConfig+0x624>)
 80086b0:	400a      	ands	r2, r1
 80086b2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d100      	bne.n	80086be <HAL_RCC_OscConfig+0x496>
 80086bc:	e0bb      	b.n	8008836 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086be:	4b60      	ldr	r3, [pc, #384]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2238      	movs	r2, #56	@ 0x38
 80086c4:	4013      	ands	r3, r2
 80086c6:	2b10      	cmp	r3, #16
 80086c8:	d100      	bne.n	80086cc <HAL_RCC_OscConfig+0x4a4>
 80086ca:	e07b      	b.n	80087c4 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	69db      	ldr	r3, [r3, #28]
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d156      	bne.n	8008782 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086d4:	4b5a      	ldr	r3, [pc, #360]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	4b59      	ldr	r3, [pc, #356]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 80086da:	495d      	ldr	r1, [pc, #372]	@ (8008850 <HAL_RCC_OscConfig+0x628>)
 80086dc:	400a      	ands	r2, r1
 80086de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e0:	f7fe fc56 	bl	8006f90 <HAL_GetTick>
 80086e4:	0003      	movs	r3, r0
 80086e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086e8:	e008      	b.n	80086fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086ea:	f7fe fc51 	bl	8006f90 <HAL_GetTick>
 80086ee:	0002      	movs	r2, r0
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d901      	bls.n	80086fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e09d      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086fc:	4b50      	ldr	r3, [pc, #320]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	2380      	movs	r3, #128	@ 0x80
 8008702:	049b      	lsls	r3, r3, #18
 8008704:	4013      	ands	r3, r2
 8008706:	d1f0      	bne.n	80086ea <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008708:	4b4d      	ldr	r3, [pc, #308]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	4a51      	ldr	r2, [pc, #324]	@ (8008854 <HAL_RCC_OscConfig+0x62c>)
 800870e:	4013      	ands	r3, r2
 8008710:	0019      	movs	r1, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a1a      	ldr	r2, [r3, #32]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871a:	431a      	orrs	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008720:	021b      	lsls	r3, r3, #8
 8008722:	431a      	orrs	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008728:	431a      	orrs	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800872e:	431a      	orrs	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008734:	431a      	orrs	r2, r3
 8008736:	4b42      	ldr	r3, [pc, #264]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008738:	430a      	orrs	r2, r1
 800873a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800873c:	4b40      	ldr	r3, [pc, #256]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	4b3f      	ldr	r3, [pc, #252]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008742:	2180      	movs	r1, #128	@ 0x80
 8008744:	0449      	lsls	r1, r1, #17
 8008746:	430a      	orrs	r2, r1
 8008748:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800874a:	4b3d      	ldr	r3, [pc, #244]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 800874c:	68da      	ldr	r2, [r3, #12]
 800874e:	4b3c      	ldr	r3, [pc, #240]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008750:	2180      	movs	r1, #128	@ 0x80
 8008752:	0549      	lsls	r1, r1, #21
 8008754:	430a      	orrs	r2, r1
 8008756:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008758:	f7fe fc1a 	bl	8006f90 <HAL_GetTick>
 800875c:	0003      	movs	r3, r0
 800875e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008760:	e008      	b.n	8008774 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008762:	f7fe fc15 	bl	8006f90 <HAL_GetTick>
 8008766:	0002      	movs	r2, r0
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	2b02      	cmp	r3, #2
 800876e:	d901      	bls.n	8008774 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e061      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008774:	4b32      	ldr	r3, [pc, #200]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	2380      	movs	r3, #128	@ 0x80
 800877a:	049b      	lsls	r3, r3, #18
 800877c:	4013      	ands	r3, r2
 800877e:	d0f0      	beq.n	8008762 <HAL_RCC_OscConfig+0x53a>
 8008780:	e059      	b.n	8008836 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008782:	4b2f      	ldr	r3, [pc, #188]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	4b2e      	ldr	r3, [pc, #184]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 8008788:	4931      	ldr	r1, [pc, #196]	@ (8008850 <HAL_RCC_OscConfig+0x628>)
 800878a:	400a      	ands	r2, r1
 800878c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800878e:	f7fe fbff 	bl	8006f90 <HAL_GetTick>
 8008792:	0003      	movs	r3, r0
 8008794:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008796:	e008      	b.n	80087aa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008798:	f7fe fbfa 	bl	8006f90 <HAL_GetTick>
 800879c:	0002      	movs	r2, r0
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d901      	bls.n	80087aa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e046      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80087aa:	4b25      	ldr	r3, [pc, #148]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	2380      	movs	r3, #128	@ 0x80
 80087b0:	049b      	lsls	r3, r3, #18
 80087b2:	4013      	ands	r3, r2
 80087b4:	d1f0      	bne.n	8008798 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80087b6:	4b22      	ldr	r3, [pc, #136]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	4b21      	ldr	r3, [pc, #132]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 80087bc:	4926      	ldr	r1, [pc, #152]	@ (8008858 <HAL_RCC_OscConfig+0x630>)
 80087be:	400a      	ands	r2, r1
 80087c0:	60da      	str	r2, [r3, #12]
 80087c2:	e038      	b.n	8008836 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d101      	bne.n	80087d0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e033      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80087d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008840 <HAL_RCC_OscConfig+0x618>)
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2203      	movs	r2, #3
 80087da:	401a      	ands	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d126      	bne.n	8008832 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2270      	movs	r2, #112	@ 0x70
 80087e8:	401a      	ands	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d11f      	bne.n	8008832 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	23fe      	movs	r3, #254	@ 0xfe
 80087f6:	01db      	lsls	r3, r3, #7
 80087f8:	401a      	ands	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087fe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008800:	429a      	cmp	r2, r3
 8008802:	d116      	bne.n	8008832 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	23f8      	movs	r3, #248	@ 0xf8
 8008808:	039b      	lsls	r3, r3, #14
 800880a:	401a      	ands	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008810:	429a      	cmp	r2, r3
 8008812:	d10e      	bne.n	8008832 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	23e0      	movs	r3, #224	@ 0xe0
 8008818:	051b      	lsls	r3, r3, #20
 800881a:	401a      	ands	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008820:	429a      	cmp	r2, r3
 8008822:	d106      	bne.n	8008832 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	0f5b      	lsrs	r3, r3, #29
 8008828:	075a      	lsls	r2, r3, #29
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800882e:	429a      	cmp	r2, r3
 8008830:	d001      	beq.n	8008836 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8008836:	2300      	movs	r3, #0
}
 8008838:	0018      	movs	r0, r3
 800883a:	46bd      	mov	sp, r7
 800883c:	b008      	add	sp, #32
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40021000 	.word	0x40021000
 8008844:	40007000 	.word	0x40007000
 8008848:	00001388 	.word	0x00001388
 800884c:	efffffff 	.word	0xefffffff
 8008850:	feffffff 	.word	0xfeffffff
 8008854:	11c1808c 	.word	0x11c1808c
 8008858:	eefefffc 	.word	0xeefefffc

0800885c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e0e9      	b.n	8008a44 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008870:	4b76      	ldr	r3, [pc, #472]	@ (8008a4c <HAL_RCC_ClockConfig+0x1f0>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2207      	movs	r2, #7
 8008876:	4013      	ands	r3, r2
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	429a      	cmp	r2, r3
 800887c:	d91e      	bls.n	80088bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800887e:	4b73      	ldr	r3, [pc, #460]	@ (8008a4c <HAL_RCC_ClockConfig+0x1f0>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2207      	movs	r2, #7
 8008884:	4393      	bics	r3, r2
 8008886:	0019      	movs	r1, r3
 8008888:	4b70      	ldr	r3, [pc, #448]	@ (8008a4c <HAL_RCC_ClockConfig+0x1f0>)
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	430a      	orrs	r2, r1
 800888e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008890:	f7fe fb7e 	bl	8006f90 <HAL_GetTick>
 8008894:	0003      	movs	r3, r0
 8008896:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008898:	e009      	b.n	80088ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800889a:	f7fe fb79 	bl	8006f90 <HAL_GetTick>
 800889e:	0002      	movs	r2, r0
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	1ad3      	subs	r3, r2, r3
 80088a4:	4a6a      	ldr	r2, [pc, #424]	@ (8008a50 <HAL_RCC_ClockConfig+0x1f4>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d901      	bls.n	80088ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e0ca      	b.n	8008a44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80088ae:	4b67      	ldr	r3, [pc, #412]	@ (8008a4c <HAL_RCC_ClockConfig+0x1f0>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2207      	movs	r2, #7
 80088b4:	4013      	ands	r3, r2
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d1ee      	bne.n	800889a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2202      	movs	r2, #2
 80088c2:	4013      	ands	r3, r2
 80088c4:	d015      	beq.n	80088f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2204      	movs	r2, #4
 80088cc:	4013      	ands	r3, r2
 80088ce:	d006      	beq.n	80088de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80088d0:	4b60      	ldr	r3, [pc, #384]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	4b5f      	ldr	r3, [pc, #380]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 80088d6:	21e0      	movs	r1, #224	@ 0xe0
 80088d8:	01c9      	lsls	r1, r1, #7
 80088da:	430a      	orrs	r2, r1
 80088dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088de:	4b5d      	ldr	r3, [pc, #372]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	4a5d      	ldr	r2, [pc, #372]	@ (8008a58 <HAL_RCC_ClockConfig+0x1fc>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	0019      	movs	r1, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689a      	ldr	r2, [r3, #8]
 80088ec:	4b59      	ldr	r3, [pc, #356]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 80088ee:	430a      	orrs	r2, r1
 80088f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2201      	movs	r2, #1
 80088f8:	4013      	ands	r3, r2
 80088fa:	d057      	beq.n	80089ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d107      	bne.n	8008914 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008904:	4b53      	ldr	r3, [pc, #332]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	2380      	movs	r3, #128	@ 0x80
 800890a:	029b      	lsls	r3, r3, #10
 800890c:	4013      	ands	r3, r2
 800890e:	d12b      	bne.n	8008968 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e097      	b.n	8008a44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	2b02      	cmp	r3, #2
 800891a:	d107      	bne.n	800892c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800891c:	4b4d      	ldr	r3, [pc, #308]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	2380      	movs	r3, #128	@ 0x80
 8008922:	049b      	lsls	r3, r3, #18
 8008924:	4013      	ands	r3, r2
 8008926:	d11f      	bne.n	8008968 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	e08b      	b.n	8008a44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d107      	bne.n	8008944 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008934:	4b47      	ldr	r3, [pc, #284]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	2380      	movs	r3, #128	@ 0x80
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	4013      	ands	r3, r2
 800893e:	d113      	bne.n	8008968 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e07f      	b.n	8008a44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	2b03      	cmp	r3, #3
 800894a:	d106      	bne.n	800895a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800894c:	4b41      	ldr	r3, [pc, #260]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 800894e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008950:	2202      	movs	r2, #2
 8008952:	4013      	ands	r3, r2
 8008954:	d108      	bne.n	8008968 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e074      	b.n	8008a44 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800895a:	4b3e      	ldr	r3, [pc, #248]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 800895c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800895e:	2202      	movs	r2, #2
 8008960:	4013      	ands	r3, r2
 8008962:	d101      	bne.n	8008968 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e06d      	b.n	8008a44 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008968:	4b3a      	ldr	r3, [pc, #232]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	2207      	movs	r2, #7
 800896e:	4393      	bics	r3, r2
 8008970:	0019      	movs	r1, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	4b37      	ldr	r3, [pc, #220]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 8008978:	430a      	orrs	r2, r1
 800897a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800897c:	f7fe fb08 	bl	8006f90 <HAL_GetTick>
 8008980:	0003      	movs	r3, r0
 8008982:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008984:	e009      	b.n	800899a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008986:	f7fe fb03 	bl	8006f90 <HAL_GetTick>
 800898a:	0002      	movs	r2, r0
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	4a2f      	ldr	r2, [pc, #188]	@ (8008a50 <HAL_RCC_ClockConfig+0x1f4>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d901      	bls.n	800899a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e054      	b.n	8008a44 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800899a:	4b2e      	ldr	r3, [pc, #184]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	2238      	movs	r2, #56	@ 0x38
 80089a0:	401a      	ands	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d1ec      	bne.n	8008986 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089ac:	4b27      	ldr	r3, [pc, #156]	@ (8008a4c <HAL_RCC_ClockConfig+0x1f0>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2207      	movs	r2, #7
 80089b2:	4013      	ands	r3, r2
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	429a      	cmp	r2, r3
 80089b8:	d21e      	bcs.n	80089f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ba:	4b24      	ldr	r3, [pc, #144]	@ (8008a4c <HAL_RCC_ClockConfig+0x1f0>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2207      	movs	r2, #7
 80089c0:	4393      	bics	r3, r2
 80089c2:	0019      	movs	r1, r3
 80089c4:	4b21      	ldr	r3, [pc, #132]	@ (8008a4c <HAL_RCC_ClockConfig+0x1f0>)
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80089cc:	f7fe fae0 	bl	8006f90 <HAL_GetTick>
 80089d0:	0003      	movs	r3, r0
 80089d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80089d4:	e009      	b.n	80089ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089d6:	f7fe fadb 	bl	8006f90 <HAL_GetTick>
 80089da:	0002      	movs	r2, r0
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	4a1b      	ldr	r2, [pc, #108]	@ (8008a50 <HAL_RCC_ClockConfig+0x1f4>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d901      	bls.n	80089ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e02c      	b.n	8008a44 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80089ea:	4b18      	ldr	r3, [pc, #96]	@ (8008a4c <HAL_RCC_ClockConfig+0x1f0>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2207      	movs	r2, #7
 80089f0:	4013      	ands	r3, r2
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d1ee      	bne.n	80089d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2204      	movs	r2, #4
 80089fe:	4013      	ands	r3, r2
 8008a00:	d009      	beq.n	8008a16 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008a02:	4b14      	ldr	r3, [pc, #80]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	4a15      	ldr	r2, [pc, #84]	@ (8008a5c <HAL_RCC_ClockConfig+0x200>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	0019      	movs	r1, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68da      	ldr	r2, [r3, #12]
 8008a10:	4b10      	ldr	r3, [pc, #64]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 8008a12:	430a      	orrs	r2, r1
 8008a14:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008a16:	f000 f829 	bl	8008a6c <HAL_RCC_GetSysClockFreq>
 8008a1a:	0001      	movs	r1, r0
 8008a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008a54 <HAL_RCC_ClockConfig+0x1f8>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	0a1b      	lsrs	r3, r3, #8
 8008a22:	220f      	movs	r2, #15
 8008a24:	401a      	ands	r2, r3
 8008a26:	4b0e      	ldr	r3, [pc, #56]	@ (8008a60 <HAL_RCC_ClockConfig+0x204>)
 8008a28:	0092      	lsls	r2, r2, #2
 8008a2a:	58d3      	ldr	r3, [r2, r3]
 8008a2c:	221f      	movs	r2, #31
 8008a2e:	4013      	ands	r3, r2
 8008a30:	000a      	movs	r2, r1
 8008a32:	40da      	lsrs	r2, r3
 8008a34:	4b0b      	ldr	r3, [pc, #44]	@ (8008a64 <HAL_RCC_ClockConfig+0x208>)
 8008a36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008a38:	4b0b      	ldr	r3, [pc, #44]	@ (8008a68 <HAL_RCC_ClockConfig+0x20c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7fe fa4b 	bl	8006ed8 <HAL_InitTick>
 8008a42:	0003      	movs	r3, r0
}
 8008a44:	0018      	movs	r0, r3
 8008a46:	46bd      	mov	sp, r7
 8008a48:	b004      	add	sp, #16
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	40022000 	.word	0x40022000
 8008a50:	00001388 	.word	0x00001388
 8008a54:	40021000 	.word	0x40021000
 8008a58:	fffff0ff 	.word	0xfffff0ff
 8008a5c:	ffff8fff 	.word	0xffff8fff
 8008a60:	0800e010 	.word	0x0800e010
 8008a64:	20000000 	.word	0x20000000
 8008a68:	20000004 	.word	0x20000004

08008a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008a72:	4b3c      	ldr	r3, [pc, #240]	@ (8008b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	2238      	movs	r2, #56	@ 0x38
 8008a78:	4013      	ands	r3, r2
 8008a7a:	d10f      	bne.n	8008a9c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008a7c:	4b39      	ldr	r3, [pc, #228]	@ (8008b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	0adb      	lsrs	r3, r3, #11
 8008a82:	2207      	movs	r2, #7
 8008a84:	4013      	ands	r3, r2
 8008a86:	2201      	movs	r2, #1
 8008a88:	409a      	lsls	r2, r3
 8008a8a:	0013      	movs	r3, r2
 8008a8c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	4835      	ldr	r0, [pc, #212]	@ (8008b68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008a92:	f7f7 fb5d 	bl	8000150 <__udivsi3>
 8008a96:	0003      	movs	r3, r0
 8008a98:	613b      	str	r3, [r7, #16]
 8008a9a:	e05d      	b.n	8008b58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a9c:	4b31      	ldr	r3, [pc, #196]	@ (8008b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	2238      	movs	r2, #56	@ 0x38
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	2b08      	cmp	r3, #8
 8008aa6:	d102      	bne.n	8008aae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008aa8:	4b30      	ldr	r3, [pc, #192]	@ (8008b6c <HAL_RCC_GetSysClockFreq+0x100>)
 8008aaa:	613b      	str	r3, [r7, #16]
 8008aac:	e054      	b.n	8008b58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008aae:	4b2d      	ldr	r3, [pc, #180]	@ (8008b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	2238      	movs	r2, #56	@ 0x38
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	2b10      	cmp	r3, #16
 8008ab8:	d138      	bne.n	8008b2c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008aba:	4b2a      	ldr	r3, [pc, #168]	@ (8008b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	2203      	movs	r2, #3
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ac4:	4b27      	ldr	r3, [pc, #156]	@ (8008b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	091b      	lsrs	r3, r3, #4
 8008aca:	2207      	movs	r2, #7
 8008acc:	4013      	ands	r3, r2
 8008ace:	3301      	adds	r3, #1
 8008ad0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d10d      	bne.n	8008af4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	4824      	ldr	r0, [pc, #144]	@ (8008b6c <HAL_RCC_GetSysClockFreq+0x100>)
 8008adc:	f7f7 fb38 	bl	8000150 <__udivsi3>
 8008ae0:	0003      	movs	r3, r0
 8008ae2:	0019      	movs	r1, r3
 8008ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8008b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	0a1b      	lsrs	r3, r3, #8
 8008aea:	227f      	movs	r2, #127	@ 0x7f
 8008aec:	4013      	ands	r3, r2
 8008aee:	434b      	muls	r3, r1
 8008af0:	617b      	str	r3, [r7, #20]
        break;
 8008af2:	e00d      	b.n	8008b10 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008af4:	68b9      	ldr	r1, [r7, #8]
 8008af6:	481c      	ldr	r0, [pc, #112]	@ (8008b68 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008af8:	f7f7 fb2a 	bl	8000150 <__udivsi3>
 8008afc:	0003      	movs	r3, r0
 8008afe:	0019      	movs	r1, r3
 8008b00:	4b18      	ldr	r3, [pc, #96]	@ (8008b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	0a1b      	lsrs	r3, r3, #8
 8008b06:	227f      	movs	r2, #127	@ 0x7f
 8008b08:	4013      	ands	r3, r2
 8008b0a:	434b      	muls	r3, r1
 8008b0c:	617b      	str	r3, [r7, #20]
        break;
 8008b0e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008b10:	4b14      	ldr	r3, [pc, #80]	@ (8008b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	0f5b      	lsrs	r3, r3, #29
 8008b16:	2207      	movs	r2, #7
 8008b18:	4013      	ands	r3, r2
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	6978      	ldr	r0, [r7, #20]
 8008b22:	f7f7 fb15 	bl	8000150 <__udivsi3>
 8008b26:	0003      	movs	r3, r0
 8008b28:	613b      	str	r3, [r7, #16]
 8008b2a:	e015      	b.n	8008b58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	2238      	movs	r2, #56	@ 0x38
 8008b32:	4013      	ands	r3, r2
 8008b34:	2b20      	cmp	r3, #32
 8008b36:	d103      	bne.n	8008b40 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008b38:	2380      	movs	r3, #128	@ 0x80
 8008b3a:	021b      	lsls	r3, r3, #8
 8008b3c:	613b      	str	r3, [r7, #16]
 8008b3e:	e00b      	b.n	8008b58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008b40:	4b08      	ldr	r3, [pc, #32]	@ (8008b64 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	2238      	movs	r2, #56	@ 0x38
 8008b46:	4013      	ands	r3, r2
 8008b48:	2b18      	cmp	r3, #24
 8008b4a:	d103      	bne.n	8008b54 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008b4c:	23fa      	movs	r3, #250	@ 0xfa
 8008b4e:	01db      	lsls	r3, r3, #7
 8008b50:	613b      	str	r3, [r7, #16]
 8008b52:	e001      	b.n	8008b58 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008b54:	2300      	movs	r3, #0
 8008b56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008b58:	693b      	ldr	r3, [r7, #16]
}
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	b006      	add	sp, #24
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	46c0      	nop			@ (mov r8, r8)
 8008b64:	40021000 	.word	0x40021000
 8008b68:	00f42400 	.word	0x00f42400
 8008b6c:	007a1200 	.word	0x007a1200

08008b70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b74:	4b02      	ldr	r3, [pc, #8]	@ (8008b80 <HAL_RCC_GetHCLKFreq+0x10>)
 8008b76:	681b      	ldr	r3, [r3, #0]
}
 8008b78:	0018      	movs	r0, r3
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	46c0      	nop			@ (mov r8, r8)
 8008b80:	20000000 	.word	0x20000000

08008b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b84:	b5b0      	push	{r4, r5, r7, lr}
 8008b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008b88:	f7ff fff2 	bl	8008b70 <HAL_RCC_GetHCLKFreq>
 8008b8c:	0004      	movs	r4, r0
 8008b8e:	f7ff fb3f 	bl	8008210 <LL_RCC_GetAPB1Prescaler>
 8008b92:	0003      	movs	r3, r0
 8008b94:	0b1a      	lsrs	r2, r3, #12
 8008b96:	4b05      	ldr	r3, [pc, #20]	@ (8008bac <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b98:	0092      	lsls	r2, r2, #2
 8008b9a:	58d3      	ldr	r3, [r2, r3]
 8008b9c:	221f      	movs	r2, #31
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	40dc      	lsrs	r4, r3
 8008ba2:	0023      	movs	r3, r4
}
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8008baa:	46c0      	nop			@ (mov r8, r8)
 8008bac:	0800e050 	.word	0x0800e050

08008bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b086      	sub	sp, #24
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008bb8:	2313      	movs	r3, #19
 8008bba:	18fb      	adds	r3, r7, r3
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008bc0:	2312      	movs	r3, #18
 8008bc2:	18fb      	adds	r3, r7, r3
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	2380      	movs	r3, #128	@ 0x80
 8008bce:	029b      	lsls	r3, r3, #10
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	d100      	bne.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008bd4:	e0a3      	b.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bd6:	2011      	movs	r0, #17
 8008bd8:	183b      	adds	r3, r7, r0
 8008bda:	2200      	movs	r2, #0
 8008bdc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bde:	4bc3      	ldr	r3, [pc, #780]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008be2:	2380      	movs	r3, #128	@ 0x80
 8008be4:	055b      	lsls	r3, r3, #21
 8008be6:	4013      	ands	r3, r2
 8008be8:	d110      	bne.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bea:	4bc0      	ldr	r3, [pc, #768]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008bec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bee:	4bbf      	ldr	r3, [pc, #764]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008bf0:	2180      	movs	r1, #128	@ 0x80
 8008bf2:	0549      	lsls	r1, r1, #21
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008bf8:	4bbc      	ldr	r3, [pc, #752]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008bfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bfc:	2380      	movs	r3, #128	@ 0x80
 8008bfe:	055b      	lsls	r3, r3, #21
 8008c00:	4013      	ands	r3, r2
 8008c02:	60bb      	str	r3, [r7, #8]
 8008c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c06:	183b      	adds	r3, r7, r0
 8008c08:	2201      	movs	r2, #1
 8008c0a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c0c:	4bb8      	ldr	r3, [pc, #736]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	4bb7      	ldr	r3, [pc, #732]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008c12:	2180      	movs	r1, #128	@ 0x80
 8008c14:	0049      	lsls	r1, r1, #1
 8008c16:	430a      	orrs	r2, r1
 8008c18:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c1a:	f7fe f9b9 	bl	8006f90 <HAL_GetTick>
 8008c1e:	0003      	movs	r3, r0
 8008c20:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c22:	e00b      	b.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c24:	f7fe f9b4 	bl	8006f90 <HAL_GetTick>
 8008c28:	0002      	movs	r2, r0
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d904      	bls.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008c32:	2313      	movs	r3, #19
 8008c34:	18fb      	adds	r3, r7, r3
 8008c36:	2203      	movs	r2, #3
 8008c38:	701a      	strb	r2, [r3, #0]
        break;
 8008c3a:	e005      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c3c:	4bac      	ldr	r3, [pc, #688]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	2380      	movs	r3, #128	@ 0x80
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	4013      	ands	r3, r2
 8008c46:	d0ed      	beq.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008c48:	2313      	movs	r3, #19
 8008c4a:	18fb      	adds	r3, r7, r3
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d154      	bne.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008c52:	4ba6      	ldr	r3, [pc, #664]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008c56:	23c0      	movs	r3, #192	@ 0xc0
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d019      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d014      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008c6e:	4b9f      	ldr	r3, [pc, #636]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c72:	4aa0      	ldr	r2, [pc, #640]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008c74:	4013      	ands	r3, r2
 8008c76:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c78:	4b9c      	ldr	r3, [pc, #624]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c7a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008c7c:	4b9b      	ldr	r3, [pc, #620]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c7e:	2180      	movs	r1, #128	@ 0x80
 8008c80:	0249      	lsls	r1, r1, #9
 8008c82:	430a      	orrs	r2, r1
 8008c84:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c86:	4b99      	ldr	r3, [pc, #612]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008c8a:	4b98      	ldr	r3, [pc, #608]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c8c:	499a      	ldr	r1, [pc, #616]	@ (8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8008c8e:	400a      	ands	r2, r1
 8008c90:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008c92:	4b96      	ldr	r3, [pc, #600]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008c94:	697a      	ldr	r2, [r7, #20]
 8008c96:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	d016      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca0:	f7fe f976 	bl	8006f90 <HAL_GetTick>
 8008ca4:	0003      	movs	r3, r0
 8008ca6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ca8:	e00c      	b.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008caa:	f7fe f971 	bl	8006f90 <HAL_GetTick>
 8008cae:	0002      	movs	r2, r0
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	4a91      	ldr	r2, [pc, #580]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d904      	bls.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008cba:	2313      	movs	r3, #19
 8008cbc:	18fb      	adds	r3, r7, r3
 8008cbe:	2203      	movs	r2, #3
 8008cc0:	701a      	strb	r2, [r3, #0]
            break;
 8008cc2:	e004      	b.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008cc4:	4b89      	ldr	r3, [pc, #548]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cc8:	2202      	movs	r2, #2
 8008cca:	4013      	ands	r3, r2
 8008ccc:	d0ed      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008cce:	2313      	movs	r3, #19
 8008cd0:	18fb      	adds	r3, r7, r3
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d10a      	bne.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008cd8:	4b84      	ldr	r3, [pc, #528]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cdc:	4a85      	ldr	r2, [pc, #532]	@ (8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8008cde:	4013      	ands	r3, r2
 8008ce0:	0019      	movs	r1, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ce6:	4b81      	ldr	r3, [pc, #516]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008cec:	e00c      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008cee:	2312      	movs	r3, #18
 8008cf0:	18fb      	adds	r3, r7, r3
 8008cf2:	2213      	movs	r2, #19
 8008cf4:	18ba      	adds	r2, r7, r2
 8008cf6:	7812      	ldrb	r2, [r2, #0]
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	e005      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cfc:	2312      	movs	r3, #18
 8008cfe:	18fb      	adds	r3, r7, r3
 8008d00:	2213      	movs	r2, #19
 8008d02:	18ba      	adds	r2, r7, r2
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d08:	2311      	movs	r3, #17
 8008d0a:	18fb      	adds	r3, r7, r3
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d105      	bne.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d12:	4b76      	ldr	r3, [pc, #472]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d16:	4b75      	ldr	r3, [pc, #468]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d18:	4979      	ldr	r1, [pc, #484]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8008d1a:	400a      	ands	r2, r1
 8008d1c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2201      	movs	r2, #1
 8008d24:	4013      	ands	r3, r2
 8008d26:	d009      	beq.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008d28:	4b70      	ldr	r3, [pc, #448]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d2c:	2203      	movs	r2, #3
 8008d2e:	4393      	bics	r3, r2
 8008d30:	0019      	movs	r1, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	4b6d      	ldr	r3, [pc, #436]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2202      	movs	r2, #2
 8008d42:	4013      	ands	r3, r2
 8008d44:	d009      	beq.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008d46:	4b69      	ldr	r3, [pc, #420]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d4a:	220c      	movs	r2, #12
 8008d4c:	4393      	bics	r3, r2
 8008d4e:	0019      	movs	r1, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	4b65      	ldr	r3, [pc, #404]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d56:	430a      	orrs	r2, r1
 8008d58:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2210      	movs	r2, #16
 8008d60:	4013      	ands	r3, r2
 8008d62:	d009      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d64:	4b61      	ldr	r3, [pc, #388]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d68:	4a66      	ldr	r2, [pc, #408]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	0019      	movs	r1, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68da      	ldr	r2, [r3, #12]
 8008d72:	4b5e      	ldr	r3, [pc, #376]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d74:	430a      	orrs	r2, r1
 8008d76:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	2380      	movs	r3, #128	@ 0x80
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4013      	ands	r3, r2
 8008d82:	d009      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d84:	4b59      	ldr	r3, [pc, #356]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d88:	4a5f      	ldr	r2, [pc, #380]	@ (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	0019      	movs	r1, r3
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	699a      	ldr	r2, [r3, #24]
 8008d92:	4b56      	ldr	r3, [pc, #344]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008d94:	430a      	orrs	r2, r1
 8008d96:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	2380      	movs	r3, #128	@ 0x80
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	4013      	ands	r3, r2
 8008da2:	d009      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008da4:	4b51      	ldr	r3, [pc, #324]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008da8:	4a58      	ldr	r2, [pc, #352]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008daa:	4013      	ands	r3, r2
 8008dac:	0019      	movs	r1, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69da      	ldr	r2, [r3, #28]
 8008db2:	4b4e      	ldr	r3, [pc, #312]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008db4:	430a      	orrs	r2, r1
 8008db6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	d009      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dc6:	4a52      	ldr	r2, [pc, #328]	@ (8008f10 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	0019      	movs	r1, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691a      	ldr	r2, [r3, #16]
 8008dd0:	4b46      	ldr	r3, [pc, #280]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	2380      	movs	r3, #128	@ 0x80
 8008ddc:	01db      	lsls	r3, r3, #7
 8008dde:	4013      	ands	r3, r2
 8008de0:	d015      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008de2:	4b42      	ldr	r3, [pc, #264]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	0899      	lsrs	r1, r3, #2
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1a      	ldr	r2, [r3, #32]
 8008dee:	4b3f      	ldr	r3, [pc, #252]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008df0:	430a      	orrs	r2, r1
 8008df2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a1a      	ldr	r2, [r3, #32]
 8008df8:	2380      	movs	r3, #128	@ 0x80
 8008dfa:	05db      	lsls	r3, r3, #23
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d106      	bne.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008e00:	4b3a      	ldr	r3, [pc, #232]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e02:	68da      	ldr	r2, [r3, #12]
 8008e04:	4b39      	ldr	r3, [pc, #228]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e06:	2180      	movs	r1, #128	@ 0x80
 8008e08:	0249      	lsls	r1, r1, #9
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	2380      	movs	r3, #128	@ 0x80
 8008e14:	031b      	lsls	r3, r3, #12
 8008e16:	4013      	ands	r3, r2
 8008e18:	d009      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008e1a:	4b34      	ldr	r3, [pc, #208]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e1e:	2240      	movs	r2, #64	@ 0x40
 8008e20:	4393      	bics	r3, r2
 8008e22:	0019      	movs	r1, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e28:	4b30      	ldr	r3, [pc, #192]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	2380      	movs	r3, #128	@ 0x80
 8008e34:	039b      	lsls	r3, r3, #14
 8008e36:	4013      	ands	r3, r2
 8008e38:	d016      	beq.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3e:	4a35      	ldr	r2, [pc, #212]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8008e40:	4013      	ands	r3, r2
 8008e42:	0019      	movs	r1, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e48:	4b28      	ldr	r3, [pc, #160]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e52:	2380      	movs	r3, #128	@ 0x80
 8008e54:	03db      	lsls	r3, r3, #15
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d106      	bne.n	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008e5a:	4b24      	ldr	r3, [pc, #144]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	4b23      	ldr	r3, [pc, #140]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e60:	2180      	movs	r1, #128	@ 0x80
 8008e62:	0449      	lsls	r1, r1, #17
 8008e64:	430a      	orrs	r2, r1
 8008e66:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	2380      	movs	r3, #128	@ 0x80
 8008e6e:	03db      	lsls	r3, r3, #15
 8008e70:	4013      	ands	r3, r2
 8008e72:	d016      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8008e74:	4b1d      	ldr	r3, [pc, #116]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e78:	4a27      	ldr	r2, [pc, #156]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	0019      	movs	r1, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e82:	4b1a      	ldr	r3, [pc, #104]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e84:	430a      	orrs	r2, r1
 8008e86:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e8c:	2380      	movs	r3, #128	@ 0x80
 8008e8e:	045b      	lsls	r3, r3, #17
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d106      	bne.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008e94:	4b15      	ldr	r3, [pc, #84]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e96:	68da      	ldr	r2, [r3, #12]
 8008e98:	4b14      	ldr	r3, [pc, #80]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008e9a:	2180      	movs	r1, #128	@ 0x80
 8008e9c:	0449      	lsls	r1, r1, #17
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	2380      	movs	r3, #128	@ 0x80
 8008ea8:	011b      	lsls	r3, r3, #4
 8008eaa:	4013      	ands	r3, r2
 8008eac:	d016      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008eae:	4b0f      	ldr	r3, [pc, #60]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	0019      	movs	r1, r3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	695a      	ldr	r2, [r3, #20]
 8008ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695a      	ldr	r2, [r3, #20]
 8008ec6:	2380      	movs	r3, #128	@ 0x80
 8008ec8:	01db      	lsls	r3, r3, #7
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d106      	bne.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008ece:	4b07      	ldr	r3, [pc, #28]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ed0:	68da      	ldr	r2, [r3, #12]
 8008ed2:	4b06      	ldr	r3, [pc, #24]	@ (8008eec <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8008ed4:	2180      	movs	r1, #128	@ 0x80
 8008ed6:	0249      	lsls	r1, r1, #9
 8008ed8:	430a      	orrs	r2, r1
 8008eda:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008edc:	2312      	movs	r3, #18
 8008ede:	18fb      	adds	r3, r7, r3
 8008ee0:	781b      	ldrb	r3, [r3, #0]
}
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	b006      	add	sp, #24
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	46c0      	nop			@ (mov r8, r8)
 8008eec:	40021000 	.word	0x40021000
 8008ef0:	40007000 	.word	0x40007000
 8008ef4:	fffffcff 	.word	0xfffffcff
 8008ef8:	fffeffff 	.word	0xfffeffff
 8008efc:	00001388 	.word	0x00001388
 8008f00:	efffffff 	.word	0xefffffff
 8008f04:	fffff3ff 	.word	0xfffff3ff
 8008f08:	fff3ffff 	.word	0xfff3ffff
 8008f0c:	ffcfffff 	.word	0xffcfffff
 8008f10:	ffffcfff 	.word	0xffffcfff
 8008f14:	ffbfffff 	.word	0xffbfffff
 8008f18:	feffffff 	.word	0xfeffffff
 8008f1c:	ffff3fff 	.word	0xffff3fff

08008f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d101      	bne.n	8008f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e0a8      	b.n	8009084 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	2382      	movs	r3, #130	@ 0x82
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d009      	beq.n	8008f5a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	61da      	str	r2, [r3, #28]
 8008f4c:	e005      	b.n	8008f5a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	225d      	movs	r2, #93	@ 0x5d
 8008f64:	5c9b      	ldrb	r3, [r3, r2]
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d107      	bne.n	8008f7c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	225c      	movs	r2, #92	@ 0x5c
 8008f70:	2100      	movs	r1, #0
 8008f72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	0018      	movs	r0, r3
 8008f78:	f7fd fddc 	bl	8006b34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	225d      	movs	r2, #93	@ 0x5d
 8008f80:	2102      	movs	r1, #2
 8008f82:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2140      	movs	r1, #64	@ 0x40
 8008f90:	438a      	bics	r2, r1
 8008f92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68da      	ldr	r2, [r3, #12]
 8008f98:	23e0      	movs	r3, #224	@ 0xe0
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d902      	bls.n	8008fa6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	e002      	b.n	8008fac <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008fa6:	2380      	movs	r3, #128	@ 0x80
 8008fa8:	015b      	lsls	r3, r3, #5
 8008faa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68da      	ldr	r2, [r3, #12]
 8008fb0:	23f0      	movs	r3, #240	@ 0xf0
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d008      	beq.n	8008fca <HAL_SPI_Init+0xaa>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68da      	ldr	r2, [r3, #12]
 8008fbc:	23e0      	movs	r3, #224	@ 0xe0
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d002      	beq.n	8008fca <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685a      	ldr	r2, [r3, #4]
 8008fce:	2382      	movs	r3, #130	@ 0x82
 8008fd0:	005b      	lsls	r3, r3, #1
 8008fd2:	401a      	ands	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6899      	ldr	r1, [r3, #8]
 8008fd8:	2384      	movs	r3, #132	@ 0x84
 8008fda:	021b      	lsls	r3, r3, #8
 8008fdc:	400b      	ands	r3, r1
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	2102      	movs	r1, #2
 8008fe6:	400b      	ands	r3, r1
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	695b      	ldr	r3, [r3, #20]
 8008fee:	2101      	movs	r1, #1
 8008ff0:	400b      	ands	r3, r1
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6999      	ldr	r1, [r3, #24]
 8008ff8:	2380      	movs	r3, #128	@ 0x80
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	400b      	ands	r3, r1
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	69db      	ldr	r3, [r3, #28]
 8009004:	2138      	movs	r1, #56	@ 0x38
 8009006:	400b      	ands	r3, r1
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	2180      	movs	r1, #128	@ 0x80
 8009010:	400b      	ands	r3, r1
 8009012:	431a      	orrs	r2, r3
 8009014:	0011      	movs	r1, r2
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800901a:	2380      	movs	r3, #128	@ 0x80
 800901c:	019b      	lsls	r3, r3, #6
 800901e:	401a      	ands	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	430a      	orrs	r2, r1
 8009026:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	0c1b      	lsrs	r3, r3, #16
 800902e:	2204      	movs	r2, #4
 8009030:	401a      	ands	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009036:	2110      	movs	r1, #16
 8009038:	400b      	ands	r3, r1
 800903a:	431a      	orrs	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009040:	2108      	movs	r1, #8
 8009042:	400b      	ands	r3, r1
 8009044:	431a      	orrs	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	68d9      	ldr	r1, [r3, #12]
 800904a:	23f0      	movs	r3, #240	@ 0xf0
 800904c:	011b      	lsls	r3, r3, #4
 800904e:	400b      	ands	r3, r1
 8009050:	431a      	orrs	r2, r3
 8009052:	0011      	movs	r1, r2
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	2380      	movs	r3, #128	@ 0x80
 8009058:	015b      	lsls	r3, r3, #5
 800905a:	401a      	ands	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	430a      	orrs	r2, r1
 8009062:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	69da      	ldr	r2, [r3, #28]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4907      	ldr	r1, [pc, #28]	@ (800908c <HAL_SPI_Init+0x16c>)
 8009070:	400a      	ands	r2, r1
 8009072:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	225d      	movs	r2, #93	@ 0x5d
 800907e:	2101      	movs	r1, #1
 8009080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	0018      	movs	r0, r3
 8009086:	46bd      	mov	sp, r7
 8009088:	b004      	add	sp, #16
 800908a:	bd80      	pop	{r7, pc}
 800908c:	fffff7ff 	.word	0xfffff7ff

08009090 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e046      	b.n	8009130 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2288      	movs	r2, #136	@ 0x88
 80090a6:	589b      	ldr	r3, [r3, r2]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d107      	bne.n	80090bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2284      	movs	r2, #132	@ 0x84
 80090b0:	2100      	movs	r1, #0
 80090b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	0018      	movs	r0, r3
 80090b8:	f7fd fd86 	bl	8006bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2288      	movs	r2, #136	@ 0x88
 80090c0:	2124      	movs	r1, #36	@ 0x24
 80090c2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2101      	movs	r1, #1
 80090d0:	438a      	bics	r2, r1
 80090d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d003      	beq.n	80090e4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	0018      	movs	r0, r3
 80090e0:	f000 fc74 	bl	80099cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	0018      	movs	r0, r3
 80090e8:	f000 f9b2 	bl	8009450 <UART_SetConfig>
 80090ec:	0003      	movs	r3, r0
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d101      	bne.n	80090f6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e01c      	b.n	8009130 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	490d      	ldr	r1, [pc, #52]	@ (8009138 <HAL_UART_Init+0xa8>)
 8009102:	400a      	ands	r2, r1
 8009104:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	212a      	movs	r1, #42	@ 0x2a
 8009112:	438a      	bics	r2, r1
 8009114:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	2101      	movs	r1, #1
 8009122:	430a      	orrs	r2, r1
 8009124:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	0018      	movs	r0, r3
 800912a:	f000 fd03 	bl	8009b34 <UART_CheckIdleState>
 800912e:	0003      	movs	r3, r0
}
 8009130:	0018      	movs	r0, r3
 8009132:	46bd      	mov	sp, r7
 8009134:	b002      	add	sp, #8
 8009136:	bd80      	pop	{r7, pc}
 8009138:	ffffb7ff 	.word	0xffffb7ff

0800913c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08a      	sub	sp, #40	@ 0x28
 8009140:	af02      	add	r7, sp, #8
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	603b      	str	r3, [r7, #0]
 8009148:	1dbb      	adds	r3, r7, #6
 800914a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2288      	movs	r2, #136	@ 0x88
 8009150:	589b      	ldr	r3, [r3, r2]
 8009152:	2b20      	cmp	r3, #32
 8009154:	d000      	beq.n	8009158 <HAL_UART_Transmit+0x1c>
 8009156:	e090      	b.n	800927a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <HAL_UART_Transmit+0x2a>
 800915e:	1dbb      	adds	r3, r7, #6
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e088      	b.n	800927c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	689a      	ldr	r2, [r3, #8]
 800916e:	2380      	movs	r3, #128	@ 0x80
 8009170:	015b      	lsls	r3, r3, #5
 8009172:	429a      	cmp	r2, r3
 8009174:	d109      	bne.n	800918a <HAL_UART_Transmit+0x4e>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d105      	bne.n	800918a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2201      	movs	r2, #1
 8009182:	4013      	ands	r3, r2
 8009184:	d001      	beq.n	800918a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e078      	b.n	800927c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2290      	movs	r2, #144	@ 0x90
 800918e:	2100      	movs	r1, #0
 8009190:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2288      	movs	r2, #136	@ 0x88
 8009196:	2121      	movs	r1, #33	@ 0x21
 8009198:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800919a:	f7fd fef9 	bl	8006f90 <HAL_GetTick>
 800919e:	0003      	movs	r3, r0
 80091a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	1dba      	adds	r2, r7, #6
 80091a6:	2154      	movs	r1, #84	@ 0x54
 80091a8:	8812      	ldrh	r2, [r2, #0]
 80091aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	1dba      	adds	r2, r7, #6
 80091b0:	2156      	movs	r1, #86	@ 0x56
 80091b2:	8812      	ldrh	r2, [r2, #0]
 80091b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	689a      	ldr	r2, [r3, #8]
 80091ba:	2380      	movs	r3, #128	@ 0x80
 80091bc:	015b      	lsls	r3, r3, #5
 80091be:	429a      	cmp	r2, r3
 80091c0:	d108      	bne.n	80091d4 <HAL_UART_Transmit+0x98>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d104      	bne.n	80091d4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80091ca:	2300      	movs	r3, #0
 80091cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	61bb      	str	r3, [r7, #24]
 80091d2:	e003      	b.n	80091dc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091d8:	2300      	movs	r3, #0
 80091da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091dc:	e030      	b.n	8009240 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	0013      	movs	r3, r2
 80091e8:	2200      	movs	r2, #0
 80091ea:	2180      	movs	r1, #128	@ 0x80
 80091ec:	f000 fd4c 	bl	8009c88 <UART_WaitOnFlagUntilTimeout>
 80091f0:	1e03      	subs	r3, r0, #0
 80091f2:	d005      	beq.n	8009200 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2288      	movs	r2, #136	@ 0x88
 80091f8:	2120      	movs	r1, #32
 80091fa:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e03d      	b.n	800927c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10b      	bne.n	800921e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	001a      	movs	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	05d2      	lsls	r2, r2, #23
 8009212:	0dd2      	lsrs	r2, r2, #23
 8009214:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	3302      	adds	r3, #2
 800921a:	61bb      	str	r3, [r7, #24]
 800921c:	e007      	b.n	800922e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	781a      	ldrb	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	3301      	adds	r3, #1
 800922c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2256      	movs	r2, #86	@ 0x56
 8009232:	5a9b      	ldrh	r3, [r3, r2]
 8009234:	b29b      	uxth	r3, r3
 8009236:	3b01      	subs	r3, #1
 8009238:	b299      	uxth	r1, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2256      	movs	r2, #86	@ 0x56
 800923e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2256      	movs	r2, #86	@ 0x56
 8009244:	5a9b      	ldrh	r3, [r3, r2]
 8009246:	b29b      	uxth	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1c8      	bne.n	80091de <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	0013      	movs	r3, r2
 8009256:	2200      	movs	r2, #0
 8009258:	2140      	movs	r1, #64	@ 0x40
 800925a:	f000 fd15 	bl	8009c88 <UART_WaitOnFlagUntilTimeout>
 800925e:	1e03      	subs	r3, r0, #0
 8009260:	d005      	beq.n	800926e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2288      	movs	r2, #136	@ 0x88
 8009266:	2120      	movs	r1, #32
 8009268:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e006      	b.n	800927c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2288      	movs	r2, #136	@ 0x88
 8009272:	2120      	movs	r1, #32
 8009274:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	e000      	b.n	800927c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800927a:	2302      	movs	r3, #2
  }
}
 800927c:	0018      	movs	r0, r3
 800927e:	46bd      	mov	sp, r7
 8009280:	b008      	add	sp, #32
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b08a      	sub	sp, #40	@ 0x28
 8009288:	af02      	add	r7, sp, #8
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	1dbb      	adds	r3, r7, #6
 8009292:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	228c      	movs	r2, #140	@ 0x8c
 8009298:	589b      	ldr	r3, [r3, r2]
 800929a:	2b20      	cmp	r3, #32
 800929c:	d000      	beq.n	80092a0 <HAL_UART_Receive+0x1c>
 800929e:	e0d0      	b.n	8009442 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d003      	beq.n	80092ae <HAL_UART_Receive+0x2a>
 80092a6:	1dbb      	adds	r3, r7, #6
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d101      	bne.n	80092b2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e0c8      	b.n	8009444 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	689a      	ldr	r2, [r3, #8]
 80092b6:	2380      	movs	r3, #128	@ 0x80
 80092b8:	015b      	lsls	r3, r3, #5
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d109      	bne.n	80092d2 <HAL_UART_Receive+0x4e>
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d105      	bne.n	80092d2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	2201      	movs	r2, #1
 80092ca:	4013      	ands	r3, r2
 80092cc:	d001      	beq.n	80092d2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e0b8      	b.n	8009444 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2290      	movs	r2, #144	@ 0x90
 80092d6:	2100      	movs	r1, #0
 80092d8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	228c      	movs	r2, #140	@ 0x8c
 80092de:	2122      	movs	r1, #34	@ 0x22
 80092e0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092e8:	f7fd fe52 	bl	8006f90 <HAL_GetTick>
 80092ec:	0003      	movs	r3, r0
 80092ee:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	1dba      	adds	r2, r7, #6
 80092f4:	215c      	movs	r1, #92	@ 0x5c
 80092f6:	8812      	ldrh	r2, [r2, #0]
 80092f8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	1dba      	adds	r2, r7, #6
 80092fe:	215e      	movs	r1, #94	@ 0x5e
 8009300:	8812      	ldrh	r2, [r2, #0]
 8009302:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	689a      	ldr	r2, [r3, #8]
 8009308:	2380      	movs	r3, #128	@ 0x80
 800930a:	015b      	lsls	r3, r3, #5
 800930c:	429a      	cmp	r2, r3
 800930e:	d10d      	bne.n	800932c <HAL_UART_Receive+0xa8>
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d104      	bne.n	8009322 <HAL_UART_Receive+0x9e>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2260      	movs	r2, #96	@ 0x60
 800931c:	494b      	ldr	r1, [pc, #300]	@ (800944c <HAL_UART_Receive+0x1c8>)
 800931e:	5299      	strh	r1, [r3, r2]
 8009320:	e02e      	b.n	8009380 <HAL_UART_Receive+0xfc>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2260      	movs	r2, #96	@ 0x60
 8009326:	21ff      	movs	r1, #255	@ 0xff
 8009328:	5299      	strh	r1, [r3, r2]
 800932a:	e029      	b.n	8009380 <HAL_UART_Receive+0xfc>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10d      	bne.n	8009350 <HAL_UART_Receive+0xcc>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d104      	bne.n	8009346 <HAL_UART_Receive+0xc2>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2260      	movs	r2, #96	@ 0x60
 8009340:	21ff      	movs	r1, #255	@ 0xff
 8009342:	5299      	strh	r1, [r3, r2]
 8009344:	e01c      	b.n	8009380 <HAL_UART_Receive+0xfc>
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2260      	movs	r2, #96	@ 0x60
 800934a:	217f      	movs	r1, #127	@ 0x7f
 800934c:	5299      	strh	r1, [r3, r2]
 800934e:	e017      	b.n	8009380 <HAL_UART_Receive+0xfc>
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	2380      	movs	r3, #128	@ 0x80
 8009356:	055b      	lsls	r3, r3, #21
 8009358:	429a      	cmp	r2, r3
 800935a:	d10d      	bne.n	8009378 <HAL_UART_Receive+0xf4>
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d104      	bne.n	800936e <HAL_UART_Receive+0xea>
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2260      	movs	r2, #96	@ 0x60
 8009368:	217f      	movs	r1, #127	@ 0x7f
 800936a:	5299      	strh	r1, [r3, r2]
 800936c:	e008      	b.n	8009380 <HAL_UART_Receive+0xfc>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2260      	movs	r2, #96	@ 0x60
 8009372:	213f      	movs	r1, #63	@ 0x3f
 8009374:	5299      	strh	r1, [r3, r2]
 8009376:	e003      	b.n	8009380 <HAL_UART_Receive+0xfc>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2260      	movs	r2, #96	@ 0x60
 800937c:	2100      	movs	r1, #0
 800937e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8009380:	2312      	movs	r3, #18
 8009382:	18fb      	adds	r3, r7, r3
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	2160      	movs	r1, #96	@ 0x60
 8009388:	5a52      	ldrh	r2, [r2, r1]
 800938a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	689a      	ldr	r2, [r3, #8]
 8009390:	2380      	movs	r3, #128	@ 0x80
 8009392:	015b      	lsls	r3, r3, #5
 8009394:	429a      	cmp	r2, r3
 8009396:	d108      	bne.n	80093aa <HAL_UART_Receive+0x126>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d104      	bne.n	80093aa <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80093a0:	2300      	movs	r3, #0
 80093a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	61bb      	str	r3, [r7, #24]
 80093a8:	e003      	b.n	80093b2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80093b2:	e03a      	b.n	800942a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	0013      	movs	r3, r2
 80093be:	2200      	movs	r2, #0
 80093c0:	2120      	movs	r1, #32
 80093c2:	f000 fc61 	bl	8009c88 <UART_WaitOnFlagUntilTimeout>
 80093c6:	1e03      	subs	r3, r0, #0
 80093c8:	d005      	beq.n	80093d6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	228c      	movs	r2, #140	@ 0x8c
 80093ce:	2120      	movs	r1, #32
 80093d0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e036      	b.n	8009444 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10e      	bne.n	80093fa <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	2212      	movs	r2, #18
 80093e6:	18ba      	adds	r2, r7, r2
 80093e8:	8812      	ldrh	r2, [r2, #0]
 80093ea:	4013      	ands	r3, r2
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	3302      	adds	r3, #2
 80093f6:	61bb      	str	r3, [r7, #24]
 80093f8:	e00e      	b.n	8009418 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009400:	b2db      	uxtb	r3, r3
 8009402:	2212      	movs	r2, #18
 8009404:	18ba      	adds	r2, r7, r2
 8009406:	8812      	ldrh	r2, [r2, #0]
 8009408:	b2d2      	uxtb	r2, r2
 800940a:	4013      	ands	r3, r2
 800940c:	b2da      	uxtb	r2, r3
 800940e:	69fb      	ldr	r3, [r7, #28]
 8009410:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	3301      	adds	r3, #1
 8009416:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	225e      	movs	r2, #94	@ 0x5e
 800941c:	5a9b      	ldrh	r3, [r3, r2]
 800941e:	b29b      	uxth	r3, r3
 8009420:	3b01      	subs	r3, #1
 8009422:	b299      	uxth	r1, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	225e      	movs	r2, #94	@ 0x5e
 8009428:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	225e      	movs	r2, #94	@ 0x5e
 800942e:	5a9b      	ldrh	r3, [r3, r2]
 8009430:	b29b      	uxth	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1be      	bne.n	80093b4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	228c      	movs	r2, #140	@ 0x8c
 800943a:	2120      	movs	r1, #32
 800943c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	e000      	b.n	8009444 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8009442:	2302      	movs	r3, #2
  }
}
 8009444:	0018      	movs	r0, r3
 8009446:	46bd      	mov	sp, r7
 8009448:	b008      	add	sp, #32
 800944a:	bd80      	pop	{r7, pc}
 800944c:	000001ff 	.word	0x000001ff

08009450 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009450:	b5b0      	push	{r4, r5, r7, lr}
 8009452:	b090      	sub	sp, #64	@ 0x40
 8009454:	af00      	add	r7, sp, #0
 8009456:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009458:	231a      	movs	r3, #26
 800945a:	2220      	movs	r2, #32
 800945c:	189b      	adds	r3, r3, r2
 800945e:	19db      	adds	r3, r3, r7
 8009460:	2200      	movs	r2, #0
 8009462:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	431a      	orrs	r2, r3
 800946e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	431a      	orrs	r2, r3
 8009474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	4313      	orrs	r3, r2
 800947a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800947c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4aaf      	ldr	r2, [pc, #700]	@ (8009740 <UART_SetConfig+0x2f0>)
 8009484:	4013      	ands	r3, r2
 8009486:	0019      	movs	r1, r3
 8009488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800948e:	430b      	orrs	r3, r1
 8009490:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	4aaa      	ldr	r2, [pc, #680]	@ (8009744 <UART_SetConfig+0x2f4>)
 800949a:	4013      	ands	r3, r2
 800949c:	0018      	movs	r0, r3
 800949e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a0:	68d9      	ldr	r1, [r3, #12]
 80094a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	0003      	movs	r3, r0
 80094a8:	430b      	orrs	r3, r1
 80094aa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4aa4      	ldr	r2, [pc, #656]	@ (8009748 <UART_SetConfig+0x2f8>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d004      	beq.n	80094c6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094be:	6a1b      	ldr	r3, [r3, #32]
 80094c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80094c2:	4313      	orrs	r3, r2
 80094c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	4a9f      	ldr	r2, [pc, #636]	@ (800974c <UART_SetConfig+0x2fc>)
 80094ce:	4013      	ands	r3, r2
 80094d0:	0019      	movs	r1, r3
 80094d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094d8:	430b      	orrs	r3, r1
 80094da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094e2:	220f      	movs	r2, #15
 80094e4:	4393      	bics	r3, r2
 80094e6:	0018      	movs	r0, r3
 80094e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ea:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80094ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	0003      	movs	r3, r0
 80094f2:	430b      	orrs	r3, r1
 80094f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a95      	ldr	r2, [pc, #596]	@ (8009750 <UART_SetConfig+0x300>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d131      	bne.n	8009564 <UART_SetConfig+0x114>
 8009500:	4b94      	ldr	r3, [pc, #592]	@ (8009754 <UART_SetConfig+0x304>)
 8009502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009504:	2203      	movs	r2, #3
 8009506:	4013      	ands	r3, r2
 8009508:	2b03      	cmp	r3, #3
 800950a:	d01d      	beq.n	8009548 <UART_SetConfig+0xf8>
 800950c:	d823      	bhi.n	8009556 <UART_SetConfig+0x106>
 800950e:	2b02      	cmp	r3, #2
 8009510:	d00c      	beq.n	800952c <UART_SetConfig+0xdc>
 8009512:	d820      	bhi.n	8009556 <UART_SetConfig+0x106>
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <UART_SetConfig+0xce>
 8009518:	2b01      	cmp	r3, #1
 800951a:	d00e      	beq.n	800953a <UART_SetConfig+0xea>
 800951c:	e01b      	b.n	8009556 <UART_SetConfig+0x106>
 800951e:	231b      	movs	r3, #27
 8009520:	2220      	movs	r2, #32
 8009522:	189b      	adds	r3, r3, r2
 8009524:	19db      	adds	r3, r3, r7
 8009526:	2200      	movs	r2, #0
 8009528:	701a      	strb	r2, [r3, #0]
 800952a:	e0b4      	b.n	8009696 <UART_SetConfig+0x246>
 800952c:	231b      	movs	r3, #27
 800952e:	2220      	movs	r2, #32
 8009530:	189b      	adds	r3, r3, r2
 8009532:	19db      	adds	r3, r3, r7
 8009534:	2202      	movs	r2, #2
 8009536:	701a      	strb	r2, [r3, #0]
 8009538:	e0ad      	b.n	8009696 <UART_SetConfig+0x246>
 800953a:	231b      	movs	r3, #27
 800953c:	2220      	movs	r2, #32
 800953e:	189b      	adds	r3, r3, r2
 8009540:	19db      	adds	r3, r3, r7
 8009542:	2204      	movs	r2, #4
 8009544:	701a      	strb	r2, [r3, #0]
 8009546:	e0a6      	b.n	8009696 <UART_SetConfig+0x246>
 8009548:	231b      	movs	r3, #27
 800954a:	2220      	movs	r2, #32
 800954c:	189b      	adds	r3, r3, r2
 800954e:	19db      	adds	r3, r3, r7
 8009550:	2208      	movs	r2, #8
 8009552:	701a      	strb	r2, [r3, #0]
 8009554:	e09f      	b.n	8009696 <UART_SetConfig+0x246>
 8009556:	231b      	movs	r3, #27
 8009558:	2220      	movs	r2, #32
 800955a:	189b      	adds	r3, r3, r2
 800955c:	19db      	adds	r3, r3, r7
 800955e:	2210      	movs	r2, #16
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	e098      	b.n	8009696 <UART_SetConfig+0x246>
 8009564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a7b      	ldr	r2, [pc, #492]	@ (8009758 <UART_SetConfig+0x308>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d131      	bne.n	80095d2 <UART_SetConfig+0x182>
 800956e:	4b79      	ldr	r3, [pc, #484]	@ (8009754 <UART_SetConfig+0x304>)
 8009570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009572:	220c      	movs	r2, #12
 8009574:	4013      	ands	r3, r2
 8009576:	2b0c      	cmp	r3, #12
 8009578:	d01d      	beq.n	80095b6 <UART_SetConfig+0x166>
 800957a:	d823      	bhi.n	80095c4 <UART_SetConfig+0x174>
 800957c:	2b08      	cmp	r3, #8
 800957e:	d00c      	beq.n	800959a <UART_SetConfig+0x14a>
 8009580:	d820      	bhi.n	80095c4 <UART_SetConfig+0x174>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d002      	beq.n	800958c <UART_SetConfig+0x13c>
 8009586:	2b04      	cmp	r3, #4
 8009588:	d00e      	beq.n	80095a8 <UART_SetConfig+0x158>
 800958a:	e01b      	b.n	80095c4 <UART_SetConfig+0x174>
 800958c:	231b      	movs	r3, #27
 800958e:	2220      	movs	r2, #32
 8009590:	189b      	adds	r3, r3, r2
 8009592:	19db      	adds	r3, r3, r7
 8009594:	2200      	movs	r2, #0
 8009596:	701a      	strb	r2, [r3, #0]
 8009598:	e07d      	b.n	8009696 <UART_SetConfig+0x246>
 800959a:	231b      	movs	r3, #27
 800959c:	2220      	movs	r2, #32
 800959e:	189b      	adds	r3, r3, r2
 80095a0:	19db      	adds	r3, r3, r7
 80095a2:	2202      	movs	r2, #2
 80095a4:	701a      	strb	r2, [r3, #0]
 80095a6:	e076      	b.n	8009696 <UART_SetConfig+0x246>
 80095a8:	231b      	movs	r3, #27
 80095aa:	2220      	movs	r2, #32
 80095ac:	189b      	adds	r3, r3, r2
 80095ae:	19db      	adds	r3, r3, r7
 80095b0:	2204      	movs	r2, #4
 80095b2:	701a      	strb	r2, [r3, #0]
 80095b4:	e06f      	b.n	8009696 <UART_SetConfig+0x246>
 80095b6:	231b      	movs	r3, #27
 80095b8:	2220      	movs	r2, #32
 80095ba:	189b      	adds	r3, r3, r2
 80095bc:	19db      	adds	r3, r3, r7
 80095be:	2208      	movs	r2, #8
 80095c0:	701a      	strb	r2, [r3, #0]
 80095c2:	e068      	b.n	8009696 <UART_SetConfig+0x246>
 80095c4:	231b      	movs	r3, #27
 80095c6:	2220      	movs	r2, #32
 80095c8:	189b      	adds	r3, r3, r2
 80095ca:	19db      	adds	r3, r3, r7
 80095cc:	2210      	movs	r2, #16
 80095ce:	701a      	strb	r2, [r3, #0]
 80095d0:	e061      	b.n	8009696 <UART_SetConfig+0x246>
 80095d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a61      	ldr	r2, [pc, #388]	@ (800975c <UART_SetConfig+0x30c>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d106      	bne.n	80095ea <UART_SetConfig+0x19a>
 80095dc:	231b      	movs	r3, #27
 80095de:	2220      	movs	r2, #32
 80095e0:	189b      	adds	r3, r3, r2
 80095e2:	19db      	adds	r3, r3, r7
 80095e4:	2200      	movs	r2, #0
 80095e6:	701a      	strb	r2, [r3, #0]
 80095e8:	e055      	b.n	8009696 <UART_SetConfig+0x246>
 80095ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a5c      	ldr	r2, [pc, #368]	@ (8009760 <UART_SetConfig+0x310>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d106      	bne.n	8009602 <UART_SetConfig+0x1b2>
 80095f4:	231b      	movs	r3, #27
 80095f6:	2220      	movs	r2, #32
 80095f8:	189b      	adds	r3, r3, r2
 80095fa:	19db      	adds	r3, r3, r7
 80095fc:	2200      	movs	r2, #0
 80095fe:	701a      	strb	r2, [r3, #0]
 8009600:	e049      	b.n	8009696 <UART_SetConfig+0x246>
 8009602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a50      	ldr	r2, [pc, #320]	@ (8009748 <UART_SetConfig+0x2f8>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d13e      	bne.n	800968a <UART_SetConfig+0x23a>
 800960c:	4b51      	ldr	r3, [pc, #324]	@ (8009754 <UART_SetConfig+0x304>)
 800960e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009610:	23c0      	movs	r3, #192	@ 0xc0
 8009612:	011b      	lsls	r3, r3, #4
 8009614:	4013      	ands	r3, r2
 8009616:	22c0      	movs	r2, #192	@ 0xc0
 8009618:	0112      	lsls	r2, r2, #4
 800961a:	4293      	cmp	r3, r2
 800961c:	d027      	beq.n	800966e <UART_SetConfig+0x21e>
 800961e:	22c0      	movs	r2, #192	@ 0xc0
 8009620:	0112      	lsls	r2, r2, #4
 8009622:	4293      	cmp	r3, r2
 8009624:	d82a      	bhi.n	800967c <UART_SetConfig+0x22c>
 8009626:	2280      	movs	r2, #128	@ 0x80
 8009628:	0112      	lsls	r2, r2, #4
 800962a:	4293      	cmp	r3, r2
 800962c:	d011      	beq.n	8009652 <UART_SetConfig+0x202>
 800962e:	2280      	movs	r2, #128	@ 0x80
 8009630:	0112      	lsls	r2, r2, #4
 8009632:	4293      	cmp	r3, r2
 8009634:	d822      	bhi.n	800967c <UART_SetConfig+0x22c>
 8009636:	2b00      	cmp	r3, #0
 8009638:	d004      	beq.n	8009644 <UART_SetConfig+0x1f4>
 800963a:	2280      	movs	r2, #128	@ 0x80
 800963c:	00d2      	lsls	r2, r2, #3
 800963e:	4293      	cmp	r3, r2
 8009640:	d00e      	beq.n	8009660 <UART_SetConfig+0x210>
 8009642:	e01b      	b.n	800967c <UART_SetConfig+0x22c>
 8009644:	231b      	movs	r3, #27
 8009646:	2220      	movs	r2, #32
 8009648:	189b      	adds	r3, r3, r2
 800964a:	19db      	adds	r3, r3, r7
 800964c:	2200      	movs	r2, #0
 800964e:	701a      	strb	r2, [r3, #0]
 8009650:	e021      	b.n	8009696 <UART_SetConfig+0x246>
 8009652:	231b      	movs	r3, #27
 8009654:	2220      	movs	r2, #32
 8009656:	189b      	adds	r3, r3, r2
 8009658:	19db      	adds	r3, r3, r7
 800965a:	2202      	movs	r2, #2
 800965c:	701a      	strb	r2, [r3, #0]
 800965e:	e01a      	b.n	8009696 <UART_SetConfig+0x246>
 8009660:	231b      	movs	r3, #27
 8009662:	2220      	movs	r2, #32
 8009664:	189b      	adds	r3, r3, r2
 8009666:	19db      	adds	r3, r3, r7
 8009668:	2204      	movs	r2, #4
 800966a:	701a      	strb	r2, [r3, #0]
 800966c:	e013      	b.n	8009696 <UART_SetConfig+0x246>
 800966e:	231b      	movs	r3, #27
 8009670:	2220      	movs	r2, #32
 8009672:	189b      	adds	r3, r3, r2
 8009674:	19db      	adds	r3, r3, r7
 8009676:	2208      	movs	r2, #8
 8009678:	701a      	strb	r2, [r3, #0]
 800967a:	e00c      	b.n	8009696 <UART_SetConfig+0x246>
 800967c:	231b      	movs	r3, #27
 800967e:	2220      	movs	r2, #32
 8009680:	189b      	adds	r3, r3, r2
 8009682:	19db      	adds	r3, r3, r7
 8009684:	2210      	movs	r2, #16
 8009686:	701a      	strb	r2, [r3, #0]
 8009688:	e005      	b.n	8009696 <UART_SetConfig+0x246>
 800968a:	231b      	movs	r3, #27
 800968c:	2220      	movs	r2, #32
 800968e:	189b      	adds	r3, r3, r2
 8009690:	19db      	adds	r3, r3, r7
 8009692:	2210      	movs	r2, #16
 8009694:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a2b      	ldr	r2, [pc, #172]	@ (8009748 <UART_SetConfig+0x2f8>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d000      	beq.n	80096a2 <UART_SetConfig+0x252>
 80096a0:	e0a9      	b.n	80097f6 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80096a2:	231b      	movs	r3, #27
 80096a4:	2220      	movs	r2, #32
 80096a6:	189b      	adds	r3, r3, r2
 80096a8:	19db      	adds	r3, r3, r7
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b08      	cmp	r3, #8
 80096ae:	d015      	beq.n	80096dc <UART_SetConfig+0x28c>
 80096b0:	dc18      	bgt.n	80096e4 <UART_SetConfig+0x294>
 80096b2:	2b04      	cmp	r3, #4
 80096b4:	d00d      	beq.n	80096d2 <UART_SetConfig+0x282>
 80096b6:	dc15      	bgt.n	80096e4 <UART_SetConfig+0x294>
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d002      	beq.n	80096c2 <UART_SetConfig+0x272>
 80096bc:	2b02      	cmp	r3, #2
 80096be:	d005      	beq.n	80096cc <UART_SetConfig+0x27c>
 80096c0:	e010      	b.n	80096e4 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096c2:	f7ff fa5f 	bl	8008b84 <HAL_RCC_GetPCLK1Freq>
 80096c6:	0003      	movs	r3, r0
 80096c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096ca:	e014      	b.n	80096f6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096cc:	4b25      	ldr	r3, [pc, #148]	@ (8009764 <UART_SetConfig+0x314>)
 80096ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096d0:	e011      	b.n	80096f6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096d2:	f7ff f9cb 	bl	8008a6c <HAL_RCC_GetSysClockFreq>
 80096d6:	0003      	movs	r3, r0
 80096d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096da:	e00c      	b.n	80096f6 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096dc:	2380      	movs	r3, #128	@ 0x80
 80096de:	021b      	lsls	r3, r3, #8
 80096e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096e2:	e008      	b.n	80096f6 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80096e4:	2300      	movs	r3, #0
 80096e6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80096e8:	231a      	movs	r3, #26
 80096ea:	2220      	movs	r2, #32
 80096ec:	189b      	adds	r3, r3, r2
 80096ee:	19db      	adds	r3, r3, r7
 80096f0:	2201      	movs	r2, #1
 80096f2:	701a      	strb	r2, [r3, #0]
        break;
 80096f4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80096f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d100      	bne.n	80096fe <UART_SetConfig+0x2ae>
 80096fc:	e14b      	b.n	8009996 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80096fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009700:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009702:	4b19      	ldr	r3, [pc, #100]	@ (8009768 <UART_SetConfig+0x318>)
 8009704:	0052      	lsls	r2, r2, #1
 8009706:	5ad3      	ldrh	r3, [r2, r3]
 8009708:	0019      	movs	r1, r3
 800970a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800970c:	f7f6 fd20 	bl	8000150 <__udivsi3>
 8009710:	0003      	movs	r3, r0
 8009712:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	0013      	movs	r3, r2
 800971a:	005b      	lsls	r3, r3, #1
 800971c:	189b      	adds	r3, r3, r2
 800971e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009720:	429a      	cmp	r2, r3
 8009722:	d305      	bcc.n	8009730 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800972a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800972c:	429a      	cmp	r2, r3
 800972e:	d91d      	bls.n	800976c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8009730:	231a      	movs	r3, #26
 8009732:	2220      	movs	r2, #32
 8009734:	189b      	adds	r3, r3, r2
 8009736:	19db      	adds	r3, r3, r7
 8009738:	2201      	movs	r2, #1
 800973a:	701a      	strb	r2, [r3, #0]
 800973c:	e12b      	b.n	8009996 <UART_SetConfig+0x546>
 800973e:	46c0      	nop			@ (mov r8, r8)
 8009740:	cfff69f3 	.word	0xcfff69f3
 8009744:	ffffcfff 	.word	0xffffcfff
 8009748:	40008000 	.word	0x40008000
 800974c:	11fff4ff 	.word	0x11fff4ff
 8009750:	40013800 	.word	0x40013800
 8009754:	40021000 	.word	0x40021000
 8009758:	40004400 	.word	0x40004400
 800975c:	40004800 	.word	0x40004800
 8009760:	40004c00 	.word	0x40004c00
 8009764:	00f42400 	.word	0x00f42400
 8009768:	0800e070 	.word	0x0800e070
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800976c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800976e:	61bb      	str	r3, [r7, #24]
 8009770:	2300      	movs	r3, #0
 8009772:	61fb      	str	r3, [r7, #28]
 8009774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009776:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009778:	4b92      	ldr	r3, [pc, #584]	@ (80099c4 <UART_SetConfig+0x574>)
 800977a:	0052      	lsls	r2, r2, #1
 800977c:	5ad3      	ldrh	r3, [r2, r3]
 800977e:	613b      	str	r3, [r7, #16]
 8009780:	2300      	movs	r3, #0
 8009782:	617b      	str	r3, [r7, #20]
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	69b8      	ldr	r0, [r7, #24]
 800978a:	69f9      	ldr	r1, [r7, #28]
 800978c:	f7f6 fece 	bl	800052c <__aeabi_uldivmod>
 8009790:	0002      	movs	r2, r0
 8009792:	000b      	movs	r3, r1
 8009794:	0e11      	lsrs	r1, r2, #24
 8009796:	021d      	lsls	r5, r3, #8
 8009798:	430d      	orrs	r5, r1
 800979a:	0214      	lsls	r4, r2, #8
 800979c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	085b      	lsrs	r3, r3, #1
 80097a2:	60bb      	str	r3, [r7, #8]
 80097a4:	2300      	movs	r3, #0
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	68b8      	ldr	r0, [r7, #8]
 80097aa:	68f9      	ldr	r1, [r7, #12]
 80097ac:	1900      	adds	r0, r0, r4
 80097ae:	4169      	adcs	r1, r5
 80097b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	603b      	str	r3, [r7, #0]
 80097b6:	2300      	movs	r3, #0
 80097b8:	607b      	str	r3, [r7, #4]
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f7f6 feb5 	bl	800052c <__aeabi_uldivmod>
 80097c2:	0002      	movs	r2, r0
 80097c4:	000b      	movs	r3, r1
 80097c6:	0013      	movs	r3, r2
 80097c8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80097ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097cc:	23c0      	movs	r3, #192	@ 0xc0
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d309      	bcc.n	80097e8 <UART_SetConfig+0x398>
 80097d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097d6:	2380      	movs	r3, #128	@ 0x80
 80097d8:	035b      	lsls	r3, r3, #13
 80097da:	429a      	cmp	r2, r3
 80097dc:	d204      	bcs.n	80097e8 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80097de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097e4:	60da      	str	r2, [r3, #12]
 80097e6:	e0d6      	b.n	8009996 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80097e8:	231a      	movs	r3, #26
 80097ea:	2220      	movs	r2, #32
 80097ec:	189b      	adds	r3, r3, r2
 80097ee:	19db      	adds	r3, r3, r7
 80097f0:	2201      	movs	r2, #1
 80097f2:	701a      	strb	r2, [r3, #0]
 80097f4:	e0cf      	b.n	8009996 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f8:	69da      	ldr	r2, [r3, #28]
 80097fa:	2380      	movs	r3, #128	@ 0x80
 80097fc:	021b      	lsls	r3, r3, #8
 80097fe:	429a      	cmp	r2, r3
 8009800:	d000      	beq.n	8009804 <UART_SetConfig+0x3b4>
 8009802:	e070      	b.n	80098e6 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8009804:	231b      	movs	r3, #27
 8009806:	2220      	movs	r2, #32
 8009808:	189b      	adds	r3, r3, r2
 800980a:	19db      	adds	r3, r3, r7
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	2b08      	cmp	r3, #8
 8009810:	d015      	beq.n	800983e <UART_SetConfig+0x3ee>
 8009812:	dc18      	bgt.n	8009846 <UART_SetConfig+0x3f6>
 8009814:	2b04      	cmp	r3, #4
 8009816:	d00d      	beq.n	8009834 <UART_SetConfig+0x3e4>
 8009818:	dc15      	bgt.n	8009846 <UART_SetConfig+0x3f6>
 800981a:	2b00      	cmp	r3, #0
 800981c:	d002      	beq.n	8009824 <UART_SetConfig+0x3d4>
 800981e:	2b02      	cmp	r3, #2
 8009820:	d005      	beq.n	800982e <UART_SetConfig+0x3de>
 8009822:	e010      	b.n	8009846 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009824:	f7ff f9ae 	bl	8008b84 <HAL_RCC_GetPCLK1Freq>
 8009828:	0003      	movs	r3, r0
 800982a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800982c:	e014      	b.n	8009858 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800982e:	4b66      	ldr	r3, [pc, #408]	@ (80099c8 <UART_SetConfig+0x578>)
 8009830:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009832:	e011      	b.n	8009858 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009834:	f7ff f91a 	bl	8008a6c <HAL_RCC_GetSysClockFreq>
 8009838:	0003      	movs	r3, r0
 800983a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800983c:	e00c      	b.n	8009858 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800983e:	2380      	movs	r3, #128	@ 0x80
 8009840:	021b      	lsls	r3, r3, #8
 8009842:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009844:	e008      	b.n	8009858 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8009846:	2300      	movs	r3, #0
 8009848:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800984a:	231a      	movs	r3, #26
 800984c:	2220      	movs	r2, #32
 800984e:	189b      	adds	r3, r3, r2
 8009850:	19db      	adds	r3, r3, r7
 8009852:	2201      	movs	r2, #1
 8009854:	701a      	strb	r2, [r3, #0]
        break;
 8009856:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800985a:	2b00      	cmp	r3, #0
 800985c:	d100      	bne.n	8009860 <UART_SetConfig+0x410>
 800985e:	e09a      	b.n	8009996 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009862:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009864:	4b57      	ldr	r3, [pc, #348]	@ (80099c4 <UART_SetConfig+0x574>)
 8009866:	0052      	lsls	r2, r2, #1
 8009868:	5ad3      	ldrh	r3, [r2, r3]
 800986a:	0019      	movs	r1, r3
 800986c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800986e:	f7f6 fc6f 	bl	8000150 <__udivsi3>
 8009872:	0003      	movs	r3, r0
 8009874:	005a      	lsls	r2, r3, #1
 8009876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	085b      	lsrs	r3, r3, #1
 800987c:	18d2      	adds	r2, r2, r3
 800987e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	0019      	movs	r1, r3
 8009884:	0010      	movs	r0, r2
 8009886:	f7f6 fc63 	bl	8000150 <__udivsi3>
 800988a:	0003      	movs	r3, r0
 800988c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800988e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009890:	2b0f      	cmp	r3, #15
 8009892:	d921      	bls.n	80098d8 <UART_SetConfig+0x488>
 8009894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009896:	2380      	movs	r3, #128	@ 0x80
 8009898:	025b      	lsls	r3, r3, #9
 800989a:	429a      	cmp	r2, r3
 800989c:	d21c      	bcs.n	80098d8 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	200e      	movs	r0, #14
 80098a4:	2420      	movs	r4, #32
 80098a6:	1903      	adds	r3, r0, r4
 80098a8:	19db      	adds	r3, r3, r7
 80098aa:	210f      	movs	r1, #15
 80098ac:	438a      	bics	r2, r1
 80098ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80098b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b2:	085b      	lsrs	r3, r3, #1
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2207      	movs	r2, #7
 80098b8:	4013      	ands	r3, r2
 80098ba:	b299      	uxth	r1, r3
 80098bc:	1903      	adds	r3, r0, r4
 80098be:	19db      	adds	r3, r3, r7
 80098c0:	1902      	adds	r2, r0, r4
 80098c2:	19d2      	adds	r2, r2, r7
 80098c4:	8812      	ldrh	r2, [r2, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80098ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	1902      	adds	r2, r0, r4
 80098d0:	19d2      	adds	r2, r2, r7
 80098d2:	8812      	ldrh	r2, [r2, #0]
 80098d4:	60da      	str	r2, [r3, #12]
 80098d6:	e05e      	b.n	8009996 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80098d8:	231a      	movs	r3, #26
 80098da:	2220      	movs	r2, #32
 80098dc:	189b      	adds	r3, r3, r2
 80098de:	19db      	adds	r3, r3, r7
 80098e0:	2201      	movs	r2, #1
 80098e2:	701a      	strb	r2, [r3, #0]
 80098e4:	e057      	b.n	8009996 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80098e6:	231b      	movs	r3, #27
 80098e8:	2220      	movs	r2, #32
 80098ea:	189b      	adds	r3, r3, r2
 80098ec:	19db      	adds	r3, r3, r7
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b08      	cmp	r3, #8
 80098f2:	d015      	beq.n	8009920 <UART_SetConfig+0x4d0>
 80098f4:	dc18      	bgt.n	8009928 <UART_SetConfig+0x4d8>
 80098f6:	2b04      	cmp	r3, #4
 80098f8:	d00d      	beq.n	8009916 <UART_SetConfig+0x4c6>
 80098fa:	dc15      	bgt.n	8009928 <UART_SetConfig+0x4d8>
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <UART_SetConfig+0x4b6>
 8009900:	2b02      	cmp	r3, #2
 8009902:	d005      	beq.n	8009910 <UART_SetConfig+0x4c0>
 8009904:	e010      	b.n	8009928 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009906:	f7ff f93d 	bl	8008b84 <HAL_RCC_GetPCLK1Freq>
 800990a:	0003      	movs	r3, r0
 800990c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800990e:	e014      	b.n	800993a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009910:	4b2d      	ldr	r3, [pc, #180]	@ (80099c8 <UART_SetConfig+0x578>)
 8009912:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009914:	e011      	b.n	800993a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009916:	f7ff f8a9 	bl	8008a6c <HAL_RCC_GetSysClockFreq>
 800991a:	0003      	movs	r3, r0
 800991c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800991e:	e00c      	b.n	800993a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009920:	2380      	movs	r3, #128	@ 0x80
 8009922:	021b      	lsls	r3, r3, #8
 8009924:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009926:	e008      	b.n	800993a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8009928:	2300      	movs	r3, #0
 800992a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800992c:	231a      	movs	r3, #26
 800992e:	2220      	movs	r2, #32
 8009930:	189b      	adds	r3, r3, r2
 8009932:	19db      	adds	r3, r3, r7
 8009934:	2201      	movs	r2, #1
 8009936:	701a      	strb	r2, [r3, #0]
        break;
 8009938:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800993a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800993c:	2b00      	cmp	r3, #0
 800993e:	d02a      	beq.n	8009996 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009942:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009944:	4b1f      	ldr	r3, [pc, #124]	@ (80099c4 <UART_SetConfig+0x574>)
 8009946:	0052      	lsls	r2, r2, #1
 8009948:	5ad3      	ldrh	r3, [r2, r3]
 800994a:	0019      	movs	r1, r3
 800994c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800994e:	f7f6 fbff 	bl	8000150 <__udivsi3>
 8009952:	0003      	movs	r3, r0
 8009954:	001a      	movs	r2, r3
 8009956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	085b      	lsrs	r3, r3, #1
 800995c:	18d2      	adds	r2, r2, r3
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	0019      	movs	r1, r3
 8009964:	0010      	movs	r0, r2
 8009966:	f7f6 fbf3 	bl	8000150 <__udivsi3>
 800996a:	0003      	movs	r3, r0
 800996c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800996e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009970:	2b0f      	cmp	r3, #15
 8009972:	d90a      	bls.n	800998a <UART_SetConfig+0x53a>
 8009974:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009976:	2380      	movs	r3, #128	@ 0x80
 8009978:	025b      	lsls	r3, r3, #9
 800997a:	429a      	cmp	r2, r3
 800997c:	d205      	bcs.n	800998a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	b29a      	uxth	r2, r3
 8009982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	60da      	str	r2, [r3, #12]
 8009988:	e005      	b.n	8009996 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800998a:	231a      	movs	r3, #26
 800998c:	2220      	movs	r2, #32
 800998e:	189b      	adds	r3, r3, r2
 8009990:	19db      	adds	r3, r3, r7
 8009992:	2201      	movs	r2, #1
 8009994:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009998:	226a      	movs	r2, #106	@ 0x6a
 800999a:	2101      	movs	r1, #1
 800999c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800999e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a0:	2268      	movs	r2, #104	@ 0x68
 80099a2:	2101      	movs	r1, #1
 80099a4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a8:	2200      	movs	r2, #0
 80099aa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80099ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ae:	2200      	movs	r2, #0
 80099b0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80099b2:	231a      	movs	r3, #26
 80099b4:	2220      	movs	r2, #32
 80099b6:	189b      	adds	r3, r3, r2
 80099b8:	19db      	adds	r3, r3, r7
 80099ba:	781b      	ldrb	r3, [r3, #0]
}
 80099bc:	0018      	movs	r0, r3
 80099be:	46bd      	mov	sp, r7
 80099c0:	b010      	add	sp, #64	@ 0x40
 80099c2:	bdb0      	pop	{r4, r5, r7, pc}
 80099c4:	0800e070 	.word	0x0800e070
 80099c8:	00f42400 	.word	0x00f42400

080099cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d8:	2208      	movs	r2, #8
 80099da:	4013      	ands	r3, r2
 80099dc:	d00b      	beq.n	80099f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	4a4a      	ldr	r2, [pc, #296]	@ (8009b10 <UART_AdvFeatureConfig+0x144>)
 80099e6:	4013      	ands	r3, r2
 80099e8:	0019      	movs	r1, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099fa:	2201      	movs	r2, #1
 80099fc:	4013      	ands	r3, r2
 80099fe:	d00b      	beq.n	8009a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	4a43      	ldr	r2, [pc, #268]	@ (8009b14 <UART_AdvFeatureConfig+0x148>)
 8009a08:	4013      	ands	r3, r2
 8009a0a:	0019      	movs	r1, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	430a      	orrs	r2, r1
 8009a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	4013      	ands	r3, r2
 8009a20:	d00b      	beq.n	8009a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	4a3b      	ldr	r2, [pc, #236]	@ (8009b18 <UART_AdvFeatureConfig+0x14c>)
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	0019      	movs	r1, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a3e:	2204      	movs	r2, #4
 8009a40:	4013      	ands	r3, r2
 8009a42:	d00b      	beq.n	8009a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	4a34      	ldr	r2, [pc, #208]	@ (8009b1c <UART_AdvFeatureConfig+0x150>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	0019      	movs	r1, r3
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a60:	2210      	movs	r2, #16
 8009a62:	4013      	ands	r3, r2
 8009a64:	d00b      	beq.n	8009a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	4a2c      	ldr	r2, [pc, #176]	@ (8009b20 <UART_AdvFeatureConfig+0x154>)
 8009a6e:	4013      	ands	r3, r2
 8009a70:	0019      	movs	r1, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a82:	2220      	movs	r2, #32
 8009a84:	4013      	ands	r3, r2
 8009a86:	d00b      	beq.n	8009aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	4a25      	ldr	r2, [pc, #148]	@ (8009b24 <UART_AdvFeatureConfig+0x158>)
 8009a90:	4013      	ands	r3, r2
 8009a92:	0019      	movs	r1, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa4:	2240      	movs	r2, #64	@ 0x40
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	d01d      	beq.n	8009ae6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8009b28 <UART_AdvFeatureConfig+0x15c>)
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	0019      	movs	r1, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009ac6:	2380      	movs	r3, #128	@ 0x80
 8009ac8:	035b      	lsls	r3, r3, #13
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d10b      	bne.n	8009ae6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	4a15      	ldr	r2, [pc, #84]	@ (8009b2c <UART_AdvFeatureConfig+0x160>)
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	0019      	movs	r1, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aea:	2280      	movs	r2, #128	@ 0x80
 8009aec:	4013      	ands	r3, r2
 8009aee:	d00b      	beq.n	8009b08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	4a0e      	ldr	r2, [pc, #56]	@ (8009b30 <UART_AdvFeatureConfig+0x164>)
 8009af8:	4013      	ands	r3, r2
 8009afa:	0019      	movs	r1, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	430a      	orrs	r2, r1
 8009b06:	605a      	str	r2, [r3, #4]
  }
}
 8009b08:	46c0      	nop			@ (mov r8, r8)
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	b002      	add	sp, #8
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	ffff7fff 	.word	0xffff7fff
 8009b14:	fffdffff 	.word	0xfffdffff
 8009b18:	fffeffff 	.word	0xfffeffff
 8009b1c:	fffbffff 	.word	0xfffbffff
 8009b20:	ffffefff 	.word	0xffffefff
 8009b24:	ffffdfff 	.word	0xffffdfff
 8009b28:	ffefffff 	.word	0xffefffff
 8009b2c:	ff9fffff 	.word	0xff9fffff
 8009b30:	fff7ffff 	.word	0xfff7ffff

08009b34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b092      	sub	sp, #72	@ 0x48
 8009b38:	af02      	add	r7, sp, #8
 8009b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2290      	movs	r2, #144	@ 0x90
 8009b40:	2100      	movs	r1, #0
 8009b42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b44:	f7fd fa24 	bl	8006f90 <HAL_GetTick>
 8009b48:	0003      	movs	r3, r0
 8009b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2208      	movs	r2, #8
 8009b54:	4013      	ands	r3, r2
 8009b56:	2b08      	cmp	r3, #8
 8009b58:	d12d      	bne.n	8009bb6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b5c:	2280      	movs	r2, #128	@ 0x80
 8009b5e:	0391      	lsls	r1, r2, #14
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	4a47      	ldr	r2, [pc, #284]	@ (8009c80 <UART_CheckIdleState+0x14c>)
 8009b64:	9200      	str	r2, [sp, #0]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f000 f88e 	bl	8009c88 <UART_WaitOnFlagUntilTimeout>
 8009b6c:	1e03      	subs	r3, r0, #0
 8009b6e:	d022      	beq.n	8009bb6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b70:	f3ef 8310 	mrs	r3, PRIMASK
 8009b74:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009b78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b80:	f383 8810 	msr	PRIMASK, r3
}
 8009b84:	46c0      	nop			@ (mov r8, r8)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2180      	movs	r1, #128	@ 0x80
 8009b92:	438a      	bics	r2, r1
 8009b94:	601a      	str	r2, [r3, #0]
 8009b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9c:	f383 8810 	msr	PRIMASK, r3
}
 8009ba0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2288      	movs	r2, #136	@ 0x88
 8009ba6:	2120      	movs	r1, #32
 8009ba8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2284      	movs	r2, #132	@ 0x84
 8009bae:	2100      	movs	r1, #0
 8009bb0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e060      	b.n	8009c78 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2204      	movs	r2, #4
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	2b04      	cmp	r3, #4
 8009bc2:	d146      	bne.n	8009c52 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bc6:	2280      	movs	r2, #128	@ 0x80
 8009bc8:	03d1      	lsls	r1, r2, #15
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8009c80 <UART_CheckIdleState+0x14c>)
 8009bce:	9200      	str	r2, [sp, #0]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f000 f859 	bl	8009c88 <UART_WaitOnFlagUntilTimeout>
 8009bd6:	1e03      	subs	r3, r0, #0
 8009bd8:	d03b      	beq.n	8009c52 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bda:	f3ef 8310 	mrs	r3, PRIMASK
 8009bde:	60fb      	str	r3, [r7, #12]
  return(result);
 8009be0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009be4:	2301      	movs	r3, #1
 8009be6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	f383 8810 	msr	PRIMASK, r3
}
 8009bee:	46c0      	nop			@ (mov r8, r8)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4922      	ldr	r1, [pc, #136]	@ (8009c84 <UART_CheckIdleState+0x150>)
 8009bfc:	400a      	ands	r2, r1
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	f383 8810 	msr	PRIMASK, r3
}
 8009c0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8009c10:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c12:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c14:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c16:	2301      	movs	r3, #1
 8009c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	f383 8810 	msr	PRIMASK, r3
}
 8009c20:	46c0      	nop			@ (mov r8, r8)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689a      	ldr	r2, [r3, #8]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	438a      	bics	r2, r1
 8009c30:	609a      	str	r2, [r3, #8]
 8009c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	f383 8810 	msr	PRIMASK, r3
}
 8009c3c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	228c      	movs	r2, #140	@ 0x8c
 8009c42:	2120      	movs	r1, #32
 8009c44:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2284      	movs	r2, #132	@ 0x84
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e012      	b.n	8009c78 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2288      	movs	r2, #136	@ 0x88
 8009c56:	2120      	movs	r1, #32
 8009c58:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	228c      	movs	r2, #140	@ 0x8c
 8009c5e:	2120      	movs	r1, #32
 8009c60:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2284      	movs	r2, #132	@ 0x84
 8009c72:	2100      	movs	r1, #0
 8009c74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	0018      	movs	r0, r3
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	b010      	add	sp, #64	@ 0x40
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	01ffffff 	.word	0x01ffffff
 8009c84:	fffffedf 	.word	0xfffffedf

08009c88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	603b      	str	r3, [r7, #0]
 8009c94:	1dfb      	adds	r3, r7, #7
 8009c96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c98:	e051      	b.n	8009d3e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	d04e      	beq.n	8009d3e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ca0:	f7fd f976 	bl	8006f90 <HAL_GetTick>
 8009ca4:	0002      	movs	r2, r0
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	69ba      	ldr	r2, [r7, #24]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d302      	bcc.n	8009cb6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d101      	bne.n	8009cba <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	e051      	b.n	8009d5e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2204      	movs	r2, #4
 8009cc2:	4013      	ands	r3, r2
 8009cc4:	d03b      	beq.n	8009d3e <UART_WaitOnFlagUntilTimeout+0xb6>
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	2b80      	cmp	r3, #128	@ 0x80
 8009cca:	d038      	beq.n	8009d3e <UART_WaitOnFlagUntilTimeout+0xb6>
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2b40      	cmp	r3, #64	@ 0x40
 8009cd0:	d035      	beq.n	8009d3e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	69db      	ldr	r3, [r3, #28]
 8009cd8:	2208      	movs	r2, #8
 8009cda:	4013      	ands	r3, r2
 8009cdc:	2b08      	cmp	r3, #8
 8009cde:	d111      	bne.n	8009d04 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2208      	movs	r2, #8
 8009ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	0018      	movs	r0, r3
 8009cec:	f000 f83c 	bl	8009d68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2290      	movs	r2, #144	@ 0x90
 8009cf4:	2108      	movs	r1, #8
 8009cf6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2284      	movs	r2, #132	@ 0x84
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e02c      	b.n	8009d5e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	69da      	ldr	r2, [r3, #28]
 8009d0a:	2380      	movs	r3, #128	@ 0x80
 8009d0c:	011b      	lsls	r3, r3, #4
 8009d0e:	401a      	ands	r2, r3
 8009d10:	2380      	movs	r3, #128	@ 0x80
 8009d12:	011b      	lsls	r3, r3, #4
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d112      	bne.n	8009d3e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2280      	movs	r2, #128	@ 0x80
 8009d1e:	0112      	lsls	r2, r2, #4
 8009d20:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	0018      	movs	r0, r3
 8009d26:	f000 f81f 	bl	8009d68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2290      	movs	r2, #144	@ 0x90
 8009d2e:	2120      	movs	r1, #32
 8009d30:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2284      	movs	r2, #132	@ 0x84
 8009d36:	2100      	movs	r1, #0
 8009d38:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e00f      	b.n	8009d5e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	69db      	ldr	r3, [r3, #28]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	4013      	ands	r3, r2
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	425a      	negs	r2, r3
 8009d4e:	4153      	adcs	r3, r2
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	001a      	movs	r2, r3
 8009d54:	1dfb      	adds	r3, r7, #7
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d09e      	beq.n	8009c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	0018      	movs	r0, r3
 8009d60:	46bd      	mov	sp, r7
 8009d62:	b004      	add	sp, #16
 8009d64:	bd80      	pop	{r7, pc}
	...

08009d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b08e      	sub	sp, #56	@ 0x38
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d70:	f3ef 8310 	mrs	r3, PRIMASK
 8009d74:	617b      	str	r3, [r7, #20]
  return(result);
 8009d76:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	f383 8810 	msr	PRIMASK, r3
}
 8009d84:	46c0      	nop			@ (mov r8, r8)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4926      	ldr	r1, [pc, #152]	@ (8009e2c <UART_EndRxTransfer+0xc4>)
 8009d92:	400a      	ands	r2, r1
 8009d94:	601a      	str	r2, [r3, #0]
 8009d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	f383 8810 	msr	PRIMASK, r3
}
 8009da0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009da2:	f3ef 8310 	mrs	r3, PRIMASK
 8009da6:	623b      	str	r3, [r7, #32]
  return(result);
 8009da8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009daa:	633b      	str	r3, [r7, #48]	@ 0x30
 8009dac:	2301      	movs	r3, #1
 8009dae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db2:	f383 8810 	msr	PRIMASK, r3
}
 8009db6:	46c0      	nop			@ (mov r8, r8)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	689a      	ldr	r2, [r3, #8]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	491b      	ldr	r1, [pc, #108]	@ (8009e30 <UART_EndRxTransfer+0xc8>)
 8009dc4:	400a      	ands	r2, r1
 8009dc6:	609a      	str	r2, [r3, #8]
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dce:	f383 8810 	msr	PRIMASK, r3
}
 8009dd2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d118      	bne.n	8009e0e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8009de0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009de2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009de6:	2301      	movs	r3, #1
 8009de8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f383 8810 	msr	PRIMASK, r3
}
 8009df0:	46c0      	nop			@ (mov r8, r8)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2110      	movs	r1, #16
 8009dfe:	438a      	bics	r2, r1
 8009e00:	601a      	str	r2, [r3, #0]
 8009e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f383 8810 	msr	PRIMASK, r3
}
 8009e0c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	228c      	movs	r2, #140	@ 0x8c
 8009e12:	2120      	movs	r1, #32
 8009e14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009e22:	46c0      	nop			@ (mov r8, r8)
 8009e24:	46bd      	mov	sp, r7
 8009e26:	b00e      	add	sp, #56	@ 0x38
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	46c0      	nop			@ (mov r8, r8)
 8009e2c:	fffffedf 	.word	0xfffffedf
 8009e30:	effffffe 	.word	0xeffffffe

08009e34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2284      	movs	r2, #132	@ 0x84
 8009e40:	5c9b      	ldrb	r3, [r3, r2]
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d101      	bne.n	8009e4a <HAL_UARTEx_DisableFifoMode+0x16>
 8009e46:	2302      	movs	r3, #2
 8009e48:	e027      	b.n	8009e9a <HAL_UARTEx_DisableFifoMode+0x66>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2284      	movs	r2, #132	@ 0x84
 8009e4e:	2101      	movs	r1, #1
 8009e50:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2288      	movs	r2, #136	@ 0x88
 8009e56:	2124      	movs	r1, #36	@ 0x24
 8009e58:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	438a      	bics	r2, r1
 8009e70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	4a0b      	ldr	r2, [pc, #44]	@ (8009ea4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8009e76:	4013      	ands	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2288      	movs	r2, #136	@ 0x88
 8009e8c:	2120      	movs	r1, #32
 8009e8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2284      	movs	r2, #132	@ 0x84
 8009e94:	2100      	movs	r1, #0
 8009e96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	0018      	movs	r0, r3
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	b004      	add	sp, #16
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	46c0      	nop			@ (mov r8, r8)
 8009ea4:	dfffffff 	.word	0xdfffffff

08009ea8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2284      	movs	r2, #132	@ 0x84
 8009eb6:	5c9b      	ldrb	r3, [r3, r2]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d101      	bne.n	8009ec0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	e02e      	b.n	8009f1e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2284      	movs	r2, #132	@ 0x84
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2288      	movs	r2, #136	@ 0x88
 8009ecc:	2124      	movs	r1, #36	@ 0x24
 8009ece:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2101      	movs	r1, #1
 8009ee4:	438a      	bics	r2, r1
 8009ee6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	08d9      	lsrs	r1, r3, #3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	430a      	orrs	r2, r1
 8009efa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	0018      	movs	r0, r3
 8009f00:	f000 f854 	bl	8009fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2288      	movs	r2, #136	@ 0x88
 8009f10:	2120      	movs	r1, #32
 8009f12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2284      	movs	r2, #132	@ 0x84
 8009f18:	2100      	movs	r1, #0
 8009f1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	0018      	movs	r0, r3
 8009f20:	46bd      	mov	sp, r7
 8009f22:	b004      	add	sp, #16
 8009f24:	bd80      	pop	{r7, pc}
	...

08009f28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2284      	movs	r2, #132	@ 0x84
 8009f36:	5c9b      	ldrb	r3, [r3, r2]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d101      	bne.n	8009f40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	e02f      	b.n	8009fa0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2284      	movs	r2, #132	@ 0x84
 8009f44:	2101      	movs	r1, #1
 8009f46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2288      	movs	r2, #136	@ 0x88
 8009f4c:	2124      	movs	r1, #36	@ 0x24
 8009f4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2101      	movs	r1, #1
 8009f64:	438a      	bics	r2, r1
 8009f66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	4a0e      	ldr	r2, [pc, #56]	@ (8009fa8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009f70:	4013      	ands	r3, r2
 8009f72:	0019      	movs	r1, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	683a      	ldr	r2, [r7, #0]
 8009f7a:	430a      	orrs	r2, r1
 8009f7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	0018      	movs	r0, r3
 8009f82:	f000 f813 	bl	8009fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2288      	movs	r2, #136	@ 0x88
 8009f92:	2120      	movs	r1, #32
 8009f94:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2284      	movs	r2, #132	@ 0x84
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	0018      	movs	r0, r3
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	b004      	add	sp, #16
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	f1ffffff 	.word	0xf1ffffff

08009fac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d108      	bne.n	8009fce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	226a      	movs	r2, #106	@ 0x6a
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2268      	movs	r2, #104	@ 0x68
 8009fc8:	2101      	movs	r1, #1
 8009fca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009fcc:	e043      	b.n	800a056 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009fce:	260f      	movs	r6, #15
 8009fd0:	19bb      	adds	r3, r7, r6
 8009fd2:	2208      	movs	r2, #8
 8009fd4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009fd6:	200e      	movs	r0, #14
 8009fd8:	183b      	adds	r3, r7, r0
 8009fda:	2208      	movs	r2, #8
 8009fdc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	0e5b      	lsrs	r3, r3, #25
 8009fe6:	b2da      	uxtb	r2, r3
 8009fe8:	240d      	movs	r4, #13
 8009fea:	193b      	adds	r3, r7, r4
 8009fec:	2107      	movs	r1, #7
 8009fee:	400a      	ands	r2, r1
 8009ff0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	0f5b      	lsrs	r3, r3, #29
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	250c      	movs	r5, #12
 8009ffe:	197b      	adds	r3, r7, r5
 800a000:	2107      	movs	r1, #7
 800a002:	400a      	ands	r2, r1
 800a004:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a006:	183b      	adds	r3, r7, r0
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	197a      	adds	r2, r7, r5
 800a00c:	7812      	ldrb	r2, [r2, #0]
 800a00e:	4914      	ldr	r1, [pc, #80]	@ (800a060 <UARTEx_SetNbDataToProcess+0xb4>)
 800a010:	5c8a      	ldrb	r2, [r1, r2]
 800a012:	435a      	muls	r2, r3
 800a014:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800a016:	197b      	adds	r3, r7, r5
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	4a12      	ldr	r2, [pc, #72]	@ (800a064 <UARTEx_SetNbDataToProcess+0xb8>)
 800a01c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a01e:	0019      	movs	r1, r3
 800a020:	f7f6 f920 	bl	8000264 <__divsi3>
 800a024:	0003      	movs	r3, r0
 800a026:	b299      	uxth	r1, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	226a      	movs	r2, #106	@ 0x6a
 800a02c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a02e:	19bb      	adds	r3, r7, r6
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	193a      	adds	r2, r7, r4
 800a034:	7812      	ldrb	r2, [r2, #0]
 800a036:	490a      	ldr	r1, [pc, #40]	@ (800a060 <UARTEx_SetNbDataToProcess+0xb4>)
 800a038:	5c8a      	ldrb	r2, [r1, r2]
 800a03a:	435a      	muls	r2, r3
 800a03c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800a03e:	193b      	adds	r3, r7, r4
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	4a08      	ldr	r2, [pc, #32]	@ (800a064 <UARTEx_SetNbDataToProcess+0xb8>)
 800a044:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a046:	0019      	movs	r1, r3
 800a048:	f7f6 f90c 	bl	8000264 <__divsi3>
 800a04c:	0003      	movs	r3, r0
 800a04e:	b299      	uxth	r1, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2268      	movs	r2, #104	@ 0x68
 800a054:	5299      	strh	r1, [r3, r2]
}
 800a056:	46c0      	nop			@ (mov r8, r8)
 800a058:	46bd      	mov	sp, r7
 800a05a:	b005      	add	sp, #20
 800a05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a05e:	46c0      	nop			@ (mov r8, r8)
 800a060:	0800e088 	.word	0x0800e088
 800a064:	0800e090 	.word	0x0800e090

0800a068 <__cvt>:
 800a068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a06a:	001f      	movs	r7, r3
 800a06c:	2300      	movs	r3, #0
 800a06e:	0016      	movs	r6, r2
 800a070:	b08b      	sub	sp, #44	@ 0x2c
 800a072:	429f      	cmp	r7, r3
 800a074:	da04      	bge.n	800a080 <__cvt+0x18>
 800a076:	2180      	movs	r1, #128	@ 0x80
 800a078:	0609      	lsls	r1, r1, #24
 800a07a:	187b      	adds	r3, r7, r1
 800a07c:	001f      	movs	r7, r3
 800a07e:	232d      	movs	r3, #45	@ 0x2d
 800a080:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a082:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a084:	7013      	strb	r3, [r2, #0]
 800a086:	2320      	movs	r3, #32
 800a088:	2203      	movs	r2, #3
 800a08a:	439d      	bics	r5, r3
 800a08c:	2d46      	cmp	r5, #70	@ 0x46
 800a08e:	d007      	beq.n	800a0a0 <__cvt+0x38>
 800a090:	002b      	movs	r3, r5
 800a092:	3b45      	subs	r3, #69	@ 0x45
 800a094:	4259      	negs	r1, r3
 800a096:	414b      	adcs	r3, r1
 800a098:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a09a:	3a01      	subs	r2, #1
 800a09c:	18cb      	adds	r3, r1, r3
 800a09e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0a0:	ab09      	add	r3, sp, #36	@ 0x24
 800a0a2:	9304      	str	r3, [sp, #16]
 800a0a4:	ab08      	add	r3, sp, #32
 800a0a6:	9303      	str	r3, [sp, #12]
 800a0a8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a0aa:	9200      	str	r2, [sp, #0]
 800a0ac:	9302      	str	r3, [sp, #8]
 800a0ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0b0:	0032      	movs	r2, r6
 800a0b2:	9301      	str	r3, [sp, #4]
 800a0b4:	003b      	movs	r3, r7
 800a0b6:	f000 ff5d 	bl	800af74 <_dtoa_r>
 800a0ba:	0004      	movs	r4, r0
 800a0bc:	2d47      	cmp	r5, #71	@ 0x47
 800a0be:	d11b      	bne.n	800a0f8 <__cvt+0x90>
 800a0c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0c2:	07db      	lsls	r3, r3, #31
 800a0c4:	d511      	bpl.n	800a0ea <__cvt+0x82>
 800a0c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0c8:	18c3      	adds	r3, r0, r3
 800a0ca:	9307      	str	r3, [sp, #28]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	0030      	movs	r0, r6
 800a0d2:	0039      	movs	r1, r7
 800a0d4:	f7f6 f9c2 	bl	800045c <__aeabi_dcmpeq>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d001      	beq.n	800a0e0 <__cvt+0x78>
 800a0dc:	9b07      	ldr	r3, [sp, #28]
 800a0de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0e0:	2230      	movs	r2, #48	@ 0x30
 800a0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e4:	9907      	ldr	r1, [sp, #28]
 800a0e6:	428b      	cmp	r3, r1
 800a0e8:	d320      	bcc.n	800a12c <__cvt+0xc4>
 800a0ea:	0020      	movs	r0, r4
 800a0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a0f0:	1b1b      	subs	r3, r3, r4
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	b00b      	add	sp, #44	@ 0x2c
 800a0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a0fa:	18c3      	adds	r3, r0, r3
 800a0fc:	9307      	str	r3, [sp, #28]
 800a0fe:	2d46      	cmp	r5, #70	@ 0x46
 800a100:	d1e4      	bne.n	800a0cc <__cvt+0x64>
 800a102:	7803      	ldrb	r3, [r0, #0]
 800a104:	2b30      	cmp	r3, #48	@ 0x30
 800a106:	d10c      	bne.n	800a122 <__cvt+0xba>
 800a108:	2200      	movs	r2, #0
 800a10a:	2300      	movs	r3, #0
 800a10c:	0030      	movs	r0, r6
 800a10e:	0039      	movs	r1, r7
 800a110:	f7f6 f9a4 	bl	800045c <__aeabi_dcmpeq>
 800a114:	2800      	cmp	r0, #0
 800a116:	d104      	bne.n	800a122 <__cvt+0xba>
 800a118:	2301      	movs	r3, #1
 800a11a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a11c:	1a9b      	subs	r3, r3, r2
 800a11e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a120:	6013      	str	r3, [r2, #0]
 800a122:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a124:	9a07      	ldr	r2, [sp, #28]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	18d3      	adds	r3, r2, r3
 800a12a:	e7ce      	b.n	800a0ca <__cvt+0x62>
 800a12c:	1c59      	adds	r1, r3, #1
 800a12e:	9109      	str	r1, [sp, #36]	@ 0x24
 800a130:	701a      	strb	r2, [r3, #0]
 800a132:	e7d6      	b.n	800a0e2 <__cvt+0x7a>

0800a134 <__exponent>:
 800a134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a136:	232b      	movs	r3, #43	@ 0x2b
 800a138:	b085      	sub	sp, #20
 800a13a:	0005      	movs	r5, r0
 800a13c:	1e0c      	subs	r4, r1, #0
 800a13e:	7002      	strb	r2, [r0, #0]
 800a140:	da01      	bge.n	800a146 <__exponent+0x12>
 800a142:	424c      	negs	r4, r1
 800a144:	3302      	adds	r3, #2
 800a146:	706b      	strb	r3, [r5, #1]
 800a148:	2c09      	cmp	r4, #9
 800a14a:	dd2c      	ble.n	800a1a6 <__exponent+0x72>
 800a14c:	ab02      	add	r3, sp, #8
 800a14e:	1dde      	adds	r6, r3, #7
 800a150:	0020      	movs	r0, r4
 800a152:	210a      	movs	r1, #10
 800a154:	f7f6 f96c 	bl	8000430 <__aeabi_idivmod>
 800a158:	0037      	movs	r7, r6
 800a15a:	3130      	adds	r1, #48	@ 0x30
 800a15c:	3e01      	subs	r6, #1
 800a15e:	0020      	movs	r0, r4
 800a160:	7031      	strb	r1, [r6, #0]
 800a162:	210a      	movs	r1, #10
 800a164:	9401      	str	r4, [sp, #4]
 800a166:	f7f6 f87d 	bl	8000264 <__divsi3>
 800a16a:	9b01      	ldr	r3, [sp, #4]
 800a16c:	0004      	movs	r4, r0
 800a16e:	2b63      	cmp	r3, #99	@ 0x63
 800a170:	dcee      	bgt.n	800a150 <__exponent+0x1c>
 800a172:	1eba      	subs	r2, r7, #2
 800a174:	1ca8      	adds	r0, r5, #2
 800a176:	0001      	movs	r1, r0
 800a178:	0013      	movs	r3, r2
 800a17a:	3430      	adds	r4, #48	@ 0x30
 800a17c:	7014      	strb	r4, [r2, #0]
 800a17e:	ac02      	add	r4, sp, #8
 800a180:	3407      	adds	r4, #7
 800a182:	429c      	cmp	r4, r3
 800a184:	d80a      	bhi.n	800a19c <__exponent+0x68>
 800a186:	2300      	movs	r3, #0
 800a188:	4294      	cmp	r4, r2
 800a18a:	d303      	bcc.n	800a194 <__exponent+0x60>
 800a18c:	3309      	adds	r3, #9
 800a18e:	aa02      	add	r2, sp, #8
 800a190:	189b      	adds	r3, r3, r2
 800a192:	1bdb      	subs	r3, r3, r7
 800a194:	18c0      	adds	r0, r0, r3
 800a196:	1b40      	subs	r0, r0, r5
 800a198:	b005      	add	sp, #20
 800a19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a19c:	781c      	ldrb	r4, [r3, #0]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	700c      	strb	r4, [r1, #0]
 800a1a2:	3101      	adds	r1, #1
 800a1a4:	e7eb      	b.n	800a17e <__exponent+0x4a>
 800a1a6:	2330      	movs	r3, #48	@ 0x30
 800a1a8:	18e4      	adds	r4, r4, r3
 800a1aa:	70ab      	strb	r3, [r5, #2]
 800a1ac:	1d28      	adds	r0, r5, #4
 800a1ae:	70ec      	strb	r4, [r5, #3]
 800a1b0:	e7f1      	b.n	800a196 <__exponent+0x62>
	...

0800a1b4 <_printf_float>:
 800a1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1b6:	b097      	sub	sp, #92	@ 0x5c
 800a1b8:	000d      	movs	r5, r1
 800a1ba:	920a      	str	r2, [sp, #40]	@ 0x28
 800a1bc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800a1be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1c0:	9009      	str	r0, [sp, #36]	@ 0x24
 800a1c2:	f000 fe09 	bl	800add8 <_localeconv_r>
 800a1c6:	6803      	ldr	r3, [r0, #0]
 800a1c8:	0018      	movs	r0, r3
 800a1ca:	930d      	str	r3, [sp, #52]	@ 0x34
 800a1cc:	f7f5 ffa4 	bl	8000118 <strlen>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a1d4:	9314      	str	r3, [sp, #80]	@ 0x50
 800a1d6:	7e2b      	ldrb	r3, [r5, #24]
 800a1d8:	2207      	movs	r2, #7
 800a1da:	930c      	str	r3, [sp, #48]	@ 0x30
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	930e      	str	r3, [sp, #56]	@ 0x38
 800a1e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a1e2:	6823      	ldr	r3, [r4, #0]
 800a1e4:	05c9      	lsls	r1, r1, #23
 800a1e6:	d545      	bpl.n	800a274 <_printf_float+0xc0>
 800a1e8:	189b      	adds	r3, r3, r2
 800a1ea:	4393      	bics	r3, r2
 800a1ec:	001a      	movs	r2, r3
 800a1ee:	3208      	adds	r2, #8
 800a1f0:	6022      	str	r2, [r4, #0]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	681e      	ldr	r6, [r3, #0]
 800a1f6:	685f      	ldr	r7, [r3, #4]
 800a1f8:	007b      	lsls	r3, r7, #1
 800a1fa:	085b      	lsrs	r3, r3, #1
 800a1fc:	9311      	str	r3, [sp, #68]	@ 0x44
 800a1fe:	9610      	str	r6, [sp, #64]	@ 0x40
 800a200:	64ae      	str	r6, [r5, #72]	@ 0x48
 800a202:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800a204:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a206:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a208:	4ba7      	ldr	r3, [pc, #668]	@ (800a4a8 <_printf_float+0x2f4>)
 800a20a:	4252      	negs	r2, r2
 800a20c:	f7f9 f9b6 	bl	800357c <__aeabi_dcmpun>
 800a210:	2800      	cmp	r0, #0
 800a212:	d131      	bne.n	800a278 <_printf_float+0xc4>
 800a214:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a216:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a218:	2201      	movs	r2, #1
 800a21a:	4ba3      	ldr	r3, [pc, #652]	@ (800a4a8 <_printf_float+0x2f4>)
 800a21c:	4252      	negs	r2, r2
 800a21e:	f7f6 f92d 	bl	800047c <__aeabi_dcmple>
 800a222:	2800      	cmp	r0, #0
 800a224:	d128      	bne.n	800a278 <_printf_float+0xc4>
 800a226:	2200      	movs	r2, #0
 800a228:	2300      	movs	r3, #0
 800a22a:	0030      	movs	r0, r6
 800a22c:	0039      	movs	r1, r7
 800a22e:	f7f6 f91b 	bl	8000468 <__aeabi_dcmplt>
 800a232:	2800      	cmp	r0, #0
 800a234:	d003      	beq.n	800a23e <_printf_float+0x8a>
 800a236:	002b      	movs	r3, r5
 800a238:	222d      	movs	r2, #45	@ 0x2d
 800a23a:	3343      	adds	r3, #67	@ 0x43
 800a23c:	701a      	strb	r2, [r3, #0]
 800a23e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a240:	4f9a      	ldr	r7, [pc, #616]	@ (800a4ac <_printf_float+0x2f8>)
 800a242:	2b47      	cmp	r3, #71	@ 0x47
 800a244:	d800      	bhi.n	800a248 <_printf_float+0x94>
 800a246:	4f9a      	ldr	r7, [pc, #616]	@ (800a4b0 <_printf_float+0x2fc>)
 800a248:	2303      	movs	r3, #3
 800a24a:	2400      	movs	r4, #0
 800a24c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a24e:	612b      	str	r3, [r5, #16]
 800a250:	3301      	adds	r3, #1
 800a252:	439a      	bics	r2, r3
 800a254:	602a      	str	r2, [r5, #0]
 800a256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a258:	0029      	movs	r1, r5
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a25e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a260:	aa15      	add	r2, sp, #84	@ 0x54
 800a262:	f000 f9e5 	bl	800a630 <_printf_common>
 800a266:	3001      	adds	r0, #1
 800a268:	d000      	beq.n	800a26c <_printf_float+0xb8>
 800a26a:	e09e      	b.n	800a3aa <_printf_float+0x1f6>
 800a26c:	2001      	movs	r0, #1
 800a26e:	4240      	negs	r0, r0
 800a270:	b017      	add	sp, #92	@ 0x5c
 800a272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a274:	3307      	adds	r3, #7
 800a276:	e7b8      	b.n	800a1ea <_printf_float+0x36>
 800a278:	0032      	movs	r2, r6
 800a27a:	003b      	movs	r3, r7
 800a27c:	0030      	movs	r0, r6
 800a27e:	0039      	movs	r1, r7
 800a280:	f7f9 f97c 	bl	800357c <__aeabi_dcmpun>
 800a284:	2800      	cmp	r0, #0
 800a286:	d00b      	beq.n	800a2a0 <_printf_float+0xec>
 800a288:	2f00      	cmp	r7, #0
 800a28a:	da03      	bge.n	800a294 <_printf_float+0xe0>
 800a28c:	002b      	movs	r3, r5
 800a28e:	222d      	movs	r2, #45	@ 0x2d
 800a290:	3343      	adds	r3, #67	@ 0x43
 800a292:	701a      	strb	r2, [r3, #0]
 800a294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a296:	4f87      	ldr	r7, [pc, #540]	@ (800a4b4 <_printf_float+0x300>)
 800a298:	2b47      	cmp	r3, #71	@ 0x47
 800a29a:	d8d5      	bhi.n	800a248 <_printf_float+0x94>
 800a29c:	4f86      	ldr	r7, [pc, #536]	@ (800a4b8 <_printf_float+0x304>)
 800a29e:	e7d3      	b.n	800a248 <_printf_float+0x94>
 800a2a0:	2220      	movs	r2, #32
 800a2a2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a2a4:	686b      	ldr	r3, [r5, #4]
 800a2a6:	4394      	bics	r4, r2
 800a2a8:	1c5a      	adds	r2, r3, #1
 800a2aa:	d146      	bne.n	800a33a <_printf_float+0x186>
 800a2ac:	3307      	adds	r3, #7
 800a2ae:	606b      	str	r3, [r5, #4]
 800a2b0:	2380      	movs	r3, #128	@ 0x80
 800a2b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2b4:	00db      	lsls	r3, r3, #3
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	602b      	str	r3, [r5, #0]
 800a2bc:	9206      	str	r2, [sp, #24]
 800a2be:	aa14      	add	r2, sp, #80	@ 0x50
 800a2c0:	9205      	str	r2, [sp, #20]
 800a2c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a2c4:	a90a      	add	r1, sp, #40	@ 0x28
 800a2c6:	9204      	str	r2, [sp, #16]
 800a2c8:	aa13      	add	r2, sp, #76	@ 0x4c
 800a2ca:	9203      	str	r2, [sp, #12]
 800a2cc:	2223      	movs	r2, #35	@ 0x23
 800a2ce:	1852      	adds	r2, r2, r1
 800a2d0:	9202      	str	r2, [sp, #8]
 800a2d2:	9301      	str	r3, [sp, #4]
 800a2d4:	686b      	ldr	r3, [r5, #4]
 800a2d6:	0032      	movs	r2, r6
 800a2d8:	9300      	str	r3, [sp, #0]
 800a2da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a2dc:	003b      	movs	r3, r7
 800a2de:	f7ff fec3 	bl	800a068 <__cvt>
 800a2e2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a2e4:	0007      	movs	r7, r0
 800a2e6:	2c47      	cmp	r4, #71	@ 0x47
 800a2e8:	d12d      	bne.n	800a346 <_printf_float+0x192>
 800a2ea:	1cd3      	adds	r3, r2, #3
 800a2ec:	db02      	blt.n	800a2f4 <_printf_float+0x140>
 800a2ee:	686b      	ldr	r3, [r5, #4]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	dd47      	ble.n	800a384 <_printf_float+0x1d0>
 800a2f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2f6:	3b02      	subs	r3, #2
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	930c      	str	r3, [sp, #48]	@ 0x30
 800a2fc:	0028      	movs	r0, r5
 800a2fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a300:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a302:	3901      	subs	r1, #1
 800a304:	3050      	adds	r0, #80	@ 0x50
 800a306:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a308:	f7ff ff14 	bl	800a134 <__exponent>
 800a30c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a30e:	0004      	movs	r4, r0
 800a310:	1813      	adds	r3, r2, r0
 800a312:	612b      	str	r3, [r5, #16]
 800a314:	2a01      	cmp	r2, #1
 800a316:	dc02      	bgt.n	800a31e <_printf_float+0x16a>
 800a318:	682a      	ldr	r2, [r5, #0]
 800a31a:	07d2      	lsls	r2, r2, #31
 800a31c:	d501      	bpl.n	800a322 <_printf_float+0x16e>
 800a31e:	3301      	adds	r3, #1
 800a320:	612b      	str	r3, [r5, #16]
 800a322:	2323      	movs	r3, #35	@ 0x23
 800a324:	aa0a      	add	r2, sp, #40	@ 0x28
 800a326:	189b      	adds	r3, r3, r2
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d100      	bne.n	800a330 <_printf_float+0x17c>
 800a32e:	e792      	b.n	800a256 <_printf_float+0xa2>
 800a330:	002b      	movs	r3, r5
 800a332:	222d      	movs	r2, #45	@ 0x2d
 800a334:	3343      	adds	r3, #67	@ 0x43
 800a336:	701a      	strb	r2, [r3, #0]
 800a338:	e78d      	b.n	800a256 <_printf_float+0xa2>
 800a33a:	2c47      	cmp	r4, #71	@ 0x47
 800a33c:	d1b8      	bne.n	800a2b0 <_printf_float+0xfc>
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1b6      	bne.n	800a2b0 <_printf_float+0xfc>
 800a342:	3301      	adds	r3, #1
 800a344:	e7b3      	b.n	800a2ae <_printf_float+0xfa>
 800a346:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a348:	2b65      	cmp	r3, #101	@ 0x65
 800a34a:	d9d7      	bls.n	800a2fc <_printf_float+0x148>
 800a34c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a34e:	2b66      	cmp	r3, #102	@ 0x66
 800a350:	d11a      	bne.n	800a388 <_printf_float+0x1d4>
 800a352:	686b      	ldr	r3, [r5, #4]
 800a354:	2a00      	cmp	r2, #0
 800a356:	dd09      	ble.n	800a36c <_printf_float+0x1b8>
 800a358:	612a      	str	r2, [r5, #16]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d102      	bne.n	800a364 <_printf_float+0x1b0>
 800a35e:	6829      	ldr	r1, [r5, #0]
 800a360:	07c9      	lsls	r1, r1, #31
 800a362:	d50b      	bpl.n	800a37c <_printf_float+0x1c8>
 800a364:	3301      	adds	r3, #1
 800a366:	189b      	adds	r3, r3, r2
 800a368:	612b      	str	r3, [r5, #16]
 800a36a:	e007      	b.n	800a37c <_printf_float+0x1c8>
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d103      	bne.n	800a378 <_printf_float+0x1c4>
 800a370:	2201      	movs	r2, #1
 800a372:	6829      	ldr	r1, [r5, #0]
 800a374:	4211      	tst	r1, r2
 800a376:	d000      	beq.n	800a37a <_printf_float+0x1c6>
 800a378:	1c9a      	adds	r2, r3, #2
 800a37a:	612a      	str	r2, [r5, #16]
 800a37c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a37e:	2400      	movs	r4, #0
 800a380:	65ab      	str	r3, [r5, #88]	@ 0x58
 800a382:	e7ce      	b.n	800a322 <_printf_float+0x16e>
 800a384:	2367      	movs	r3, #103	@ 0x67
 800a386:	930c      	str	r3, [sp, #48]	@ 0x30
 800a388:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a38a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a38c:	4299      	cmp	r1, r3
 800a38e:	db06      	blt.n	800a39e <_printf_float+0x1ea>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	6129      	str	r1, [r5, #16]
 800a394:	07db      	lsls	r3, r3, #31
 800a396:	d5f1      	bpl.n	800a37c <_printf_float+0x1c8>
 800a398:	3101      	adds	r1, #1
 800a39a:	6129      	str	r1, [r5, #16]
 800a39c:	e7ee      	b.n	800a37c <_printf_float+0x1c8>
 800a39e:	2201      	movs	r2, #1
 800a3a0:	2900      	cmp	r1, #0
 800a3a2:	dce0      	bgt.n	800a366 <_printf_float+0x1b2>
 800a3a4:	1892      	adds	r2, r2, r2
 800a3a6:	1a52      	subs	r2, r2, r1
 800a3a8:	e7dd      	b.n	800a366 <_printf_float+0x1b2>
 800a3aa:	682a      	ldr	r2, [r5, #0]
 800a3ac:	0553      	lsls	r3, r2, #21
 800a3ae:	d408      	bmi.n	800a3c2 <_printf_float+0x20e>
 800a3b0:	692b      	ldr	r3, [r5, #16]
 800a3b2:	003a      	movs	r2, r7
 800a3b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a3ba:	47a0      	blx	r4
 800a3bc:	3001      	adds	r0, #1
 800a3be:	d129      	bne.n	800a414 <_printf_float+0x260>
 800a3c0:	e754      	b.n	800a26c <_printf_float+0xb8>
 800a3c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3c4:	2b65      	cmp	r3, #101	@ 0x65
 800a3c6:	d800      	bhi.n	800a3ca <_printf_float+0x216>
 800a3c8:	e0db      	b.n	800a582 <_printf_float+0x3ce>
 800a3ca:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a3cc:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f7f6 f843 	bl	800045c <__aeabi_dcmpeq>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d033      	beq.n	800a442 <_printf_float+0x28e>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	4a37      	ldr	r2, [pc, #220]	@ (800a4bc <_printf_float+0x308>)
 800a3de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3e0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a3e4:	47a0      	blx	r4
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	d100      	bne.n	800a3ec <_printf_float+0x238>
 800a3ea:	e73f      	b.n	800a26c <_printf_float+0xb8>
 800a3ec:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a3ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a3f0:	42b3      	cmp	r3, r6
 800a3f2:	db02      	blt.n	800a3fa <_printf_float+0x246>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	07db      	lsls	r3, r3, #31
 800a3f8:	d50c      	bpl.n	800a414 <_printf_float+0x260>
 800a3fa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3fe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a400:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a402:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a404:	47a0      	blx	r4
 800a406:	2400      	movs	r4, #0
 800a408:	3001      	adds	r0, #1
 800a40a:	d100      	bne.n	800a40e <_printf_float+0x25a>
 800a40c:	e72e      	b.n	800a26c <_printf_float+0xb8>
 800a40e:	1e73      	subs	r3, r6, #1
 800a410:	42a3      	cmp	r3, r4
 800a412:	dc0a      	bgt.n	800a42a <_printf_float+0x276>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	079b      	lsls	r3, r3, #30
 800a418:	d500      	bpl.n	800a41c <_printf_float+0x268>
 800a41a:	e106      	b.n	800a62a <_printf_float+0x476>
 800a41c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a41e:	68e8      	ldr	r0, [r5, #12]
 800a420:	4298      	cmp	r0, r3
 800a422:	db00      	blt.n	800a426 <_printf_float+0x272>
 800a424:	e724      	b.n	800a270 <_printf_float+0xbc>
 800a426:	0018      	movs	r0, r3
 800a428:	e722      	b.n	800a270 <_printf_float+0xbc>
 800a42a:	002a      	movs	r2, r5
 800a42c:	2301      	movs	r3, #1
 800a42e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a430:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a432:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a434:	321a      	adds	r2, #26
 800a436:	47b8      	blx	r7
 800a438:	3001      	adds	r0, #1
 800a43a:	d100      	bne.n	800a43e <_printf_float+0x28a>
 800a43c:	e716      	b.n	800a26c <_printf_float+0xb8>
 800a43e:	3401      	adds	r4, #1
 800a440:	e7e5      	b.n	800a40e <_printf_float+0x25a>
 800a442:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a444:	2b00      	cmp	r3, #0
 800a446:	dc3b      	bgt.n	800a4c0 <_printf_float+0x30c>
 800a448:	2301      	movs	r3, #1
 800a44a:	4a1c      	ldr	r2, [pc, #112]	@ (800a4bc <_printf_float+0x308>)
 800a44c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a44e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a450:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a452:	47a0      	blx	r4
 800a454:	3001      	adds	r0, #1
 800a456:	d100      	bne.n	800a45a <_printf_float+0x2a6>
 800a458:	e708      	b.n	800a26c <_printf_float+0xb8>
 800a45a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800a45c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a45e:	4333      	orrs	r3, r6
 800a460:	d102      	bne.n	800a468 <_printf_float+0x2b4>
 800a462:	682b      	ldr	r3, [r5, #0]
 800a464:	07db      	lsls	r3, r3, #31
 800a466:	d5d5      	bpl.n	800a414 <_printf_float+0x260>
 800a468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a46a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a46c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a46e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a470:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a472:	47a0      	blx	r4
 800a474:	2300      	movs	r3, #0
 800a476:	3001      	adds	r0, #1
 800a478:	d100      	bne.n	800a47c <_printf_float+0x2c8>
 800a47a:	e6f7      	b.n	800a26c <_printf_float+0xb8>
 800a47c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a47e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a480:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a482:	425b      	negs	r3, r3
 800a484:	4293      	cmp	r3, r2
 800a486:	dc01      	bgt.n	800a48c <_printf_float+0x2d8>
 800a488:	0033      	movs	r3, r6
 800a48a:	e792      	b.n	800a3b2 <_printf_float+0x1fe>
 800a48c:	002a      	movs	r2, r5
 800a48e:	2301      	movs	r3, #1
 800a490:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a494:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a496:	321a      	adds	r2, #26
 800a498:	47a0      	blx	r4
 800a49a:	3001      	adds	r0, #1
 800a49c:	d100      	bne.n	800a4a0 <_printf_float+0x2ec>
 800a49e:	e6e5      	b.n	800a26c <_printf_float+0xb8>
 800a4a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	e7ea      	b.n	800a47c <_printf_float+0x2c8>
 800a4a6:	46c0      	nop			@ (mov r8, r8)
 800a4a8:	7fefffff 	.word	0x7fefffff
 800a4ac:	0800e09c 	.word	0x0800e09c
 800a4b0:	0800e098 	.word	0x0800e098
 800a4b4:	0800e0a4 	.word	0x0800e0a4
 800a4b8:	0800e0a0 	.word	0x0800e0a0
 800a4bc:	0800e214 	.word	0x0800e214
 800a4c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a4c2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a4c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a4c6:	429e      	cmp	r6, r3
 800a4c8:	dd00      	ble.n	800a4cc <_printf_float+0x318>
 800a4ca:	001e      	movs	r6, r3
 800a4cc:	2e00      	cmp	r6, #0
 800a4ce:	dc31      	bgt.n	800a534 <_printf_float+0x380>
 800a4d0:	43f3      	mvns	r3, r6
 800a4d2:	2400      	movs	r4, #0
 800a4d4:	17db      	asrs	r3, r3, #31
 800a4d6:	4033      	ands	r3, r6
 800a4d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a4da:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a4dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4de:	1af3      	subs	r3, r6, r3
 800a4e0:	42a3      	cmp	r3, r4
 800a4e2:	dc30      	bgt.n	800a546 <_printf_float+0x392>
 800a4e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a4e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	dc38      	bgt.n	800a55e <_printf_float+0x3aa>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	07db      	lsls	r3, r3, #31
 800a4f0:	d435      	bmi.n	800a55e <_printf_float+0x3aa>
 800a4f2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a4f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a4f8:	1b9b      	subs	r3, r3, r6
 800a4fa:	1b14      	subs	r4, r2, r4
 800a4fc:	429c      	cmp	r4, r3
 800a4fe:	dd00      	ble.n	800a502 <_printf_float+0x34e>
 800a500:	001c      	movs	r4, r3
 800a502:	2c00      	cmp	r4, #0
 800a504:	dc34      	bgt.n	800a570 <_printf_float+0x3bc>
 800a506:	43e3      	mvns	r3, r4
 800a508:	2600      	movs	r6, #0
 800a50a:	17db      	asrs	r3, r3, #31
 800a50c:	401c      	ands	r4, r3
 800a50e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a510:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a512:	1ad3      	subs	r3, r2, r3
 800a514:	1b1b      	subs	r3, r3, r4
 800a516:	42b3      	cmp	r3, r6
 800a518:	dc00      	bgt.n	800a51c <_printf_float+0x368>
 800a51a:	e77b      	b.n	800a414 <_printf_float+0x260>
 800a51c:	002a      	movs	r2, r5
 800a51e:	2301      	movs	r3, #1
 800a520:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a524:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a526:	321a      	adds	r2, #26
 800a528:	47b8      	blx	r7
 800a52a:	3001      	adds	r0, #1
 800a52c:	d100      	bne.n	800a530 <_printf_float+0x37c>
 800a52e:	e69d      	b.n	800a26c <_printf_float+0xb8>
 800a530:	3601      	adds	r6, #1
 800a532:	e7ec      	b.n	800a50e <_printf_float+0x35a>
 800a534:	0033      	movs	r3, r6
 800a536:	003a      	movs	r2, r7
 800a538:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a53a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a53c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a53e:	47a0      	blx	r4
 800a540:	3001      	adds	r0, #1
 800a542:	d1c5      	bne.n	800a4d0 <_printf_float+0x31c>
 800a544:	e692      	b.n	800a26c <_printf_float+0xb8>
 800a546:	002a      	movs	r2, r5
 800a548:	2301      	movs	r3, #1
 800a54a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a54c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a54e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a550:	321a      	adds	r2, #26
 800a552:	47b0      	blx	r6
 800a554:	3001      	adds	r0, #1
 800a556:	d100      	bne.n	800a55a <_printf_float+0x3a6>
 800a558:	e688      	b.n	800a26c <_printf_float+0xb8>
 800a55a:	3401      	adds	r4, #1
 800a55c:	e7bd      	b.n	800a4da <_printf_float+0x326>
 800a55e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a560:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a562:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a564:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a566:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800a568:	47a0      	blx	r4
 800a56a:	3001      	adds	r0, #1
 800a56c:	d1c1      	bne.n	800a4f2 <_printf_float+0x33e>
 800a56e:	e67d      	b.n	800a26c <_printf_float+0xb8>
 800a570:	19ba      	adds	r2, r7, r6
 800a572:	0023      	movs	r3, r4
 800a574:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a578:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a57a:	47b0      	blx	r6
 800a57c:	3001      	adds	r0, #1
 800a57e:	d1c2      	bne.n	800a506 <_printf_float+0x352>
 800a580:	e674      	b.n	800a26c <_printf_float+0xb8>
 800a582:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a584:	930c      	str	r3, [sp, #48]	@ 0x30
 800a586:	2b01      	cmp	r3, #1
 800a588:	dc02      	bgt.n	800a590 <_printf_float+0x3dc>
 800a58a:	2301      	movs	r3, #1
 800a58c:	421a      	tst	r2, r3
 800a58e:	d039      	beq.n	800a604 <_printf_float+0x450>
 800a590:	2301      	movs	r3, #1
 800a592:	003a      	movs	r2, r7
 800a594:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a596:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a598:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a59a:	47b0      	blx	r6
 800a59c:	3001      	adds	r0, #1
 800a59e:	d100      	bne.n	800a5a2 <_printf_float+0x3ee>
 800a5a0:	e664      	b.n	800a26c <_printf_float+0xb8>
 800a5a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a5a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5aa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a5ac:	47b0      	blx	r6
 800a5ae:	3001      	adds	r0, #1
 800a5b0:	d100      	bne.n	800a5b4 <_printf_float+0x400>
 800a5b2:	e65b      	b.n	800a26c <_printf_float+0xb8>
 800a5b4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800a5b6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a5b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	930c      	str	r3, [sp, #48]	@ 0x30
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f7f5 ff4b 	bl	800045c <__aeabi_dcmpeq>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d11a      	bne.n	800a600 <_printf_float+0x44c>
 800a5ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a5cc:	1c7a      	adds	r2, r7, #1
 800a5ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5d2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a5d4:	47b0      	blx	r6
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	d10e      	bne.n	800a5f8 <_printf_float+0x444>
 800a5da:	e647      	b.n	800a26c <_printf_float+0xb8>
 800a5dc:	002a      	movs	r2, r5
 800a5de:	2301      	movs	r3, #1
 800a5e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5e4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a5e6:	321a      	adds	r2, #26
 800a5e8:	47b8      	blx	r7
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	d100      	bne.n	800a5f0 <_printf_float+0x43c>
 800a5ee:	e63d      	b.n	800a26c <_printf_float+0xb8>
 800a5f0:	3601      	adds	r6, #1
 800a5f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a5f4:	429e      	cmp	r6, r3
 800a5f6:	dbf1      	blt.n	800a5dc <_printf_float+0x428>
 800a5f8:	002a      	movs	r2, r5
 800a5fa:	0023      	movs	r3, r4
 800a5fc:	3250      	adds	r2, #80	@ 0x50
 800a5fe:	e6d9      	b.n	800a3b4 <_printf_float+0x200>
 800a600:	2600      	movs	r6, #0
 800a602:	e7f6      	b.n	800a5f2 <_printf_float+0x43e>
 800a604:	003a      	movs	r2, r7
 800a606:	e7e2      	b.n	800a5ce <_printf_float+0x41a>
 800a608:	002a      	movs	r2, r5
 800a60a:	2301      	movs	r3, #1
 800a60c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a60e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a610:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a612:	3219      	adds	r2, #25
 800a614:	47b0      	blx	r6
 800a616:	3001      	adds	r0, #1
 800a618:	d100      	bne.n	800a61c <_printf_float+0x468>
 800a61a:	e627      	b.n	800a26c <_printf_float+0xb8>
 800a61c:	3401      	adds	r4, #1
 800a61e:	68eb      	ldr	r3, [r5, #12]
 800a620:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a622:	1a9b      	subs	r3, r3, r2
 800a624:	42a3      	cmp	r3, r4
 800a626:	dcef      	bgt.n	800a608 <_printf_float+0x454>
 800a628:	e6f8      	b.n	800a41c <_printf_float+0x268>
 800a62a:	2400      	movs	r4, #0
 800a62c:	e7f7      	b.n	800a61e <_printf_float+0x46a>
 800a62e:	46c0      	nop			@ (mov r8, r8)

0800a630 <_printf_common>:
 800a630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a632:	0016      	movs	r6, r2
 800a634:	9301      	str	r3, [sp, #4]
 800a636:	688a      	ldr	r2, [r1, #8]
 800a638:	690b      	ldr	r3, [r1, #16]
 800a63a:	000c      	movs	r4, r1
 800a63c:	9000      	str	r0, [sp, #0]
 800a63e:	4293      	cmp	r3, r2
 800a640:	da00      	bge.n	800a644 <_printf_common+0x14>
 800a642:	0013      	movs	r3, r2
 800a644:	0022      	movs	r2, r4
 800a646:	6033      	str	r3, [r6, #0]
 800a648:	3243      	adds	r2, #67	@ 0x43
 800a64a:	7812      	ldrb	r2, [r2, #0]
 800a64c:	2a00      	cmp	r2, #0
 800a64e:	d001      	beq.n	800a654 <_printf_common+0x24>
 800a650:	3301      	adds	r3, #1
 800a652:	6033      	str	r3, [r6, #0]
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	069b      	lsls	r3, r3, #26
 800a658:	d502      	bpl.n	800a660 <_printf_common+0x30>
 800a65a:	6833      	ldr	r3, [r6, #0]
 800a65c:	3302      	adds	r3, #2
 800a65e:	6033      	str	r3, [r6, #0]
 800a660:	6822      	ldr	r2, [r4, #0]
 800a662:	2306      	movs	r3, #6
 800a664:	0015      	movs	r5, r2
 800a666:	401d      	ands	r5, r3
 800a668:	421a      	tst	r2, r3
 800a66a:	d027      	beq.n	800a6bc <_printf_common+0x8c>
 800a66c:	0023      	movs	r3, r4
 800a66e:	3343      	adds	r3, #67	@ 0x43
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	1e5a      	subs	r2, r3, #1
 800a674:	4193      	sbcs	r3, r2
 800a676:	6822      	ldr	r2, [r4, #0]
 800a678:	0692      	lsls	r2, r2, #26
 800a67a:	d430      	bmi.n	800a6de <_printf_common+0xae>
 800a67c:	0022      	movs	r2, r4
 800a67e:	9901      	ldr	r1, [sp, #4]
 800a680:	9800      	ldr	r0, [sp, #0]
 800a682:	9d08      	ldr	r5, [sp, #32]
 800a684:	3243      	adds	r2, #67	@ 0x43
 800a686:	47a8      	blx	r5
 800a688:	3001      	adds	r0, #1
 800a68a:	d025      	beq.n	800a6d8 <_printf_common+0xa8>
 800a68c:	2206      	movs	r2, #6
 800a68e:	6823      	ldr	r3, [r4, #0]
 800a690:	2500      	movs	r5, #0
 800a692:	4013      	ands	r3, r2
 800a694:	2b04      	cmp	r3, #4
 800a696:	d105      	bne.n	800a6a4 <_printf_common+0x74>
 800a698:	6833      	ldr	r3, [r6, #0]
 800a69a:	68e5      	ldr	r5, [r4, #12]
 800a69c:	1aed      	subs	r5, r5, r3
 800a69e:	43eb      	mvns	r3, r5
 800a6a0:	17db      	asrs	r3, r3, #31
 800a6a2:	401d      	ands	r5, r3
 800a6a4:	68a3      	ldr	r3, [r4, #8]
 800a6a6:	6922      	ldr	r2, [r4, #16]
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	dd01      	ble.n	800a6b0 <_printf_common+0x80>
 800a6ac:	1a9b      	subs	r3, r3, r2
 800a6ae:	18ed      	adds	r5, r5, r3
 800a6b0:	2600      	movs	r6, #0
 800a6b2:	42b5      	cmp	r5, r6
 800a6b4:	d120      	bne.n	800a6f8 <_printf_common+0xc8>
 800a6b6:	2000      	movs	r0, #0
 800a6b8:	e010      	b.n	800a6dc <_printf_common+0xac>
 800a6ba:	3501      	adds	r5, #1
 800a6bc:	68e3      	ldr	r3, [r4, #12]
 800a6be:	6832      	ldr	r2, [r6, #0]
 800a6c0:	1a9b      	subs	r3, r3, r2
 800a6c2:	42ab      	cmp	r3, r5
 800a6c4:	ddd2      	ble.n	800a66c <_printf_common+0x3c>
 800a6c6:	0022      	movs	r2, r4
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	9901      	ldr	r1, [sp, #4]
 800a6cc:	9800      	ldr	r0, [sp, #0]
 800a6ce:	9f08      	ldr	r7, [sp, #32]
 800a6d0:	3219      	adds	r2, #25
 800a6d2:	47b8      	blx	r7
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	d1f0      	bne.n	800a6ba <_printf_common+0x8a>
 800a6d8:	2001      	movs	r0, #1
 800a6da:	4240      	negs	r0, r0
 800a6dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a6de:	2030      	movs	r0, #48	@ 0x30
 800a6e0:	18e1      	adds	r1, r4, r3
 800a6e2:	3143      	adds	r1, #67	@ 0x43
 800a6e4:	7008      	strb	r0, [r1, #0]
 800a6e6:	0021      	movs	r1, r4
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	3145      	adds	r1, #69	@ 0x45
 800a6ec:	7809      	ldrb	r1, [r1, #0]
 800a6ee:	18a2      	adds	r2, r4, r2
 800a6f0:	3243      	adds	r2, #67	@ 0x43
 800a6f2:	3302      	adds	r3, #2
 800a6f4:	7011      	strb	r1, [r2, #0]
 800a6f6:	e7c1      	b.n	800a67c <_printf_common+0x4c>
 800a6f8:	0022      	movs	r2, r4
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	9901      	ldr	r1, [sp, #4]
 800a6fe:	9800      	ldr	r0, [sp, #0]
 800a700:	9f08      	ldr	r7, [sp, #32]
 800a702:	321a      	adds	r2, #26
 800a704:	47b8      	blx	r7
 800a706:	3001      	adds	r0, #1
 800a708:	d0e6      	beq.n	800a6d8 <_printf_common+0xa8>
 800a70a:	3601      	adds	r6, #1
 800a70c:	e7d1      	b.n	800a6b2 <_printf_common+0x82>
	...

0800a710 <_printf_i>:
 800a710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a712:	b08b      	sub	sp, #44	@ 0x2c
 800a714:	9206      	str	r2, [sp, #24]
 800a716:	000a      	movs	r2, r1
 800a718:	3243      	adds	r2, #67	@ 0x43
 800a71a:	9307      	str	r3, [sp, #28]
 800a71c:	9005      	str	r0, [sp, #20]
 800a71e:	9203      	str	r2, [sp, #12]
 800a720:	7e0a      	ldrb	r2, [r1, #24]
 800a722:	000c      	movs	r4, r1
 800a724:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a726:	2a78      	cmp	r2, #120	@ 0x78
 800a728:	d809      	bhi.n	800a73e <_printf_i+0x2e>
 800a72a:	2a62      	cmp	r2, #98	@ 0x62
 800a72c:	d80b      	bhi.n	800a746 <_printf_i+0x36>
 800a72e:	2a00      	cmp	r2, #0
 800a730:	d100      	bne.n	800a734 <_printf_i+0x24>
 800a732:	e0ba      	b.n	800a8aa <_printf_i+0x19a>
 800a734:	497a      	ldr	r1, [pc, #488]	@ (800a920 <_printf_i+0x210>)
 800a736:	9104      	str	r1, [sp, #16]
 800a738:	2a58      	cmp	r2, #88	@ 0x58
 800a73a:	d100      	bne.n	800a73e <_printf_i+0x2e>
 800a73c:	e08e      	b.n	800a85c <_printf_i+0x14c>
 800a73e:	0025      	movs	r5, r4
 800a740:	3542      	adds	r5, #66	@ 0x42
 800a742:	702a      	strb	r2, [r5, #0]
 800a744:	e022      	b.n	800a78c <_printf_i+0x7c>
 800a746:	0010      	movs	r0, r2
 800a748:	3863      	subs	r0, #99	@ 0x63
 800a74a:	2815      	cmp	r0, #21
 800a74c:	d8f7      	bhi.n	800a73e <_printf_i+0x2e>
 800a74e:	f7f5 fcf5 	bl	800013c <__gnu_thumb1_case_shi>
 800a752:	0016      	.short	0x0016
 800a754:	fff6001f 	.word	0xfff6001f
 800a758:	fff6fff6 	.word	0xfff6fff6
 800a75c:	001ffff6 	.word	0x001ffff6
 800a760:	fff6fff6 	.word	0xfff6fff6
 800a764:	fff6fff6 	.word	0xfff6fff6
 800a768:	0036009f 	.word	0x0036009f
 800a76c:	fff6007e 	.word	0xfff6007e
 800a770:	00b0fff6 	.word	0x00b0fff6
 800a774:	0036fff6 	.word	0x0036fff6
 800a778:	fff6fff6 	.word	0xfff6fff6
 800a77c:	0082      	.short	0x0082
 800a77e:	0025      	movs	r5, r4
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	3542      	adds	r5, #66	@ 0x42
 800a784:	1d11      	adds	r1, r2, #4
 800a786:	6019      	str	r1, [r3, #0]
 800a788:	6813      	ldr	r3, [r2, #0]
 800a78a:	702b      	strb	r3, [r5, #0]
 800a78c:	2301      	movs	r3, #1
 800a78e:	e09e      	b.n	800a8ce <_printf_i+0x1be>
 800a790:	6818      	ldr	r0, [r3, #0]
 800a792:	6809      	ldr	r1, [r1, #0]
 800a794:	1d02      	adds	r2, r0, #4
 800a796:	060d      	lsls	r5, r1, #24
 800a798:	d50b      	bpl.n	800a7b2 <_printf_i+0xa2>
 800a79a:	6806      	ldr	r6, [r0, #0]
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	2e00      	cmp	r6, #0
 800a7a0:	da03      	bge.n	800a7aa <_printf_i+0x9a>
 800a7a2:	232d      	movs	r3, #45	@ 0x2d
 800a7a4:	9a03      	ldr	r2, [sp, #12]
 800a7a6:	4276      	negs	r6, r6
 800a7a8:	7013      	strb	r3, [r2, #0]
 800a7aa:	4b5d      	ldr	r3, [pc, #372]	@ (800a920 <_printf_i+0x210>)
 800a7ac:	270a      	movs	r7, #10
 800a7ae:	9304      	str	r3, [sp, #16]
 800a7b0:	e018      	b.n	800a7e4 <_printf_i+0xd4>
 800a7b2:	6806      	ldr	r6, [r0, #0]
 800a7b4:	601a      	str	r2, [r3, #0]
 800a7b6:	0649      	lsls	r1, r1, #25
 800a7b8:	d5f1      	bpl.n	800a79e <_printf_i+0x8e>
 800a7ba:	b236      	sxth	r6, r6
 800a7bc:	e7ef      	b.n	800a79e <_printf_i+0x8e>
 800a7be:	6808      	ldr	r0, [r1, #0]
 800a7c0:	6819      	ldr	r1, [r3, #0]
 800a7c2:	c940      	ldmia	r1!, {r6}
 800a7c4:	0605      	lsls	r5, r0, #24
 800a7c6:	d402      	bmi.n	800a7ce <_printf_i+0xbe>
 800a7c8:	0640      	lsls	r0, r0, #25
 800a7ca:	d500      	bpl.n	800a7ce <_printf_i+0xbe>
 800a7cc:	b2b6      	uxth	r6, r6
 800a7ce:	6019      	str	r1, [r3, #0]
 800a7d0:	4b53      	ldr	r3, [pc, #332]	@ (800a920 <_printf_i+0x210>)
 800a7d2:	270a      	movs	r7, #10
 800a7d4:	9304      	str	r3, [sp, #16]
 800a7d6:	2a6f      	cmp	r2, #111	@ 0x6f
 800a7d8:	d100      	bne.n	800a7dc <_printf_i+0xcc>
 800a7da:	3f02      	subs	r7, #2
 800a7dc:	0023      	movs	r3, r4
 800a7de:	2200      	movs	r2, #0
 800a7e0:	3343      	adds	r3, #67	@ 0x43
 800a7e2:	701a      	strb	r2, [r3, #0]
 800a7e4:	6863      	ldr	r3, [r4, #4]
 800a7e6:	60a3      	str	r3, [r4, #8]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	db06      	blt.n	800a7fa <_printf_i+0xea>
 800a7ec:	2104      	movs	r1, #4
 800a7ee:	6822      	ldr	r2, [r4, #0]
 800a7f0:	9d03      	ldr	r5, [sp, #12]
 800a7f2:	438a      	bics	r2, r1
 800a7f4:	6022      	str	r2, [r4, #0]
 800a7f6:	4333      	orrs	r3, r6
 800a7f8:	d00c      	beq.n	800a814 <_printf_i+0x104>
 800a7fa:	9d03      	ldr	r5, [sp, #12]
 800a7fc:	0030      	movs	r0, r6
 800a7fe:	0039      	movs	r1, r7
 800a800:	f7f5 fd2c 	bl	800025c <__aeabi_uidivmod>
 800a804:	9b04      	ldr	r3, [sp, #16]
 800a806:	3d01      	subs	r5, #1
 800a808:	5c5b      	ldrb	r3, [r3, r1]
 800a80a:	702b      	strb	r3, [r5, #0]
 800a80c:	0033      	movs	r3, r6
 800a80e:	0006      	movs	r6, r0
 800a810:	429f      	cmp	r7, r3
 800a812:	d9f3      	bls.n	800a7fc <_printf_i+0xec>
 800a814:	2f08      	cmp	r7, #8
 800a816:	d109      	bne.n	800a82c <_printf_i+0x11c>
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	07db      	lsls	r3, r3, #31
 800a81c:	d506      	bpl.n	800a82c <_printf_i+0x11c>
 800a81e:	6862      	ldr	r2, [r4, #4]
 800a820:	6923      	ldr	r3, [r4, #16]
 800a822:	429a      	cmp	r2, r3
 800a824:	dc02      	bgt.n	800a82c <_printf_i+0x11c>
 800a826:	2330      	movs	r3, #48	@ 0x30
 800a828:	3d01      	subs	r5, #1
 800a82a:	702b      	strb	r3, [r5, #0]
 800a82c:	9b03      	ldr	r3, [sp, #12]
 800a82e:	1b5b      	subs	r3, r3, r5
 800a830:	6123      	str	r3, [r4, #16]
 800a832:	9b07      	ldr	r3, [sp, #28]
 800a834:	0021      	movs	r1, r4
 800a836:	9300      	str	r3, [sp, #0]
 800a838:	9805      	ldr	r0, [sp, #20]
 800a83a:	9b06      	ldr	r3, [sp, #24]
 800a83c:	aa09      	add	r2, sp, #36	@ 0x24
 800a83e:	f7ff fef7 	bl	800a630 <_printf_common>
 800a842:	3001      	adds	r0, #1
 800a844:	d148      	bne.n	800a8d8 <_printf_i+0x1c8>
 800a846:	2001      	movs	r0, #1
 800a848:	4240      	negs	r0, r0
 800a84a:	b00b      	add	sp, #44	@ 0x2c
 800a84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a84e:	2220      	movs	r2, #32
 800a850:	6809      	ldr	r1, [r1, #0]
 800a852:	430a      	orrs	r2, r1
 800a854:	6022      	str	r2, [r4, #0]
 800a856:	2278      	movs	r2, #120	@ 0x78
 800a858:	4932      	ldr	r1, [pc, #200]	@ (800a924 <_printf_i+0x214>)
 800a85a:	9104      	str	r1, [sp, #16]
 800a85c:	0021      	movs	r1, r4
 800a85e:	3145      	adds	r1, #69	@ 0x45
 800a860:	700a      	strb	r2, [r1, #0]
 800a862:	6819      	ldr	r1, [r3, #0]
 800a864:	6822      	ldr	r2, [r4, #0]
 800a866:	c940      	ldmia	r1!, {r6}
 800a868:	0610      	lsls	r0, r2, #24
 800a86a:	d402      	bmi.n	800a872 <_printf_i+0x162>
 800a86c:	0650      	lsls	r0, r2, #25
 800a86e:	d500      	bpl.n	800a872 <_printf_i+0x162>
 800a870:	b2b6      	uxth	r6, r6
 800a872:	6019      	str	r1, [r3, #0]
 800a874:	07d3      	lsls	r3, r2, #31
 800a876:	d502      	bpl.n	800a87e <_printf_i+0x16e>
 800a878:	2320      	movs	r3, #32
 800a87a:	4313      	orrs	r3, r2
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	2e00      	cmp	r6, #0
 800a880:	d001      	beq.n	800a886 <_printf_i+0x176>
 800a882:	2710      	movs	r7, #16
 800a884:	e7aa      	b.n	800a7dc <_printf_i+0xcc>
 800a886:	2220      	movs	r2, #32
 800a888:	6823      	ldr	r3, [r4, #0]
 800a88a:	4393      	bics	r3, r2
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	e7f8      	b.n	800a882 <_printf_i+0x172>
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	680d      	ldr	r5, [r1, #0]
 800a894:	1d10      	adds	r0, r2, #4
 800a896:	6949      	ldr	r1, [r1, #20]
 800a898:	6018      	str	r0, [r3, #0]
 800a89a:	6813      	ldr	r3, [r2, #0]
 800a89c:	062e      	lsls	r6, r5, #24
 800a89e:	d501      	bpl.n	800a8a4 <_printf_i+0x194>
 800a8a0:	6019      	str	r1, [r3, #0]
 800a8a2:	e002      	b.n	800a8aa <_printf_i+0x19a>
 800a8a4:	066d      	lsls	r5, r5, #25
 800a8a6:	d5fb      	bpl.n	800a8a0 <_printf_i+0x190>
 800a8a8:	8019      	strh	r1, [r3, #0]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	9d03      	ldr	r5, [sp, #12]
 800a8ae:	6123      	str	r3, [r4, #16]
 800a8b0:	e7bf      	b.n	800a832 <_printf_i+0x122>
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	1d11      	adds	r1, r2, #4
 800a8b6:	6019      	str	r1, [r3, #0]
 800a8b8:	6815      	ldr	r5, [r2, #0]
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	0028      	movs	r0, r5
 800a8be:	6862      	ldr	r2, [r4, #4]
 800a8c0:	f000 faa0 	bl	800ae04 <memchr>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d001      	beq.n	800a8cc <_printf_i+0x1bc>
 800a8c8:	1b40      	subs	r0, r0, r5
 800a8ca:	6060      	str	r0, [r4, #4]
 800a8cc:	6863      	ldr	r3, [r4, #4]
 800a8ce:	6123      	str	r3, [r4, #16]
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	9a03      	ldr	r2, [sp, #12]
 800a8d4:	7013      	strb	r3, [r2, #0]
 800a8d6:	e7ac      	b.n	800a832 <_printf_i+0x122>
 800a8d8:	002a      	movs	r2, r5
 800a8da:	6923      	ldr	r3, [r4, #16]
 800a8dc:	9906      	ldr	r1, [sp, #24]
 800a8de:	9805      	ldr	r0, [sp, #20]
 800a8e0:	9d07      	ldr	r5, [sp, #28]
 800a8e2:	47a8      	blx	r5
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	d0ae      	beq.n	800a846 <_printf_i+0x136>
 800a8e8:	6823      	ldr	r3, [r4, #0]
 800a8ea:	079b      	lsls	r3, r3, #30
 800a8ec:	d415      	bmi.n	800a91a <_printf_i+0x20a>
 800a8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8f0:	68e0      	ldr	r0, [r4, #12]
 800a8f2:	4298      	cmp	r0, r3
 800a8f4:	daa9      	bge.n	800a84a <_printf_i+0x13a>
 800a8f6:	0018      	movs	r0, r3
 800a8f8:	e7a7      	b.n	800a84a <_printf_i+0x13a>
 800a8fa:	0022      	movs	r2, r4
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	9906      	ldr	r1, [sp, #24]
 800a900:	9805      	ldr	r0, [sp, #20]
 800a902:	9e07      	ldr	r6, [sp, #28]
 800a904:	3219      	adds	r2, #25
 800a906:	47b0      	blx	r6
 800a908:	3001      	adds	r0, #1
 800a90a:	d09c      	beq.n	800a846 <_printf_i+0x136>
 800a90c:	3501      	adds	r5, #1
 800a90e:	68e3      	ldr	r3, [r4, #12]
 800a910:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a912:	1a9b      	subs	r3, r3, r2
 800a914:	42ab      	cmp	r3, r5
 800a916:	dcf0      	bgt.n	800a8fa <_printf_i+0x1ea>
 800a918:	e7e9      	b.n	800a8ee <_printf_i+0x1de>
 800a91a:	2500      	movs	r5, #0
 800a91c:	e7f7      	b.n	800a90e <_printf_i+0x1fe>
 800a91e:	46c0      	nop			@ (mov r8, r8)
 800a920:	0800e0a8 	.word	0x0800e0a8
 800a924:	0800e0b9 	.word	0x0800e0b9

0800a928 <sniprintf>:
 800a928:	b40c      	push	{r2, r3}
 800a92a:	b530      	push	{r4, r5, lr}
 800a92c:	4b18      	ldr	r3, [pc, #96]	@ (800a990 <sniprintf+0x68>)
 800a92e:	000c      	movs	r4, r1
 800a930:	681d      	ldr	r5, [r3, #0]
 800a932:	b09d      	sub	sp, #116	@ 0x74
 800a934:	2900      	cmp	r1, #0
 800a936:	da08      	bge.n	800a94a <sniprintf+0x22>
 800a938:	238b      	movs	r3, #139	@ 0x8b
 800a93a:	2001      	movs	r0, #1
 800a93c:	602b      	str	r3, [r5, #0]
 800a93e:	4240      	negs	r0, r0
 800a940:	b01d      	add	sp, #116	@ 0x74
 800a942:	bc30      	pop	{r4, r5}
 800a944:	bc08      	pop	{r3}
 800a946:	b002      	add	sp, #8
 800a948:	4718      	bx	r3
 800a94a:	2382      	movs	r3, #130	@ 0x82
 800a94c:	466a      	mov	r2, sp
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	8293      	strh	r3, [r2, #20]
 800a952:	2300      	movs	r3, #0
 800a954:	9002      	str	r0, [sp, #8]
 800a956:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a958:	9006      	str	r0, [sp, #24]
 800a95a:	4299      	cmp	r1, r3
 800a95c:	d000      	beq.n	800a960 <sniprintf+0x38>
 800a95e:	1e4b      	subs	r3, r1, #1
 800a960:	9304      	str	r3, [sp, #16]
 800a962:	9307      	str	r3, [sp, #28]
 800a964:	2301      	movs	r3, #1
 800a966:	466a      	mov	r2, sp
 800a968:	425b      	negs	r3, r3
 800a96a:	82d3      	strh	r3, [r2, #22]
 800a96c:	0028      	movs	r0, r5
 800a96e:	ab21      	add	r3, sp, #132	@ 0x84
 800a970:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a972:	a902      	add	r1, sp, #8
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	f001 f997 	bl	800bca8 <_svfiprintf_r>
 800a97a:	1c43      	adds	r3, r0, #1
 800a97c:	da01      	bge.n	800a982 <sniprintf+0x5a>
 800a97e:	238b      	movs	r3, #139	@ 0x8b
 800a980:	602b      	str	r3, [r5, #0]
 800a982:	2c00      	cmp	r4, #0
 800a984:	d0dc      	beq.n	800a940 <sniprintf+0x18>
 800a986:	2200      	movs	r2, #0
 800a988:	9b02      	ldr	r3, [sp, #8]
 800a98a:	701a      	strb	r2, [r3, #0]
 800a98c:	e7d8      	b.n	800a940 <sniprintf+0x18>
 800a98e:	46c0      	nop			@ (mov r8, r8)
 800a990:	20000018 	.word	0x20000018

0800a994 <siscanf>:
 800a994:	b40e      	push	{r1, r2, r3}
 800a996:	b570      	push	{r4, r5, r6, lr}
 800a998:	2381      	movs	r3, #129	@ 0x81
 800a99a:	b09d      	sub	sp, #116	@ 0x74
 800a99c:	466a      	mov	r2, sp
 800a99e:	2500      	movs	r5, #0
 800a9a0:	ac21      	add	r4, sp, #132	@ 0x84
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	cc40      	ldmia	r4!, {r6}
 800a9a6:	8293      	strh	r3, [r2, #20]
 800a9a8:	951b      	str	r5, [sp, #108]	@ 0x6c
 800a9aa:	9002      	str	r0, [sp, #8]
 800a9ac:	9006      	str	r0, [sp, #24]
 800a9ae:	f7f5 fbb3 	bl	8000118 <strlen>
 800a9b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a9e0 <siscanf+0x4c>)
 800a9b4:	466a      	mov	r2, sp
 800a9b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	9003      	str	r0, [sp, #12]
 800a9bc:	9007      	str	r0, [sp, #28]
 800a9be:	4809      	ldr	r0, [pc, #36]	@ (800a9e4 <siscanf+0x50>)
 800a9c0:	425b      	negs	r3, r3
 800a9c2:	82d3      	strh	r3, [r2, #22]
 800a9c4:	a902      	add	r1, sp, #8
 800a9c6:	0023      	movs	r3, r4
 800a9c8:	0032      	movs	r2, r6
 800a9ca:	6800      	ldr	r0, [r0, #0]
 800a9cc:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a9ce:	9514      	str	r5, [sp, #80]	@ 0x50
 800a9d0:	9401      	str	r4, [sp, #4]
 800a9d2:	f001 fac3 	bl	800bf5c <__ssvfiscanf_r>
 800a9d6:	b01d      	add	sp, #116	@ 0x74
 800a9d8:	bc70      	pop	{r4, r5, r6}
 800a9da:	bc08      	pop	{r3}
 800a9dc:	b003      	add	sp, #12
 800a9de:	4718      	bx	r3
 800a9e0:	0800aa11 	.word	0x0800aa11
 800a9e4:	20000018 	.word	0x20000018

0800a9e8 <__sread>:
 800a9e8:	b570      	push	{r4, r5, r6, lr}
 800a9ea:	000c      	movs	r4, r1
 800a9ec:	250e      	movs	r5, #14
 800a9ee:	5f49      	ldrsh	r1, [r1, r5]
 800a9f0:	f000 f99c 	bl	800ad2c <_read_r>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	db03      	blt.n	800aa00 <__sread+0x18>
 800a9f8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a9fa:	181b      	adds	r3, r3, r0
 800a9fc:	6563      	str	r3, [r4, #84]	@ 0x54
 800a9fe:	bd70      	pop	{r4, r5, r6, pc}
 800aa00:	89a3      	ldrh	r3, [r4, #12]
 800aa02:	4a02      	ldr	r2, [pc, #8]	@ (800aa0c <__sread+0x24>)
 800aa04:	4013      	ands	r3, r2
 800aa06:	81a3      	strh	r3, [r4, #12]
 800aa08:	e7f9      	b.n	800a9fe <__sread+0x16>
 800aa0a:	46c0      	nop			@ (mov r8, r8)
 800aa0c:	ffffefff 	.word	0xffffefff

0800aa10 <__seofread>:
 800aa10:	2000      	movs	r0, #0
 800aa12:	4770      	bx	lr

0800aa14 <__swrite>:
 800aa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa16:	001f      	movs	r7, r3
 800aa18:	898b      	ldrh	r3, [r1, #12]
 800aa1a:	0005      	movs	r5, r0
 800aa1c:	000c      	movs	r4, r1
 800aa1e:	0016      	movs	r6, r2
 800aa20:	05db      	lsls	r3, r3, #23
 800aa22:	d505      	bpl.n	800aa30 <__swrite+0x1c>
 800aa24:	230e      	movs	r3, #14
 800aa26:	5ec9      	ldrsh	r1, [r1, r3]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	2302      	movs	r3, #2
 800aa2c:	f000 f96a 	bl	800ad04 <_lseek_r>
 800aa30:	89a3      	ldrh	r3, [r4, #12]
 800aa32:	4a05      	ldr	r2, [pc, #20]	@ (800aa48 <__swrite+0x34>)
 800aa34:	0028      	movs	r0, r5
 800aa36:	4013      	ands	r3, r2
 800aa38:	81a3      	strh	r3, [r4, #12]
 800aa3a:	0032      	movs	r2, r6
 800aa3c:	230e      	movs	r3, #14
 800aa3e:	5ee1      	ldrsh	r1, [r4, r3]
 800aa40:	003b      	movs	r3, r7
 800aa42:	f000 f987 	bl	800ad54 <_write_r>
 800aa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa48:	ffffefff 	.word	0xffffefff

0800aa4c <__sseek>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	000c      	movs	r4, r1
 800aa50:	250e      	movs	r5, #14
 800aa52:	5f49      	ldrsh	r1, [r1, r5]
 800aa54:	f000 f956 	bl	800ad04 <_lseek_r>
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	1c42      	adds	r2, r0, #1
 800aa5c:	d103      	bne.n	800aa66 <__sseek+0x1a>
 800aa5e:	4a05      	ldr	r2, [pc, #20]	@ (800aa74 <__sseek+0x28>)
 800aa60:	4013      	ands	r3, r2
 800aa62:	81a3      	strh	r3, [r4, #12]
 800aa64:	bd70      	pop	{r4, r5, r6, pc}
 800aa66:	2280      	movs	r2, #128	@ 0x80
 800aa68:	0152      	lsls	r2, r2, #5
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	81a3      	strh	r3, [r4, #12]
 800aa6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa70:	e7f8      	b.n	800aa64 <__sseek+0x18>
 800aa72:	46c0      	nop			@ (mov r8, r8)
 800aa74:	ffffefff 	.word	0xffffefff

0800aa78 <__sclose>:
 800aa78:	b510      	push	{r4, lr}
 800aa7a:	230e      	movs	r3, #14
 800aa7c:	5ec9      	ldrsh	r1, [r1, r3]
 800aa7e:	f000 f9af 	bl	800ade0 <_close_r>
 800aa82:	bd10      	pop	{r4, pc}

0800aa84 <std>:
 800aa84:	2300      	movs	r3, #0
 800aa86:	b510      	push	{r4, lr}
 800aa88:	0004      	movs	r4, r0
 800aa8a:	6003      	str	r3, [r0, #0]
 800aa8c:	6043      	str	r3, [r0, #4]
 800aa8e:	6083      	str	r3, [r0, #8]
 800aa90:	8181      	strh	r1, [r0, #12]
 800aa92:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa94:	81c2      	strh	r2, [r0, #14]
 800aa96:	6103      	str	r3, [r0, #16]
 800aa98:	6143      	str	r3, [r0, #20]
 800aa9a:	6183      	str	r3, [r0, #24]
 800aa9c:	0019      	movs	r1, r3
 800aa9e:	2208      	movs	r2, #8
 800aaa0:	305c      	adds	r0, #92	@ 0x5c
 800aaa2:	f000 f8b3 	bl	800ac0c <memset>
 800aaa6:	4b0b      	ldr	r3, [pc, #44]	@ (800aad4 <std+0x50>)
 800aaa8:	6224      	str	r4, [r4, #32]
 800aaaa:	6263      	str	r3, [r4, #36]	@ 0x24
 800aaac:	4b0a      	ldr	r3, [pc, #40]	@ (800aad8 <std+0x54>)
 800aaae:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aab0:	4b0a      	ldr	r3, [pc, #40]	@ (800aadc <std+0x58>)
 800aab2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aab4:	4b0a      	ldr	r3, [pc, #40]	@ (800aae0 <std+0x5c>)
 800aab6:	6323      	str	r3, [r4, #48]	@ 0x30
 800aab8:	4b0a      	ldr	r3, [pc, #40]	@ (800aae4 <std+0x60>)
 800aaba:	429c      	cmp	r4, r3
 800aabc:	d005      	beq.n	800aaca <std+0x46>
 800aabe:	4b0a      	ldr	r3, [pc, #40]	@ (800aae8 <std+0x64>)
 800aac0:	429c      	cmp	r4, r3
 800aac2:	d002      	beq.n	800aaca <std+0x46>
 800aac4:	4b09      	ldr	r3, [pc, #36]	@ (800aaec <std+0x68>)
 800aac6:	429c      	cmp	r4, r3
 800aac8:	d103      	bne.n	800aad2 <std+0x4e>
 800aaca:	0020      	movs	r0, r4
 800aacc:	3058      	adds	r0, #88	@ 0x58
 800aace:	f000 f97f 	bl	800add0 <__retarget_lock_init_recursive>
 800aad2:	bd10      	pop	{r4, pc}
 800aad4:	0800a9e9 	.word	0x0800a9e9
 800aad8:	0800aa15 	.word	0x0800aa15
 800aadc:	0800aa4d 	.word	0x0800aa4d
 800aae0:	0800aa79 	.word	0x0800aa79
 800aae4:	200003fc 	.word	0x200003fc
 800aae8:	20000464 	.word	0x20000464
 800aaec:	200004cc 	.word	0x200004cc

0800aaf0 <stdio_exit_handler>:
 800aaf0:	b510      	push	{r4, lr}
 800aaf2:	4a03      	ldr	r2, [pc, #12]	@ (800ab00 <stdio_exit_handler+0x10>)
 800aaf4:	4903      	ldr	r1, [pc, #12]	@ (800ab04 <stdio_exit_handler+0x14>)
 800aaf6:	4804      	ldr	r0, [pc, #16]	@ (800ab08 <stdio_exit_handler+0x18>)
 800aaf8:	f000 f86c 	bl	800abd4 <_fwalk_sglue>
 800aafc:	bd10      	pop	{r4, pc}
 800aafe:	46c0      	nop			@ (mov r8, r8)
 800ab00:	2000000c 	.word	0x2000000c
 800ab04:	0800c7bd 	.word	0x0800c7bd
 800ab08:	2000001c 	.word	0x2000001c

0800ab0c <cleanup_stdio>:
 800ab0c:	6841      	ldr	r1, [r0, #4]
 800ab0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ab3c <cleanup_stdio+0x30>)
 800ab10:	b510      	push	{r4, lr}
 800ab12:	0004      	movs	r4, r0
 800ab14:	4299      	cmp	r1, r3
 800ab16:	d001      	beq.n	800ab1c <cleanup_stdio+0x10>
 800ab18:	f001 fe50 	bl	800c7bc <_fflush_r>
 800ab1c:	68a1      	ldr	r1, [r4, #8]
 800ab1e:	4b08      	ldr	r3, [pc, #32]	@ (800ab40 <cleanup_stdio+0x34>)
 800ab20:	4299      	cmp	r1, r3
 800ab22:	d002      	beq.n	800ab2a <cleanup_stdio+0x1e>
 800ab24:	0020      	movs	r0, r4
 800ab26:	f001 fe49 	bl	800c7bc <_fflush_r>
 800ab2a:	68e1      	ldr	r1, [r4, #12]
 800ab2c:	4b05      	ldr	r3, [pc, #20]	@ (800ab44 <cleanup_stdio+0x38>)
 800ab2e:	4299      	cmp	r1, r3
 800ab30:	d002      	beq.n	800ab38 <cleanup_stdio+0x2c>
 800ab32:	0020      	movs	r0, r4
 800ab34:	f001 fe42 	bl	800c7bc <_fflush_r>
 800ab38:	bd10      	pop	{r4, pc}
 800ab3a:	46c0      	nop			@ (mov r8, r8)
 800ab3c:	200003fc 	.word	0x200003fc
 800ab40:	20000464 	.word	0x20000464
 800ab44:	200004cc 	.word	0x200004cc

0800ab48 <global_stdio_init.part.0>:
 800ab48:	b510      	push	{r4, lr}
 800ab4a:	4b09      	ldr	r3, [pc, #36]	@ (800ab70 <global_stdio_init.part.0+0x28>)
 800ab4c:	4a09      	ldr	r2, [pc, #36]	@ (800ab74 <global_stdio_init.part.0+0x2c>)
 800ab4e:	2104      	movs	r1, #4
 800ab50:	601a      	str	r2, [r3, #0]
 800ab52:	4809      	ldr	r0, [pc, #36]	@ (800ab78 <global_stdio_init.part.0+0x30>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	f7ff ff95 	bl	800aa84 <std>
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	2109      	movs	r1, #9
 800ab5e:	4807      	ldr	r0, [pc, #28]	@ (800ab7c <global_stdio_init.part.0+0x34>)
 800ab60:	f7ff ff90 	bl	800aa84 <std>
 800ab64:	2202      	movs	r2, #2
 800ab66:	2112      	movs	r1, #18
 800ab68:	4805      	ldr	r0, [pc, #20]	@ (800ab80 <global_stdio_init.part.0+0x38>)
 800ab6a:	f7ff ff8b 	bl	800aa84 <std>
 800ab6e:	bd10      	pop	{r4, pc}
 800ab70:	20000534 	.word	0x20000534
 800ab74:	0800aaf1 	.word	0x0800aaf1
 800ab78:	200003fc 	.word	0x200003fc
 800ab7c:	20000464 	.word	0x20000464
 800ab80:	200004cc 	.word	0x200004cc

0800ab84 <__sfp_lock_acquire>:
 800ab84:	b510      	push	{r4, lr}
 800ab86:	4802      	ldr	r0, [pc, #8]	@ (800ab90 <__sfp_lock_acquire+0xc>)
 800ab88:	f000 f923 	bl	800add2 <__retarget_lock_acquire_recursive>
 800ab8c:	bd10      	pop	{r4, pc}
 800ab8e:	46c0      	nop			@ (mov r8, r8)
 800ab90:	20000539 	.word	0x20000539

0800ab94 <__sfp_lock_release>:
 800ab94:	b510      	push	{r4, lr}
 800ab96:	4802      	ldr	r0, [pc, #8]	@ (800aba0 <__sfp_lock_release+0xc>)
 800ab98:	f000 f91c 	bl	800add4 <__retarget_lock_release_recursive>
 800ab9c:	bd10      	pop	{r4, pc}
 800ab9e:	46c0      	nop			@ (mov r8, r8)
 800aba0:	20000539 	.word	0x20000539

0800aba4 <__sinit>:
 800aba4:	b510      	push	{r4, lr}
 800aba6:	0004      	movs	r4, r0
 800aba8:	f7ff ffec 	bl	800ab84 <__sfp_lock_acquire>
 800abac:	6a23      	ldr	r3, [r4, #32]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d002      	beq.n	800abb8 <__sinit+0x14>
 800abb2:	f7ff ffef 	bl	800ab94 <__sfp_lock_release>
 800abb6:	bd10      	pop	{r4, pc}
 800abb8:	4b04      	ldr	r3, [pc, #16]	@ (800abcc <__sinit+0x28>)
 800abba:	6223      	str	r3, [r4, #32]
 800abbc:	4b04      	ldr	r3, [pc, #16]	@ (800abd0 <__sinit+0x2c>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d1f6      	bne.n	800abb2 <__sinit+0xe>
 800abc4:	f7ff ffc0 	bl	800ab48 <global_stdio_init.part.0>
 800abc8:	e7f3      	b.n	800abb2 <__sinit+0xe>
 800abca:	46c0      	nop			@ (mov r8, r8)
 800abcc:	0800ab0d 	.word	0x0800ab0d
 800abd0:	20000534 	.word	0x20000534

0800abd4 <_fwalk_sglue>:
 800abd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abd6:	0014      	movs	r4, r2
 800abd8:	2600      	movs	r6, #0
 800abda:	9000      	str	r0, [sp, #0]
 800abdc:	9101      	str	r1, [sp, #4]
 800abde:	68a5      	ldr	r5, [r4, #8]
 800abe0:	6867      	ldr	r7, [r4, #4]
 800abe2:	3f01      	subs	r7, #1
 800abe4:	d504      	bpl.n	800abf0 <_fwalk_sglue+0x1c>
 800abe6:	6824      	ldr	r4, [r4, #0]
 800abe8:	2c00      	cmp	r4, #0
 800abea:	d1f8      	bne.n	800abde <_fwalk_sglue+0xa>
 800abec:	0030      	movs	r0, r6
 800abee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800abf0:	89ab      	ldrh	r3, [r5, #12]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d908      	bls.n	800ac08 <_fwalk_sglue+0x34>
 800abf6:	220e      	movs	r2, #14
 800abf8:	5eab      	ldrsh	r3, [r5, r2]
 800abfa:	3301      	adds	r3, #1
 800abfc:	d004      	beq.n	800ac08 <_fwalk_sglue+0x34>
 800abfe:	0029      	movs	r1, r5
 800ac00:	9800      	ldr	r0, [sp, #0]
 800ac02:	9b01      	ldr	r3, [sp, #4]
 800ac04:	4798      	blx	r3
 800ac06:	4306      	orrs	r6, r0
 800ac08:	3568      	adds	r5, #104	@ 0x68
 800ac0a:	e7ea      	b.n	800abe2 <_fwalk_sglue+0xe>

0800ac0c <memset>:
 800ac0c:	0003      	movs	r3, r0
 800ac0e:	1882      	adds	r2, r0, r2
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d100      	bne.n	800ac16 <memset+0xa>
 800ac14:	4770      	bx	lr
 800ac16:	7019      	strb	r1, [r3, #0]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	e7f9      	b.n	800ac10 <memset+0x4>

0800ac1c <strncpy>:
 800ac1c:	0003      	movs	r3, r0
 800ac1e:	b530      	push	{r4, r5, lr}
 800ac20:	001d      	movs	r5, r3
 800ac22:	2a00      	cmp	r2, #0
 800ac24:	d006      	beq.n	800ac34 <strncpy+0x18>
 800ac26:	780c      	ldrb	r4, [r1, #0]
 800ac28:	3a01      	subs	r2, #1
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	702c      	strb	r4, [r5, #0]
 800ac2e:	3101      	adds	r1, #1
 800ac30:	2c00      	cmp	r4, #0
 800ac32:	d1f5      	bne.n	800ac20 <strncpy+0x4>
 800ac34:	2100      	movs	r1, #0
 800ac36:	189a      	adds	r2, r3, r2
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d100      	bne.n	800ac3e <strncpy+0x22>
 800ac3c:	bd30      	pop	{r4, r5, pc}
 800ac3e:	7019      	strb	r1, [r3, #0]
 800ac40:	3301      	adds	r3, #1
 800ac42:	e7f9      	b.n	800ac38 <strncpy+0x1c>

0800ac44 <strtok>:
 800ac44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac46:	4b16      	ldr	r3, [pc, #88]	@ (800aca0 <strtok+0x5c>)
 800ac48:	0005      	movs	r5, r0
 800ac4a:	681f      	ldr	r7, [r3, #0]
 800ac4c:	000e      	movs	r6, r1
 800ac4e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ac50:	2c00      	cmp	r4, #0
 800ac52:	d11d      	bne.n	800ac90 <strtok+0x4c>
 800ac54:	2050      	movs	r0, #80	@ 0x50
 800ac56:	f001 fae5 	bl	800c224 <malloc>
 800ac5a:	1e02      	subs	r2, r0, #0
 800ac5c:	6478      	str	r0, [r7, #68]	@ 0x44
 800ac5e:	d104      	bne.n	800ac6a <strtok+0x26>
 800ac60:	215b      	movs	r1, #91	@ 0x5b
 800ac62:	4b10      	ldr	r3, [pc, #64]	@ (800aca4 <strtok+0x60>)
 800ac64:	4810      	ldr	r0, [pc, #64]	@ (800aca8 <strtok+0x64>)
 800ac66:	f000 f8e1 	bl	800ae2c <__assert_func>
 800ac6a:	6004      	str	r4, [r0, #0]
 800ac6c:	6044      	str	r4, [r0, #4]
 800ac6e:	6084      	str	r4, [r0, #8]
 800ac70:	60c4      	str	r4, [r0, #12]
 800ac72:	6104      	str	r4, [r0, #16]
 800ac74:	6144      	str	r4, [r0, #20]
 800ac76:	6184      	str	r4, [r0, #24]
 800ac78:	6284      	str	r4, [r0, #40]	@ 0x28
 800ac7a:	62c4      	str	r4, [r0, #44]	@ 0x2c
 800ac7c:	6304      	str	r4, [r0, #48]	@ 0x30
 800ac7e:	6344      	str	r4, [r0, #52]	@ 0x34
 800ac80:	6384      	str	r4, [r0, #56]	@ 0x38
 800ac82:	63c4      	str	r4, [r0, #60]	@ 0x3c
 800ac84:	6404      	str	r4, [r0, #64]	@ 0x40
 800ac86:	6444      	str	r4, [r0, #68]	@ 0x44
 800ac88:	6484      	str	r4, [r0, #72]	@ 0x48
 800ac8a:	64c4      	str	r4, [r0, #76]	@ 0x4c
 800ac8c:	7704      	strb	r4, [r0, #28]
 800ac8e:	6244      	str	r4, [r0, #36]	@ 0x24
 800ac90:	0031      	movs	r1, r6
 800ac92:	0028      	movs	r0, r5
 800ac94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac96:	2301      	movs	r3, #1
 800ac98:	f000 f808 	bl	800acac <__strtok_r>
 800ac9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac9e:	46c0      	nop			@ (mov r8, r8)
 800aca0:	20000018 	.word	0x20000018
 800aca4:	0800e0ca 	.word	0x0800e0ca
 800aca8:	0800e0e1 	.word	0x0800e0e1

0800acac <__strtok_r>:
 800acac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acae:	1e04      	subs	r4, r0, #0
 800acb0:	d102      	bne.n	800acb8 <__strtok_r+0xc>
 800acb2:	6814      	ldr	r4, [r2, #0]
 800acb4:	2c00      	cmp	r4, #0
 800acb6:	d009      	beq.n	800accc <__strtok_r+0x20>
 800acb8:	0020      	movs	r0, r4
 800acba:	000e      	movs	r6, r1
 800acbc:	7805      	ldrb	r5, [r0, #0]
 800acbe:	3401      	adds	r4, #1
 800acc0:	7837      	ldrb	r7, [r6, #0]
 800acc2:	2f00      	cmp	r7, #0
 800acc4:	d104      	bne.n	800acd0 <__strtok_r+0x24>
 800acc6:	2d00      	cmp	r5, #0
 800acc8:	d10d      	bne.n	800ace6 <__strtok_r+0x3a>
 800acca:	6015      	str	r5, [r2, #0]
 800accc:	2000      	movs	r0, #0
 800acce:	e006      	b.n	800acde <__strtok_r+0x32>
 800acd0:	3601      	adds	r6, #1
 800acd2:	42bd      	cmp	r5, r7
 800acd4:	d1f4      	bne.n	800acc0 <__strtok_r+0x14>
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1ee      	bne.n	800acb8 <__strtok_r+0xc>
 800acda:	6014      	str	r4, [r2, #0]
 800acdc:	7003      	strb	r3, [r0, #0]
 800acde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ace0:	3301      	adds	r3, #1
 800ace2:	2d00      	cmp	r5, #0
 800ace4:	d103      	bne.n	800acee <__strtok_r+0x42>
 800ace6:	0026      	movs	r6, r4
 800ace8:	000b      	movs	r3, r1
 800acea:	7837      	ldrb	r7, [r6, #0]
 800acec:	3401      	adds	r4, #1
 800acee:	781d      	ldrb	r5, [r3, #0]
 800acf0:	42af      	cmp	r7, r5
 800acf2:	d1f5      	bne.n	800ace0 <__strtok_r+0x34>
 800acf4:	2300      	movs	r3, #0
 800acf6:	0019      	movs	r1, r3
 800acf8:	429f      	cmp	r7, r3
 800acfa:	d001      	beq.n	800ad00 <__strtok_r+0x54>
 800acfc:	0023      	movs	r3, r4
 800acfe:	7031      	strb	r1, [r6, #0]
 800ad00:	6013      	str	r3, [r2, #0]
 800ad02:	e7ec      	b.n	800acde <__strtok_r+0x32>

0800ad04 <_lseek_r>:
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	0004      	movs	r4, r0
 800ad08:	0008      	movs	r0, r1
 800ad0a:	0011      	movs	r1, r2
 800ad0c:	001a      	movs	r2, r3
 800ad0e:	2300      	movs	r3, #0
 800ad10:	4d05      	ldr	r5, [pc, #20]	@ (800ad28 <_lseek_r+0x24>)
 800ad12:	602b      	str	r3, [r5, #0]
 800ad14:	f7fc f84e 	bl	8006db4 <_lseek>
 800ad18:	1c43      	adds	r3, r0, #1
 800ad1a:	d103      	bne.n	800ad24 <_lseek_r+0x20>
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d000      	beq.n	800ad24 <_lseek_r+0x20>
 800ad22:	6023      	str	r3, [r4, #0]
 800ad24:	bd70      	pop	{r4, r5, r6, pc}
 800ad26:	46c0      	nop			@ (mov r8, r8)
 800ad28:	2000053c 	.word	0x2000053c

0800ad2c <_read_r>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	0004      	movs	r4, r0
 800ad30:	0008      	movs	r0, r1
 800ad32:	0011      	movs	r1, r2
 800ad34:	001a      	movs	r2, r3
 800ad36:	2300      	movs	r3, #0
 800ad38:	4d05      	ldr	r5, [pc, #20]	@ (800ad50 <_read_r+0x24>)
 800ad3a:	602b      	str	r3, [r5, #0]
 800ad3c:	f7fb ffe0 	bl	8006d00 <_read>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d103      	bne.n	800ad4c <_read_r+0x20>
 800ad44:	682b      	ldr	r3, [r5, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d000      	beq.n	800ad4c <_read_r+0x20>
 800ad4a:	6023      	str	r3, [r4, #0]
 800ad4c:	bd70      	pop	{r4, r5, r6, pc}
 800ad4e:	46c0      	nop			@ (mov r8, r8)
 800ad50:	2000053c 	.word	0x2000053c

0800ad54 <_write_r>:
 800ad54:	b570      	push	{r4, r5, r6, lr}
 800ad56:	0004      	movs	r4, r0
 800ad58:	0008      	movs	r0, r1
 800ad5a:	0011      	movs	r1, r2
 800ad5c:	001a      	movs	r2, r3
 800ad5e:	2300      	movs	r3, #0
 800ad60:	4d05      	ldr	r5, [pc, #20]	@ (800ad78 <_write_r+0x24>)
 800ad62:	602b      	str	r3, [r5, #0]
 800ad64:	f7fb ffe9 	bl	8006d3a <_write>
 800ad68:	1c43      	adds	r3, r0, #1
 800ad6a:	d103      	bne.n	800ad74 <_write_r+0x20>
 800ad6c:	682b      	ldr	r3, [r5, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d000      	beq.n	800ad74 <_write_r+0x20>
 800ad72:	6023      	str	r3, [r4, #0]
 800ad74:	bd70      	pop	{r4, r5, r6, pc}
 800ad76:	46c0      	nop			@ (mov r8, r8)
 800ad78:	2000053c 	.word	0x2000053c

0800ad7c <__errno>:
 800ad7c:	4b01      	ldr	r3, [pc, #4]	@ (800ad84 <__errno+0x8>)
 800ad7e:	6818      	ldr	r0, [r3, #0]
 800ad80:	4770      	bx	lr
 800ad82:	46c0      	nop			@ (mov r8, r8)
 800ad84:	20000018 	.word	0x20000018

0800ad88 <__libc_init_array>:
 800ad88:	b570      	push	{r4, r5, r6, lr}
 800ad8a:	2600      	movs	r6, #0
 800ad8c:	4c0c      	ldr	r4, [pc, #48]	@ (800adc0 <__libc_init_array+0x38>)
 800ad8e:	4d0d      	ldr	r5, [pc, #52]	@ (800adc4 <__libc_init_array+0x3c>)
 800ad90:	1b64      	subs	r4, r4, r5
 800ad92:	10a4      	asrs	r4, r4, #2
 800ad94:	42a6      	cmp	r6, r4
 800ad96:	d109      	bne.n	800adac <__libc_init_array+0x24>
 800ad98:	2600      	movs	r6, #0
 800ad9a:	f002 fdb5 	bl	800d908 <_init>
 800ad9e:	4c0a      	ldr	r4, [pc, #40]	@ (800adc8 <__libc_init_array+0x40>)
 800ada0:	4d0a      	ldr	r5, [pc, #40]	@ (800adcc <__libc_init_array+0x44>)
 800ada2:	1b64      	subs	r4, r4, r5
 800ada4:	10a4      	asrs	r4, r4, #2
 800ada6:	42a6      	cmp	r6, r4
 800ada8:	d105      	bne.n	800adb6 <__libc_init_array+0x2e>
 800adaa:	bd70      	pop	{r4, r5, r6, pc}
 800adac:	00b3      	lsls	r3, r6, #2
 800adae:	58eb      	ldr	r3, [r5, r3]
 800adb0:	4798      	blx	r3
 800adb2:	3601      	adds	r6, #1
 800adb4:	e7ee      	b.n	800ad94 <__libc_init_array+0xc>
 800adb6:	00b3      	lsls	r3, r6, #2
 800adb8:	58eb      	ldr	r3, [r5, r3]
 800adba:	4798      	blx	r3
 800adbc:	3601      	adds	r6, #1
 800adbe:	e7f2      	b.n	800ada6 <__libc_init_array+0x1e>
 800adc0:	0800e484 	.word	0x0800e484
 800adc4:	0800e484 	.word	0x0800e484
 800adc8:	0800e488 	.word	0x0800e488
 800adcc:	0800e484 	.word	0x0800e484

0800add0 <__retarget_lock_init_recursive>:
 800add0:	4770      	bx	lr

0800add2 <__retarget_lock_acquire_recursive>:
 800add2:	4770      	bx	lr

0800add4 <__retarget_lock_release_recursive>:
 800add4:	4770      	bx	lr
	...

0800add8 <_localeconv_r>:
 800add8:	4800      	ldr	r0, [pc, #0]	@ (800addc <_localeconv_r+0x4>)
 800adda:	4770      	bx	lr
 800addc:	20000158 	.word	0x20000158

0800ade0 <_close_r>:
 800ade0:	2300      	movs	r3, #0
 800ade2:	b570      	push	{r4, r5, r6, lr}
 800ade4:	4d06      	ldr	r5, [pc, #24]	@ (800ae00 <_close_r+0x20>)
 800ade6:	0004      	movs	r4, r0
 800ade8:	0008      	movs	r0, r1
 800adea:	602b      	str	r3, [r5, #0]
 800adec:	f7fb ffc1 	bl	8006d72 <_close>
 800adf0:	1c43      	adds	r3, r0, #1
 800adf2:	d103      	bne.n	800adfc <_close_r+0x1c>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d000      	beq.n	800adfc <_close_r+0x1c>
 800adfa:	6023      	str	r3, [r4, #0]
 800adfc:	bd70      	pop	{r4, r5, r6, pc}
 800adfe:	46c0      	nop			@ (mov r8, r8)
 800ae00:	2000053c 	.word	0x2000053c

0800ae04 <memchr>:
 800ae04:	b2c9      	uxtb	r1, r1
 800ae06:	1882      	adds	r2, r0, r2
 800ae08:	4290      	cmp	r0, r2
 800ae0a:	d101      	bne.n	800ae10 <memchr+0xc>
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	4770      	bx	lr
 800ae10:	7803      	ldrb	r3, [r0, #0]
 800ae12:	428b      	cmp	r3, r1
 800ae14:	d0fb      	beq.n	800ae0e <memchr+0xa>
 800ae16:	3001      	adds	r0, #1
 800ae18:	e7f6      	b.n	800ae08 <memchr+0x4>

0800ae1a <memcpy>:
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	b510      	push	{r4, lr}
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d100      	bne.n	800ae24 <memcpy+0xa>
 800ae22:	bd10      	pop	{r4, pc}
 800ae24:	5ccc      	ldrb	r4, [r1, r3]
 800ae26:	54c4      	strb	r4, [r0, r3]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	e7f8      	b.n	800ae1e <memcpy+0x4>

0800ae2c <__assert_func>:
 800ae2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ae2e:	0014      	movs	r4, r2
 800ae30:	001a      	movs	r2, r3
 800ae32:	4b09      	ldr	r3, [pc, #36]	@ (800ae58 <__assert_func+0x2c>)
 800ae34:	0005      	movs	r5, r0
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	000e      	movs	r6, r1
 800ae3a:	68d8      	ldr	r0, [r3, #12]
 800ae3c:	4b07      	ldr	r3, [pc, #28]	@ (800ae5c <__assert_func+0x30>)
 800ae3e:	2c00      	cmp	r4, #0
 800ae40:	d101      	bne.n	800ae46 <__assert_func+0x1a>
 800ae42:	4b07      	ldr	r3, [pc, #28]	@ (800ae60 <__assert_func+0x34>)
 800ae44:	001c      	movs	r4, r3
 800ae46:	4907      	ldr	r1, [pc, #28]	@ (800ae64 <__assert_func+0x38>)
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	9402      	str	r4, [sp, #8]
 800ae4c:	002b      	movs	r3, r5
 800ae4e:	9600      	str	r6, [sp, #0]
 800ae50:	f002 f8ca 	bl	800cfe8 <fiprintf>
 800ae54:	f002 fa40 	bl	800d2d8 <abort>
 800ae58:	20000018 	.word	0x20000018
 800ae5c:	0800e13b 	.word	0x0800e13b
 800ae60:	0800e176 	.word	0x0800e176
 800ae64:	0800e148 	.word	0x0800e148

0800ae68 <quorem>:
 800ae68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae6a:	6903      	ldr	r3, [r0, #16]
 800ae6c:	690c      	ldr	r4, [r1, #16]
 800ae6e:	b089      	sub	sp, #36	@ 0x24
 800ae70:	9003      	str	r0, [sp, #12]
 800ae72:	9106      	str	r1, [sp, #24]
 800ae74:	2000      	movs	r0, #0
 800ae76:	42a3      	cmp	r3, r4
 800ae78:	db63      	blt.n	800af42 <quorem+0xda>
 800ae7a:	000b      	movs	r3, r1
 800ae7c:	3c01      	subs	r4, #1
 800ae7e:	3314      	adds	r3, #20
 800ae80:	00a5      	lsls	r5, r4, #2
 800ae82:	9304      	str	r3, [sp, #16]
 800ae84:	195b      	adds	r3, r3, r5
 800ae86:	9305      	str	r3, [sp, #20]
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	3314      	adds	r3, #20
 800ae8c:	9301      	str	r3, [sp, #4]
 800ae8e:	195d      	adds	r5, r3, r5
 800ae90:	9b05      	ldr	r3, [sp, #20]
 800ae92:	682f      	ldr	r7, [r5, #0]
 800ae94:	681e      	ldr	r6, [r3, #0]
 800ae96:	0038      	movs	r0, r7
 800ae98:	3601      	adds	r6, #1
 800ae9a:	0031      	movs	r1, r6
 800ae9c:	f7f5 f958 	bl	8000150 <__udivsi3>
 800aea0:	9002      	str	r0, [sp, #8]
 800aea2:	42b7      	cmp	r7, r6
 800aea4:	d327      	bcc.n	800aef6 <quorem+0x8e>
 800aea6:	9b04      	ldr	r3, [sp, #16]
 800aea8:	2700      	movs	r7, #0
 800aeaa:	469c      	mov	ip, r3
 800aeac:	9e01      	ldr	r6, [sp, #4]
 800aeae:	9707      	str	r7, [sp, #28]
 800aeb0:	4662      	mov	r2, ip
 800aeb2:	ca08      	ldmia	r2!, {r3}
 800aeb4:	6830      	ldr	r0, [r6, #0]
 800aeb6:	4694      	mov	ip, r2
 800aeb8:	9a02      	ldr	r2, [sp, #8]
 800aeba:	b299      	uxth	r1, r3
 800aebc:	4351      	muls	r1, r2
 800aebe:	0c1b      	lsrs	r3, r3, #16
 800aec0:	4353      	muls	r3, r2
 800aec2:	19c9      	adds	r1, r1, r7
 800aec4:	0c0a      	lsrs	r2, r1, #16
 800aec6:	189b      	adds	r3, r3, r2
 800aec8:	b289      	uxth	r1, r1
 800aeca:	b282      	uxth	r2, r0
 800aecc:	1a52      	subs	r2, r2, r1
 800aece:	9907      	ldr	r1, [sp, #28]
 800aed0:	0c1f      	lsrs	r7, r3, #16
 800aed2:	1852      	adds	r2, r2, r1
 800aed4:	0c00      	lsrs	r0, r0, #16
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	1411      	asrs	r1, r2, #16
 800aeda:	1ac3      	subs	r3, r0, r3
 800aedc:	185b      	adds	r3, r3, r1
 800aede:	1419      	asrs	r1, r3, #16
 800aee0:	b292      	uxth	r2, r2
 800aee2:	041b      	lsls	r3, r3, #16
 800aee4:	431a      	orrs	r2, r3
 800aee6:	9b05      	ldr	r3, [sp, #20]
 800aee8:	9107      	str	r1, [sp, #28]
 800aeea:	c604      	stmia	r6!, {r2}
 800aeec:	4563      	cmp	r3, ip
 800aeee:	d2df      	bcs.n	800aeb0 <quorem+0x48>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d02b      	beq.n	800af4e <quorem+0xe6>
 800aef6:	9906      	ldr	r1, [sp, #24]
 800aef8:	9803      	ldr	r0, [sp, #12]
 800aefa:	f001 ff21 	bl	800cd40 <__mcmp>
 800aefe:	2800      	cmp	r0, #0
 800af00:	db1e      	blt.n	800af40 <quorem+0xd8>
 800af02:	2600      	movs	r6, #0
 800af04:	9d01      	ldr	r5, [sp, #4]
 800af06:	9904      	ldr	r1, [sp, #16]
 800af08:	c901      	ldmia	r1!, {r0}
 800af0a:	682b      	ldr	r3, [r5, #0]
 800af0c:	b287      	uxth	r7, r0
 800af0e:	b29a      	uxth	r2, r3
 800af10:	1bd2      	subs	r2, r2, r7
 800af12:	1992      	adds	r2, r2, r6
 800af14:	0c00      	lsrs	r0, r0, #16
 800af16:	0c1b      	lsrs	r3, r3, #16
 800af18:	1a1b      	subs	r3, r3, r0
 800af1a:	1410      	asrs	r0, r2, #16
 800af1c:	181b      	adds	r3, r3, r0
 800af1e:	141e      	asrs	r6, r3, #16
 800af20:	b292      	uxth	r2, r2
 800af22:	041b      	lsls	r3, r3, #16
 800af24:	431a      	orrs	r2, r3
 800af26:	9b05      	ldr	r3, [sp, #20]
 800af28:	c504      	stmia	r5!, {r2}
 800af2a:	428b      	cmp	r3, r1
 800af2c:	d2ec      	bcs.n	800af08 <quorem+0xa0>
 800af2e:	9a01      	ldr	r2, [sp, #4]
 800af30:	00a3      	lsls	r3, r4, #2
 800af32:	18d3      	adds	r3, r2, r3
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	2a00      	cmp	r2, #0
 800af38:	d014      	beq.n	800af64 <quorem+0xfc>
 800af3a:	9b02      	ldr	r3, [sp, #8]
 800af3c:	3301      	adds	r3, #1
 800af3e:	9302      	str	r3, [sp, #8]
 800af40:	9802      	ldr	r0, [sp, #8]
 800af42:	b009      	add	sp, #36	@ 0x24
 800af44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af46:	682b      	ldr	r3, [r5, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d104      	bne.n	800af56 <quorem+0xee>
 800af4c:	3c01      	subs	r4, #1
 800af4e:	9b01      	ldr	r3, [sp, #4]
 800af50:	3d04      	subs	r5, #4
 800af52:	42ab      	cmp	r3, r5
 800af54:	d3f7      	bcc.n	800af46 <quorem+0xde>
 800af56:	9b03      	ldr	r3, [sp, #12]
 800af58:	611c      	str	r4, [r3, #16]
 800af5a:	e7cc      	b.n	800aef6 <quorem+0x8e>
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	2a00      	cmp	r2, #0
 800af60:	d104      	bne.n	800af6c <quorem+0x104>
 800af62:	3c01      	subs	r4, #1
 800af64:	9a01      	ldr	r2, [sp, #4]
 800af66:	3b04      	subs	r3, #4
 800af68:	429a      	cmp	r2, r3
 800af6a:	d3f7      	bcc.n	800af5c <quorem+0xf4>
 800af6c:	9b03      	ldr	r3, [sp, #12]
 800af6e:	611c      	str	r4, [r3, #16]
 800af70:	e7e3      	b.n	800af3a <quorem+0xd2>
	...

0800af74 <_dtoa_r>:
 800af74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af76:	0014      	movs	r4, r2
 800af78:	001d      	movs	r5, r3
 800af7a:	69c6      	ldr	r6, [r0, #28]
 800af7c:	b09d      	sub	sp, #116	@ 0x74
 800af7e:	940a      	str	r4, [sp, #40]	@ 0x28
 800af80:	950b      	str	r5, [sp, #44]	@ 0x2c
 800af82:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800af84:	9003      	str	r0, [sp, #12]
 800af86:	2e00      	cmp	r6, #0
 800af88:	d10f      	bne.n	800afaa <_dtoa_r+0x36>
 800af8a:	2010      	movs	r0, #16
 800af8c:	f001 f94a 	bl	800c224 <malloc>
 800af90:	9b03      	ldr	r3, [sp, #12]
 800af92:	1e02      	subs	r2, r0, #0
 800af94:	61d8      	str	r0, [r3, #28]
 800af96:	d104      	bne.n	800afa2 <_dtoa_r+0x2e>
 800af98:	21ef      	movs	r1, #239	@ 0xef
 800af9a:	4bc7      	ldr	r3, [pc, #796]	@ (800b2b8 <_dtoa_r+0x344>)
 800af9c:	48c7      	ldr	r0, [pc, #796]	@ (800b2bc <_dtoa_r+0x348>)
 800af9e:	f7ff ff45 	bl	800ae2c <__assert_func>
 800afa2:	6046      	str	r6, [r0, #4]
 800afa4:	6086      	str	r6, [r0, #8]
 800afa6:	6006      	str	r6, [r0, #0]
 800afa8:	60c6      	str	r6, [r0, #12]
 800afaa:	9b03      	ldr	r3, [sp, #12]
 800afac:	69db      	ldr	r3, [r3, #28]
 800afae:	6819      	ldr	r1, [r3, #0]
 800afb0:	2900      	cmp	r1, #0
 800afb2:	d00b      	beq.n	800afcc <_dtoa_r+0x58>
 800afb4:	685a      	ldr	r2, [r3, #4]
 800afb6:	2301      	movs	r3, #1
 800afb8:	4093      	lsls	r3, r2
 800afba:	604a      	str	r2, [r1, #4]
 800afbc:	608b      	str	r3, [r1, #8]
 800afbe:	9803      	ldr	r0, [sp, #12]
 800afc0:	f001 fc7c 	bl	800c8bc <_Bfree>
 800afc4:	2200      	movs	r2, #0
 800afc6:	9b03      	ldr	r3, [sp, #12]
 800afc8:	69db      	ldr	r3, [r3, #28]
 800afca:	601a      	str	r2, [r3, #0]
 800afcc:	2d00      	cmp	r5, #0
 800afce:	da1e      	bge.n	800b00e <_dtoa_r+0x9a>
 800afd0:	2301      	movs	r3, #1
 800afd2:	603b      	str	r3, [r7, #0]
 800afd4:	006b      	lsls	r3, r5, #1
 800afd6:	085b      	lsrs	r3, r3, #1
 800afd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afda:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800afdc:	4bb8      	ldr	r3, [pc, #736]	@ (800b2c0 <_dtoa_r+0x34c>)
 800afde:	4ab8      	ldr	r2, [pc, #736]	@ (800b2c0 <_dtoa_r+0x34c>)
 800afe0:	403b      	ands	r3, r7
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d116      	bne.n	800b014 <_dtoa_r+0xa0>
 800afe6:	4bb7      	ldr	r3, [pc, #732]	@ (800b2c4 <_dtoa_r+0x350>)
 800afe8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800afea:	6013      	str	r3, [r2, #0]
 800afec:	033b      	lsls	r3, r7, #12
 800afee:	0b1b      	lsrs	r3, r3, #12
 800aff0:	4323      	orrs	r3, r4
 800aff2:	d101      	bne.n	800aff8 <_dtoa_r+0x84>
 800aff4:	f000 fd80 	bl	800baf8 <_dtoa_r+0xb84>
 800aff8:	4bb3      	ldr	r3, [pc, #716]	@ (800b2c8 <_dtoa_r+0x354>)
 800affa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800affc:	9308      	str	r3, [sp, #32]
 800affe:	2a00      	cmp	r2, #0
 800b000:	d002      	beq.n	800b008 <_dtoa_r+0x94>
 800b002:	4bb2      	ldr	r3, [pc, #712]	@ (800b2cc <_dtoa_r+0x358>)
 800b004:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b006:	6013      	str	r3, [r2, #0]
 800b008:	9808      	ldr	r0, [sp, #32]
 800b00a:	b01d      	add	sp, #116	@ 0x74
 800b00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b00e:	2300      	movs	r3, #0
 800b010:	603b      	str	r3, [r7, #0]
 800b012:	e7e2      	b.n	800afda <_dtoa_r+0x66>
 800b014:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b018:	9212      	str	r2, [sp, #72]	@ 0x48
 800b01a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b01c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b01e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b020:	2200      	movs	r2, #0
 800b022:	2300      	movs	r3, #0
 800b024:	f7f5 fa1a 	bl	800045c <__aeabi_dcmpeq>
 800b028:	1e06      	subs	r6, r0, #0
 800b02a:	d00b      	beq.n	800b044 <_dtoa_r+0xd0>
 800b02c:	2301      	movs	r3, #1
 800b02e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <_dtoa_r+0xca>
 800b038:	4ba5      	ldr	r3, [pc, #660]	@ (800b2d0 <_dtoa_r+0x35c>)
 800b03a:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800b03c:	6013      	str	r3, [r2, #0]
 800b03e:	4ba5      	ldr	r3, [pc, #660]	@ (800b2d4 <_dtoa_r+0x360>)
 800b040:	9308      	str	r3, [sp, #32]
 800b042:	e7e1      	b.n	800b008 <_dtoa_r+0x94>
 800b044:	ab1a      	add	r3, sp, #104	@ 0x68
 800b046:	9301      	str	r3, [sp, #4]
 800b048:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	9803      	ldr	r0, [sp, #12]
 800b04e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b050:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b052:	f001 ff2b 	bl	800ceac <__d2b>
 800b056:	007a      	lsls	r2, r7, #1
 800b058:	9005      	str	r0, [sp, #20]
 800b05a:	0d52      	lsrs	r2, r2, #21
 800b05c:	d100      	bne.n	800b060 <_dtoa_r+0xec>
 800b05e:	e07b      	b.n	800b158 <_dtoa_r+0x1e4>
 800b060:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b062:	9618      	str	r6, [sp, #96]	@ 0x60
 800b064:	0319      	lsls	r1, r3, #12
 800b066:	4b9c      	ldr	r3, [pc, #624]	@ (800b2d8 <_dtoa_r+0x364>)
 800b068:	0b09      	lsrs	r1, r1, #12
 800b06a:	430b      	orrs	r3, r1
 800b06c:	499b      	ldr	r1, [pc, #620]	@ (800b2dc <_dtoa_r+0x368>)
 800b06e:	1857      	adds	r7, r2, r1
 800b070:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b072:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b074:	0019      	movs	r1, r3
 800b076:	2200      	movs	r2, #0
 800b078:	4b99      	ldr	r3, [pc, #612]	@ (800b2e0 <_dtoa_r+0x36c>)
 800b07a:	f7f7 fe75 	bl	8002d68 <__aeabi_dsub>
 800b07e:	4a99      	ldr	r2, [pc, #612]	@ (800b2e4 <_dtoa_r+0x370>)
 800b080:	4b99      	ldr	r3, [pc, #612]	@ (800b2e8 <_dtoa_r+0x374>)
 800b082:	f7f7 fb8b 	bl	800279c <__aeabi_dmul>
 800b086:	4a99      	ldr	r2, [pc, #612]	@ (800b2ec <_dtoa_r+0x378>)
 800b088:	4b99      	ldr	r3, [pc, #612]	@ (800b2f0 <_dtoa_r+0x37c>)
 800b08a:	f7f6 fb87 	bl	800179c <__aeabi_dadd>
 800b08e:	0004      	movs	r4, r0
 800b090:	0038      	movs	r0, r7
 800b092:	000d      	movs	r5, r1
 800b094:	f7f8 fad0 	bl	8003638 <__aeabi_i2d>
 800b098:	4a96      	ldr	r2, [pc, #600]	@ (800b2f4 <_dtoa_r+0x380>)
 800b09a:	4b97      	ldr	r3, [pc, #604]	@ (800b2f8 <_dtoa_r+0x384>)
 800b09c:	f7f7 fb7e 	bl	800279c <__aeabi_dmul>
 800b0a0:	0002      	movs	r2, r0
 800b0a2:	000b      	movs	r3, r1
 800b0a4:	0020      	movs	r0, r4
 800b0a6:	0029      	movs	r1, r5
 800b0a8:	f7f6 fb78 	bl	800179c <__aeabi_dadd>
 800b0ac:	0004      	movs	r4, r0
 800b0ae:	000d      	movs	r5, r1
 800b0b0:	f7f8 fa86 	bl	80035c0 <__aeabi_d2iz>
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	9004      	str	r0, [sp, #16]
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	0020      	movs	r0, r4
 800b0bc:	0029      	movs	r1, r5
 800b0be:	f7f5 f9d3 	bl	8000468 <__aeabi_dcmplt>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	d00b      	beq.n	800b0de <_dtoa_r+0x16a>
 800b0c6:	9804      	ldr	r0, [sp, #16]
 800b0c8:	f7f8 fab6 	bl	8003638 <__aeabi_i2d>
 800b0cc:	002b      	movs	r3, r5
 800b0ce:	0022      	movs	r2, r4
 800b0d0:	f7f5 f9c4 	bl	800045c <__aeabi_dcmpeq>
 800b0d4:	4243      	negs	r3, r0
 800b0d6:	4158      	adcs	r0, r3
 800b0d8:	9b04      	ldr	r3, [sp, #16]
 800b0da:	1a1b      	subs	r3, r3, r0
 800b0dc:	9304      	str	r3, [sp, #16]
 800b0de:	2301      	movs	r3, #1
 800b0e0:	9315      	str	r3, [sp, #84]	@ 0x54
 800b0e2:	9b04      	ldr	r3, [sp, #16]
 800b0e4:	2b16      	cmp	r3, #22
 800b0e6:	d810      	bhi.n	800b10a <_dtoa_r+0x196>
 800b0e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b0ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b0ec:	9a04      	ldr	r2, [sp, #16]
 800b0ee:	4b83      	ldr	r3, [pc, #524]	@ (800b2fc <_dtoa_r+0x388>)
 800b0f0:	00d2      	lsls	r2, r2, #3
 800b0f2:	189b      	adds	r3, r3, r2
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	f7f5 f9b6 	bl	8000468 <__aeabi_dcmplt>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d047      	beq.n	800b190 <_dtoa_r+0x21c>
 800b100:	9b04      	ldr	r3, [sp, #16]
 800b102:	3b01      	subs	r3, #1
 800b104:	9304      	str	r3, [sp, #16]
 800b106:	2300      	movs	r3, #0
 800b108:	9315      	str	r3, [sp, #84]	@ 0x54
 800b10a:	2200      	movs	r2, #0
 800b10c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b10e:	9206      	str	r2, [sp, #24]
 800b110:	1bdb      	subs	r3, r3, r7
 800b112:	1e5a      	subs	r2, r3, #1
 800b114:	d53e      	bpl.n	800b194 <_dtoa_r+0x220>
 800b116:	2201      	movs	r2, #1
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	9306      	str	r3, [sp, #24]
 800b11c:	2300      	movs	r3, #0
 800b11e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b120:	9b04      	ldr	r3, [sp, #16]
 800b122:	2b00      	cmp	r3, #0
 800b124:	db38      	blt.n	800b198 <_dtoa_r+0x224>
 800b126:	9a04      	ldr	r2, [sp, #16]
 800b128:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b12a:	4694      	mov	ip, r2
 800b12c:	4463      	add	r3, ip
 800b12e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b130:	2300      	movs	r3, #0
 800b132:	9214      	str	r2, [sp, #80]	@ 0x50
 800b134:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b136:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b138:	2401      	movs	r4, #1
 800b13a:	2b09      	cmp	r3, #9
 800b13c:	d862      	bhi.n	800b204 <_dtoa_r+0x290>
 800b13e:	2b05      	cmp	r3, #5
 800b140:	dd02      	ble.n	800b148 <_dtoa_r+0x1d4>
 800b142:	2400      	movs	r4, #0
 800b144:	3b04      	subs	r3, #4
 800b146:	9322      	str	r3, [sp, #136]	@ 0x88
 800b148:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b14a:	1e98      	subs	r0, r3, #2
 800b14c:	2803      	cmp	r0, #3
 800b14e:	d863      	bhi.n	800b218 <_dtoa_r+0x2a4>
 800b150:	f7f4 ffea 	bl	8000128 <__gnu_thumb1_case_uqi>
 800b154:	2b385654 	.word	0x2b385654
 800b158:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b15a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800b15c:	18f6      	adds	r6, r6, r3
 800b15e:	4b68      	ldr	r3, [pc, #416]	@ (800b300 <_dtoa_r+0x38c>)
 800b160:	18f2      	adds	r2, r6, r3
 800b162:	2a20      	cmp	r2, #32
 800b164:	dd0f      	ble.n	800b186 <_dtoa_r+0x212>
 800b166:	2340      	movs	r3, #64	@ 0x40
 800b168:	1a9b      	subs	r3, r3, r2
 800b16a:	409f      	lsls	r7, r3
 800b16c:	4b65      	ldr	r3, [pc, #404]	@ (800b304 <_dtoa_r+0x390>)
 800b16e:	0038      	movs	r0, r7
 800b170:	18f3      	adds	r3, r6, r3
 800b172:	40dc      	lsrs	r4, r3
 800b174:	4320      	orrs	r0, r4
 800b176:	f7f8 fa8d 	bl	8003694 <__aeabi_ui2d>
 800b17a:	2201      	movs	r2, #1
 800b17c:	4b62      	ldr	r3, [pc, #392]	@ (800b308 <_dtoa_r+0x394>)
 800b17e:	1e77      	subs	r7, r6, #1
 800b180:	18cb      	adds	r3, r1, r3
 800b182:	9218      	str	r2, [sp, #96]	@ 0x60
 800b184:	e776      	b.n	800b074 <_dtoa_r+0x100>
 800b186:	2320      	movs	r3, #32
 800b188:	0020      	movs	r0, r4
 800b18a:	1a9b      	subs	r3, r3, r2
 800b18c:	4098      	lsls	r0, r3
 800b18e:	e7f2      	b.n	800b176 <_dtoa_r+0x202>
 800b190:	9015      	str	r0, [sp, #84]	@ 0x54
 800b192:	e7ba      	b.n	800b10a <_dtoa_r+0x196>
 800b194:	920d      	str	r2, [sp, #52]	@ 0x34
 800b196:	e7c3      	b.n	800b120 <_dtoa_r+0x1ac>
 800b198:	9b06      	ldr	r3, [sp, #24]
 800b19a:	9a04      	ldr	r2, [sp, #16]
 800b19c:	1a9b      	subs	r3, r3, r2
 800b19e:	9306      	str	r3, [sp, #24]
 800b1a0:	4253      	negs	r3, r2
 800b1a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	9314      	str	r3, [sp, #80]	@ 0x50
 800b1a8:	e7c5      	b.n	800b136 <_dtoa_r+0x1c2>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b1ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1b0:	4694      	mov	ip, r2
 800b1b2:	9b04      	ldr	r3, [sp, #16]
 800b1b4:	4463      	add	r3, ip
 800b1b6:	930e      	str	r3, [sp, #56]	@ 0x38
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	dc08      	bgt.n	800b1d2 <_dtoa_r+0x25e>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e006      	b.n	800b1d2 <_dtoa_r+0x25e>
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b1c8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	dd28      	ble.n	800b220 <_dtoa_r+0x2ac>
 800b1ce:	930e      	str	r3, [sp, #56]	@ 0x38
 800b1d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1d2:	9a03      	ldr	r2, [sp, #12]
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	69d0      	ldr	r0, [r2, #28]
 800b1d8:	2204      	movs	r2, #4
 800b1da:	0015      	movs	r5, r2
 800b1dc:	3514      	adds	r5, #20
 800b1de:	429d      	cmp	r5, r3
 800b1e0:	d923      	bls.n	800b22a <_dtoa_r+0x2b6>
 800b1e2:	6041      	str	r1, [r0, #4]
 800b1e4:	9803      	ldr	r0, [sp, #12]
 800b1e6:	f001 fb25 	bl	800c834 <_Balloc>
 800b1ea:	9008      	str	r0, [sp, #32]
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d11f      	bne.n	800b230 <_dtoa_r+0x2bc>
 800b1f0:	21b0      	movs	r1, #176	@ 0xb0
 800b1f2:	4b46      	ldr	r3, [pc, #280]	@ (800b30c <_dtoa_r+0x398>)
 800b1f4:	4831      	ldr	r0, [pc, #196]	@ (800b2bc <_dtoa_r+0x348>)
 800b1f6:	9a08      	ldr	r2, [sp, #32]
 800b1f8:	31ff      	adds	r1, #255	@ 0xff
 800b1fa:	e6d0      	b.n	800af9e <_dtoa_r+0x2a>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	e7e2      	b.n	800b1c6 <_dtoa_r+0x252>
 800b200:	2300      	movs	r3, #0
 800b202:	e7d3      	b.n	800b1ac <_dtoa_r+0x238>
 800b204:	2300      	movs	r3, #0
 800b206:	9410      	str	r4, [sp, #64]	@ 0x40
 800b208:	9322      	str	r3, [sp, #136]	@ 0x88
 800b20a:	3b01      	subs	r3, #1
 800b20c:	2200      	movs	r2, #0
 800b20e:	930e      	str	r3, [sp, #56]	@ 0x38
 800b210:	9309      	str	r3, [sp, #36]	@ 0x24
 800b212:	3313      	adds	r3, #19
 800b214:	9223      	str	r2, [sp, #140]	@ 0x8c
 800b216:	e7dc      	b.n	800b1d2 <_dtoa_r+0x25e>
 800b218:	2301      	movs	r3, #1
 800b21a:	9310      	str	r3, [sp, #64]	@ 0x40
 800b21c:	3b02      	subs	r3, #2
 800b21e:	e7f5      	b.n	800b20c <_dtoa_r+0x298>
 800b220:	2301      	movs	r3, #1
 800b222:	001a      	movs	r2, r3
 800b224:	930e      	str	r3, [sp, #56]	@ 0x38
 800b226:	9309      	str	r3, [sp, #36]	@ 0x24
 800b228:	e7f4      	b.n	800b214 <_dtoa_r+0x2a0>
 800b22a:	3101      	adds	r1, #1
 800b22c:	0052      	lsls	r2, r2, #1
 800b22e:	e7d4      	b.n	800b1da <_dtoa_r+0x266>
 800b230:	9b03      	ldr	r3, [sp, #12]
 800b232:	9a08      	ldr	r2, [sp, #32]
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	601a      	str	r2, [r3, #0]
 800b238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b23a:	2b0e      	cmp	r3, #14
 800b23c:	d900      	bls.n	800b240 <_dtoa_r+0x2cc>
 800b23e:	e0d6      	b.n	800b3ee <_dtoa_r+0x47a>
 800b240:	2c00      	cmp	r4, #0
 800b242:	d100      	bne.n	800b246 <_dtoa_r+0x2d2>
 800b244:	e0d3      	b.n	800b3ee <_dtoa_r+0x47a>
 800b246:	9b04      	ldr	r3, [sp, #16]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	dd63      	ble.n	800b314 <_dtoa_r+0x3a0>
 800b24c:	210f      	movs	r1, #15
 800b24e:	9a04      	ldr	r2, [sp, #16]
 800b250:	4b2a      	ldr	r3, [pc, #168]	@ (800b2fc <_dtoa_r+0x388>)
 800b252:	400a      	ands	r2, r1
 800b254:	00d2      	lsls	r2, r2, #3
 800b256:	189b      	adds	r3, r3, r2
 800b258:	681e      	ldr	r6, [r3, #0]
 800b25a:	685f      	ldr	r7, [r3, #4]
 800b25c:	9b04      	ldr	r3, [sp, #16]
 800b25e:	2402      	movs	r4, #2
 800b260:	111d      	asrs	r5, r3, #4
 800b262:	05db      	lsls	r3, r3, #23
 800b264:	d50a      	bpl.n	800b27c <_dtoa_r+0x308>
 800b266:	4b2a      	ldr	r3, [pc, #168]	@ (800b310 <_dtoa_r+0x39c>)
 800b268:	400d      	ands	r5, r1
 800b26a:	6a1a      	ldr	r2, [r3, #32]
 800b26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b26e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b270:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b272:	f7f6 fe59 	bl	8001f28 <__aeabi_ddiv>
 800b276:	900a      	str	r0, [sp, #40]	@ 0x28
 800b278:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b27a:	3401      	adds	r4, #1
 800b27c:	4b24      	ldr	r3, [pc, #144]	@ (800b310 <_dtoa_r+0x39c>)
 800b27e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b280:	2d00      	cmp	r5, #0
 800b282:	d108      	bne.n	800b296 <_dtoa_r+0x322>
 800b284:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b286:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b288:	0032      	movs	r2, r6
 800b28a:	003b      	movs	r3, r7
 800b28c:	f7f6 fe4c 	bl	8001f28 <__aeabi_ddiv>
 800b290:	900a      	str	r0, [sp, #40]	@ 0x28
 800b292:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b294:	e059      	b.n	800b34a <_dtoa_r+0x3d6>
 800b296:	2301      	movs	r3, #1
 800b298:	421d      	tst	r5, r3
 800b29a:	d009      	beq.n	800b2b0 <_dtoa_r+0x33c>
 800b29c:	18e4      	adds	r4, r4, r3
 800b29e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2a0:	0030      	movs	r0, r6
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	0039      	movs	r1, r7
 800b2a8:	f7f7 fa78 	bl	800279c <__aeabi_dmul>
 800b2ac:	0006      	movs	r6, r0
 800b2ae:	000f      	movs	r7, r1
 800b2b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2b2:	106d      	asrs	r5, r5, #1
 800b2b4:	3308      	adds	r3, #8
 800b2b6:	e7e2      	b.n	800b27e <_dtoa_r+0x30a>
 800b2b8:	0800e0ca 	.word	0x0800e0ca
 800b2bc:	0800e184 	.word	0x0800e184
 800b2c0:	7ff00000 	.word	0x7ff00000
 800b2c4:	0000270f 	.word	0x0000270f
 800b2c8:	0800e180 	.word	0x0800e180
 800b2cc:	0800e183 	.word	0x0800e183
 800b2d0:	0800e215 	.word	0x0800e215
 800b2d4:	0800e214 	.word	0x0800e214
 800b2d8:	3ff00000 	.word	0x3ff00000
 800b2dc:	fffffc01 	.word	0xfffffc01
 800b2e0:	3ff80000 	.word	0x3ff80000
 800b2e4:	636f4361 	.word	0x636f4361
 800b2e8:	3fd287a7 	.word	0x3fd287a7
 800b2ec:	8b60c8b3 	.word	0x8b60c8b3
 800b2f0:	3fc68a28 	.word	0x3fc68a28
 800b2f4:	509f79fb 	.word	0x509f79fb
 800b2f8:	3fd34413 	.word	0x3fd34413
 800b2fc:	0800e2b0 	.word	0x0800e2b0
 800b300:	00000432 	.word	0x00000432
 800b304:	00000412 	.word	0x00000412
 800b308:	fe100000 	.word	0xfe100000
 800b30c:	0800e1dc 	.word	0x0800e1dc
 800b310:	0800e288 	.word	0x0800e288
 800b314:	9b04      	ldr	r3, [sp, #16]
 800b316:	2402      	movs	r4, #2
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d016      	beq.n	800b34a <_dtoa_r+0x3d6>
 800b31c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800b31e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800b320:	220f      	movs	r2, #15
 800b322:	425d      	negs	r5, r3
 800b324:	402a      	ands	r2, r5
 800b326:	4bd5      	ldr	r3, [pc, #852]	@ (800b67c <_dtoa_r+0x708>)
 800b328:	00d2      	lsls	r2, r2, #3
 800b32a:	189b      	adds	r3, r3, r2
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	f7f7 fa34 	bl	800279c <__aeabi_dmul>
 800b334:	2701      	movs	r7, #1
 800b336:	2300      	movs	r3, #0
 800b338:	900a      	str	r0, [sp, #40]	@ 0x28
 800b33a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b33c:	4ed0      	ldr	r6, [pc, #832]	@ (800b680 <_dtoa_r+0x70c>)
 800b33e:	112d      	asrs	r5, r5, #4
 800b340:	2d00      	cmp	r5, #0
 800b342:	d000      	beq.n	800b346 <_dtoa_r+0x3d2>
 800b344:	e095      	b.n	800b472 <_dtoa_r+0x4fe>
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1a2      	bne.n	800b290 <_dtoa_r+0x31c>
 800b34a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b34c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b34e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b350:	2b00      	cmp	r3, #0
 800b352:	d100      	bne.n	800b356 <_dtoa_r+0x3e2>
 800b354:	e098      	b.n	800b488 <_dtoa_r+0x514>
 800b356:	2200      	movs	r2, #0
 800b358:	0030      	movs	r0, r6
 800b35a:	0039      	movs	r1, r7
 800b35c:	4bc9      	ldr	r3, [pc, #804]	@ (800b684 <_dtoa_r+0x710>)
 800b35e:	f7f5 f883 	bl	8000468 <__aeabi_dcmplt>
 800b362:	2800      	cmp	r0, #0
 800b364:	d100      	bne.n	800b368 <_dtoa_r+0x3f4>
 800b366:	e08f      	b.n	800b488 <_dtoa_r+0x514>
 800b368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d100      	bne.n	800b370 <_dtoa_r+0x3fc>
 800b36e:	e08b      	b.n	800b488 <_dtoa_r+0x514>
 800b370:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b372:	2b00      	cmp	r3, #0
 800b374:	dd37      	ble.n	800b3e6 <_dtoa_r+0x472>
 800b376:	9b04      	ldr	r3, [sp, #16]
 800b378:	2200      	movs	r2, #0
 800b37a:	3b01      	subs	r3, #1
 800b37c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b37e:	0030      	movs	r0, r6
 800b380:	4bc1      	ldr	r3, [pc, #772]	@ (800b688 <_dtoa_r+0x714>)
 800b382:	0039      	movs	r1, r7
 800b384:	f7f7 fa0a 	bl	800279c <__aeabi_dmul>
 800b388:	900a      	str	r0, [sp, #40]	@ 0x28
 800b38a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b38c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b38e:	3401      	adds	r4, #1
 800b390:	0020      	movs	r0, r4
 800b392:	9311      	str	r3, [sp, #68]	@ 0x44
 800b394:	f7f8 f950 	bl	8003638 <__aeabi_i2d>
 800b398:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b39a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b39c:	f7f7 f9fe 	bl	800279c <__aeabi_dmul>
 800b3a0:	4bba      	ldr	r3, [pc, #744]	@ (800b68c <_dtoa_r+0x718>)
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f7f6 f9fa 	bl	800179c <__aeabi_dadd>
 800b3a8:	4bb9      	ldr	r3, [pc, #740]	@ (800b690 <_dtoa_r+0x71c>)
 800b3aa:	0006      	movs	r6, r0
 800b3ac:	18cf      	adds	r7, r1, r3
 800b3ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d16d      	bne.n	800b490 <_dtoa_r+0x51c>
 800b3b4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b3b6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	4bb6      	ldr	r3, [pc, #728]	@ (800b694 <_dtoa_r+0x720>)
 800b3bc:	f7f7 fcd4 	bl	8002d68 <__aeabi_dsub>
 800b3c0:	0032      	movs	r2, r6
 800b3c2:	003b      	movs	r3, r7
 800b3c4:	0004      	movs	r4, r0
 800b3c6:	000d      	movs	r5, r1
 800b3c8:	f7f5 f862 	bl	8000490 <__aeabi_dcmpgt>
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d000      	beq.n	800b3d2 <_dtoa_r+0x45e>
 800b3d0:	e2b6      	b.n	800b940 <_dtoa_r+0x9cc>
 800b3d2:	2180      	movs	r1, #128	@ 0x80
 800b3d4:	0609      	lsls	r1, r1, #24
 800b3d6:	187b      	adds	r3, r7, r1
 800b3d8:	0032      	movs	r2, r6
 800b3da:	0020      	movs	r0, r4
 800b3dc:	0029      	movs	r1, r5
 800b3de:	f7f5 f843 	bl	8000468 <__aeabi_dcmplt>
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	d128      	bne.n	800b438 <_dtoa_r+0x4c4>
 800b3e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b3e8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800b3ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3ec:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b3ee:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	da00      	bge.n	800b3f6 <_dtoa_r+0x482>
 800b3f4:	e174      	b.n	800b6e0 <_dtoa_r+0x76c>
 800b3f6:	9a04      	ldr	r2, [sp, #16]
 800b3f8:	2a0e      	cmp	r2, #14
 800b3fa:	dd00      	ble.n	800b3fe <_dtoa_r+0x48a>
 800b3fc:	e170      	b.n	800b6e0 <_dtoa_r+0x76c>
 800b3fe:	4b9f      	ldr	r3, [pc, #636]	@ (800b67c <_dtoa_r+0x708>)
 800b400:	00d2      	lsls	r2, r2, #3
 800b402:	189b      	adds	r3, r3, r2
 800b404:	685c      	ldr	r4, [r3, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	9306      	str	r3, [sp, #24]
 800b40a:	9407      	str	r4, [sp, #28]
 800b40c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b40e:	2b00      	cmp	r3, #0
 800b410:	db00      	blt.n	800b414 <_dtoa_r+0x4a0>
 800b412:	e0e7      	b.n	800b5e4 <_dtoa_r+0x670>
 800b414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b416:	2b00      	cmp	r3, #0
 800b418:	dd00      	ble.n	800b41c <_dtoa_r+0x4a8>
 800b41a:	e0e3      	b.n	800b5e4 <_dtoa_r+0x670>
 800b41c:	d10c      	bne.n	800b438 <_dtoa_r+0x4c4>
 800b41e:	9806      	ldr	r0, [sp, #24]
 800b420:	9907      	ldr	r1, [sp, #28]
 800b422:	2200      	movs	r2, #0
 800b424:	4b9b      	ldr	r3, [pc, #620]	@ (800b694 <_dtoa_r+0x720>)
 800b426:	f7f7 f9b9 	bl	800279c <__aeabi_dmul>
 800b42a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b42c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b42e:	f7f5 f839 	bl	80004a4 <__aeabi_dcmpge>
 800b432:	2800      	cmp	r0, #0
 800b434:	d100      	bne.n	800b438 <_dtoa_r+0x4c4>
 800b436:	e286      	b.n	800b946 <_dtoa_r+0x9d2>
 800b438:	2600      	movs	r6, #0
 800b43a:	0037      	movs	r7, r6
 800b43c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b43e:	9c08      	ldr	r4, [sp, #32]
 800b440:	43db      	mvns	r3, r3
 800b442:	930c      	str	r3, [sp, #48]	@ 0x30
 800b444:	9704      	str	r7, [sp, #16]
 800b446:	2700      	movs	r7, #0
 800b448:	0031      	movs	r1, r6
 800b44a:	9803      	ldr	r0, [sp, #12]
 800b44c:	f001 fa36 	bl	800c8bc <_Bfree>
 800b450:	9b04      	ldr	r3, [sp, #16]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d100      	bne.n	800b458 <_dtoa_r+0x4e4>
 800b456:	e0bb      	b.n	800b5d0 <_dtoa_r+0x65c>
 800b458:	2f00      	cmp	r7, #0
 800b45a:	d005      	beq.n	800b468 <_dtoa_r+0x4f4>
 800b45c:	429f      	cmp	r7, r3
 800b45e:	d003      	beq.n	800b468 <_dtoa_r+0x4f4>
 800b460:	0039      	movs	r1, r7
 800b462:	9803      	ldr	r0, [sp, #12]
 800b464:	f001 fa2a 	bl	800c8bc <_Bfree>
 800b468:	9904      	ldr	r1, [sp, #16]
 800b46a:	9803      	ldr	r0, [sp, #12]
 800b46c:	f001 fa26 	bl	800c8bc <_Bfree>
 800b470:	e0ae      	b.n	800b5d0 <_dtoa_r+0x65c>
 800b472:	423d      	tst	r5, r7
 800b474:	d005      	beq.n	800b482 <_dtoa_r+0x50e>
 800b476:	6832      	ldr	r2, [r6, #0]
 800b478:	6873      	ldr	r3, [r6, #4]
 800b47a:	f7f7 f98f 	bl	800279c <__aeabi_dmul>
 800b47e:	003b      	movs	r3, r7
 800b480:	3401      	adds	r4, #1
 800b482:	106d      	asrs	r5, r5, #1
 800b484:	3608      	adds	r6, #8
 800b486:	e75b      	b.n	800b340 <_dtoa_r+0x3cc>
 800b488:	9b04      	ldr	r3, [sp, #16]
 800b48a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b48c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b48e:	e77f      	b.n	800b390 <_dtoa_r+0x41c>
 800b490:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b492:	4b7a      	ldr	r3, [pc, #488]	@ (800b67c <_dtoa_r+0x708>)
 800b494:	3a01      	subs	r2, #1
 800b496:	00d2      	lsls	r2, r2, #3
 800b498:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b49a:	189b      	adds	r3, r3, r2
 800b49c:	681a      	ldr	r2, [r3, #0]
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	2900      	cmp	r1, #0
 800b4a2:	d04c      	beq.n	800b53e <_dtoa_r+0x5ca>
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	497c      	ldr	r1, [pc, #496]	@ (800b698 <_dtoa_r+0x724>)
 800b4a8:	f7f6 fd3e 	bl	8001f28 <__aeabi_ddiv>
 800b4ac:	0032      	movs	r2, r6
 800b4ae:	003b      	movs	r3, r7
 800b4b0:	f7f7 fc5a 	bl	8002d68 <__aeabi_dsub>
 800b4b4:	9a08      	ldr	r2, [sp, #32]
 800b4b6:	0006      	movs	r6, r0
 800b4b8:	4694      	mov	ip, r2
 800b4ba:	000f      	movs	r7, r1
 800b4bc:	9b08      	ldr	r3, [sp, #32]
 800b4be:	9316      	str	r3, [sp, #88]	@ 0x58
 800b4c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4c2:	4463      	add	r3, ip
 800b4c4:	9311      	str	r3, [sp, #68]	@ 0x44
 800b4c6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b4c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4ca:	f7f8 f879 	bl	80035c0 <__aeabi_d2iz>
 800b4ce:	0005      	movs	r5, r0
 800b4d0:	f7f8 f8b2 	bl	8003638 <__aeabi_i2d>
 800b4d4:	0002      	movs	r2, r0
 800b4d6:	000b      	movs	r3, r1
 800b4d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b4da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b4dc:	f7f7 fc44 	bl	8002d68 <__aeabi_dsub>
 800b4e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b4e2:	3530      	adds	r5, #48	@ 0x30
 800b4e4:	1c5c      	adds	r4, r3, #1
 800b4e6:	701d      	strb	r5, [r3, #0]
 800b4e8:	0032      	movs	r2, r6
 800b4ea:	003b      	movs	r3, r7
 800b4ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800b4ee:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b4f0:	f7f4 ffba 	bl	8000468 <__aeabi_dcmplt>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d16b      	bne.n	800b5d0 <_dtoa_r+0x65c>
 800b4f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	4961      	ldr	r1, [pc, #388]	@ (800b684 <_dtoa_r+0x710>)
 800b500:	f7f7 fc32 	bl	8002d68 <__aeabi_dsub>
 800b504:	0032      	movs	r2, r6
 800b506:	003b      	movs	r3, r7
 800b508:	f7f4 ffae 	bl	8000468 <__aeabi_dcmplt>
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d000      	beq.n	800b512 <_dtoa_r+0x59e>
 800b510:	e0c6      	b.n	800b6a0 <_dtoa_r+0x72c>
 800b512:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b514:	42a3      	cmp	r3, r4
 800b516:	d100      	bne.n	800b51a <_dtoa_r+0x5a6>
 800b518:	e765      	b.n	800b3e6 <_dtoa_r+0x472>
 800b51a:	2200      	movs	r2, #0
 800b51c:	0030      	movs	r0, r6
 800b51e:	0039      	movs	r1, r7
 800b520:	4b59      	ldr	r3, [pc, #356]	@ (800b688 <_dtoa_r+0x714>)
 800b522:	f7f7 f93b 	bl	800279c <__aeabi_dmul>
 800b526:	2200      	movs	r2, #0
 800b528:	0006      	movs	r6, r0
 800b52a:	000f      	movs	r7, r1
 800b52c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b52e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b530:	4b55      	ldr	r3, [pc, #340]	@ (800b688 <_dtoa_r+0x714>)
 800b532:	f7f7 f933 	bl	800279c <__aeabi_dmul>
 800b536:	9416      	str	r4, [sp, #88]	@ 0x58
 800b538:	900a      	str	r0, [sp, #40]	@ 0x28
 800b53a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b53c:	e7c3      	b.n	800b4c6 <_dtoa_r+0x552>
 800b53e:	0030      	movs	r0, r6
 800b540:	0039      	movs	r1, r7
 800b542:	f7f7 f92b 	bl	800279c <__aeabi_dmul>
 800b546:	9d08      	ldr	r5, [sp, #32]
 800b548:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b54a:	002b      	movs	r3, r5
 800b54c:	4694      	mov	ip, r2
 800b54e:	9016      	str	r0, [sp, #88]	@ 0x58
 800b550:	9117      	str	r1, [sp, #92]	@ 0x5c
 800b552:	4463      	add	r3, ip
 800b554:	9319      	str	r3, [sp, #100]	@ 0x64
 800b556:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b558:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b55a:	f7f8 f831 	bl	80035c0 <__aeabi_d2iz>
 800b55e:	0004      	movs	r4, r0
 800b560:	f7f8 f86a 	bl	8003638 <__aeabi_i2d>
 800b564:	000b      	movs	r3, r1
 800b566:	0002      	movs	r2, r0
 800b568:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b56a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b56c:	f7f7 fbfc 	bl	8002d68 <__aeabi_dsub>
 800b570:	3430      	adds	r4, #48	@ 0x30
 800b572:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b574:	702c      	strb	r4, [r5, #0]
 800b576:	3501      	adds	r5, #1
 800b578:	0006      	movs	r6, r0
 800b57a:	000f      	movs	r7, r1
 800b57c:	42ab      	cmp	r3, r5
 800b57e:	d12a      	bne.n	800b5d6 <_dtoa_r+0x662>
 800b580:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800b582:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800b584:	9b08      	ldr	r3, [sp, #32]
 800b586:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800b588:	469c      	mov	ip, r3
 800b58a:	2200      	movs	r2, #0
 800b58c:	4b42      	ldr	r3, [pc, #264]	@ (800b698 <_dtoa_r+0x724>)
 800b58e:	4464      	add	r4, ip
 800b590:	f7f6 f904 	bl	800179c <__aeabi_dadd>
 800b594:	0002      	movs	r2, r0
 800b596:	000b      	movs	r3, r1
 800b598:	0030      	movs	r0, r6
 800b59a:	0039      	movs	r1, r7
 800b59c:	f7f4 ff78 	bl	8000490 <__aeabi_dcmpgt>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d000      	beq.n	800b5a6 <_dtoa_r+0x632>
 800b5a4:	e07c      	b.n	800b6a0 <_dtoa_r+0x72c>
 800b5a6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b5a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	493a      	ldr	r1, [pc, #232]	@ (800b698 <_dtoa_r+0x724>)
 800b5ae:	f7f7 fbdb 	bl	8002d68 <__aeabi_dsub>
 800b5b2:	0002      	movs	r2, r0
 800b5b4:	000b      	movs	r3, r1
 800b5b6:	0030      	movs	r0, r6
 800b5b8:	0039      	movs	r1, r7
 800b5ba:	f7f4 ff55 	bl	8000468 <__aeabi_dcmplt>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d100      	bne.n	800b5c4 <_dtoa_r+0x650>
 800b5c2:	e710      	b.n	800b3e6 <_dtoa_r+0x472>
 800b5c4:	0023      	movs	r3, r4
 800b5c6:	3c01      	subs	r4, #1
 800b5c8:	7822      	ldrb	r2, [r4, #0]
 800b5ca:	2a30      	cmp	r2, #48	@ 0x30
 800b5cc:	d0fa      	beq.n	800b5c4 <_dtoa_r+0x650>
 800b5ce:	001c      	movs	r4, r3
 800b5d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5d2:	9304      	str	r3, [sp, #16]
 800b5d4:	e042      	b.n	800b65c <_dtoa_r+0x6e8>
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	4b2b      	ldr	r3, [pc, #172]	@ (800b688 <_dtoa_r+0x714>)
 800b5da:	f7f7 f8df 	bl	800279c <__aeabi_dmul>
 800b5de:	900a      	str	r0, [sp, #40]	@ 0x28
 800b5e0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b5e2:	e7b8      	b.n	800b556 <_dtoa_r+0x5e2>
 800b5e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5e6:	9d08      	ldr	r5, [sp, #32]
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	195b      	adds	r3, r3, r5
 800b5ec:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b5ee:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800b5f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5f2:	9a06      	ldr	r2, [sp, #24]
 800b5f4:	9b07      	ldr	r3, [sp, #28]
 800b5f6:	0030      	movs	r0, r6
 800b5f8:	0039      	movs	r1, r7
 800b5fa:	f7f6 fc95 	bl	8001f28 <__aeabi_ddiv>
 800b5fe:	f7f7 ffdf 	bl	80035c0 <__aeabi_d2iz>
 800b602:	9009      	str	r0, [sp, #36]	@ 0x24
 800b604:	f7f8 f818 	bl	8003638 <__aeabi_i2d>
 800b608:	9a06      	ldr	r2, [sp, #24]
 800b60a:	9b07      	ldr	r3, [sp, #28]
 800b60c:	f7f7 f8c6 	bl	800279c <__aeabi_dmul>
 800b610:	0002      	movs	r2, r0
 800b612:	000b      	movs	r3, r1
 800b614:	0030      	movs	r0, r6
 800b616:	0039      	movs	r1, r7
 800b618:	f7f7 fba6 	bl	8002d68 <__aeabi_dsub>
 800b61c:	002b      	movs	r3, r5
 800b61e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b620:	3501      	adds	r5, #1
 800b622:	3230      	adds	r2, #48	@ 0x30
 800b624:	701a      	strb	r2, [r3, #0]
 800b626:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b628:	002c      	movs	r4, r5
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d14b      	bne.n	800b6c6 <_dtoa_r+0x752>
 800b62e:	0002      	movs	r2, r0
 800b630:	000b      	movs	r3, r1
 800b632:	f7f6 f8b3 	bl	800179c <__aeabi_dadd>
 800b636:	9a06      	ldr	r2, [sp, #24]
 800b638:	9b07      	ldr	r3, [sp, #28]
 800b63a:	0006      	movs	r6, r0
 800b63c:	000f      	movs	r7, r1
 800b63e:	f7f4 ff27 	bl	8000490 <__aeabi_dcmpgt>
 800b642:	2800      	cmp	r0, #0
 800b644:	d12a      	bne.n	800b69c <_dtoa_r+0x728>
 800b646:	9a06      	ldr	r2, [sp, #24]
 800b648:	9b07      	ldr	r3, [sp, #28]
 800b64a:	0030      	movs	r0, r6
 800b64c:	0039      	movs	r1, r7
 800b64e:	f7f4 ff05 	bl	800045c <__aeabi_dcmpeq>
 800b652:	2800      	cmp	r0, #0
 800b654:	d002      	beq.n	800b65c <_dtoa_r+0x6e8>
 800b656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b658:	07dd      	lsls	r5, r3, #31
 800b65a:	d41f      	bmi.n	800b69c <_dtoa_r+0x728>
 800b65c:	9905      	ldr	r1, [sp, #20]
 800b65e:	9803      	ldr	r0, [sp, #12]
 800b660:	f001 f92c 	bl	800c8bc <_Bfree>
 800b664:	2300      	movs	r3, #0
 800b666:	7023      	strb	r3, [r4, #0]
 800b668:	9b04      	ldr	r3, [sp, #16]
 800b66a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b66c:	3301      	adds	r3, #1
 800b66e:	6013      	str	r3, [r2, #0]
 800b670:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b672:	2b00      	cmp	r3, #0
 800b674:	d100      	bne.n	800b678 <_dtoa_r+0x704>
 800b676:	e4c7      	b.n	800b008 <_dtoa_r+0x94>
 800b678:	601c      	str	r4, [r3, #0]
 800b67a:	e4c5      	b.n	800b008 <_dtoa_r+0x94>
 800b67c:	0800e2b0 	.word	0x0800e2b0
 800b680:	0800e288 	.word	0x0800e288
 800b684:	3ff00000 	.word	0x3ff00000
 800b688:	40240000 	.word	0x40240000
 800b68c:	401c0000 	.word	0x401c0000
 800b690:	fcc00000 	.word	0xfcc00000
 800b694:	40140000 	.word	0x40140000
 800b698:	3fe00000 	.word	0x3fe00000
 800b69c:	9b04      	ldr	r3, [sp, #16]
 800b69e:	930c      	str	r3, [sp, #48]	@ 0x30
 800b6a0:	0023      	movs	r3, r4
 800b6a2:	001c      	movs	r4, r3
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	781a      	ldrb	r2, [r3, #0]
 800b6a8:	2a39      	cmp	r2, #57	@ 0x39
 800b6aa:	d108      	bne.n	800b6be <_dtoa_r+0x74a>
 800b6ac:	9a08      	ldr	r2, [sp, #32]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d1f7      	bne.n	800b6a2 <_dtoa_r+0x72e>
 800b6b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b6b4:	9908      	ldr	r1, [sp, #32]
 800b6b6:	3201      	adds	r2, #1
 800b6b8:	920c      	str	r2, [sp, #48]	@ 0x30
 800b6ba:	2230      	movs	r2, #48	@ 0x30
 800b6bc:	700a      	strb	r2, [r1, #0]
 800b6be:	781a      	ldrb	r2, [r3, #0]
 800b6c0:	3201      	adds	r2, #1
 800b6c2:	701a      	strb	r2, [r3, #0]
 800b6c4:	e784      	b.n	800b5d0 <_dtoa_r+0x65c>
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	4bc6      	ldr	r3, [pc, #792]	@ (800b9e4 <_dtoa_r+0xa70>)
 800b6ca:	f7f7 f867 	bl	800279c <__aeabi_dmul>
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	0006      	movs	r6, r0
 800b6d4:	000f      	movs	r7, r1
 800b6d6:	f7f4 fec1 	bl	800045c <__aeabi_dcmpeq>
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d089      	beq.n	800b5f2 <_dtoa_r+0x67e>
 800b6de:	e7bd      	b.n	800b65c <_dtoa_r+0x6e8>
 800b6e0:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800b6e2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800b6e4:	9c06      	ldr	r4, [sp, #24]
 800b6e6:	2f00      	cmp	r7, #0
 800b6e8:	d014      	beq.n	800b714 <_dtoa_r+0x7a0>
 800b6ea:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b6ec:	2a01      	cmp	r2, #1
 800b6ee:	dd00      	ble.n	800b6f2 <_dtoa_r+0x77e>
 800b6f0:	e0e4      	b.n	800b8bc <_dtoa_r+0x948>
 800b6f2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800b6f4:	2a00      	cmp	r2, #0
 800b6f6:	d100      	bne.n	800b6fa <_dtoa_r+0x786>
 800b6f8:	e0da      	b.n	800b8b0 <_dtoa_r+0x93c>
 800b6fa:	4abb      	ldr	r2, [pc, #748]	@ (800b9e8 <_dtoa_r+0xa74>)
 800b6fc:	189b      	adds	r3, r3, r2
 800b6fe:	9a06      	ldr	r2, [sp, #24]
 800b700:	2101      	movs	r1, #1
 800b702:	18d2      	adds	r2, r2, r3
 800b704:	9206      	str	r2, [sp, #24]
 800b706:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b708:	9803      	ldr	r0, [sp, #12]
 800b70a:	18d3      	adds	r3, r2, r3
 800b70c:	930d      	str	r3, [sp, #52]	@ 0x34
 800b70e:	f001 f98d 	bl	800ca2c <__i2b>
 800b712:	0007      	movs	r7, r0
 800b714:	2c00      	cmp	r4, #0
 800b716:	d00e      	beq.n	800b736 <_dtoa_r+0x7c2>
 800b718:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	dd0b      	ble.n	800b736 <_dtoa_r+0x7c2>
 800b71e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b720:	0023      	movs	r3, r4
 800b722:	4294      	cmp	r4, r2
 800b724:	dd00      	ble.n	800b728 <_dtoa_r+0x7b4>
 800b726:	0013      	movs	r3, r2
 800b728:	9a06      	ldr	r2, [sp, #24]
 800b72a:	1ae4      	subs	r4, r4, r3
 800b72c:	1ad2      	subs	r2, r2, r3
 800b72e:	9206      	str	r2, [sp, #24]
 800b730:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b732:	1ad3      	subs	r3, r2, r3
 800b734:	930d      	str	r3, [sp, #52]	@ 0x34
 800b736:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d021      	beq.n	800b780 <_dtoa_r+0x80c>
 800b73c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d100      	bne.n	800b744 <_dtoa_r+0x7d0>
 800b742:	e0d3      	b.n	800b8ec <_dtoa_r+0x978>
 800b744:	9e05      	ldr	r6, [sp, #20]
 800b746:	2d00      	cmp	r5, #0
 800b748:	d014      	beq.n	800b774 <_dtoa_r+0x800>
 800b74a:	0039      	movs	r1, r7
 800b74c:	002a      	movs	r2, r5
 800b74e:	9803      	ldr	r0, [sp, #12]
 800b750:	f001 fa2e 	bl	800cbb0 <__pow5mult>
 800b754:	9a05      	ldr	r2, [sp, #20]
 800b756:	0001      	movs	r1, r0
 800b758:	0007      	movs	r7, r0
 800b75a:	9803      	ldr	r0, [sp, #12]
 800b75c:	f001 f97e 	bl	800ca5c <__multiply>
 800b760:	0006      	movs	r6, r0
 800b762:	9905      	ldr	r1, [sp, #20]
 800b764:	9803      	ldr	r0, [sp, #12]
 800b766:	f001 f8a9 	bl	800c8bc <_Bfree>
 800b76a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b76c:	9605      	str	r6, [sp, #20]
 800b76e:	1b5b      	subs	r3, r3, r5
 800b770:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b772:	d005      	beq.n	800b780 <_dtoa_r+0x80c>
 800b774:	0031      	movs	r1, r6
 800b776:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b778:	9803      	ldr	r0, [sp, #12]
 800b77a:	f001 fa19 	bl	800cbb0 <__pow5mult>
 800b77e:	9005      	str	r0, [sp, #20]
 800b780:	2101      	movs	r1, #1
 800b782:	9803      	ldr	r0, [sp, #12]
 800b784:	f001 f952 	bl	800ca2c <__i2b>
 800b788:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b78a:	0006      	movs	r6, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d100      	bne.n	800b792 <_dtoa_r+0x81e>
 800b790:	e1bc      	b.n	800bb0c <_dtoa_r+0xb98>
 800b792:	001a      	movs	r2, r3
 800b794:	0001      	movs	r1, r0
 800b796:	9803      	ldr	r0, [sp, #12]
 800b798:	f001 fa0a 	bl	800cbb0 <__pow5mult>
 800b79c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b79e:	0006      	movs	r6, r0
 800b7a0:	2500      	movs	r5, #0
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	dc16      	bgt.n	800b7d4 <_dtoa_r+0x860>
 800b7a6:	2500      	movs	r5, #0
 800b7a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7aa:	42ab      	cmp	r3, r5
 800b7ac:	d10e      	bne.n	800b7cc <_dtoa_r+0x858>
 800b7ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7b0:	031b      	lsls	r3, r3, #12
 800b7b2:	42ab      	cmp	r3, r5
 800b7b4:	d10a      	bne.n	800b7cc <_dtoa_r+0x858>
 800b7b6:	4b8d      	ldr	r3, [pc, #564]	@ (800b9ec <_dtoa_r+0xa78>)
 800b7b8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b7ba:	4213      	tst	r3, r2
 800b7bc:	d006      	beq.n	800b7cc <_dtoa_r+0x858>
 800b7be:	9b06      	ldr	r3, [sp, #24]
 800b7c0:	3501      	adds	r5, #1
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	9306      	str	r3, [sp, #24]
 800b7c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	930d      	str	r3, [sp, #52]	@ 0x34
 800b7cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b7ce:	2001      	movs	r0, #1
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d008      	beq.n	800b7e6 <_dtoa_r+0x872>
 800b7d4:	6933      	ldr	r3, [r6, #16]
 800b7d6:	3303      	adds	r3, #3
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	18f3      	adds	r3, r6, r3
 800b7dc:	6858      	ldr	r0, [r3, #4]
 800b7de:	f001 f8d5 	bl	800c98c <__hi0bits>
 800b7e2:	2320      	movs	r3, #32
 800b7e4:	1a18      	subs	r0, r3, r0
 800b7e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7e8:	1818      	adds	r0, r3, r0
 800b7ea:	0002      	movs	r2, r0
 800b7ec:	231f      	movs	r3, #31
 800b7ee:	401a      	ands	r2, r3
 800b7f0:	4218      	tst	r0, r3
 800b7f2:	d100      	bne.n	800b7f6 <_dtoa_r+0x882>
 800b7f4:	e081      	b.n	800b8fa <_dtoa_r+0x986>
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	1a9b      	subs	r3, r3, r2
 800b7fa:	2b04      	cmp	r3, #4
 800b7fc:	dd79      	ble.n	800b8f2 <_dtoa_r+0x97e>
 800b7fe:	231c      	movs	r3, #28
 800b800:	1a9b      	subs	r3, r3, r2
 800b802:	9a06      	ldr	r2, [sp, #24]
 800b804:	18e4      	adds	r4, r4, r3
 800b806:	18d2      	adds	r2, r2, r3
 800b808:	9206      	str	r2, [sp, #24]
 800b80a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b80c:	18d3      	adds	r3, r2, r3
 800b80e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b810:	9b06      	ldr	r3, [sp, #24]
 800b812:	2b00      	cmp	r3, #0
 800b814:	dd05      	ble.n	800b822 <_dtoa_r+0x8ae>
 800b816:	001a      	movs	r2, r3
 800b818:	9905      	ldr	r1, [sp, #20]
 800b81a:	9803      	ldr	r0, [sp, #12]
 800b81c:	f001 fa24 	bl	800cc68 <__lshift>
 800b820:	9005      	str	r0, [sp, #20]
 800b822:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b824:	2b00      	cmp	r3, #0
 800b826:	dd05      	ble.n	800b834 <_dtoa_r+0x8c0>
 800b828:	0031      	movs	r1, r6
 800b82a:	001a      	movs	r2, r3
 800b82c:	9803      	ldr	r0, [sp, #12]
 800b82e:	f001 fa1b 	bl	800cc68 <__lshift>
 800b832:	0006      	movs	r6, r0
 800b834:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b836:	2b00      	cmp	r3, #0
 800b838:	d061      	beq.n	800b8fe <_dtoa_r+0x98a>
 800b83a:	0031      	movs	r1, r6
 800b83c:	9805      	ldr	r0, [sp, #20]
 800b83e:	f001 fa7f 	bl	800cd40 <__mcmp>
 800b842:	2800      	cmp	r0, #0
 800b844:	da5b      	bge.n	800b8fe <_dtoa_r+0x98a>
 800b846:	9b04      	ldr	r3, [sp, #16]
 800b848:	220a      	movs	r2, #10
 800b84a:	3b01      	subs	r3, #1
 800b84c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b84e:	9905      	ldr	r1, [sp, #20]
 800b850:	2300      	movs	r3, #0
 800b852:	9803      	ldr	r0, [sp, #12]
 800b854:	f001 f856 	bl	800c904 <__multadd>
 800b858:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b85a:	9005      	str	r0, [sp, #20]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d100      	bne.n	800b862 <_dtoa_r+0x8ee>
 800b860:	e15b      	b.n	800bb1a <_dtoa_r+0xba6>
 800b862:	2300      	movs	r3, #0
 800b864:	0039      	movs	r1, r7
 800b866:	220a      	movs	r2, #10
 800b868:	9803      	ldr	r0, [sp, #12]
 800b86a:	f001 f84b 	bl	800c904 <__multadd>
 800b86e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b870:	0007      	movs	r7, r0
 800b872:	2b00      	cmp	r3, #0
 800b874:	dc4d      	bgt.n	800b912 <_dtoa_r+0x99e>
 800b876:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b878:	2b02      	cmp	r3, #2
 800b87a:	dd46      	ble.n	800b90a <_dtoa_r+0x996>
 800b87c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d000      	beq.n	800b884 <_dtoa_r+0x910>
 800b882:	e5db      	b.n	800b43c <_dtoa_r+0x4c8>
 800b884:	0031      	movs	r1, r6
 800b886:	2205      	movs	r2, #5
 800b888:	9803      	ldr	r0, [sp, #12]
 800b88a:	f001 f83b 	bl	800c904 <__multadd>
 800b88e:	0006      	movs	r6, r0
 800b890:	0001      	movs	r1, r0
 800b892:	9805      	ldr	r0, [sp, #20]
 800b894:	f001 fa54 	bl	800cd40 <__mcmp>
 800b898:	2800      	cmp	r0, #0
 800b89a:	dc00      	bgt.n	800b89e <_dtoa_r+0x92a>
 800b89c:	e5ce      	b.n	800b43c <_dtoa_r+0x4c8>
 800b89e:	9b08      	ldr	r3, [sp, #32]
 800b8a0:	9a08      	ldr	r2, [sp, #32]
 800b8a2:	1c5c      	adds	r4, r3, #1
 800b8a4:	2331      	movs	r3, #49	@ 0x31
 800b8a6:	7013      	strb	r3, [r2, #0]
 800b8a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800b8ae:	e5c9      	b.n	800b444 <_dtoa_r+0x4d0>
 800b8b0:	2336      	movs	r3, #54	@ 0x36
 800b8b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b8b4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800b8b6:	1a9b      	subs	r3, r3, r2
 800b8b8:	9c06      	ldr	r4, [sp, #24]
 800b8ba:	e720      	b.n	800b6fe <_dtoa_r+0x78a>
 800b8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8be:	1e5d      	subs	r5, r3, #1
 800b8c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8c2:	42ab      	cmp	r3, r5
 800b8c4:	db08      	blt.n	800b8d8 <_dtoa_r+0x964>
 800b8c6:	1b5d      	subs	r5, r3, r5
 800b8c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	daf4      	bge.n	800b8b8 <_dtoa_r+0x944>
 800b8ce:	9b06      	ldr	r3, [sp, #24]
 800b8d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8d2:	1a9c      	subs	r4, r3, r2
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	e712      	b.n	800b6fe <_dtoa_r+0x78a>
 800b8d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8da:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b8dc:	1aeb      	subs	r3, r5, r3
 800b8de:	18d3      	adds	r3, r2, r3
 800b8e0:	9314      	str	r3, [sp, #80]	@ 0x50
 800b8e2:	950f      	str	r5, [sp, #60]	@ 0x3c
 800b8e4:	9c06      	ldr	r4, [sp, #24]
 800b8e6:	2500      	movs	r5, #0
 800b8e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8ea:	e708      	b.n	800b6fe <_dtoa_r+0x78a>
 800b8ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b8ee:	9905      	ldr	r1, [sp, #20]
 800b8f0:	e742      	b.n	800b778 <_dtoa_r+0x804>
 800b8f2:	2b04      	cmp	r3, #4
 800b8f4:	d08c      	beq.n	800b810 <_dtoa_r+0x89c>
 800b8f6:	331c      	adds	r3, #28
 800b8f8:	e783      	b.n	800b802 <_dtoa_r+0x88e>
 800b8fa:	0013      	movs	r3, r2
 800b8fc:	e7fb      	b.n	800b8f6 <_dtoa_r+0x982>
 800b8fe:	9b04      	ldr	r3, [sp, #16]
 800b900:	930c      	str	r3, [sp, #48]	@ 0x30
 800b902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b904:	930e      	str	r3, [sp, #56]	@ 0x38
 800b906:	2b00      	cmp	r3, #0
 800b908:	ddb5      	ble.n	800b876 <_dtoa_r+0x902>
 800b90a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d100      	bne.n	800b912 <_dtoa_r+0x99e>
 800b910:	e107      	b.n	800bb22 <_dtoa_r+0xbae>
 800b912:	2c00      	cmp	r4, #0
 800b914:	dd05      	ble.n	800b922 <_dtoa_r+0x9ae>
 800b916:	0039      	movs	r1, r7
 800b918:	0022      	movs	r2, r4
 800b91a:	9803      	ldr	r0, [sp, #12]
 800b91c:	f001 f9a4 	bl	800cc68 <__lshift>
 800b920:	0007      	movs	r7, r0
 800b922:	9704      	str	r7, [sp, #16]
 800b924:	2d00      	cmp	r5, #0
 800b926:	d020      	beq.n	800b96a <_dtoa_r+0x9f6>
 800b928:	6879      	ldr	r1, [r7, #4]
 800b92a:	9803      	ldr	r0, [sp, #12]
 800b92c:	f000 ff82 	bl	800c834 <_Balloc>
 800b930:	1e04      	subs	r4, r0, #0
 800b932:	d10c      	bne.n	800b94e <_dtoa_r+0x9da>
 800b934:	0022      	movs	r2, r4
 800b936:	4b2e      	ldr	r3, [pc, #184]	@ (800b9f0 <_dtoa_r+0xa7c>)
 800b938:	482e      	ldr	r0, [pc, #184]	@ (800b9f4 <_dtoa_r+0xa80>)
 800b93a:	492f      	ldr	r1, [pc, #188]	@ (800b9f8 <_dtoa_r+0xa84>)
 800b93c:	f7ff fb2f 	bl	800af9e <_dtoa_r+0x2a>
 800b940:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b942:	0037      	movs	r7, r6
 800b944:	e7ab      	b.n	800b89e <_dtoa_r+0x92a>
 800b946:	9b04      	ldr	r3, [sp, #16]
 800b948:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800b94a:	930c      	str	r3, [sp, #48]	@ 0x30
 800b94c:	e7f9      	b.n	800b942 <_dtoa_r+0x9ce>
 800b94e:	0039      	movs	r1, r7
 800b950:	693a      	ldr	r2, [r7, #16]
 800b952:	310c      	adds	r1, #12
 800b954:	3202      	adds	r2, #2
 800b956:	0092      	lsls	r2, r2, #2
 800b958:	300c      	adds	r0, #12
 800b95a:	f7ff fa5e 	bl	800ae1a <memcpy>
 800b95e:	2201      	movs	r2, #1
 800b960:	0021      	movs	r1, r4
 800b962:	9803      	ldr	r0, [sp, #12]
 800b964:	f001 f980 	bl	800cc68 <__lshift>
 800b968:	9004      	str	r0, [sp, #16]
 800b96a:	9b08      	ldr	r3, [sp, #32]
 800b96c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b96e:	9306      	str	r3, [sp, #24]
 800b970:	3b01      	subs	r3, #1
 800b972:	189b      	adds	r3, r3, r2
 800b974:	2201      	movs	r2, #1
 800b976:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b97a:	4013      	ands	r3, r2
 800b97c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b97e:	0031      	movs	r1, r6
 800b980:	9805      	ldr	r0, [sp, #20]
 800b982:	f7ff fa71 	bl	800ae68 <quorem>
 800b986:	0039      	movs	r1, r7
 800b988:	0005      	movs	r5, r0
 800b98a:	900a      	str	r0, [sp, #40]	@ 0x28
 800b98c:	9805      	ldr	r0, [sp, #20]
 800b98e:	f001 f9d7 	bl	800cd40 <__mcmp>
 800b992:	9a04      	ldr	r2, [sp, #16]
 800b994:	900d      	str	r0, [sp, #52]	@ 0x34
 800b996:	0031      	movs	r1, r6
 800b998:	9803      	ldr	r0, [sp, #12]
 800b99a:	f001 f9ed 	bl	800cd78 <__mdiff>
 800b99e:	2201      	movs	r2, #1
 800b9a0:	68c3      	ldr	r3, [r0, #12]
 800b9a2:	0004      	movs	r4, r0
 800b9a4:	3530      	adds	r5, #48	@ 0x30
 800b9a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d104      	bne.n	800b9b6 <_dtoa_r+0xa42>
 800b9ac:	0001      	movs	r1, r0
 800b9ae:	9805      	ldr	r0, [sp, #20]
 800b9b0:	f001 f9c6 	bl	800cd40 <__mcmp>
 800b9b4:	9009      	str	r0, [sp, #36]	@ 0x24
 800b9b6:	0021      	movs	r1, r4
 800b9b8:	9803      	ldr	r0, [sp, #12]
 800b9ba:	f000 ff7f 	bl	800c8bc <_Bfree>
 800b9be:	9b06      	ldr	r3, [sp, #24]
 800b9c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b9c2:	1c5c      	adds	r4, r3, #1
 800b9c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	d116      	bne.n	800b9fc <_dtoa_r+0xa88>
 800b9ce:	2d39      	cmp	r5, #57	@ 0x39
 800b9d0:	d02f      	beq.n	800ba32 <_dtoa_r+0xabe>
 800b9d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	dd01      	ble.n	800b9dc <_dtoa_r+0xa68>
 800b9d8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800b9da:	3531      	adds	r5, #49	@ 0x31
 800b9dc:	9b06      	ldr	r3, [sp, #24]
 800b9de:	701d      	strb	r5, [r3, #0]
 800b9e0:	e532      	b.n	800b448 <_dtoa_r+0x4d4>
 800b9e2:	46c0      	nop			@ (mov r8, r8)
 800b9e4:	40240000 	.word	0x40240000
 800b9e8:	00000433 	.word	0x00000433
 800b9ec:	7ff00000 	.word	0x7ff00000
 800b9f0:	0800e1dc 	.word	0x0800e1dc
 800b9f4:	0800e184 	.word	0x0800e184
 800b9f8:	000002ef 	.word	0x000002ef
 800b9fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	db04      	blt.n	800ba0c <_dtoa_r+0xa98>
 800ba02:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ba04:	4313      	orrs	r3, r2
 800ba06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	d11e      	bne.n	800ba4a <_dtoa_r+0xad6>
 800ba0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	dde4      	ble.n	800b9dc <_dtoa_r+0xa68>
 800ba12:	9905      	ldr	r1, [sp, #20]
 800ba14:	2201      	movs	r2, #1
 800ba16:	9803      	ldr	r0, [sp, #12]
 800ba18:	f001 f926 	bl	800cc68 <__lshift>
 800ba1c:	0031      	movs	r1, r6
 800ba1e:	9005      	str	r0, [sp, #20]
 800ba20:	f001 f98e 	bl	800cd40 <__mcmp>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	dc02      	bgt.n	800ba2e <_dtoa_r+0xaba>
 800ba28:	d1d8      	bne.n	800b9dc <_dtoa_r+0xa68>
 800ba2a:	07eb      	lsls	r3, r5, #31
 800ba2c:	d5d6      	bpl.n	800b9dc <_dtoa_r+0xa68>
 800ba2e:	2d39      	cmp	r5, #57	@ 0x39
 800ba30:	d1d2      	bne.n	800b9d8 <_dtoa_r+0xa64>
 800ba32:	2339      	movs	r3, #57	@ 0x39
 800ba34:	9a06      	ldr	r2, [sp, #24]
 800ba36:	7013      	strb	r3, [r2, #0]
 800ba38:	0023      	movs	r3, r4
 800ba3a:	001c      	movs	r4, r3
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	781a      	ldrb	r2, [r3, #0]
 800ba40:	2a39      	cmp	r2, #57	@ 0x39
 800ba42:	d050      	beq.n	800bae6 <_dtoa_r+0xb72>
 800ba44:	3201      	adds	r2, #1
 800ba46:	701a      	strb	r2, [r3, #0]
 800ba48:	e4fe      	b.n	800b448 <_dtoa_r+0x4d4>
 800ba4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	dd03      	ble.n	800ba58 <_dtoa_r+0xae4>
 800ba50:	2d39      	cmp	r5, #57	@ 0x39
 800ba52:	d0ee      	beq.n	800ba32 <_dtoa_r+0xabe>
 800ba54:	3501      	adds	r5, #1
 800ba56:	e7c1      	b.n	800b9dc <_dtoa_r+0xa68>
 800ba58:	9b06      	ldr	r3, [sp, #24]
 800ba5a:	9a06      	ldr	r2, [sp, #24]
 800ba5c:	701d      	strb	r5, [r3, #0]
 800ba5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d02b      	beq.n	800babc <_dtoa_r+0xb48>
 800ba64:	2300      	movs	r3, #0
 800ba66:	220a      	movs	r2, #10
 800ba68:	9905      	ldr	r1, [sp, #20]
 800ba6a:	9803      	ldr	r0, [sp, #12]
 800ba6c:	f000 ff4a 	bl	800c904 <__multadd>
 800ba70:	9b04      	ldr	r3, [sp, #16]
 800ba72:	9005      	str	r0, [sp, #20]
 800ba74:	429f      	cmp	r7, r3
 800ba76:	d109      	bne.n	800ba8c <_dtoa_r+0xb18>
 800ba78:	0039      	movs	r1, r7
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	220a      	movs	r2, #10
 800ba7e:	9803      	ldr	r0, [sp, #12]
 800ba80:	f000 ff40 	bl	800c904 <__multadd>
 800ba84:	0007      	movs	r7, r0
 800ba86:	9004      	str	r0, [sp, #16]
 800ba88:	9406      	str	r4, [sp, #24]
 800ba8a:	e778      	b.n	800b97e <_dtoa_r+0xa0a>
 800ba8c:	0039      	movs	r1, r7
 800ba8e:	2300      	movs	r3, #0
 800ba90:	220a      	movs	r2, #10
 800ba92:	9803      	ldr	r0, [sp, #12]
 800ba94:	f000 ff36 	bl	800c904 <__multadd>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	0007      	movs	r7, r0
 800ba9c:	220a      	movs	r2, #10
 800ba9e:	9904      	ldr	r1, [sp, #16]
 800baa0:	9803      	ldr	r0, [sp, #12]
 800baa2:	f000 ff2f 	bl	800c904 <__multadd>
 800baa6:	9004      	str	r0, [sp, #16]
 800baa8:	e7ee      	b.n	800ba88 <_dtoa_r+0xb14>
 800baaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baac:	2401      	movs	r4, #1
 800baae:	2b00      	cmp	r3, #0
 800bab0:	dd00      	ble.n	800bab4 <_dtoa_r+0xb40>
 800bab2:	001c      	movs	r4, r3
 800bab4:	9704      	str	r7, [sp, #16]
 800bab6:	2700      	movs	r7, #0
 800bab8:	9b08      	ldr	r3, [sp, #32]
 800baba:	191c      	adds	r4, r3, r4
 800babc:	9905      	ldr	r1, [sp, #20]
 800babe:	2201      	movs	r2, #1
 800bac0:	9803      	ldr	r0, [sp, #12]
 800bac2:	f001 f8d1 	bl	800cc68 <__lshift>
 800bac6:	0031      	movs	r1, r6
 800bac8:	9005      	str	r0, [sp, #20]
 800baca:	f001 f939 	bl	800cd40 <__mcmp>
 800bace:	2800      	cmp	r0, #0
 800bad0:	dcb2      	bgt.n	800ba38 <_dtoa_r+0xac4>
 800bad2:	d101      	bne.n	800bad8 <_dtoa_r+0xb64>
 800bad4:	07ed      	lsls	r5, r5, #31
 800bad6:	d4af      	bmi.n	800ba38 <_dtoa_r+0xac4>
 800bad8:	0023      	movs	r3, r4
 800bada:	001c      	movs	r4, r3
 800badc:	3b01      	subs	r3, #1
 800bade:	781a      	ldrb	r2, [r3, #0]
 800bae0:	2a30      	cmp	r2, #48	@ 0x30
 800bae2:	d0fa      	beq.n	800bada <_dtoa_r+0xb66>
 800bae4:	e4b0      	b.n	800b448 <_dtoa_r+0x4d4>
 800bae6:	9a08      	ldr	r2, [sp, #32]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d1a6      	bne.n	800ba3a <_dtoa_r+0xac6>
 800baec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800baee:	3301      	adds	r3, #1
 800baf0:	930c      	str	r3, [sp, #48]	@ 0x30
 800baf2:	2331      	movs	r3, #49	@ 0x31
 800baf4:	7013      	strb	r3, [r2, #0]
 800baf6:	e4a7      	b.n	800b448 <_dtoa_r+0x4d4>
 800baf8:	4b14      	ldr	r3, [pc, #80]	@ (800bb4c <_dtoa_r+0xbd8>)
 800bafa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800bafc:	9308      	str	r3, [sp, #32]
 800bafe:	4b14      	ldr	r3, [pc, #80]	@ (800bb50 <_dtoa_r+0xbdc>)
 800bb00:	2a00      	cmp	r2, #0
 800bb02:	d001      	beq.n	800bb08 <_dtoa_r+0xb94>
 800bb04:	f7ff fa7e 	bl	800b004 <_dtoa_r+0x90>
 800bb08:	f7ff fa7e 	bl	800b008 <_dtoa_r+0x94>
 800bb0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	dc00      	bgt.n	800bb14 <_dtoa_r+0xba0>
 800bb12:	e648      	b.n	800b7a6 <_dtoa_r+0x832>
 800bb14:	2001      	movs	r0, #1
 800bb16:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800bb18:	e665      	b.n	800b7e6 <_dtoa_r+0x872>
 800bb1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	dc00      	bgt.n	800bb22 <_dtoa_r+0xbae>
 800bb20:	e6a9      	b.n	800b876 <_dtoa_r+0x902>
 800bb22:	2400      	movs	r4, #0
 800bb24:	0031      	movs	r1, r6
 800bb26:	9805      	ldr	r0, [sp, #20]
 800bb28:	f7ff f99e 	bl	800ae68 <quorem>
 800bb2c:	9b08      	ldr	r3, [sp, #32]
 800bb2e:	3030      	adds	r0, #48	@ 0x30
 800bb30:	5518      	strb	r0, [r3, r4]
 800bb32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb34:	3401      	adds	r4, #1
 800bb36:	0005      	movs	r5, r0
 800bb38:	42a3      	cmp	r3, r4
 800bb3a:	ddb6      	ble.n	800baaa <_dtoa_r+0xb36>
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	220a      	movs	r2, #10
 800bb40:	9905      	ldr	r1, [sp, #20]
 800bb42:	9803      	ldr	r0, [sp, #12]
 800bb44:	f000 fede 	bl	800c904 <__multadd>
 800bb48:	9005      	str	r0, [sp, #20]
 800bb4a:	e7eb      	b.n	800bb24 <_dtoa_r+0xbb0>
 800bb4c:	0800e177 	.word	0x0800e177
 800bb50:	0800e17f 	.word	0x0800e17f

0800bb54 <_free_r>:
 800bb54:	b570      	push	{r4, r5, r6, lr}
 800bb56:	0005      	movs	r5, r0
 800bb58:	1e0c      	subs	r4, r1, #0
 800bb5a:	d010      	beq.n	800bb7e <_free_r+0x2a>
 800bb5c:	3c04      	subs	r4, #4
 800bb5e:	6823      	ldr	r3, [r4, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	da00      	bge.n	800bb66 <_free_r+0x12>
 800bb64:	18e4      	adds	r4, r4, r3
 800bb66:	0028      	movs	r0, r5
 800bb68:	f000 fe54 	bl	800c814 <__malloc_lock>
 800bb6c:	4a1d      	ldr	r2, [pc, #116]	@ (800bbe4 <_free_r+0x90>)
 800bb6e:	6813      	ldr	r3, [r2, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d105      	bne.n	800bb80 <_free_r+0x2c>
 800bb74:	6063      	str	r3, [r4, #4]
 800bb76:	6014      	str	r4, [r2, #0]
 800bb78:	0028      	movs	r0, r5
 800bb7a:	f000 fe53 	bl	800c824 <__malloc_unlock>
 800bb7e:	bd70      	pop	{r4, r5, r6, pc}
 800bb80:	42a3      	cmp	r3, r4
 800bb82:	d908      	bls.n	800bb96 <_free_r+0x42>
 800bb84:	6820      	ldr	r0, [r4, #0]
 800bb86:	1821      	adds	r1, r4, r0
 800bb88:	428b      	cmp	r3, r1
 800bb8a:	d1f3      	bne.n	800bb74 <_free_r+0x20>
 800bb8c:	6819      	ldr	r1, [r3, #0]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	1809      	adds	r1, r1, r0
 800bb92:	6021      	str	r1, [r4, #0]
 800bb94:	e7ee      	b.n	800bb74 <_free_r+0x20>
 800bb96:	001a      	movs	r2, r3
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d001      	beq.n	800bba2 <_free_r+0x4e>
 800bb9e:	42a3      	cmp	r3, r4
 800bba0:	d9f9      	bls.n	800bb96 <_free_r+0x42>
 800bba2:	6811      	ldr	r1, [r2, #0]
 800bba4:	1850      	adds	r0, r2, r1
 800bba6:	42a0      	cmp	r0, r4
 800bba8:	d10b      	bne.n	800bbc2 <_free_r+0x6e>
 800bbaa:	6820      	ldr	r0, [r4, #0]
 800bbac:	1809      	adds	r1, r1, r0
 800bbae:	1850      	adds	r0, r2, r1
 800bbb0:	6011      	str	r1, [r2, #0]
 800bbb2:	4283      	cmp	r3, r0
 800bbb4:	d1e0      	bne.n	800bb78 <_free_r+0x24>
 800bbb6:	6818      	ldr	r0, [r3, #0]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	1841      	adds	r1, r0, r1
 800bbbc:	6011      	str	r1, [r2, #0]
 800bbbe:	6053      	str	r3, [r2, #4]
 800bbc0:	e7da      	b.n	800bb78 <_free_r+0x24>
 800bbc2:	42a0      	cmp	r0, r4
 800bbc4:	d902      	bls.n	800bbcc <_free_r+0x78>
 800bbc6:	230c      	movs	r3, #12
 800bbc8:	602b      	str	r3, [r5, #0]
 800bbca:	e7d5      	b.n	800bb78 <_free_r+0x24>
 800bbcc:	6820      	ldr	r0, [r4, #0]
 800bbce:	1821      	adds	r1, r4, r0
 800bbd0:	428b      	cmp	r3, r1
 800bbd2:	d103      	bne.n	800bbdc <_free_r+0x88>
 800bbd4:	6819      	ldr	r1, [r3, #0]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	1809      	adds	r1, r1, r0
 800bbda:	6021      	str	r1, [r4, #0]
 800bbdc:	6063      	str	r3, [r4, #4]
 800bbde:	6054      	str	r4, [r2, #4]
 800bbe0:	e7ca      	b.n	800bb78 <_free_r+0x24>
 800bbe2:	46c0      	nop			@ (mov r8, r8)
 800bbe4:	20000544 	.word	0x20000544

0800bbe8 <__ssputs_r>:
 800bbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbea:	688e      	ldr	r6, [r1, #8]
 800bbec:	b085      	sub	sp, #20
 800bbee:	001f      	movs	r7, r3
 800bbf0:	000c      	movs	r4, r1
 800bbf2:	680b      	ldr	r3, [r1, #0]
 800bbf4:	9002      	str	r0, [sp, #8]
 800bbf6:	9203      	str	r2, [sp, #12]
 800bbf8:	42be      	cmp	r6, r7
 800bbfa:	d830      	bhi.n	800bc5e <__ssputs_r+0x76>
 800bbfc:	210c      	movs	r1, #12
 800bbfe:	5e62      	ldrsh	r2, [r4, r1]
 800bc00:	2190      	movs	r1, #144	@ 0x90
 800bc02:	00c9      	lsls	r1, r1, #3
 800bc04:	420a      	tst	r2, r1
 800bc06:	d028      	beq.n	800bc5a <__ssputs_r+0x72>
 800bc08:	2003      	movs	r0, #3
 800bc0a:	6921      	ldr	r1, [r4, #16]
 800bc0c:	1a5b      	subs	r3, r3, r1
 800bc0e:	9301      	str	r3, [sp, #4]
 800bc10:	6963      	ldr	r3, [r4, #20]
 800bc12:	4343      	muls	r3, r0
 800bc14:	9801      	ldr	r0, [sp, #4]
 800bc16:	0fdd      	lsrs	r5, r3, #31
 800bc18:	18ed      	adds	r5, r5, r3
 800bc1a:	1c7b      	adds	r3, r7, #1
 800bc1c:	181b      	adds	r3, r3, r0
 800bc1e:	106d      	asrs	r5, r5, #1
 800bc20:	42ab      	cmp	r3, r5
 800bc22:	d900      	bls.n	800bc26 <__ssputs_r+0x3e>
 800bc24:	001d      	movs	r5, r3
 800bc26:	0552      	lsls	r2, r2, #21
 800bc28:	d528      	bpl.n	800bc7c <__ssputs_r+0x94>
 800bc2a:	0029      	movs	r1, r5
 800bc2c:	9802      	ldr	r0, [sp, #8]
 800bc2e:	f000 fb25 	bl	800c27c <_malloc_r>
 800bc32:	1e06      	subs	r6, r0, #0
 800bc34:	d02c      	beq.n	800bc90 <__ssputs_r+0xa8>
 800bc36:	9a01      	ldr	r2, [sp, #4]
 800bc38:	6921      	ldr	r1, [r4, #16]
 800bc3a:	f7ff f8ee 	bl	800ae1a <memcpy>
 800bc3e:	89a2      	ldrh	r2, [r4, #12]
 800bc40:	4b18      	ldr	r3, [pc, #96]	@ (800bca4 <__ssputs_r+0xbc>)
 800bc42:	401a      	ands	r2, r3
 800bc44:	2380      	movs	r3, #128	@ 0x80
 800bc46:	4313      	orrs	r3, r2
 800bc48:	81a3      	strh	r3, [r4, #12]
 800bc4a:	9b01      	ldr	r3, [sp, #4]
 800bc4c:	6126      	str	r6, [r4, #16]
 800bc4e:	18f6      	adds	r6, r6, r3
 800bc50:	6026      	str	r6, [r4, #0]
 800bc52:	003e      	movs	r6, r7
 800bc54:	6165      	str	r5, [r4, #20]
 800bc56:	1aed      	subs	r5, r5, r3
 800bc58:	60a5      	str	r5, [r4, #8]
 800bc5a:	42be      	cmp	r6, r7
 800bc5c:	d900      	bls.n	800bc60 <__ssputs_r+0x78>
 800bc5e:	003e      	movs	r6, r7
 800bc60:	0032      	movs	r2, r6
 800bc62:	9903      	ldr	r1, [sp, #12]
 800bc64:	6820      	ldr	r0, [r4, #0]
 800bc66:	f001 fb13 	bl	800d290 <memmove>
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	68a3      	ldr	r3, [r4, #8]
 800bc6e:	1b9b      	subs	r3, r3, r6
 800bc70:	60a3      	str	r3, [r4, #8]
 800bc72:	6823      	ldr	r3, [r4, #0]
 800bc74:	199b      	adds	r3, r3, r6
 800bc76:	6023      	str	r3, [r4, #0]
 800bc78:	b005      	add	sp, #20
 800bc7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc7c:	002a      	movs	r2, r5
 800bc7e:	9802      	ldr	r0, [sp, #8]
 800bc80:	f001 f9c2 	bl	800d008 <_realloc_r>
 800bc84:	1e06      	subs	r6, r0, #0
 800bc86:	d1e0      	bne.n	800bc4a <__ssputs_r+0x62>
 800bc88:	6921      	ldr	r1, [r4, #16]
 800bc8a:	9802      	ldr	r0, [sp, #8]
 800bc8c:	f7ff ff62 	bl	800bb54 <_free_r>
 800bc90:	230c      	movs	r3, #12
 800bc92:	2001      	movs	r0, #1
 800bc94:	9a02      	ldr	r2, [sp, #8]
 800bc96:	4240      	negs	r0, r0
 800bc98:	6013      	str	r3, [r2, #0]
 800bc9a:	89a2      	ldrh	r2, [r4, #12]
 800bc9c:	3334      	adds	r3, #52	@ 0x34
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	81a3      	strh	r3, [r4, #12]
 800bca2:	e7e9      	b.n	800bc78 <__ssputs_r+0x90>
 800bca4:	fffffb7f 	.word	0xfffffb7f

0800bca8 <_svfiprintf_r>:
 800bca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcaa:	b0a1      	sub	sp, #132	@ 0x84
 800bcac:	9003      	str	r0, [sp, #12]
 800bcae:	001d      	movs	r5, r3
 800bcb0:	898b      	ldrh	r3, [r1, #12]
 800bcb2:	000f      	movs	r7, r1
 800bcb4:	0016      	movs	r6, r2
 800bcb6:	061b      	lsls	r3, r3, #24
 800bcb8:	d511      	bpl.n	800bcde <_svfiprintf_r+0x36>
 800bcba:	690b      	ldr	r3, [r1, #16]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d10e      	bne.n	800bcde <_svfiprintf_r+0x36>
 800bcc0:	2140      	movs	r1, #64	@ 0x40
 800bcc2:	f000 fadb 	bl	800c27c <_malloc_r>
 800bcc6:	6038      	str	r0, [r7, #0]
 800bcc8:	6138      	str	r0, [r7, #16]
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d105      	bne.n	800bcda <_svfiprintf_r+0x32>
 800bcce:	230c      	movs	r3, #12
 800bcd0:	9a03      	ldr	r2, [sp, #12]
 800bcd2:	6013      	str	r3, [r2, #0]
 800bcd4:	2001      	movs	r0, #1
 800bcd6:	4240      	negs	r0, r0
 800bcd8:	e0cf      	b.n	800be7a <_svfiprintf_r+0x1d2>
 800bcda:	2340      	movs	r3, #64	@ 0x40
 800bcdc:	617b      	str	r3, [r7, #20]
 800bcde:	2300      	movs	r3, #0
 800bce0:	ac08      	add	r4, sp, #32
 800bce2:	6163      	str	r3, [r4, #20]
 800bce4:	3320      	adds	r3, #32
 800bce6:	7663      	strb	r3, [r4, #25]
 800bce8:	3310      	adds	r3, #16
 800bcea:	76a3      	strb	r3, [r4, #26]
 800bcec:	9507      	str	r5, [sp, #28]
 800bcee:	0035      	movs	r5, r6
 800bcf0:	782b      	ldrb	r3, [r5, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <_svfiprintf_r+0x52>
 800bcf6:	2b25      	cmp	r3, #37	@ 0x25
 800bcf8:	d148      	bne.n	800bd8c <_svfiprintf_r+0xe4>
 800bcfa:	1bab      	subs	r3, r5, r6
 800bcfc:	9305      	str	r3, [sp, #20]
 800bcfe:	42b5      	cmp	r5, r6
 800bd00:	d00b      	beq.n	800bd1a <_svfiprintf_r+0x72>
 800bd02:	0032      	movs	r2, r6
 800bd04:	0039      	movs	r1, r7
 800bd06:	9803      	ldr	r0, [sp, #12]
 800bd08:	f7ff ff6e 	bl	800bbe8 <__ssputs_r>
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	d100      	bne.n	800bd12 <_svfiprintf_r+0x6a>
 800bd10:	e0ae      	b.n	800be70 <_svfiprintf_r+0x1c8>
 800bd12:	6963      	ldr	r3, [r4, #20]
 800bd14:	9a05      	ldr	r2, [sp, #20]
 800bd16:	189b      	adds	r3, r3, r2
 800bd18:	6163      	str	r3, [r4, #20]
 800bd1a:	782b      	ldrb	r3, [r5, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d100      	bne.n	800bd22 <_svfiprintf_r+0x7a>
 800bd20:	e0a6      	b.n	800be70 <_svfiprintf_r+0x1c8>
 800bd22:	2201      	movs	r2, #1
 800bd24:	2300      	movs	r3, #0
 800bd26:	4252      	negs	r2, r2
 800bd28:	6062      	str	r2, [r4, #4]
 800bd2a:	a904      	add	r1, sp, #16
 800bd2c:	3254      	adds	r2, #84	@ 0x54
 800bd2e:	1852      	adds	r2, r2, r1
 800bd30:	1c6e      	adds	r6, r5, #1
 800bd32:	6023      	str	r3, [r4, #0]
 800bd34:	60e3      	str	r3, [r4, #12]
 800bd36:	60a3      	str	r3, [r4, #8]
 800bd38:	7013      	strb	r3, [r2, #0]
 800bd3a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800bd3c:	4b54      	ldr	r3, [pc, #336]	@ (800be90 <_svfiprintf_r+0x1e8>)
 800bd3e:	2205      	movs	r2, #5
 800bd40:	0018      	movs	r0, r3
 800bd42:	7831      	ldrb	r1, [r6, #0]
 800bd44:	9305      	str	r3, [sp, #20]
 800bd46:	f7ff f85d 	bl	800ae04 <memchr>
 800bd4a:	1c75      	adds	r5, r6, #1
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	d11f      	bne.n	800bd90 <_svfiprintf_r+0xe8>
 800bd50:	6822      	ldr	r2, [r4, #0]
 800bd52:	06d3      	lsls	r3, r2, #27
 800bd54:	d504      	bpl.n	800bd60 <_svfiprintf_r+0xb8>
 800bd56:	2353      	movs	r3, #83	@ 0x53
 800bd58:	a904      	add	r1, sp, #16
 800bd5a:	185b      	adds	r3, r3, r1
 800bd5c:	2120      	movs	r1, #32
 800bd5e:	7019      	strb	r1, [r3, #0]
 800bd60:	0713      	lsls	r3, r2, #28
 800bd62:	d504      	bpl.n	800bd6e <_svfiprintf_r+0xc6>
 800bd64:	2353      	movs	r3, #83	@ 0x53
 800bd66:	a904      	add	r1, sp, #16
 800bd68:	185b      	adds	r3, r3, r1
 800bd6a:	212b      	movs	r1, #43	@ 0x2b
 800bd6c:	7019      	strb	r1, [r3, #0]
 800bd6e:	7833      	ldrb	r3, [r6, #0]
 800bd70:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd72:	d016      	beq.n	800bda2 <_svfiprintf_r+0xfa>
 800bd74:	0035      	movs	r5, r6
 800bd76:	2100      	movs	r1, #0
 800bd78:	200a      	movs	r0, #10
 800bd7a:	68e3      	ldr	r3, [r4, #12]
 800bd7c:	782a      	ldrb	r2, [r5, #0]
 800bd7e:	1c6e      	adds	r6, r5, #1
 800bd80:	3a30      	subs	r2, #48	@ 0x30
 800bd82:	2a09      	cmp	r2, #9
 800bd84:	d950      	bls.n	800be28 <_svfiprintf_r+0x180>
 800bd86:	2900      	cmp	r1, #0
 800bd88:	d111      	bne.n	800bdae <_svfiprintf_r+0x106>
 800bd8a:	e017      	b.n	800bdbc <_svfiprintf_r+0x114>
 800bd8c:	3501      	adds	r5, #1
 800bd8e:	e7af      	b.n	800bcf0 <_svfiprintf_r+0x48>
 800bd90:	9b05      	ldr	r3, [sp, #20]
 800bd92:	6822      	ldr	r2, [r4, #0]
 800bd94:	1ac0      	subs	r0, r0, r3
 800bd96:	2301      	movs	r3, #1
 800bd98:	4083      	lsls	r3, r0
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	002e      	movs	r6, r5
 800bd9e:	6023      	str	r3, [r4, #0]
 800bda0:	e7cc      	b.n	800bd3c <_svfiprintf_r+0x94>
 800bda2:	9b07      	ldr	r3, [sp, #28]
 800bda4:	1d19      	adds	r1, r3, #4
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	9107      	str	r1, [sp, #28]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	db01      	blt.n	800bdb2 <_svfiprintf_r+0x10a>
 800bdae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdb0:	e004      	b.n	800bdbc <_svfiprintf_r+0x114>
 800bdb2:	425b      	negs	r3, r3
 800bdb4:	60e3      	str	r3, [r4, #12]
 800bdb6:	2302      	movs	r3, #2
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	6023      	str	r3, [r4, #0]
 800bdbc:	782b      	ldrb	r3, [r5, #0]
 800bdbe:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdc0:	d10c      	bne.n	800bddc <_svfiprintf_r+0x134>
 800bdc2:	786b      	ldrb	r3, [r5, #1]
 800bdc4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdc6:	d134      	bne.n	800be32 <_svfiprintf_r+0x18a>
 800bdc8:	9b07      	ldr	r3, [sp, #28]
 800bdca:	3502      	adds	r5, #2
 800bdcc:	1d1a      	adds	r2, r3, #4
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	9207      	str	r2, [sp, #28]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	da01      	bge.n	800bdda <_svfiprintf_r+0x132>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	425b      	negs	r3, r3
 800bdda:	9309      	str	r3, [sp, #36]	@ 0x24
 800bddc:	4e2d      	ldr	r6, [pc, #180]	@ (800be94 <_svfiprintf_r+0x1ec>)
 800bdde:	2203      	movs	r2, #3
 800bde0:	0030      	movs	r0, r6
 800bde2:	7829      	ldrb	r1, [r5, #0]
 800bde4:	f7ff f80e 	bl	800ae04 <memchr>
 800bde8:	2800      	cmp	r0, #0
 800bdea:	d006      	beq.n	800bdfa <_svfiprintf_r+0x152>
 800bdec:	2340      	movs	r3, #64	@ 0x40
 800bdee:	1b80      	subs	r0, r0, r6
 800bdf0:	4083      	lsls	r3, r0
 800bdf2:	6822      	ldr	r2, [r4, #0]
 800bdf4:	3501      	adds	r5, #1
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	6023      	str	r3, [r4, #0]
 800bdfa:	7829      	ldrb	r1, [r5, #0]
 800bdfc:	2206      	movs	r2, #6
 800bdfe:	4826      	ldr	r0, [pc, #152]	@ (800be98 <_svfiprintf_r+0x1f0>)
 800be00:	1c6e      	adds	r6, r5, #1
 800be02:	7621      	strb	r1, [r4, #24]
 800be04:	f7fe fffe 	bl	800ae04 <memchr>
 800be08:	2800      	cmp	r0, #0
 800be0a:	d038      	beq.n	800be7e <_svfiprintf_r+0x1d6>
 800be0c:	4b23      	ldr	r3, [pc, #140]	@ (800be9c <_svfiprintf_r+0x1f4>)
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d122      	bne.n	800be58 <_svfiprintf_r+0x1b0>
 800be12:	2207      	movs	r2, #7
 800be14:	9b07      	ldr	r3, [sp, #28]
 800be16:	3307      	adds	r3, #7
 800be18:	4393      	bics	r3, r2
 800be1a:	3308      	adds	r3, #8
 800be1c:	9307      	str	r3, [sp, #28]
 800be1e:	6963      	ldr	r3, [r4, #20]
 800be20:	9a04      	ldr	r2, [sp, #16]
 800be22:	189b      	adds	r3, r3, r2
 800be24:	6163      	str	r3, [r4, #20]
 800be26:	e762      	b.n	800bcee <_svfiprintf_r+0x46>
 800be28:	4343      	muls	r3, r0
 800be2a:	0035      	movs	r5, r6
 800be2c:	2101      	movs	r1, #1
 800be2e:	189b      	adds	r3, r3, r2
 800be30:	e7a4      	b.n	800bd7c <_svfiprintf_r+0xd4>
 800be32:	2300      	movs	r3, #0
 800be34:	200a      	movs	r0, #10
 800be36:	0019      	movs	r1, r3
 800be38:	3501      	adds	r5, #1
 800be3a:	6063      	str	r3, [r4, #4]
 800be3c:	782a      	ldrb	r2, [r5, #0]
 800be3e:	1c6e      	adds	r6, r5, #1
 800be40:	3a30      	subs	r2, #48	@ 0x30
 800be42:	2a09      	cmp	r2, #9
 800be44:	d903      	bls.n	800be4e <_svfiprintf_r+0x1a6>
 800be46:	2b00      	cmp	r3, #0
 800be48:	d0c8      	beq.n	800bddc <_svfiprintf_r+0x134>
 800be4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800be4c:	e7c6      	b.n	800bddc <_svfiprintf_r+0x134>
 800be4e:	4341      	muls	r1, r0
 800be50:	0035      	movs	r5, r6
 800be52:	2301      	movs	r3, #1
 800be54:	1889      	adds	r1, r1, r2
 800be56:	e7f1      	b.n	800be3c <_svfiprintf_r+0x194>
 800be58:	aa07      	add	r2, sp, #28
 800be5a:	9200      	str	r2, [sp, #0]
 800be5c:	0021      	movs	r1, r4
 800be5e:	003a      	movs	r2, r7
 800be60:	4b0f      	ldr	r3, [pc, #60]	@ (800bea0 <_svfiprintf_r+0x1f8>)
 800be62:	9803      	ldr	r0, [sp, #12]
 800be64:	f7fe f9a6 	bl	800a1b4 <_printf_float>
 800be68:	9004      	str	r0, [sp, #16]
 800be6a:	9b04      	ldr	r3, [sp, #16]
 800be6c:	3301      	adds	r3, #1
 800be6e:	d1d6      	bne.n	800be1e <_svfiprintf_r+0x176>
 800be70:	89bb      	ldrh	r3, [r7, #12]
 800be72:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800be74:	065b      	lsls	r3, r3, #25
 800be76:	d500      	bpl.n	800be7a <_svfiprintf_r+0x1d2>
 800be78:	e72c      	b.n	800bcd4 <_svfiprintf_r+0x2c>
 800be7a:	b021      	add	sp, #132	@ 0x84
 800be7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be7e:	aa07      	add	r2, sp, #28
 800be80:	9200      	str	r2, [sp, #0]
 800be82:	0021      	movs	r1, r4
 800be84:	003a      	movs	r2, r7
 800be86:	4b06      	ldr	r3, [pc, #24]	@ (800bea0 <_svfiprintf_r+0x1f8>)
 800be88:	9803      	ldr	r0, [sp, #12]
 800be8a:	f7fe fc41 	bl	800a710 <_printf_i>
 800be8e:	e7eb      	b.n	800be68 <_svfiprintf_r+0x1c0>
 800be90:	0800e1ed 	.word	0x0800e1ed
 800be94:	0800e1f3 	.word	0x0800e1f3
 800be98:	0800e1f7 	.word	0x0800e1f7
 800be9c:	0800a1b5 	.word	0x0800a1b5
 800bea0:	0800bbe9 	.word	0x0800bbe9

0800bea4 <_sungetc_r>:
 800bea4:	b570      	push	{r4, r5, r6, lr}
 800bea6:	0014      	movs	r4, r2
 800bea8:	1c4b      	adds	r3, r1, #1
 800beaa:	d103      	bne.n	800beb4 <_sungetc_r+0x10>
 800beac:	2501      	movs	r5, #1
 800beae:	426d      	negs	r5, r5
 800beb0:	0028      	movs	r0, r5
 800beb2:	bd70      	pop	{r4, r5, r6, pc}
 800beb4:	8993      	ldrh	r3, [r2, #12]
 800beb6:	2220      	movs	r2, #32
 800beb8:	4393      	bics	r3, r2
 800beba:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800bebc:	81a3      	strh	r3, [r4, #12]
 800bebe:	b2ce      	uxtb	r6, r1
 800bec0:	6863      	ldr	r3, [r4, #4]
 800bec2:	b2cd      	uxtb	r5, r1
 800bec4:	2a00      	cmp	r2, #0
 800bec6:	d010      	beq.n	800beea <_sungetc_r+0x46>
 800bec8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800beca:	429a      	cmp	r2, r3
 800becc:	dd07      	ble.n	800bede <_sungetc_r+0x3a>
 800bece:	6823      	ldr	r3, [r4, #0]
 800bed0:	3b01      	subs	r3, #1
 800bed2:	6023      	str	r3, [r4, #0]
 800bed4:	701e      	strb	r6, [r3, #0]
 800bed6:	6863      	ldr	r3, [r4, #4]
 800bed8:	3301      	adds	r3, #1
 800beda:	6063      	str	r3, [r4, #4]
 800bedc:	e7e8      	b.n	800beb0 <_sungetc_r+0xc>
 800bede:	0021      	movs	r1, r4
 800bee0:	f001 f844 	bl	800cf6c <__submore>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d0f2      	beq.n	800bece <_sungetc_r+0x2a>
 800bee8:	e7e0      	b.n	800beac <_sungetc_r+0x8>
 800beea:	6921      	ldr	r1, [r4, #16]
 800beec:	6822      	ldr	r2, [r4, #0]
 800beee:	2900      	cmp	r1, #0
 800bef0:	d007      	beq.n	800bf02 <_sungetc_r+0x5e>
 800bef2:	4291      	cmp	r1, r2
 800bef4:	d205      	bcs.n	800bf02 <_sungetc_r+0x5e>
 800bef6:	1e51      	subs	r1, r2, #1
 800bef8:	7808      	ldrb	r0, [r1, #0]
 800befa:	42a8      	cmp	r0, r5
 800befc:	d101      	bne.n	800bf02 <_sungetc_r+0x5e>
 800befe:	6021      	str	r1, [r4, #0]
 800bf00:	e7ea      	b.n	800bed8 <_sungetc_r+0x34>
 800bf02:	6423      	str	r3, [r4, #64]	@ 0x40
 800bf04:	0023      	movs	r3, r4
 800bf06:	3344      	adds	r3, #68	@ 0x44
 800bf08:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf0a:	2303      	movs	r3, #3
 800bf0c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bf0e:	0023      	movs	r3, r4
 800bf10:	3346      	adds	r3, #70	@ 0x46
 800bf12:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800bf14:	701e      	strb	r6, [r3, #0]
 800bf16:	6023      	str	r3, [r4, #0]
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e7de      	b.n	800beda <_sungetc_r+0x36>

0800bf1c <__ssrefill_r>:
 800bf1c:	b510      	push	{r4, lr}
 800bf1e:	000c      	movs	r4, r1
 800bf20:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bf22:	2900      	cmp	r1, #0
 800bf24:	d00e      	beq.n	800bf44 <__ssrefill_r+0x28>
 800bf26:	0023      	movs	r3, r4
 800bf28:	3344      	adds	r3, #68	@ 0x44
 800bf2a:	4299      	cmp	r1, r3
 800bf2c:	d001      	beq.n	800bf32 <__ssrefill_r+0x16>
 800bf2e:	f7ff fe11 	bl	800bb54 <_free_r>
 800bf32:	2000      	movs	r0, #0
 800bf34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf36:	6360      	str	r0, [r4, #52]	@ 0x34
 800bf38:	6063      	str	r3, [r4, #4]
 800bf3a:	4283      	cmp	r3, r0
 800bf3c:	d002      	beq.n	800bf44 <__ssrefill_r+0x28>
 800bf3e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bf40:	6023      	str	r3, [r4, #0]
 800bf42:	bd10      	pop	{r4, pc}
 800bf44:	6923      	ldr	r3, [r4, #16]
 800bf46:	2001      	movs	r0, #1
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	89a2      	ldrh	r2, [r4, #12]
 800bf4e:	6063      	str	r3, [r4, #4]
 800bf50:	3320      	adds	r3, #32
 800bf52:	4313      	orrs	r3, r2
 800bf54:	81a3      	strh	r3, [r4, #12]
 800bf56:	4240      	negs	r0, r0
 800bf58:	e7f3      	b.n	800bf42 <__ssrefill_r+0x26>
	...

0800bf5c <__ssvfiscanf_r>:
 800bf5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf5e:	4cab      	ldr	r4, [pc, #684]	@ (800c20c <__ssvfiscanf_r+0x2b0>)
 800bf60:	44a5      	add	sp, r4
 800bf62:	000c      	movs	r4, r1
 800bf64:	2100      	movs	r1, #0
 800bf66:	9000      	str	r0, [sp, #0]
 800bf68:	20be      	movs	r0, #190	@ 0xbe
 800bf6a:	9146      	str	r1, [sp, #280]	@ 0x118
 800bf6c:	9147      	str	r1, [sp, #284]	@ 0x11c
 800bf6e:	a903      	add	r1, sp, #12
 800bf70:	9148      	str	r1, [sp, #288]	@ 0x120
 800bf72:	49a7      	ldr	r1, [pc, #668]	@ (800c210 <__ssvfiscanf_r+0x2b4>)
 800bf74:	0040      	lsls	r0, r0, #1
 800bf76:	ad43      	add	r5, sp, #268	@ 0x10c
 800bf78:	5029      	str	r1, [r5, r0]
 800bf7a:	49a6      	ldr	r1, [pc, #664]	@ (800c214 <__ssvfiscanf_r+0x2b8>)
 800bf7c:	3004      	adds	r0, #4
 800bf7e:	ad43      	add	r5, sp, #268	@ 0x10c
 800bf80:	5029      	str	r1, [r5, r0]
 800bf82:	9302      	str	r3, [sp, #8]
 800bf84:	7816      	ldrb	r6, [r2, #0]
 800bf86:	2e00      	cmp	r6, #0
 800bf88:	d100      	bne.n	800bf8c <__ssvfiscanf_r+0x30>
 800bf8a:	e13c      	b.n	800c206 <__ssvfiscanf_r+0x2aa>
 800bf8c:	2308      	movs	r3, #8
 800bf8e:	2008      	movs	r0, #8
 800bf90:	4da1      	ldr	r5, [pc, #644]	@ (800c218 <__ssvfiscanf_r+0x2bc>)
 800bf92:	1c57      	adds	r7, r2, #1
 800bf94:	5da9      	ldrb	r1, [r5, r6]
 800bf96:	400b      	ands	r3, r1
 800bf98:	4201      	tst	r1, r0
 800bf9a:	d01d      	beq.n	800bfd8 <__ssvfiscanf_r+0x7c>
 800bf9c:	0006      	movs	r6, r0
 800bf9e:	6863      	ldr	r3, [r4, #4]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	dd0f      	ble.n	800bfc4 <__ssvfiscanf_r+0x68>
 800bfa4:	6823      	ldr	r3, [r4, #0]
 800bfa6:	781a      	ldrb	r2, [r3, #0]
 800bfa8:	5caa      	ldrb	r2, [r5, r2]
 800bfaa:	4232      	tst	r2, r6
 800bfac:	d101      	bne.n	800bfb2 <__ssvfiscanf_r+0x56>
 800bfae:	003a      	movs	r2, r7
 800bfb0:	e7e8      	b.n	800bf84 <__ssvfiscanf_r+0x28>
 800bfb2:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800bfb4:	3301      	adds	r3, #1
 800bfb6:	3201      	adds	r2, #1
 800bfb8:	9247      	str	r2, [sp, #284]	@ 0x11c
 800bfba:	6862      	ldr	r2, [r4, #4]
 800bfbc:	6023      	str	r3, [r4, #0]
 800bfbe:	3a01      	subs	r2, #1
 800bfc0:	6062      	str	r2, [r4, #4]
 800bfc2:	e7ec      	b.n	800bf9e <__ssvfiscanf_r+0x42>
 800bfc4:	22c0      	movs	r2, #192	@ 0xc0
 800bfc6:	ab43      	add	r3, sp, #268	@ 0x10c
 800bfc8:	0052      	lsls	r2, r2, #1
 800bfca:	0021      	movs	r1, r4
 800bfcc:	589b      	ldr	r3, [r3, r2]
 800bfce:	9800      	ldr	r0, [sp, #0]
 800bfd0:	4798      	blx	r3
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d0e6      	beq.n	800bfa4 <__ssvfiscanf_r+0x48>
 800bfd6:	e7ea      	b.n	800bfae <__ssvfiscanf_r+0x52>
 800bfd8:	2e25      	cmp	r6, #37	@ 0x25
 800bfda:	d162      	bne.n	800c0a2 <__ssvfiscanf_r+0x146>
 800bfdc:	9345      	str	r3, [sp, #276]	@ 0x114
 800bfde:	9343      	str	r3, [sp, #268]	@ 0x10c
 800bfe0:	7853      	ldrb	r3, [r2, #1]
 800bfe2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfe4:	d102      	bne.n	800bfec <__ssvfiscanf_r+0x90>
 800bfe6:	3b1a      	subs	r3, #26
 800bfe8:	9343      	str	r3, [sp, #268]	@ 0x10c
 800bfea:	1c97      	adds	r7, r2, #2
 800bfec:	003d      	movs	r5, r7
 800bfee:	220a      	movs	r2, #10
 800bff0:	7829      	ldrb	r1, [r5, #0]
 800bff2:	1c6f      	adds	r7, r5, #1
 800bff4:	000b      	movs	r3, r1
 800bff6:	3b30      	subs	r3, #48	@ 0x30
 800bff8:	2b09      	cmp	r3, #9
 800bffa:	d91f      	bls.n	800c03c <__ssvfiscanf_r+0xe0>
 800bffc:	4b87      	ldr	r3, [pc, #540]	@ (800c21c <__ssvfiscanf_r+0x2c0>)
 800bffe:	2203      	movs	r2, #3
 800c000:	0018      	movs	r0, r3
 800c002:	9301      	str	r3, [sp, #4]
 800c004:	f7fe fefe 	bl	800ae04 <memchr>
 800c008:	2800      	cmp	r0, #0
 800c00a:	d007      	beq.n	800c01c <__ssvfiscanf_r+0xc0>
 800c00c:	9b01      	ldr	r3, [sp, #4]
 800c00e:	003d      	movs	r5, r7
 800c010:	1ac0      	subs	r0, r0, r3
 800c012:	2301      	movs	r3, #1
 800c014:	4083      	lsls	r3, r0
 800c016:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800c018:	4313      	orrs	r3, r2
 800c01a:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c01c:	782b      	ldrb	r3, [r5, #0]
 800c01e:	1c6f      	adds	r7, r5, #1
 800c020:	2b78      	cmp	r3, #120	@ 0x78
 800c022:	d806      	bhi.n	800c032 <__ssvfiscanf_r+0xd6>
 800c024:	2b57      	cmp	r3, #87	@ 0x57
 800c026:	d810      	bhi.n	800c04a <__ssvfiscanf_r+0xee>
 800c028:	2b25      	cmp	r3, #37	@ 0x25
 800c02a:	d03a      	beq.n	800c0a2 <__ssvfiscanf_r+0x146>
 800c02c:	d834      	bhi.n	800c098 <__ssvfiscanf_r+0x13c>
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d055      	beq.n	800c0de <__ssvfiscanf_r+0x182>
 800c032:	2303      	movs	r3, #3
 800c034:	9349      	str	r3, [sp, #292]	@ 0x124
 800c036:	3307      	adds	r3, #7
 800c038:	9344      	str	r3, [sp, #272]	@ 0x110
 800c03a:	e069      	b.n	800c110 <__ssvfiscanf_r+0x1b4>
 800c03c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c03e:	003d      	movs	r5, r7
 800c040:	4353      	muls	r3, r2
 800c042:	3b30      	subs	r3, #48	@ 0x30
 800c044:	185b      	adds	r3, r3, r1
 800c046:	9345      	str	r3, [sp, #276]	@ 0x114
 800c048:	e7d2      	b.n	800bff0 <__ssvfiscanf_r+0x94>
 800c04a:	0018      	movs	r0, r3
 800c04c:	3858      	subs	r0, #88	@ 0x58
 800c04e:	2820      	cmp	r0, #32
 800c050:	d8ef      	bhi.n	800c032 <__ssvfiscanf_r+0xd6>
 800c052:	f7f4 f873 	bl	800013c <__gnu_thumb1_case_shi>
 800c056:	004b      	.short	0x004b
 800c058:	ffeeffee 	.word	0xffeeffee
 800c05c:	ffee007d 	.word	0xffee007d
 800c060:	ffeeffee 	.word	0xffeeffee
 800c064:	ffeeffee 	.word	0xffeeffee
 800c068:	ffeeffee 	.word	0xffeeffee
 800c06c:	007b0088 	.word	0x007b0088
 800c070:	00240024 	.word	0x00240024
 800c074:	ffee0024 	.word	0xffee0024
 800c078:	ffee0055 	.word	0xffee0055
 800c07c:	ffeeffee 	.word	0xffeeffee
 800c080:	0090ffee 	.word	0x0090ffee
 800c084:	00470059 	.word	0x00470059
 800c088:	ffeeffee 	.word	0xffeeffee
 800c08c:	ffee008e 	.word	0xffee008e
 800c090:	ffee007b 	.word	0xffee007b
 800c094:	004bffee 	.word	0x004bffee
 800c098:	3b45      	subs	r3, #69	@ 0x45
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d8c9      	bhi.n	800c032 <__ssvfiscanf_r+0xd6>
 800c09e:	2305      	movs	r3, #5
 800c0a0:	e035      	b.n	800c10e <__ssvfiscanf_r+0x1b2>
 800c0a2:	6863      	ldr	r3, [r4, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	dd0d      	ble.n	800c0c4 <__ssvfiscanf_r+0x168>
 800c0a8:	6823      	ldr	r3, [r4, #0]
 800c0aa:	781a      	ldrb	r2, [r3, #0]
 800c0ac:	42b2      	cmp	r2, r6
 800c0ae:	d000      	beq.n	800c0b2 <__ssvfiscanf_r+0x156>
 800c0b0:	e0a9      	b.n	800c206 <__ssvfiscanf_r+0x2aa>
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	6862      	ldr	r2, [r4, #4]
 800c0b6:	6023      	str	r3, [r4, #0]
 800c0b8:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c0ba:	3a01      	subs	r2, #1
 800c0bc:	3301      	adds	r3, #1
 800c0be:	6062      	str	r2, [r4, #4]
 800c0c0:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c0c2:	e774      	b.n	800bfae <__ssvfiscanf_r+0x52>
 800c0c4:	23c0      	movs	r3, #192	@ 0xc0
 800c0c6:	aa43      	add	r2, sp, #268	@ 0x10c
 800c0c8:	005b      	lsls	r3, r3, #1
 800c0ca:	0021      	movs	r1, r4
 800c0cc:	58d3      	ldr	r3, [r2, r3]
 800c0ce:	9800      	ldr	r0, [sp, #0]
 800c0d0:	4798      	blx	r3
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d0e8      	beq.n	800c0a8 <__ssvfiscanf_r+0x14c>
 800c0d6:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d000      	beq.n	800c0de <__ssvfiscanf_r+0x182>
 800c0dc:	e08b      	b.n	800c1f6 <__ssvfiscanf_r+0x29a>
 800c0de:	2001      	movs	r0, #1
 800c0e0:	4240      	negs	r0, r0
 800c0e2:	e08c      	b.n	800c1fe <__ssvfiscanf_r+0x2a2>
 800c0e4:	2220      	movs	r2, #32
 800c0e6:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 800c0e8:	430a      	orrs	r2, r1
 800c0ea:	9243      	str	r2, [sp, #268]	@ 0x10c
 800c0ec:	2280      	movs	r2, #128	@ 0x80
 800c0ee:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 800c0f0:	0092      	lsls	r2, r2, #2
 800c0f2:	430a      	orrs	r2, r1
 800c0f4:	9243      	str	r2, [sp, #268]	@ 0x10c
 800c0f6:	2210      	movs	r2, #16
 800c0f8:	9244      	str	r2, [sp, #272]	@ 0x110
 800c0fa:	2b6e      	cmp	r3, #110	@ 0x6e
 800c0fc:	d902      	bls.n	800c104 <__ssvfiscanf_r+0x1a8>
 800c0fe:	e005      	b.n	800c10c <__ssvfiscanf_r+0x1b0>
 800c100:	2300      	movs	r3, #0
 800c102:	9344      	str	r3, [sp, #272]	@ 0x110
 800c104:	2303      	movs	r3, #3
 800c106:	e002      	b.n	800c10e <__ssvfiscanf_r+0x1b2>
 800c108:	2308      	movs	r3, #8
 800c10a:	9344      	str	r3, [sp, #272]	@ 0x110
 800c10c:	2304      	movs	r3, #4
 800c10e:	9349      	str	r3, [sp, #292]	@ 0x124
 800c110:	6863      	ldr	r3, [r4, #4]
 800c112:	2b00      	cmp	r3, #0
 800c114:	dd3e      	ble.n	800c194 <__ssvfiscanf_r+0x238>
 800c116:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c118:	065b      	lsls	r3, r3, #25
 800c11a:	d408      	bmi.n	800c12e <__ssvfiscanf_r+0x1d2>
 800c11c:	26c0      	movs	r6, #192	@ 0xc0
 800c11e:	2508      	movs	r5, #8
 800c120:	0076      	lsls	r6, r6, #1
 800c122:	6823      	ldr	r3, [r4, #0]
 800c124:	493c      	ldr	r1, [pc, #240]	@ (800c218 <__ssvfiscanf_r+0x2bc>)
 800c126:	781a      	ldrb	r2, [r3, #0]
 800c128:	5c8a      	ldrb	r2, [r1, r2]
 800c12a:	422a      	tst	r2, r5
 800c12c:	d13c      	bne.n	800c1a8 <__ssvfiscanf_r+0x24c>
 800c12e:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 800c130:	2b02      	cmp	r3, #2
 800c132:	dc4c      	bgt.n	800c1ce <__ssvfiscanf_r+0x272>
 800c134:	0022      	movs	r2, r4
 800c136:	9800      	ldr	r0, [sp, #0]
 800c138:	ab02      	add	r3, sp, #8
 800c13a:	a943      	add	r1, sp, #268	@ 0x10c
 800c13c:	f000 f91e 	bl	800c37c <_scanf_chars>
 800c140:	2801      	cmp	r0, #1
 800c142:	d060      	beq.n	800c206 <__ssvfiscanf_r+0x2aa>
 800c144:	2802      	cmp	r0, #2
 800c146:	d000      	beq.n	800c14a <__ssvfiscanf_r+0x1ee>
 800c148:	e731      	b.n	800bfae <__ssvfiscanf_r+0x52>
 800c14a:	e7c4      	b.n	800c0d6 <__ssvfiscanf_r+0x17a>
 800c14c:	220a      	movs	r2, #10
 800c14e:	e7d3      	b.n	800c0f8 <__ssvfiscanf_r+0x19c>
 800c150:	0039      	movs	r1, r7
 800c152:	a803      	add	r0, sp, #12
 800c154:	f000 fa72 	bl	800c63c <__sccl>
 800c158:	2340      	movs	r3, #64	@ 0x40
 800c15a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800c15c:	0007      	movs	r7, r0
 800c15e:	4313      	orrs	r3, r2
 800c160:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c162:	2301      	movs	r3, #1
 800c164:	e7d3      	b.n	800c10e <__ssvfiscanf_r+0x1b2>
 800c166:	2340      	movs	r3, #64	@ 0x40
 800c168:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800c16a:	4313      	orrs	r3, r2
 800c16c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c16e:	2300      	movs	r3, #0
 800c170:	e7cd      	b.n	800c10e <__ssvfiscanf_r+0x1b2>
 800c172:	2302      	movs	r3, #2
 800c174:	e7cb      	b.n	800c10e <__ssvfiscanf_r+0x1b2>
 800c176:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800c178:	06d3      	lsls	r3, r2, #27
 800c17a:	d500      	bpl.n	800c17e <__ssvfiscanf_r+0x222>
 800c17c:	e717      	b.n	800bfae <__ssvfiscanf_r+0x52>
 800c17e:	9b02      	ldr	r3, [sp, #8]
 800c180:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 800c182:	1d18      	adds	r0, r3, #4
 800c184:	9002      	str	r0, [sp, #8]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	07d5      	lsls	r5, r2, #31
 800c18a:	d501      	bpl.n	800c190 <__ssvfiscanf_r+0x234>
 800c18c:	8019      	strh	r1, [r3, #0]
 800c18e:	e70e      	b.n	800bfae <__ssvfiscanf_r+0x52>
 800c190:	6019      	str	r1, [r3, #0]
 800c192:	e70c      	b.n	800bfae <__ssvfiscanf_r+0x52>
 800c194:	23c0      	movs	r3, #192	@ 0xc0
 800c196:	aa43      	add	r2, sp, #268	@ 0x10c
 800c198:	005b      	lsls	r3, r3, #1
 800c19a:	0021      	movs	r1, r4
 800c19c:	58d3      	ldr	r3, [r2, r3]
 800c19e:	9800      	ldr	r0, [sp, #0]
 800c1a0:	4798      	blx	r3
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	d0b7      	beq.n	800c116 <__ssvfiscanf_r+0x1ba>
 800c1a6:	e796      	b.n	800c0d6 <__ssvfiscanf_r+0x17a>
 800c1a8:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800c1aa:	3201      	adds	r2, #1
 800c1ac:	9247      	str	r2, [sp, #284]	@ 0x11c
 800c1ae:	6862      	ldr	r2, [r4, #4]
 800c1b0:	3a01      	subs	r2, #1
 800c1b2:	6062      	str	r2, [r4, #4]
 800c1b4:	2a00      	cmp	r2, #0
 800c1b6:	dd02      	ble.n	800c1be <__ssvfiscanf_r+0x262>
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	6023      	str	r3, [r4, #0]
 800c1bc:	e7b1      	b.n	800c122 <__ssvfiscanf_r+0x1c6>
 800c1be:	ab43      	add	r3, sp, #268	@ 0x10c
 800c1c0:	0021      	movs	r1, r4
 800c1c2:	599b      	ldr	r3, [r3, r6]
 800c1c4:	9800      	ldr	r0, [sp, #0]
 800c1c6:	4798      	blx	r3
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d0aa      	beq.n	800c122 <__ssvfiscanf_r+0x1c6>
 800c1cc:	e783      	b.n	800c0d6 <__ssvfiscanf_r+0x17a>
 800c1ce:	2b04      	cmp	r3, #4
 800c1d0:	dc06      	bgt.n	800c1e0 <__ssvfiscanf_r+0x284>
 800c1d2:	0022      	movs	r2, r4
 800c1d4:	9800      	ldr	r0, [sp, #0]
 800c1d6:	ab02      	add	r3, sp, #8
 800c1d8:	a943      	add	r1, sp, #268	@ 0x10c
 800c1da:	f000 f92f 	bl	800c43c <_scanf_i>
 800c1de:	e7af      	b.n	800c140 <__ssvfiscanf_r+0x1e4>
 800c1e0:	4b0f      	ldr	r3, [pc, #60]	@ (800c220 <__ssvfiscanf_r+0x2c4>)
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d100      	bne.n	800c1e8 <__ssvfiscanf_r+0x28c>
 800c1e6:	e6e2      	b.n	800bfae <__ssvfiscanf_r+0x52>
 800c1e8:	0022      	movs	r2, r4
 800c1ea:	9800      	ldr	r0, [sp, #0]
 800c1ec:	ab02      	add	r3, sp, #8
 800c1ee:	a943      	add	r1, sp, #268	@ 0x10c
 800c1f0:	e000      	b.n	800c1f4 <__ssvfiscanf_r+0x298>
 800c1f2:	bf00      	nop
 800c1f4:	e7a4      	b.n	800c140 <__ssvfiscanf_r+0x1e4>
 800c1f6:	89a3      	ldrh	r3, [r4, #12]
 800c1f8:	065b      	lsls	r3, r3, #25
 800c1fa:	d500      	bpl.n	800c1fe <__ssvfiscanf_r+0x2a2>
 800c1fc:	e76f      	b.n	800c0de <__ssvfiscanf_r+0x182>
 800c1fe:	23a5      	movs	r3, #165	@ 0xa5
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	449d      	add	sp, r3
 800c204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c206:	9846      	ldr	r0, [sp, #280]	@ 0x118
 800c208:	e7f9      	b.n	800c1fe <__ssvfiscanf_r+0x2a2>
 800c20a:	46c0      	nop			@ (mov r8, r8)
 800c20c:	fffffd6c 	.word	0xfffffd6c
 800c210:	0800bea5 	.word	0x0800bea5
 800c214:	0800bf1d 	.word	0x0800bf1d
 800c218:	0800e379 	.word	0x0800e379
 800c21c:	0800e1f3 	.word	0x0800e1f3
 800c220:	00000000 	.word	0x00000000

0800c224 <malloc>:
 800c224:	b510      	push	{r4, lr}
 800c226:	4b03      	ldr	r3, [pc, #12]	@ (800c234 <malloc+0x10>)
 800c228:	0001      	movs	r1, r0
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	f000 f826 	bl	800c27c <_malloc_r>
 800c230:	bd10      	pop	{r4, pc}
 800c232:	46c0      	nop			@ (mov r8, r8)
 800c234:	20000018 	.word	0x20000018

0800c238 <sbrk_aligned>:
 800c238:	b570      	push	{r4, r5, r6, lr}
 800c23a:	4e0f      	ldr	r6, [pc, #60]	@ (800c278 <sbrk_aligned+0x40>)
 800c23c:	000d      	movs	r5, r1
 800c23e:	6831      	ldr	r1, [r6, #0]
 800c240:	0004      	movs	r4, r0
 800c242:	2900      	cmp	r1, #0
 800c244:	d102      	bne.n	800c24c <sbrk_aligned+0x14>
 800c246:	f001 f835 	bl	800d2b4 <_sbrk_r>
 800c24a:	6030      	str	r0, [r6, #0]
 800c24c:	0029      	movs	r1, r5
 800c24e:	0020      	movs	r0, r4
 800c250:	f001 f830 	bl	800d2b4 <_sbrk_r>
 800c254:	1c43      	adds	r3, r0, #1
 800c256:	d103      	bne.n	800c260 <sbrk_aligned+0x28>
 800c258:	2501      	movs	r5, #1
 800c25a:	426d      	negs	r5, r5
 800c25c:	0028      	movs	r0, r5
 800c25e:	bd70      	pop	{r4, r5, r6, pc}
 800c260:	2303      	movs	r3, #3
 800c262:	1cc5      	adds	r5, r0, #3
 800c264:	439d      	bics	r5, r3
 800c266:	42a8      	cmp	r0, r5
 800c268:	d0f8      	beq.n	800c25c <sbrk_aligned+0x24>
 800c26a:	1a29      	subs	r1, r5, r0
 800c26c:	0020      	movs	r0, r4
 800c26e:	f001 f821 	bl	800d2b4 <_sbrk_r>
 800c272:	3001      	adds	r0, #1
 800c274:	d1f2      	bne.n	800c25c <sbrk_aligned+0x24>
 800c276:	e7ef      	b.n	800c258 <sbrk_aligned+0x20>
 800c278:	20000540 	.word	0x20000540

0800c27c <_malloc_r>:
 800c27c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c27e:	2203      	movs	r2, #3
 800c280:	1ccb      	adds	r3, r1, #3
 800c282:	4393      	bics	r3, r2
 800c284:	3308      	adds	r3, #8
 800c286:	0005      	movs	r5, r0
 800c288:	001f      	movs	r7, r3
 800c28a:	2b0c      	cmp	r3, #12
 800c28c:	d234      	bcs.n	800c2f8 <_malloc_r+0x7c>
 800c28e:	270c      	movs	r7, #12
 800c290:	42b9      	cmp	r1, r7
 800c292:	d833      	bhi.n	800c2fc <_malloc_r+0x80>
 800c294:	0028      	movs	r0, r5
 800c296:	f000 fabd 	bl	800c814 <__malloc_lock>
 800c29a:	4e37      	ldr	r6, [pc, #220]	@ (800c378 <_malloc_r+0xfc>)
 800c29c:	6833      	ldr	r3, [r6, #0]
 800c29e:	001c      	movs	r4, r3
 800c2a0:	2c00      	cmp	r4, #0
 800c2a2:	d12f      	bne.n	800c304 <_malloc_r+0x88>
 800c2a4:	0039      	movs	r1, r7
 800c2a6:	0028      	movs	r0, r5
 800c2a8:	f7ff ffc6 	bl	800c238 <sbrk_aligned>
 800c2ac:	0004      	movs	r4, r0
 800c2ae:	1c43      	adds	r3, r0, #1
 800c2b0:	d15f      	bne.n	800c372 <_malloc_r+0xf6>
 800c2b2:	6834      	ldr	r4, [r6, #0]
 800c2b4:	9400      	str	r4, [sp, #0]
 800c2b6:	9b00      	ldr	r3, [sp, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d14a      	bne.n	800c352 <_malloc_r+0xd6>
 800c2bc:	2c00      	cmp	r4, #0
 800c2be:	d052      	beq.n	800c366 <_malloc_r+0xea>
 800c2c0:	6823      	ldr	r3, [r4, #0]
 800c2c2:	0028      	movs	r0, r5
 800c2c4:	18e3      	adds	r3, r4, r3
 800c2c6:	9900      	ldr	r1, [sp, #0]
 800c2c8:	9301      	str	r3, [sp, #4]
 800c2ca:	f000 fff3 	bl	800d2b4 <_sbrk_r>
 800c2ce:	9b01      	ldr	r3, [sp, #4]
 800c2d0:	4283      	cmp	r3, r0
 800c2d2:	d148      	bne.n	800c366 <_malloc_r+0xea>
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	0028      	movs	r0, r5
 800c2d8:	1aff      	subs	r7, r7, r3
 800c2da:	0039      	movs	r1, r7
 800c2dc:	f7ff ffac 	bl	800c238 <sbrk_aligned>
 800c2e0:	3001      	adds	r0, #1
 800c2e2:	d040      	beq.n	800c366 <_malloc_r+0xea>
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	19db      	adds	r3, r3, r7
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	6833      	ldr	r3, [r6, #0]
 800c2ec:	685a      	ldr	r2, [r3, #4]
 800c2ee:	2a00      	cmp	r2, #0
 800c2f0:	d133      	bne.n	800c35a <_malloc_r+0xde>
 800c2f2:	9b00      	ldr	r3, [sp, #0]
 800c2f4:	6033      	str	r3, [r6, #0]
 800c2f6:	e019      	b.n	800c32c <_malloc_r+0xb0>
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	dac9      	bge.n	800c290 <_malloc_r+0x14>
 800c2fc:	230c      	movs	r3, #12
 800c2fe:	602b      	str	r3, [r5, #0]
 800c300:	2000      	movs	r0, #0
 800c302:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c304:	6821      	ldr	r1, [r4, #0]
 800c306:	1bc9      	subs	r1, r1, r7
 800c308:	d420      	bmi.n	800c34c <_malloc_r+0xd0>
 800c30a:	290b      	cmp	r1, #11
 800c30c:	d90a      	bls.n	800c324 <_malloc_r+0xa8>
 800c30e:	19e2      	adds	r2, r4, r7
 800c310:	6027      	str	r7, [r4, #0]
 800c312:	42a3      	cmp	r3, r4
 800c314:	d104      	bne.n	800c320 <_malloc_r+0xa4>
 800c316:	6032      	str	r2, [r6, #0]
 800c318:	6863      	ldr	r3, [r4, #4]
 800c31a:	6011      	str	r1, [r2, #0]
 800c31c:	6053      	str	r3, [r2, #4]
 800c31e:	e005      	b.n	800c32c <_malloc_r+0xb0>
 800c320:	605a      	str	r2, [r3, #4]
 800c322:	e7f9      	b.n	800c318 <_malloc_r+0x9c>
 800c324:	6862      	ldr	r2, [r4, #4]
 800c326:	42a3      	cmp	r3, r4
 800c328:	d10e      	bne.n	800c348 <_malloc_r+0xcc>
 800c32a:	6032      	str	r2, [r6, #0]
 800c32c:	0028      	movs	r0, r5
 800c32e:	f000 fa79 	bl	800c824 <__malloc_unlock>
 800c332:	0020      	movs	r0, r4
 800c334:	2207      	movs	r2, #7
 800c336:	300b      	adds	r0, #11
 800c338:	1d23      	adds	r3, r4, #4
 800c33a:	4390      	bics	r0, r2
 800c33c:	1ac2      	subs	r2, r0, r3
 800c33e:	4298      	cmp	r0, r3
 800c340:	d0df      	beq.n	800c302 <_malloc_r+0x86>
 800c342:	1a1b      	subs	r3, r3, r0
 800c344:	50a3      	str	r3, [r4, r2]
 800c346:	e7dc      	b.n	800c302 <_malloc_r+0x86>
 800c348:	605a      	str	r2, [r3, #4]
 800c34a:	e7ef      	b.n	800c32c <_malloc_r+0xb0>
 800c34c:	0023      	movs	r3, r4
 800c34e:	6864      	ldr	r4, [r4, #4]
 800c350:	e7a6      	b.n	800c2a0 <_malloc_r+0x24>
 800c352:	9c00      	ldr	r4, [sp, #0]
 800c354:	6863      	ldr	r3, [r4, #4]
 800c356:	9300      	str	r3, [sp, #0]
 800c358:	e7ad      	b.n	800c2b6 <_malloc_r+0x3a>
 800c35a:	001a      	movs	r2, r3
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	42a3      	cmp	r3, r4
 800c360:	d1fb      	bne.n	800c35a <_malloc_r+0xde>
 800c362:	2300      	movs	r3, #0
 800c364:	e7da      	b.n	800c31c <_malloc_r+0xa0>
 800c366:	230c      	movs	r3, #12
 800c368:	0028      	movs	r0, r5
 800c36a:	602b      	str	r3, [r5, #0]
 800c36c:	f000 fa5a 	bl	800c824 <__malloc_unlock>
 800c370:	e7c6      	b.n	800c300 <_malloc_r+0x84>
 800c372:	6007      	str	r7, [r0, #0]
 800c374:	e7da      	b.n	800c32c <_malloc_r+0xb0>
 800c376:	46c0      	nop			@ (mov r8, r8)
 800c378:	20000544 	.word	0x20000544

0800c37c <_scanf_chars>:
 800c37c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c37e:	0015      	movs	r5, r2
 800c380:	688a      	ldr	r2, [r1, #8]
 800c382:	000c      	movs	r4, r1
 800c384:	9001      	str	r0, [sp, #4]
 800c386:	2a00      	cmp	r2, #0
 800c388:	d104      	bne.n	800c394 <_scanf_chars+0x18>
 800c38a:	698a      	ldr	r2, [r1, #24]
 800c38c:	2a00      	cmp	r2, #0
 800c38e:	d117      	bne.n	800c3c0 <_scanf_chars+0x44>
 800c390:	3201      	adds	r2, #1
 800c392:	60a2      	str	r2, [r4, #8]
 800c394:	6822      	ldr	r2, [r4, #0]
 800c396:	06d2      	lsls	r2, r2, #27
 800c398:	d403      	bmi.n	800c3a2 <_scanf_chars+0x26>
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	1d11      	adds	r1, r2, #4
 800c39e:	6019      	str	r1, [r3, #0]
 800c3a0:	6817      	ldr	r7, [r2, #0]
 800c3a2:	2600      	movs	r6, #0
 800c3a4:	69a0      	ldr	r0, [r4, #24]
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	d016      	beq.n	800c3d8 <_scanf_chars+0x5c>
 800c3aa:	2801      	cmp	r0, #1
 800c3ac:	d10b      	bne.n	800c3c6 <_scanf_chars+0x4a>
 800c3ae:	682b      	ldr	r3, [r5, #0]
 800c3b0:	6962      	ldr	r2, [r4, #20]
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	5cd3      	ldrb	r3, [r2, r3]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d10e      	bne.n	800c3d8 <_scanf_chars+0x5c>
 800c3ba:	2e00      	cmp	r6, #0
 800c3bc:	d03b      	beq.n	800c436 <_scanf_chars+0xba>
 800c3be:	e029      	b.n	800c414 <_scanf_chars+0x98>
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	4252      	negs	r2, r2
 800c3c4:	e7e5      	b.n	800c392 <_scanf_chars+0x16>
 800c3c6:	2802      	cmp	r0, #2
 800c3c8:	d124      	bne.n	800c414 <_scanf_chars+0x98>
 800c3ca:	682b      	ldr	r3, [r5, #0]
 800c3cc:	4a1a      	ldr	r2, [pc, #104]	@ (800c438 <_scanf_chars+0xbc>)
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	5cd3      	ldrb	r3, [r2, r3]
 800c3d2:	2208      	movs	r2, #8
 800c3d4:	4213      	tst	r3, r2
 800c3d6:	d11d      	bne.n	800c414 <_scanf_chars+0x98>
 800c3d8:	2210      	movs	r2, #16
 800c3da:	6823      	ldr	r3, [r4, #0]
 800c3dc:	3601      	adds	r6, #1
 800c3de:	4213      	tst	r3, r2
 800c3e0:	d103      	bne.n	800c3ea <_scanf_chars+0x6e>
 800c3e2:	682b      	ldr	r3, [r5, #0]
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	703b      	strb	r3, [r7, #0]
 800c3e8:	3701      	adds	r7, #1
 800c3ea:	682a      	ldr	r2, [r5, #0]
 800c3ec:	686b      	ldr	r3, [r5, #4]
 800c3ee:	3201      	adds	r2, #1
 800c3f0:	602a      	str	r2, [r5, #0]
 800c3f2:	68a2      	ldr	r2, [r4, #8]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	3a01      	subs	r2, #1
 800c3f8:	606b      	str	r3, [r5, #4]
 800c3fa:	60a2      	str	r2, [r4, #8]
 800c3fc:	2a00      	cmp	r2, #0
 800c3fe:	d009      	beq.n	800c414 <_scanf_chars+0x98>
 800c400:	2b00      	cmp	r3, #0
 800c402:	dccf      	bgt.n	800c3a4 <_scanf_chars+0x28>
 800c404:	23c0      	movs	r3, #192	@ 0xc0
 800c406:	005b      	lsls	r3, r3, #1
 800c408:	0029      	movs	r1, r5
 800c40a:	58e3      	ldr	r3, [r4, r3]
 800c40c:	9801      	ldr	r0, [sp, #4]
 800c40e:	4798      	blx	r3
 800c410:	2800      	cmp	r0, #0
 800c412:	d0c7      	beq.n	800c3a4 <_scanf_chars+0x28>
 800c414:	6822      	ldr	r2, [r4, #0]
 800c416:	2310      	movs	r3, #16
 800c418:	0011      	movs	r1, r2
 800c41a:	4019      	ands	r1, r3
 800c41c:	421a      	tst	r2, r3
 800c41e:	d106      	bne.n	800c42e <_scanf_chars+0xb2>
 800c420:	68e3      	ldr	r3, [r4, #12]
 800c422:	3301      	adds	r3, #1
 800c424:	60e3      	str	r3, [r4, #12]
 800c426:	69a3      	ldr	r3, [r4, #24]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d000      	beq.n	800c42e <_scanf_chars+0xb2>
 800c42c:	7039      	strb	r1, [r7, #0]
 800c42e:	2000      	movs	r0, #0
 800c430:	6923      	ldr	r3, [r4, #16]
 800c432:	199b      	adds	r3, r3, r6
 800c434:	6123      	str	r3, [r4, #16]
 800c436:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c438:	0800e379 	.word	0x0800e379

0800c43c <_scanf_i>:
 800c43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c43e:	b08b      	sub	sp, #44	@ 0x2c
 800c440:	9301      	str	r3, [sp, #4]
 800c442:	4b78      	ldr	r3, [pc, #480]	@ (800c624 <_scanf_i+0x1e8>)
 800c444:	0016      	movs	r6, r2
 800c446:	9004      	str	r0, [sp, #16]
 800c448:	aa07      	add	r2, sp, #28
 800c44a:	cba1      	ldmia	r3!, {r0, r5, r7}
 800c44c:	c2a1      	stmia	r2!, {r0, r5, r7}
 800c44e:	4a76      	ldr	r2, [pc, #472]	@ (800c628 <_scanf_i+0x1ec>)
 800c450:	698b      	ldr	r3, [r1, #24]
 800c452:	000c      	movs	r4, r1
 800c454:	9205      	str	r2, [sp, #20]
 800c456:	2b03      	cmp	r3, #3
 800c458:	d101      	bne.n	800c45e <_scanf_i+0x22>
 800c45a:	4b74      	ldr	r3, [pc, #464]	@ (800c62c <_scanf_i+0x1f0>)
 800c45c:	9305      	str	r3, [sp, #20]
 800c45e:	22ae      	movs	r2, #174	@ 0xae
 800c460:	2000      	movs	r0, #0
 800c462:	68a3      	ldr	r3, [r4, #8]
 800c464:	0052      	lsls	r2, r2, #1
 800c466:	1e59      	subs	r1, r3, #1
 800c468:	9003      	str	r0, [sp, #12]
 800c46a:	4291      	cmp	r1, r2
 800c46c:	d905      	bls.n	800c47a <_scanf_i+0x3e>
 800c46e:	3b5e      	subs	r3, #94	@ 0x5e
 800c470:	3bff      	subs	r3, #255	@ 0xff
 800c472:	9303      	str	r3, [sp, #12]
 800c474:	235e      	movs	r3, #94	@ 0x5e
 800c476:	33ff      	adds	r3, #255	@ 0xff
 800c478:	60a3      	str	r3, [r4, #8]
 800c47a:	0023      	movs	r3, r4
 800c47c:	331c      	adds	r3, #28
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	23d0      	movs	r3, #208	@ 0xd0
 800c482:	2700      	movs	r7, #0
 800c484:	6822      	ldr	r2, [r4, #0]
 800c486:	011b      	lsls	r3, r3, #4
 800c488:	4313      	orrs	r3, r2
 800c48a:	6023      	str	r3, [r4, #0]
 800c48c:	9b00      	ldr	r3, [sp, #0]
 800c48e:	9302      	str	r3, [sp, #8]
 800c490:	6833      	ldr	r3, [r6, #0]
 800c492:	a807      	add	r0, sp, #28
 800c494:	7819      	ldrb	r1, [r3, #0]
 800c496:	00bb      	lsls	r3, r7, #2
 800c498:	2202      	movs	r2, #2
 800c49a:	5818      	ldr	r0, [r3, r0]
 800c49c:	f7fe fcb2 	bl	800ae04 <memchr>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d029      	beq.n	800c4f8 <_scanf_i+0xbc>
 800c4a4:	2f01      	cmp	r7, #1
 800c4a6:	d15e      	bne.n	800c566 <_scanf_i+0x12a>
 800c4a8:	6863      	ldr	r3, [r4, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d106      	bne.n	800c4bc <_scanf_i+0x80>
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	6822      	ldr	r2, [r4, #0]
 800c4b2:	6063      	str	r3, [r4, #4]
 800c4b4:	33f9      	adds	r3, #249	@ 0xf9
 800c4b6:	33ff      	adds	r3, #255	@ 0xff
 800c4b8:	4313      	orrs	r3, r2
 800c4ba:	6023      	str	r3, [r4, #0]
 800c4bc:	6823      	ldr	r3, [r4, #0]
 800c4be:	4a5c      	ldr	r2, [pc, #368]	@ (800c630 <_scanf_i+0x1f4>)
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	6023      	str	r3, [r4, #0]
 800c4c4:	68a3      	ldr	r3, [r4, #8]
 800c4c6:	1e5a      	subs	r2, r3, #1
 800c4c8:	60a2      	str	r2, [r4, #8]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d014      	beq.n	800c4f8 <_scanf_i+0xbc>
 800c4ce:	6833      	ldr	r3, [r6, #0]
 800c4d0:	1c5a      	adds	r2, r3, #1
 800c4d2:	6032      	str	r2, [r6, #0]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	9a02      	ldr	r2, [sp, #8]
 800c4d8:	7013      	strb	r3, [r2, #0]
 800c4da:	6873      	ldr	r3, [r6, #4]
 800c4dc:	1c55      	adds	r5, r2, #1
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	6073      	str	r3, [r6, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	dc07      	bgt.n	800c4f6 <_scanf_i+0xba>
 800c4e6:	23c0      	movs	r3, #192	@ 0xc0
 800c4e8:	005b      	lsls	r3, r3, #1
 800c4ea:	0031      	movs	r1, r6
 800c4ec:	58e3      	ldr	r3, [r4, r3]
 800c4ee:	9804      	ldr	r0, [sp, #16]
 800c4f0:	4798      	blx	r3
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	d17e      	bne.n	800c5f4 <_scanf_i+0x1b8>
 800c4f6:	9502      	str	r5, [sp, #8]
 800c4f8:	3701      	adds	r7, #1
 800c4fa:	2f03      	cmp	r7, #3
 800c4fc:	d1c8      	bne.n	800c490 <_scanf_i+0x54>
 800c4fe:	6863      	ldr	r3, [r4, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d101      	bne.n	800c508 <_scanf_i+0xcc>
 800c504:	330a      	adds	r3, #10
 800c506:	6063      	str	r3, [r4, #4]
 800c508:	2700      	movs	r7, #0
 800c50a:	6863      	ldr	r3, [r4, #4]
 800c50c:	4949      	ldr	r1, [pc, #292]	@ (800c634 <_scanf_i+0x1f8>)
 800c50e:	6960      	ldr	r0, [r4, #20]
 800c510:	1ac9      	subs	r1, r1, r3
 800c512:	f000 f893 	bl	800c63c <__sccl>
 800c516:	9d02      	ldr	r5, [sp, #8]
 800c518:	68a3      	ldr	r3, [r4, #8]
 800c51a:	6820      	ldr	r0, [r4, #0]
 800c51c:	9302      	str	r3, [sp, #8]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d03f      	beq.n	800c5a2 <_scanf_i+0x166>
 800c522:	6831      	ldr	r1, [r6, #0]
 800c524:	6963      	ldr	r3, [r4, #20]
 800c526:	780a      	ldrb	r2, [r1, #0]
 800c528:	5c9b      	ldrb	r3, [r3, r2]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d039      	beq.n	800c5a2 <_scanf_i+0x166>
 800c52e:	2a30      	cmp	r2, #48	@ 0x30
 800c530:	d128      	bne.n	800c584 <_scanf_i+0x148>
 800c532:	2380      	movs	r3, #128	@ 0x80
 800c534:	011b      	lsls	r3, r3, #4
 800c536:	4218      	tst	r0, r3
 800c538:	d024      	beq.n	800c584 <_scanf_i+0x148>
 800c53a:	9b03      	ldr	r3, [sp, #12]
 800c53c:	3701      	adds	r7, #1
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d005      	beq.n	800c54e <_scanf_i+0x112>
 800c542:	001a      	movs	r2, r3
 800c544:	9b02      	ldr	r3, [sp, #8]
 800c546:	3a01      	subs	r2, #1
 800c548:	3301      	adds	r3, #1
 800c54a:	9203      	str	r2, [sp, #12]
 800c54c:	60a3      	str	r3, [r4, #8]
 800c54e:	6873      	ldr	r3, [r6, #4]
 800c550:	3b01      	subs	r3, #1
 800c552:	6073      	str	r3, [r6, #4]
 800c554:	2b00      	cmp	r3, #0
 800c556:	dd1c      	ble.n	800c592 <_scanf_i+0x156>
 800c558:	6833      	ldr	r3, [r6, #0]
 800c55a:	3301      	adds	r3, #1
 800c55c:	6033      	str	r3, [r6, #0]
 800c55e:	68a3      	ldr	r3, [r4, #8]
 800c560:	3b01      	subs	r3, #1
 800c562:	60a3      	str	r3, [r4, #8]
 800c564:	e7d8      	b.n	800c518 <_scanf_i+0xdc>
 800c566:	2f02      	cmp	r7, #2
 800c568:	d1ac      	bne.n	800c4c4 <_scanf_i+0x88>
 800c56a:	23c0      	movs	r3, #192	@ 0xc0
 800c56c:	2180      	movs	r1, #128	@ 0x80
 800c56e:	6822      	ldr	r2, [r4, #0]
 800c570:	00db      	lsls	r3, r3, #3
 800c572:	4013      	ands	r3, r2
 800c574:	0089      	lsls	r1, r1, #2
 800c576:	428b      	cmp	r3, r1
 800c578:	d1c1      	bne.n	800c4fe <_scanf_i+0xc2>
 800c57a:	2310      	movs	r3, #16
 800c57c:	6063      	str	r3, [r4, #4]
 800c57e:	33f0      	adds	r3, #240	@ 0xf0
 800c580:	4313      	orrs	r3, r2
 800c582:	e79e      	b.n	800c4c2 <_scanf_i+0x86>
 800c584:	4b2c      	ldr	r3, [pc, #176]	@ (800c638 <_scanf_i+0x1fc>)
 800c586:	4003      	ands	r3, r0
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	780b      	ldrb	r3, [r1, #0]
 800c58c:	702b      	strb	r3, [r5, #0]
 800c58e:	3501      	adds	r5, #1
 800c590:	e7dd      	b.n	800c54e <_scanf_i+0x112>
 800c592:	23c0      	movs	r3, #192	@ 0xc0
 800c594:	005b      	lsls	r3, r3, #1
 800c596:	0031      	movs	r1, r6
 800c598:	58e3      	ldr	r3, [r4, r3]
 800c59a:	9804      	ldr	r0, [sp, #16]
 800c59c:	4798      	blx	r3
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d0dd      	beq.n	800c55e <_scanf_i+0x122>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	05db      	lsls	r3, r3, #23
 800c5a6:	d50e      	bpl.n	800c5c6 <_scanf_i+0x18a>
 800c5a8:	9b00      	ldr	r3, [sp, #0]
 800c5aa:	429d      	cmp	r5, r3
 800c5ac:	d907      	bls.n	800c5be <_scanf_i+0x182>
 800c5ae:	23be      	movs	r3, #190	@ 0xbe
 800c5b0:	3d01      	subs	r5, #1
 800c5b2:	005b      	lsls	r3, r3, #1
 800c5b4:	0032      	movs	r2, r6
 800c5b6:	7829      	ldrb	r1, [r5, #0]
 800c5b8:	58e3      	ldr	r3, [r4, r3]
 800c5ba:	9804      	ldr	r0, [sp, #16]
 800c5bc:	4798      	blx	r3
 800c5be:	9b00      	ldr	r3, [sp, #0]
 800c5c0:	2001      	movs	r0, #1
 800c5c2:	429d      	cmp	r5, r3
 800c5c4:	d029      	beq.n	800c61a <_scanf_i+0x1de>
 800c5c6:	6821      	ldr	r1, [r4, #0]
 800c5c8:	2310      	movs	r3, #16
 800c5ca:	000a      	movs	r2, r1
 800c5cc:	401a      	ands	r2, r3
 800c5ce:	4219      	tst	r1, r3
 800c5d0:	d11c      	bne.n	800c60c <_scanf_i+0x1d0>
 800c5d2:	702a      	strb	r2, [r5, #0]
 800c5d4:	6863      	ldr	r3, [r4, #4]
 800c5d6:	9900      	ldr	r1, [sp, #0]
 800c5d8:	9804      	ldr	r0, [sp, #16]
 800c5da:	9e05      	ldr	r6, [sp, #20]
 800c5dc:	47b0      	blx	r6
 800c5de:	9b01      	ldr	r3, [sp, #4]
 800c5e0:	6822      	ldr	r2, [r4, #0]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	0691      	lsls	r1, r2, #26
 800c5e6:	d507      	bpl.n	800c5f8 <_scanf_i+0x1bc>
 800c5e8:	9901      	ldr	r1, [sp, #4]
 800c5ea:	1d1a      	adds	r2, r3, #4
 800c5ec:	600a      	str	r2, [r1, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	6018      	str	r0, [r3, #0]
 800c5f2:	e008      	b.n	800c606 <_scanf_i+0x1ca>
 800c5f4:	2700      	movs	r7, #0
 800c5f6:	e7d4      	b.n	800c5a2 <_scanf_i+0x166>
 800c5f8:	1d19      	adds	r1, r3, #4
 800c5fa:	07d6      	lsls	r6, r2, #31
 800c5fc:	d50f      	bpl.n	800c61e <_scanf_i+0x1e2>
 800c5fe:	9a01      	ldr	r2, [sp, #4]
 800c600:	6011      	str	r1, [r2, #0]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	8018      	strh	r0, [r3, #0]
 800c606:	68e3      	ldr	r3, [r4, #12]
 800c608:	3301      	adds	r3, #1
 800c60a:	60e3      	str	r3, [r4, #12]
 800c60c:	2000      	movs	r0, #0
 800c60e:	9b00      	ldr	r3, [sp, #0]
 800c610:	1aed      	subs	r5, r5, r3
 800c612:	6923      	ldr	r3, [r4, #16]
 800c614:	19ed      	adds	r5, r5, r7
 800c616:	195b      	adds	r3, r3, r5
 800c618:	6123      	str	r3, [r4, #16]
 800c61a:	b00b      	add	sp, #44	@ 0x2c
 800c61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c61e:	9a01      	ldr	r2, [sp, #4]
 800c620:	6011      	str	r1, [r2, #0]
 800c622:	e7e4      	b.n	800c5ee <_scanf_i+0x1b2>
 800c624:	0800df48 	.word	0x0800df48
 800c628:	0800d289 	.word	0x0800d289
 800c62c:	0800d17d 	.word	0x0800d17d
 800c630:	fffffaff 	.word	0xfffffaff
 800c634:	0800e20e 	.word	0x0800e20e
 800c638:	fffff6ff 	.word	0xfffff6ff

0800c63c <__sccl>:
 800c63c:	b570      	push	{r4, r5, r6, lr}
 800c63e:	780b      	ldrb	r3, [r1, #0]
 800c640:	0004      	movs	r4, r0
 800c642:	2b5e      	cmp	r3, #94	@ 0x5e
 800c644:	d019      	beq.n	800c67a <__sccl+0x3e>
 800c646:	1c4d      	adds	r5, r1, #1
 800c648:	2100      	movs	r1, #0
 800c64a:	0022      	movs	r2, r4
 800c64c:	1c60      	adds	r0, r4, #1
 800c64e:	30ff      	adds	r0, #255	@ 0xff
 800c650:	7011      	strb	r1, [r2, #0]
 800c652:	3201      	adds	r2, #1
 800c654:	4282      	cmp	r2, r0
 800c656:	d1fb      	bne.n	800c650 <__sccl+0x14>
 800c658:	1e68      	subs	r0, r5, #1
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d026      	beq.n	800c6ac <__sccl+0x70>
 800c65e:	2601      	movs	r6, #1
 800c660:	404e      	eors	r6, r1
 800c662:	0028      	movs	r0, r5
 800c664:	54e6      	strb	r6, [r4, r3]
 800c666:	7801      	ldrb	r1, [r0, #0]
 800c668:	1c45      	adds	r5, r0, #1
 800c66a:	292d      	cmp	r1, #45	@ 0x2d
 800c66c:	d009      	beq.n	800c682 <__sccl+0x46>
 800c66e:	295d      	cmp	r1, #93	@ 0x5d
 800c670:	d01b      	beq.n	800c6aa <__sccl+0x6e>
 800c672:	2900      	cmp	r1, #0
 800c674:	d01a      	beq.n	800c6ac <__sccl+0x70>
 800c676:	000b      	movs	r3, r1
 800c678:	e7f3      	b.n	800c662 <__sccl+0x26>
 800c67a:	784b      	ldrb	r3, [r1, #1]
 800c67c:	1c8d      	adds	r5, r1, #2
 800c67e:	2101      	movs	r1, #1
 800c680:	e7e3      	b.n	800c64a <__sccl+0xe>
 800c682:	7842      	ldrb	r2, [r0, #1]
 800c684:	2a5d      	cmp	r2, #93	@ 0x5d
 800c686:	d0f6      	beq.n	800c676 <__sccl+0x3a>
 800c688:	4293      	cmp	r3, r2
 800c68a:	dcf4      	bgt.n	800c676 <__sccl+0x3a>
 800c68c:	0019      	movs	r1, r3
 800c68e:	3002      	adds	r0, #2
 800c690:	3101      	adds	r1, #1
 800c692:	5466      	strb	r6, [r4, r1]
 800c694:	428a      	cmp	r2, r1
 800c696:	dcfb      	bgt.n	800c690 <__sccl+0x54>
 800c698:	1c59      	adds	r1, r3, #1
 800c69a:	4293      	cmp	r3, r2
 800c69c:	db02      	blt.n	800c6a4 <__sccl+0x68>
 800c69e:	2200      	movs	r2, #0
 800c6a0:	188b      	adds	r3, r1, r2
 800c6a2:	e7e0      	b.n	800c666 <__sccl+0x2a>
 800c6a4:	1ad2      	subs	r2, r2, r3
 800c6a6:	3a01      	subs	r2, #1
 800c6a8:	e7fa      	b.n	800c6a0 <__sccl+0x64>
 800c6aa:	0028      	movs	r0, r5
 800c6ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6b0 <__sflush_r>:
 800c6b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6b2:	220c      	movs	r2, #12
 800c6b4:	5e8b      	ldrsh	r3, [r1, r2]
 800c6b6:	0005      	movs	r5, r0
 800c6b8:	000c      	movs	r4, r1
 800c6ba:	071a      	lsls	r2, r3, #28
 800c6bc:	d456      	bmi.n	800c76c <__sflush_r+0xbc>
 800c6be:	684a      	ldr	r2, [r1, #4]
 800c6c0:	2a00      	cmp	r2, #0
 800c6c2:	dc02      	bgt.n	800c6ca <__sflush_r+0x1a>
 800c6c4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800c6c6:	2a00      	cmp	r2, #0
 800c6c8:	dd4e      	ble.n	800c768 <__sflush_r+0xb8>
 800c6ca:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c6cc:	2f00      	cmp	r7, #0
 800c6ce:	d04b      	beq.n	800c768 <__sflush_r+0xb8>
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	2080      	movs	r0, #128	@ 0x80
 800c6d4:	682e      	ldr	r6, [r5, #0]
 800c6d6:	602a      	str	r2, [r5, #0]
 800c6d8:	001a      	movs	r2, r3
 800c6da:	0140      	lsls	r0, r0, #5
 800c6dc:	6a21      	ldr	r1, [r4, #32]
 800c6de:	4002      	ands	r2, r0
 800c6e0:	4203      	tst	r3, r0
 800c6e2:	d033      	beq.n	800c74c <__sflush_r+0x9c>
 800c6e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c6e6:	89a3      	ldrh	r3, [r4, #12]
 800c6e8:	075b      	lsls	r3, r3, #29
 800c6ea:	d506      	bpl.n	800c6fa <__sflush_r+0x4a>
 800c6ec:	6863      	ldr	r3, [r4, #4]
 800c6ee:	1ad2      	subs	r2, r2, r3
 800c6f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d001      	beq.n	800c6fa <__sflush_r+0x4a>
 800c6f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c6f8:	1ad2      	subs	r2, r2, r3
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	0028      	movs	r0, r5
 800c6fe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c700:	6a21      	ldr	r1, [r4, #32]
 800c702:	47b8      	blx	r7
 800c704:	89a2      	ldrh	r2, [r4, #12]
 800c706:	1c43      	adds	r3, r0, #1
 800c708:	d106      	bne.n	800c718 <__sflush_r+0x68>
 800c70a:	6829      	ldr	r1, [r5, #0]
 800c70c:	291d      	cmp	r1, #29
 800c70e:	d846      	bhi.n	800c79e <__sflush_r+0xee>
 800c710:	4b29      	ldr	r3, [pc, #164]	@ (800c7b8 <__sflush_r+0x108>)
 800c712:	40cb      	lsrs	r3, r1
 800c714:	07db      	lsls	r3, r3, #31
 800c716:	d542      	bpl.n	800c79e <__sflush_r+0xee>
 800c718:	2300      	movs	r3, #0
 800c71a:	6063      	str	r3, [r4, #4]
 800c71c:	6923      	ldr	r3, [r4, #16]
 800c71e:	6023      	str	r3, [r4, #0]
 800c720:	04d2      	lsls	r2, r2, #19
 800c722:	d505      	bpl.n	800c730 <__sflush_r+0x80>
 800c724:	1c43      	adds	r3, r0, #1
 800c726:	d102      	bne.n	800c72e <__sflush_r+0x7e>
 800c728:	682b      	ldr	r3, [r5, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d100      	bne.n	800c730 <__sflush_r+0x80>
 800c72e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c730:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c732:	602e      	str	r6, [r5, #0]
 800c734:	2900      	cmp	r1, #0
 800c736:	d017      	beq.n	800c768 <__sflush_r+0xb8>
 800c738:	0023      	movs	r3, r4
 800c73a:	3344      	adds	r3, #68	@ 0x44
 800c73c:	4299      	cmp	r1, r3
 800c73e:	d002      	beq.n	800c746 <__sflush_r+0x96>
 800c740:	0028      	movs	r0, r5
 800c742:	f7ff fa07 	bl	800bb54 <_free_r>
 800c746:	2300      	movs	r3, #0
 800c748:	6363      	str	r3, [r4, #52]	@ 0x34
 800c74a:	e00d      	b.n	800c768 <__sflush_r+0xb8>
 800c74c:	2301      	movs	r3, #1
 800c74e:	0028      	movs	r0, r5
 800c750:	47b8      	blx	r7
 800c752:	0002      	movs	r2, r0
 800c754:	1c43      	adds	r3, r0, #1
 800c756:	d1c6      	bne.n	800c6e6 <__sflush_r+0x36>
 800c758:	682b      	ldr	r3, [r5, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d0c3      	beq.n	800c6e6 <__sflush_r+0x36>
 800c75e:	2b1d      	cmp	r3, #29
 800c760:	d001      	beq.n	800c766 <__sflush_r+0xb6>
 800c762:	2b16      	cmp	r3, #22
 800c764:	d11a      	bne.n	800c79c <__sflush_r+0xec>
 800c766:	602e      	str	r6, [r5, #0]
 800c768:	2000      	movs	r0, #0
 800c76a:	e01e      	b.n	800c7aa <__sflush_r+0xfa>
 800c76c:	690e      	ldr	r6, [r1, #16]
 800c76e:	2e00      	cmp	r6, #0
 800c770:	d0fa      	beq.n	800c768 <__sflush_r+0xb8>
 800c772:	680f      	ldr	r7, [r1, #0]
 800c774:	600e      	str	r6, [r1, #0]
 800c776:	1bba      	subs	r2, r7, r6
 800c778:	9201      	str	r2, [sp, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	079b      	lsls	r3, r3, #30
 800c77e:	d100      	bne.n	800c782 <__sflush_r+0xd2>
 800c780:	694a      	ldr	r2, [r1, #20]
 800c782:	60a2      	str	r2, [r4, #8]
 800c784:	9b01      	ldr	r3, [sp, #4]
 800c786:	2b00      	cmp	r3, #0
 800c788:	ddee      	ble.n	800c768 <__sflush_r+0xb8>
 800c78a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c78c:	0032      	movs	r2, r6
 800c78e:	001f      	movs	r7, r3
 800c790:	0028      	movs	r0, r5
 800c792:	9b01      	ldr	r3, [sp, #4]
 800c794:	6a21      	ldr	r1, [r4, #32]
 800c796:	47b8      	blx	r7
 800c798:	2800      	cmp	r0, #0
 800c79a:	dc07      	bgt.n	800c7ac <__sflush_r+0xfc>
 800c79c:	89a2      	ldrh	r2, [r4, #12]
 800c79e:	2340      	movs	r3, #64	@ 0x40
 800c7a0:	2001      	movs	r0, #1
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	b21b      	sxth	r3, r3
 800c7a6:	81a3      	strh	r3, [r4, #12]
 800c7a8:	4240      	negs	r0, r0
 800c7aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c7ac:	9b01      	ldr	r3, [sp, #4]
 800c7ae:	1836      	adds	r6, r6, r0
 800c7b0:	1a1b      	subs	r3, r3, r0
 800c7b2:	9301      	str	r3, [sp, #4]
 800c7b4:	e7e6      	b.n	800c784 <__sflush_r+0xd4>
 800c7b6:	46c0      	nop			@ (mov r8, r8)
 800c7b8:	20400001 	.word	0x20400001

0800c7bc <_fflush_r>:
 800c7bc:	690b      	ldr	r3, [r1, #16]
 800c7be:	b570      	push	{r4, r5, r6, lr}
 800c7c0:	0005      	movs	r5, r0
 800c7c2:	000c      	movs	r4, r1
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d102      	bne.n	800c7ce <_fflush_r+0x12>
 800c7c8:	2500      	movs	r5, #0
 800c7ca:	0028      	movs	r0, r5
 800c7cc:	bd70      	pop	{r4, r5, r6, pc}
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d004      	beq.n	800c7dc <_fflush_r+0x20>
 800c7d2:	6a03      	ldr	r3, [r0, #32]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <_fflush_r+0x20>
 800c7d8:	f7fe f9e4 	bl	800aba4 <__sinit>
 800c7dc:	220c      	movs	r2, #12
 800c7de:	5ea3      	ldrsh	r3, [r4, r2]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d0f1      	beq.n	800c7c8 <_fflush_r+0xc>
 800c7e4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c7e6:	07d2      	lsls	r2, r2, #31
 800c7e8:	d404      	bmi.n	800c7f4 <_fflush_r+0x38>
 800c7ea:	059b      	lsls	r3, r3, #22
 800c7ec:	d402      	bmi.n	800c7f4 <_fflush_r+0x38>
 800c7ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c7f0:	f7fe faef 	bl	800add2 <__retarget_lock_acquire_recursive>
 800c7f4:	0028      	movs	r0, r5
 800c7f6:	0021      	movs	r1, r4
 800c7f8:	f7ff ff5a 	bl	800c6b0 <__sflush_r>
 800c7fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c7fe:	0005      	movs	r5, r0
 800c800:	07db      	lsls	r3, r3, #31
 800c802:	d4e2      	bmi.n	800c7ca <_fflush_r+0xe>
 800c804:	89a3      	ldrh	r3, [r4, #12]
 800c806:	059b      	lsls	r3, r3, #22
 800c808:	d4df      	bmi.n	800c7ca <_fflush_r+0xe>
 800c80a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c80c:	f7fe fae2 	bl	800add4 <__retarget_lock_release_recursive>
 800c810:	e7db      	b.n	800c7ca <_fflush_r+0xe>
	...

0800c814 <__malloc_lock>:
 800c814:	b510      	push	{r4, lr}
 800c816:	4802      	ldr	r0, [pc, #8]	@ (800c820 <__malloc_lock+0xc>)
 800c818:	f7fe fadb 	bl	800add2 <__retarget_lock_acquire_recursive>
 800c81c:	bd10      	pop	{r4, pc}
 800c81e:	46c0      	nop			@ (mov r8, r8)
 800c820:	20000538 	.word	0x20000538

0800c824 <__malloc_unlock>:
 800c824:	b510      	push	{r4, lr}
 800c826:	4802      	ldr	r0, [pc, #8]	@ (800c830 <__malloc_unlock+0xc>)
 800c828:	f7fe fad4 	bl	800add4 <__retarget_lock_release_recursive>
 800c82c:	bd10      	pop	{r4, pc}
 800c82e:	46c0      	nop			@ (mov r8, r8)
 800c830:	20000538 	.word	0x20000538

0800c834 <_Balloc>:
 800c834:	b570      	push	{r4, r5, r6, lr}
 800c836:	69c5      	ldr	r5, [r0, #28]
 800c838:	0006      	movs	r6, r0
 800c83a:	000c      	movs	r4, r1
 800c83c:	2d00      	cmp	r5, #0
 800c83e:	d10e      	bne.n	800c85e <_Balloc+0x2a>
 800c840:	2010      	movs	r0, #16
 800c842:	f7ff fcef 	bl	800c224 <malloc>
 800c846:	1e02      	subs	r2, r0, #0
 800c848:	61f0      	str	r0, [r6, #28]
 800c84a:	d104      	bne.n	800c856 <_Balloc+0x22>
 800c84c:	216b      	movs	r1, #107	@ 0x6b
 800c84e:	4b19      	ldr	r3, [pc, #100]	@ (800c8b4 <_Balloc+0x80>)
 800c850:	4819      	ldr	r0, [pc, #100]	@ (800c8b8 <_Balloc+0x84>)
 800c852:	f7fe faeb 	bl	800ae2c <__assert_func>
 800c856:	6045      	str	r5, [r0, #4]
 800c858:	6085      	str	r5, [r0, #8]
 800c85a:	6005      	str	r5, [r0, #0]
 800c85c:	60c5      	str	r5, [r0, #12]
 800c85e:	69f5      	ldr	r5, [r6, #28]
 800c860:	68eb      	ldr	r3, [r5, #12]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d013      	beq.n	800c88e <_Balloc+0x5a>
 800c866:	69f3      	ldr	r3, [r6, #28]
 800c868:	00a2      	lsls	r2, r4, #2
 800c86a:	68db      	ldr	r3, [r3, #12]
 800c86c:	189b      	adds	r3, r3, r2
 800c86e:	6818      	ldr	r0, [r3, #0]
 800c870:	2800      	cmp	r0, #0
 800c872:	d118      	bne.n	800c8a6 <_Balloc+0x72>
 800c874:	2101      	movs	r1, #1
 800c876:	000d      	movs	r5, r1
 800c878:	40a5      	lsls	r5, r4
 800c87a:	1d6a      	adds	r2, r5, #5
 800c87c:	0030      	movs	r0, r6
 800c87e:	0092      	lsls	r2, r2, #2
 800c880:	f000 fd31 	bl	800d2e6 <_calloc_r>
 800c884:	2800      	cmp	r0, #0
 800c886:	d00c      	beq.n	800c8a2 <_Balloc+0x6e>
 800c888:	6044      	str	r4, [r0, #4]
 800c88a:	6085      	str	r5, [r0, #8]
 800c88c:	e00d      	b.n	800c8aa <_Balloc+0x76>
 800c88e:	2221      	movs	r2, #33	@ 0x21
 800c890:	2104      	movs	r1, #4
 800c892:	0030      	movs	r0, r6
 800c894:	f000 fd27 	bl	800d2e6 <_calloc_r>
 800c898:	69f3      	ldr	r3, [r6, #28]
 800c89a:	60e8      	str	r0, [r5, #12]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1e1      	bne.n	800c866 <_Balloc+0x32>
 800c8a2:	2000      	movs	r0, #0
 800c8a4:	bd70      	pop	{r4, r5, r6, pc}
 800c8a6:	6802      	ldr	r2, [r0, #0]
 800c8a8:	601a      	str	r2, [r3, #0]
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	6103      	str	r3, [r0, #16]
 800c8ae:	60c3      	str	r3, [r0, #12]
 800c8b0:	e7f8      	b.n	800c8a4 <_Balloc+0x70>
 800c8b2:	46c0      	nop			@ (mov r8, r8)
 800c8b4:	0800e0ca 	.word	0x0800e0ca
 800c8b8:	0800e219 	.word	0x0800e219

0800c8bc <_Bfree>:
 800c8bc:	b570      	push	{r4, r5, r6, lr}
 800c8be:	69c6      	ldr	r6, [r0, #28]
 800c8c0:	0005      	movs	r5, r0
 800c8c2:	000c      	movs	r4, r1
 800c8c4:	2e00      	cmp	r6, #0
 800c8c6:	d10e      	bne.n	800c8e6 <_Bfree+0x2a>
 800c8c8:	2010      	movs	r0, #16
 800c8ca:	f7ff fcab 	bl	800c224 <malloc>
 800c8ce:	1e02      	subs	r2, r0, #0
 800c8d0:	61e8      	str	r0, [r5, #28]
 800c8d2:	d104      	bne.n	800c8de <_Bfree+0x22>
 800c8d4:	218f      	movs	r1, #143	@ 0x8f
 800c8d6:	4b09      	ldr	r3, [pc, #36]	@ (800c8fc <_Bfree+0x40>)
 800c8d8:	4809      	ldr	r0, [pc, #36]	@ (800c900 <_Bfree+0x44>)
 800c8da:	f7fe faa7 	bl	800ae2c <__assert_func>
 800c8de:	6046      	str	r6, [r0, #4]
 800c8e0:	6086      	str	r6, [r0, #8]
 800c8e2:	6006      	str	r6, [r0, #0]
 800c8e4:	60c6      	str	r6, [r0, #12]
 800c8e6:	2c00      	cmp	r4, #0
 800c8e8:	d007      	beq.n	800c8fa <_Bfree+0x3e>
 800c8ea:	69eb      	ldr	r3, [r5, #28]
 800c8ec:	6862      	ldr	r2, [r4, #4]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	0092      	lsls	r2, r2, #2
 800c8f2:	189b      	adds	r3, r3, r2
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	6022      	str	r2, [r4, #0]
 800c8f8:	601c      	str	r4, [r3, #0]
 800c8fa:	bd70      	pop	{r4, r5, r6, pc}
 800c8fc:	0800e0ca 	.word	0x0800e0ca
 800c900:	0800e219 	.word	0x0800e219

0800c904 <__multadd>:
 800c904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c906:	000f      	movs	r7, r1
 800c908:	9001      	str	r0, [sp, #4]
 800c90a:	000c      	movs	r4, r1
 800c90c:	001e      	movs	r6, r3
 800c90e:	2000      	movs	r0, #0
 800c910:	690d      	ldr	r5, [r1, #16]
 800c912:	3714      	adds	r7, #20
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	3001      	adds	r0, #1
 800c918:	b299      	uxth	r1, r3
 800c91a:	4351      	muls	r1, r2
 800c91c:	0c1b      	lsrs	r3, r3, #16
 800c91e:	4353      	muls	r3, r2
 800c920:	1989      	adds	r1, r1, r6
 800c922:	0c0e      	lsrs	r6, r1, #16
 800c924:	199b      	adds	r3, r3, r6
 800c926:	0c1e      	lsrs	r6, r3, #16
 800c928:	b289      	uxth	r1, r1
 800c92a:	041b      	lsls	r3, r3, #16
 800c92c:	185b      	adds	r3, r3, r1
 800c92e:	c708      	stmia	r7!, {r3}
 800c930:	4285      	cmp	r5, r0
 800c932:	dcef      	bgt.n	800c914 <__multadd+0x10>
 800c934:	2e00      	cmp	r6, #0
 800c936:	d022      	beq.n	800c97e <__multadd+0x7a>
 800c938:	68a3      	ldr	r3, [r4, #8]
 800c93a:	42ab      	cmp	r3, r5
 800c93c:	dc19      	bgt.n	800c972 <__multadd+0x6e>
 800c93e:	6861      	ldr	r1, [r4, #4]
 800c940:	9801      	ldr	r0, [sp, #4]
 800c942:	3101      	adds	r1, #1
 800c944:	f7ff ff76 	bl	800c834 <_Balloc>
 800c948:	1e07      	subs	r7, r0, #0
 800c94a:	d105      	bne.n	800c958 <__multadd+0x54>
 800c94c:	003a      	movs	r2, r7
 800c94e:	21ba      	movs	r1, #186	@ 0xba
 800c950:	4b0c      	ldr	r3, [pc, #48]	@ (800c984 <__multadd+0x80>)
 800c952:	480d      	ldr	r0, [pc, #52]	@ (800c988 <__multadd+0x84>)
 800c954:	f7fe fa6a 	bl	800ae2c <__assert_func>
 800c958:	0021      	movs	r1, r4
 800c95a:	6922      	ldr	r2, [r4, #16]
 800c95c:	310c      	adds	r1, #12
 800c95e:	3202      	adds	r2, #2
 800c960:	0092      	lsls	r2, r2, #2
 800c962:	300c      	adds	r0, #12
 800c964:	f7fe fa59 	bl	800ae1a <memcpy>
 800c968:	0021      	movs	r1, r4
 800c96a:	9801      	ldr	r0, [sp, #4]
 800c96c:	f7ff ffa6 	bl	800c8bc <_Bfree>
 800c970:	003c      	movs	r4, r7
 800c972:	1d2b      	adds	r3, r5, #4
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	18e3      	adds	r3, r4, r3
 800c978:	3501      	adds	r5, #1
 800c97a:	605e      	str	r6, [r3, #4]
 800c97c:	6125      	str	r5, [r4, #16]
 800c97e:	0020      	movs	r0, r4
 800c980:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c982:	46c0      	nop			@ (mov r8, r8)
 800c984:	0800e1dc 	.word	0x0800e1dc
 800c988:	0800e219 	.word	0x0800e219

0800c98c <__hi0bits>:
 800c98c:	2280      	movs	r2, #128	@ 0x80
 800c98e:	0003      	movs	r3, r0
 800c990:	0252      	lsls	r2, r2, #9
 800c992:	2000      	movs	r0, #0
 800c994:	4293      	cmp	r3, r2
 800c996:	d201      	bcs.n	800c99c <__hi0bits+0x10>
 800c998:	041b      	lsls	r3, r3, #16
 800c99a:	3010      	adds	r0, #16
 800c99c:	2280      	movs	r2, #128	@ 0x80
 800c99e:	0452      	lsls	r2, r2, #17
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d201      	bcs.n	800c9a8 <__hi0bits+0x1c>
 800c9a4:	3008      	adds	r0, #8
 800c9a6:	021b      	lsls	r3, r3, #8
 800c9a8:	2280      	movs	r2, #128	@ 0x80
 800c9aa:	0552      	lsls	r2, r2, #21
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d201      	bcs.n	800c9b4 <__hi0bits+0x28>
 800c9b0:	3004      	adds	r0, #4
 800c9b2:	011b      	lsls	r3, r3, #4
 800c9b4:	2280      	movs	r2, #128	@ 0x80
 800c9b6:	05d2      	lsls	r2, r2, #23
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d201      	bcs.n	800c9c0 <__hi0bits+0x34>
 800c9bc:	3002      	adds	r0, #2
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	db03      	blt.n	800c9cc <__hi0bits+0x40>
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	4213      	tst	r3, r2
 800c9c8:	d100      	bne.n	800c9cc <__hi0bits+0x40>
 800c9ca:	2020      	movs	r0, #32
 800c9cc:	4770      	bx	lr

0800c9ce <__lo0bits>:
 800c9ce:	6803      	ldr	r3, [r0, #0]
 800c9d0:	0001      	movs	r1, r0
 800c9d2:	2207      	movs	r2, #7
 800c9d4:	0018      	movs	r0, r3
 800c9d6:	4010      	ands	r0, r2
 800c9d8:	4213      	tst	r3, r2
 800c9da:	d00d      	beq.n	800c9f8 <__lo0bits+0x2a>
 800c9dc:	3a06      	subs	r2, #6
 800c9de:	2000      	movs	r0, #0
 800c9e0:	4213      	tst	r3, r2
 800c9e2:	d105      	bne.n	800c9f0 <__lo0bits+0x22>
 800c9e4:	3002      	adds	r0, #2
 800c9e6:	4203      	tst	r3, r0
 800c9e8:	d003      	beq.n	800c9f2 <__lo0bits+0x24>
 800c9ea:	40d3      	lsrs	r3, r2
 800c9ec:	0010      	movs	r0, r2
 800c9ee:	600b      	str	r3, [r1, #0]
 800c9f0:	4770      	bx	lr
 800c9f2:	089b      	lsrs	r3, r3, #2
 800c9f4:	600b      	str	r3, [r1, #0]
 800c9f6:	e7fb      	b.n	800c9f0 <__lo0bits+0x22>
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	2a00      	cmp	r2, #0
 800c9fc:	d101      	bne.n	800ca02 <__lo0bits+0x34>
 800c9fe:	2010      	movs	r0, #16
 800ca00:	0c1b      	lsrs	r3, r3, #16
 800ca02:	b2da      	uxtb	r2, r3
 800ca04:	2a00      	cmp	r2, #0
 800ca06:	d101      	bne.n	800ca0c <__lo0bits+0x3e>
 800ca08:	3008      	adds	r0, #8
 800ca0a:	0a1b      	lsrs	r3, r3, #8
 800ca0c:	071a      	lsls	r2, r3, #28
 800ca0e:	d101      	bne.n	800ca14 <__lo0bits+0x46>
 800ca10:	3004      	adds	r0, #4
 800ca12:	091b      	lsrs	r3, r3, #4
 800ca14:	079a      	lsls	r2, r3, #30
 800ca16:	d101      	bne.n	800ca1c <__lo0bits+0x4e>
 800ca18:	3002      	adds	r0, #2
 800ca1a:	089b      	lsrs	r3, r3, #2
 800ca1c:	07da      	lsls	r2, r3, #31
 800ca1e:	d4e9      	bmi.n	800c9f4 <__lo0bits+0x26>
 800ca20:	3001      	adds	r0, #1
 800ca22:	085b      	lsrs	r3, r3, #1
 800ca24:	d1e6      	bne.n	800c9f4 <__lo0bits+0x26>
 800ca26:	2020      	movs	r0, #32
 800ca28:	e7e2      	b.n	800c9f0 <__lo0bits+0x22>
	...

0800ca2c <__i2b>:
 800ca2c:	b510      	push	{r4, lr}
 800ca2e:	000c      	movs	r4, r1
 800ca30:	2101      	movs	r1, #1
 800ca32:	f7ff feff 	bl	800c834 <_Balloc>
 800ca36:	2800      	cmp	r0, #0
 800ca38:	d107      	bne.n	800ca4a <__i2b+0x1e>
 800ca3a:	2146      	movs	r1, #70	@ 0x46
 800ca3c:	4c05      	ldr	r4, [pc, #20]	@ (800ca54 <__i2b+0x28>)
 800ca3e:	0002      	movs	r2, r0
 800ca40:	4b05      	ldr	r3, [pc, #20]	@ (800ca58 <__i2b+0x2c>)
 800ca42:	0020      	movs	r0, r4
 800ca44:	31ff      	adds	r1, #255	@ 0xff
 800ca46:	f7fe f9f1 	bl	800ae2c <__assert_func>
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	6144      	str	r4, [r0, #20]
 800ca4e:	6103      	str	r3, [r0, #16]
 800ca50:	bd10      	pop	{r4, pc}
 800ca52:	46c0      	nop			@ (mov r8, r8)
 800ca54:	0800e219 	.word	0x0800e219
 800ca58:	0800e1dc 	.word	0x0800e1dc

0800ca5c <__multiply>:
 800ca5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca5e:	0014      	movs	r4, r2
 800ca60:	690a      	ldr	r2, [r1, #16]
 800ca62:	6923      	ldr	r3, [r4, #16]
 800ca64:	000d      	movs	r5, r1
 800ca66:	b089      	sub	sp, #36	@ 0x24
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	db02      	blt.n	800ca72 <__multiply+0x16>
 800ca6c:	0023      	movs	r3, r4
 800ca6e:	000c      	movs	r4, r1
 800ca70:	001d      	movs	r5, r3
 800ca72:	6927      	ldr	r7, [r4, #16]
 800ca74:	692e      	ldr	r6, [r5, #16]
 800ca76:	6861      	ldr	r1, [r4, #4]
 800ca78:	19bb      	adds	r3, r7, r6
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	68a3      	ldr	r3, [r4, #8]
 800ca7e:	19ba      	adds	r2, r7, r6
 800ca80:	4293      	cmp	r3, r2
 800ca82:	da00      	bge.n	800ca86 <__multiply+0x2a>
 800ca84:	3101      	adds	r1, #1
 800ca86:	f7ff fed5 	bl	800c834 <_Balloc>
 800ca8a:	4684      	mov	ip, r0
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d106      	bne.n	800ca9e <__multiply+0x42>
 800ca90:	21b1      	movs	r1, #177	@ 0xb1
 800ca92:	4662      	mov	r2, ip
 800ca94:	4b44      	ldr	r3, [pc, #272]	@ (800cba8 <__multiply+0x14c>)
 800ca96:	4845      	ldr	r0, [pc, #276]	@ (800cbac <__multiply+0x150>)
 800ca98:	0049      	lsls	r1, r1, #1
 800ca9a:	f7fe f9c7 	bl	800ae2c <__assert_func>
 800ca9e:	0002      	movs	r2, r0
 800caa0:	19bb      	adds	r3, r7, r6
 800caa2:	3214      	adds	r2, #20
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	18d3      	adds	r3, r2, r3
 800caa8:	9301      	str	r3, [sp, #4]
 800caaa:	2100      	movs	r1, #0
 800caac:	0013      	movs	r3, r2
 800caae:	9801      	ldr	r0, [sp, #4]
 800cab0:	4283      	cmp	r3, r0
 800cab2:	d328      	bcc.n	800cb06 <__multiply+0xaa>
 800cab4:	0023      	movs	r3, r4
 800cab6:	00bf      	lsls	r7, r7, #2
 800cab8:	3314      	adds	r3, #20
 800caba:	9304      	str	r3, [sp, #16]
 800cabc:	3514      	adds	r5, #20
 800cabe:	19db      	adds	r3, r3, r7
 800cac0:	00b6      	lsls	r6, r6, #2
 800cac2:	9302      	str	r3, [sp, #8]
 800cac4:	19ab      	adds	r3, r5, r6
 800cac6:	9307      	str	r3, [sp, #28]
 800cac8:	2304      	movs	r3, #4
 800caca:	9305      	str	r3, [sp, #20]
 800cacc:	0023      	movs	r3, r4
 800cace:	9902      	ldr	r1, [sp, #8]
 800cad0:	3315      	adds	r3, #21
 800cad2:	4299      	cmp	r1, r3
 800cad4:	d305      	bcc.n	800cae2 <__multiply+0x86>
 800cad6:	1b0c      	subs	r4, r1, r4
 800cad8:	3c15      	subs	r4, #21
 800cada:	08a4      	lsrs	r4, r4, #2
 800cadc:	3401      	adds	r4, #1
 800cade:	00a3      	lsls	r3, r4, #2
 800cae0:	9305      	str	r3, [sp, #20]
 800cae2:	9b07      	ldr	r3, [sp, #28]
 800cae4:	429d      	cmp	r5, r3
 800cae6:	d310      	bcc.n	800cb0a <__multiply+0xae>
 800cae8:	9b00      	ldr	r3, [sp, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	dd05      	ble.n	800cafa <__multiply+0x9e>
 800caee:	9b01      	ldr	r3, [sp, #4]
 800caf0:	3b04      	subs	r3, #4
 800caf2:	9301      	str	r3, [sp, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d052      	beq.n	800cba0 <__multiply+0x144>
 800cafa:	4663      	mov	r3, ip
 800cafc:	4660      	mov	r0, ip
 800cafe:	9a00      	ldr	r2, [sp, #0]
 800cb00:	611a      	str	r2, [r3, #16]
 800cb02:	b009      	add	sp, #36	@ 0x24
 800cb04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb06:	c302      	stmia	r3!, {r1}
 800cb08:	e7d1      	b.n	800caae <__multiply+0x52>
 800cb0a:	682c      	ldr	r4, [r5, #0]
 800cb0c:	b2a4      	uxth	r4, r4
 800cb0e:	2c00      	cmp	r4, #0
 800cb10:	d01f      	beq.n	800cb52 <__multiply+0xf6>
 800cb12:	2300      	movs	r3, #0
 800cb14:	0017      	movs	r7, r2
 800cb16:	9e04      	ldr	r6, [sp, #16]
 800cb18:	9303      	str	r3, [sp, #12]
 800cb1a:	ce08      	ldmia	r6!, {r3}
 800cb1c:	6839      	ldr	r1, [r7, #0]
 800cb1e:	9306      	str	r3, [sp, #24]
 800cb20:	466b      	mov	r3, sp
 800cb22:	8b1b      	ldrh	r3, [r3, #24]
 800cb24:	b288      	uxth	r0, r1
 800cb26:	4363      	muls	r3, r4
 800cb28:	181b      	adds	r3, r3, r0
 800cb2a:	9803      	ldr	r0, [sp, #12]
 800cb2c:	0c09      	lsrs	r1, r1, #16
 800cb2e:	181b      	adds	r3, r3, r0
 800cb30:	9806      	ldr	r0, [sp, #24]
 800cb32:	0c00      	lsrs	r0, r0, #16
 800cb34:	4360      	muls	r0, r4
 800cb36:	1840      	adds	r0, r0, r1
 800cb38:	0c19      	lsrs	r1, r3, #16
 800cb3a:	1841      	adds	r1, r0, r1
 800cb3c:	0c08      	lsrs	r0, r1, #16
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	0409      	lsls	r1, r1, #16
 800cb42:	4319      	orrs	r1, r3
 800cb44:	9b02      	ldr	r3, [sp, #8]
 800cb46:	9003      	str	r0, [sp, #12]
 800cb48:	c702      	stmia	r7!, {r1}
 800cb4a:	42b3      	cmp	r3, r6
 800cb4c:	d8e5      	bhi.n	800cb1a <__multiply+0xbe>
 800cb4e:	9b05      	ldr	r3, [sp, #20]
 800cb50:	50d0      	str	r0, [r2, r3]
 800cb52:	682c      	ldr	r4, [r5, #0]
 800cb54:	0c24      	lsrs	r4, r4, #16
 800cb56:	d020      	beq.n	800cb9a <__multiply+0x13e>
 800cb58:	2100      	movs	r1, #0
 800cb5a:	0010      	movs	r0, r2
 800cb5c:	6813      	ldr	r3, [r2, #0]
 800cb5e:	9e04      	ldr	r6, [sp, #16]
 800cb60:	9103      	str	r1, [sp, #12]
 800cb62:	6831      	ldr	r1, [r6, #0]
 800cb64:	6807      	ldr	r7, [r0, #0]
 800cb66:	b289      	uxth	r1, r1
 800cb68:	4361      	muls	r1, r4
 800cb6a:	0c3f      	lsrs	r7, r7, #16
 800cb6c:	19c9      	adds	r1, r1, r7
 800cb6e:	9f03      	ldr	r7, [sp, #12]
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	19c9      	adds	r1, r1, r7
 800cb74:	040f      	lsls	r7, r1, #16
 800cb76:	431f      	orrs	r7, r3
 800cb78:	6007      	str	r7, [r0, #0]
 800cb7a:	ce80      	ldmia	r6!, {r7}
 800cb7c:	6843      	ldr	r3, [r0, #4]
 800cb7e:	0c3f      	lsrs	r7, r7, #16
 800cb80:	4367      	muls	r7, r4
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	0c09      	lsrs	r1, r1, #16
 800cb86:	18fb      	adds	r3, r7, r3
 800cb88:	185b      	adds	r3, r3, r1
 800cb8a:	0c19      	lsrs	r1, r3, #16
 800cb8c:	9103      	str	r1, [sp, #12]
 800cb8e:	9902      	ldr	r1, [sp, #8]
 800cb90:	3004      	adds	r0, #4
 800cb92:	42b1      	cmp	r1, r6
 800cb94:	d8e5      	bhi.n	800cb62 <__multiply+0x106>
 800cb96:	9905      	ldr	r1, [sp, #20]
 800cb98:	5053      	str	r3, [r2, r1]
 800cb9a:	3504      	adds	r5, #4
 800cb9c:	3204      	adds	r2, #4
 800cb9e:	e7a0      	b.n	800cae2 <__multiply+0x86>
 800cba0:	9b00      	ldr	r3, [sp, #0]
 800cba2:	3b01      	subs	r3, #1
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	e79f      	b.n	800cae8 <__multiply+0x8c>
 800cba8:	0800e1dc 	.word	0x0800e1dc
 800cbac:	0800e219 	.word	0x0800e219

0800cbb0 <__pow5mult>:
 800cbb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	0015      	movs	r5, r2
 800cbb6:	0007      	movs	r7, r0
 800cbb8:	000e      	movs	r6, r1
 800cbba:	401a      	ands	r2, r3
 800cbbc:	421d      	tst	r5, r3
 800cbbe:	d008      	beq.n	800cbd2 <__pow5mult+0x22>
 800cbc0:	4925      	ldr	r1, [pc, #148]	@ (800cc58 <__pow5mult+0xa8>)
 800cbc2:	3a01      	subs	r2, #1
 800cbc4:	0092      	lsls	r2, r2, #2
 800cbc6:	5852      	ldr	r2, [r2, r1]
 800cbc8:	2300      	movs	r3, #0
 800cbca:	0031      	movs	r1, r6
 800cbcc:	f7ff fe9a 	bl	800c904 <__multadd>
 800cbd0:	0006      	movs	r6, r0
 800cbd2:	10ad      	asrs	r5, r5, #2
 800cbd4:	d03d      	beq.n	800cc52 <__pow5mult+0xa2>
 800cbd6:	69fc      	ldr	r4, [r7, #28]
 800cbd8:	2c00      	cmp	r4, #0
 800cbda:	d10f      	bne.n	800cbfc <__pow5mult+0x4c>
 800cbdc:	2010      	movs	r0, #16
 800cbde:	f7ff fb21 	bl	800c224 <malloc>
 800cbe2:	1e02      	subs	r2, r0, #0
 800cbe4:	61f8      	str	r0, [r7, #28]
 800cbe6:	d105      	bne.n	800cbf4 <__pow5mult+0x44>
 800cbe8:	21b4      	movs	r1, #180	@ 0xb4
 800cbea:	4b1c      	ldr	r3, [pc, #112]	@ (800cc5c <__pow5mult+0xac>)
 800cbec:	481c      	ldr	r0, [pc, #112]	@ (800cc60 <__pow5mult+0xb0>)
 800cbee:	31ff      	adds	r1, #255	@ 0xff
 800cbf0:	f7fe f91c 	bl	800ae2c <__assert_func>
 800cbf4:	6044      	str	r4, [r0, #4]
 800cbf6:	6084      	str	r4, [r0, #8]
 800cbf8:	6004      	str	r4, [r0, #0]
 800cbfa:	60c4      	str	r4, [r0, #12]
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	689c      	ldr	r4, [r3, #8]
 800cc00:	9301      	str	r3, [sp, #4]
 800cc02:	2c00      	cmp	r4, #0
 800cc04:	d108      	bne.n	800cc18 <__pow5mult+0x68>
 800cc06:	0038      	movs	r0, r7
 800cc08:	4916      	ldr	r1, [pc, #88]	@ (800cc64 <__pow5mult+0xb4>)
 800cc0a:	f7ff ff0f 	bl	800ca2c <__i2b>
 800cc0e:	9b01      	ldr	r3, [sp, #4]
 800cc10:	0004      	movs	r4, r0
 800cc12:	6098      	str	r0, [r3, #8]
 800cc14:	2300      	movs	r3, #0
 800cc16:	6003      	str	r3, [r0, #0]
 800cc18:	2301      	movs	r3, #1
 800cc1a:	421d      	tst	r5, r3
 800cc1c:	d00a      	beq.n	800cc34 <__pow5mult+0x84>
 800cc1e:	0031      	movs	r1, r6
 800cc20:	0022      	movs	r2, r4
 800cc22:	0038      	movs	r0, r7
 800cc24:	f7ff ff1a 	bl	800ca5c <__multiply>
 800cc28:	0031      	movs	r1, r6
 800cc2a:	9001      	str	r0, [sp, #4]
 800cc2c:	0038      	movs	r0, r7
 800cc2e:	f7ff fe45 	bl	800c8bc <_Bfree>
 800cc32:	9e01      	ldr	r6, [sp, #4]
 800cc34:	106d      	asrs	r5, r5, #1
 800cc36:	d00c      	beq.n	800cc52 <__pow5mult+0xa2>
 800cc38:	6820      	ldr	r0, [r4, #0]
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d107      	bne.n	800cc4e <__pow5mult+0x9e>
 800cc3e:	0022      	movs	r2, r4
 800cc40:	0021      	movs	r1, r4
 800cc42:	0038      	movs	r0, r7
 800cc44:	f7ff ff0a 	bl	800ca5c <__multiply>
 800cc48:	2300      	movs	r3, #0
 800cc4a:	6020      	str	r0, [r4, #0]
 800cc4c:	6003      	str	r3, [r0, #0]
 800cc4e:	0004      	movs	r4, r0
 800cc50:	e7e2      	b.n	800cc18 <__pow5mult+0x68>
 800cc52:	0030      	movs	r0, r6
 800cc54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc56:	46c0      	nop			@ (mov r8, r8)
 800cc58:	0800e27c 	.word	0x0800e27c
 800cc5c:	0800e0ca 	.word	0x0800e0ca
 800cc60:	0800e219 	.word	0x0800e219
 800cc64:	00000271 	.word	0x00000271

0800cc68 <__lshift>:
 800cc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc6a:	000c      	movs	r4, r1
 800cc6c:	0016      	movs	r6, r2
 800cc6e:	6923      	ldr	r3, [r4, #16]
 800cc70:	1157      	asrs	r7, r2, #5
 800cc72:	b085      	sub	sp, #20
 800cc74:	18fb      	adds	r3, r7, r3
 800cc76:	9301      	str	r3, [sp, #4]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	6849      	ldr	r1, [r1, #4]
 800cc7e:	68a3      	ldr	r3, [r4, #8]
 800cc80:	9002      	str	r0, [sp, #8]
 800cc82:	9a00      	ldr	r2, [sp, #0]
 800cc84:	4293      	cmp	r3, r2
 800cc86:	db10      	blt.n	800ccaa <__lshift+0x42>
 800cc88:	9802      	ldr	r0, [sp, #8]
 800cc8a:	f7ff fdd3 	bl	800c834 <_Balloc>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	0001      	movs	r1, r0
 800cc92:	0005      	movs	r5, r0
 800cc94:	001a      	movs	r2, r3
 800cc96:	3114      	adds	r1, #20
 800cc98:	4298      	cmp	r0, r3
 800cc9a:	d10c      	bne.n	800ccb6 <__lshift+0x4e>
 800cc9c:	21ef      	movs	r1, #239	@ 0xef
 800cc9e:	002a      	movs	r2, r5
 800cca0:	4b25      	ldr	r3, [pc, #148]	@ (800cd38 <__lshift+0xd0>)
 800cca2:	4826      	ldr	r0, [pc, #152]	@ (800cd3c <__lshift+0xd4>)
 800cca4:	0049      	lsls	r1, r1, #1
 800cca6:	f7fe f8c1 	bl	800ae2c <__assert_func>
 800ccaa:	3101      	adds	r1, #1
 800ccac:	005b      	lsls	r3, r3, #1
 800ccae:	e7e8      	b.n	800cc82 <__lshift+0x1a>
 800ccb0:	0098      	lsls	r0, r3, #2
 800ccb2:	500a      	str	r2, [r1, r0]
 800ccb4:	3301      	adds	r3, #1
 800ccb6:	42bb      	cmp	r3, r7
 800ccb8:	dbfa      	blt.n	800ccb0 <__lshift+0x48>
 800ccba:	43fb      	mvns	r3, r7
 800ccbc:	17db      	asrs	r3, r3, #31
 800ccbe:	401f      	ands	r7, r3
 800ccc0:	00bf      	lsls	r7, r7, #2
 800ccc2:	0023      	movs	r3, r4
 800ccc4:	201f      	movs	r0, #31
 800ccc6:	19c9      	adds	r1, r1, r7
 800ccc8:	0037      	movs	r7, r6
 800ccca:	6922      	ldr	r2, [r4, #16]
 800cccc:	3314      	adds	r3, #20
 800ccce:	0092      	lsls	r2, r2, #2
 800ccd0:	189a      	adds	r2, r3, r2
 800ccd2:	4007      	ands	r7, r0
 800ccd4:	4206      	tst	r6, r0
 800ccd6:	d029      	beq.n	800cd2c <__lshift+0xc4>
 800ccd8:	3001      	adds	r0, #1
 800ccda:	1bc0      	subs	r0, r0, r7
 800ccdc:	9003      	str	r0, [sp, #12]
 800ccde:	468c      	mov	ip, r1
 800cce0:	2000      	movs	r0, #0
 800cce2:	681e      	ldr	r6, [r3, #0]
 800cce4:	40be      	lsls	r6, r7
 800cce6:	4306      	orrs	r6, r0
 800cce8:	4660      	mov	r0, ip
 800ccea:	c040      	stmia	r0!, {r6}
 800ccec:	4684      	mov	ip, r0
 800ccee:	9e03      	ldr	r6, [sp, #12]
 800ccf0:	cb01      	ldmia	r3!, {r0}
 800ccf2:	40f0      	lsrs	r0, r6
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d8f4      	bhi.n	800cce2 <__lshift+0x7a>
 800ccf8:	0026      	movs	r6, r4
 800ccfa:	3615      	adds	r6, #21
 800ccfc:	2304      	movs	r3, #4
 800ccfe:	42b2      	cmp	r2, r6
 800cd00:	d304      	bcc.n	800cd0c <__lshift+0xa4>
 800cd02:	1b13      	subs	r3, r2, r4
 800cd04:	3b15      	subs	r3, #21
 800cd06:	089b      	lsrs	r3, r3, #2
 800cd08:	3301      	adds	r3, #1
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	50c8      	str	r0, [r1, r3]
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d002      	beq.n	800cd18 <__lshift+0xb0>
 800cd12:	9b01      	ldr	r3, [sp, #4]
 800cd14:	3302      	adds	r3, #2
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	9b00      	ldr	r3, [sp, #0]
 800cd1a:	9802      	ldr	r0, [sp, #8]
 800cd1c:	3b01      	subs	r3, #1
 800cd1e:	0021      	movs	r1, r4
 800cd20:	612b      	str	r3, [r5, #16]
 800cd22:	f7ff fdcb 	bl	800c8bc <_Bfree>
 800cd26:	0028      	movs	r0, r5
 800cd28:	b005      	add	sp, #20
 800cd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd2c:	cb01      	ldmia	r3!, {r0}
 800cd2e:	c101      	stmia	r1!, {r0}
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d8fb      	bhi.n	800cd2c <__lshift+0xc4>
 800cd34:	e7f0      	b.n	800cd18 <__lshift+0xb0>
 800cd36:	46c0      	nop			@ (mov r8, r8)
 800cd38:	0800e1dc 	.word	0x0800e1dc
 800cd3c:	0800e219 	.word	0x0800e219

0800cd40 <__mcmp>:
 800cd40:	b530      	push	{r4, r5, lr}
 800cd42:	690b      	ldr	r3, [r1, #16]
 800cd44:	6904      	ldr	r4, [r0, #16]
 800cd46:	0002      	movs	r2, r0
 800cd48:	1ae0      	subs	r0, r4, r3
 800cd4a:	429c      	cmp	r4, r3
 800cd4c:	d10f      	bne.n	800cd6e <__mcmp+0x2e>
 800cd4e:	3214      	adds	r2, #20
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	3114      	adds	r1, #20
 800cd54:	0014      	movs	r4, r2
 800cd56:	18c9      	adds	r1, r1, r3
 800cd58:	18d2      	adds	r2, r2, r3
 800cd5a:	3a04      	subs	r2, #4
 800cd5c:	3904      	subs	r1, #4
 800cd5e:	6815      	ldr	r5, [r2, #0]
 800cd60:	680b      	ldr	r3, [r1, #0]
 800cd62:	429d      	cmp	r5, r3
 800cd64:	d004      	beq.n	800cd70 <__mcmp+0x30>
 800cd66:	2001      	movs	r0, #1
 800cd68:	429d      	cmp	r5, r3
 800cd6a:	d200      	bcs.n	800cd6e <__mcmp+0x2e>
 800cd6c:	3802      	subs	r0, #2
 800cd6e:	bd30      	pop	{r4, r5, pc}
 800cd70:	4294      	cmp	r4, r2
 800cd72:	d3f2      	bcc.n	800cd5a <__mcmp+0x1a>
 800cd74:	e7fb      	b.n	800cd6e <__mcmp+0x2e>
	...

0800cd78 <__mdiff>:
 800cd78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd7a:	000c      	movs	r4, r1
 800cd7c:	b087      	sub	sp, #28
 800cd7e:	9000      	str	r0, [sp, #0]
 800cd80:	0011      	movs	r1, r2
 800cd82:	0020      	movs	r0, r4
 800cd84:	0017      	movs	r7, r2
 800cd86:	f7ff ffdb 	bl	800cd40 <__mcmp>
 800cd8a:	1e05      	subs	r5, r0, #0
 800cd8c:	d110      	bne.n	800cdb0 <__mdiff+0x38>
 800cd8e:	0001      	movs	r1, r0
 800cd90:	9800      	ldr	r0, [sp, #0]
 800cd92:	f7ff fd4f 	bl	800c834 <_Balloc>
 800cd96:	1e02      	subs	r2, r0, #0
 800cd98:	d104      	bne.n	800cda4 <__mdiff+0x2c>
 800cd9a:	4b40      	ldr	r3, [pc, #256]	@ (800ce9c <__mdiff+0x124>)
 800cd9c:	4840      	ldr	r0, [pc, #256]	@ (800cea0 <__mdiff+0x128>)
 800cd9e:	4941      	ldr	r1, [pc, #260]	@ (800cea4 <__mdiff+0x12c>)
 800cda0:	f7fe f844 	bl	800ae2c <__assert_func>
 800cda4:	2301      	movs	r3, #1
 800cda6:	6145      	str	r5, [r0, #20]
 800cda8:	6103      	str	r3, [r0, #16]
 800cdaa:	0010      	movs	r0, r2
 800cdac:	b007      	add	sp, #28
 800cdae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdb0:	2600      	movs	r6, #0
 800cdb2:	42b0      	cmp	r0, r6
 800cdb4:	da03      	bge.n	800cdbe <__mdiff+0x46>
 800cdb6:	0023      	movs	r3, r4
 800cdb8:	003c      	movs	r4, r7
 800cdba:	001f      	movs	r7, r3
 800cdbc:	3601      	adds	r6, #1
 800cdbe:	6861      	ldr	r1, [r4, #4]
 800cdc0:	9800      	ldr	r0, [sp, #0]
 800cdc2:	f7ff fd37 	bl	800c834 <_Balloc>
 800cdc6:	1e02      	subs	r2, r0, #0
 800cdc8:	d103      	bne.n	800cdd2 <__mdiff+0x5a>
 800cdca:	4b34      	ldr	r3, [pc, #208]	@ (800ce9c <__mdiff+0x124>)
 800cdcc:	4834      	ldr	r0, [pc, #208]	@ (800cea0 <__mdiff+0x128>)
 800cdce:	4936      	ldr	r1, [pc, #216]	@ (800cea8 <__mdiff+0x130>)
 800cdd0:	e7e6      	b.n	800cda0 <__mdiff+0x28>
 800cdd2:	6923      	ldr	r3, [r4, #16]
 800cdd4:	3414      	adds	r4, #20
 800cdd6:	9300      	str	r3, [sp, #0]
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	18e3      	adds	r3, r4, r3
 800cddc:	0021      	movs	r1, r4
 800cdde:	9401      	str	r4, [sp, #4]
 800cde0:	003c      	movs	r4, r7
 800cde2:	9302      	str	r3, [sp, #8]
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	3414      	adds	r4, #20
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	18e3      	adds	r3, r4, r3
 800cdec:	9303      	str	r3, [sp, #12]
 800cdee:	0003      	movs	r3, r0
 800cdf0:	60c6      	str	r6, [r0, #12]
 800cdf2:	468c      	mov	ip, r1
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	3314      	adds	r3, #20
 800cdf8:	9304      	str	r3, [sp, #16]
 800cdfa:	9305      	str	r3, [sp, #20]
 800cdfc:	4663      	mov	r3, ip
 800cdfe:	cb20      	ldmia	r3!, {r5}
 800ce00:	b2a9      	uxth	r1, r5
 800ce02:	000e      	movs	r6, r1
 800ce04:	469c      	mov	ip, r3
 800ce06:	cc08      	ldmia	r4!, {r3}
 800ce08:	0c2d      	lsrs	r5, r5, #16
 800ce0a:	b299      	uxth	r1, r3
 800ce0c:	1a71      	subs	r1, r6, r1
 800ce0e:	1809      	adds	r1, r1, r0
 800ce10:	0c1b      	lsrs	r3, r3, #16
 800ce12:	1408      	asrs	r0, r1, #16
 800ce14:	1aeb      	subs	r3, r5, r3
 800ce16:	181b      	adds	r3, r3, r0
 800ce18:	1418      	asrs	r0, r3, #16
 800ce1a:	b289      	uxth	r1, r1
 800ce1c:	041b      	lsls	r3, r3, #16
 800ce1e:	4319      	orrs	r1, r3
 800ce20:	9b05      	ldr	r3, [sp, #20]
 800ce22:	c302      	stmia	r3!, {r1}
 800ce24:	9305      	str	r3, [sp, #20]
 800ce26:	9b03      	ldr	r3, [sp, #12]
 800ce28:	42a3      	cmp	r3, r4
 800ce2a:	d8e7      	bhi.n	800cdfc <__mdiff+0x84>
 800ce2c:	0039      	movs	r1, r7
 800ce2e:	9c03      	ldr	r4, [sp, #12]
 800ce30:	3115      	adds	r1, #21
 800ce32:	2304      	movs	r3, #4
 800ce34:	428c      	cmp	r4, r1
 800ce36:	d304      	bcc.n	800ce42 <__mdiff+0xca>
 800ce38:	1be3      	subs	r3, r4, r7
 800ce3a:	3b15      	subs	r3, #21
 800ce3c:	089b      	lsrs	r3, r3, #2
 800ce3e:	3301      	adds	r3, #1
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	9901      	ldr	r1, [sp, #4]
 800ce44:	18cd      	adds	r5, r1, r3
 800ce46:	9904      	ldr	r1, [sp, #16]
 800ce48:	002e      	movs	r6, r5
 800ce4a:	18cb      	adds	r3, r1, r3
 800ce4c:	001f      	movs	r7, r3
 800ce4e:	9902      	ldr	r1, [sp, #8]
 800ce50:	428e      	cmp	r6, r1
 800ce52:	d311      	bcc.n	800ce78 <__mdiff+0x100>
 800ce54:	9c02      	ldr	r4, [sp, #8]
 800ce56:	1ee9      	subs	r1, r5, #3
 800ce58:	2000      	movs	r0, #0
 800ce5a:	428c      	cmp	r4, r1
 800ce5c:	d304      	bcc.n	800ce68 <__mdiff+0xf0>
 800ce5e:	0021      	movs	r1, r4
 800ce60:	3103      	adds	r1, #3
 800ce62:	1b49      	subs	r1, r1, r5
 800ce64:	0889      	lsrs	r1, r1, #2
 800ce66:	0088      	lsls	r0, r1, #2
 800ce68:	181b      	adds	r3, r3, r0
 800ce6a:	3b04      	subs	r3, #4
 800ce6c:	6819      	ldr	r1, [r3, #0]
 800ce6e:	2900      	cmp	r1, #0
 800ce70:	d010      	beq.n	800ce94 <__mdiff+0x11c>
 800ce72:	9b00      	ldr	r3, [sp, #0]
 800ce74:	6113      	str	r3, [r2, #16]
 800ce76:	e798      	b.n	800cdaa <__mdiff+0x32>
 800ce78:	4684      	mov	ip, r0
 800ce7a:	ce02      	ldmia	r6!, {r1}
 800ce7c:	b288      	uxth	r0, r1
 800ce7e:	4460      	add	r0, ip
 800ce80:	1400      	asrs	r0, r0, #16
 800ce82:	0c0c      	lsrs	r4, r1, #16
 800ce84:	1904      	adds	r4, r0, r4
 800ce86:	4461      	add	r1, ip
 800ce88:	1420      	asrs	r0, r4, #16
 800ce8a:	b289      	uxth	r1, r1
 800ce8c:	0424      	lsls	r4, r4, #16
 800ce8e:	4321      	orrs	r1, r4
 800ce90:	c702      	stmia	r7!, {r1}
 800ce92:	e7dc      	b.n	800ce4e <__mdiff+0xd6>
 800ce94:	9900      	ldr	r1, [sp, #0]
 800ce96:	3901      	subs	r1, #1
 800ce98:	9100      	str	r1, [sp, #0]
 800ce9a:	e7e6      	b.n	800ce6a <__mdiff+0xf2>
 800ce9c:	0800e1dc 	.word	0x0800e1dc
 800cea0:	0800e219 	.word	0x0800e219
 800cea4:	00000237 	.word	0x00000237
 800cea8:	00000245 	.word	0x00000245

0800ceac <__d2b>:
 800ceac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceae:	2101      	movs	r1, #1
 800ceb0:	0016      	movs	r6, r2
 800ceb2:	001f      	movs	r7, r3
 800ceb4:	f7ff fcbe 	bl	800c834 <_Balloc>
 800ceb8:	1e04      	subs	r4, r0, #0
 800ceba:	d105      	bne.n	800cec8 <__d2b+0x1c>
 800cebc:	0022      	movs	r2, r4
 800cebe:	4b25      	ldr	r3, [pc, #148]	@ (800cf54 <__d2b+0xa8>)
 800cec0:	4825      	ldr	r0, [pc, #148]	@ (800cf58 <__d2b+0xac>)
 800cec2:	4926      	ldr	r1, [pc, #152]	@ (800cf5c <__d2b+0xb0>)
 800cec4:	f7fd ffb2 	bl	800ae2c <__assert_func>
 800cec8:	033b      	lsls	r3, r7, #12
 800ceca:	007d      	lsls	r5, r7, #1
 800cecc:	0b1b      	lsrs	r3, r3, #12
 800cece:	0d6d      	lsrs	r5, r5, #21
 800ced0:	d002      	beq.n	800ced8 <__d2b+0x2c>
 800ced2:	2280      	movs	r2, #128	@ 0x80
 800ced4:	0352      	lsls	r2, r2, #13
 800ced6:	4313      	orrs	r3, r2
 800ced8:	9301      	str	r3, [sp, #4]
 800ceda:	2e00      	cmp	r6, #0
 800cedc:	d025      	beq.n	800cf2a <__d2b+0x7e>
 800cede:	4668      	mov	r0, sp
 800cee0:	9600      	str	r6, [sp, #0]
 800cee2:	f7ff fd74 	bl	800c9ce <__lo0bits>
 800cee6:	9b01      	ldr	r3, [sp, #4]
 800cee8:	9900      	ldr	r1, [sp, #0]
 800ceea:	2800      	cmp	r0, #0
 800ceec:	d01b      	beq.n	800cf26 <__d2b+0x7a>
 800ceee:	2220      	movs	r2, #32
 800cef0:	001e      	movs	r6, r3
 800cef2:	1a12      	subs	r2, r2, r0
 800cef4:	4096      	lsls	r6, r2
 800cef6:	0032      	movs	r2, r6
 800cef8:	40c3      	lsrs	r3, r0
 800cefa:	430a      	orrs	r2, r1
 800cefc:	6162      	str	r2, [r4, #20]
 800cefe:	9301      	str	r3, [sp, #4]
 800cf00:	9e01      	ldr	r6, [sp, #4]
 800cf02:	61a6      	str	r6, [r4, #24]
 800cf04:	1e73      	subs	r3, r6, #1
 800cf06:	419e      	sbcs	r6, r3
 800cf08:	3601      	adds	r6, #1
 800cf0a:	6126      	str	r6, [r4, #16]
 800cf0c:	2d00      	cmp	r5, #0
 800cf0e:	d014      	beq.n	800cf3a <__d2b+0x8e>
 800cf10:	2635      	movs	r6, #53	@ 0x35
 800cf12:	4b13      	ldr	r3, [pc, #76]	@ (800cf60 <__d2b+0xb4>)
 800cf14:	18ed      	adds	r5, r5, r3
 800cf16:	9b08      	ldr	r3, [sp, #32]
 800cf18:	182d      	adds	r5, r5, r0
 800cf1a:	601d      	str	r5, [r3, #0]
 800cf1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf1e:	1a36      	subs	r6, r6, r0
 800cf20:	601e      	str	r6, [r3, #0]
 800cf22:	0020      	movs	r0, r4
 800cf24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf26:	6161      	str	r1, [r4, #20]
 800cf28:	e7ea      	b.n	800cf00 <__d2b+0x54>
 800cf2a:	a801      	add	r0, sp, #4
 800cf2c:	f7ff fd4f 	bl	800c9ce <__lo0bits>
 800cf30:	9b01      	ldr	r3, [sp, #4]
 800cf32:	2601      	movs	r6, #1
 800cf34:	6163      	str	r3, [r4, #20]
 800cf36:	3020      	adds	r0, #32
 800cf38:	e7e7      	b.n	800cf0a <__d2b+0x5e>
 800cf3a:	4b0a      	ldr	r3, [pc, #40]	@ (800cf64 <__d2b+0xb8>)
 800cf3c:	18c0      	adds	r0, r0, r3
 800cf3e:	9b08      	ldr	r3, [sp, #32]
 800cf40:	6018      	str	r0, [r3, #0]
 800cf42:	4b09      	ldr	r3, [pc, #36]	@ (800cf68 <__d2b+0xbc>)
 800cf44:	18f3      	adds	r3, r6, r3
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	18e3      	adds	r3, r4, r3
 800cf4a:	6958      	ldr	r0, [r3, #20]
 800cf4c:	f7ff fd1e 	bl	800c98c <__hi0bits>
 800cf50:	0176      	lsls	r6, r6, #5
 800cf52:	e7e3      	b.n	800cf1c <__d2b+0x70>
 800cf54:	0800e1dc 	.word	0x0800e1dc
 800cf58:	0800e219 	.word	0x0800e219
 800cf5c:	0000030f 	.word	0x0000030f
 800cf60:	fffffbcd 	.word	0xfffffbcd
 800cf64:	fffffbce 	.word	0xfffffbce
 800cf68:	3fffffff 	.word	0x3fffffff

0800cf6c <__submore>:
 800cf6c:	000b      	movs	r3, r1
 800cf6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf70:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 800cf72:	3344      	adds	r3, #68	@ 0x44
 800cf74:	000c      	movs	r4, r1
 800cf76:	429d      	cmp	r5, r3
 800cf78:	d11c      	bne.n	800cfb4 <__submore+0x48>
 800cf7a:	2680      	movs	r6, #128	@ 0x80
 800cf7c:	00f6      	lsls	r6, r6, #3
 800cf7e:	0031      	movs	r1, r6
 800cf80:	f7ff f97c 	bl	800c27c <_malloc_r>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d102      	bne.n	800cf8e <__submore+0x22>
 800cf88:	2001      	movs	r0, #1
 800cf8a:	4240      	negs	r0, r0
 800cf8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf8e:	0023      	movs	r3, r4
 800cf90:	6360      	str	r0, [r4, #52]	@ 0x34
 800cf92:	63a6      	str	r6, [r4, #56]	@ 0x38
 800cf94:	3346      	adds	r3, #70	@ 0x46
 800cf96:	781a      	ldrb	r2, [r3, #0]
 800cf98:	4b10      	ldr	r3, [pc, #64]	@ (800cfdc <__submore+0x70>)
 800cf9a:	54c2      	strb	r2, [r0, r3]
 800cf9c:	0023      	movs	r3, r4
 800cf9e:	3345      	adds	r3, #69	@ 0x45
 800cfa0:	781a      	ldrb	r2, [r3, #0]
 800cfa2:	4b0f      	ldr	r3, [pc, #60]	@ (800cfe0 <__submore+0x74>)
 800cfa4:	54c2      	strb	r2, [r0, r3]
 800cfa6:	782a      	ldrb	r2, [r5, #0]
 800cfa8:	4b0e      	ldr	r3, [pc, #56]	@ (800cfe4 <__submore+0x78>)
 800cfaa:	54c2      	strb	r2, [r0, r3]
 800cfac:	18c0      	adds	r0, r0, r3
 800cfae:	6020      	str	r0, [r4, #0]
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	e7eb      	b.n	800cf8c <__submore+0x20>
 800cfb4:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 800cfb6:	0029      	movs	r1, r5
 800cfb8:	0073      	lsls	r3, r6, #1
 800cfba:	001a      	movs	r2, r3
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	f000 f823 	bl	800d008 <_realloc_r>
 800cfc2:	1e05      	subs	r5, r0, #0
 800cfc4:	d0e0      	beq.n	800cf88 <__submore+0x1c>
 800cfc6:	1987      	adds	r7, r0, r6
 800cfc8:	0001      	movs	r1, r0
 800cfca:	0032      	movs	r2, r6
 800cfcc:	0038      	movs	r0, r7
 800cfce:	f7fd ff24 	bl	800ae1a <memcpy>
 800cfd2:	9b01      	ldr	r3, [sp, #4]
 800cfd4:	6027      	str	r7, [r4, #0]
 800cfd6:	6365      	str	r5, [r4, #52]	@ 0x34
 800cfd8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800cfda:	e7e9      	b.n	800cfb0 <__submore+0x44>
 800cfdc:	000003ff 	.word	0x000003ff
 800cfe0:	000003fe 	.word	0x000003fe
 800cfe4:	000003fd 	.word	0x000003fd

0800cfe8 <fiprintf>:
 800cfe8:	b40e      	push	{r1, r2, r3}
 800cfea:	b517      	push	{r0, r1, r2, r4, lr}
 800cfec:	4c05      	ldr	r4, [pc, #20]	@ (800d004 <fiprintf+0x1c>)
 800cfee:	ab05      	add	r3, sp, #20
 800cff0:	cb04      	ldmia	r3!, {r2}
 800cff2:	0001      	movs	r1, r0
 800cff4:	6820      	ldr	r0, [r4, #0]
 800cff6:	9301      	str	r3, [sp, #4]
 800cff8:	f000 f9ca 	bl	800d390 <_vfiprintf_r>
 800cffc:	bc1e      	pop	{r1, r2, r3, r4}
 800cffe:	bc08      	pop	{r3}
 800d000:	b003      	add	sp, #12
 800d002:	4718      	bx	r3
 800d004:	20000018 	.word	0x20000018

0800d008 <_realloc_r>:
 800d008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d00a:	0006      	movs	r6, r0
 800d00c:	000c      	movs	r4, r1
 800d00e:	0015      	movs	r5, r2
 800d010:	2900      	cmp	r1, #0
 800d012:	d105      	bne.n	800d020 <_realloc_r+0x18>
 800d014:	0011      	movs	r1, r2
 800d016:	f7ff f931 	bl	800c27c <_malloc_r>
 800d01a:	0004      	movs	r4, r0
 800d01c:	0020      	movs	r0, r4
 800d01e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d020:	2a00      	cmp	r2, #0
 800d022:	d103      	bne.n	800d02c <_realloc_r+0x24>
 800d024:	f7fe fd96 	bl	800bb54 <_free_r>
 800d028:	002c      	movs	r4, r5
 800d02a:	e7f7      	b.n	800d01c <_realloc_r+0x14>
 800d02c:	f000 fade 	bl	800d5ec <_malloc_usable_size_r>
 800d030:	0007      	movs	r7, r0
 800d032:	4285      	cmp	r5, r0
 800d034:	d802      	bhi.n	800d03c <_realloc_r+0x34>
 800d036:	0843      	lsrs	r3, r0, #1
 800d038:	42ab      	cmp	r3, r5
 800d03a:	d3ef      	bcc.n	800d01c <_realloc_r+0x14>
 800d03c:	0029      	movs	r1, r5
 800d03e:	0030      	movs	r0, r6
 800d040:	f7ff f91c 	bl	800c27c <_malloc_r>
 800d044:	9001      	str	r0, [sp, #4]
 800d046:	2800      	cmp	r0, #0
 800d048:	d101      	bne.n	800d04e <_realloc_r+0x46>
 800d04a:	9c01      	ldr	r4, [sp, #4]
 800d04c:	e7e6      	b.n	800d01c <_realloc_r+0x14>
 800d04e:	002a      	movs	r2, r5
 800d050:	42bd      	cmp	r5, r7
 800d052:	d900      	bls.n	800d056 <_realloc_r+0x4e>
 800d054:	003a      	movs	r2, r7
 800d056:	0021      	movs	r1, r4
 800d058:	9801      	ldr	r0, [sp, #4]
 800d05a:	f7fd fede 	bl	800ae1a <memcpy>
 800d05e:	0021      	movs	r1, r4
 800d060:	0030      	movs	r0, r6
 800d062:	f7fe fd77 	bl	800bb54 <_free_r>
 800d066:	e7f0      	b.n	800d04a <_realloc_r+0x42>

0800d068 <_strtol_l.isra.0>:
 800d068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d06a:	b085      	sub	sp, #20
 800d06c:	0017      	movs	r7, r2
 800d06e:	001e      	movs	r6, r3
 800d070:	9003      	str	r0, [sp, #12]
 800d072:	9101      	str	r1, [sp, #4]
 800d074:	2b24      	cmp	r3, #36	@ 0x24
 800d076:	d823      	bhi.n	800d0c0 <_strtol_l.isra.0+0x58>
 800d078:	000c      	movs	r4, r1
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d020      	beq.n	800d0c0 <_strtol_l.isra.0+0x58>
 800d07e:	4b3d      	ldr	r3, [pc, #244]	@ (800d174 <_strtol_l.isra.0+0x10c>)
 800d080:	2208      	movs	r2, #8
 800d082:	469c      	mov	ip, r3
 800d084:	0023      	movs	r3, r4
 800d086:	4661      	mov	r1, ip
 800d088:	781d      	ldrb	r5, [r3, #0]
 800d08a:	3401      	adds	r4, #1
 800d08c:	5d48      	ldrb	r0, [r1, r5]
 800d08e:	0001      	movs	r1, r0
 800d090:	4011      	ands	r1, r2
 800d092:	4210      	tst	r0, r2
 800d094:	d1f6      	bne.n	800d084 <_strtol_l.isra.0+0x1c>
 800d096:	2d2d      	cmp	r5, #45	@ 0x2d
 800d098:	d119      	bne.n	800d0ce <_strtol_l.isra.0+0x66>
 800d09a:	7825      	ldrb	r5, [r4, #0]
 800d09c:	1c9c      	adds	r4, r3, #2
 800d09e:	2301      	movs	r3, #1
 800d0a0:	9300      	str	r3, [sp, #0]
 800d0a2:	2210      	movs	r2, #16
 800d0a4:	0033      	movs	r3, r6
 800d0a6:	4393      	bics	r3, r2
 800d0a8:	d11d      	bne.n	800d0e6 <_strtol_l.isra.0+0x7e>
 800d0aa:	2d30      	cmp	r5, #48	@ 0x30
 800d0ac:	d115      	bne.n	800d0da <_strtol_l.isra.0+0x72>
 800d0ae:	2120      	movs	r1, #32
 800d0b0:	7823      	ldrb	r3, [r4, #0]
 800d0b2:	438b      	bics	r3, r1
 800d0b4:	2b58      	cmp	r3, #88	@ 0x58
 800d0b6:	d110      	bne.n	800d0da <_strtol_l.isra.0+0x72>
 800d0b8:	7865      	ldrb	r5, [r4, #1]
 800d0ba:	3402      	adds	r4, #2
 800d0bc:	2610      	movs	r6, #16
 800d0be:	e012      	b.n	800d0e6 <_strtol_l.isra.0+0x7e>
 800d0c0:	f7fd fe5c 	bl	800ad7c <__errno>
 800d0c4:	2316      	movs	r3, #22
 800d0c6:	6003      	str	r3, [r0, #0]
 800d0c8:	2000      	movs	r0, #0
 800d0ca:	b005      	add	sp, #20
 800d0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0ce:	9100      	str	r1, [sp, #0]
 800d0d0:	2d2b      	cmp	r5, #43	@ 0x2b
 800d0d2:	d1e6      	bne.n	800d0a2 <_strtol_l.isra.0+0x3a>
 800d0d4:	7825      	ldrb	r5, [r4, #0]
 800d0d6:	1c9c      	adds	r4, r3, #2
 800d0d8:	e7e3      	b.n	800d0a2 <_strtol_l.isra.0+0x3a>
 800d0da:	2e00      	cmp	r6, #0
 800d0dc:	d1ee      	bne.n	800d0bc <_strtol_l.isra.0+0x54>
 800d0de:	360a      	adds	r6, #10
 800d0e0:	2d30      	cmp	r5, #48	@ 0x30
 800d0e2:	d100      	bne.n	800d0e6 <_strtol_l.isra.0+0x7e>
 800d0e4:	3e02      	subs	r6, #2
 800d0e6:	4a24      	ldr	r2, [pc, #144]	@ (800d178 <_strtol_l.isra.0+0x110>)
 800d0e8:	9b00      	ldr	r3, [sp, #0]
 800d0ea:	4694      	mov	ip, r2
 800d0ec:	4463      	add	r3, ip
 800d0ee:	0031      	movs	r1, r6
 800d0f0:	0018      	movs	r0, r3
 800d0f2:	9302      	str	r3, [sp, #8]
 800d0f4:	f7f3 f8b2 	bl	800025c <__aeabi_uidivmod>
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	4684      	mov	ip, r0
 800d0fc:	0010      	movs	r0, r2
 800d0fe:	002b      	movs	r3, r5
 800d100:	3b30      	subs	r3, #48	@ 0x30
 800d102:	2b09      	cmp	r3, #9
 800d104:	d811      	bhi.n	800d12a <_strtol_l.isra.0+0xc2>
 800d106:	001d      	movs	r5, r3
 800d108:	42ae      	cmp	r6, r5
 800d10a:	dd1d      	ble.n	800d148 <_strtol_l.isra.0+0xe0>
 800d10c:	1c53      	adds	r3, r2, #1
 800d10e:	d009      	beq.n	800d124 <_strtol_l.isra.0+0xbc>
 800d110:	2201      	movs	r2, #1
 800d112:	4252      	negs	r2, r2
 800d114:	4584      	cmp	ip, r0
 800d116:	d305      	bcc.n	800d124 <_strtol_l.isra.0+0xbc>
 800d118:	d101      	bne.n	800d11e <_strtol_l.isra.0+0xb6>
 800d11a:	42a9      	cmp	r1, r5
 800d11c:	db11      	blt.n	800d142 <_strtol_l.isra.0+0xda>
 800d11e:	2201      	movs	r2, #1
 800d120:	4370      	muls	r0, r6
 800d122:	1828      	adds	r0, r5, r0
 800d124:	7825      	ldrb	r5, [r4, #0]
 800d126:	3401      	adds	r4, #1
 800d128:	e7e9      	b.n	800d0fe <_strtol_l.isra.0+0x96>
 800d12a:	002b      	movs	r3, r5
 800d12c:	3b41      	subs	r3, #65	@ 0x41
 800d12e:	2b19      	cmp	r3, #25
 800d130:	d801      	bhi.n	800d136 <_strtol_l.isra.0+0xce>
 800d132:	3d37      	subs	r5, #55	@ 0x37
 800d134:	e7e8      	b.n	800d108 <_strtol_l.isra.0+0xa0>
 800d136:	002b      	movs	r3, r5
 800d138:	3b61      	subs	r3, #97	@ 0x61
 800d13a:	2b19      	cmp	r3, #25
 800d13c:	d804      	bhi.n	800d148 <_strtol_l.isra.0+0xe0>
 800d13e:	3d57      	subs	r5, #87	@ 0x57
 800d140:	e7e2      	b.n	800d108 <_strtol_l.isra.0+0xa0>
 800d142:	2201      	movs	r2, #1
 800d144:	4252      	negs	r2, r2
 800d146:	e7ed      	b.n	800d124 <_strtol_l.isra.0+0xbc>
 800d148:	1c53      	adds	r3, r2, #1
 800d14a:	d108      	bne.n	800d15e <_strtol_l.isra.0+0xf6>
 800d14c:	2322      	movs	r3, #34	@ 0x22
 800d14e:	9a03      	ldr	r2, [sp, #12]
 800d150:	9802      	ldr	r0, [sp, #8]
 800d152:	6013      	str	r3, [r2, #0]
 800d154:	2f00      	cmp	r7, #0
 800d156:	d0b8      	beq.n	800d0ca <_strtol_l.isra.0+0x62>
 800d158:	1e63      	subs	r3, r4, #1
 800d15a:	9301      	str	r3, [sp, #4]
 800d15c:	e007      	b.n	800d16e <_strtol_l.isra.0+0x106>
 800d15e:	9b00      	ldr	r3, [sp, #0]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d000      	beq.n	800d166 <_strtol_l.isra.0+0xfe>
 800d164:	4240      	negs	r0, r0
 800d166:	2f00      	cmp	r7, #0
 800d168:	d0af      	beq.n	800d0ca <_strtol_l.isra.0+0x62>
 800d16a:	2a00      	cmp	r2, #0
 800d16c:	d1f4      	bne.n	800d158 <_strtol_l.isra.0+0xf0>
 800d16e:	9b01      	ldr	r3, [sp, #4]
 800d170:	603b      	str	r3, [r7, #0]
 800d172:	e7aa      	b.n	800d0ca <_strtol_l.isra.0+0x62>
 800d174:	0800e379 	.word	0x0800e379
 800d178:	7fffffff 	.word	0x7fffffff

0800d17c <_strtol_r>:
 800d17c:	b510      	push	{r4, lr}
 800d17e:	f7ff ff73 	bl	800d068 <_strtol_l.isra.0>
 800d182:	bd10      	pop	{r4, pc}

0800d184 <_strtoul_l.isra.0>:
 800d184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d186:	001e      	movs	r6, r3
 800d188:	4b3e      	ldr	r3, [pc, #248]	@ (800d284 <_strtoul_l.isra.0+0x100>)
 800d18a:	0017      	movs	r7, r2
 800d18c:	000c      	movs	r4, r1
 800d18e:	469c      	mov	ip, r3
 800d190:	2208      	movs	r2, #8
 800d192:	b085      	sub	sp, #20
 800d194:	9003      	str	r0, [sp, #12]
 800d196:	9100      	str	r1, [sp, #0]
 800d198:	0023      	movs	r3, r4
 800d19a:	4661      	mov	r1, ip
 800d19c:	781d      	ldrb	r5, [r3, #0]
 800d19e:	3401      	adds	r4, #1
 800d1a0:	5d48      	ldrb	r0, [r1, r5]
 800d1a2:	0001      	movs	r1, r0
 800d1a4:	4011      	ands	r1, r2
 800d1a6:	4210      	tst	r0, r2
 800d1a8:	d1f6      	bne.n	800d198 <_strtoul_l.isra.0+0x14>
 800d1aa:	2d2d      	cmp	r5, #45	@ 0x2d
 800d1ac:	d112      	bne.n	800d1d4 <_strtoul_l.isra.0+0x50>
 800d1ae:	7825      	ldrb	r5, [r4, #0]
 800d1b0:	1c9c      	adds	r4, r3, #2
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	9302      	str	r3, [sp, #8]
 800d1b6:	2210      	movs	r2, #16
 800d1b8:	0033      	movs	r3, r6
 800d1ba:	4393      	bics	r3, r2
 800d1bc:	d116      	bne.n	800d1ec <_strtoul_l.isra.0+0x68>
 800d1be:	2d30      	cmp	r5, #48	@ 0x30
 800d1c0:	d10e      	bne.n	800d1e0 <_strtoul_l.isra.0+0x5c>
 800d1c2:	2120      	movs	r1, #32
 800d1c4:	7823      	ldrb	r3, [r4, #0]
 800d1c6:	438b      	bics	r3, r1
 800d1c8:	2b58      	cmp	r3, #88	@ 0x58
 800d1ca:	d109      	bne.n	800d1e0 <_strtoul_l.isra.0+0x5c>
 800d1cc:	7865      	ldrb	r5, [r4, #1]
 800d1ce:	3402      	adds	r4, #2
 800d1d0:	2610      	movs	r6, #16
 800d1d2:	e00b      	b.n	800d1ec <_strtoul_l.isra.0+0x68>
 800d1d4:	9102      	str	r1, [sp, #8]
 800d1d6:	2d2b      	cmp	r5, #43	@ 0x2b
 800d1d8:	d1ed      	bne.n	800d1b6 <_strtoul_l.isra.0+0x32>
 800d1da:	7825      	ldrb	r5, [r4, #0]
 800d1dc:	1c9c      	adds	r4, r3, #2
 800d1de:	e7ea      	b.n	800d1b6 <_strtoul_l.isra.0+0x32>
 800d1e0:	2e00      	cmp	r6, #0
 800d1e2:	d1f5      	bne.n	800d1d0 <_strtoul_l.isra.0+0x4c>
 800d1e4:	360a      	adds	r6, #10
 800d1e6:	2d30      	cmp	r5, #48	@ 0x30
 800d1e8:	d100      	bne.n	800d1ec <_strtoul_l.isra.0+0x68>
 800d1ea:	3e02      	subs	r6, #2
 800d1ec:	2001      	movs	r0, #1
 800d1ee:	0031      	movs	r1, r6
 800d1f0:	4240      	negs	r0, r0
 800d1f2:	f7f2 ffad 	bl	8000150 <__udivsi3>
 800d1f6:	9001      	str	r0, [sp, #4]
 800d1f8:	2001      	movs	r0, #1
 800d1fa:	0031      	movs	r1, r6
 800d1fc:	4240      	negs	r0, r0
 800d1fe:	f7f3 f82d 	bl	800025c <__aeabi_uidivmod>
 800d202:	2300      	movs	r3, #0
 800d204:	2201      	movs	r2, #1
 800d206:	0018      	movs	r0, r3
 800d208:	4694      	mov	ip, r2
 800d20a:	002a      	movs	r2, r5
 800d20c:	3a30      	subs	r2, #48	@ 0x30
 800d20e:	2a09      	cmp	r2, #9
 800d210:	d812      	bhi.n	800d238 <_strtoul_l.isra.0+0xb4>
 800d212:	0015      	movs	r5, r2
 800d214:	42ae      	cmp	r6, r5
 800d216:	dd1e      	ble.n	800d256 <_strtoul_l.isra.0+0xd2>
 800d218:	1c5a      	adds	r2, r3, #1
 800d21a:	d00a      	beq.n	800d232 <_strtoul_l.isra.0+0xae>
 800d21c:	2301      	movs	r3, #1
 800d21e:	9a01      	ldr	r2, [sp, #4]
 800d220:	425b      	negs	r3, r3
 800d222:	4282      	cmp	r2, r0
 800d224:	d305      	bcc.n	800d232 <_strtoul_l.isra.0+0xae>
 800d226:	d101      	bne.n	800d22c <_strtoul_l.isra.0+0xa8>
 800d228:	42a9      	cmp	r1, r5
 800d22a:	db11      	blt.n	800d250 <_strtoul_l.isra.0+0xcc>
 800d22c:	4663      	mov	r3, ip
 800d22e:	4370      	muls	r0, r6
 800d230:	1828      	adds	r0, r5, r0
 800d232:	7825      	ldrb	r5, [r4, #0]
 800d234:	3401      	adds	r4, #1
 800d236:	e7e8      	b.n	800d20a <_strtoul_l.isra.0+0x86>
 800d238:	002a      	movs	r2, r5
 800d23a:	3a41      	subs	r2, #65	@ 0x41
 800d23c:	2a19      	cmp	r2, #25
 800d23e:	d801      	bhi.n	800d244 <_strtoul_l.isra.0+0xc0>
 800d240:	3d37      	subs	r5, #55	@ 0x37
 800d242:	e7e7      	b.n	800d214 <_strtoul_l.isra.0+0x90>
 800d244:	002a      	movs	r2, r5
 800d246:	3a61      	subs	r2, #97	@ 0x61
 800d248:	2a19      	cmp	r2, #25
 800d24a:	d804      	bhi.n	800d256 <_strtoul_l.isra.0+0xd2>
 800d24c:	3d57      	subs	r5, #87	@ 0x57
 800d24e:	e7e1      	b.n	800d214 <_strtoul_l.isra.0+0x90>
 800d250:	2301      	movs	r3, #1
 800d252:	425b      	negs	r3, r3
 800d254:	e7ed      	b.n	800d232 <_strtoul_l.isra.0+0xae>
 800d256:	1c5a      	adds	r2, r3, #1
 800d258:	d107      	bne.n	800d26a <_strtoul_l.isra.0+0xe6>
 800d25a:	2222      	movs	r2, #34	@ 0x22
 800d25c:	9903      	ldr	r1, [sp, #12]
 800d25e:	0018      	movs	r0, r3
 800d260:	600a      	str	r2, [r1, #0]
 800d262:	2f00      	cmp	r7, #0
 800d264:	d109      	bne.n	800d27a <_strtoul_l.isra.0+0xf6>
 800d266:	b005      	add	sp, #20
 800d268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d26a:	9a02      	ldr	r2, [sp, #8]
 800d26c:	2a00      	cmp	r2, #0
 800d26e:	d000      	beq.n	800d272 <_strtoul_l.isra.0+0xee>
 800d270:	4240      	negs	r0, r0
 800d272:	2f00      	cmp	r7, #0
 800d274:	d0f7      	beq.n	800d266 <_strtoul_l.isra.0+0xe2>
 800d276:	2b00      	cmp	r3, #0
 800d278:	d001      	beq.n	800d27e <_strtoul_l.isra.0+0xfa>
 800d27a:	1e63      	subs	r3, r4, #1
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	9b00      	ldr	r3, [sp, #0]
 800d280:	603b      	str	r3, [r7, #0]
 800d282:	e7f0      	b.n	800d266 <_strtoul_l.isra.0+0xe2>
 800d284:	0800e379 	.word	0x0800e379

0800d288 <_strtoul_r>:
 800d288:	b510      	push	{r4, lr}
 800d28a:	f7ff ff7b 	bl	800d184 <_strtoul_l.isra.0>
 800d28e:	bd10      	pop	{r4, pc}

0800d290 <memmove>:
 800d290:	b510      	push	{r4, lr}
 800d292:	4288      	cmp	r0, r1
 800d294:	d902      	bls.n	800d29c <memmove+0xc>
 800d296:	188b      	adds	r3, r1, r2
 800d298:	4298      	cmp	r0, r3
 800d29a:	d308      	bcc.n	800d2ae <memmove+0x1e>
 800d29c:	2300      	movs	r3, #0
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d007      	beq.n	800d2b2 <memmove+0x22>
 800d2a2:	5ccc      	ldrb	r4, [r1, r3]
 800d2a4:	54c4      	strb	r4, [r0, r3]
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	e7f9      	b.n	800d29e <memmove+0xe>
 800d2aa:	5c8b      	ldrb	r3, [r1, r2]
 800d2ac:	5483      	strb	r3, [r0, r2]
 800d2ae:	3a01      	subs	r2, #1
 800d2b0:	d2fb      	bcs.n	800d2aa <memmove+0x1a>
 800d2b2:	bd10      	pop	{r4, pc}

0800d2b4 <_sbrk_r>:
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	b570      	push	{r4, r5, r6, lr}
 800d2b8:	4d06      	ldr	r5, [pc, #24]	@ (800d2d4 <_sbrk_r+0x20>)
 800d2ba:	0004      	movs	r4, r0
 800d2bc:	0008      	movs	r0, r1
 800d2be:	602b      	str	r3, [r5, #0]
 800d2c0:	f7f9 fd84 	bl	8006dcc <_sbrk>
 800d2c4:	1c43      	adds	r3, r0, #1
 800d2c6:	d103      	bne.n	800d2d0 <_sbrk_r+0x1c>
 800d2c8:	682b      	ldr	r3, [r5, #0]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d000      	beq.n	800d2d0 <_sbrk_r+0x1c>
 800d2ce:	6023      	str	r3, [r4, #0]
 800d2d0:	bd70      	pop	{r4, r5, r6, pc}
 800d2d2:	46c0      	nop			@ (mov r8, r8)
 800d2d4:	2000053c 	.word	0x2000053c

0800d2d8 <abort>:
 800d2d8:	2006      	movs	r0, #6
 800d2da:	b510      	push	{r4, lr}
 800d2dc:	f000 fad0 	bl	800d880 <raise>
 800d2e0:	2001      	movs	r0, #1
 800d2e2:	f7f9 fd00 	bl	8006ce6 <_exit>

0800d2e6 <_calloc_r>:
 800d2e6:	b570      	push	{r4, r5, r6, lr}
 800d2e8:	0c0b      	lsrs	r3, r1, #16
 800d2ea:	0c15      	lsrs	r5, r2, #16
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d11e      	bne.n	800d32e <_calloc_r+0x48>
 800d2f0:	2d00      	cmp	r5, #0
 800d2f2:	d10c      	bne.n	800d30e <_calloc_r+0x28>
 800d2f4:	b289      	uxth	r1, r1
 800d2f6:	b294      	uxth	r4, r2
 800d2f8:	434c      	muls	r4, r1
 800d2fa:	0021      	movs	r1, r4
 800d2fc:	f7fe ffbe 	bl	800c27c <_malloc_r>
 800d300:	1e05      	subs	r5, r0, #0
 800d302:	d01b      	beq.n	800d33c <_calloc_r+0x56>
 800d304:	0022      	movs	r2, r4
 800d306:	2100      	movs	r1, #0
 800d308:	f7fd fc80 	bl	800ac0c <memset>
 800d30c:	e016      	b.n	800d33c <_calloc_r+0x56>
 800d30e:	1c2b      	adds	r3, r5, #0
 800d310:	1c0c      	adds	r4, r1, #0
 800d312:	b289      	uxth	r1, r1
 800d314:	b292      	uxth	r2, r2
 800d316:	434a      	muls	r2, r1
 800d318:	b29b      	uxth	r3, r3
 800d31a:	b2a1      	uxth	r1, r4
 800d31c:	4359      	muls	r1, r3
 800d31e:	0c14      	lsrs	r4, r2, #16
 800d320:	190c      	adds	r4, r1, r4
 800d322:	0c23      	lsrs	r3, r4, #16
 800d324:	d107      	bne.n	800d336 <_calloc_r+0x50>
 800d326:	0424      	lsls	r4, r4, #16
 800d328:	b292      	uxth	r2, r2
 800d32a:	4314      	orrs	r4, r2
 800d32c:	e7e5      	b.n	800d2fa <_calloc_r+0x14>
 800d32e:	2d00      	cmp	r5, #0
 800d330:	d101      	bne.n	800d336 <_calloc_r+0x50>
 800d332:	1c14      	adds	r4, r2, #0
 800d334:	e7ed      	b.n	800d312 <_calloc_r+0x2c>
 800d336:	230c      	movs	r3, #12
 800d338:	2500      	movs	r5, #0
 800d33a:	6003      	str	r3, [r0, #0]
 800d33c:	0028      	movs	r0, r5
 800d33e:	bd70      	pop	{r4, r5, r6, pc}

0800d340 <__sfputc_r>:
 800d340:	6893      	ldr	r3, [r2, #8]
 800d342:	b510      	push	{r4, lr}
 800d344:	3b01      	subs	r3, #1
 800d346:	6093      	str	r3, [r2, #8]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	da04      	bge.n	800d356 <__sfputc_r+0x16>
 800d34c:	6994      	ldr	r4, [r2, #24]
 800d34e:	42a3      	cmp	r3, r4
 800d350:	db07      	blt.n	800d362 <__sfputc_r+0x22>
 800d352:	290a      	cmp	r1, #10
 800d354:	d005      	beq.n	800d362 <__sfputc_r+0x22>
 800d356:	6813      	ldr	r3, [r2, #0]
 800d358:	1c58      	adds	r0, r3, #1
 800d35a:	6010      	str	r0, [r2, #0]
 800d35c:	7019      	strb	r1, [r3, #0]
 800d35e:	0008      	movs	r0, r1
 800d360:	bd10      	pop	{r4, pc}
 800d362:	f000 f94b 	bl	800d5fc <__swbuf_r>
 800d366:	0001      	movs	r1, r0
 800d368:	e7f9      	b.n	800d35e <__sfputc_r+0x1e>

0800d36a <__sfputs_r>:
 800d36a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36c:	0006      	movs	r6, r0
 800d36e:	000f      	movs	r7, r1
 800d370:	0014      	movs	r4, r2
 800d372:	18d5      	adds	r5, r2, r3
 800d374:	42ac      	cmp	r4, r5
 800d376:	d101      	bne.n	800d37c <__sfputs_r+0x12>
 800d378:	2000      	movs	r0, #0
 800d37a:	e007      	b.n	800d38c <__sfputs_r+0x22>
 800d37c:	7821      	ldrb	r1, [r4, #0]
 800d37e:	003a      	movs	r2, r7
 800d380:	0030      	movs	r0, r6
 800d382:	f7ff ffdd 	bl	800d340 <__sfputc_r>
 800d386:	3401      	adds	r4, #1
 800d388:	1c43      	adds	r3, r0, #1
 800d38a:	d1f3      	bne.n	800d374 <__sfputs_r+0xa>
 800d38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d390 <_vfiprintf_r>:
 800d390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d392:	b0a1      	sub	sp, #132	@ 0x84
 800d394:	000f      	movs	r7, r1
 800d396:	0015      	movs	r5, r2
 800d398:	001e      	movs	r6, r3
 800d39a:	9003      	str	r0, [sp, #12]
 800d39c:	2800      	cmp	r0, #0
 800d39e:	d004      	beq.n	800d3aa <_vfiprintf_r+0x1a>
 800d3a0:	6a03      	ldr	r3, [r0, #32]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d101      	bne.n	800d3aa <_vfiprintf_r+0x1a>
 800d3a6:	f7fd fbfd 	bl	800aba4 <__sinit>
 800d3aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3ac:	07db      	lsls	r3, r3, #31
 800d3ae:	d405      	bmi.n	800d3bc <_vfiprintf_r+0x2c>
 800d3b0:	89bb      	ldrh	r3, [r7, #12]
 800d3b2:	059b      	lsls	r3, r3, #22
 800d3b4:	d402      	bmi.n	800d3bc <_vfiprintf_r+0x2c>
 800d3b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d3b8:	f7fd fd0b 	bl	800add2 <__retarget_lock_acquire_recursive>
 800d3bc:	89bb      	ldrh	r3, [r7, #12]
 800d3be:	071b      	lsls	r3, r3, #28
 800d3c0:	d502      	bpl.n	800d3c8 <_vfiprintf_r+0x38>
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d113      	bne.n	800d3f0 <_vfiprintf_r+0x60>
 800d3c8:	0039      	movs	r1, r7
 800d3ca:	9803      	ldr	r0, [sp, #12]
 800d3cc:	f000 f958 	bl	800d680 <__swsetup_r>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d00d      	beq.n	800d3f0 <_vfiprintf_r+0x60>
 800d3d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3d6:	07db      	lsls	r3, r3, #31
 800d3d8:	d503      	bpl.n	800d3e2 <_vfiprintf_r+0x52>
 800d3da:	2001      	movs	r0, #1
 800d3dc:	4240      	negs	r0, r0
 800d3de:	b021      	add	sp, #132	@ 0x84
 800d3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3e2:	89bb      	ldrh	r3, [r7, #12]
 800d3e4:	059b      	lsls	r3, r3, #22
 800d3e6:	d4f8      	bmi.n	800d3da <_vfiprintf_r+0x4a>
 800d3e8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d3ea:	f7fd fcf3 	bl	800add4 <__retarget_lock_release_recursive>
 800d3ee:	e7f4      	b.n	800d3da <_vfiprintf_r+0x4a>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	ac08      	add	r4, sp, #32
 800d3f4:	6163      	str	r3, [r4, #20]
 800d3f6:	3320      	adds	r3, #32
 800d3f8:	7663      	strb	r3, [r4, #25]
 800d3fa:	3310      	adds	r3, #16
 800d3fc:	76a3      	strb	r3, [r4, #26]
 800d3fe:	9607      	str	r6, [sp, #28]
 800d400:	002e      	movs	r6, r5
 800d402:	7833      	ldrb	r3, [r6, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d001      	beq.n	800d40c <_vfiprintf_r+0x7c>
 800d408:	2b25      	cmp	r3, #37	@ 0x25
 800d40a:	d148      	bne.n	800d49e <_vfiprintf_r+0x10e>
 800d40c:	1b73      	subs	r3, r6, r5
 800d40e:	9305      	str	r3, [sp, #20]
 800d410:	42ae      	cmp	r6, r5
 800d412:	d00b      	beq.n	800d42c <_vfiprintf_r+0x9c>
 800d414:	002a      	movs	r2, r5
 800d416:	0039      	movs	r1, r7
 800d418:	9803      	ldr	r0, [sp, #12]
 800d41a:	f7ff ffa6 	bl	800d36a <__sfputs_r>
 800d41e:	3001      	adds	r0, #1
 800d420:	d100      	bne.n	800d424 <_vfiprintf_r+0x94>
 800d422:	e0ae      	b.n	800d582 <_vfiprintf_r+0x1f2>
 800d424:	6963      	ldr	r3, [r4, #20]
 800d426:	9a05      	ldr	r2, [sp, #20]
 800d428:	189b      	adds	r3, r3, r2
 800d42a:	6163      	str	r3, [r4, #20]
 800d42c:	7833      	ldrb	r3, [r6, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d100      	bne.n	800d434 <_vfiprintf_r+0xa4>
 800d432:	e0a6      	b.n	800d582 <_vfiprintf_r+0x1f2>
 800d434:	2201      	movs	r2, #1
 800d436:	2300      	movs	r3, #0
 800d438:	4252      	negs	r2, r2
 800d43a:	6062      	str	r2, [r4, #4]
 800d43c:	a904      	add	r1, sp, #16
 800d43e:	3254      	adds	r2, #84	@ 0x54
 800d440:	1852      	adds	r2, r2, r1
 800d442:	1c75      	adds	r5, r6, #1
 800d444:	6023      	str	r3, [r4, #0]
 800d446:	60e3      	str	r3, [r4, #12]
 800d448:	60a3      	str	r3, [r4, #8]
 800d44a:	7013      	strb	r3, [r2, #0]
 800d44c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d44e:	4b59      	ldr	r3, [pc, #356]	@ (800d5b4 <_vfiprintf_r+0x224>)
 800d450:	2205      	movs	r2, #5
 800d452:	0018      	movs	r0, r3
 800d454:	7829      	ldrb	r1, [r5, #0]
 800d456:	9305      	str	r3, [sp, #20]
 800d458:	f7fd fcd4 	bl	800ae04 <memchr>
 800d45c:	1c6e      	adds	r6, r5, #1
 800d45e:	2800      	cmp	r0, #0
 800d460:	d11f      	bne.n	800d4a2 <_vfiprintf_r+0x112>
 800d462:	6822      	ldr	r2, [r4, #0]
 800d464:	06d3      	lsls	r3, r2, #27
 800d466:	d504      	bpl.n	800d472 <_vfiprintf_r+0xe2>
 800d468:	2353      	movs	r3, #83	@ 0x53
 800d46a:	a904      	add	r1, sp, #16
 800d46c:	185b      	adds	r3, r3, r1
 800d46e:	2120      	movs	r1, #32
 800d470:	7019      	strb	r1, [r3, #0]
 800d472:	0713      	lsls	r3, r2, #28
 800d474:	d504      	bpl.n	800d480 <_vfiprintf_r+0xf0>
 800d476:	2353      	movs	r3, #83	@ 0x53
 800d478:	a904      	add	r1, sp, #16
 800d47a:	185b      	adds	r3, r3, r1
 800d47c:	212b      	movs	r1, #43	@ 0x2b
 800d47e:	7019      	strb	r1, [r3, #0]
 800d480:	782b      	ldrb	r3, [r5, #0]
 800d482:	2b2a      	cmp	r3, #42	@ 0x2a
 800d484:	d016      	beq.n	800d4b4 <_vfiprintf_r+0x124>
 800d486:	002e      	movs	r6, r5
 800d488:	2100      	movs	r1, #0
 800d48a:	200a      	movs	r0, #10
 800d48c:	68e3      	ldr	r3, [r4, #12]
 800d48e:	7832      	ldrb	r2, [r6, #0]
 800d490:	1c75      	adds	r5, r6, #1
 800d492:	3a30      	subs	r2, #48	@ 0x30
 800d494:	2a09      	cmp	r2, #9
 800d496:	d950      	bls.n	800d53a <_vfiprintf_r+0x1aa>
 800d498:	2900      	cmp	r1, #0
 800d49a:	d111      	bne.n	800d4c0 <_vfiprintf_r+0x130>
 800d49c:	e017      	b.n	800d4ce <_vfiprintf_r+0x13e>
 800d49e:	3601      	adds	r6, #1
 800d4a0:	e7af      	b.n	800d402 <_vfiprintf_r+0x72>
 800d4a2:	9b05      	ldr	r3, [sp, #20]
 800d4a4:	6822      	ldr	r2, [r4, #0]
 800d4a6:	1ac0      	subs	r0, r0, r3
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	4083      	lsls	r3, r0
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	0035      	movs	r5, r6
 800d4b0:	6023      	str	r3, [r4, #0]
 800d4b2:	e7cc      	b.n	800d44e <_vfiprintf_r+0xbe>
 800d4b4:	9b07      	ldr	r3, [sp, #28]
 800d4b6:	1d19      	adds	r1, r3, #4
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	9107      	str	r1, [sp, #28]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	db01      	blt.n	800d4c4 <_vfiprintf_r+0x134>
 800d4c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d4c2:	e004      	b.n	800d4ce <_vfiprintf_r+0x13e>
 800d4c4:	425b      	negs	r3, r3
 800d4c6:	60e3      	str	r3, [r4, #12]
 800d4c8:	2302      	movs	r3, #2
 800d4ca:	4313      	orrs	r3, r2
 800d4cc:	6023      	str	r3, [r4, #0]
 800d4ce:	7833      	ldrb	r3, [r6, #0]
 800d4d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4d2:	d10c      	bne.n	800d4ee <_vfiprintf_r+0x15e>
 800d4d4:	7873      	ldrb	r3, [r6, #1]
 800d4d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4d8:	d134      	bne.n	800d544 <_vfiprintf_r+0x1b4>
 800d4da:	9b07      	ldr	r3, [sp, #28]
 800d4dc:	3602      	adds	r6, #2
 800d4de:	1d1a      	adds	r2, r3, #4
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	9207      	str	r2, [sp, #28]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	da01      	bge.n	800d4ec <_vfiprintf_r+0x15c>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	425b      	negs	r3, r3
 800d4ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4ee:	4d32      	ldr	r5, [pc, #200]	@ (800d5b8 <_vfiprintf_r+0x228>)
 800d4f0:	2203      	movs	r2, #3
 800d4f2:	0028      	movs	r0, r5
 800d4f4:	7831      	ldrb	r1, [r6, #0]
 800d4f6:	f7fd fc85 	bl	800ae04 <memchr>
 800d4fa:	2800      	cmp	r0, #0
 800d4fc:	d006      	beq.n	800d50c <_vfiprintf_r+0x17c>
 800d4fe:	2340      	movs	r3, #64	@ 0x40
 800d500:	1b40      	subs	r0, r0, r5
 800d502:	4083      	lsls	r3, r0
 800d504:	6822      	ldr	r2, [r4, #0]
 800d506:	3601      	adds	r6, #1
 800d508:	4313      	orrs	r3, r2
 800d50a:	6023      	str	r3, [r4, #0]
 800d50c:	7831      	ldrb	r1, [r6, #0]
 800d50e:	2206      	movs	r2, #6
 800d510:	482a      	ldr	r0, [pc, #168]	@ (800d5bc <_vfiprintf_r+0x22c>)
 800d512:	1c75      	adds	r5, r6, #1
 800d514:	7621      	strb	r1, [r4, #24]
 800d516:	f7fd fc75 	bl	800ae04 <memchr>
 800d51a:	2800      	cmp	r0, #0
 800d51c:	d040      	beq.n	800d5a0 <_vfiprintf_r+0x210>
 800d51e:	4b28      	ldr	r3, [pc, #160]	@ (800d5c0 <_vfiprintf_r+0x230>)
 800d520:	2b00      	cmp	r3, #0
 800d522:	d122      	bne.n	800d56a <_vfiprintf_r+0x1da>
 800d524:	2207      	movs	r2, #7
 800d526:	9b07      	ldr	r3, [sp, #28]
 800d528:	3307      	adds	r3, #7
 800d52a:	4393      	bics	r3, r2
 800d52c:	3308      	adds	r3, #8
 800d52e:	9307      	str	r3, [sp, #28]
 800d530:	6963      	ldr	r3, [r4, #20]
 800d532:	9a04      	ldr	r2, [sp, #16]
 800d534:	189b      	adds	r3, r3, r2
 800d536:	6163      	str	r3, [r4, #20]
 800d538:	e762      	b.n	800d400 <_vfiprintf_r+0x70>
 800d53a:	4343      	muls	r3, r0
 800d53c:	002e      	movs	r6, r5
 800d53e:	2101      	movs	r1, #1
 800d540:	189b      	adds	r3, r3, r2
 800d542:	e7a4      	b.n	800d48e <_vfiprintf_r+0xfe>
 800d544:	2300      	movs	r3, #0
 800d546:	200a      	movs	r0, #10
 800d548:	0019      	movs	r1, r3
 800d54a:	3601      	adds	r6, #1
 800d54c:	6063      	str	r3, [r4, #4]
 800d54e:	7832      	ldrb	r2, [r6, #0]
 800d550:	1c75      	adds	r5, r6, #1
 800d552:	3a30      	subs	r2, #48	@ 0x30
 800d554:	2a09      	cmp	r2, #9
 800d556:	d903      	bls.n	800d560 <_vfiprintf_r+0x1d0>
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d0c8      	beq.n	800d4ee <_vfiprintf_r+0x15e>
 800d55c:	9109      	str	r1, [sp, #36]	@ 0x24
 800d55e:	e7c6      	b.n	800d4ee <_vfiprintf_r+0x15e>
 800d560:	4341      	muls	r1, r0
 800d562:	002e      	movs	r6, r5
 800d564:	2301      	movs	r3, #1
 800d566:	1889      	adds	r1, r1, r2
 800d568:	e7f1      	b.n	800d54e <_vfiprintf_r+0x1be>
 800d56a:	aa07      	add	r2, sp, #28
 800d56c:	9200      	str	r2, [sp, #0]
 800d56e:	0021      	movs	r1, r4
 800d570:	003a      	movs	r2, r7
 800d572:	4b14      	ldr	r3, [pc, #80]	@ (800d5c4 <_vfiprintf_r+0x234>)
 800d574:	9803      	ldr	r0, [sp, #12]
 800d576:	f7fc fe1d 	bl	800a1b4 <_printf_float>
 800d57a:	9004      	str	r0, [sp, #16]
 800d57c:	9b04      	ldr	r3, [sp, #16]
 800d57e:	3301      	adds	r3, #1
 800d580:	d1d6      	bne.n	800d530 <_vfiprintf_r+0x1a0>
 800d582:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d584:	07db      	lsls	r3, r3, #31
 800d586:	d405      	bmi.n	800d594 <_vfiprintf_r+0x204>
 800d588:	89bb      	ldrh	r3, [r7, #12]
 800d58a:	059b      	lsls	r3, r3, #22
 800d58c:	d402      	bmi.n	800d594 <_vfiprintf_r+0x204>
 800d58e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d590:	f7fd fc20 	bl	800add4 <__retarget_lock_release_recursive>
 800d594:	89bb      	ldrh	r3, [r7, #12]
 800d596:	065b      	lsls	r3, r3, #25
 800d598:	d500      	bpl.n	800d59c <_vfiprintf_r+0x20c>
 800d59a:	e71e      	b.n	800d3da <_vfiprintf_r+0x4a>
 800d59c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d59e:	e71e      	b.n	800d3de <_vfiprintf_r+0x4e>
 800d5a0:	aa07      	add	r2, sp, #28
 800d5a2:	9200      	str	r2, [sp, #0]
 800d5a4:	0021      	movs	r1, r4
 800d5a6:	003a      	movs	r2, r7
 800d5a8:	4b06      	ldr	r3, [pc, #24]	@ (800d5c4 <_vfiprintf_r+0x234>)
 800d5aa:	9803      	ldr	r0, [sp, #12]
 800d5ac:	f7fd f8b0 	bl	800a710 <_printf_i>
 800d5b0:	e7e3      	b.n	800d57a <_vfiprintf_r+0x1ea>
 800d5b2:	46c0      	nop			@ (mov r8, r8)
 800d5b4:	0800e1ed 	.word	0x0800e1ed
 800d5b8:	0800e1f3 	.word	0x0800e1f3
 800d5bc:	0800e1f7 	.word	0x0800e1f7
 800d5c0:	0800a1b5 	.word	0x0800a1b5
 800d5c4:	0800d36b 	.word	0x0800d36b

0800d5c8 <__ascii_mbtowc>:
 800d5c8:	b082      	sub	sp, #8
 800d5ca:	2900      	cmp	r1, #0
 800d5cc:	d100      	bne.n	800d5d0 <__ascii_mbtowc+0x8>
 800d5ce:	a901      	add	r1, sp, #4
 800d5d0:	1e10      	subs	r0, r2, #0
 800d5d2:	d006      	beq.n	800d5e2 <__ascii_mbtowc+0x1a>
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d006      	beq.n	800d5e6 <__ascii_mbtowc+0x1e>
 800d5d8:	7813      	ldrb	r3, [r2, #0]
 800d5da:	600b      	str	r3, [r1, #0]
 800d5dc:	7810      	ldrb	r0, [r2, #0]
 800d5de:	1e43      	subs	r3, r0, #1
 800d5e0:	4198      	sbcs	r0, r3
 800d5e2:	b002      	add	sp, #8
 800d5e4:	4770      	bx	lr
 800d5e6:	2002      	movs	r0, #2
 800d5e8:	4240      	negs	r0, r0
 800d5ea:	e7fa      	b.n	800d5e2 <__ascii_mbtowc+0x1a>

0800d5ec <_malloc_usable_size_r>:
 800d5ec:	1f0b      	subs	r3, r1, #4
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	1f18      	subs	r0, r3, #4
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	da01      	bge.n	800d5fa <_malloc_usable_size_r+0xe>
 800d5f6:	580b      	ldr	r3, [r1, r0]
 800d5f8:	18c0      	adds	r0, r0, r3
 800d5fa:	4770      	bx	lr

0800d5fc <__swbuf_r>:
 800d5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5fe:	0006      	movs	r6, r0
 800d600:	000d      	movs	r5, r1
 800d602:	0014      	movs	r4, r2
 800d604:	2800      	cmp	r0, #0
 800d606:	d004      	beq.n	800d612 <__swbuf_r+0x16>
 800d608:	6a03      	ldr	r3, [r0, #32]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d101      	bne.n	800d612 <__swbuf_r+0x16>
 800d60e:	f7fd fac9 	bl	800aba4 <__sinit>
 800d612:	69a3      	ldr	r3, [r4, #24]
 800d614:	60a3      	str	r3, [r4, #8]
 800d616:	89a3      	ldrh	r3, [r4, #12]
 800d618:	071b      	lsls	r3, r3, #28
 800d61a:	d502      	bpl.n	800d622 <__swbuf_r+0x26>
 800d61c:	6923      	ldr	r3, [r4, #16]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d109      	bne.n	800d636 <__swbuf_r+0x3a>
 800d622:	0021      	movs	r1, r4
 800d624:	0030      	movs	r0, r6
 800d626:	f000 f82b 	bl	800d680 <__swsetup_r>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d003      	beq.n	800d636 <__swbuf_r+0x3a>
 800d62e:	2501      	movs	r5, #1
 800d630:	426d      	negs	r5, r5
 800d632:	0028      	movs	r0, r5
 800d634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d636:	6923      	ldr	r3, [r4, #16]
 800d638:	6820      	ldr	r0, [r4, #0]
 800d63a:	b2ef      	uxtb	r7, r5
 800d63c:	1ac0      	subs	r0, r0, r3
 800d63e:	6963      	ldr	r3, [r4, #20]
 800d640:	b2ed      	uxtb	r5, r5
 800d642:	4283      	cmp	r3, r0
 800d644:	dc05      	bgt.n	800d652 <__swbuf_r+0x56>
 800d646:	0021      	movs	r1, r4
 800d648:	0030      	movs	r0, r6
 800d64a:	f7ff f8b7 	bl	800c7bc <_fflush_r>
 800d64e:	2800      	cmp	r0, #0
 800d650:	d1ed      	bne.n	800d62e <__swbuf_r+0x32>
 800d652:	68a3      	ldr	r3, [r4, #8]
 800d654:	3001      	adds	r0, #1
 800d656:	3b01      	subs	r3, #1
 800d658:	60a3      	str	r3, [r4, #8]
 800d65a:	6823      	ldr	r3, [r4, #0]
 800d65c:	1c5a      	adds	r2, r3, #1
 800d65e:	6022      	str	r2, [r4, #0]
 800d660:	701f      	strb	r7, [r3, #0]
 800d662:	6963      	ldr	r3, [r4, #20]
 800d664:	4283      	cmp	r3, r0
 800d666:	d004      	beq.n	800d672 <__swbuf_r+0x76>
 800d668:	89a3      	ldrh	r3, [r4, #12]
 800d66a:	07db      	lsls	r3, r3, #31
 800d66c:	d5e1      	bpl.n	800d632 <__swbuf_r+0x36>
 800d66e:	2d0a      	cmp	r5, #10
 800d670:	d1df      	bne.n	800d632 <__swbuf_r+0x36>
 800d672:	0021      	movs	r1, r4
 800d674:	0030      	movs	r0, r6
 800d676:	f7ff f8a1 	bl	800c7bc <_fflush_r>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d0d9      	beq.n	800d632 <__swbuf_r+0x36>
 800d67e:	e7d6      	b.n	800d62e <__swbuf_r+0x32>

0800d680 <__swsetup_r>:
 800d680:	4b2d      	ldr	r3, [pc, #180]	@ (800d738 <__swsetup_r+0xb8>)
 800d682:	b570      	push	{r4, r5, r6, lr}
 800d684:	0005      	movs	r5, r0
 800d686:	6818      	ldr	r0, [r3, #0]
 800d688:	000c      	movs	r4, r1
 800d68a:	2800      	cmp	r0, #0
 800d68c:	d004      	beq.n	800d698 <__swsetup_r+0x18>
 800d68e:	6a03      	ldr	r3, [r0, #32]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d101      	bne.n	800d698 <__swsetup_r+0x18>
 800d694:	f7fd fa86 	bl	800aba4 <__sinit>
 800d698:	220c      	movs	r2, #12
 800d69a:	5ea3      	ldrsh	r3, [r4, r2]
 800d69c:	071a      	lsls	r2, r3, #28
 800d69e:	d423      	bmi.n	800d6e8 <__swsetup_r+0x68>
 800d6a0:	06da      	lsls	r2, r3, #27
 800d6a2:	d407      	bmi.n	800d6b4 <__swsetup_r+0x34>
 800d6a4:	2209      	movs	r2, #9
 800d6a6:	602a      	str	r2, [r5, #0]
 800d6a8:	2240      	movs	r2, #64	@ 0x40
 800d6aa:	2001      	movs	r0, #1
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	81a3      	strh	r3, [r4, #12]
 800d6b0:	4240      	negs	r0, r0
 800d6b2:	e03a      	b.n	800d72a <__swsetup_r+0xaa>
 800d6b4:	075b      	lsls	r3, r3, #29
 800d6b6:	d513      	bpl.n	800d6e0 <__swsetup_r+0x60>
 800d6b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6ba:	2900      	cmp	r1, #0
 800d6bc:	d008      	beq.n	800d6d0 <__swsetup_r+0x50>
 800d6be:	0023      	movs	r3, r4
 800d6c0:	3344      	adds	r3, #68	@ 0x44
 800d6c2:	4299      	cmp	r1, r3
 800d6c4:	d002      	beq.n	800d6cc <__swsetup_r+0x4c>
 800d6c6:	0028      	movs	r0, r5
 800d6c8:	f7fe fa44 	bl	800bb54 <_free_r>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6d0:	2224      	movs	r2, #36	@ 0x24
 800d6d2:	89a3      	ldrh	r3, [r4, #12]
 800d6d4:	4393      	bics	r3, r2
 800d6d6:	81a3      	strh	r3, [r4, #12]
 800d6d8:	2300      	movs	r3, #0
 800d6da:	6063      	str	r3, [r4, #4]
 800d6dc:	6923      	ldr	r3, [r4, #16]
 800d6de:	6023      	str	r3, [r4, #0]
 800d6e0:	2308      	movs	r3, #8
 800d6e2:	89a2      	ldrh	r2, [r4, #12]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	81a3      	strh	r3, [r4, #12]
 800d6e8:	6923      	ldr	r3, [r4, #16]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d10b      	bne.n	800d706 <__swsetup_r+0x86>
 800d6ee:	21a0      	movs	r1, #160	@ 0xa0
 800d6f0:	2280      	movs	r2, #128	@ 0x80
 800d6f2:	89a3      	ldrh	r3, [r4, #12]
 800d6f4:	0089      	lsls	r1, r1, #2
 800d6f6:	0092      	lsls	r2, r2, #2
 800d6f8:	400b      	ands	r3, r1
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d003      	beq.n	800d706 <__swsetup_r+0x86>
 800d6fe:	0021      	movs	r1, r4
 800d700:	0028      	movs	r0, r5
 800d702:	f000 f853 	bl	800d7ac <__smakebuf_r>
 800d706:	220c      	movs	r2, #12
 800d708:	5ea3      	ldrsh	r3, [r4, r2]
 800d70a:	2101      	movs	r1, #1
 800d70c:	001a      	movs	r2, r3
 800d70e:	400a      	ands	r2, r1
 800d710:	420b      	tst	r3, r1
 800d712:	d00b      	beq.n	800d72c <__swsetup_r+0xac>
 800d714:	2200      	movs	r2, #0
 800d716:	60a2      	str	r2, [r4, #8]
 800d718:	6962      	ldr	r2, [r4, #20]
 800d71a:	4252      	negs	r2, r2
 800d71c:	61a2      	str	r2, [r4, #24]
 800d71e:	2000      	movs	r0, #0
 800d720:	6922      	ldr	r2, [r4, #16]
 800d722:	4282      	cmp	r2, r0
 800d724:	d101      	bne.n	800d72a <__swsetup_r+0xaa>
 800d726:	061a      	lsls	r2, r3, #24
 800d728:	d4be      	bmi.n	800d6a8 <__swsetup_r+0x28>
 800d72a:	bd70      	pop	{r4, r5, r6, pc}
 800d72c:	0799      	lsls	r1, r3, #30
 800d72e:	d400      	bmi.n	800d732 <__swsetup_r+0xb2>
 800d730:	6962      	ldr	r2, [r4, #20]
 800d732:	60a2      	str	r2, [r4, #8]
 800d734:	e7f3      	b.n	800d71e <__swsetup_r+0x9e>
 800d736:	46c0      	nop			@ (mov r8, r8)
 800d738:	20000018 	.word	0x20000018

0800d73c <__ascii_wctomb>:
 800d73c:	0003      	movs	r3, r0
 800d73e:	1e08      	subs	r0, r1, #0
 800d740:	d005      	beq.n	800d74e <__ascii_wctomb+0x12>
 800d742:	2aff      	cmp	r2, #255	@ 0xff
 800d744:	d904      	bls.n	800d750 <__ascii_wctomb+0x14>
 800d746:	228a      	movs	r2, #138	@ 0x8a
 800d748:	2001      	movs	r0, #1
 800d74a:	601a      	str	r2, [r3, #0]
 800d74c:	4240      	negs	r0, r0
 800d74e:	4770      	bx	lr
 800d750:	2001      	movs	r0, #1
 800d752:	700a      	strb	r2, [r1, #0]
 800d754:	e7fb      	b.n	800d74e <__ascii_wctomb+0x12>
	...

0800d758 <__swhatbuf_r>:
 800d758:	b570      	push	{r4, r5, r6, lr}
 800d75a:	000e      	movs	r6, r1
 800d75c:	001d      	movs	r5, r3
 800d75e:	230e      	movs	r3, #14
 800d760:	5ec9      	ldrsh	r1, [r1, r3]
 800d762:	0014      	movs	r4, r2
 800d764:	b096      	sub	sp, #88	@ 0x58
 800d766:	2900      	cmp	r1, #0
 800d768:	da0c      	bge.n	800d784 <__swhatbuf_r+0x2c>
 800d76a:	89b2      	ldrh	r2, [r6, #12]
 800d76c:	2380      	movs	r3, #128	@ 0x80
 800d76e:	0011      	movs	r1, r2
 800d770:	4019      	ands	r1, r3
 800d772:	421a      	tst	r2, r3
 800d774:	d114      	bne.n	800d7a0 <__swhatbuf_r+0x48>
 800d776:	2380      	movs	r3, #128	@ 0x80
 800d778:	00db      	lsls	r3, r3, #3
 800d77a:	2000      	movs	r0, #0
 800d77c:	6029      	str	r1, [r5, #0]
 800d77e:	6023      	str	r3, [r4, #0]
 800d780:	b016      	add	sp, #88	@ 0x58
 800d782:	bd70      	pop	{r4, r5, r6, pc}
 800d784:	466a      	mov	r2, sp
 800d786:	f000 f8ad 	bl	800d8e4 <_fstat_r>
 800d78a:	2800      	cmp	r0, #0
 800d78c:	dbed      	blt.n	800d76a <__swhatbuf_r+0x12>
 800d78e:	23f0      	movs	r3, #240	@ 0xf0
 800d790:	9901      	ldr	r1, [sp, #4]
 800d792:	021b      	lsls	r3, r3, #8
 800d794:	4019      	ands	r1, r3
 800d796:	4b04      	ldr	r3, [pc, #16]	@ (800d7a8 <__swhatbuf_r+0x50>)
 800d798:	18c9      	adds	r1, r1, r3
 800d79a:	424b      	negs	r3, r1
 800d79c:	4159      	adcs	r1, r3
 800d79e:	e7ea      	b.n	800d776 <__swhatbuf_r+0x1e>
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	2340      	movs	r3, #64	@ 0x40
 800d7a4:	e7e9      	b.n	800d77a <__swhatbuf_r+0x22>
 800d7a6:	46c0      	nop			@ (mov r8, r8)
 800d7a8:	ffffe000 	.word	0xffffe000

0800d7ac <__smakebuf_r>:
 800d7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ae:	2602      	movs	r6, #2
 800d7b0:	898b      	ldrh	r3, [r1, #12]
 800d7b2:	0005      	movs	r5, r0
 800d7b4:	000c      	movs	r4, r1
 800d7b6:	b085      	sub	sp, #20
 800d7b8:	4233      	tst	r3, r6
 800d7ba:	d007      	beq.n	800d7cc <__smakebuf_r+0x20>
 800d7bc:	0023      	movs	r3, r4
 800d7be:	3347      	adds	r3, #71	@ 0x47
 800d7c0:	6023      	str	r3, [r4, #0]
 800d7c2:	6123      	str	r3, [r4, #16]
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	6163      	str	r3, [r4, #20]
 800d7c8:	b005      	add	sp, #20
 800d7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7cc:	ab03      	add	r3, sp, #12
 800d7ce:	aa02      	add	r2, sp, #8
 800d7d0:	f7ff ffc2 	bl	800d758 <__swhatbuf_r>
 800d7d4:	9f02      	ldr	r7, [sp, #8]
 800d7d6:	9001      	str	r0, [sp, #4]
 800d7d8:	0039      	movs	r1, r7
 800d7da:	0028      	movs	r0, r5
 800d7dc:	f7fe fd4e 	bl	800c27c <_malloc_r>
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d108      	bne.n	800d7f6 <__smakebuf_r+0x4a>
 800d7e4:	220c      	movs	r2, #12
 800d7e6:	5ea3      	ldrsh	r3, [r4, r2]
 800d7e8:	059a      	lsls	r2, r3, #22
 800d7ea:	d4ed      	bmi.n	800d7c8 <__smakebuf_r+0x1c>
 800d7ec:	2203      	movs	r2, #3
 800d7ee:	4393      	bics	r3, r2
 800d7f0:	431e      	orrs	r6, r3
 800d7f2:	81a6      	strh	r6, [r4, #12]
 800d7f4:	e7e2      	b.n	800d7bc <__smakebuf_r+0x10>
 800d7f6:	2380      	movs	r3, #128	@ 0x80
 800d7f8:	89a2      	ldrh	r2, [r4, #12]
 800d7fa:	6020      	str	r0, [r4, #0]
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	81a3      	strh	r3, [r4, #12]
 800d800:	9b03      	ldr	r3, [sp, #12]
 800d802:	6120      	str	r0, [r4, #16]
 800d804:	6167      	str	r7, [r4, #20]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00c      	beq.n	800d824 <__smakebuf_r+0x78>
 800d80a:	0028      	movs	r0, r5
 800d80c:	230e      	movs	r3, #14
 800d80e:	5ee1      	ldrsh	r1, [r4, r3]
 800d810:	f000 f840 	bl	800d894 <_isatty_r>
 800d814:	2800      	cmp	r0, #0
 800d816:	d005      	beq.n	800d824 <__smakebuf_r+0x78>
 800d818:	2303      	movs	r3, #3
 800d81a:	89a2      	ldrh	r2, [r4, #12]
 800d81c:	439a      	bics	r2, r3
 800d81e:	3b02      	subs	r3, #2
 800d820:	4313      	orrs	r3, r2
 800d822:	81a3      	strh	r3, [r4, #12]
 800d824:	89a3      	ldrh	r3, [r4, #12]
 800d826:	9a01      	ldr	r2, [sp, #4]
 800d828:	4313      	orrs	r3, r2
 800d82a:	81a3      	strh	r3, [r4, #12]
 800d82c:	e7cc      	b.n	800d7c8 <__smakebuf_r+0x1c>

0800d82e <_raise_r>:
 800d82e:	b570      	push	{r4, r5, r6, lr}
 800d830:	0004      	movs	r4, r0
 800d832:	000d      	movs	r5, r1
 800d834:	291f      	cmp	r1, #31
 800d836:	d904      	bls.n	800d842 <_raise_r+0x14>
 800d838:	2316      	movs	r3, #22
 800d83a:	6003      	str	r3, [r0, #0]
 800d83c:	2001      	movs	r0, #1
 800d83e:	4240      	negs	r0, r0
 800d840:	bd70      	pop	{r4, r5, r6, pc}
 800d842:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800d844:	2b00      	cmp	r3, #0
 800d846:	d004      	beq.n	800d852 <_raise_r+0x24>
 800d848:	008a      	lsls	r2, r1, #2
 800d84a:	189b      	adds	r3, r3, r2
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	2a00      	cmp	r2, #0
 800d850:	d108      	bne.n	800d864 <_raise_r+0x36>
 800d852:	0020      	movs	r0, r4
 800d854:	f000 f842 	bl	800d8dc <_getpid_r>
 800d858:	002a      	movs	r2, r5
 800d85a:	0001      	movs	r1, r0
 800d85c:	0020      	movs	r0, r4
 800d85e:	f000 f82b 	bl	800d8b8 <_kill_r>
 800d862:	e7ed      	b.n	800d840 <_raise_r+0x12>
 800d864:	2a01      	cmp	r2, #1
 800d866:	d009      	beq.n	800d87c <_raise_r+0x4e>
 800d868:	1c51      	adds	r1, r2, #1
 800d86a:	d103      	bne.n	800d874 <_raise_r+0x46>
 800d86c:	2316      	movs	r3, #22
 800d86e:	6003      	str	r3, [r0, #0]
 800d870:	2001      	movs	r0, #1
 800d872:	e7e5      	b.n	800d840 <_raise_r+0x12>
 800d874:	2100      	movs	r1, #0
 800d876:	0028      	movs	r0, r5
 800d878:	6019      	str	r1, [r3, #0]
 800d87a:	4790      	blx	r2
 800d87c:	2000      	movs	r0, #0
 800d87e:	e7df      	b.n	800d840 <_raise_r+0x12>

0800d880 <raise>:
 800d880:	b510      	push	{r4, lr}
 800d882:	4b03      	ldr	r3, [pc, #12]	@ (800d890 <raise+0x10>)
 800d884:	0001      	movs	r1, r0
 800d886:	6818      	ldr	r0, [r3, #0]
 800d888:	f7ff ffd1 	bl	800d82e <_raise_r>
 800d88c:	bd10      	pop	{r4, pc}
 800d88e:	46c0      	nop			@ (mov r8, r8)
 800d890:	20000018 	.word	0x20000018

0800d894 <_isatty_r>:
 800d894:	2300      	movs	r3, #0
 800d896:	b570      	push	{r4, r5, r6, lr}
 800d898:	4d06      	ldr	r5, [pc, #24]	@ (800d8b4 <_isatty_r+0x20>)
 800d89a:	0004      	movs	r4, r0
 800d89c:	0008      	movs	r0, r1
 800d89e:	602b      	str	r3, [r5, #0]
 800d8a0:	f7f9 fa7f 	bl	8006da2 <_isatty>
 800d8a4:	1c43      	adds	r3, r0, #1
 800d8a6:	d103      	bne.n	800d8b0 <_isatty_r+0x1c>
 800d8a8:	682b      	ldr	r3, [r5, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d000      	beq.n	800d8b0 <_isatty_r+0x1c>
 800d8ae:	6023      	str	r3, [r4, #0]
 800d8b0:	bd70      	pop	{r4, r5, r6, pc}
 800d8b2:	46c0      	nop			@ (mov r8, r8)
 800d8b4:	2000053c 	.word	0x2000053c

0800d8b8 <_kill_r>:
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	b570      	push	{r4, r5, r6, lr}
 800d8bc:	4d06      	ldr	r5, [pc, #24]	@ (800d8d8 <_kill_r+0x20>)
 800d8be:	0004      	movs	r4, r0
 800d8c0:	0008      	movs	r0, r1
 800d8c2:	0011      	movs	r1, r2
 800d8c4:	602b      	str	r3, [r5, #0]
 800d8c6:	f7f9 f9fe 	bl	8006cc6 <_kill>
 800d8ca:	1c43      	adds	r3, r0, #1
 800d8cc:	d103      	bne.n	800d8d6 <_kill_r+0x1e>
 800d8ce:	682b      	ldr	r3, [r5, #0]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d000      	beq.n	800d8d6 <_kill_r+0x1e>
 800d8d4:	6023      	str	r3, [r4, #0]
 800d8d6:	bd70      	pop	{r4, r5, r6, pc}
 800d8d8:	2000053c 	.word	0x2000053c

0800d8dc <_getpid_r>:
 800d8dc:	b510      	push	{r4, lr}
 800d8de:	f7f9 f9ec 	bl	8006cba <_getpid>
 800d8e2:	bd10      	pop	{r4, pc}

0800d8e4 <_fstat_r>:
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	b570      	push	{r4, r5, r6, lr}
 800d8e8:	4d06      	ldr	r5, [pc, #24]	@ (800d904 <_fstat_r+0x20>)
 800d8ea:	0004      	movs	r4, r0
 800d8ec:	0008      	movs	r0, r1
 800d8ee:	0011      	movs	r1, r2
 800d8f0:	602b      	str	r3, [r5, #0]
 800d8f2:	f7f9 fa48 	bl	8006d86 <_fstat>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	d103      	bne.n	800d902 <_fstat_r+0x1e>
 800d8fa:	682b      	ldr	r3, [r5, #0]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d000      	beq.n	800d902 <_fstat_r+0x1e>
 800d900:	6023      	str	r3, [r4, #0]
 800d902:	bd70      	pop	{r4, r5, r6, pc}
 800d904:	2000053c 	.word	0x2000053c

0800d908 <_init>:
 800d908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d90a:	46c0      	nop			@ (mov r8, r8)
 800d90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d90e:	bc08      	pop	{r3}
 800d910:	469e      	mov	lr, r3
 800d912:	4770      	bx	lr

0800d914 <_fini>:
 800d914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d916:	46c0      	nop			@ (mov r8, r8)
 800d918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d91a:	bc08      	pop	{r3}
 800d91c:	469e      	mov	lr, r3
 800d91e:	4770      	bx	lr
